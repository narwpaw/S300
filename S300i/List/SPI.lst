###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           04/Jun/2013  20:18:15 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\Framework\SPI.c                               #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\Framework\SPI.c" -D AT91SAM7S256 -D           #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.3 -         #
#                    04.06.2013\S300i\List\" --diag_suppress Pa082 -o         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\S300i\Obj\" --debug --endian little --cpu     #
#                    ARM7TDMI -e --fpu None --dlib_config "C:\Program Files   #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 - 04.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.3 - 04.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.3 - 04.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Oh                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\S300i\List\SPI.lst                            #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\S300i\Obj\SPI.o                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 - 04.06.2013\Framework\SPI.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : SPI.c                                  *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 17.06.2008                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*//
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          
     24          //Zmienne konfiguracyjne -------------------------------------------------------     
     25          
     26              //US0----------------------

   \                                 In section .data, align 4
     27                int  g_SPI_BAUDRATE             = 500000;                                   //prêdkoœæ transmisji US0
   \                     g_SPI_BAUDRATE:
   \   00000000   20A10700           DC32 500000

   \                                 In section .data, align 4
     28                int  SPI_Comm_TIMEOUT           = 500;                                      //(w ms) Czas oczekiwania na odpowiedŸ urz¹dzenia odpytywanego poprzez MODBUS
   \                     SPI_Comm_TIMEOUT:
   \   00000000   F4010000           DC32 500
     29          
     30                
     31          //___________________________Koniec zmiennych lokalnych________________________
     32          
     33          
     34          
     35          
     36          
     37          //------------------------------------------------------------------------------
     38          //      Includes
     39          //------------------------------------------------------------------------------
     40          #include "core/common.h"
     41          #include "core/device.h"                                                        //aduje bibliotreki dla odpowiedniego procesora

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_Open(AT91PS_PDC)
   \                     AT91F_PDC_Open:
   \   00000000   0221               MOVS     R1,#+2
   \   00000002   0162               STR      R1,[R0, #+32]
   \   00000004   0902               LSLS     R1,R1,#+8
   \   00000006   0162               STR      R1,[R0, #+32]
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   8161               STR      R1,[R0, #+24]
   \   0000000C   C161               STR      R1,[R0, #+28]
   \   0000000E   0161               STR      R1,[R0, #+16]
   \   00000010   4161               STR      R1,[R0, #+20]
   \   00000012   8160               STR      R1,[R0, #+8]
   \   00000014   C160               STR      R1,[R0, #+12]
   \   00000016   0160               STR      R1,[R0, #+0]
   \   00000018   4160               STR      R1,[R0, #+4]
   \   0000001A   0121               MOVS     R1,#+1
   \   0000001C   0162               STR      R1,[R0, #+32]
   \   0000001E   0902               LSLS     R1,R1,#+8
   \   00000020   0162               STR      R1,[R0, #+32]
   \   00000022   7047               BX       LR               ;; return
     42          #include "core/board.h"
     43          //#include "core/trace.h"
     44          #include "SPI_H.h"
     45          
     46          
     47          
     48          //Zmienne lokalne -------------------------------------------------------------
     49              
     50          //___________________________Koniec zmiennych lokalnych________________________
     51          
     52          
     53              
     54             // #define SPI_Read_BUFFER_SIZE             30                                 //bufor odbiorczy SPI   //14.03.2013 - zmniejszenie bufora do 30B
     55             // #define SPI_Write_BUFFER_SIZE            30                                 //bufor nadawczy SPI    //14.03.2013 - zmniejszenie bufora do 30B
     56          
     57          //Zmienne globalne -------------------------------------------------------------
     58              //unsigned char  SPI_Buffer_Rx[SPI_Read_BUFFER_SIZE];                         //bufor odbiorczy SPI 0
     59              //unsigned char  SPI_Buffer_Tx[SPI_Write_BUFFER_SIZE];                        //bufor odbiorczy SPI 0
     60              
     61              
     62          
     63              
     64          //___________________________Koniec zmiennych globalnych________________________
     65              
     66              
     67          
     68          //Zmienne zewnêtrzne -----------------------------------------------------------    
     69          extern void Delay (unsigned long a);
     70          //___________________________Koniec zmiennych zewnêtrznych______________________    
     71           
     72          
     73              
     74              
     75              
     76              
     77          //-----------------------------------------------------------------------------
     78          //!  Nazwa funkcji :    US0_init
     79          //!  Funkcja inicjalizacji USART 0
     80          //-----------------------------------------------------------------------------
     81          //! 
     82          //-----------------------------------------------------------------------------
     83              
     84              
     85              
     86              

   \                                 In section Debug.txt, align 4, keep-with-next
     87          void EnableSpi() 
     88          { 
     89             AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, // PIO controller base address 
     90                                  ((unsigned int) 1 << AT91C_ID_SPI)); 
   \                     EnableSpi:
   \   00000000   ....               LDR      R0,??DataTable2  ;; 0xfffffc10
   \   00000002   2021               MOVS     R1,#+32
   \   00000004   0160               STR      R1,[R0, #+0]
     91             AT91F_SPI_Enable (AT91C_BASE_SPI); 
   \   00000006   ....               LDR      R0,??DataTable3  ;; 0xfffe0000
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0160               STR      R1,[R0, #+0]
     92          } 
   \   0000000C   7047               BX       LR               ;; return
     93          

   \                                 In section Debug.txt, align 4, keep-with-next
     94          void DisableSpi() 
     95          { 
     96             AT91F_PMC_DisablePeriphClock(AT91C_BASE_PMC, // PIO controller base address 
     97                                  ((unsigned int) 1 << AT91C_ID_SPI)); 
   \                     DisableSpi:
   \   00000000   0148               LDR      R0,??DisableSpi_0  ;; 0xfffffc14
   \   00000002   2021               MOVS     R1,#+32
   \   00000004   0160               STR      R1,[R0, #+0]
     98             
     99          } 
   \   00000006   7047               BX       LR               ;; return
   \                     ??DisableSpi_0:
   \   00000008   14FCFFFF           DC32     0xfffffc14
    100          
    101          #define MCK 48054841
    102          #define spi AT91C_BASE_SPI
    103          #define spi_pdc AT91C_BASE_PDC_SPI
    104          #define SPIBAUD 1000000
    105          #define CS_BAUD MCK / SPIBAUD

   \                                 In section Debug.txt, align 4, keep-with-next
    106          void SPI_init(void) 
    107          { 
   \                     SPI_init:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    108              //AT91F_SPI_Disable (AT91C_BASE_SPI);   
    109              
    110              
    111              AT91F_SPI_CfgPIO();                 // Konfiguruj wejœcia  
   \   00000002   0F48               LDR      R0,??SPI_init_0  ;; 0xfffff470
   \   00000004   F021               MOVS     R1,#+240
   \   00000006   C901               LSLS     R1,R1,#+7        ;; #+30720
   \   00000008   0160               STR      R1,[R0, #+0]
   \   0000000A   0E48               LDR      R0,??SPI_init_0+0x4  ;; 0xfffff474
   \   0000000C   8021               MOVS     R1,#+128
   \   0000000E   8900               LSLS     R1,R1,#+2        ;; #+512
   \   00000010   0160               STR      R1,[R0, #+0]
   \   00000012   0D48               LDR      R0,??SPI_init_0+0x8  ;; 0xfffff404
   \   00000014   F421               MOVS     R1,#+244
   \   00000016   C901               LSLS     R1,R1,#+7        ;; #+31232
   \   00000018   0160               STR      R1,[R0, #+0]
    112              AT91F_SPI_CfgPMC();                 // Konfiguracja PMC na uaktywnienie zegara peryferjów SPI 
   \   0000001A   ....               LDR      R4,??DataTable2  ;; 0xfffffc10
   \   0000001C   2025               MOVS     R5,#+32
   \   0000001E   2560               STR      R5,[R4, #+0]
    113              AT91F_SPI_Reset (AT91C_BASE_SPI);   // Reset SPI
   \   00000020   ....               LDR      R6,??DataTable3  ;; 0xfffe0000
   \   00000022   8020               MOVS     R0,#+128
   \   00000024   3060               STR      R0,[R6, #+0]
    114          
    115             
    116             //  spi->SPI_MR = ((32 << 24) | AT91C_SPI_MSTR | /* Master */
    117             //                    AT91C_SPI_PS_FIXED); /* Fixed periheral (== 0) */
    118             
    119              
    120             // AT91F_SPI_CfgMode (AT91C_BASE_SPI, AT91C_SPI_MSTR | AT91C_SPI_PS_FIXED | AT91C_SPI_PCSDEC); 
    121              
    122             // AT91F_SPI_CfgMode (AT91C_BASE_SPI, AT91C_SPI_MSTR | AT91C_SPI_PS_VARIABLE |AT91C_SPI_PCSDEC ); 
    123              
    124               
    125          
    126               
    127          /*
    128              AT91F_SPI_CfgCs(spi, 0,
    129          AT91C_SPI_CPOL | 
    130          (AT91C_SPI_BITS & AT91C_SPI_BITS_8) |
    131          (AT91C_SPI_SCBR & (CS_BAUD << 8)) |
    132          (AT91C_SPI_DLYBS & (128 << 16)) |
    133          (AT91C_SPI_DLYBCT & (0 << 24)) 
    134          );
    135          */
    136          
    137           AT91F_SPI_CfgMode (AT91C_BASE_SPI, AT91C_SPI_MSTR | AT91C_SPI_PS_FIXED | AT91C_SPI_PCSDEC | 1<<16);    
   \   00000026   0948               LDR      R0,??SPI_init_0+0xC  ;; 0xfffe0004
   \   00000028   0949               LDR      R1,??SPI_init_0+0x10  ;; 0x10005
   \   0000002A   0160               STR      R1,[R0, #+0]
    138              
    139           
    140           
    141           AT91F_PDC_Open(spi_pdc);
   \   0000002C   ....               LDR      R0,??DataTable5  ;; 0xfffe0100
   \   0000002E   ........           BL       AT91F_PDC_Open
    142          
    143             
    144              
    145              
    146              
    147          
    148              
    149              EnableSpi(); 
   \   00000032   2560               STR      R5,[R4, #+0]
   \   00000034   0120               MOVS     R0,#+1
   \   00000036   3060               STR      R0,[R6, #+0]
    150          } 
   \   00000038   70BC               POP      {R4-R6}
   \   0000003A   01BC               POP      {R0}
   \   0000003C   0047               BX       R0               ;; return
   \   0000003E   C046               Nop      
   \                     ??SPI_init_0:
   \   00000040   70F4FFFF           DC32     0xfffff470
   \   00000044   74F4FFFF           DC32     0xfffff474
   \   00000048   04F4FFFF           DC32     0xfffff404
   \   0000004C   0400FEFF           DC32     0xfffe0004
   \   00000050   05000100           DC32     0x10005
    151          

   \                                 In section .data, align 4
    152          int TMPx=10000;
   \                     TMPx:
   \   00000000   10270000           DC32 10000
    153          

   \                                 In section Debug.txt, align 4, keep-with-next
    154          void ReadWriteSpi (unsigned char* pReadBuffer, int nReadLen, unsigned char* pWriteBuffer, int nWriteLen, bool bHoldCS) 
    155          { 
   \                     ReadWriteSpi:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1700               MOVS     R7,R2
   \   00000008   1E00               MOVS     R6,R3
   \   0000000A   08A8               ADD      R0,SP,#+32
   \   0000000C   0078               LDRB     R0,[R0, #+0]
    156             // Configure SPI 
    157          
    158           //   AT91C_BASE_PIOA->PIO_ODR = AT91C_PA12_MISO; //Configure in Input
    159           // AT91C_BASE_PIOA->PIO_PPUER = AT91C_PA12_MISO; //Enable PA15
    160            
    161             //AT91F_SPI_CfgCs (AT91C_BASE_SPI, 0, AT91C_SPI_CPOL | AT91C_SPI_BITS_8 |  (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0) |0x01010000 );  
    162             AT91F_SPI_CfgCs (AT91C_BASE_SPI, 1, AT91C_SPI_CPOL |  AT91C_SPI_BITS_8 |  (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0) | 0x01010000); 
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   00D0               BEQ      ??ReadWriteSpi_0
   \   00000012   0820               MOVS     R0,#+8
   \                     ??ReadWriteSpi_0:
   \   00000014   3449               LDR      R1,??ReadWriteSpi_1  ;; 0x1013001
   \   00000016   0143               ORRS     R1,R1,R0
   \   00000018   3448               LDR      R0,??ReadWriteSpi_1+0x4  ;; 0xfffe0034
   \   0000001A   0160               STR      R1,[R0, #+0]
    163            
    164             //AT91F_SPI_CfgCs (AT91C_BASE_SPI, 0, AT91C_SPI_CPOL | AT91C_SPI_BITS_8 |  (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0));  
    165             //AT91F_SPI_CfgCs (AT91C_BASE_SPI, 1, AT91C_SPI_CPOL |  AT91C_SPI_BITS_8 |  (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0)); 
    166            
    167             // AT91F_SPI_CfgCs (AT91C_BASE_SPI, 0, AT91C_SPI_NCPHA | AT91C_SPI_CPOL | AT91C_SPI_BITS_8 | (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0));  
    168             // AT91F_SPI_CfgCs (AT91C_BASE_SPI, 1, AT91C_SPI_NCPHA | AT91C_SPI_CPOL |  AT91C_SPI_BITS_8 | (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0)); 
    169             
    170             // AT91F_SPI_CfgCs (AT91C_BASE_SPI, 0,  AT91C_SPI_NCPHA |  AT91C_SPI_BITS_8 |  (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0));  
    171             // AT91F_SPI_CfgCs (AT91C_BASE_SPI, 1,  AT91C_SPI_NCPHA |  AT91C_SPI_BITS_8 |  (AT91C_SPI_SCBR & (CS_BAUD << 8)) | (bHoldCS ? AT91C_SPI_CSAAT : 0)); 
    172                
    173                
    174             //AT91C_BASE_SPI->SPI_TDR |= 1<<16;
    175          
    176            
    177             // Open the SPI - PDC (Reset) 
    178             AT91F_PDC_Open (AT91C_BASE_PDC_SPI); 
   \   0000001C   ....               LDR      R5,??DataTable5  ;; 0xfffe0100
   \   0000001E   2800               MOVS     R0,R5
   \   00000020   ........           BL       AT91F_PDC_Open
    179              
    180             // Disable Spi activity during initialization 
    181             AT91F_PDC_DisableRx (AT91C_BASE_PDC_SPI); 
   \   00000024   3248               LDR      R0,??ReadWriteSpi_1+0x8  ;; 0xfffe0120
   \   00000026   0221               MOVS     R1,#+2
   \   00000028   0160               STR      R1,[R0, #+0]
    182             AT91F_PDC_DisableTx (AT91C_BASE_PDC_SPI); 
   \   0000002A   0902               LSLS     R1,R1,#+8
   \   0000002C   0160               STR      R1,[R0, #+0]
    183          
    184             // Initialize buffers 
    185             const char* pWBuffer; 
    186             if (nWriteLen == 0)     // Read-only 
   \   0000002E   002E               CMP      R6,#+0
   \   00000030   01D1               BNE      ??ReadWriteSpi_2
    187             { 
    188                nWriteLen = nReadLen; 
   \   00000032   2600               MOVS     R6,R4
    189                pWBuffer = (char*) pReadBuffer; 
   \   00000034   029F               LDR      R7,[SP, #+8]
    190             } 
    191              else 
    192                pWBuffer = (const char*) pWriteBuffer;
    193          
    194             if (nWriteLen < nReadLen)
   \                     ??ReadWriteSpi_2:
   \   00000036   A642               CMP      R6,R4
   \   00000038   00DA               BGE      ??ReadWriteSpi_3
    195             {
    196                nWriteLen = nReadLen;
   \   0000003A   2600               MOVS     R6,R4
    197             }
    198             
    199          
    200             AT91F_SPI_SendFrame (AT91C_BASE_SPI, (char*) pWBuffer, nWriteLen, 0, 0); 
   \                     ??ReadWriteSpi_3:
   \   0000003C   0096               STR      R6,[SP, #+0]
   \   0000003E   2D4A               LDR      R2,??ReadWriteSpi_1+0xC  ;; 0xfffe010c
   \   00000040   1368               LDR      R3,[R2, #+0]
   \   00000042   002B               CMP      R3,#+0
   \   00000044   09D1               BNE      ??ReadWriteSpi_4
   \   00000046   2C4B               LDR      R3,??ReadWriteSpi_1+0x10  ;; 0xfffe0108
   \   00000048   1F60               STR      R7,[R3, #+0]
   \   0000004A   009B               LDR      R3,[SP, #+0]
   \   0000004C   1360               STR      R3,[R2, #+0]
   \   0000004E   0023               MOVS     R3,#+0
   \   00000050   2A4E               LDR      R6,??ReadWriteSpi_1+0x14  ;; 0xfffe0118
   \   00000052   3360               STR      R3,[R6, #+0]
   \   00000054   2A4E               LDR      R6,??ReadWriteSpi_1+0x18  ;; 0xfffe011c
   \   00000056   3360               STR      R3,[R6, #+0]
   \   00000058   07E0               B        ??ReadWriteSpi_5
   \                     ??ReadWriteSpi_4:
   \   0000005A   294B               LDR      R3,??ReadWriteSpi_1+0x18  ;; 0xfffe011c
   \   0000005C   1E68               LDR      R6,[R3, #+0]
   \   0000005E   002E               CMP      R6,#+0
   \   00000060   03D1               BNE      ??ReadWriteSpi_5
   \   00000062   264E               LDR      R6,??ReadWriteSpi_1+0x14  ;; 0xfffe0118
   \   00000064   3760               STR      R7,[R6, #+0]
   \   00000066   009E               LDR      R6,[SP, #+0]
   \   00000068   1E60               STR      R6,[R3, #+0]
    201             
    202             // Start transfers 
    203             if (nReadLen != 0)      // Read-only 
   \                     ??ReadWriteSpi_5:
   \   0000006A   002C               CMP      R4,#+0
   \   0000006C   16D0               BEQ      ??ReadWriteSpi_6
    204             { 
    205          
    206                AT91F_SPI_ReceiveFrame (AT91C_BASE_SPI, (char*) pReadBuffer, nReadLen, 0, 0); 
   \   0000006E   254B               LDR      R3,??ReadWriteSpi_1+0x1C  ;; 0xfffe0104
   \   00000070   1E68               LDR      R6,[R3, #+0]
   \   00000072   002E               CMP      R6,#+0
   \   00000074   08D1               BNE      ??ReadWriteSpi_7
   \   00000076   029E               LDR      R6,[SP, #+8]
   \   00000078   2E60               STR      R6,[R5, #+0]
   \   0000007A   1C60               STR      R4,[R3, #+0]
   \   0000007C   0023               MOVS     R3,#+0
   \   0000007E   224C               LDR      R4,??ReadWriteSpi_1+0x20  ;; 0xfffe0110
   \   00000080   2360               STR      R3,[R4, #+0]
   \   00000082   224C               LDR      R4,??ReadWriteSpi_1+0x24  ;; 0xfffe0114
   \   00000084   2360               STR      R3,[R4, #+0]
   \   00000086   07E0               B        ??ReadWriteSpi_8
   \                     ??ReadWriteSpi_7:
   \   00000088   204B               LDR      R3,??ReadWriteSpi_1+0x24  ;; 0xfffe0114
   \   0000008A   1E68               LDR      R6,[R3, #+0]
   \   0000008C   002E               CMP      R6,#+0
   \   0000008E   03D1               BNE      ??ReadWriteSpi_8
   \   00000090   1D4E               LDR      R6,??ReadWriteSpi_1+0x20  ;; 0xfffe0110
   \   00000092   029F               LDR      R7,[SP, #+8]
   \   00000094   3760               STR      R7,[R6, #+0]
   \   00000096   1C60               STR      R4,[R3, #+0]
    207                AT91F_PDC_EnableRx (AT91C_BASE_PDC_SPI); 
   \                     ??ReadWriteSpi_8:
   \   00000098   0123               MOVS     R3,#+1
   \   0000009A   0360               STR      R3,[R0, #+0]
    208             } 
    209             
    210              AT91F_PDC_EnableTx (AT91C_BASE_PDC_SPI); 
   \                     ??ReadWriteSpi_6:
   \   0000009C   4B08               LSRS     R3,R1,#+1
   \   0000009E   0360               STR      R3,[R0, #+0]
   \   000000A0   4023               MOVS     R3,#+64
   \   000000A2   8024               MOVS     R4,#+128
   \   000000A4   1A4E               LDR      R6,??ReadWriteSpi_1+0x28  ;; 0xfffe0010
    211                
    212          
    213              //AT91C_BASE_SPI->SPI_IER = AT91C_SPI_ENDTX|AT91C_SPI_ENDRX; 
    214              // Wait Until Last RX 
    215          //    while (! (AT91C_BASE_SPI->SPI_SR & AT91C_SPI_ENDRX)); 
    216          
    217             
    218             while ((AT91C_BASE_SPI->SPI_SR & AT91C_SPI_TXBUFE) == 0 && (AT91C_BASE_SPI->SPI_SR & AT91C_SPI_RXBUFF) == 0); 
   \                     ??ReadWriteSpi_9:
   \   000000A6   3768               LDR      R7,[R6, #+0]
   \   000000A8   2742               TST      R7,R4
   \   000000AA   02D1               BNE      ??ReadWriteSpi_10
   \   000000AC   3768               LDR      R7,[R6, #+0]
   \   000000AE   1F42               TST      R7,R3
   \   000000B0   F9D0               BEQ      ??ReadWriteSpi_9
    219          
    220          
    221             
    222             AT91F_PDC_Close (AT91C_BASE_PDC_SPI); 
   \                     ??ReadWriteSpi_10:
   \   000000B2   0223               MOVS     R3,#+2
   \   000000B4   0360               STR      R3,[R0, #+0]
   \   000000B6   0160               STR      R1,[R0, #+0]
   \   000000B8   0023               MOVS     R3,#+0
   \   000000BA   1048               LDR      R0,??ReadWriteSpi_1+0x14  ;; 0xfffe0118
   \   000000BC   0360               STR      R3,[R0, #+0]
   \   000000BE   1048               LDR      R0,??ReadWriteSpi_1+0x18  ;; 0xfffe011c
   \   000000C0   0360               STR      R3,[R0, #+0]
   \   000000C2   1148               LDR      R0,??ReadWriteSpi_1+0x20  ;; 0xfffe0110
   \   000000C4   0360               STR      R3,[R0, #+0]
   \   000000C6   1148               LDR      R0,??ReadWriteSpi_1+0x24  ;; 0xfffe0114
   \   000000C8   0360               STR      R3,[R0, #+0]
   \   000000CA   0B48               LDR      R0,??ReadWriteSpi_1+0x10  ;; 0xfffe0108
   \   000000CC   0360               STR      R3,[R0, #+0]
   \   000000CE   1360               STR      R3,[R2, #+0]
   \   000000D0   2B60               STR      R3,[R5, #+0]
   \   000000D2   0C48               LDR      R0,??ReadWriteSpi_1+0x1C  ;; 0xfffe0104
   \   000000D4   0360               STR      R3,[R0, #+0]
    223          
    224          // Flush SPI RDR buffer (in case there is pending data) 
    225             volatile int nRDR = AT91F_SPI_GetChar (AT91C_BASE_SPI); 
   \   000000D6   0F48               LDR      R0,??ReadWriteSpi_1+0x2C  ;; 0xfffe0008
   \   000000D8   0068               LDR      R0,[R0, #+0]
   \   000000DA   0004               LSLS     R0,R0,#+16
   \   000000DC   000C               LSRS     R0,R0,#+16
   \   000000DE   0090               STR      R0,[SP, #+0]
    226          } 
   \   000000E0   FEBC               POP      {R1-R7}
   \   000000E2   01BC               POP      {R0}
   \   000000E4   0047               BX       R0               ;; return
   \   000000E6   C046               Nop      
   \                     ??ReadWriteSpi_1:
   \   000000E8   01300101           DC32     0x1013001
   \   000000EC   3400FEFF           DC32     0xfffe0034
   \   000000F0   2001FEFF           DC32     0xfffe0120
   \   000000F4   0C01FEFF           DC32     0xfffe010c
   \   000000F8   0801FEFF           DC32     0xfffe0108
   \   000000FC   1801FEFF           DC32     0xfffe0118
   \   00000100   1C01FEFF           DC32     0xfffe011c
   \   00000104   0401FEFF           DC32     0xfffe0104
   \   00000108   1001FEFF           DC32     0xfffe0110
   \   0000010C   1401FEFF           DC32     0xfffe0114
   \   00000110   1000FEFF           DC32     0xfffe0010
   \   00000114   0800FEFF           DC32     0xfffe0008

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   10FCFFFF           DC32     0xfffffc10

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0000FEFF           DC32     0xfffe0000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0001FEFF           DC32     0xfffe0100
    227          
    228          
    229          
    230          
    231          
    232          
    233          
    234          
    235          
    236          
    237          
    238          
    239          
    240          
    241          
    242          
    243          
    244          
    245          
    246          
    247            
    248            
    249            /*
    250            
    251            
    252                // Configure USART
    253                AT91F_US0_CfgPMC();
    254                AT91F_PDC_DisableRx(AT91C_BASE_PDC_SPI);
    255                AT91F_PDC_DisableTx(AT91C_BASE_PDC_SPI);
    256                
    257                AT91F_SPI_Configure(AT91C_BASE_US0, AT91C_MASTER_CLOCK, USART485_MODE_8_PA, g_US0_BAUDRATE, 0);
    258          
    259                AT91C_BASE_US0->US_CR = AT91C_US_STTTO;
    260          
    261                AT91F_US_EnableIt(AT91C_BASE_US0,AT91C_US_RXBUFF | AT91C_US_TIMEOUT );     //uruchomienie/ustawienie przerwania od przepe³nienia bufora oraz od time-out
    262          
    263                // konfiguracja przerqwania USART0 
    264                AT91F_AIC_ConfigureIt ( AT91C_BASE_AIC, AT91C_ID_US0, USART0_INTERRUPT_LEVEL, AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL, Usart0_handler); 
    265                  
    266                AT91F_US_EnableRx(AT91C_BASE_US0);
    267                AT91F_US_EnableTx(AT91C_BASE_US0);
    268          
    269                
    270                AT91F_US0_CfgPIO();                                                       //konfiguracja pinów
    271                
    272                unsigned int xxx= AT91F_US_ReceiveFrame (                                 //Ustawienie bufora odbiorczego
    273          	AT91C_BASE_US0,
    274          	US0_Buffer,
    275          	US_BUFFER_SIZE,
    276          	0,
    277          	0 );
    278          
    279                AT91C_BASE_US0->US_RTOR = TIME_OUT_US;                                    //ustawienie czasu time-out (w bitach)
    280                AT91C_BASE_US0->US_CR = AT91C_US_STTTO;                                   //restart time-out
    281                
    282                AT91F_AIC_EnableIt (AT91C_BASE_AIC, AT91C_ID_US0);                        //uruchomienie przerwania od USARTA
    283                
    284                g_US0_OneByteTxTime  = 1000/ ((float) (g_US0_BAUDRATE /8));
    285          }//_______________________ Koniec funkcji US0_init ____________________________ 
    286          
    287          
    288          
    289          
    290          
    291          
    292          //-----------------------------------------------------------------------------
    293          //! Nazwa funkcji :    Usart0_handler
    294          //! Funkcja obs³ugi przerwania USART 0
    295          //-----------------------------------------------------------------------------
    296          //  
    297          //----------------------------------------------------------------------------- 
    298          void Usart0_handler(void)                        //timer isr 
    299          { 
    300            //char CheckNoZero;                          //sprawdza czy tabela odczytów TP nie ma zer
    301              unsigned int dummy = AT91C_BASE_US0->US_CSR;                  //interrupts    
    302          
    303              AT91PS_USART USART_pt = AT91C_BASE_US0; 
    304              unsigned int status; 
    305              
    306              
    307              // get Usart status register 
    308              status = USART_pt->US_CSR; 
    309             
    310               
    311              if ( status & AT91C_US_TIMEOUT)       //wystapil timeout lub odebrano dane
    312                {
    313          
    314                  AT91C_BASE_US0->US_CR = AT91C_US_STTTO;
    315                  AT91C_BASE_US0->US_RCR = 0;
    316          
    317                  unsigned int xxx= AT91F_US_ReceiveFrame (
    318          	USART_pt,
    319          	US0_Buffer,
    320          	US_BUFFER_SIZE,
    321          	0,
    322          	0 );
    323                  
    324                  SendModbusEnable=1;
    325                  
    326          
    327                  if (US0_MasterMODBUS_ENABLE)                                            
    328                  {
    329                    if (ModBus_MASTER_Return(US0_Buffer,0))                             //je¿eli Modbus US0 w trybie master
    330                    {
    331                      g_US0_Connect_OK=2;        
    332                      SendModbusEnable=1;
    333                    }
    334                    
    335                  }
    336                  else
    337                  { 
    338                    if (ModBus_CommS(US0_Buffer,0)) g_US0_Connect_OK=2;                 //je¿eli Modbus US0 w trybie slave
    339                  }
    340                    
    341            
    342            
    343                  status = USART_pt->US_CSR; 
    344          
    345          
    346                }
    347          }//_______________________ Koniec funkcji Usart0_handler _________________________
    348           
    349          
    350          
    351          
    352          
    353          
    354          
    355          //-----------------------------------------------------------------------------
    356          //!  Nazwa funkcji :    US1_init
    357          //!  Funkcja inicjalizacji USART 1
    358          //-----------------------------------------------------------------------------
    359          //! 
    360          //-----------------------------------------------------------------------------
    361          void US1_init(void)
    362          {
    363                // Configure USART
    364                AT91F_US1_CfgPMC();
    365                AT91F_PDC_DisableRx(AT91C_BASE_PDC_US1);
    366                AT91F_PDC_DisableTx(AT91C_BASE_PDC_US1);
    367                
    368                AT91F_US_Configure(AT91C_BASE_US1, AT91C_MASTER_CLOCK,
    369                                 USART485_MODE, g_US1_BAUDRATE, 0);
    370              
    371                AT91C_BASE_US1->US_CR = AT91C_US_STTTO;
    372          
    373                AT91F_US_EnableIt(AT91C_BASE_US1,AT91C_US_RXBUFF | AT91C_US_TIMEOUT );     //uruchomienie/ustawienie przerwania od przepe³nienia bufora oraz od time-out
    374          
    375                // konfiguracja przerqwania USART0 
    376                AT91F_AIC_ConfigureIt ( AT91C_BASE_AIC, AT91C_ID_US1, USART0_INTERRUPT_LEVEL, AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL, Usart1_handler); 
    377                  
    378                AT91F_US_EnableRx(AT91C_BASE_US1);
    379                AT91F_US_EnableTx(AT91C_BASE_US1);
    380          
    381                
    382                AT91F_US1_CfgPIO();                                                       //konfiguracja pinów
    383                
    384                unsigned int xxx= AT91F_US_ReceiveFrame (                                 //Ustawienie bufora odbiorczego
    385          	AT91C_BASE_US1,
    386          	US1_Buffer,
    387          	US_BUFFER_SIZE,
    388          	0,
    389          	0 );
    390          
    391                AT91C_BASE_US1->US_RTOR = TIME_OUT_US;                                    //ustawienie czasu time-out (w bitach)
    392                AT91C_BASE_US1->US_CR = AT91C_US_STTTO;                                   //restart time-out
    393                
    394                AT91F_AIC_EnableIt (AT91C_BASE_AIC, AT91C_ID_US1);                        //uruchomienie przerwania od USARTA
    395                
    396                g_US1_OneByteTxTime  = 1000/ ((float) (g_US1_BAUDRATE /8));
    397          }//_______________________ Koniec funkcji US1_init ____________________________ 
    398          
    399          
    400          
    401          
    402          
    403          
    404          //-----------------------------------------------------------------------------
    405          //! Nazwa funkcji :    Usart1_handler 
    406          //! Funkcja obs³ugi przerwania USART 1
    407          //-----------------------------------------------------------------------------
    408          //  
    409          //----------------------------------------------------------------------------- 
    410          void Usart1_handler(void)                        //timer isr 
    411          { 
    412            
    413            
    414            //char CheckNoZero;                          //sprawdza czy tabela odczytów TP nie ma zer
    415              unsigned int dummy = AT91C_BASE_US1->US_CSR;                  //interrupts    
    416          
    417              AT91PS_USART USART_pt = AT91C_BASE_US1; 
    418              unsigned int status; 
    419              
    420              
    421              // get Usart status register 
    422              status = USART_pt->US_CSR; 
    423             
    424             
    425              if ( status & AT91C_US_TIMEOUT)       //wystapil timeout lub odebrano dane
    426                {
    427          
    428                  AT91C_BASE_US1->US_CR = AT91C_US_STTTO;
    429                  AT91C_BASE_US1->US_RCR = 0;
    430          
    431                  unsigned int xxx= AT91F_US_ReceiveFrame (
    432          	USART_pt,
    433          	US1_Buffer,
    434          	US_BUFFER_SIZE,
    435          	0,
    436          	0 );
    437                  
    438                  SendModbusEnable=1;
    439          
    440                 
    441                  if (US1_MasterMODBUS_ENABLE)                                            
    442                  {
    443                    //if //(ModBus_MASTER_Return(US1_Buffer,1))                             //je¿eli Modbus US1 w trybie master
    444                    {
    445                      g_US1_Connect_OK=2;        
    446                      SendModbusEnable=1;
    447                    }        
    448                  }
    449                  else
    450                  { 
    451                    //if (ModBus_CommS(US1_Buffer,1)) g_US1_Connect_OK=2;                 //je¿eli Modbus US1 w trybie slave
    452                  }
    453             
    454          
    455                  status = USART_pt->US_CSR; 
    456          
    457                }
    458             
    459          }//_______________________ Koniec funkcji Usart0_handler _________________________
    460           
    461          
    462          */

   Maximum stack usage in bytes:

     Function       .cstack
     --------       -------
     AT91F_PDC_Open      0
     DisableSpi          0
     EnableSpi           0
     ReadWriteSpi       32
     SPI_init           16


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     g_SPI_BAUDRATE      4
     SPI_Comm_TIMEOUT    4
     AT91F_PDC_Open     36
     EnableSpi          14
     DisableSpi         12
     SPI_init           84
     TMPx                4
     ReadWriteSpi      280
     ??DataTable2        4
     ??DataTable3        4
     ??DataTable5        4

 
  12 bytes in section .data
 438 bytes in section Debug.txt
 
 402 bytes of CODE memory (+ 36 bytes shared)
  12 bytes of DATA memory

Errors: none
Warnings: none
