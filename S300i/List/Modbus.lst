###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           04/Jun/2013  20:18:19 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\Framework\Modbus.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\Framework\Modbus.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.3 -         #
#                    04.06.2013\S300i\List\" --diag_suppress Pa082 -o         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\S300i\Obj\" --debug --endian little --cpu     #
#                    ARM7TDMI -e --fpu None --dlib_config "C:\Program Files   #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 - 04.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.3 - 04.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.3 - 04.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Oh                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\S300i\List\Modbus.lst                         #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\S300i\Obj\Modbus.o                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 - 04.06.2013\Framework\Modbus.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : Modbus.c                                 *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 16.01.2008                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*//
     19          //****************************************************************************//
     20          //
     21          // Typowe funkcje zdefiniowane w protokole Modbus:
     22          //    1  - Read Coil Status           - odczyt biezacego stanu grupy wyjsc cyfrowych,
     23          //    2  - Read Input Status          - odczyt stanu grupy wejsc cyfrowych,
     24          //    3  - Read Holding Register      - odczyt zawartosci grupy rejestrów/analogów wyjsciowych,
     25          //    4  - Read Input Register        - odczyt zawartosci grupy rejestrów/analogów wejsciowych,
     26          //    5  - Force Single Coil          - ustawienie stanu jednego wyjscia cyfrowego,
     27          //    6  - Preset Single Register     - zapis do pojedynczego rejestru/analogu wyjsciowego,
     28          //    7  - Read Exception Status      - odczyt statusu urzadzenia Slave,
     29          //    8  - Diagnostics                - test diagnostyczny,
     30          //    9  - Force Multiple Coils       - ustawienie stanu grupy wyjsc cyfrowych,
     31          //    10 - Preset Multiple Register   - zapis do grupy rejestrów/analogów wyjsciowych,
     32          //    11 - Report Slave ID            - odczyt ID jednostki Slave,
     33          //    12 - Reset Communication Link   - resetowanie polaczenia,
     34          //    13 - Read General Reference     - odczyt rejestrów w pamieci rozszerzonej,
     35          //    14 - Write General Reference    - zapis do rejestrów w pamieci rozszerzonej,
     36          //    15 - Write Multiple Coils       - grupowy zapis wyjœæ cyfrowych / bitów w rejestrach,
     37          //    16 - Write Register             - odczyt/zapis grupy rejestrów,
     38          //    17 - Read FIFO Queue            - odczyt kolejki FIFO.
     39          //****************************************************************************//
     40          //****************************************************************************//
     41          
     42          
     43          
     44          
     45          
     46          #include "Modbus.h"

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 - 04.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     47          
     48          
     49          
     50          /*
     51          _ModTaskTab ModTaskTab;
     52          
     53          
     54          
     55          ModTaskTab.Scene[1].Order=1;
     56          ModTaskTab.Scene[1].Q=0;
     57          ModTaskTab.Scene[1].Port=1;
     58          */
     59          
     60          
     61          //Zmienne konfiguracyjne -------------------------------------------------------     
     62          
     63              //MODBUS_0----------------------

   \                                 In section .data, align 1
     64               char US0_MasterMODBUS_ENABLE    = 1;                                      //1 -US0 jako MASTER (komunikacja MODBUS)
   \                     US0_MasterMODBUS_ENABLE:
   \   00000000   01                 DC8 1

   \                                 In section .bss, align 1
     65               char US1_MasterMODBUS_ENABLE    = 0;                                      //1 -US0 jako MASTER (komunikacja MODBUS) 
   \                     US1_MasterMODBUS_ENABLE:
   \   00000000                      DS8 1
     66          //______________________________________________________________________________
     67          
     68          
     69               
     70          
     71          
     72          //Zmienne  ---------------------------------------------------------------------     
     73              _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];                                  //tablica zadañ modbus 0
     74              char g_Current_ZD_MODBUS_0=0;                                               //bierz¹ce zadanie modbus wed³ug tablicy ZD_MODBUS_0
     75              char g_ERR_ZD_MODBUS_0=0;                                                   //b³¹d zadañ MODBUS 0 
     76              char g_Ans_ZD_MODBUS_0=0;                                                   //1- odebrano odpowiedz na pytanie 
     77              BYTE Buff_TX_0[US0_BUFFER_Tx_SIZE];                                                        //bufor nadawczy USART 0 
     78              
     79              _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];                                  //tablica zadañ modbus 0
     80              char g_Current_ZD_MODBUS_1=0;                                               //bierz¹ce zadanie modbus wed³ug tablicy ZD_MODBUS_0
     81              char g_ERR_ZD_MODBUS_1=0;                                                   //b³¹d zadañ MODBUS 0 
     82              char g_Ans_ZD_MODBUS_1=0;                                                   //1- odebrano odpowiedz na pytanie 
     83              char Buff_TX_1[US1_BUFFER_Tx_SIZE];                                         //bufor nadawczy USART 0 
     84          //______________________________________________________________________________
     85          
     86          
     87              
     88              
     89              
     90          //Zmienne zewnêtrzne -----------------------------------------------------------    
     91              extern RAM ram;
     92              extern char AdressModbus;
     93              extern int SendModbusEnable;
     94              extern int g_US0_Comm_TIMEOUT;
     95              extern float g_US0_OneByteTxTime;
     96              extern int g_US0_Comm_MinCykle;
     97              extern _MainStage  MainStage; 
     98          //___________________________Koniec zmiennych zewnêtrznych______________________    
     99              
    100              
    101          //void GetBinVarComm(int adr, unsigned int Length, char *Tab );
    102              
    103              
    104          //Sta³e ------------------------------------------------------------------------   
    105          

   \                                 In section .rodata, align 4
    106          const BYTE   bCRC_Hi[] = {0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
   \                     bCRC_Hi:
   \   00000000   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000010   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000020   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000030   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000040   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000050   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000060   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000070   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000080   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000090   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   000000A0   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   000000B0   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   000000C0   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   000000D0   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   000000E0   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   000000F0   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
    107                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    108                                    0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,
    109                                   0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,
    110                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x0,0xC1,
    111                                   0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,0x80,0x41,
    112                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x0,0xC1,
    113                                   0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    114                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    115                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,
    116                                    0x1,0xC0,0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,
    117                                   0x81,0x40,0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,
    118                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    119                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,
    120                                    0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,
    121                                   0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,
    122                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    123                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    124                                    0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,
    125                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    126                                    0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,
    127                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,
    128                                    0x1,0xC0,0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,
    129                                   0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    130                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    131                                   0x80,0x41,0x0,0xC1,0x81,0x40};
    132          
    133          const BYTE  bCRC_Lo[] = { 0x0,0xC0,0xC1,0x1,0xC3,0x3,0x2,0xC2,0xC6,0x6,
   \                     bCRC_Lo:
   \   00000100   00C0C101C303       DC8 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              02C2C60607C7
   \              05C5C404CC  
   \   00000111   0C0DCD0FCFCE       DC8 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200
   \              0E0ACACB0BC9
   \              0908C8      
   \   00000120   D81819D91BDB       DC8 216, 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28
   \              DA1A1EDEDF1F
   \              DD1D1C      
   \   0000012F   DC14D4D515D7       DC8 220, 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209
   \              1716D6D21213
   \              D311D1      
   \   0000013E   D010F03031F1       DC8 208, 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245
   \              33F3F23236F6
   \              F737F5      
   \   0000014D   3534F43CFCFD       DC8 53, 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251
   \              3DFF3F3EFEFA
   \              3A3BFB      
   \   0000015C   39F9F83828E8       DC8 57, 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47
   \              E929EB2B2AEA
   \              EE2E2F      
   \   0000016B   EF2DEDEC2CE4       DC8 239, 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226
   \              2425E527E7E6
   \              2622E2      
   \   0000017A   E323E12120E0       DC8 227, 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102
   \              A06061A163A3
   \              A26266      
   \   00000189   A6A767A56564       DC8 166, 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111
   \              A46CACAD6DAF
   \              6F          
   \   00000196   6EAEAA6A6BAB       DC8 110, 174, 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185
   \              69A9A86878B8
   \              B9          
   \   000001A3   79BB7B7ABABE       DC8 121, 187, 123, 122, 186, 190, 126, 127, 191, 125, 189, 188, 124
   \              7E7FBF7DBDBC
   \              7C          
   \   000001B0   B47475B577B7       DC8 180, 116, 117, 181, 119, 183, 182, 118, 114, 178, 179, 115, 177
   \              B67672B2B373
   \              B1          
   \   000001BD   7170B0509091       DC8 113, 112, 176, 80, 144, 145, 81, 147, 83, 82, 146, 150, 86, 87, 151
   \              519353529296
   \              565797      
   \   000001CC   559594549C5C       DC8 85, 149, 148, 84, 156, 92, 93, 157, 95, 159, 158, 94, 90, 154, 155
   \              5D9D5F9F9E5E
   \              5A9A9B      
   \   000001DB   5B9959589888       DC8 91, 153, 89, 88, 152, 136, 72, 73, 137, 75, 139, 138, 74, 78, 142
   \              4849894B8B8A
   \              4A4E8E      
   \   000001EA   8F4F8D4D4C8C       DC8 143, 79, 141, 77, 76, 140, 68, 132, 133, 69, 135, 71, 70, 134, 130
   \              448485458747
   \              468682      
   \   000001F9   424383418180       DC8 66, 67, 131, 65, 129, 128, 64
   \              40          
    134                                    0x7,0xC7,0x5,0xC5,0xC4,0x4,0xCC,0xC,0xD,0xCD,
    135                                    0xF,0xCF,0xCE,0xE,0xA,0xCA,0xCB,0xB,0xC9,0x9,
    136                                    0x8,0xC8,0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,
    137                                   0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC,0x14,0xD4,
    138                                   0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,
    139                                   0x11,0xD1,0xD0,0x10,0xF0,0x30,0x31,0xF1,0x33,0xF3,
    140                                   0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4,
    141                                   0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,
    142                                   0x3B,0xFB,0x39,0xF9,0xF8,0x38,0x28,0xE8,0xE9,0x29,
    143                                   0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,
    144                                   0xEC,0x2C,0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,
    145                                   0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0,0xA0,0x60,
    146                                   0x61,0xA1,0x63,0xA3,0xA2,0x62,0x66,0xA6,0xA7,0x67,
    147                                   0xA5,0x65,0x64,0xA4,0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,
    148                                   0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68,
    149                                   0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,
    150                                   0x7F,0xBF,0x7D,0xBD,0xBC,0x7C,0xB4,0x74,0x75,0xB5,
    151                                   0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,
    152                                   0x70,0xB0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,
    153                                   0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,0x9C,0x5C,
    154                                   0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,
    155                                   0x99,0x59,0x58,0x98,0x88,0x48,0x49,0x89,0x4B,0x8B,
    156                                   0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C,
    157                                   0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,
    158                                   0x43,0x83,0x41,0x81,0x80,0x40};
    159                                   
    160          //___________________________Koniec sta³ych ____________________________________    
    161              
    162          
    163          
    164          
    165          
    166          
    167          //!-----------------------------------------------------------------------------
    168          //!  Nazwa funkcji :    crc16
    169          //!  Opis:              Oblicza sumê kontroln¹ CRC 16
    170          //!-----------------------------------------------------------------------------
    171          //!  modbusframe  - adres pierwszej cyfry
    172          //!  Length       - zakres liczb do wyliczenia CRC
    173          //!----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    174          WORD crc16(BYTE* modbusframe,int Length)
    175          {
   \                     crc16:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0200               MOVS     R2,R0
    176              int index;
    177              BYTE crc_Low = 0xFF;
   \   00000004   FF20               MOVS     R0,#+255
    178              BYTE crc_High = 0xFF;
   \   00000006   FF23               MOVS     R3,#+255
    179          
    180              for (int i_tmp = 0; i_tmp<Length; i_tmp++)
   \   00000008   0129               CMP      R1,#+1
   \   0000000A   0DDB               BLT      ??crc16_0
   \   0000000C   0A4C               LDR      R4,??crc16_1     ;; bCRC_Hi
    181              {
    182              index = crc_High ^ modbusframe[i_tmp];
   \                     ??crc16_2:
   \   0000000E   1578               LDRB     R5,[R2, #+0]
   \   00000010   5D40               EORS     R5,R5,R3
    183              crc_High = crc_Low ^ bCRC_Hi[index] ;
   \   00000012   635D               LDRB     R3,[R4, R5]
   \   00000014   4340               EORS     R3,R3,R0
   \   00000016   1B06               LSLS     R3,R3,#+24
   \   00000018   1B0E               LSRS     R3,R3,#+24
    184              crc_Low = bCRC_Lo[index];
   \   0000001A   8020               MOVS     R0,#+128
   \   0000001C   4000               LSLS     R0,R0,#+1        ;; #+256
   \   0000001E   6519               ADDS     R5,R4,R5
   \   00000020   285C               LDRB     R0,[R5, R0]
    185              }
   \   00000022   521C               ADDS     R2,R2,#+1
   \   00000024   491E               SUBS     R1,R1,#+1
   \   00000026   F2D1               BNE      ??crc16_2
    186              
    187              return (crc_High << 8 | crc_Low);  
   \                     ??crc16_0:
   \   00000028   1902               LSLS     R1,R3,#+8
   \   0000002A   0843               ORRS     R0,R0,R1
   \   0000002C   0004               LSLS     R0,R0,#+16
   \   0000002E   000C               LSRS     R0,R0,#+16
   \   00000030   38BC               POP      {R3-R5}
   \   00000032   02BC               POP      {R1}
   \   00000034   0847               BX       R1               ;; return
   \   00000036   C046               Nop      
   \                     ??crc16_1:
   \   00000038   ........           DC32     bCRC_Hi
    188          }//_______________________ Koniec funkcji crc16 ________________________________
    189                
    190          
    191          
    192          
    193          
    194          
    195          
    196          
    197          //!-----------------------------------------------------------------------------
    198          //!  Nazwa funkcji :    SetWordToBytes
    199          //!  Opis:              Funkcja konwertuje wartoœæ w WORD na 2 kolejne bajty
    200          //!-----------------------------------------------------------------------------
    201          //!  tmp          - liczba w formacie WORD
    202          //!  *ptr         - wskaŸnik do pierwszego bajtu
    203          //!----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    204          void SetWordToBytes(WORD tmp, BYTE *ptr){ 
    205              *(ptr+1) = 0x00ff & tmp;
   \                     SetWordToBytes:
   \   00000000   4870               STRB     R0,[R1, #+1]
    206              *ptr = (0x00ff & tmp>>8);
   \   00000002   000A               LSRS     R0,R0,#+8
   \   00000004   0870               STRB     R0,[R1, #+0]
    207          }//_______________________ Koniec funkcji SetWordToBytes _______________________
   \   00000006   7047               BX       LR               ;; return
    208          
    209          
    210          
    211          
    212          //!-----------------------------------------------------------------------------
    213          //!  Nazwa funkcji :    ModBus_CommS
    214          //!  Opis:              funkcja komunikacji MODBUS (slave). Interpretuje otrzymane dane i wysy³a odpowiedŸ
    215          //!-----------------------------------------------------------------------------
    216          //!  modbusframe  - otrzymana ramka danych
    217          //!----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    218          BYTE ModBus_CommS(BYTE* modbusframe, char US_Nr)
    219          {
   \                     ModBus_CommS:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   89B0               SUB      SP,SP,#+36
   \   00000004   0400               MOVS     R4,R0
    220            
    221                AT91PS_USART AT91C_BASE_US;
    222                BYTE* Buff_TX;
    223                
    224                
    225                //wybór USARTa
    226                if (US_Nr) 
   \   00000006   0029               CMP      R1,#+0
   \   00000008   03D0               BEQ      ??ModBus_CommS_0
    227                {
    228                    AT91C_BASE_US     =   AT91C_BASE_US1;
   \   0000000A   BA48               LDR      R0,??ModBus_CommS_1  ;; 0xfffc4000
   \   0000000C   0390               STR      R0,[SP, #+12]
    229                    Buff_TX           =   Buff_TX_1; 
                                             ^
Warning[Pe513]: a value of type "char *" cannot be assigned to an entity of
          type "BYTE *"
   \   0000000E   BA4D               LDR      R5,??ModBus_CommS_1+0x4  ;; g_Ans_ZD_MODBUS_0 + 544
   \   00000010   02E0               B        ??ModBus_CommS_2
    230          
    231                } 
    232                else 
    233                {
    234                    AT91C_BASE_US     =   AT91C_BASE_US0;
   \                     ??ModBus_CommS_0:
   \   00000012   BA48               LDR      R0,??ModBus_CommS_1+0x8  ;; 0xfffc0000
   \   00000014   0390               STR      R0,[SP, #+12]
    235                    Buff_TX           =   Buff_TX_0; 
   \   00000016   BA4D               LDR      R5,??ModBus_CommS_1+0xC  ;; g_Ans_ZD_MODBUS_0 + 264
    236          
    237                }
    238                
    239                
    240            
    241            
    242            
    243            
    244            for (int i=0; i<256; i++) {Buff_TX[i]=0x0;}                                 //czyœci bufor nadawczy
   \                     ??ModBus_CommS_2:
   \   00000018   8021               MOVS     R1,#+128
   \   0000001A   4900               LSLS     R1,R1,#+1        ;; #+256
   \   0000001C   2800               MOVS     R0,R5
   \   0000001E   ........           BL       __aeabi_memclr
   \   00000022   2078               LDRB     R0,[R4, #+0]
   \   00000024   B749               LDR      R1,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   00000026   0978               LDRB     R1,[R1, #+0]
   \   00000028   8842               CMP      R0,R1
   \   0000002A   01D0               BEQ      ??ModBus_CommS_3
    245            
    246          
    247            
    248            if ((modbusframe[0]) != AdressModbus) return 0;                               //wyjdz jezeli zly adres
   \                     ??ModBus_CommS_4:
   \   0000002C   0020               MOVS     R0,#+0
   \   0000002E   BAE2               B        ??ModBus_CommS_5
    249            
    250          //  g_transmit_ok=1;
    251            
    252            
    253            WORD  RamByte=(((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])))/8);
   \                     ??ModBus_CommS_3:
   \   00000030   A078               LDRB     R0,[R4, #+2]
   \   00000032   0102               LSLS     R1,R0,#+8
   \   00000034   E078               LDRB     R0,[R4, #+3]
   \   00000036   0843               ORRS     R0,R0,R1
   \   00000038   8110               ASRS     R1,R0,#+2
   \   0000003A   490F               LSRS     R1,R1,#+29
   \   0000003C   0818               ADDS     R0,R1,R0
   \   0000003E   C610               ASRS     R6,R0,#+3
   \   00000040   3604               LSLS     R6,R6,#+16
   \   00000042   360C               LSRS     R6,R6,#+16
    254            WORD  RamCall=((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])));
   \   00000044   A078               LDRB     R0,[R4, #+2]
   \   00000046   0002               LSLS     R0,R0,#+8
   \   00000048   E178               LDRB     R1,[R4, #+3]
   \   0000004A   0143               ORRS     R1,R1,R0
   \   0000004C   0291               STR      R1,[SP, #+8]
    255            BYTE  RamBit= ((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+0) % 8;
   \   0000004E   A078               LDRB     R0,[R4, #+2]
   \   00000050   0102               LSLS     R1,R0,#+8
   \   00000052   E078               LDRB     R0,[R4, #+3]
   \   00000054   0843               ORRS     R0,R0,R1
   \   00000056   E178               LDRB     R1,[R4, #+3]
   \   00000058   8210               ASRS     R2,R0,#+2
   \   0000005A   520F               LSRS     R2,R2,#+29
   \   0000005C   1018               ADDS     R0,R2,R0
   \   0000005E   C010               ASRS     R0,R0,#+3
   \   00000060   C000               LSLS     R0,R0,#+3
   \   00000062   081A               SUBS     R0,R1,R0
   \   00000064   0006               LSLS     R0,R0,#+24
   \   00000066   000E               LSRS     R0,R0,#+24
   \   00000068   0190               STR      R0,[SP, #+4]
    256            BYTE  ByteCount=(((((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]))-1)/8)+1;
   \   0000006A   2079               LDRB     R0,[R4, #+4]
   \   0000006C   0102               LSLS     R1,R0,#+8
   \   0000006E   6079               LDRB     R0,[R4, #+5]
   \   00000070   0843               ORRS     R0,R0,R1
   \   00000072   401E               SUBS     R0,R0,#+1
   \   00000074   8110               ASRS     R1,R0,#+2
   \   00000076   490F               LSRS     R1,R1,#+29
   \   00000078   0818               ADDS     R0,R1,R0
   \   0000007A   C010               ASRS     R0,R0,#+3
   \   0000007C   401C               ADDS     R0,R0,#+1
   \   0000007E   0006               LSLS     R0,R0,#+24
   \   00000080   000E               LSRS     R0,R0,#+24
   \   00000082   0590               STR      R0,[SP, #+20]
    257            BYTE  WordCount=(((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]));
   \   00000084   6079               LDRB     R0,[R4, #+5]
   \   00000086   0690               STR      R0,[SP, #+24]
    258            WORD  BitCount=(((WORD)modbusframe[4])<<8) | (((WORD)modbusframe[5]));
   \   00000088   2079               LDRB     R0,[R4, #+4]
   \   0000008A   0002               LSLS     R0,R0,#+8
   \   0000008C   6179               LDRB     R1,[R4, #+5]
   \   0000008E   0143               ORRS     R1,R1,R0
   \   00000090   0791               STR      R1,[SP, #+28]
    259            char  CurentByteBufTX;
    260            char  CurentBitBufTX;
    261            
    262            if (modbusframe[1]==1)
   \   00000092   6078               LDRB     R0,[R4, #+1]
   \   00000094   0128               CMP      R0,#+1
   \   00000096   75D1               BNE      ??ModBus_CommS_6
    263                    {
    264                      //Read Coil Status  (odczyt zmiennych dwustanowych DA00-DDFF)
    265               
    266                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   00000098   A079               LDRB     R0,[R4, #+6]
   \   0000009A   0002               LSLS     R0,R0,#+8
   \   0000009C   E779               LDRB     R7,[R4, #+7]
   \   0000009E   0743               ORRS     R7,R7,R0
   \   000000A0   0621               MOVS     R1,#+6
   \   000000A2   2000               MOVS     R0,R4
   \   000000A4   ........           BL       crc16
   \   000000A8   8742               CMP      R7,R0
   \   000000AA   BFD1               BNE      ??ModBus_CommS_4
    267                               
    268                                //OdpowiedŸ ----------------------------------------------
    269                                
    270                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \   000000AC   9548               LDR      R0,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   000000AE   0078               LDRB     R0,[R0, #+0]
   \   000000B0   2870               STRB     R0,[R5, #+0]
   \   000000B2   0120               MOVS     R0,#+1
   \   000000B4   6870               STRB     R0,[R5, #+1]
    271                                Buff_TX[1]=0x1;
    272                                Buff_TX[2]=ByteCount;    
   \   000000B6   0598               LDR      R0,[SP, #+20]
   \   000000B8   A870               STRB     R0,[R5, #+2]
    273                                
    274                                CurentByteBufTX=3;
   \   000000BA   0327               MOVS     R7,#+3
   \   000000BC   0020               MOVS     R0,#+0
   \   000000BE   0090               STR      R0,[SP, #+0]
    275                                CurentBitBufTX=0;
    276                                
    277                                for (int i=0; i<BitCount; i++)
   \   000000C0   0021               MOVS     R1,#+0
   \   000000C2   0798               LDR      R0,[SP, #+28]
   \   000000C4   0004               LSLS     R0,R0,#+16
   \   000000C6   3BD0               BEQ      ??ModBus_CommS_7
    278                                {
    279                                   Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
   \                     ??ModBus_CommS_8:
   \   000000C8   EA19               ADDS     R2,R5,R7
   \   000000CA   1078               LDRB     R0,[R2, #+0]
   \   000000CC   8446               MOV      R12,R0
   \   000000CE   0123               MOVS     R3,#+1
   \   000000D0   0098               LDR      R0,[SP, #+0]
   \   000000D2   8340               LSLS     R3,R3,R0
   \   000000D4   6046               MOV      R0,R12
   \   000000D6   9843               BICS     R0,R0,R3
   \   000000D8   1070               STRB     R0,[R2, #+0]
    280                                   Buff_TX[CurentByteBufTX] |=  (((ram.VarCom_Byte[RamByte]>>RamBit) & 0x1)<< CurentBitBufTX);
   \   000000DA   1078               LDRB     R0,[R2, #+0]
   \   000000DC   8446               MOV      R12,R0
   \   000000DE   8A48               LDR      R0,??ModBus_CommS_1+0x14  ;; ram
   \   000000E0   805D               LDRB     R0,[R0, R6]
   \   000000E2   019B               LDR      R3,[SP, #+4]
   \   000000E4   1841               ASRS     R0,R0,R3
   \   000000E6   0123               MOVS     R3,#+1
   \   000000E8   0340               ANDS     R3,R3,R0
   \   000000EA   0098               LDR      R0,[SP, #+0]
   \   000000EC   8340               LSLS     R3,R3,R0
   \   000000EE   6046               MOV      R0,R12
   \   000000F0   0343               ORRS     R3,R3,R0
   \   000000F2   1370               STRB     R3,[R2, #+0]
    281                                   
    282                                   if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
   \   000000F4   0098               LDR      R0,[SP, #+0]
   \   000000F6   0006               LSLS     R0,R0,#+24
   \   000000F8   000E               LSRS     R0,R0,#+24
   \   000000FA   0728               CMP      R0,#+7
   \   000000FC   05D2               BCS      ??ModBus_CommS_9
   \   000000FE   0098               LDR      R0,[SP, #+0]
   \   00000100   401C               ADDS     R0,R0,#+1
   \   00000102   0006               LSLS     R0,R0,#+24
   \   00000104   000E               LSRS     R0,R0,#+24
   \   00000106   0090               STR      R0,[SP, #+0]
   \   00000108   04E0               B        ??ModBus_CommS_10
   \                     ??ModBus_CommS_9:
   \   0000010A   0020               MOVS     R0,#+0
   \   0000010C   0090               STR      R0,[SP, #+0]
   \   0000010E   7F1C               ADDS     R7,R7,#+1
   \   00000110   3F06               LSLS     R7,R7,#+24
   \   00000112   3F0E               LSRS     R7,R7,#+24
    283                                   if (RamBit<7) {RamBit++;} else {RamBit=0; RamByte++;}
   \                     ??ModBus_CommS_10:
   \   00000114   0198               LDR      R0,[SP, #+4]
   \   00000116   0006               LSLS     R0,R0,#+24
   \   00000118   000E               LSRS     R0,R0,#+24
   \   0000011A   0728               CMP      R0,#+7
   \   0000011C   05D2               BCS      ??ModBus_CommS_11
   \   0000011E   0198               LDR      R0,[SP, #+4]
   \   00000120   401C               ADDS     R0,R0,#+1
   \   00000122   0006               LSLS     R0,R0,#+24
   \   00000124   000E               LSRS     R0,R0,#+24
   \   00000126   0190               STR      R0,[SP, #+4]
   \   00000128   04E0               B        ??ModBus_CommS_12
   \                     ??ModBus_CommS_11:
   \   0000012A   0020               MOVS     R0,#+0
   \   0000012C   0190               STR      R0,[SP, #+4]
   \   0000012E   761C               ADDS     R6,R6,#+1
   \   00000130   3604               LSLS     R6,R6,#+16
   \   00000132   360C               LSRS     R6,R6,#+16
    284                                }
   \                     ??ModBus_CommS_12:
   \   00000134   491C               ADDS     R1,R1,#+1
   \   00000136   0798               LDR      R0,[SP, #+28]
   \   00000138   0004               LSLS     R0,R0,#+16
   \   0000013A   000C               LSRS     R0,R0,#+16
   \   0000013C   8142               CMP      R1,R0
   \   0000013E   C3DB               BLT      ??ModBus_CommS_8
    285          
    286                                SetWordToBytes(crc16(Buff_TX,ByteCount+3),&Buff_TX[ByteCount+3] );  //wstawia sumê kontroln¹
   \                     ??ModBus_CommS_7:
   \   00000140   0598               LDR      R0,[SP, #+20]
   \   00000142   0006               LSLS     R0,R0,#+24
   \   00000144   000E               LSRS     R0,R0,#+24
   \   00000146   0490               STR      R0,[SP, #+16]
   \   00000148   0100               MOVS     R1,R0
   \   0000014A   C91C               ADDS     R1,R1,#+3
   \   0000014C   2800               MOVS     R0,R5
   \   0000014E   ........           BL       crc16
   \   00000152   0499               LDR      R1,[SP, #+16]
   \   00000154   6918               ADDS     R1,R5,R1
   \   00000156   C91C               ADDS     R1,R1,#+3
   \   00000158   4870               STRB     R0,[R1, #+1]
   \   0000015A   000A               LSRS     R0,R0,#+8
   \   0000015C   0870               STRB     R0,[R1, #+0]
    287                                
    288                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, ByteCount+5,0, 0);  //Wysyla ramke
   \   0000015E   0498               LDR      R0,[SP, #+16]
   \   00000160   401D               ADDS     R0,R0,#+5
   \   00000162   8021               MOVS     R1,#+128
   \   00000164   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000166   039A               LDR      R2,[SP, #+12]
   \   00000168   5118               ADDS     R1,R2,R1
   \   0000016A   CA68               LDR      R2,[R1, #+12]
   \   0000016C   002A               CMP      R2,#+0
   \   0000016E   04D1               BNE      ??ModBus_CommS_13
   \   00000170   8D60               STR      R5,[R1, #+8]
   \   00000172   C860               STR      R0,[R1, #+12]
   \   00000174   0020               MOVS     R0,#+0
   \   00000176   8861               STR      R0,[R1, #+24]
   \   00000178   03E0               B.N      ??ModBus_CommS_14
   \                     ??ModBus_CommS_13:
   \   0000017A   CA69               LDR      R2,[R1, #+28]
   \   0000017C   002A               CMP      R2,#+0
   \   0000017E   01D1               BNE      ??ModBus_CommS_6
   \   00000180   8D61               STR      R5,[R1, #+24]
   \                     ??ModBus_CommS_14:
   \   00000182   C861               STR      R0,[R1, #+28]
    289                                                        
    290                    }
    291             if (modbusframe[1]==2)
   \                     ??ModBus_CommS_6:
   \   00000184   6078               LDRB     R0,[R4, #+1]
   \   00000186   0228               CMP      R0,#+2
   \   00000188   0DD1               BNE      ??ModBus_CommS_15
    292             {
    293                                
    294                    
    295                      ////Read discrete input  (odczyt zmiennych dwustanowych B000-B5FF)
    296                
    297                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   0000018A   A079               LDRB     R0,[R4, #+6]
   \   0000018C   0002               LSLS     R0,R0,#+8
   \   0000018E   E179               LDRB     R1,[R4, #+7]
   \   00000190   0143               ORRS     R1,R1,R0
   \   00000192   02B5               PUSH     {R1,LR}
   \   00000194   0621               MOVS     R1,#+6
   \   00000196   2000               MOVS     R0,R4
   \   00000198   ........           BL       crc16
   \   0000019C   0099               LDR      R1,[SP, #0]
   \   0000019E   02B0               ADD      SP,SP,#+8
   \   000001A0   8142               CMP      R1,R0
   \   000001A2   00D0               BEQ      .+4
   \   000001A4   42E7               B        ??ModBus_CommS_4
    298                               /*
    299                                //OdpowiedŸ ----------------------------------------------                      
    300                                Buff_TX[0]=AdressModbus;                              //adres                                           
    301                                Buff_TX[1]=0x2;
    302                                Buff_TX[2]=ByteCount;    
    303                                
    304                                CurentByteBufTX=3;
    305                                CurentBitBufTX=0;
    306                                
    307                                for (int i=0; i<BitCount; i++)
    308                                {
    309                                   Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
    310                                   Buff_TX[CurentByteBufTX] |=  (((ram.BinVarRAM[RamByte]>>RamBit) & 0x1)<< CurentBitBufTX);
    311                                   
    312                                   if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
    313                                   if (RamBit<7) {RamBit++;} else {RamBit=0; RamByte++;}
    314                                }
    315          
    316                                SetWordToBytes(crc16(Buff_TX,ByteCount+3),&Buff_TX[ByteCount+3] );  //wstawia sumê kontroln¹
    317                                
    318                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, ByteCount+5,0, 0);  //Wysyla ramke
    319                                                         
    320                   
    321                                
    322                      //Holding Register (odczyt zmiennych analogowych DA00-DDFF)
    323                                */
    324                    }
    325             if (modbusframe[1]==3)
   \                     ??ModBus_CommS_15:
   \   000001A6   6078               LDRB     R0,[R4, #+1]
   \   000001A8   0328               CMP      R0,#+3
   \   000001AA   52D1               BNE      ??ModBus_CommS_16
    326             {
    327                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   000001AC   A079               LDRB     R0,[R4, #+6]
   \   000001AE   0002               LSLS     R0,R0,#+8
   \   000001B0   E779               LDRB     R7,[R4, #+7]
   \   000001B2   0743               ORRS     R7,R7,R0
   \   000001B4   0621               MOVS     R1,#+6
   \   000001B6   2000               MOVS     R0,R4
   \   000001B8   ........           BL       crc16
   \   000001BC   8742               CMP      R7,R0
   \   000001BE   00D0               BEQ      .+4
   \   000001C0   34E7               B        ??ModBus_CommS_4
    328                               
    329                                //OdpowiedŸ ----------------------------------------------                      
    330                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \   000001C2   5048               LDR      R0,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   000001C4   0078               LDRB     R0,[R0, #+0]
   \   000001C6   2870               STRB     R0,[R5, #+0]
    331                                Buff_TX[1]=0x3;
   \   000001C8   0327               MOVS     R7,#+3
   \   000001CA   6F70               STRB     R7,[R5, #+1]
    332                                Buff_TX[2]=(WordCount*2);    
   \   000001CC   0698               LDR      R0,[SP, #+24]
   \   000001CE   4000               LSLS     R0,R0,#+1
   \   000001D0   A870               STRB     R0,[R5, #+2]
    333                                
    334                                CurentByteBufTX=3;
   \   000001D2   0020               MOVS     R0,#+0
   \   000001D4   0090               STR      R0,[SP, #+0]
    335                                CurentBitBufTX=0;
    336                                
    337                                for (int i=0; i<WordCount; i++)
   \   000001D6   0699               LDR      R1,[SP, #+24]
   \   000001D8   0906               LSLS     R1,R1,#+24
   \   000001DA   090E               LSRS     R1,R1,#+24
   \   000001DC   0491               STR      R1,[SP, #+16]
   \   000001DE   0699               LDR      R1,[SP, #+24]
   \   000001E0   0906               LSLS     R1,R1,#+24
   \   000001E2   14D0               BEQ      ??ModBus_CommS_17
    338                                {
    339          
    340                                   Buff_TX[CurentByteBufTX] = ram.VarCom_Byte[(RamCall*2)];
   \                     ??ModBus_CommS_18:
   \   000001E4   4849               LDR      R1,??ModBus_CommS_1+0x14  ;; ram
   \   000001E6   029A               LDR      R2,[SP, #+8]
   \   000001E8   5200               LSLS     R2,R2,#+1
   \   000001EA   8A18               ADDS     R2,R1,R2
   \   000001EC   E919               ADDS     R1,R5,R7
   \   000001EE   1378               LDRB     R3,[R2, #+0]
   \   000001F0   0B70               STRB     R3,[R1, #+0]
    341                                   Buff_TX[CurentByteBufTX+1] = ram.VarCom_Byte[(RamCall*2)+1];
   \   000001F2   5278               LDRB     R2,[R2, #+1]
   \   000001F4   4A70               STRB     R2,[R1, #+1]
    342                                   
    343                                   CurentByteBufTX=CurentByteBufTX+2;
   \   000001F6   BF1C               ADDS     R7,R7,#+2
   \   000001F8   3F06               LSLS     R7,R7,#+24
   \   000001FA   3F0E               LSRS     R7,R7,#+24
    344                                   RamCall++;
   \   000001FC   0299               LDR      R1,[SP, #+8]
   \   000001FE   491C               ADDS     R1,R1,#+1
   \   00000200   0904               LSLS     R1,R1,#+16
   \   00000202   090C               LSRS     R1,R1,#+16
   \   00000204   0291               STR      R1,[SP, #+8]
    345          
    346                                }
   \   00000206   401C               ADDS     R0,R0,#+1
   \   00000208   0499               LDR      R1,[SP, #+16]
   \   0000020A   8842               CMP      R0,R1
   \   0000020C   EADB               BLT      ??ModBus_CommS_18
    347          
    348                                SetWordToBytes(crc16(Buff_TX,(WordCount*2)+3),&Buff_TX[(WordCount*2)+3] );  //wstawia sumê kontroln¹
   \                     ??ModBus_CommS_17:
   \   0000020E   0498               LDR      R0,[SP, #+16]
   \   00000210   4000               LSLS     R0,R0,#+1
   \   00000212   0590               STR      R0,[SP, #+20]
   \   00000214   0100               MOVS     R1,R0
   \   00000216   C91C               ADDS     R1,R1,#+3
   \   00000218   2800               MOVS     R0,R5
   \   0000021A   ........           BL       crc16
   \   0000021E   0599               LDR      R1,[SP, #+20]
   \   00000220   6918               ADDS     R1,R5,R1
   \   00000222   C91C               ADDS     R1,R1,#+3
   \   00000224   4870               STRB     R0,[R1, #+1]
   \   00000226   000A               LSRS     R0,R0,#+8
   \   00000228   0870               STRB     R0,[R1, #+0]
    349                                
    350                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, (WordCount*2)+5, 0, 0);  //Wysyla ramke
   \   0000022A   0598               LDR      R0,[SP, #+20]
   \   0000022C   401D               ADDS     R0,R0,#+5
   \   0000022E   8021               MOVS     R1,#+128
   \   00000230   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000232   039A               LDR      R2,[SP, #+12]
   \   00000234   5118               ADDS     R1,R2,R1
   \   00000236   0831               ADDS     R1,R1,#+8
   \   00000238   4A68               LDR      R2,[R1, #+4]
   \   0000023A   002A               CMP      R2,#+0
   \   0000023C   04D1               BNE      ??ModBus_CommS_19
   \   0000023E   0D60               STR      R5,[R1, #+0]
   \   00000240   4860               STR      R0,[R1, #+4]
   \   00000242   0020               MOVS     R0,#+0
   \   00000244   0861               STR      R0,[R1, #+16]
   \   00000246   03E0               B.N      ??ModBus_CommS_20
   \                     ??ModBus_CommS_19:
   \   00000248   4A69               LDR      R2,[R1, #+20]
   \   0000024A   002A               CMP      R2,#+0
   \   0000024C   01D1               BNE      ??ModBus_CommS_16
   \   0000024E   0D61               STR      R5,[R1, #+16]
   \                     ??ModBus_CommS_20:
   \   00000250   4861               STR      R0,[R1, #+20]
    351                                                         
    352                    
    353                            
    354                        //Input Register (odczyt zmiennych analogowych A000-A5FF)      
    355                    }
    356             if (modbusframe[1]==4)
    357             {
    358                /*
    359                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
    360                               
    361                                //OdpowiedŸ ----------------------------------------------                      
    362                                Buff_TX[0]=AdressModbus;                              //adres                                           
    363                                Buff_TX[1]=0x4;
    364                                Buff_TX[2]=(WordCount*2);    
    365                                
    366                                CurentByteBufTX=3;
    367                                CurentBitBufTX=0;
    368                                
    369                                for (int i=0; i<WordCount; i++)
    370                                {
    371          
    372                                   Buff_TX[CurentByteBufTX]   = (((WORD)(ram.AnaVarRAM[RamCall]))>>8) & 0xFF;
    373                                   Buff_TX[CurentByteBufTX+1] = ((WORD)(ram.AnaVarRAM[RamCall])) & 0xFF;
    374                                   
    375                                   CurentByteBufTX=CurentByteBufTX+2;
    376                                   RamCall++;
    377                                }
    378          
    379                                SetWordToBytes(crc16(Buff_TX,(WordCount*2)+3),&Buff_TX[(WordCount*2)+3] );  //wstawia sumê kontroln¹
    380                                
    381                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, (WordCount*2)+5, 0, 0);  //Wysyla ramke
    382                                                         
    383                          
    384                      //Write Coil Status  (zapis zmiennych dwustanowych - pojedynczo DA00-DDFF)
    385                 */
    386                    }
    387             if (modbusframe[1]==5)
   \                     ??ModBus_CommS_16:
   \   00000252   6078               LDRB     R0,[R4, #+1]
   \   00000254   0528               CMP      R0,#+5
   \   00000256   5FD1               BNE      ??ModBus_CommS_21
    388             {
    389                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   00000258   A079               LDRB     R0,[R4, #+6]
   \   0000025A   0002               LSLS     R0,R0,#+8
   \   0000025C   E179               LDRB     R1,[R4, #+7]
   \   0000025E   0143               ORRS     R1,R1,R0
   \   00000260   02B5               PUSH     {R1,LR}
   \   00000262   0621               MOVS     R1,#+6
   \   00000264   2000               MOVS     R0,R4
   \   00000266   ........           BL       crc16
   \   0000026A   0099               LDR      R1,[SP, #0]
   \   0000026C   02B0               ADD      SP,SP,#+8
   \   0000026E   8142               CMP      R1,R0
   \   00000270   00D0               BEQ      .+4
   \   00000272   DBE6               B        ??ModBus_CommS_4
    390                                
    391                                //if ((modbusframe[4]!=0xFF) && (modbusframe[4]!=0x00)) return 0;
    392                                
    393                                Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
   \   00000274   3806               LSLS     R0,R7,#+24
   \   00000276   000E               LSRS     R0,R0,#+24
   \   00000278   2818               ADDS     R0,R5,R0
   \   0000027A   0178               LDRB     R1,[R0, #+0]
   \   0000027C   0122               MOVS     R2,#+1
   \   0000027E   009B               LDR      R3,[SP, #+0]
   \   00000280   9A40               LSLS     R2,R2,R3
   \   00000282   9143               BICS     R1,R1,R2
   \   00000284   0170               STRB     R1,[R0, #+0]
    394                                if (modbusframe[4])
   \   00000286   2079               LDRB     R0,[R4, #+4]
   \   00000288   0028               CMP      R0,#+0
   \   0000028A   1F49               LDR      R1,??ModBus_CommS_1+0x14  ;; ram
   \   0000028C   07D0               BEQ      ??ModBus_CommS_22
    395                                {
    396                                   ram.VarCom_Byte[RamByte] |= 0x1 << RamBit;
   \   0000028E   8819               ADDS     R0,R1,R6
   \   00000290   0178               LDRB     R1,[R0, #+0]
   \   00000292   0122               MOVS     R2,#+1
   \   00000294   019B               LDR      R3,[SP, #+4]
   \   00000296   9A40               LSLS     R2,R2,R3
   \   00000298   0A43               ORRS     R2,R2,R1
   \   0000029A   0270               STRB     R2,[R0, #+0]
   \   0000029C   06E0               B        ??ModBus_CommS_23
    397                                }
    398                                else
    399                                {
    400                                   ram.VarCom_Byte[RamByte] &= ~(0x1 << RamBit);
   \                     ??ModBus_CommS_22:
   \   0000029E   8819               ADDS     R0,R1,R6
   \   000002A0   0178               LDRB     R1,[R0, #+0]
   \   000002A2   0122               MOVS     R2,#+1
   \   000002A4   019B               LDR      R3,[SP, #+4]
   \   000002A6   9A40               LSLS     R2,R2,R3
   \   000002A8   9143               BICS     R1,R1,R2
   \   000002AA   0170               STRB     R1,[R0, #+0]
    401                                }               
    402                                
    403                                //odpowiedz ----------------------------------------------
    404                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \                     ??ModBus_CommS_23:
   \   000002AC   1548               LDR      R0,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   000002AE   0078               LDRB     R0,[R0, #+0]
   \   000002B0   2870               STRB     R0,[R5, #+0]
    405                                Buff_TX[1]=0x5;   
   \   000002B2   0520               MOVS     R0,#+5
   \   000002B4   6870               STRB     R0,[R5, #+1]
    406                                Buff_TX[2]=modbusframe[2];
   \   000002B6   A078               LDRB     R0,[R4, #+2]
   \   000002B8   A870               STRB     R0,[R5, #+2]
    407                                Buff_TX[3]=modbusframe[3];
   \   000002BA   E078               LDRB     R0,[R4, #+3]
   \   000002BC   E870               STRB     R0,[R5, #+3]
    408                                Buff_TX[4]=modbusframe[4];
   \   000002BE   2079               LDRB     R0,[R4, #+4]
   \   000002C0   2871               STRB     R0,[R5, #+4]
    409                                Buff_TX[5]=modbusframe[5];
   \   000002C2   6079               LDRB     R0,[R4, #+5]
   \   000002C4   6871               STRB     R0,[R5, #+5]
    410                                                      
    411                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   000002C6   0621               MOVS     R1,#+6
   \   000002C8   2800               MOVS     R0,R5
   \   000002CA   ........           BL       crc16
   \   000002CE   2900               MOVS     R1,R5
   \   000002D0   891D               ADDS     R1,R1,#+6
   \   000002D2   4870               STRB     R0,[R1, #+1]
   \   000002D4   000A               LSRS     R0,R0,#+8
   \   000002D6   0870               STRB     R0,[R1, #+0]
    412                                
    413                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   000002D8   8020               MOVS     R0,#+128
   \   000002DA   4000               LSLS     R0,R0,#+1        ;; #+256
   \   000002DC   0399               LDR      R1,[SP, #+12]
   \   000002DE   0918               ADDS     R1,R1,R0
   \   000002E0   0831               ADDS     R1,R1,#+8
   \   000002E2   4868               LDR      R0,[R1, #+4]
   \   000002E4   0028               CMP      R0,#+0
   \   000002E6   11D1               BNE      ??ModBus_CommS_24
   \   000002E8   0D60               STR      R5,[R1, #+0]
   \   000002EA   0820               MOVS     R0,#+8
   \   000002EC   4860               STR      R0,[R1, #+4]
   \   000002EE   0020               MOVS     R0,#+0
   \   000002F0   0861               STR      R0,[R1, #+16]
   \   000002F2   10E0               B.N      ??ModBus_CommS_25
   \                     ??ModBus_CommS_1:
   \   000002F4   0040FCFF           DC32     0xfffc4000
   \   000002F8   ........           DC32     g_Ans_ZD_MODBUS_0 + 544
   \   000002FC   0000FCFF           DC32     0xfffc0000
   \   00000300   ........           DC32     g_Ans_ZD_MODBUS_0 + 264
   \   00000304   ........           DC32     AdressModbus
   \   00000308   ........           DC32     ram
   \                     ??ModBus_CommS_24:
   \   0000030C   4869               LDR      R0,[R1, #+20]
   \   0000030E   0028               CMP      R0,#+0
   \   00000310   02D1               BNE      ??ModBus_CommS_21
   \   00000312   0D61               STR      R5,[R1, #+16]
   \   00000314   0820               MOVS     R0,#+8
   \                     ??ModBus_CommS_25:
   \   00000316   4861               STR      R0,[R1, #+20]
    414                                                         
    415                   
    416          
    417                      //Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
    418                    }
    419             if (modbusframe[1]==6)
   \                     ??ModBus_CommS_21:
   \   00000318   6078               LDRB     R0,[R4, #+1]
   \   0000031A   0628               CMP      R0,#+6
   \   0000031C   46D1               BNE      ??ModBus_CommS_26
    420             {
    421                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   0000031E   A079               LDRB     R0,[R4, #+6]
   \   00000320   0002               LSLS     R0,R0,#+8
   \   00000322   E679               LDRB     R6,[R4, #+7]
   \   00000324   0643               ORRS     R6,R6,R0
   \   00000326   0621               MOVS     R1,#+6
   \   00000328   2000               MOVS     R0,R4
   \   0000032A   ........           BL       crc16
   \   0000032E   8642               CMP      R6,R0
   \   00000330   00D0               BEQ      .+4
   \   00000332   7BE6               B        ??ModBus_CommS_4
    422                                
    423                                Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
   \   00000334   3F06               LSLS     R7,R7,#+24
   \   00000336   3F0E               LSRS     R7,R7,#+24
   \   00000338   E819               ADDS     R0,R5,R7
   \   0000033A   0178               LDRB     R1,[R0, #+0]
   \   0000033C   0122               MOVS     R2,#+1
   \   0000033E   009B               LDR      R3,[SP, #+0]
   \   00000340   9A40               LSLS     R2,R2,R3
   \   00000342   9143               BICS     R1,R1,R2
   \   00000344   0170               STRB     R1,[R0, #+0]
    424                                
    425                                ram.VarCom_Byte[(RamCall*2)]   = modbusframe[4] ;
   \   00000346   ....               LDR      R1,??DataTable2  ;; ram
   \   00000348   0298               LDR      R0,[SP, #+8]
   \   0000034A   0004               LSLS     R0,R0,#+16
   \   0000034C   C00B               LSRS     R0,R0,#+15
   \   0000034E   0818               ADDS     R0,R1,R0
   \   00000350   2179               LDRB     R1,[R4, #+4]
   \   00000352   0170               STRB     R1,[R0, #+0]
    426                                ram.VarCom_Byte[(RamCall*2)+1] = modbusframe[5] ;
   \   00000354   6179               LDRB     R1,[R4, #+5]
   \   00000356   4170               STRB     R1,[R0, #+1]
    427                                                                        
    428                                //odpowiedz ----------------------------------------------
    429                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \   00000358   9548               LDR      R0,??ModBus_CommS_27  ;; AdressModbus
   \   0000035A   0078               LDRB     R0,[R0, #+0]
   \   0000035C   2870               STRB     R0,[R5, #+0]
    430                                Buff_TX[1]=0x6;   
   \   0000035E   0620               MOVS     R0,#+6
   \   00000360   6870               STRB     R0,[R5, #+1]
    431                                Buff_TX[2]=modbusframe[2];
   \   00000362   A078               LDRB     R0,[R4, #+2]
   \   00000364   A870               STRB     R0,[R5, #+2]
    432                                Buff_TX[3]=modbusframe[3];
   \   00000366   E078               LDRB     R0,[R4, #+3]
   \   00000368   E870               STRB     R0,[R5, #+3]
    433                                Buff_TX[4]=modbusframe[4];
   \   0000036A   2079               LDRB     R0,[R4, #+4]
   \   0000036C   2871               STRB     R0,[R5, #+4]
    434                                Buff_TX[5]=modbusframe[5];
   \   0000036E   6079               LDRB     R0,[R4, #+5]
   \   00000370   6871               STRB     R0,[R5, #+5]
    435                                                      
    436                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   00000372   0621               MOVS     R1,#+6
   \   00000374   2800               MOVS     R0,R5
   \   00000376   ........           BL       crc16
   \   0000037A   2900               MOVS     R1,R5
   \   0000037C   891D               ADDS     R1,R1,#+6
   \   0000037E   4870               STRB     R0,[R1, #+1]
   \   00000380   000A               LSRS     R0,R0,#+8
   \   00000382   0870               STRB     R0,[R1, #+0]
    437                                
    438                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   00000384   8020               MOVS     R0,#+128
   \   00000386   4000               LSLS     R0,R0,#+1        ;; #+256
   \   00000388   0399               LDR      R1,[SP, #+12]
   \   0000038A   0918               ADDS     R1,R1,R0
   \   0000038C   0831               ADDS     R1,R1,#+8
   \   0000038E   4868               LDR      R0,[R1, #+4]
   \   00000390   0028               CMP      R0,#+0
   \   00000392   05D1               BNE      ??ModBus_CommS_28
   \   00000394   0D60               STR      R5,[R1, #+0]
   \   00000396   0820               MOVS     R0,#+8
   \   00000398   4860               STR      R0,[R1, #+4]
   \   0000039A   0020               MOVS     R0,#+0
   \   0000039C   0861               STR      R0,[R1, #+16]
   \   0000039E   04E0               B.N      ??ModBus_CommS_29
   \                     ??ModBus_CommS_28:
   \   000003A0   4869               LDR      R0,[R1, #+20]
   \   000003A2   0028               CMP      R0,#+0
   \   000003A4   02D1               BNE      ??ModBus_CommS_26
   \   000003A6   0D61               STR      R5,[R1, #+16]
   \   000003A8   0820               MOVS     R0,#+8
   \                     ??ModBus_CommS_29:
   \   000003AA   4861               STR      R0,[R1, #+20]
    439                                                         
    440                         
    441                                
    442                      //Write Multiple Status  (zapis zmiennych dwustanowych - grupowo DA00-DDFF)
    443                    }
    444             if (modbusframe[1]==15)
   \                     ??ModBus_CommS_26:
   \   000003AC   6078               LDRB     R0,[R4, #+1]
   \   000003AE   0F28               CMP      R0,#+15
   \   000003B0   00D0               BEQ      .+4
   \   000003B2   9CE0               B        ??ModBus_CommS_30
    445             {
    446                                if ((((WORD)modbusframe[modbusframe[6]+7])<<8 | ((WORD)modbusframe[modbusframe[6]+8])) != crc16(modbusframe,modbusframe[6]+7)) return 0;   //sprawdzenie CRC
   \   000003B4   A079               LDRB     R0,[R4, #+6]
   \   000003B6   2018               ADDS     R0,R4,R0
   \   000003B8   C079               LDRB     R0,[R0, #+7]
   \   000003BA   0002               LSLS     R0,R0,#+8
   \   000003BC   A179               LDRB     R1,[R4, #+6]
   \   000003BE   6118               ADDS     R1,R4,R1
   \   000003C0   0E7A               LDRB     R6,[R1, #+8]
   \   000003C2   0643               ORRS     R6,R6,R0
   \   000003C4   A179               LDRB     R1,[R4, #+6]
   \   000003C6   C91D               ADDS     R1,R1,#+7
   \   000003C8   2000               MOVS     R0,R4
   \   000003CA   ........           BL       crc16
   \   000003CE   8642               CMP      R6,R0
   \   000003D0   00D0               BEQ      .+4
   \   000003D2   2BE6               B        ??ModBus_CommS_4
    447                 
    448                                
    449          
    450                                CurentByteBufTX=7;
   \   000003D4   0727               MOVS     R7,#+7
   \   000003D6   0020               MOVS     R0,#+0
   \   000003D8   0090               STR      R0,[SP, #+0]
    451                                CurentBitBufTX=0;
    452                                   
    453                                RamByte=(((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+1)/8);
   \   000003DA   A078               LDRB     R0,[R4, #+2]
   \   000003DC   0102               LSLS     R1,R0,#+8
   \   000003DE   E078               LDRB     R0,[R4, #+3]
   \   000003E0   0843               ORRS     R0,R0,R1
   \   000003E2   401C               ADDS     R0,R0,#+1
   \   000003E4   8110               ASRS     R1,R0,#+2
   \   000003E6   490F               LSRS     R1,R1,#+29
   \   000003E8   0818               ADDS     R0,R1,R0
   \   000003EA   C610               ASRS     R6,R0,#+3
   \   000003EC   3604               LSLS     R6,R6,#+16
   \   000003EE   360C               LSRS     R6,R6,#+16
    454                                RamBit= ((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+1) % 8;
   \   000003F0   A078               LDRB     R0,[R4, #+2]
   \   000003F2   0102               LSLS     R1,R0,#+8
   \   000003F4   E078               LDRB     R0,[R4, #+3]
   \   000003F6   0843               ORRS     R0,R0,R1
   \   000003F8   401C               ADDS     R0,R0,#+1
   \   000003FA   E178               LDRB     R1,[R4, #+3]
   \   000003FC   491C               ADDS     R1,R1,#+1
   \   000003FE   8210               ASRS     R2,R0,#+2
   \   00000400   520F               LSRS     R2,R2,#+29
   \   00000402   1018               ADDS     R0,R2,R0
   \   00000404   C010               ASRS     R0,R0,#+3
   \   00000406   C000               LSLS     R0,R0,#+3
   \   00000408   081A               SUBS     R0,R1,R0
   \   0000040A   0006               LSLS     R0,R0,#+24
   \   0000040C   000E               LSRS     R0,R0,#+24
   \   0000040E   0190               STR      R0,[SP, #+4]
    455                                
    456                                for (int i=0; i<BitCount; i++)
   \   00000410   0020               MOVS     R0,#+0
   \   00000412   0799               LDR      R1,[SP, #+28]
   \   00000414   0904               LSLS     R1,R1,#+16
   \   00000416   3ED0               BEQ      ??ModBus_CommS_31
    457                                { 
    458                                  if ((modbusframe[CurentByteBufTX]>>CurentBitBufTX)&0x1)
   \                     ??ModBus_CommS_32:
   \   00000418   E15D               LDRB     R1,[R4, R7]
   \   0000041A   009A               LDR      R2,[SP, #+0]
   \   0000041C   1141               ASRS     R1,R1,R2
   \   0000041E   C907               LSLS     R1,R1,#+31
   \   00000420   ....               LDR      R1,??DataTable2  ;; ram
   \   00000422   09D5               BPL      ??ModBus_CommS_33
    459                                  {
    460                                    ram.VarCom_Byte[RamByte] |= 0x1 << RamBit;
   \   00000424   8919               ADDS     R1,R1,R6
   \   00000426   0A78               LDRB     R2,[R1, #+0]
   \   00000428   9446               MOV      R12,R2
   \   0000042A   0123               MOVS     R3,#+1
   \   0000042C   019A               LDR      R2,[SP, #+4]
   \   0000042E   9340               LSLS     R3,R3,R2
   \   00000430   6246               MOV      R2,R12
   \   00000432   1343               ORRS     R3,R3,R2
   \   00000434   0B70               STRB     R3,[R1, #+0]
   \   00000436   08E0               B        ??ModBus_CommS_34
    461                                  }
    462                                  else
    463                                  {
    464                                    ram.VarCom_Byte[RamByte] &= ~(0x1 << RamBit);
   \                     ??ModBus_CommS_33:
   \   00000438   8919               ADDS     R1,R1,R6
   \   0000043A   0A78               LDRB     R2,[R1, #+0]
   \   0000043C   9446               MOV      R12,R2
   \   0000043E   0123               MOVS     R3,#+1
   \   00000440   019A               LDR      R2,[SP, #+4]
   \   00000442   9340               LSLS     R3,R3,R2
   \   00000444   6246               MOV      R2,R12
   \   00000446   9A43               BICS     R2,R2,R3
   \   00000448   0A70               STRB     R2,[R1, #+0]
    465                                  }   
    466                                 
    467                                  if (RamBit<=6) {RamBit++;} else {RamBit=0; RamByte++;}
   \                     ??ModBus_CommS_34:
   \   0000044A   0199               LDR      R1,[SP, #+4]
   \   0000044C   0906               LSLS     R1,R1,#+24
   \   0000044E   090E               LSRS     R1,R1,#+24
   \   00000450   0729               CMP      R1,#+7
   \   00000452   05D2               BCS      ??ModBus_CommS_35
   \   00000454   0199               LDR      R1,[SP, #+4]
   \   00000456   491C               ADDS     R1,R1,#+1
   \   00000458   0906               LSLS     R1,R1,#+24
   \   0000045A   090E               LSRS     R1,R1,#+24
   \   0000045C   0191               STR      R1,[SP, #+4]
   \   0000045E   04E0               B        ??ModBus_CommS_36
   \                     ??ModBus_CommS_35:
   \   00000460   0021               MOVS     R1,#+0
   \   00000462   0191               STR      R1,[SP, #+4]
   \   00000464   761C               ADDS     R6,R6,#+1
   \   00000466   3604               LSLS     R6,R6,#+16
   \   00000468   360C               LSRS     R6,R6,#+16
    468                                  if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
   \                     ??ModBus_CommS_36:
   \   0000046A   0099               LDR      R1,[SP, #+0]
   \   0000046C   0906               LSLS     R1,R1,#+24
   \   0000046E   090E               LSRS     R1,R1,#+24
   \   00000470   0729               CMP      R1,#+7
   \   00000472   05D2               BCS      ??ModBus_CommS_37
   \   00000474   0099               LDR      R1,[SP, #+0]
   \   00000476   491C               ADDS     R1,R1,#+1
   \   00000478   0906               LSLS     R1,R1,#+24
   \   0000047A   090E               LSRS     R1,R1,#+24
   \   0000047C   0091               STR      R1,[SP, #+0]
   \   0000047E   04E0               B        ??ModBus_CommS_38
   \                     ??ModBus_CommS_37:
   \   00000480   0021               MOVS     R1,#+0
   \   00000482   0091               STR      R1,[SP, #+0]
   \   00000484   7F1C               ADDS     R7,R7,#+1
   \   00000486   3F06               LSLS     R7,R7,#+24
   \   00000488   3F0E               LSRS     R7,R7,#+24
    469                                  
    470                                }
   \                     ??ModBus_CommS_38:
   \   0000048A   401C               ADDS     R0,R0,#+1
   \   0000048C   0799               LDR      R1,[SP, #+28]
   \   0000048E   0904               LSLS     R1,R1,#+16
   \   00000490   090C               LSRS     R1,R1,#+16
   \   00000492   8842               CMP      R0,R1
   \   00000494   C0DB               BLT      ??ModBus_CommS_32
    471                               
    472                                
    473                                //odpowiedz ----------------------------------------------
    474                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \                     ??ModBus_CommS_31:
   \   00000496   4648               LDR      R0,??ModBus_CommS_27  ;; AdressModbus
   \   00000498   0078               LDRB     R0,[R0, #+0]
   \   0000049A   2870               STRB     R0,[R5, #+0]
    475                                Buff_TX[1]=0xF;   
   \   0000049C   0F20               MOVS     R0,#+15
   \   0000049E   6870               STRB     R0,[R5, #+1]
    476                                Buff_TX[2]=modbusframe[2];
   \   000004A0   A078               LDRB     R0,[R4, #+2]
   \   000004A2   A870               STRB     R0,[R5, #+2]
    477                                Buff_TX[3]=modbusframe[3];
   \   000004A4   E078               LDRB     R0,[R4, #+3]
   \   000004A6   E870               STRB     R0,[R5, #+3]
    478                                Buff_TX[4]=modbusframe[4];
   \   000004A8   2079               LDRB     R0,[R4, #+4]
   \   000004AA   2871               STRB     R0,[R5, #+4]
    479                                Buff_TX[5]=modbusframe[5];
   \   000004AC   6079               LDRB     R0,[R4, #+5]
   \   000004AE   6871               STRB     R0,[R5, #+5]
    480                                                      
    481                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   000004B0   0621               MOVS     R1,#+6
   \   000004B2   2800               MOVS     R0,R5
   \   000004B4   ........           BL       crc16
   \   000004B8   2900               MOVS     R1,R5
   \   000004BA   891D               ADDS     R1,R1,#+6
   \   000004BC   4870               STRB     R0,[R1, #+1]
   \   000004BE   000A               LSRS     R0,R0,#+8
   \   000004C0   0870               STRB     R0,[R1, #+0]
    482                                
    483                                Buff_TX[8]=0;
   \   000004C2   0020               MOVS     R0,#+0
   \   000004C4   2872               STRB     R0,[R5, #+8]
    484                                
    485                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   000004C6   8020               MOVS     R0,#+128
   \   000004C8   4000               LSLS     R0,R0,#+1        ;; #+256
   \   000004CA   0399               LDR      R1,[SP, #+12]
   \   000004CC   0918               ADDS     R1,R1,R0
   \   000004CE   0831               ADDS     R1,R1,#+8
   \   000004D0   4868               LDR      R0,[R1, #+4]
   \   000004D2   0028               CMP      R0,#+0
   \   000004D4   05D1               BNE      ??ModBus_CommS_39
   \   000004D6   0D60               STR      R5,[R1, #+0]
   \   000004D8   0820               MOVS     R0,#+8
   \   000004DA   4860               STR      R0,[R1, #+4]
   \   000004DC   0020               MOVS     R0,#+0
   \   000004DE   0861               STR      R0,[R1, #+16]
   \   000004E0   04E0               B.N      ??ModBus_CommS_40
   \                     ??ModBus_CommS_39:
   \   000004E2   4869               LDR      R0,[R1, #+20]
   \   000004E4   0028               CMP      R0,#+0
   \   000004E6   02D1               BNE      ??ModBus_CommS_30
   \   000004E8   0D61               STR      R5,[R1, #+16]
   \   000004EA   0820               MOVS     R0,#+8
   \                     ??ModBus_CommS_40:
   \   000004EC   4861               STR      R0,[R1, #+20]
    486                                                         
    487                            
    488                                          
    489                                
    490                        //Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
    491                    }
    492             if (modbusframe[1]==16)
   \                     ??ModBus_CommS_30:
   \   000004EE   6078               LDRB     R0,[R4, #+1]
   \   000004F0   1028               CMP      R0,#+16
   \   000004F2   57D1               BNE      ??ModBus_CommS_41
    493             {
    494                                if ((((WORD)modbusframe[modbusframe[6]+7])<<8 | ((WORD)modbusframe[modbusframe[6]+8])) != crc16(modbusframe,modbusframe[6]+7)) return 0;   //sprawdzenie CRC
   \   000004F4   A079               LDRB     R0,[R4, #+6]
   \   000004F6   2018               ADDS     R0,R4,R0
   \   000004F8   C079               LDRB     R0,[R0, #+7]
   \   000004FA   0002               LSLS     R0,R0,#+8
   \   000004FC   A179               LDRB     R1,[R4, #+6]
   \   000004FE   6118               ADDS     R1,R4,R1
   \   00000500   0E7A               LDRB     R6,[R1, #+8]
   \   00000502   0643               ORRS     R6,R6,R0
   \   00000504   A179               LDRB     R1,[R4, #+6]
   \   00000506   C91D               ADDS     R1,R1,#+7
   \   00000508   2000               MOVS     R0,R4
   \   0000050A   ........           BL       crc16
   \   0000050E   8642               CMP      R6,R0
   \   00000510   00D0               BEQ      .+4
   \   00000512   8BE5               B        ??ModBus_CommS_4
    495          
    496                                CurentByteBufTX=7;
   \   00000514   0727               MOVS     R7,#+7
   \   00000516   0020               MOVS     R0,#+0
   \   00000518   0699               LDR      R1,[SP, #+24]
   \   0000051A   0906               LSLS     R1,R1,#+24
   \   0000051C   16D0               BEQ      ??ModBus_CommS_42
    497                                
    498                                for (int i=0; i<WordCount; i++)
    499                                { 
    500                                  
    501                                  ram.VarCom_Byte[(RamCall*2)]   = modbusframe[CurentByteBufTX] ;
   \                     ??ModBus_CommS_43:
   \   0000051E   ....               LDR      R1,??DataTable2  ;; ram
   \   00000520   029A               LDR      R2,[SP, #+8]
   \   00000522   5200               LSLS     R2,R2,#+1
   \   00000524   8918               ADDS     R1,R1,R2
   \   00000526   E219               ADDS     R2,R4,R7
   \   00000528   1378               LDRB     R3,[R2, #+0]
   \   0000052A   0B70               STRB     R3,[R1, #+0]
    502                                  ram.VarCom_Byte[(RamCall*2)+1] = modbusframe[CurentByteBufTX+1] ;
   \   0000052C   5278               LDRB     R2,[R2, #+1]
   \   0000052E   4A70               STRB     R2,[R1, #+1]
    503            
    504                                 
    505                                  CurentByteBufTX=CurentByteBufTX+2;
   \   00000530   BF1C               ADDS     R7,R7,#+2
   \   00000532   3F06               LSLS     R7,R7,#+24
   \   00000534   3F0E               LSRS     R7,R7,#+24
    506                                  RamCall++;
   \   00000536   0299               LDR      R1,[SP, #+8]
   \   00000538   491C               ADDS     R1,R1,#+1
   \   0000053A   0904               LSLS     R1,R1,#+16
   \   0000053C   090C               LSRS     R1,R1,#+16
   \   0000053E   0291               STR      R1,[SP, #+8]
    507                                  
    508                                }
   \   00000540   401C               ADDS     R0,R0,#+1
   \   00000542   0699               LDR      R1,[SP, #+24]
   \   00000544   0906               LSLS     R1,R1,#+24
   \   00000546   090E               LSRS     R1,R1,#+24
   \   00000548   8842               CMP      R0,R1
   \   0000054A   E8DB               BLT      ??ModBus_CommS_43
    509          
    510                                //odpowiedz ----------------------------------------------
    511                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \                     ??ModBus_CommS_42:
   \   0000054C   1848               LDR      R0,??ModBus_CommS_27  ;; AdressModbus
   \   0000054E   0078               LDRB     R0,[R0, #+0]
   \   00000550   2870               STRB     R0,[R5, #+0]
    512                                Buff_TX[1]=0x10;   
   \   00000552   1020               MOVS     R0,#+16
   \   00000554   6870               STRB     R0,[R5, #+1]
    513                                Buff_TX[2]=modbusframe[2];
   \   00000556   A078               LDRB     R0,[R4, #+2]
   \   00000558   A870               STRB     R0,[R5, #+2]
    514                                Buff_TX[3]=modbusframe[3];
   \   0000055A   E078               LDRB     R0,[R4, #+3]
   \   0000055C   E870               STRB     R0,[R5, #+3]
    515                                Buff_TX[4]=modbusframe[4];
   \   0000055E   2079               LDRB     R0,[R4, #+4]
   \   00000560   2871               STRB     R0,[R5, #+4]
    516                                Buff_TX[5]=modbusframe[5];
   \   00000562   6079               LDRB     R0,[R4, #+5]
   \   00000564   6871               STRB     R0,[R5, #+5]
    517                                                      
    518                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   00000566   0621               MOVS     R1,#+6
   \   00000568   2800               MOVS     R0,R5
   \   0000056A   ........           BL       crc16
   \   0000056E   2900               MOVS     R1,R5
   \   00000570   891D               ADDS     R1,R1,#+6
   \   00000572   4870               STRB     R0,[R1, #+1]
   \   00000574   000A               LSRS     R0,R0,#+8
   \   00000576   0870               STRB     R0,[R1, #+0]
    519                                
    520                                Buff_TX[8]=0;
   \   00000578   0020               MOVS     R0,#+0
   \   0000057A   2872               STRB     R0,[R5, #+8]
    521                                
    522                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   0000057C   8020               MOVS     R0,#+128
   \   0000057E   4000               LSLS     R0,R0,#+1        ;; #+256
   \   00000580   0399               LDR      R1,[SP, #+12]
   \   00000582   0918               ADDS     R1,R1,R0
   \   00000584   0831               ADDS     R1,R1,#+8
   \   00000586   4868               LDR      R0,[R1, #+4]
   \   00000588   0028               CMP      R0,#+0
   \   0000058A   05D1               BNE      ??ModBus_CommS_44
   \   0000058C   0D60               STR      R5,[R1, #+0]
   \   0000058E   0820               MOVS     R0,#+8
   \   00000590   4860               STR      R0,[R1, #+4]
   \   00000592   0020               MOVS     R0,#+0
   \   00000594   0861               STR      R0,[R1, #+16]
   \   00000596   04E0               B.N      ??ModBus_CommS_45
   \                     ??ModBus_CommS_44:
   \   00000598   4869               LDR      R0,[R1, #+20]
   \   0000059A   0028               CMP      R0,#+0
   \   0000059C   02D1               BNE      ??ModBus_CommS_41
   \   0000059E   0D61               STR      R5,[R1, #+16]
   \   000005A0   0820               MOVS     R0,#+8
   \                     ??ModBus_CommS_45:
   \   000005A2   4861               STR      R0,[R1, #+20]
    523                                                         
    524                        
    525                          
    526                    }
    527            
    528            return 1;
   \                     ??ModBus_CommS_41:
   \   000005A4   0120               MOVS     R0,#+1
   \                     ??ModBus_CommS_5:
   \   000005A6   09B0               ADD      SP,SP,#+36
   \   000005A8   F0BC               POP      {R4-R7}
   \   000005AA   02BC               POP      {R1}
   \   000005AC   0847               BX       R1               ;; return
   \   000005AE   C046               Nop      
   \                     ??ModBus_CommS_27:
   \   000005B0   ........           DC32     AdressModbus
    529          }//_______________________ Koniec funkcji ModBus_CommS ________________________________

   \                                 In section .bss, align 4
   \                     g_Ans_ZD_MODBUS_0:
   \   00000000                      DS8 1
    530          
    531          
    532          
    533          
    534          
    535          
    536          
    537          
    538          //!-----------------------------------------------------------------------------
    539          //!  Nazwa funkcji :    ModBus_MASTER_TX_US0
    540          //!  Opis:              Funkcja realizacji zadañ MODBUS wed³ug zadañ z tabeli ZD_MODBUS_0
    541          //!-----------------------------------------------------------------------------
    542          //!  
    543          //!----------------------------------------------------------------------------- 
    544          char nr_tmp=0;
   \                     nr_tmp:
   \   00000001                      DS8 1
   \                     g_Current_ZD_MODBUS_0:
   \   00000002                      DS8 1
   \                     g_Current_ZD_MODBUS_1:
   \   00000003                      DS8 1
   \                     ZD_MODBUS_0:
   \   00000004                      DS8 260
   \                     Buff_TX_0:
   \   00000108                      DS8 20
   \                     ZD_MODBUS_1:
   \   0000011C                      DS8 260
   \                     Buff_TX_1:
   \   00000220                      DS8 580

   \                                 In section .bss, align 1
   \                     g_ERR_ZD_MODBUS_0:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     g_ERR_ZD_MODBUS_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     g_Ans_ZD_MODBUS_1:
   \   00000000                      DS8 1

   \                                 In section Debug.txt, align 4, keep-with-next
    545          char ModBus_MASTER_TX(char US_Nr)
    546          {
   \                     ModBus_MASTER_TX:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0200               MOVS     R2,R0
    547                char il_ptl=0;
    548                AT91PS_USART AT91C_BASE_US;
    549                ptr_ZD_MODBUS ZD_MODBUS;
    550                char* Current_ZD_MODBUS;
    551                BYTE* Buff_TX;
    552          
    553                //wybór USARTa
    554                if (US_Nr) 
   \   00000004   0AD0               BEQ      ??ModBus_MASTER_TX_0
    555                {
    556                    AT91C_BASE_US     =   AT91C_BASE_US1;
   \   00000006   6F48               LDR      R0,??ModBus_MASTER_TX_1  ;; 0xfffc4000
   \   00000008   0090               STR      R0,[SP, #+0]
    557                    ZD_MODBUS         =   ZD_MODBUS_1;
   \   0000000A   6F4B               LDR      R3,??ModBus_MASTER_TX_1+0x4  ;; g_Ans_ZD_MODBUS_0
   \   0000000C   8E20               MOVS     R0,#+142
   \   0000000E   4000               LSLS     R0,R0,#+1        ;; #+284
   \   00000010   1818               ADDS     R0,R3,R0
    558                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_1;
   \   00000012   1900               MOVS     R1,R3
   \   00000014   C91C               ADDS     R1,R1,#+3
    559                    Buff_TX           =   Buff_TX_1; 
                                             ^
Warning[Pe513]: a value of type "char *" cannot be assigned to an entity of
          type "BYTE *"
   \   00000016   8824               MOVS     R4,#+136
   \   00000018   A400               LSLS     R4,R4,#+2        ;; #+544
   \   0000001A   08E0               B.N      ??ModBus_MASTER_TX_2
    560                }   
    561                else 
    562                {
    563                    AT91C_BASE_US     =   AT91C_BASE_US0;
   \                     ??ModBus_MASTER_TX_0:
   \   0000001C   6B48               LDR      R0,??ModBus_MASTER_TX_1+0x8  ;; 0xfffc0000
   \   0000001E   0090               STR      R0,[SP, #+0]
    564                    ZD_MODBUS         =   ZD_MODBUS_0;
   \   00000020   694B               LDR      R3,??ModBus_MASTER_TX_1+0x4  ;; g_Ans_ZD_MODBUS_0
   \   00000022   1800               MOVS     R0,R3
   \   00000024   001D               ADDS     R0,R0,#+4
    565                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_0;
   \   00000026   1900               MOVS     R1,R3
   \   00000028   891C               ADDS     R1,R1,#+2
    566                    Buff_TX           =   Buff_TX_0; 
   \   0000002A   8424               MOVS     R4,#+132
   \   0000002C   6400               LSLS     R4,R4,#+1        ;; #+264
   \                     ??ModBus_MASTER_TX_2:
   \   0000002E   1C19               ADDS     R4,R3,R4
    567                }
    568               
    569          
    570          
    571          
    572          
    573          
    574          
    575                nr_tmp=US_Nr;
   \   00000030   674B               LDR      R3,??ModBus_MASTER_TX_1+0xC  ;; g_Ans_ZD_MODBUS_0 + 1
   \   00000032   1A70               STRB     R2,[R3, #+0]
    576                
    577                Skok:
                       ^
Warning[Pe177]: label "Skok" was declared but never referenced
    578                    
    579                  
    580                      if (il_ptl < ZD_MODBUS_Tab_Max) {il_ptl++;} else {return 0;}
    581                      
    582                      if ((ZD_MODBUS[(*Current_ZD_MODBUS)+1].Adress > 0) && ((*Current_ZD_MODBUS)+1 < ZD_MODBUS_Tab_Max) )
   \   00000034   0A78               LDRB     R2,[R1, #+0]
   \   00000036   0D23               MOVS     R3,#+13
   \   00000038   5343               MULS     R3,R2,R3
   \   0000003A   C318               ADDS     R3,R0,R3
   \   0000003C   5B7B               LDRB     R3,[R3, #+13]
   \   0000003E   002B               CMP      R3,#+0
   \   00000040   16D0               BEQ      ??ModBus_MASTER_TX_3
   \   00000042   1300               MOVS     R3,R2
   \   00000044   5B1C               ADDS     R3,R3,#+1
   \   00000046   1B04               LSLS     R3,R3,#+16
   \   00000048   1B0C               LSRS     R3,R3,#+16
   \   0000004A   142B               CMP      R3,#+20
   \   0000004C   10D2               BCS      ??ModBus_MASTER_TX_3
    583                      {
    584                        *Current_ZD_MODBUS=(*Current_ZD_MODBUS)+1;
   \   0000004E   521C               ADDS     R2,R2,#+1
   \   00000050   0A70               STRB     R2,[R1, #+0]
    585                        
    586                            ZD_MODBUS[0].Error=0x0;
   \   00000052   0022               MOVS     R2,#+0
   \   00000054   C272               STRB     R2,[R0, #+11]
   \   00000056   0273               STRB     R2,[R0, #+12]
    587                            ZD_MODBUS[1].Error=0x0;
   \   00000058   0276               STRB     R2,[R0, #+24]
   \   0000005A   4276               STRB     R2,[R0, #+25]
    588                            ZD_MODBUS[2].Error=0x0;
   \   0000005C   0200               MOVS     R2,R0
   \   0000005E   2532               ADDS     R2,R2,#+37
   \   00000060   0023               MOVS     R3,#+0
   \   00000062   1370               STRB     R3,[R2, #+0]
   \   00000064   5370               STRB     R3,[R2, #+1]
    589                            ZD_MODBUS[3].Error=0x0;
   \   00000066   0200               MOVS     R2,R0
   \   00000068   3232               ADDS     R2,R2,#+50
   \   0000006A   1370               STRB     R3,[R2, #+0]
   \   0000006C   5370               STRB     R3,[R2, #+1]
   \   0000006E   01E0               B        ??ModBus_MASTER_TX_4
    590                        
    591                      }
    592                      else
    593                      {
    594                        *Current_ZD_MODBUS=0;
   \                     ??ModBus_MASTER_TX_3:
   \   00000070   0022               MOVS     R2,#+0
   \   00000072   0A70               STRB     R2,[R1, #+0]
    595                      } 
    596                      
    597                      /*
    598                      if (ZD_MODBUS[*Current_ZD_MODBUS].Adress == 0) 
    599                      {
    600                        *ERR_ZD_MODBUS=1;
    601                        goto Skok;
    602                      }
    603                        
    604          
    605                      
    606                      if  (ZD_MODBUS[*Current_ZD_MODBUS].Error > 50)
    607                       {
    608                         ZD_MODBUS[*Current_ZD_MODBUS].Error++;
    609                         if  (ZD_MODBUS[*Current_ZD_MODBUS].Error > 5000+(*Current_ZD_MODBUS)*10)
    610                         {
    611                            ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
    612                  
    613                         }
    614                         else
    615                         {
    616                           goto Skok;
    617                           
    618                         }
    619                       }
    620                       Delay(1);
    621                      
    622                      */
    623                      
    624                   char liB15 = (((ZD_MODBUS[*Current_ZD_MODBUS].Coil)-1) / 8)+1;  
   \                     ??ModBus_MASTER_TX_4:
   \   00000074   0A78               LDRB     R2,[R1, #+0]
   \   00000076   0D23               MOVS     R3,#+13
   \   00000078   5A43               MULS     R2,R3,R2
   \   0000007A   8318               ADDS     R3,R0,R2
   \   0000007C   9A79               LDRB     R2,[R3, #+6]
   \   0000007E   DD79               LDRB     R5,[R3, #+7]
   \   00000080   2D06               LSLS     R5,R5,#+24
   \   00000082   2D0C               LSRS     R5,R5,#+16
   \   00000084   2A43               ORRS     R2,R2,R5
   \   00000086   521E               SUBS     R2,R2,#+1
   \   00000088   9310               ASRS     R3,R2,#+2
   \   0000008A   5B0F               LSRS     R3,R3,#+29
   \   0000008C   9A18               ADDS     R2,R3,R2
   \   0000008E   D210               ASRS     R2,R2,#+3
   \   00000090   521C               ADDS     R2,R2,#+1
   \   00000092   1206               LSLS     R2,R2,#+24
   \   00000094   120E               LSRS     R2,R2,#+24
    625                      
    626           //*** Funkcje uproszczone dostosowane do systemu. Nie zawieraj¹ wszystkich mo¿liwoœci modbus
    627                      
    628                      
    629          
    630                   
    631                   
    632                      
    633                      
    634                       //Write Multiple Status  (zapis rejestru)
    635                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==0xf)
   \   00000096   0B78               LDRB     R3,[R1, #+0]
   \   00000098   0D25               MOVS     R5,#+13
   \   0000009A   6B43               MULS     R3,R5,R3
   \   0000009C   C318               ADDS     R3,R0,R3
   \   0000009E   5D78               LDRB     R5,[R3, #+1]
   \   000000A0   0F2D               CMP      R5,#+15
   \   000000A2   00D0               BEQ      .+4
   \   000000A4   89E0               B        ??ModBus_MASTER_TX_5
    636                      {
    637                                    
    638                        
    639                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
   \   000000A6   1B78               LDRB     R3,[R3, #+0]
   \   000000A8   2370               STRB     R3,[R4, #+0]
    640                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
   \   000000AA   0B78               LDRB     R3,[R1, #+0]
   \   000000AC   0D25               MOVS     R5,#+13
   \   000000AE   6B43               MULS     R3,R5,R3
   \   000000B0   C318               ADDS     R3,R0,R3
   \   000000B2   5B78               LDRB     R3,[R3, #+1]
   \   000000B4   6370               STRB     R3,[R4, #+1]
    641                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)   
   \   000000B6   0B78               LDRB     R3,[R1, #+0]
   \   000000B8   6B43               MULS     R3,R5,R3
   \   000000BA   C518               ADDS     R5,R0,R3
   \   000000BC   AB78               LDRB     R3,[R5, #+2]
   \   000000BE   EE78               LDRB     R6,[R5, #+3]
   \   000000C0   3606               LSLS     R6,R6,#+24
   \   000000C2   360C               LSRS     R6,R6,#+16
   \   000000C4   3343               ORRS     R3,R3,R6
   \   000000C6   2500               MOVS     R5,R4
   \   000000C8   AD1C               ADDS     R5,R5,#+2
   \   000000CA   6B70               STRB     R3,[R5, #+1]
   \   000000CC   1B0A               LSRS     R3,R3,#+8
   \   000000CE   2B70               STRB     R3,[R5, #+0]
    642                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );                                             //il przesy³anych bajtów
   \   000000D0   0B78               LDRB     R3,[R1, #+0]
   \   000000D2   0D25               MOVS     R5,#+13
   \   000000D4   6B43               MULS     R3,R5,R3
   \   000000D6   C518               ADDS     R5,R0,R3
   \   000000D8   AB79               LDRB     R3,[R5, #+6]
   \   000000DA   EE79               LDRB     R6,[R5, #+7]
   \   000000DC   3606               LSLS     R6,R6,#+24
   \   000000DE   360C               LSRS     R6,R6,#+16
   \   000000E0   3343               ORRS     R3,R3,R6
   \   000000E2   2500               MOVS     R5,R4
   \   000000E4   2D1D               ADDS     R5,R5,#+4
   \   000000E6   6B70               STRB     R3,[R5, #+1]
   \   000000E8   1B0A               LSRS     R3,R3,#+8
   \   000000EA   2B70               STRB     R3,[R5, #+0]
    643                                Buff_TX[6]=liB15; 
   \   000000EC   A271               STRB     R2,[R4, #+6]
    644                                Buff_TX[7]=(MainStage.StageQ[ZD_MODBUS[*Current_ZD_MODBUS].StartAdr].Value[ZD_MODBUS[*Current_ZD_MODBUS].Target]) & 0xFF; 
   \   000000EE   0B78               LDRB     R3,[R1, #+0]
   \   000000F0   0D25               MOVS     R5,#+13
   \   000000F2   6B43               MULS     R3,R5,R3
   \   000000F4   C318               ADDS     R3,R0,R3
   \   000000F6   1E79               LDRB     R6,[R3, #+4]
   \   000000F8   5D79               LDRB     R5,[R3, #+5]
   \   000000FA   2D06               LSLS     R5,R5,#+24
   \   000000FC   2D0C               LSRS     R5,R5,#+16
   \   000000FE   2E43               ORRS     R6,R6,R5
   \   00000100   0B78               LDRB     R3,[R1, #+0]
   \   00000102   0D25               MOVS     R5,#+13
   \   00000104   6B43               MULS     R3,R5,R3
   \   00000106   C318               ADDS     R3,R0,R3
   \   00000108   9D78               LDRB     R5,[R3, #+2]
   \   0000010A   DF78               LDRB     R7,[R3, #+3]
   \   0000010C   3F06               LSLS     R7,R7,#+24
   \   0000010E   3F0C               LSRS     R7,R7,#+16
   \   00000110   3D43               ORRS     R5,R5,R7
   \   00000112   304B               LDR      R3,??ModBus_MASTER_TX_1+0x10  ;; MainStage
   \   00000114   304F               LDR      R7,??ModBus_MASTER_TX_1+0x14  ;; 0x3a2
   \   00000116   6D00               LSLS     R5,R5,#+1
   \   00000118   AC46               MOV      R12,R5
   \   0000011A   1625               MOVS     R5,#+22
   \   0000011C   6E43               MULS     R6,R5,R6
   \   0000011E   9D19               ADDS     R5,R3,R6
   \   00000120   6646               MOV      R6,R12
   \   00000122   AD19               ADDS     R5,R5,R6
   \   00000124   ED5B               LDRH     R5,[R5, R7]
   \   00000126   E571               STRB     R5,[R4, #+7]
    645                                Buff_TX[8]=((MainStage.StageQ[ZD_MODBUS[*Current_ZD_MODBUS].StartAdr].Value[ZD_MODBUS[*Current_ZD_MODBUS].Target])>>8) & 0xFF; 
   \   00000128   0D78               LDRB     R5,[R1, #+0]
   \   0000012A   0D26               MOVS     R6,#+13
   \   0000012C   7543               MULS     R5,R6,R5
   \   0000012E   4619               ADDS     R6,R0,R5
   \   00000130   3579               LDRB     R5,[R6, #+4]
   \   00000132   7779               LDRB     R7,[R6, #+5]
   \   00000134   3F06               LSLS     R7,R7,#+24
   \   00000136   3F0C               LSRS     R7,R7,#+16
   \   00000138   3D43               ORRS     R5,R5,R7
   \   0000013A   0978               LDRB     R1,[R1, #+0]
   \   0000013C   0D26               MOVS     R6,#+13
   \   0000013E   7143               MULS     R1,R6,R1
   \   00000140   4018               ADDS     R0,R0,R1
   \   00000142   8178               LDRB     R1,[R0, #+2]
   \   00000144   C678               LDRB     R6,[R0, #+3]
   \   00000146   3606               LSLS     R6,R6,#+24
   \   00000148   360C               LSRS     R6,R6,#+16
   \   0000014A   3143               ORRS     R1,R1,R6
   \   0000014C   2248               LDR      R0,??ModBus_MASTER_TX_1+0x14  ;; 0x3a2
   \   0000014E   4900               LSLS     R1,R1,#+1
   \   00000150   1626               MOVS     R6,#+22
   \   00000152   7543               MULS     R5,R6,R5
   \   00000154   5B19               ADDS     R3,R3,R5
   \   00000156   5918               ADDS     R1,R3,R1
   \   00000158   085A               LDRH     R0,[R1, R0]
   \   0000015A   0012               ASRS     R0,R0,#+8
   \   0000015C   2072               STRB     R0,[R4, #+8]
    646                                
    647                                SetWordToBytes(crc16(Buff_TX,liB15+7),&Buff_TX[7+liB15] );                    //wstawia sumê kontroln¹                     
   \   0000015E   1500               MOVS     R5,R2
   \   00000160   2900               MOVS     R1,R5
   \   00000162   C91D               ADDS     R1,R1,#+7
   \   00000164   2000               MOVS     R0,R4
   \   00000166   ........           BL       crc16
   \   0000016A   6119               ADDS     R1,R4,R5
   \   0000016C   0A00               MOVS     R2,R1
   \   0000016E   D21D               ADDS     R2,R2,#+7
   \   00000170   5070               STRB     R0,[R2, #+1]
   \   00000172   000A               LSRS     R0,R0,#+8
   \   00000174   1070               STRB     R0,[R2, #+0]
    648                                Buff_TX[9+liB15]=0;
   \   00000176   0022               MOVS     R2,#+0
   \   00000178   4A72               STRB     R2,[R1, #+9]
    649                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,9+liB15,0, 0);                        //Wysyla ramke        
   \   0000017A   0935               ADDS     R5,R5,#+9
   \   0000017C   2800               MOVS     R0,R5
   \   0000017E   8023               MOVS     R3,#+128
   \   00000180   5B00               LSLS     R3,R3,#+1        ;; #+256
   \   00000182   009D               LDR      R5,[SP, #+0]
   \   00000184   EB18               ADDS     R3,R5,R3
   \   00000186   DD68               LDR      R5,[R3, #+12]
   \   00000188   002D               CMP      R5,#+0
   \   0000018A   04D1               BNE      ??ModBus_MASTER_TX_6
   \   0000018C   9C60               STR      R4,[R3, #+8]
   \   0000018E   D860               STR      R0,[R3, #+12]
   \   00000190   9A61               STR      R2,[R3, #+24]
   \   00000192   DA61               STR      R2,[R3, #+28]
   \   00000194   04E0               B        ??ModBus_MASTER_TX_7
   \                     ??ModBus_MASTER_TX_6:
   \   00000196   DA69               LDR      R2,[R3, #+28]
   \   00000198   002A               CMP      R2,#+0
   \   0000019A   01D1               BNE      ??ModBus_MASTER_TX_7
   \   0000019C   9C61               STR      R4,[R3, #+24]
   \   0000019E   D861               STR      R0,[R3, #+28]
    650                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * (9+liB15)) +100);   
   \                     ??ModBus_MASTER_TX_7:
   \   000001A0   ........           BL       __aeabi_i2f
   \   000001A4   0D49               LDR      R1,??ModBus_MASTER_TX_1+0x18  ;; g_US0_OneByteTxTime
   \   000001A6   0968               LDR      R1,[R1, #+0]
   \   000001A8   ........           BL       __aeabi_fmul
   \   000001AC   0C49               LDR      R1,??ModBus_MASTER_TX_1+0x1C  ;; 0x42c80000
   \   000001AE   ........           BL       __aeabi_fadd
   \   000001B2   ........           BL       __aeabi_f2iz
   \   000001B6   0B49               LDR      R1,??ModBus_MASTER_TX_1+0x20  ;; g_US0_Comm_MinCykle
   \   000001B8   0860               STR      R0,[R1, #+0]
    651                      }
    652                    
    653                      
    654                      
    655                      
    656                      
    657                      
    658                      
    659           //*** Funkcje pe³ne MODBUS         
    660                      
    661                     
    662             /*         
    663                      
    664                      
    665                     
    666                      //Read Coil Status  (odczyt biezacego stanu grupy wyjsc cyfrowych)
    667                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==1)
    668                       {
    669                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    670                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    671                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    672                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    673                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                             //wstawia sumê kontroln¹
    674                                
    675                                Buff_TX[8]=0;
    676                                Buff_TX[9]=0;
    677                                Buff_TX[10]=0;
    678                                
    679                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    680                                
    681                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);    
    682                       }
    683                                
    684                            
    685                      //Read discrete input  (odczyt stanu grupy wejsc cyfrowych)
    686                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==2)
    687                      {
    688                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    689                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    690                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    691                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    692                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹
    693                                
    694                                Buff_TX[8]=0;
    695                                
    696                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    697                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +10);   
    698                      }   
    699                                
    700                      //Holding Register (odczyt zawartosci grupy rejestrów/analogów wyjsciowych)
    701                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==3)
    702                      {
    703                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    704                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    705                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    706                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    707                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹
    708                                
    709                                Buff_TX[8]=0;
    710                                
    711                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    712                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);   
    713                      } 
    714                                
    715                        //Input Register (odczyt zawartosci grupy rejestrów/analogów wejsciowych)      
    716                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==4)
    717                      {
    718                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    719                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    720                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    721                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    722                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹
    723                                
    724                                Buff_TX[8]=0;
    725                                
    726                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    727                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);   
    728                      }            
    729                                
    730                      //Write Coil Status  (ustawienie stanu jednego wyjscia cyfrowego)
    731                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==5)
    732                      {
    733                                TmpWalue = (ram.VarCom_Word[ZD_MODBUS[*Current_ZD_MODBUS].StartAdr]) & 0x1;
    734                                                      
    735                                if ((TmpWalue==ZD_MODBUS[*Current_ZD_MODBUS].LastSend) && (ZD_MODBUS[*Current_ZD_MODBUS].Confirm==1) )     return 0;
    736                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=0;
    737                                ZD_MODBUS[*Current_ZD_MODBUS].LastSend=TmpWalue;
    738                                  
    739                                GetBinVarPackComm(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr, 1, &Buff_TX[4]);
    740                               
    741                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    742                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    743                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)                          
    744                                
    745                                
    746                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                              //wstawia sumê kontroln¹                     
    747                                Buff_TX[8]=0;
    748                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);                           //Wysyla ramke        
    749                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1)+100;   
    750                      }
    751          
    752                      //Write Single Register  (zapis do pojedynczego rejestru/analogu wyjsciowego)
    753                      if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==6)
    754                      { 
    755                               
    756                        
    757                        
    758                        
    759                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    760                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    761                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)                         
    762                                
    763                                SetWordToBytes(ram.VarCom_Byte[(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr*2)],&Buff_TX[4] ); 
    764                                
    765                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹                     
    766                                
    767                                Buff_TX[8]=0;
    768                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke        
    769                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);   
    770                      }
    771                                
    772                      //Write Multiple Status  (zapis zmiennych dwustanowych - grupowo DA00-DDFF)
    773                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==0xf)
    774                      {
    775                                    
    776                        
    777                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    778                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    779                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)   
    780                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );                                             //il przesy³anych bajtów
    781                                Buff_TX[6]=liB15;
    782                                //GetBinVarPackComm(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr, (ZD_MODBUS[*Current_ZD_MODBUS].Coil), &Buff_TX[7]);  //void GetBinVarPackComm(WORD adr, WORD Length, char *Tab )
    783                                GetRegPackComm(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr, ZD_MODBUS[*Current_ZD_MODBUS].Target,  (ZD_MODBUS[*Current_ZD_MODBUS].Coil), &Buff_TX[7]);//(WORD Adr, char Reg, char LengthBit, unsigned char* Tab )
    784                                
    785                                //Buff_TX[7]  =0x01;
    786                                
    787                                SetWordToBytes(crc16(Buff_TX,liB15+7),&Buff_TX[7+liB15] );                    //wstawia sumê kontroln¹                     
    788                                Buff_TX[9+liB15]=0;
    789                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,9+liB15,0, 0);                        //Wysyla ramke        
    790                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * (9+liB15)) +100);   
    791                      }
    792                                          
    793                                
    794                        //Write Single Register  (zapis zmiennych analogowych - grupowo DA00-DDFF)
    795                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==0x10)
    796                      {
    797                        
    798                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    799                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    800                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)   
    801                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //il przesy³anych komórek
    802                                Buff_TX[6]  =(ZD_MODBUS[*Current_ZD_MODBUS].Coil) *2;                      //il przesy³anych bajtów     
    803                                for(int i = 0; i < ZD_MODBUS[*Current_ZD_MODBUS].Coil; ++i)
    804                                {
    805                                  Buff_TX[7+(i*2)]=ram.VarCom_Byte[((ZD_MODBUS[*Current_ZD_MODBUS].StartAdr)*2)+(i*2)];
    806                                  Buff_TX[8+(i*2)]=ram.VarCom_Byte[((ZD_MODBUS[*Current_ZD_MODBUS].StartAdr)*2)+(i*2)+1];
    807                                }
    808                                
    809                                SetWordToBytes(crc16(Buff_TX,(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 )+7),&Buff_TX[7+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 )] );                    //wstawia sumê kontroln¹                     
    810                                Buff_TX[9+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 )]=0;
    811                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,9+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 ),0, 0);                        //Wysyla ramke        
    812                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * (9+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 ))) +10);   
    813                                                         
    814                      }    
    815                          
    816                    
    817                         
    818          */
    819          
    820                 return 1;
   \                     ??ModBus_MASTER_TX_5:
   \   000001BA   0120               MOVS     R0,#+1
   \   000001BC   F8BC               POP      {R3-R7}
   \   000001BE   02BC               POP      {R1}
   \   000001C0   0847               BX       R1               ;; return
   \   000001C2   C046               Nop      
   \                     ??ModBus_MASTER_TX_1:
   \   000001C4   0040FCFF           DC32     0xfffc4000
   \   000001C8   ........           DC32     g_Ans_ZD_MODBUS_0
   \   000001CC   0000FCFF           DC32     0xfffc0000
   \   000001D0   ........           DC32     g_Ans_ZD_MODBUS_0 + 1
   \   000001D4   ........           DC32     MainStage
   \   000001D8   A2030000           DC32     0x3a2
   \   000001DC   ........           DC32     g_US0_OneByteTxTime
   \   000001E0   0000C842           DC32     0x42c80000
   \   000001E4   ........           DC32     g_US0_Comm_MinCykle
    821          }//_______________________ Koniec funkcji ModBus_MASTER_TX_US0 _______________________
    822          
    823          
    824          
    825                                          
    826          
    827          
    828          
    829          //!-----------------------------------------------------------------------------
    830          //!  Nazwa funkcji :    ModBus_MASTER_Return
    831          //!  Opis:              Funkcja konwertuje wartoœæ w WORD na 2 kolejne bajty
    832          //!-----------------------------------------------------------------------------
    833          //!  modbusframe  - otrzymana ramka danych
    834          //!----------------------------------------------------------------------------- 
    835          

   \                                 In section Debug.txt, align 4, keep-with-next
    836          BYTE ModBus_MASTER_Return(BYTE* modbusframe, char US_Nr)
    837          {
   \                     ModBus_MASTER_Return:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    838            //WORD  RamByte=(((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])))/8);
    839            //WORD  RamCall=((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])));
    840            //BYTE  RamBit= ((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+0) % 8;
    841            //BYTE  ByteCount=(((((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]))-1)/8)+1;
    842            //BYTE  WordCount=(((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]));
    843            //WORD  BitCount = 0;
    844            
    845          
    846            char  CurentByteBufTX = 0;
    847            char  CurentBitBufTX = 0;
    848            WORD ByteCount =0;
    849            WORD WordCount =0;
    850            WORD BitCount = 0;
    851            unsigned short RamByteTMP;
    852          
    853            WORD RamBit = 0;
    854            
    855                ptr_ZD_MODBUS ZD_MODBUS;
    856                char* Current_ZD_MODBUS;
    857                //char* ERR_ZD_MODBUS;
    858                //BYTE* Buff_TX;
    859                
    860              
    861                //wybór USARTa
    862                if (US_Nr) 
   \   00000004   0029               CMP      R1,#+0
   \   00000006   6948               LDR      R0,??ModBus_MASTER_Return_0  ;; g_Ans_ZD_MODBUS_0
   \   00000008   05D0               BEQ      ??ModBus_MASTER_Return_1
    863                {
    864                    ZD_MODBUS         =   ZD_MODBUS_1;
   \   0000000A   8E21               MOVS     R1,#+142
   \   0000000C   4900               LSLS     R1,R1,#+1        ;; #+284
   \   0000000E   4118               ADDS     R1,R0,R1
   \   00000010   0091               STR      R1,[SP, #+0]
    865                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_1;
   \   00000012   C01C               ADDS     R0,R0,#+3
   \   00000014   03E0               B.N      ??ModBus_MASTER_Return_2
    866                   // ERR_ZD_MODBUS     =   &g_ERR_ZD_MODBUS_1;
    867                   // Buff_TX           =   Buff_TX_1; 
    868                }   
    869                else 
    870                {
    871                    ZD_MODBUS         =   ZD_MODBUS_0;
   \                     ??ModBus_MASTER_Return_1:
   \   00000016   0100               MOVS     R1,R0
   \   00000018   091D               ADDS     R1,R1,#+4
   \   0000001A   0091               STR      R1,[SP, #+0]
    872                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_0;
   \   0000001C   801C               ADDS     R0,R0,#+2
   \                     ??ModBus_MASTER_Return_2:
   \   0000001E   0190               STR      R0,[SP, #+4]
    873                    //ERR_ZD_MODBUS     =   &g_ERR_ZD_MODBUS_0;
    874                    //Buff_TX           =   Buff_TX_0; 
    875                }
    876                  
    877            
    878              g_Ans_ZD_MODBUS_0 = g_US0_Comm_TIMEOUT+1; 
   \   00000020   6248               LDR      R0,??ModBus_MASTER_Return_0  ;; g_Ans_ZD_MODBUS_0
   \   00000022   6349               LDR      R1,??ModBus_MASTER_Return_0+0x4  ;; g_US0_Comm_TIMEOUT
   \   00000024   0968               LDR      R1,[R1, #+0]
   \   00000026   491C               ADDS     R1,R1,#+1
   \   00000028   0170               STRB     R1,[R0, #+0]
    879               
    880              
    881              if ((modbusframe[0]) != ZD_MODBUS[*Current_ZD_MODBUS].Adress) 
   \   0000002A   0198               LDR      R0,[SP, #+4]
   \   0000002C   0078               LDRB     R0,[R0, #+0]
   \   0000002E   0D21               MOVS     R1,#+13
   \   00000030   4843               MULS     R0,R1,R0
   \   00000032   0099               LDR      R1,[SP, #+0]
   \   00000034   0E18               ADDS     R6,R1,R0
   \   00000036   0298               LDR      R0,[SP, #+8]
   \   00000038   0078               LDRB     R0,[R0, #+0]
   \   0000003A   3178               LDRB     R1,[R6, #+0]
   \   0000003C   8842               CMP      R0,R1
   \   0000003E   10D0               BEQ      ??ModBus_MASTER_Return_3
    882                {
    883                    ZD_MODBUS[*Current_ZD_MODBUS].Error++;
   \   00000040   F07A               LDRB     R0,[R6, #+11]
   \   00000042   317B               LDRB     R1,[R6, #+12]
   \   00000044   0906               LSLS     R1,R1,#+24
   \   00000046   090C               LSRS     R1,R1,#+16
   \   00000048   0843               ORRS     R0,R0,R1
   \   0000004A   0199               LDR      R1,[SP, #+4]
   \   0000004C   0978               LDRB     R1,[R1, #+0]
   \   0000004E   0D22               MOVS     R2,#+13
   \   00000050   5143               MULS     R1,R2,R1
   \   00000052   009A               LDR      R2,[SP, #+0]
   \   00000054   5118               ADDS     R1,R2,R1
   \   00000056   401C               ADDS     R0,R0,#+1
   \   00000058   C872               STRB     R0,[R1, #+11]
   \   0000005A   000A               LSRS     R0,R0,#+8
   \   0000005C   0873               STRB     R0,[R1, #+12]
    884                    //TRACE_INFO("\n\r ODP : Blad adresu \n\r");
    885                    return 0;                                                                   //wyjdz jezeli zly adres 
   \                     ??ModBus_MASTER_Return_4:
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   99E1               B        ??ModBus_MASTER_Return_5
    886                }
    887          
    888          
    889            
    890          
    891                
    892                      
    893                      //Response to question: Read Coil Status  (odczyt zmiennych dwustanowych do DA00-DDFF)
    894              
    895                      if(modbusframe[1]==1)
   \                     ??ModBus_MASTER_Return_3:
   \   00000062   0298               LDR      R0,[SP, #+8]
   \   00000064   4078               LDRB     R0,[R0, #+1]
   \   00000066   0128               CMP      R0,#+1
   \   00000068   56D1               BNE      ??ModBus_MASTER_Return_6
    896                      {
    897                                ByteCount = ((WORD)modbusframe[2]);
   \   0000006A   0298               LDR      R0,[SP, #+8]
   \   0000006C   8178               LDRB     R1,[R0, #+2]
    898                                BitCount =  ((WORD)modbusframe[2]) * 8;
   \   0000006E   CD00               LSLS     R5,R1,#+3
    899                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   00000070   0298               LDR      R0,[SP, #+8]
   \   00000072   4018               ADDS     R0,R0,R1
   \   00000074   C278               LDRB     R2,[R0, #+3]
   \   00000076   1202               LSLS     R2,R2,#+8
   \   00000078   0479               LDRB     R4,[R0, #+4]
   \   0000007A   1443               ORRS     R4,R4,R2
   \   0000007C   C91C               ADDS     R1,R1,#+3
   \   0000007E   0298               LDR      R0,[SP, #+8]
   \   00000080   ........           BL       crc16
   \   00000084   8442               CMP      R4,R0
   \   00000086   00D0               BEQ      ??ModBus_MASTER_Return_7
   \                     ??ModBus_MASTER_Return_8:
   \   00000088   E9E7               B.N      ??ModBus_MASTER_Return_4
    900          
    901                                CurentByteBufTX=3;
   \                     ??ModBus_MASTER_Return_7:
   \   0000008A   0321               MOVS     R1,#+3
   \   0000008C   0022               MOVS     R2,#+0
    902                                CurentBitBufTX=0;
    903          
    904                                RamByteTMP = ZD_MODBUS[*Current_ZD_MODBUS].Target;
   \   0000008E   B078               LDRB     R0,[R6, #+2]
   \   00000090   F378               LDRB     R3,[R6, #+3]
   \   00000092   1B06               LSLS     R3,R3,#+24
   \   00000094   1B0C               LSRS     R3,R3,#+16
   \   00000096   1843               ORRS     R0,R0,R3
    905                                RamBit  = 0;
   \   00000098   0023               MOVS     R3,#+0
    906                                
    907                                for (int i=0; i<BitCount; i++)
   \   0000009A   002D               CMP      R5,#+0
   \   0000009C   2BD0               BEQ      ??ModBus_MASTER_Return_9
    908                                { 
    909                                  if ((modbusframe[CurentByteBufTX]>>CurentBitBufTX)&0x1)
   \                     ??ModBus_MASTER_Return_10:
   \   0000009E   029E               LDR      R6,[SP, #+8]
   \   000000A0   745C               LDRB     R4,[R6, R1]
   \   000000A2   1441               ASRS     R4,R4,R2
   \   000000A4   E407               LSLS     R4,R4,#+31
   \   000000A6   08D5               BPL      ??ModBus_MASTER_Return_11
    910                                  {
    911                                    ram.VarCom_Word[RamByteTMP] |= 0x1 << RamBit;
   \   000000A8   4400               LSLS     R4,R0,#+1
   \   000000AA   BC4E               LDR      R6,??ModBus_MASTER_Return_12  ;; ram
   \   000000AC   3419               ADDS     R4,R6,R4
   \   000000AE   2688               LDRH     R6,[R4, #+0]
   \   000000B0   0127               MOVS     R7,#+1
   \   000000B2   9F40               LSLS     R7,R7,R3
   \   000000B4   3743               ORRS     R7,R7,R6
   \   000000B6   2780               STRH     R7,[R4, #+0]
   \   000000B8   07E0               B        ??ModBus_MASTER_Return_13
    912                                  }
    913                                  else
    914                                  {
    915                                    ram.VarCom_Word[RamByteTMP] &= ~(0x1 << RamBit);
   \                     ??ModBus_MASTER_Return_11:
   \   000000BA   4400               LSLS     R4,R0,#+1
   \   000000BC   B74E               LDR      R6,??ModBus_MASTER_Return_12  ;; ram
   \   000000BE   3419               ADDS     R4,R6,R4
   \   000000C0   2688               LDRH     R6,[R4, #+0]
   \   000000C2   0127               MOVS     R7,#+1
   \   000000C4   9F40               LSLS     R7,R7,R3
   \   000000C6   BE43               BICS     R6,R6,R7
   \   000000C8   2680               STRH     R6,[R4, #+0]
    916                                  }   
    917                                 
    918                                  if (RamBit<=6) {RamBit++;} else {RamBit=0; RamByteTMP++;}
   \                     ??ModBus_MASTER_Return_13:
   \   000000CA   1B04               LSLS     R3,R3,#+16
   \   000000CC   1B0C               LSRS     R3,R3,#+16
   \   000000CE   072B               CMP      R3,#+7
   \   000000D0   01D2               BCS      ??ModBus_MASTER_Return_14
   \   000000D2   5B1C               ADDS     R3,R3,#+1
   \   000000D4   03E0               B        ??ModBus_MASTER_Return_15
   \                     ??ModBus_MASTER_Return_14:
   \   000000D6   0023               MOVS     R3,#+0
   \   000000D8   401C               ADDS     R0,R0,#+1
   \   000000DA   0004               LSLS     R0,R0,#+16
   \   000000DC   000C               LSRS     R0,R0,#+16
    919                                  if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
   \                     ??ModBus_MASTER_Return_15:
   \   000000DE   1206               LSLS     R2,R2,#+24
   \   000000E0   120E               LSRS     R2,R2,#+24
   \   000000E2   072A               CMP      R2,#+7
   \   000000E4   01D2               BCS      ??ModBus_MASTER_Return_16
   \   000000E6   521C               ADDS     R2,R2,#+1
   \   000000E8   03E0               B        ??ModBus_MASTER_Return_17
   \                     ??ModBus_MASTER_Return_16:
   \   000000EA   0022               MOVS     R2,#+0
   \   000000EC   491C               ADDS     R1,R1,#+1
   \   000000EE   0906               LSLS     R1,R1,#+24
   \   000000F0   090E               LSRS     R1,R1,#+24
    920                                  
    921                                }
   \                     ??ModBus_MASTER_Return_17:
   \   000000F2   6D1E               SUBS     R5,R5,#+1
   \   000000F4   D3D1               BNE      ??ModBus_MASTER_Return_10
    922                       
    923                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \                     ??ModBus_MASTER_Return_9:
   \   000000F6   0198               LDR      R0,[SP, #+4]
   \   000000F8   0078               LDRB     R0,[R0, #+0]
   \   000000FA   0D21               MOVS     R1,#+13
   \   000000FC   4843               MULS     R0,R1,R0
   \   000000FE   0099               LDR      R1,[SP, #+0]
   \   00000100   0818               ADDS     R0,R1,R0
   \   00000102   0021               MOVS     R1,#+0
   \   00000104   C172               STRB     R1,[R0, #+11]
   \   00000106   0173               STRB     R1,[R0, #+12]
    924                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   00000108   0198               LDR      R0,[SP, #+4]
   \   0000010A   0078               LDRB     R0,[R0, #+0]
   \   0000010C   0D21               MOVS     R1,#+13
   \   0000010E   4843               MULS     R0,R1,R0
   \   00000110   0099               LDR      R1,[SP, #+0]
   \   00000112   0818               ADDS     R0,R1,R0
   \   00000114   0121               MOVS     R1,#+1
   \   00000116   8172               STRB     R1,[R0, #+10]
    925                                
    926                      }
    927                                
    928                            
    929                       //Response to question: Read discrete input  (odczyt zmiennych dyskretnych B000-B5FF)
    930                      if(modbusframe[1]==2)
   \                     ??ModBus_MASTER_Return_6:
   \   00000118   0298               LDR      R0,[SP, #+8]
   \   0000011A   4078               LDRB     R0,[R0, #+1]
   \   0000011C   0228               CMP      R0,#+2
   \   0000011E   60D1               BNE      ??ModBus_MASTER_Return_18
    931                      {
    932                                       ByteCount = ((WORD)modbusframe[2]);
   \   00000120   0298               LDR      R0,[SP, #+8]
   \   00000122   8178               LDRB     R1,[R0, #+2]
    933                                BitCount =  ((WORD)modbusframe[2])*8;
   \   00000124   CD00               LSLS     R5,R1,#+3
    934                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   00000126   0298               LDR      R0,[SP, #+8]
   \   00000128   4018               ADDS     R0,R0,R1
   \   0000012A   C278               LDRB     R2,[R0, #+3]
   \   0000012C   1202               LSLS     R2,R2,#+8
   \   0000012E   0479               LDRB     R4,[R0, #+4]
   \   00000130   1443               ORRS     R4,R4,R2
   \   00000132   C91C               ADDS     R1,R1,#+3
   \   00000134   0298               LDR      R0,[SP, #+8]
   \   00000136   ........           BL       crc16
   \   0000013A   8442               CMP      R4,R0
   \   0000013C   8FD1               BNE      ??ModBus_MASTER_Return_4
    935          
    936                                CurentByteBufTX=3;
   \   0000013E   0321               MOVS     R1,#+3
   \   00000140   0022               MOVS     R2,#+0
    937                                CurentBitBufTX=0;
    938          
    939                                
    940                                RamByteTMP = ZD_MODBUS[*Current_ZD_MODBUS].Target/8;
   \   00000142   0198               LDR      R0,[SP, #+4]
   \   00000144   0078               LDRB     R0,[R0, #+0]
   \   00000146   0D23               MOVS     R3,#+13
   \   00000148   5843               MULS     R0,R3,R0
   \   0000014A   009B               LDR      R3,[SP, #+0]
   \   0000014C   1818               ADDS     R0,R3,R0
   \   0000014E   8478               LDRB     R4,[R0, #+2]
   \   00000150   C378               LDRB     R3,[R0, #+3]
   \   00000152   1B06               LSLS     R3,R3,#+24
   \   00000154   1B0C               LSRS     R3,R3,#+16
   \   00000156   1C43               ORRS     R4,R4,R3
   \   00000158   E008               LSRS     R0,R4,#+3
    941                                RamBit  = 0;
   \   0000015A   0023               MOVS     R3,#+0
    942                                
    943                                for (int i=0; i<BitCount; i++)
   \   0000015C   002D               CMP      R5,#+0
   \   0000015E   2FD0               BEQ      ??ModBus_MASTER_Return_19
    944                                { 
    945                                  if ((modbusframe[CurentByteBufTX]>>CurentBitBufTX)&0x1)
   \                     ??ModBus_MASTER_Return_20:
   \   00000160   029E               LDR      R6,[SP, #+8]
   \   00000162   745C               LDRB     R4,[R6, R1]
   \   00000164   1441               ASRS     R4,R4,R2
   \   00000166   E407               LSLS     R4,R4,#+31
   \   00000168   08D5               BPL      ??ModBus_MASTER_Return_21
    946                                  {
    947                                    ram.VarCom_Word[RamByteTMP] |= 0x1 << RamBit;
   \   0000016A   4400               LSLS     R4,R0,#+1
   \   0000016C   8B4E               LDR      R6,??ModBus_MASTER_Return_12  ;; ram
   \   0000016E   3419               ADDS     R4,R6,R4
   \   00000170   2688               LDRH     R6,[R4, #+0]
   \   00000172   0127               MOVS     R7,#+1
   \   00000174   9F40               LSLS     R7,R7,R3
   \   00000176   3743               ORRS     R7,R7,R6
   \   00000178   2780               STRH     R7,[R4, #+0]
   \   0000017A   07E0               B        ??ModBus_MASTER_Return_22
    948                                  }
    949                                  else
    950                                  {
    951                                    ram.VarCom_Word[RamByteTMP] &= ~(0x1 << RamBit);
   \                     ??ModBus_MASTER_Return_21:
   \   0000017C   4400               LSLS     R4,R0,#+1
   \   0000017E   874E               LDR      R6,??ModBus_MASTER_Return_12  ;; ram
   \   00000180   3419               ADDS     R4,R6,R4
   \   00000182   2688               LDRH     R6,[R4, #+0]
   \   00000184   0127               MOVS     R7,#+1
   \   00000186   9F40               LSLS     R7,R7,R3
   \   00000188   BE43               BICS     R6,R6,R7
   \   0000018A   2680               STRH     R6,[R4, #+0]
    952                                  }   
    953                                 
    954                                  if (RamBit<=6) {RamBit++;} else {RamBit=0; RamByteTMP++;}
   \                     ??ModBus_MASTER_Return_22:
   \   0000018C   1B04               LSLS     R3,R3,#+16
   \   0000018E   1B0C               LSRS     R3,R3,#+16
   \   00000190   072B               CMP      R3,#+7
   \   00000192   01D2               BCS      ??ModBus_MASTER_Return_23
   \   00000194   5B1C               ADDS     R3,R3,#+1
   \   00000196   03E0               B        ??ModBus_MASTER_Return_24
   \                     ??ModBus_MASTER_Return_23:
   \   00000198   0023               MOVS     R3,#+0
   \   0000019A   401C               ADDS     R0,R0,#+1
   \   0000019C   0004               LSLS     R0,R0,#+16
   \   0000019E   000C               LSRS     R0,R0,#+16
    955                                  if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
   \                     ??ModBus_MASTER_Return_24:
   \   000001A0   1206               LSLS     R2,R2,#+24
   \   000001A2   120E               LSRS     R2,R2,#+24
   \   000001A4   072A               CMP      R2,#+7
   \   000001A6   05D2               BCS      ??ModBus_MASTER_Return_25
   \   000001A8   521C               ADDS     R2,R2,#+1
   \   000001AA   07E0               B        ??ModBus_MASTER_Return_26
   \                     ??ModBus_MASTER_Return_0:
   \   000001AC   ........           DC32     g_Ans_ZD_MODBUS_0
   \   000001B0   ........           DC32     g_US0_Comm_TIMEOUT
   \                     ??ModBus_MASTER_Return_25:
   \   000001B4   0022               MOVS     R2,#+0
   \   000001B6   491C               ADDS     R1,R1,#+1
   \   000001B8   0906               LSLS     R1,R1,#+24
   \   000001BA   090E               LSRS     R1,R1,#+24
    956                                  
    957                                }
   \                     ??ModBus_MASTER_Return_26:
   \   000001BC   6D1E               SUBS     R5,R5,#+1
   \   000001BE   CFD1               BNE      ??ModBus_MASTER_Return_20
    958                       
    959                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \                     ??ModBus_MASTER_Return_19:
   \   000001C0   0198               LDR      R0,[SP, #+4]
   \   000001C2   0078               LDRB     R0,[R0, #+0]
   \   000001C4   0D21               MOVS     R1,#+13
   \   000001C6   4843               MULS     R0,R1,R0
   \   000001C8   0099               LDR      R1,[SP, #+0]
   \   000001CA   0818               ADDS     R0,R1,R0
   \   000001CC   0021               MOVS     R1,#+0
   \   000001CE   C172               STRB     R1,[R0, #+11]
   \   000001D0   0173               STRB     R1,[R0, #+12]
    960                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   000001D2   0198               LDR      R0,[SP, #+4]
   \   000001D4   0078               LDRB     R0,[R0, #+0]
   \   000001D6   0D21               MOVS     R1,#+13
   \   000001D8   4843               MULS     R0,R1,R0
   \   000001DA   0099               LDR      R1,[SP, #+0]
   \   000001DC   0818               ADDS     R0,R1,R0
   \   000001DE   0121               MOVS     R1,#+1
   \   000001E0   8172               STRB     R1,[R0, #+10]
    961                        
    962                      }     
    963                                
    964                      //Response to question: Holding Register (odczyt zmiennych analogowych DA00-DDFF)
    965                      if(modbusframe[1]==3)
   \                     ??ModBus_MASTER_Return_18:
   \   000001E2   0298               LDR      R0,[SP, #+8]
   \   000001E4   4078               LDRB     R0,[R0, #+1]
   \   000001E6   0328               CMP      R0,#+3
   \   000001E8   3CD1               BNE      ??ModBus_MASTER_Return_27
    966                      {
    967                          
    968                                
    969                                //BitCount =  ((WORD)modbusframe[2]) * 8;
    970                                ByteCount = (modbusframe[2]);        
   \   000001EA   0298               LDR      R0,[SP, #+8]
   \   000001EC   8478               LDRB     R4,[R0, #+2]
    971                        
    972                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   000001EE   2100               MOVS     R1,R4
   \   000001F0   4018               ADDS     R0,R0,R1
   \   000001F2   C278               LDRB     R2,[R0, #+3]
   \   000001F4   1202               LSLS     R2,R2,#+8
   \   000001F6   0579               LDRB     R5,[R0, #+4]
   \   000001F8   1543               ORRS     R5,R5,R2
   \   000001FA   C91C               ADDS     R1,R1,#+3
   \   000001FC   0298               LDR      R0,[SP, #+8]
   \   000001FE   ........           BL       crc16
   \   00000202   8542               CMP      R5,R0
   \   00000204   00D0               BEQ      .+4
   \   00000206   2AE7               B        ??ModBus_MASTER_Return_4
    973                          
    974                                WordCount=ByteCount/2;
   \   00000208   6108               LSRS     R1,R4,#+1
    975                                
    976                                CurentByteBufTX=3;
    977                                
    978                                RamByteTMP = 0;
    979                                
    980                                RamByteTMP = (ZD_MODBUS[*Current_ZD_MODBUS].Target)*2;
   \   0000020A   0198               LDR      R0,[SP, #+4]
   \   0000020C   0078               LDRB     R0,[R0, #+0]
   \   0000020E   0D22               MOVS     R2,#+13
   \   00000210   5043               MULS     R0,R2,R0
   \   00000212   009A               LDR      R2,[SP, #+0]
   \   00000214   1018               ADDS     R0,R2,R0
   \   00000216   8378               LDRB     R3,[R0, #+2]
   \   00000218   C278               LDRB     R2,[R0, #+3]
   \   0000021A   1206               LSLS     R2,R2,#+24
   \   0000021C   120C               LSRS     R2,R2,#+16
   \   0000021E   1343               ORRS     R3,R3,R2
   \   00000220   5800               LSLS     R0,R3,#+1
   \   00000222   0004               LSLS     R0,R0,#+16
   \   00000224   000C               LSRS     R0,R0,#+16
    981                                RamBit  = 0;
    982                                
    983                                for (WORD i=0; i<WordCount; i++)
   \   00000226   0029               CMP      R1,#+0
   \   00000228   0BD0               BEQ      ??ModBus_MASTER_Return_28
   \   0000022A   029A               LDR      R2,[SP, #+8]
   \   0000022C   D21C               ADDS     R2,R2,#+3
   \   0000022E   5B4B               LDR      R3,??ModBus_MASTER_Return_12  ;; ram
   \   00000230   1818               ADDS     R0,R3,R0
    984                                { 
    985                                  ram.VarCom_Byte[RamByteTMP+1]   = modbusframe[CurentByteBufTX];
   \                     ??ModBus_MASTER_Return_29:
   \   00000232   1378               LDRB     R3,[R2, #+0]
   \   00000234   4370               STRB     R3,[R0, #+1]
    986                                  ram.VarCom_Byte[RamByteTMP] = modbusframe[CurentByteBufTX+1];
   \   00000236   5378               LDRB     R3,[R2, #+1]
   \   00000238   0370               STRB     R3,[R0, #+0]
    987                                  
    988                                  CurentByteBufTX +=2;
    989                                  RamByteTMP      +=2;
    990                                }            
   \   0000023A   801C               ADDS     R0,R0,#+2
   \   0000023C   921C               ADDS     R2,R2,#+2
   \   0000023E   491E               SUBS     R1,R1,#+1
   \   00000240   F7D1               BNE      ??ModBus_MASTER_Return_29
    991                                
    992                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \                     ??ModBus_MASTER_Return_28:
   \   00000242   0198               LDR      R0,[SP, #+4]
   \   00000244   0078               LDRB     R0,[R0, #+0]
   \   00000246   0D21               MOVS     R1,#+13
   \   00000248   4843               MULS     R0,R1,R0
   \   0000024A   0099               LDR      R1,[SP, #+0]
   \   0000024C   0818               ADDS     R0,R1,R0
   \   0000024E   0021               MOVS     R1,#+0
   \   00000250   C172               STRB     R1,[R0, #+11]
   \   00000252   0173               STRB     R1,[R0, #+12]
    993                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   00000254   0198               LDR      R0,[SP, #+4]
   \   00000256   0078               LDRB     R0,[R0, #+0]
   \   00000258   0D21               MOVS     R1,#+13
   \   0000025A   4843               MULS     R0,R1,R0
   \   0000025C   0099               LDR      R1,[SP, #+0]
   \   0000025E   0818               ADDS     R0,R1,R0
   \   00000260   0121               MOVS     R1,#+1
   \   00000262   8172               STRB     R1,[R0, #+10]
    994                                
    995                      }
    996                                
    997                      //Response to question: Input Register (odczyt analogów wejœciowych A000-A5FF)      
    998                     if(modbusframe[1]==4)
   \                     ??ModBus_MASTER_Return_27:
   \   00000264   0298               LDR      R0,[SP, #+8]
   \   00000266   4078               LDRB     R0,[R0, #+1]
   \   00000268   0428               CMP      R0,#+4
   \   0000026A   3CD1               BNE      ??ModBus_MASTER_Return_30
    999                      {
   1000          
   1001                                //BitCount =  ((WORD)modbusframe[2]) * 8;
   1002                                ByteCount = (modbusframe[2]);        
   \   0000026C   0298               LDR      R0,[SP, #+8]
   \   0000026E   8478               LDRB     R4,[R0, #+2]
   1003                        
   1004                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   00000270   2100               MOVS     R1,R4
   \   00000272   4018               ADDS     R0,R0,R1
   \   00000274   C278               LDRB     R2,[R0, #+3]
   \   00000276   1202               LSLS     R2,R2,#+8
   \   00000278   0579               LDRB     R5,[R0, #+4]
   \   0000027A   1543               ORRS     R5,R5,R2
   \   0000027C   C91C               ADDS     R1,R1,#+3
   \   0000027E   0298               LDR      R0,[SP, #+8]
   \   00000280   ........           BL       crc16
   \   00000284   8542               CMP      R5,R0
   \   00000286   00D0               BEQ      .+4
   \   00000288   E9E6               B        ??ModBus_MASTER_Return_4
   1005                          
   1006                                WordCount=ByteCount/2;
   \   0000028A   6108               LSRS     R1,R4,#+1
   1007                                
   1008                                CurentByteBufTX=3;
   1009                                
   1010                                RamByteTMP = 0;
   1011                                
   1012                                RamByteTMP = (ZD_MODBUS[*Current_ZD_MODBUS].Target)*2;
   \   0000028C   0198               LDR      R0,[SP, #+4]
   \   0000028E   0078               LDRB     R0,[R0, #+0]
   \   00000290   0D22               MOVS     R2,#+13
   \   00000292   5043               MULS     R0,R2,R0
   \   00000294   009A               LDR      R2,[SP, #+0]
   \   00000296   1018               ADDS     R0,R2,R0
   \   00000298   8378               LDRB     R3,[R0, #+2]
   \   0000029A   C278               LDRB     R2,[R0, #+3]
   \   0000029C   1206               LSLS     R2,R2,#+24
   \   0000029E   120C               LSRS     R2,R2,#+16
   \   000002A0   1343               ORRS     R3,R3,R2
   \   000002A2   5800               LSLS     R0,R3,#+1
   \   000002A4   0004               LSLS     R0,R0,#+16
   \   000002A6   000C               LSRS     R0,R0,#+16
   1013                                RamBit  = 0;
   1014                                
   1015                                for (WORD i=0; i<WordCount; i++)
   \   000002A8   0029               CMP      R1,#+0
   \   000002AA   0BD0               BEQ      ??ModBus_MASTER_Return_31
   \   000002AC   029A               LDR      R2,[SP, #+8]
   \   000002AE   D21C               ADDS     R2,R2,#+3
   \   000002B0   3A4B               LDR      R3,??ModBus_MASTER_Return_12  ;; ram
   \   000002B2   1818               ADDS     R0,R3,R0
   1016                                { 
   1017                                  ram.VarCom_Byte[RamByteTMP+1]   = modbusframe[CurentByteBufTX];
   \                     ??ModBus_MASTER_Return_32:
   \   000002B4   1378               LDRB     R3,[R2, #+0]
   \   000002B6   4370               STRB     R3,[R0, #+1]
   1018                                  ram.VarCom_Byte[RamByteTMP] = modbusframe[CurentByteBufTX+1];
   \   000002B8   5378               LDRB     R3,[R2, #+1]
   \   000002BA   0370               STRB     R3,[R0, #+0]
   1019                                  
   1020                                  CurentByteBufTX +=2;
   1021                                  RamByteTMP      +=2;
   1022                                }       
   \   000002BC   801C               ADDS     R0,R0,#+2
   \   000002BE   921C               ADDS     R2,R2,#+2
   \   000002C0   491E               SUBS     R1,R1,#+1
   \   000002C2   F7D1               BNE      ??ModBus_MASTER_Return_32
   1023                                
   1024                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \                     ??ModBus_MASTER_Return_31:
   \   000002C4   0198               LDR      R0,[SP, #+4]
   \   000002C6   0078               LDRB     R0,[R0, #+0]
   \   000002C8   0D21               MOVS     R1,#+13
   \   000002CA   4843               MULS     R0,R1,R0
   \   000002CC   0099               LDR      R1,[SP, #+0]
   \   000002CE   0818               ADDS     R0,R1,R0
   \   000002D0   0021               MOVS     R1,#+0
   \   000002D2   C172               STRB     R1,[R0, #+11]
   \   000002D4   0173               STRB     R1,[R0, #+12]
   1025                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   000002D6   0198               LDR      R0,[SP, #+4]
   \   000002D8   0078               LDRB     R0,[R0, #+0]
   \   000002DA   0D21               MOVS     R1,#+13
   \   000002DC   4843               MULS     R0,R1,R0
   \   000002DE   0099               LDR      R1,[SP, #+0]
   \   000002E0   0818               ADDS     R0,R1,R0
   \   000002E2   0121               MOVS     R1,#+1
   \   000002E4   8172               STRB     R1,[R0, #+10]
   1026                                
   1027                      }
   1028                                
   1029                      //Response to question: Read Coil Status  (odczyt zmiennych dwustanowych do DA00-DDFF)
   1030                      if(modbusframe[1]==5)
   \                     ??ModBus_MASTER_Return_30:
   \   000002E6   0298               LDR      R0,[SP, #+8]
   \   000002E8   4078               LDRB     R0,[R0, #+1]
   \   000002EA   0528               CMP      R0,#+5
   \   000002EC   31D1               BNE      ??ModBus_MASTER_Return_33
   1031                      {
   1032                        
   1033                            if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   000002EE   0298               LDR      R0,[SP, #+8]
   \   000002F0   8079               LDRB     R0,[R0, #+6]
   \   000002F2   0002               LSLS     R0,R0,#+8
   \   000002F4   0299               LDR      R1,[SP, #+8]
   \   000002F6   CC79               LDRB     R4,[R1, #+7]
   \   000002F8   0443               ORRS     R4,R4,R0
   \   000002FA   0621               MOVS     R1,#+6
   \   000002FC   0298               LDR      R0,[SP, #+8]
   \   000002FE   ........           BL       crc16
   \   00000302   8442               CMP      R4,R0
   \   00000304   00D0               BEQ      .+4
   \   00000306   AAE6               B        ??ModBus_MASTER_Return_4
   1034                            if (ZD_MODBUS[*Current_ZD_MODBUS].Target!=(((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))) return 0; //sprawdzenie poprawnoœci adresu
   \   00000308   0198               LDR      R0,[SP, #+4]
   \   0000030A   0078               LDRB     R0,[R0, #+0]
   \   0000030C   0D21               MOVS     R1,#+13
   \   0000030E   4843               MULS     R0,R1,R0
   \   00000310   0099               LDR      R1,[SP, #+0]
   \   00000312   0818               ADDS     R0,R1,R0
   \   00000314   8278               LDRB     R2,[R0, #+2]
   \   00000316   C178               LDRB     R1,[R0, #+3]
   \   00000318   0906               LSLS     R1,R1,#+24
   \   0000031A   090C               LSRS     R1,R1,#+16
   \   0000031C   0A43               ORRS     R2,R2,R1
   \   0000031E   0298               LDR      R0,[SP, #+8]
   \   00000320   8078               LDRB     R0,[R0, #+2]
   \   00000322   0002               LSLS     R0,R0,#+8
   \   00000324   0299               LDR      R1,[SP, #+8]
   \   00000326   C978               LDRB     R1,[R1, #+3]
   \   00000328   0143               ORRS     R1,R1,R0
   \   0000032A   8A42               CMP      R2,R1
   \   0000032C   00D0               BEQ      .+4
   \   0000032E   96E6               B        ??ModBus_MASTER_Return_4
   1035          
   1036                            ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \   00000330   0198               LDR      R0,[SP, #+4]
   \   00000332   0078               LDRB     R0,[R0, #+0]
   \   00000334   0D21               MOVS     R1,#+13
   \   00000336   4843               MULS     R0,R1,R0
   \   00000338   0099               LDR      R1,[SP, #+0]
   \   0000033A   0818               ADDS     R0,R1,R0
   \   0000033C   0021               MOVS     R1,#+0
   \   0000033E   C172               STRB     R1,[R0, #+11]
   \   00000340   0173               STRB     R1,[R0, #+12]
   1037                            ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   00000342   0198               LDR      R0,[SP, #+4]
   \   00000344   0078               LDRB     R0,[R0, #+0]
   \   00000346   0D21               MOVS     R1,#+13
   \   00000348   4843               MULS     R0,R1,R0
   \   0000034A   0099               LDR      R1,[SP, #+0]
   \   0000034C   0818               ADDS     R0,R1,R0
   \   0000034E   0121               MOVS     R1,#+1
   \   00000350   8172               STRB     R1,[R0, #+10]
   1038                            
   1039                        
   1040                      }
   1041                      //Response to question: Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
   1042                      if(modbusframe[1]==6)
   1043                      {
   1044                        
   1045                      }
   1046                                
   1047                      //Response to question: Write Multiple Status  (zapis zmiennych dwustanowych - grupowo DA00-DDFF)
   1048                      if(modbusframe[1]==15)
   \                     ??ModBus_MASTER_Return_33:
   \   00000352   0298               LDR      R0,[SP, #+8]
   \   00000354   4078               LDRB     R0,[R0, #+1]
   \   00000356   0F28               CMP      R0,#+15
   \   00000358   10D1               BNE      ??ModBus_MASTER_Return_34
   1049                      {
   1050                                 
   1051                              ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   0000035A   0198               LDR      R0,[SP, #+4]
   \   0000035C   0078               LDRB     R0,[R0, #+0]
   \   0000035E   0D21               MOVS     R1,#+13
   \   00000360   4843               MULS     R0,R1,R0
   \   00000362   0099               LDR      R1,[SP, #+0]
   \   00000364   0818               ADDS     R0,R1,R0
   \   00000366   0121               MOVS     R1,#+1
   \   00000368   8172               STRB     R1,[R0, #+10]
   1052                              ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \   0000036A   0198               LDR      R0,[SP, #+4]
   \   0000036C   0078               LDRB     R0,[R0, #+0]
   \   0000036E   0D21               MOVS     R1,#+13
   \   00000370   4843               MULS     R0,R1,R0
   \   00000372   0099               LDR      R1,[SP, #+0]
   \   00000374   0818               ADDS     R0,R1,R0
   \   00000376   0021               MOVS     R1,#+0
   \   00000378   C172               STRB     R1,[R0, #+11]
   \   0000037A   0173               STRB     R1,[R0, #+12]
   1053                        
   1054                      } 
   1055                        
   1056                      //Response to question: Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
   1057                      if(modbusframe[1]==16)
   \                     ??ModBus_MASTER_Return_34:
   \   0000037C   0298               LDR      R0,[SP, #+8]
   \   0000037E   4078               LDRB     R0,[R0, #+1]
   \   00000380   1028               CMP      R0,#+16
   \   00000382   07D1               BNE      ??ModBus_MASTER_Return_35
   1058                      {
   1059           
   1060                              ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   00000384   0198               LDR      R0,[SP, #+4]
   \   00000386   0078               LDRB     R0,[R0, #+0]
   \   00000388   0D21               MOVS     R1,#+13
   \   0000038A   4843               MULS     R0,R1,R0
   \   0000038C   0099               LDR      R1,[SP, #+0]
   \   0000038E   0818               ADDS     R0,R1,R0
   \   00000390   0121               MOVS     R1,#+1
   \   00000392   8172               STRB     R1,[R0, #+10]
   1061                        
   1062                        
   1063                          
   1064                    }
   1065              return 1; 
   \                     ??ModBus_MASTER_Return_35:
   \   00000394   0120               MOVS     R0,#+1
   \                     ??ModBus_MASTER_Return_5:
   \   00000396   FEBC               POP      {R1-R7}
   \   00000398   02BC               POP      {R1}
   \   0000039A   0847               BX       R1               ;; return
   \                     ??ModBus_MASTER_Return_12:
   \   0000039C   ........           DC32     ram
   1066              
   1067          }//_________________ Koniec funkcji ModBus_MASTER_Return  __________________

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   ........           DC32     ram
   1068          
   1069          

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     ModBus_CommS             64
     ModBus_MASTER_Return     32
     ModBus_MASTER_TX         24
     SetWordToBytes            0
     crc16                    16


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     US0_MasterMODBUS_ENABLE    1
     US1_MasterMODBUS_ENABLE    1
     bCRC_Hi                  512
     crc16                     60
     SetWordToBytes             8
     ModBus_CommS            1460
     g_Ans_ZD_MODBUS_0       1124
     g_ERR_ZD_MODBUS_0          1
     g_ERR_ZD_MODBUS_1          1
     g_Ans_ZD_MODBUS_1          1
     ModBus_MASTER_TX         488
     ModBus_MASTER_Return     928
     ??DataTable2               4

 
 1 128 bytes in section .bss
     1 byte  in section .data
   512 bytes in section .rodata
 2 948 bytes in section Debug.txt
 
 2 948 bytes of CODE  memory
   512 bytes of CONST memory
 1 129 bytes of DATA  memory

Errors: none
Warnings: 4
