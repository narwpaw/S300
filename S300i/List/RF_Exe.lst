###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           04/Jun/2013  20:18:17 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\Framework\RF_Exe.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\Framework\RF_Exe.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.3 -         #
#                    04.06.2013\S300i\List\" --diag_suppress Pa082 -o         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\S300i\Obj\" --debug --endian little --cpu     #
#                    ARM7TDMI -e --fpu None --dlib_config "C:\Program Files   #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 - 04.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.3 - 04.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.3 - 04.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 -             #
#                    04.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Oh                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\S300i\List\RF_Exe.lst                         #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 -              #
#                    04.06.2013\S300i\Obj\RF_Exe.o                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 - 04.06.2013\Framework\RF_Exe.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                  Microcontroller Software Support                        *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : RF_Exe.c                                 *//
      7          //*  Opis                         : Plik wykonawczy komunikacji radiowej     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 31.06.2010                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #include "RF_Exe.h"
     24          #include "Application_prog.h" 
     25          #include "spi_main.h"  
     26          #include "main_H.h"  

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 - 04.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     27          
     28          //tymczasowe
     29          extern int licznik_cykli;
     30          int poprawnych;
     31          extern int odb[2];
     32          extern char IndWys; 
     33          extern volatile char SlaveMode;
     34          extern long long int g_counter;
     35          unsigned int        RF_Period;                                              //cykl transmisji
     36          
     37          char IndWys=0; 
     38          char IndWysNeg=1; 
     39          int odb[2];
     40          int licznik_cykli=0;
     41          extern unsigned int CyklPerSekCount; 
     42          extern unsigned long long g_NextTimeProgram; 
     43          extern volatile char Busy_program;
     44          extern volatile long long TimeInMasterMode;
     45          extern _NeuronsListUnit NeuronsList[NumberNeurons];
     46          extern AT91_SPI_Buff               SPI_Buff;
     47          //tymczasowo koniec-----------
     48          extern volatile char ReciveFrameToMe;
     49          extern unsigned char ChangeStageFlag;
     50          extern AT91PS_MEM pAT91C_IFLASH_MEM;
     51          
     52          #ifdef _LIVE_RJESTR
     53          extern unsigned short LIVE_TAB[LIVE_TAB_SIZE];
     54          extern char LIVE_TAB_IDX;
     55          
     56          
     57          
     58          
     59          #endif
     60          
     61          
     62           
     63          
     64          //Zmienne globalne -------------------------------------------------------------
     65            

   \                                 In section .bss, align 4
     66            _RF_TaskTab  RF_TaskTab;
   \                     RF_TaskTab:
   \   00000000                      DS8 560
     67            signed char           RF_CurrentTask=-1; 
     68            signed char           RF_SpecialTask=-1; 
     69            char g_RF_TimeOutCounter =0;  //bierz¹cy czas odliczania do timeout`u
     70            
     71           
     72            

   \                                 In section .bss, align 2
     73            unsigned short       ReadNodeSoftVersion;
   \                     ReadNodeSoftVersion:
   \   00000000                      DS8 2
     74            _RF_NodeTest         RF_NodeTest; 
     75             // unsigned  short    TimeToSwithToMaster=MAX_TIME_FOR_SLAVE_ASK;
     76              char               BridgeMode=0;
     77          //__________________________Koniec zmiennych globalnych________________________
     78          
     79          
     80            
     81            
     82          //Zmienne globalne importowane--------------------------------------------------  
     83            extern _RF_Status   RF_Status;
     84            extern _MainStage  MainStage;
     85            extern _TransQuality TransQuality;
     86            //extern volatile char SwitchToMasterBlock;
     87          //___________________________Koniec zmiennych globalnych importowanych_________
     88          
     89            
     90           
     91            
     92          
     93          
     94          //#define IncCurentRfTask  RF_CurrentTask++;  if ((RF_TaskTab[RF_CurrentTask].Node==0) || (RF_CurrentTask>=RF_Tasks))  {RF_CurrentTask=0; CyklPerSekCount++;}
     95             
     96          
     97          

   \                                 In section Debug.txt, align 4, keep-with-next
     98          void SwitchToMaster(void)
     99          {
   \                     SwitchToMaster:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    100              if ((SPI_Buff.WordToSendCount) /*|| (RF_Status.EnTx!=0) || (RF_Status.EnRx==0)*/) return;
   \   00000002   1F48               LDR      R0,??SwitchToMaster_0  ;; SPI_Buff + 220
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   37D1               BNE      ??SwitchToMaster_1
    101             
    102             RF_Status.SlaveModeTimeout=MAX_TIME_FOR_SLAVE_ASK;
                                               ^
Warning[Pe069]: integer conversion resulted in truncation
   \   0000000A   ....               LDR      R4,??DataTable9  ;; RF_Status
   \   0000000C   5E20               MOVS     R0,#+94
   \   0000000E   E074               STRB     R0,[R4, #+19]
    103             RF_Status.TimeInMasterMode=0;
   \   00000010   0025               MOVS     R5,#+0
   \   00000012   6561               STR      R5,[R4, #+20]
    104             RF_Status.TimeInSlaveMode=0;  
    105            
    106            
    107             // AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    108             // ButtonBipCounter=g_counter+10000;
    109          
    110             SPI_SendWord(0x8219,Cs_RF); 
                    ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   00000014   0221               MOVS     R1,#+2
   \   00000016   ....               LDR      R0,??DataTable10  ;; 0x8219
   \   00000018   ........           BL       SPI_SendWord
    111             SlaveMode=0;
   \   0000001C   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   0000001E   0570               STRB     R5,[R0, #+0]
    112             RF_Status.MasterMode=1;
   \   00000020   0120               MOVS     R0,#+1
   \   00000022   6073               STRB     R0,[R4, #+13]
    113             ReciveFrameToMe=0;
   \   00000024   1748               LDR      R0,??SwitchToMaster_0+0x4  ;; ReciveFrameToMe
   \   00000026   0570               STRB     R5,[R0, #+0]
    114             SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
   \   00000028   A07B               LDRB     R0,[R4, #+14]
   \   0000002A   ........           BL       __aeabi_ui2d
   \   0000002E   0200               MOVS     R2,R0
   \   00000030   0B00               MOVS     R3,R1
   \   00000032   ....               LDR      R0,??DataTable12  ;; 0x33333333
   \   00000034   ....               LDR      R1,??DataTable13  ;; 0x3fd33333
   \   00000036   ........           BL       __aeabi_dmul
   \   0000003A   0200               MOVS     R2,R0
   \   0000003C   0B00               MOVS     R3,R1
   \   0000003E   ....               LDR      R0,??DataTable14  ;; 0x5c28f5c3
   \   00000040   ....               LDR      R1,??DataTable15  ;; 0x408ae28f
   \   00000042   ........           BL       __aeabi_dadd
   \   00000046   0200               MOVS     R2,R0
   \   00000048   0B00               MOVS     R3,R1
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   ....               LDR      R1,??DataTable16  ;; 0x40690000
   \   0000004E   ........           BL       __aeabi_dmul
   \   00000052   0200               MOVS     R2,R0
   \   00000054   0B00               MOVS     R3,R1
   \   00000056   2800               MOVS     R0,R5
   \   00000058   ....               LDR      R1,??DataTable17  ;; 0xc104ff00
   \   0000005A   ........           BL       __aeabi_dadd
   \   0000005E   ........           BL       __aeabi_d2iz
   \   00000062   0004               LSLS     R0,R0,#+16
   \   00000064   0014               ASRS     R0,R0,#+16
   \   00000066   A021               MOVS     R1,#+160
   \   00000068   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   0000006A   0143               ORRS     R1,R1,R0
   \   0000006C   0800               MOVS     R0,R1
   \   0000006E   0221               MOVS     R1,#+2
   \   00000070   ........           BL       SPI_SendWord
    115             RF_Status.EnableRX();
   \   00000074   A06A               LDR      R0,[R4, #+40]
   \   00000076   ........           BL       __iar_via_R0
    116          
    117          }
   \                     ??SwitchToMaster_1:
   \   0000007A   38BC               POP      {R3-R5}
   \   0000007C   01BC               POP      {R0}
   \   0000007E   0047               BX       R0               ;; return
   \                     ??SwitchToMaster_0:
   \   00000080   ........           DC32     SPI_Buff + 220
   \   00000084   ........           DC32     ReciveFrameToMe
    118          

   \                                 In section Debug.txt, align 4, keep-with-next
    119          void SwitchToSlave(void)
    120          {
   \                     SwitchToSlave:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    121             RF_Status.TimeInSlaveMode=0;
   \   00000002   ....               LDR      R4,??DataTable9  ;; RF_Status
   \   00000004   0025               MOVS     R5,#+0
    122             RF_Status.TimeInMasterMode=0;
   \   00000006   6561               STR      R5,[R4, #+20]
    123             RF_Status.SlaveModeTimeout=MAX_TIME_FOR_SLAVE_ASK;
                                               ^
Warning[Pe069]: integer conversion resulted in truncation
   \   00000008   5E20               MOVS     R0,#+94
   \   0000000A   E074               STRB     R0,[R4, #+19]
    124            
    125             // AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
    126             
    127             SPI_SendWord(0x8219,Cs_RF); 
                    ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   0000000C   0221               MOVS     R1,#+2
   \   0000000E   ....               LDR      R0,??DataTable10  ;; 0x8219
   \   00000010   ........           BL       SPI_SendWord
    128            // Delay(0x4FF);
    129             SPI_SendWord(0x80E7,Cs_RF); 
   \   00000014   0221               MOVS     R1,#+2
   \   00000016   1948               LDR      R0,??SwitchToSlave_0  ;; 0x80e7
   \   00000018   ........           BL       SPI_SendWord
    130             SlaveMode=1;
   \   0000001C   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   0000001E   0121               MOVS     R1,#+1
   \   00000020   0170               STRB     R1,[R0, #+0]
    131          
    132             RF_Status.MasterMode=0;
   \   00000022   6573               STRB     R5,[R4, #+13]
    133             SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
   \   00000024   E07B               LDRB     R0,[R4, #+15]
   \   00000026   ........           BL       __aeabi_ui2d
   \   0000002A   0200               MOVS     R2,R0
   \   0000002C   0B00               MOVS     R3,R1
   \   0000002E   ....               LDR      R0,??DataTable12  ;; 0x33333333
   \   00000030   ....               LDR      R1,??DataTable13  ;; 0x3fd33333
   \   00000032   ........           BL       __aeabi_dmul
   \   00000036   0200               MOVS     R2,R0
   \   00000038   0B00               MOVS     R3,R1
   \   0000003A   ....               LDR      R0,??DataTable14  ;; 0x5c28f5c3
   \   0000003C   ....               LDR      R1,??DataTable15  ;; 0x408ae28f
   \   0000003E   ........           BL       __aeabi_dadd
   \   00000042   0200               MOVS     R2,R0
   \   00000044   0B00               MOVS     R3,R1
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   ....               LDR      R1,??DataTable16  ;; 0x40690000
   \   0000004A   ........           BL       __aeabi_dmul
   \   0000004E   0200               MOVS     R2,R0
   \   00000050   0B00               MOVS     R3,R1
   \   00000052   2800               MOVS     R0,R5
   \   00000054   ....               LDR      R1,??DataTable17  ;; 0xc104ff00
   \   00000056   ........           BL       __aeabi_dadd
   \   0000005A   ........           BL       __aeabi_d2iz
   \   0000005E   0004               LSLS     R0,R0,#+16
   \   00000060   0014               ASRS     R0,R0,#+16
   \   00000062   A021               MOVS     R1,#+160
   \   00000064   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   00000066   0143               ORRS     R1,R1,R0
   \   00000068   0800               MOVS     R0,R1
   \   0000006A   0221               MOVS     R1,#+2
   \   0000006C   ........           BL       SPI_SendWord
    134             RF_Status.EnableRX();
   \   00000070   A06A               LDR      R0,[R4, #+40]
   \   00000072   ........           BL       __iar_via_R0
    135          
    136          }
   \   00000076   38BC               POP      {R3-R5}
   \   00000078   01BC               POP      {R0}
   \   0000007A   0047               BX       R0               ;; return
   \                     ??SwitchToSlave_0:
   \   0000007C   E7800000           DC32     0x80e7
    137          
    138          
    139          //-----------------------------------------------------------------------------
    140          //!  Nazwa funkcji :    RF_ExecuteOrder
    141          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
    142          //-----------------------------------------------------------------------------
    143          //  Res   - wskanik na bufor danych
    144          //  Size  - wielkoæ bufora danych
    145          //  Buff  - wskanik na ostatni bajt danych 
    146          //-----------------------------------------------------------------------------
    147            _RF_Command  *pRF_Command;

   \                                 In section Debug.txt, align 4, keep-with-next
    148          char RF_ReciveFarm(char *Buff, char Size)
    149          {
   \                     RF_ReciveFarm:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0024               MOVS     R4,#+0
    150                    char FrameOk=0;
    151                    
    152                    if ((Size==8) && (FrameOk==0))
   \   00000006   0829               CMP      R1,#+8
   \   00000008   0AD1               BNE      ??RF_ReciveFarm_0
    153                    {
    154                       pRF_Command=(_pRF_Command)(Buff-7); //rzutowanie na strukturê rozkazu
   \   0000000A   ....               LDR      R5,??DataTable21  ;; IndWys
   \   0000000C   F61F               SUBS     R6,R6,#+7
   \   0000000E   EE62               STR      R6,[R5, #+44]
    155                       if (pRF_Command->B8.CRC == crc16(pRF_Command->Streem, Size-2))  FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000010   0621               MOVS     R1,#+6
   \   00000012   3000               MOVS     R0,R6
   \   00000014   ........           BL       crc16
   \   00000018   E96A               LDR      R1,[R5, #+44]
   \   0000001A   8B79               LDRB     R3,[R1, #+6]
   \   0000001C   CA79               LDRB     R2,[R1, #+7]
   \   0000001E   2AE0               B.N      ??RF_ReciveFarm_1
    156                    }
    157                    else if (Size==6)
   \                     ??RF_ReciveFarm_0:
   \   00000020   0629               CMP      R1,#+6
   \   00000022   0AD1               BNE      ??RF_ReciveFarm_2
    158                    {
    159                       pRF_Command=(_pRF_Command)(Buff-5); //rzutowanie na strukturê rozkazu
   \   00000024   ....               LDR      R5,??DataTable21  ;; IndWys
   \   00000026   761F               SUBS     R6,R6,#+5
   \   00000028   EE62               STR      R6,[R5, #+44]
    160                       if (pRF_Command->B6.CRC == crc16(pRF_Command->Streem, Size-2))  FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000002A   0421               MOVS     R1,#+4
   \   0000002C   3000               MOVS     R0,R6
   \   0000002E   ........           BL       crc16
   \   00000032   E96A               LDR      R1,[R5, #+44]
   \   00000034   0B79               LDRB     R3,[R1, #+4]
   \   00000036   4A79               LDRB     R2,[R1, #+5]
   \   00000038   1DE0               B.N      ??RF_ReciveFarm_1
    161                    }   
    162                    else 
    163                    { 
    164                      if ((Size>8) && (FrameOk==0))
   \                     ??RF_ReciveFarm_2:
   \   0000003A   0929               CMP      R1,#+9
   \   0000003C   0ED3               BCC      ??RF_ReciveFarm_3
    165                      {
    166                        pRF_Command=(_pRF_Command)(Buff-7); //rzutowanie na strukturê rozkazu
   \   0000003E   ....               LDR      R5,??DataTable21  ;; IndWys
   \   00000040   F01F               SUBS     R0,R6,#+7
   \   00000042   E862               STR      R0,[R5, #+44]
    167                        if (pRF_Command->B8.CRC == crc16(pRF_Command->Streem, 6))  FrameOk=1;
                                                                ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000044   0621               MOVS     R1,#+6
   \   00000046   ........           BL       crc16
   \   0000004A   E96A               LDR      R1,[R5, #+44]
   \   0000004C   8B79               LDRB     R3,[R1, #+6]
   \   0000004E   CA79               LDRB     R2,[R1, #+7]
   \   00000050   1206               LSLS     R2,R2,#+24
   \   00000052   120C               LSRS     R2,R2,#+16
   \   00000054   1343               ORRS     R3,R3,R2
   \   00000056   8342               CMP      R3,R0
   \   00000058   03D1               BNE      ??RF_ReciveFarm_4
   \   0000005A   12E0               B.N      ??RF_ReciveFarm_5
    168                      }
    169                      
    170                      if ((Size>6) && (FrameOk==0))
   \                     ??RF_ReciveFarm_3:
   \   0000005C   0729               CMP      R1,#+7
   \   0000005E   00D2               BCS      .+4
   \   00000060   BAE0               B        ??RF_ReciveFarm_6
    171                      {
    172                       pRF_Command=(_pRF_Command)(Buff-5); //rzutowanie na strukturê rozkazu
   \                     ??RF_ReciveFarm_4:
   \   00000062   ....               LDR      R5,??DataTable21  ;; IndWys
   \   00000064   761F               SUBS     R6,R6,#+5
   \   00000066   EE62               STR      R6,[R5, #+44]
    173                       if (pRF_Command->B6.CRC == crc16(pRF_Command->Streem, 4)) FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000068   0421               MOVS     R1,#+4
   \   0000006A   3000               MOVS     R0,R6
   \   0000006C   ........           BL       crc16
   \   00000070   E96A               LDR      R1,[R5, #+44]
   \   00000072   0B79               LDRB     R3,[R1, #+4]
   \   00000074   4A79               LDRB     R2,[R1, #+5]
   \                     ??RF_ReciveFarm_1:
   \   00000076   1206               LSLS     R2,R2,#+24
   \   00000078   120C               LSRS     R2,R2,#+16
   \   0000007A   1343               ORRS     R3,R3,R2
   \   0000007C   8342               CMP      R3,R0
   \   0000007E   00D0               BEQ      .+4
   \   00000080   AAE0               B        ??RF_ReciveFarm_6
   \                     ??RF_ReciveFarm_5:
   \   00000082   0124               MOVS     R4,#+1
    174                      } 
    175                    
    176                    }
    177                   
    178                    
    179          
    180                    
    181                    //je¿eli ramka poprawna
    182                    if (FrameOk==1)
    183                    {  
    184                        
    185                            char Odbierz=0;
    186                            //Sprawdzenie zgodnoci ID 
    187                            if(((pRF_Command->ID==RF_TaskTab[RF_CurrentTask].Command.ID) && (!SlaveMode)) ||
    188                               ((pRF_Command->ID==RF_Status.RF_ID) && (SlaveMode))
    189                               ) 
   \   00000084   E86A               LDR      R0,[R5, #+44]
   \   00000086   ........           BL       __aeabi_uread4
   \   0000008A   ....               LDR      R7,??DataTable22  ;; RF_TaskTab
   \   0000008C   ....               LDR      R6,??DataTable23  ;; 0xfffff
   \   0000008E   3040               ANDS     R0,R0,R6
   \   00000090   2957               LDRSB    R1,[R5, R4]
   \   00000092   C900               LSLS     R1,R1,#+3
   \   00000094   7918               ADDS     R1,R7,R1
   \   00000096   4968               LDR      R1,[R1, #+4]
   \   00000098   3140               ANDS     R1,R1,R6
   \   0000009A   8842               CMP      R0,R1
   \   0000009C   03D1               BNE      ??RF_ReciveFarm_7
   \   0000009E   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   000000A0   0078               LDRB     R0,[R0, #+0]
   \   000000A2   0028               CMP      R0,#+0
   \   000000A4   4FD0               BEQ      ??RF_ReciveFarm_8
   \                     ??RF_ReciveFarm_7:
   \   000000A6   E86A               LDR      R0,[R5, #+44]
   \   000000A8   ........           BL       __aeabi_uread4
   \   000000AC   3040               ANDS     R0,R0,R6
   \   000000AE   ....               LDR      R1,??DataTable25  ;; RF_Status + 24
   \   000000B0   0968               LDR      R1,[R1, #+0]
   \   000000B2   8842               CMP      R0,R1
   \   000000B4   03D1               BNE      ??RF_ReciveFarm_9
   \   000000B6   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   000000B8   0078               LDRB     R0,[R0, #+0]
   \   000000BA   0028               CMP      R0,#+0
   \   000000BC   43D1               BNE      ??RF_ReciveFarm_8
    190                            {
    191                               Odbierz=1;
    192                            }
    193                            else if ((pRF_Command->ID==0)  && (SlaveMode)) //ramka rozg³ona 
   \                     ??RF_ReciveFarm_9:
   \   000000BE   E86A               LDR      R0,[R5, #+44]
   \   000000C0   ........           BL       __aeabi_uread4
   \   000000C4   3040               ANDS     R0,R0,R6
   \   000000C6   03D1               BNE      ??RF_ReciveFarm_10
   \   000000C8   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   000000CA   0078               LDRB     R0,[R0, #+0]
   \   000000CC   0028               CMP      R0,#+0
   \   000000CE   3AD1               BNE      ??RF_ReciveFarm_8
    194                            {
    195                              Odbierz=1;
    196                            }
    197                            else if ((AT91C_IFLASH_MEM->Config.SlaveMode) && (SlaveMode) && (BridgeMode)) 
   \                     ??RF_ReciveFarm_10:
   \   000000D0   ....               LDR      R0,??DataTable28  ;; 0x13d7e8
   \   000000D2   0078               LDRB     R0,[R0, #+0]
   \   000000D4   0028               CMP      R0,#+0
   \   000000D6   1CD0               BEQ      ??RF_ReciveFarm_11
   \   000000D8   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   000000DA   0078               LDRB     R0,[R0, #+0]
   \   000000DC   0028               CMP      R0,#+0
   \   000000DE   18D0               BEQ      ??RF_ReciveFarm_11
   \   000000E0   2879               LDRB     R0,[R5, #+4]
   \   000000E2   0028               CMP      R0,#+0
   \   000000E4   15D0               BEQ      ??RF_ReciveFarm_11
    198                            {
    199                              for (char ND=0; ND<NumberNeurons-1; ND++)
   \   000000E6   0027               MOVS     R7,#+0
    200                              {
    201                                if ((pRF_Command->ID==NeuronsList[ND].NeuronID) && (TransQuality.QuickMensur[ND]))
   \                     ??RF_ReciveFarm_12:
   \   000000E8   E86A               LDR      R0,[R5, #+44]
   \   000000EA   ........           BL       __aeabi_uread4
   \   000000EE   3040               ANDS     R0,R0,R6
   \   000000F0   0C21               MOVS     R1,#+12
   \   000000F2   7943               MULS     R1,R7,R1
   \   000000F4   ....               LDR      R2,??DataTable30  ;; NeuronsList
   \   000000F6   5118               ADDS     R1,R2,R1
   \   000000F8   4968               LDR      R1,[R1, #+4]
   \   000000FA   8842               CMP      R0,R1
   \   000000FC   03D1               BNE      ??RF_ReciveFarm_13
   \   000000FE   3848               LDR      R0,??RF_ReciveFarm_14  ;; TransQuality + 38
   \   00000100   C05D               LDRB     R0,[R0, R7]
   \   00000102   0028               CMP      R0,#+0
   \   00000104   1FD1               BNE      ??RF_ReciveFarm_8
    202                                {
    203                                  Odbierz=1;
    204                                  break;
    205                                }
    206                              }
   \                     ??RF_ReciveFarm_13:
   \   00000106   7F1C               ADDS     R7,R7,#+1
   \   00000108   3806               LSLS     R0,R7,#+24
   \   0000010A   000E               LSRS     R0,R0,#+24
   \   0000010C   2228               CMP      R0,#+34
   \   0000010E   41D2               BCS      ??RF_ReciveFarm_15
   \   00000110   EAE7               B        ??RF_ReciveFarm_12
    207                            }else if (((RF_TaskTab[RF_CurrentTask].Command.Order==R_BC_Order) || (RF_TaskTab[RF_CurrentTask].Command.Order==W_BC_Order)) && (pRF_Command->BC_ID2==RF_TaskTab[RF_CurrentTask].Command.ID))
   \                     ??RF_ReciveFarm_11:
   \   00000112   2857               LDRSB    R0,[R5, R4]
   \   00000114   C000               LSLS     R0,R0,#+3
   \   00000116   3818               ADDS     R0,R7,R0
   \   00000118   4068               LDR      R0,[R0, #+4]
   \   0000011A   F021               MOVS     R1,#+240
   \   0000011C   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   0000011E   0140               ANDS     R1,R1,R0
   \   00000120   080D               LSRS     R0,R1,#+20
   \   00000122   0728               CMP      R0,#+7
   \   00000124   01D0               BEQ      ??RF_ReciveFarm_16
   \   00000126   0828               CMP      R0,#+8
   \   00000128   34D1               BNE      ??RF_ReciveFarm_15
   \                     ??RF_ReciveFarm_16:
   \   0000012A   E86A               LDR      R0,[R5, #+44]
   \   0000012C   C01C               ADDS     R0,R0,#+3
   \   0000012E   ........           BL       __aeabi_uread8
   \   00000132   3101               LSLS     R1,R6,#+4
   \   00000134   0140               ANDS     R1,R1,R0
   \   00000136   0809               LSRS     R0,R1,#+4
   \   00000138   2957               LDRSB    R1,[R5, R4]
   \   0000013A   C900               LSLS     R1,R1,#+3
   \   0000013C   7918               ADDS     R1,R7,R1
   \   0000013E   4968               LDR      R1,[R1, #+4]
   \   00000140   3140               ANDS     R1,R1,R6
   \   00000142   8842               CMP      R0,R1
   \   00000144   26D1               BNE      ??RF_ReciveFarm_15
   \                     ??RF_ReciveFarm_8:
   \   00000146   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   00000148   0078               LDRB     R0,[R0, #+0]
   \   0000014A   0028               CMP      R0,#+0
   \   0000014C   05D1               BNE      ??RF_ReciveFarm_17
   \   0000014E   ....               LDR      R7,??DataTable38  ;; RF_Status
   \   00000150   F87A               LDRB     R0,[R7, #+11]
   \   00000152   0128               CMP      R0,#+1
   \   00000154   01D1               BNE      ??RF_ReciveFarm_17
    208                            {
    209                              Odbierz=1;
    210                            }
    211                            
    212                            
    213                            
    214                            
    215                            
    216                            if (Odbierz)
    217                            {
    218                              if ((SlaveMode==0) && (RF_Status.ConfResive==1)) RF_Status.ConfResive=2;  //znacznik odebrania danych (dla kontroli kana³u)
   \   00000156   0220               MOVS     R0,#+2
   \   00000158   F872               STRB     R0,[R7, #+11]
    219                              if ((SlaveMode==1) && (RF_Status.ConfResiveSlave==1)) RF_Status.ConfResiveSlave=2;  //znacznik odebrania danych (dla kontroli kana³u)
   \                     ??RF_ReciveFarm_17:
   \   0000015A   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   0000015C   0078               LDRB     R0,[R0, #+0]
   \   0000015E   0128               CMP      R0,#+1
   \   00000160   05D1               BNE      ??RF_ReciveFarm_18
   \   00000162   ....               LDR      R7,??DataTable38  ;; RF_Status
   \   00000164   387B               LDRB     R0,[R7, #+12]
   \   00000166   0128               CMP      R0,#+1
   \   00000168   01D1               BNE      ??RF_ReciveFarm_18
   \   0000016A   0220               MOVS     R0,#+2
   \   0000016C   3873               STRB     R0,[R7, #+12]
    220                               
    221                              RF_ExecuteOrder(pRF_Command);   //realizacja rozkazu   
   \                     ??RF_ReciveFarm_18:
   \   0000016E   E86A               LDR      R0,[R5, #+44]
   \   00000170   ........           BL       RF_ExecuteOrder
    222                              
    223                              
    224                              if (SlaveMode)
   \   00000174   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   00000176   0078               LDRB     R0,[R0, #+0]
   \   00000178   0028               CMP      R0,#+0
   \   0000017A   0BD0               BEQ      ??RF_ReciveFarm_15
    225                              {
    226                                if  (RF_Status.TimeInSlaveMode>MAX_TIME_FOR_SLAVE_ASK)
   \   0000017C   ....               LDR      R7,??DataTable38  ;; RF_Status
   \   0000017E   F88A               LDRH     R0,[R7, #+22]
   \   00000180   FF21               MOVS     R1,#+255
   \   00000182   6031               ADDS     R1,R1,#+96       ;; #+351
   \   00000184   8842               CMP      R0,R1
   \   00000186   01D3               BCC      ??RF_ReciveFarm_19
    227                                {
    228                                 RF_Status.SlaveModeTimeout=2;
   \   00000188   0220               MOVS     R0,#+2
   \   0000018A   02E0               B.N      ??RF_ReciveFarm_20
    229                                }else if  (RF_Status.TimeInSlaveMode>100)
   \                     ??RF_ReciveFarm_19:
   \   0000018C   6528               CMP      R0,#+101
   \   0000018E   01D3               BCC      ??RF_ReciveFarm_15
    230                                {
    231                                 RF_Status.SlaveModeTimeout=SLAVE_MODE_TIMEOUT; 
   \   00000190   0A20               MOVS     R0,#+10
   \                     ??RF_ReciveFarm_20:
   \   00000192   F874               STRB     R0,[R7, #+19]
    232                                }
    233                              }
    234                              
    235                              
    236          
    237                            }
    238                            
    239                            if ((SlaveMode) && (pRF_Command->ID!=RF_Status.RF_ID) && (pRF_Command->ID!=0) && (RF_Status.SlaveModeTimeout>0) && (RF_Status.TimeInSlaveMode>100))
   \                     ??RF_ReciveFarm_15:
   \   00000194   ....               LDR      R0,??DataTable33  ;; SlaveMode
   \   00000196   0078               LDRB     R0,[R0, #+0]
   \   00000198   0028               CMP      R0,#+0
   \   0000019A   14D0               BEQ      ??RF_ReciveFarm_21
   \   0000019C   E86A               LDR      R0,[R5, #+44]
   \   0000019E   ........           BL       __aeabi_uread4
   \   000001A2   ....               LDR      R7,??DataTable38  ;; RF_Status
   \   000001A4   3040               ANDS     R0,R0,R6
   \   000001A6   B969               LDR      R1,[R7, #+24]
   \   000001A8   8842               CMP      R0,R1
   \   000001AA   0CD0               BEQ      ??RF_ReciveFarm_21
   \   000001AC   E86A               LDR      R0,[R5, #+44]
   \   000001AE   ........           BL       __aeabi_uread4
   \   000001B2   0640               ANDS     R6,R6,R0
   \   000001B4   07D0               BEQ      ??RF_ReciveFarm_21
   \   000001B6   F87C               LDRB     R0,[R7, #+19]
   \   000001B8   0028               CMP      R0,#+0
   \   000001BA   04D0               BEQ      ??RF_ReciveFarm_21
   \   000001BC   F88A               LDRH     R0,[R7, #+22]
   \   000001BE   6528               CMP      R0,#+101
   \   000001C0   01D3               BCC      ??RF_ReciveFarm_21
    240                            {
    241                              RF_Status.SlaveModeTimeout=0;
   \   000001C2   0020               MOVS     R0,#+0
   \   000001C4   F874               STRB     R0,[R7, #+19]
    242                            }
    243          
    244                            poprawnych++;
   \                     ??RF_ReciveFarm_21:
   \   000001C6   A869               LDR      R0,[R5, #+24]
   \   000001C8   401C               ADDS     R0,R0,#+1
   \   000001CA   A861               STR      R0,[R5, #+24]
    245                            odb[IndWys]++;
   \   000001CC   2878               LDRB     R0,[R5, #+0]
   \   000001CE   8000               LSLS     R0,R0,#+2
   \   000001D0   2818               ADDS     R0,R5,R0
   \   000001D2   016A               LDR      R1,[R0, #+32]
   \   000001D4   491C               ADDS     R1,R1,#+1
   \   000001D6   0162               STR      R1,[R0, #+32]
    246                    }
    247                    return FrameOk;
   \                     ??RF_ReciveFarm_6:
   \   000001D8   2000               MOVS     R0,R4
   \   000001DA   F8BC               POP      {R3-R7}
   \   000001DC   02BC               POP      {R1}
   \   000001DE   0847               BX       R1               ;; return
   \                     ??RF_ReciveFarm_14:
   \   000001E0   ........           DC32     TransQuality + 38
    248          
    249          }
    250          
    251          
    252          
    253          
    254          
    255          //-----------------------------------------------------------------------------
    256          //!  Nazwa funkcji :    RF_ExecuteOrder
    257          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
    258          //-----------------------------------------------------------------------------
    259          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    260          void RF_ExecuteOrder(_RF_Command *Command)
    261          {
   \                     RF_ExecuteOrder:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   8CB0               SUB      SP,SP,#+48
    262           // TRACE_INFO("Id: %X,  Ord: %X,  Reg: %X,  Val: %X \n\r", Command->ID, Command->Order, Command->Auxi, Command->B8.Val); 
    263             licznik_cykli=0;  
   \   00000004   DA4E               LDR      R6,??RF_ExecuteOrder_1  ;; IndWys
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   B062               STR      R0,[R6, #+40]
    264             char Nd;
    265             char FoundNode, FoundTask;             
    266             
    267             _RF_Command CMD;
    268             for (char i=0; i<sizeof(_RF_Command); i++) {CMD.Streem[i]=Command->Streem[i];}
   \   0000000A   08A8               ADD      R0,SP,#+32
   \   0000000C   0C99               LDR      R1,[SP, #+48]
   \   0000000E   0222               MOVS     R2,#+2
   \                     ??RF_ExecuteOrder_2:
   \   00000010   0B78               LDRB     R3,[R1, #+0]
   \   00000012   0370               STRB     R3,[R0, #+0]
   \   00000014   4B78               LDRB     R3,[R1, #+1]
   \   00000016   4370               STRB     R3,[R0, #+1]
   \   00000018   8B78               LDRB     R3,[R1, #+2]
   \   0000001A   8370               STRB     R3,[R0, #+2]
   \   0000001C   CB78               LDRB     R3,[R1, #+3]
   \   0000001E   C370               STRB     R3,[R0, #+3]
   \   00000020   091D               ADDS     R1,R1,#+4
   \   00000022   001D               ADDS     R0,R0,#+4
   \   00000024   521E               SUBS     R2,R2,#+1
   \   00000026   F3D1               BNE      ??RF_ExecuteOrder_2
   \   00000028   08A8               ADD      R0,SP,#+32
   \   0000002A   C01C               ADDS     R0,R0,#+3
   \   0000002C   ........           BL       __aeabi_uread8
   \   00000030   D049               LDR      R1,??RF_ExecuteOrder_1+0x4  ;; 0xfffff0
   \   00000032   0140               ANDS     R1,R1,R0
   \   00000034   0809               LSRS     R0,R1,#+4
   \   00000036   0590               STR      R0,[SP, #+20]
    269             int BC_ID2=(int)CMD.BC_ID2; 
    270             char BC_REG=(char)CMD.BC_REG;
   \   00000038   08A8               ADD      R0,SP,#+32
   \   0000003A   C01C               ADDS     R0,R0,#+3
   \   0000003C   ........           BL       __aeabi_uread8
   \   00000040   0007               LSLS     R0,R0,#+28
   \   00000042   000F               LSRS     R0,R0,#+28
   \   00000044   0790               STR      R0,[SP, #+28]
   \   00000046   08A8               ADD      R0,SP,#+32
   \   00000048   801C               ADDS     R0,R0,#+2
   \   0000004A   ........           BL       __aeabi_uread4
   \   0000004E   F021               MOVS     R1,#+240
   \   00000050   0140               ANDS     R1,R1,R0
   \   00000052   0809               LSRS     R0,R1,#+4
   \   00000054   0090               STR      R0,[SP, #+0]
   \   00000056   0298               LDR      R0,[SP, #+8]
   \   00000058   000D               LSRS     R0,R0,#+20
   \   0000005A   0005               LSLS     R0,R0,#+20
   \   0000005C   C649               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   0000005E   0968               LDR      R1,[R1, #+0]
   \   00000060   0903               LSLS     R1,R1,#+12
   \   00000062   090B               LSRS     R1,R1,#+12
   \   00000064   0143               ORRS     R1,R1,R0
   \   00000066   0291               STR      R1,[SP, #+8]
    271             char* pNODE_ID=(char*)&NODE_ID;
    272             char Order=CMD.Order;
    273             _RF_Command  CommandToSend;
    274             
    275             //czêæ wspólna wszystkich odpowiedzi
    276             CommandToSend.ID     = RF_Status.RF_ID;
    277             CommandToSend.Auxi   = Command->Auxi;
   \   00000068   02AC               ADD      R4,SP,#+8
   \   0000006A   2000               MOVS     R0,R4
   \   0000006C   C01C               ADDS     R0,R0,#+3
   \   0000006E   ........           BL       __aeabi_uread4
   \   00000072   0700               MOVS     R7,R0
   \   00000074   0C98               LDR      R0,[SP, #+48]
   \   00000076   C01C               ADDS     R0,R0,#+3
   \   00000078   ........           BL       __aeabi_uread4
   \   0000007C   FF25               MOVS     R5,#+255
   \   0000007E   2100               MOVS     R1,R4
   \   00000080   C91C               ADDS     R1,R1,#+3
   \   00000082   AF43               BICS     R7,R7,R5
   \   00000084   2840               ANDS     R0,R0,R5
   \   00000086   3843               ORRS     R0,R0,R7
   \   00000088   ........           BL       __aeabi_uwrite4
    278             
    279                 
    280              char ByteToSend=0;          
   \   0000008C   6846               MOV      R0,SP
   \   0000008E   0021               MOVS     R1,#+0
   \   00000090   0171               STRB     R1,[R0, #+4]
    281              char NextModule=0;
    282              switch (Order)
   \   00000092   0098               LDR      R0,[SP, #+0]
   \   00000094   0006               LSLS     R0,R0,#+24
   \   00000096   000E               LSRS     R0,R0,#+24
   \   00000098   401E               SUBS     R0,R0,#+1
   \   0000009A   0E28               CMP      R0,#+14
   \   0000009C   00D9               BLS      .+4
   \   0000009E   FCE1               B        ??RF_ExecuteOrder_3
   \   000000A0   01A1               ADR      R1,??RF_ExecuteOrder_0
   \   000000A2   4000               LSLS     R0,R0,#+1
   \   000000A4   095A               LDRH     R1,[R1, R0]
   \   000000A6   8F44               ADD      PC,PC,R1
   \                     ??RF_ExecuteOrder_0:
   \   000000A8   1C00CE00F003       DC16     +28,+206,+1008,+1008
   \              F003        
   \   000000B0   E805F003DC01       DC16     +1512,+1008,+476,+1056
   \              2004        
   \   000000B8   76064007F003       DC16     +1654,+1856,+1008,+1946
   \              9A07        
   \   000000C0   D807F0030E08       DC16     +2008,+1008,+2062
    283              {  
    284               
    285                 //Rozkazy dla Slave ------------------------------------------------------------
    286                
    287                      case R_RegOrd :  //Odczyt pojedyñczego rejestru - rozkaz
    288                               //wykonanie ------
    289                               if (Command->ID==RF_Status.RF_ID)  //je¿eli odpytanie bezporednie
   \                     ??RF_ExecuteOrder_4:
   \   000000C6   0C98               LDR      R0,[SP, #+48]
   \   000000C8   ........           BL       __aeabi_uread4
   \   000000CC   0003               LSLS     R0,R0,#+12
   \   000000CE   000B               LSRS     R0,R0,#+12
   \   000000D0   A949               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   000000D2   0968               LDR      R1,[R1, #+0]
   \   000000D4   8842               CMP      R0,R1
   \   000000D6   0BD1               BNE      ??RF_ExecuteOrder_5
    290                               {
    291                                  CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
   \   000000D8   2000               MOVS     R0,R4
   \   000000DA   C01C               ADDS     R0,R0,#+3
   \   000000DC   ........           BL       __aeabi_uread4
   \   000000E0   A649               LDR      R1,??RF_ExecuteOrder_1+0xC  ;; 0x3a2
   \   000000E2   0540               ANDS     R5,R5,R0
   \   000000E4   6800               LSLS     R0,R5,#+1
   \   000000E6   A64A               LDR      R2,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   000000E8   1018               ADDS     R0,R2,R0
   \   000000EA   405A               LDRH     R0,[R0, R1]
   \   000000EC   A080               STRH     R0,[R4, #+4]
   \   000000EE   2DE0               B        ??RF_ExecuteOrder_6
    292                               }else{ 
    293                                  for (char ND=0; ND<NumberNeurons-1; ND++)
   \                     ??RF_ExecuteOrder_5:
   \   000000F0   A448               LDR      R0,??RF_ExecuteOrder_1+0x14  ;; NeuronsList + 4
   \   000000F2   0090               STR      R0,[SP, #+0]
   \   000000F4   0026               MOVS     R6,#+0
   \   000000F6   2227               MOVS     R7,#+34
   \   000000F8   A148               LDR      R0,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   000000FA   B630               ADDS     R0,R0,#+182
   \   000000FC   0690               STR      R0,[SP, #+24]
    294                                  {
    295                                    if ((NeuronsList[ND].Bridge) && (Command->ID==NeuronsList[ND].NeuronID))
   \                     ??RF_ExecuteOrder_7:
   \   000000FE   0098               LDR      R0,[SP, #+0]
   \   00000100   0079               LDRB     R0,[R0, #+4]
   \   00000102   C006               LSLS     R0,R0,#+27
   \   00000104   12D5               BPL      ??RF_ExecuteOrder_8
   \   00000106   0C98               LDR      R0,[SP, #+48]
   \   00000108   ........           BL       __aeabi_uread4
   \   0000010C   0003               LSLS     R0,R0,#+12
   \   0000010E   000B               LSRS     R0,R0,#+12
   \   00000110   0099               LDR      R1,[SP, #+0]
   \   00000112   0968               LDR      R1,[R1, #+0]
   \   00000114   8842               CMP      R0,R1
   \   00000116   09D1               BNE      ??RF_ExecuteOrder_8
    296                                    {
    297                                      CommandToSend.B8.Val  =  MainStage.StageI[ND+1].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
   \   00000118   2000               MOVS     R0,R4
   \   0000011A   C01C               ADDS     R0,R0,#+3
   \   0000011C   ........           BL       __aeabi_uread4
   \   00000120   2840               ANDS     R0,R0,R5
   \   00000122   4000               LSLS     R0,R0,#+1
   \   00000124   0699               LDR      R1,[SP, #+24]
   \   00000126   0818               ADDS     R0,R1,R0
   \   00000128   805B               LDRH     R0,[R0, R6]
   \   0000012A   A080               STRH     R0,[R4, #+4]
    298                                    }
    299                                  }
   \                     ??RF_ExecuteOrder_8:
   \   0000012C   1636               ADDS     R6,R6,#+22
   \   0000012E   0098               LDR      R0,[SP, #+0]
   \   00000130   0C30               ADDS     R0,R0,#+12
   \   00000132   0090               STR      R0,[SP, #+0]
   \   00000134   7F1E               SUBS     R7,R7,#+1
   \   00000136   E2D1               BNE      ??RF_ExecuteOrder_7
    300          
    301                                  CommandToSend.ID=Command->ID;
   \   00000138   0298               LDR      R0,[SP, #+8]
   \   0000013A   050D               LSRS     R5,R0,#+20
   \   0000013C   2D05               LSLS     R5,R5,#+20
   \   0000013E   0C98               LDR      R0,[SP, #+48]
   \   00000140   ........           BL       __aeabi_uread4
   \   00000144   0003               LSLS     R0,R0,#+12
   \   00000146   000B               LSRS     R0,R0,#+12
   \   00000148   2843               ORRS     R0,R0,R5
   \   0000014A   0290               STR      R0,[SP, #+8]
    302                               }
    303                               //odpowied ------
    304                               CommandToSend.Order  = R_RegRes;
   \                     ??RF_ExecuteOrder_6:
   \   0000014C   2000               MOVS     R0,R4
   \   0000014E   801C               ADDS     R0,R0,#+2
   \   00000150   ........           BL       __aeabi_uread4
   \   00000154   0200               MOVS     R2,R0
   \   00000156   2100               MOVS     R1,R4
   \   00000158   891C               ADDS     R1,R1,#+2
   \   0000015A   F020               MOVS     R0,#+240
   \   0000015C   8243               BICS     R2,R2,R0
   \   0000015E   9020               MOVS     R0,#+144
   \   00000160   1043               ORRS     R0,R0,R2
   \   00000162   ........           BL       __aeabi_uwrite4
    305                               CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000166   0621               MOVS     R1,#+6
   \   00000168   02A8               ADD      R0,SP,#+8
   \   0000016A   ........           BL       crc16
   \   0000016E   E080               STRH     R0,[R4, #+6]
    306                               ByteToSend =8;
   \   00000170   6846               MOV      R0,SP
   \   00000172   0821               MOVS     R1,#+8
   \                     ??RF_ExecuteOrder_9:
   \   00000174   0171               STRB     R1,[R0, #+4]
   \   00000176   94E1               B        ??RF_ExecuteOrder_10
    307                           break;
    308                           
    309                      case W_RegOrd :  //Zapis pojedyñczego rejestru  -rozkaz
    310                              
    311                              //przypieszenie wykonania programu
    312                              if ((CommandToSend.Auxi==0) && (MainStage.StageQ[0].Value[CommandToSend.Auxi]!=Command->B8.Val) && (Busy_program==0))
   \                     ??RF_ExecuteOrder_11:
   \   00000178   2000               MOVS     R0,R4
   \   0000017A   C01C               ADDS     R0,R0,#+3
   \   0000017C   ........           BL       __aeabi_uread4
   \   00000180   0006               LSLS     R0,R0,#+24
   \   00000182   1CD1               BNE      ??RF_ExecuteOrder_12
   \   00000184   2000               MOVS     R0,R4
   \   00000186   C01C               ADDS     R0,R0,#+3
   \   00000188   ........           BL       __aeabi_uread4
   \   0000018C   0C9A               LDR      R2,[SP, #+48]
   \   0000018E   1179               LDRB     R1,[R2, #+4]
   \   00000190   5379               LDRB     R3,[R2, #+5]
   \   00000192   1B06               LSLS     R3,R3,#+24
   \   00000194   1B0C               LSRS     R3,R3,#+16
   \   00000196   1943               ORRS     R1,R1,R3
   \   00000198   784A               LDR      R2,??RF_ExecuteOrder_1+0xC  ;; 0x3a2
   \   0000019A   2840               ANDS     R0,R0,R5
   \   0000019C   4000               LSLS     R0,R0,#+1
   \   0000019E   784B               LDR      R3,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   000001A0   1818               ADDS     R0,R3,R0
   \   000001A2   805E               LDRSH    R0,[R0, R2]
   \   000001A4   8842               CMP      R0,R1
   \   000001A6   0AD0               BEQ      ??RF_ExecuteOrder_12
   \   000001A8   7748               LDR      R0,??RF_ExecuteOrder_1+0x18  ;; Busy_program
   \   000001AA   0078               LDRB     R0,[R0, #+0]
   \   000001AC   0028               CMP      R0,#+0
   \   000001AE   06D1               BNE      ??RF_ExecuteOrder_12
    313                              {   
    314                                g_NextTimeProgram=g_counter+1;
   \   000001B0   764A               LDR      R2,??RF_ExecuteOrder_1+0x1C  ;; g_NextTimeProgram
   \   000001B2   7748               LDR      R0,??RF_ExecuteOrder_1+0x20  ;; g_counter
   \   000001B4   03C8               LDM      R0!,{R0,R1}
   \   000001B6   0023               MOVS     R3,#+0
   \   000001B8   401C               ADDS     R0,R0,#+1
   \   000001BA   5941               ADCS     R1,R1,R3
   \   000001BC   03C2               STM      R2!,{R0,R1}
    315                              }
    316                        
    317                              
    318                              
    319                               //wykonanie ------
    320                               if (Command->ID==RF_Status.RF_ID)  //je¿eli wykonanie bezporednie
   \                     ??RF_ExecuteOrder_12:
   \   000001BE   0C98               LDR      R0,[SP, #+48]
   \   000001C0   ........           BL       __aeabi_uread4
   \   000001C4   0003               LSLS     R0,R0,#+12
   \   000001C6   000B               LSRS     R0,R0,#+12
   \   000001C8   6B49               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   000001CA   0968               LDR      R1,[R1, #+0]
   \   000001CC   8842               CMP      R0,R1
   \   000001CE   10D1               BNE      ??RF_ExecuteOrder_13
    321                               {
    322                                 MainStage.StageI[0].Value[CommandToSend.Auxi]=Command->B8.Val;                                    //Ustaw rejestr nr: Command.Auxi 
   \   000001D0   2000               MOVS     R0,R4
   \   000001D2   C01C               ADDS     R0,R0,#+3
   \   000001D4   ........           BL       __aeabi_uread4
   \   000001D8   0540               ANDS     R5,R5,R0
   \   000001DA   6800               LSLS     R0,R5,#+1
   \   000001DC   6849               LDR      R1,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   000001DE   0818               ADDS     R0,R1,R0
   \   000001E0   A030               ADDS     R0,R0,#+160
   \   000001E2   0C99               LDR      R1,[SP, #+48]
   \   000001E4   0B79               LDRB     R3,[R1, #+4]
   \   000001E6   4A79               LDRB     R2,[R1, #+5]
   \   000001E8   1206               LSLS     R2,R2,#+24
   \   000001EA   120C               LSRS     R2,R2,#+16
   \   000001EC   1343               ORRS     R3,R3,R2
   \   000001EE   0380               STRH     R3,[R0, #+0]
   \   000001F0   34E0               B        ??RF_ExecuteOrder_14
    323                               }else{
    324                                 CommandToSend.ID=Command->ID; 
   \                     ??RF_ExecuteOrder_13:
   \   000001F2   0298               LDR      R0,[SP, #+8]
   \   000001F4   060D               LSRS     R6,R0,#+20
   \   000001F6   3605               LSLS     R6,R6,#+20
   \   000001F8   0C98               LDR      R0,[SP, #+48]
   \   000001FA   ........           BL       __aeabi_uread4
   \   000001FE   0003               LSLS     R0,R0,#+12
   \   00000200   000B               LSRS     R0,R0,#+12
   \   00000202   3043               ORRS     R0,R0,R6
   \   00000204   0290               STR      R0,[SP, #+8]
    325                                 for (char ND=0; ND<NumberNeurons-1; ND++)
   \   00000206   5F48               LDR      R0,??RF_ExecuteOrder_1+0x14  ;; NeuronsList + 4
   \   00000208   0090               STR      R0,[SP, #+0]
   \   0000020A   0026               MOVS     R6,#+0
   \   0000020C   2227               MOVS     R7,#+34
   \   0000020E   5C48               LDR      R0,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   00000210   EE21               MOVS     R1,#+238
   \   00000212   8900               LSLS     R1,R1,#+2        ;; #+952
   \   00000214   4018               ADDS     R0,R0,R1
   \   00000216   0690               STR      R0,[SP, #+24]
    326                                  {
    327                                    if ((NeuronsList[ND].Bridge) && (Command->ID==NeuronsList[ND].NeuronID))
   \                     ??RF_ExecuteOrder_15:
   \   00000218   0098               LDR      R0,[SP, #+0]
   \   0000021A   0079               LDRB     R0,[R0, #+4]
   \   0000021C   C006               LSLS     R0,R0,#+27
   \   0000021E   17D5               BPL      ??RF_ExecuteOrder_16
   \   00000220   0C98               LDR      R0,[SP, #+48]
   \   00000222   ........           BL       __aeabi_uread4
   \   00000226   0003               LSLS     R0,R0,#+12
   \   00000228   000B               LSRS     R0,R0,#+12
   \   0000022A   0099               LDR      R1,[SP, #+0]
   \   0000022C   0968               LDR      R1,[R1, #+0]
   \   0000022E   8842               CMP      R0,R1
   \   00000230   0ED1               BNE      ??RF_ExecuteOrder_16
    328                                    {
    329                                      MainStage.StageQ[ND+1].Value[CommandToSend.Auxi]=Command->B8.Val;                                    //Ustaw rejestr nr: Command.Auxi 
   \   00000232   2000               MOVS     R0,R4
   \   00000234   C01C               ADDS     R0,R0,#+3
   \   00000236   ........           BL       __aeabi_uread4
   \   0000023A   2840               ANDS     R0,R0,R5
   \   0000023C   4000               LSLS     R0,R0,#+1
   \   0000023E   0699               LDR      R1,[SP, #+24]
   \   00000240   0818               ADDS     R0,R1,R0
   \   00000242   0C99               LDR      R1,[SP, #+48]
   \   00000244   0B79               LDRB     R3,[R1, #+4]
   \   00000246   4A79               LDRB     R2,[R1, #+5]
   \   00000248   1206               LSLS     R2,R2,#+24
   \   0000024A   120C               LSRS     R2,R2,#+16
   \   0000024C   1343               ORRS     R3,R3,R2
   \   0000024E   8353               STRH     R3,[R0, R6]
    330                                    }
    331                                  }
   \                     ??RF_ExecuteOrder_16:
   \   00000250   1636               ADDS     R6,R6,#+22
   \   00000252   0098               LDR      R0,[SP, #+0]
   \   00000254   0C30               ADDS     R0,R0,#+12
   \   00000256   0090               STR      R0,[SP, #+0]
   \   00000258   7F1E               SUBS     R7,R7,#+1
   \   0000025A   DDD1               BNE      ??RF_ExecuteOrder_15
    332                               }
    333                              
    334                              
    335                               //odpowied ------
    336                               CommandToSend.Order  = W_RegRes;
   \                     ??RF_ExecuteOrder_14:
   \   0000025C   2000               MOVS     R0,R4
   \   0000025E   801C               ADDS     R0,R0,#+2
   \   00000260   ........           BL       __aeabi_uread4
   \   00000264   0200               MOVS     R2,R0
   \   00000266   2100               MOVS     R1,R4
   \   00000268   891C               ADDS     R1,R1,#+2
   \   0000026A   F020               MOVS     R0,#+240
   \   0000026C   8243               BICS     R2,R2,R0
   \   0000026E   A020               MOVS     R0,#+160
   \   00000270   1043               ORRS     R0,R0,R2
   \   00000272   ........           BL       __aeabi_uwrite4
    337                               CommandToSend.B6.CRC = crc16(CommandToSend.Streem,4);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000276   0421               MOVS     R1,#+4
   \   00000278   02A8               ADD      R0,SP,#+8
   \   0000027A   ........           BL       crc16
   \   0000027E   A080               STRH     R0,[R4, #+4]
    338                               ByteToSend =6;
   \   00000280   6846               MOV      R0,SP
   \   00000282   0621               MOVS     R1,#+6
   \   00000284   76E7               B.N      ??RF_ExecuteOrder_9
    339                           break;
    340                          
    341                           
    342                         
    343                        case R_BC_Order :  //Odpowied na pytanie kto ma wêze³ (+ dodanie zadania odpytania)
    344                               //wykonanie ------
    345                               //CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
    346                              
    347                              // AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    348                              // ButtonBipCounter=g_counter+10000;
    349                           
    350                   
    351                               
    352                               Nd=0;
   \                     ??RF_ExecuteOrder_17:
   \   00000286   0025               MOVS     R5,#+0
    353                               FoundNode=0xFF;
    354                               FoundTask=0;
   \   00000288   0495               STR      R5,[SP, #+16]
    355                          
    356                        
    357                               if (BC_ID2==RF_Status.RF_ID) //jezeli zapytanie rozg³one o mnie 
   \   0000028A   0598               LDR      R0,[SP, #+20]
   \   0000028C   3A49               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   0000028E   0968               LDR      R1,[R1, #+0]
   \   00000290   8842               CMP      R0,R1
   \   00000292   2AD1               BNE      ??RF_ExecuteOrder_18
    358                               {
    359          
    360                                   CommandToSend.Order= RW_BC_Res;
   \   00000294   2000               MOVS     R0,R4
   \   00000296   801C               ADDS     R0,R0,#+2
   \   00000298   ........           BL       __aeabi_uread4
   \   0000029C   0200               MOVS     R2,R0
   \   0000029E   2100               MOVS     R1,R4
   \   000002A0   891C               ADDS     R1,R1,#+2
   \   000002A2   F020               MOVS     R0,#+240
   \   000002A4   1043               ORRS     R0,R0,R2
   \   000002A6   ........           BL       __aeabi_uwrite4
    361                                   CommandToSend.BC_ID1=RF_Status.RF_ID; 
   \   000002AA   02A8               ADD      R0,SP,#+8
   \   000002AC   ........           BL       __aeabi_uread8
   \   000002B0   02AA               ADD      R2,SP,#+8
   \   000002B2   1500               MOVS     R5,R2
   \   000002B4   374E               LDR      R6,??RF_ExecuteOrder_1+0x24  ;; 0xfff00000
   \   000002B6   0027               MOVS     R7,#+0
   \   000002B8   FF43               MVNS     R7,R7            ;; #-1
   \   000002BA   0640               ANDS     R6,R6,R0
   \   000002BC   0F40               ANDS     R7,R7,R1
   \   000002BE   2E48               LDR      R0,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   000002C0   0268               LDR      R2,[R0, #+0]
   \   000002C2   3548               LDR      R0,??RF_ExecuteOrder_1+0x28  ;; 0xfffff
   \   000002C4   0021               MOVS     R1,#+0
   \   000002C6   1040               ANDS     R0,R0,R2
   \   000002C8   3043               ORRS     R0,R0,R6
   \   000002CA   3943               ORRS     R1,R1,R7
   \   000002CC   2A00               MOVS     R2,R5
   \   000002CE   ........           BL       __aeabi_uwrite8
    362                                   CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??RF_ExecuteOrder_19:
   \   000002D2   0621               MOVS     R1,#+6
   \   000002D4   02A8               ADD      R0,SP,#+8
   \   000002D6   ........           BL       crc16
   \   000002DA   E080               STRH     R0,[R4, #+6]
    363                                   ByteToSend =8;
   \   000002DC   6846               MOV      R0,SP
   \   000002DE   0821               MOVS     R1,#+8
   \   000002E0   0171               STRB     R1,[R0, #+4]
   \   000002E2   DEE0               B        ??RF_ExecuteOrder_10
    364                                
    365                               }else{  //jezeli zapytanie rozg³one o trzeci modu³
    366                               
    367                                       while ((FoundNode==0xFF) && (NeuronsList[Nd].NeuronID!=BC_ID2) && (Nd<(NumberNeurons-1))) Nd++; 
   \                     ??RF_ExecuteOrder_20:
   \   000002E4   6D1C               ADDS     R5,R5,#+1
   \   000002E6   2D06               LSLS     R5,R5,#+24
   \   000002E8   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_18:
   \   000002EA   2C4F               LDR      R7,??RF_ExecuteOrder_1+0x2C  ;; NeuronsList
   \   000002EC   2800               MOVS     R0,R5
   \   000002EE   0C21               MOVS     R1,#+12
   \   000002F0   4843               MULS     R0,R1,R0
   \   000002F2   3818               ADDS     R0,R7,R0
   \   000002F4   0090               STR      R0,[SP, #+0]
   \   000002F6   4068               LDR      R0,[R0, #+4]
   \   000002F8   0599               LDR      R1,[SP, #+20]
   \   000002FA   8842               CMP      R0,R1
   \   000002FC   01D0               BEQ      ??RF_ExecuteOrder_21
   \   000002FE   222D               CMP      R5,#+34
   \   00000300   F0D3               BCC      ??RF_ExecuteOrder_20
    368                                         
    369                                       if (NeuronsList[Nd].NeuronID==CMD.BC_ID2 ) FoundNode=Nd;     
   \                     ??RF_ExecuteOrder_21:
   \   00000302   0AAA               ADD      R2,SP,#+40
   \   00000304   04B5               PUSH     {R2,LR}
   \   00000306   0AA8               ADD      R0,SP,#+40
   \   00000308   C01C               ADDS     R0,R0,#+3
   \   0000030A   ........           BL       __aeabi_uread8
   \   0000030E   009A               LDR      R2,[SP, #0]
   \   00000310   02B0               ADD      SP,SP,#+8
   \   00000312   03C2               STM      R2!,{R0,R1}
   \   00000314   0098               LDR      R0,[SP, #+0]
   \   00000316   4268               LDR      R2,[R0, #+4]
   \   00000318   0AA8               ADD      R0,SP,#+40
   \   0000031A   03C8               LDM      R0!,{R0,R1}
   \   0000031C   1549               LDR      R1,??RF_ExecuteOrder_1+0x4  ;; 0xfffff0
   \   0000031E   0140               ANDS     R1,R1,R0
   \   00000320   0809               LSRS     R0,R1,#+4
   \   00000322   8242               CMP      R2,R0
   \   00000324   01D1               BNE      ??RF_ExecuteOrder_22
    370                              
    371                        
    372                                       if (FoundNode==0xFF)//je¿eli nie znaleziono wêz³a to dodaj
   \   00000326   FF2D               CMP      R5,#+255
   \   00000328   3AD1               BNE      ??RF_ExecuteOrder_23
    373                                       {
    374                                           //znalezienie miejsca dla nowego wêz³a ---------------------------
    375                                           //char NewNode=NumberNeurons-1; 
    376                                           //while ((NewNode>0) && (NeuronsList[NewNode].NeuronID!=0)) {NewNode--;}
    377                  
    378                                           FoundNode=0;
   \                     ??RF_ExecuteOrder_22:
   \   0000032A   0025               MOVS     R5,#+0
   \   0000032C   02E0               B        ??RF_ExecuteOrder_24
    379                                           while ((NeuronsList[FoundNode].NeuronID!=0) && (FoundNode<NumberNeurons-1)) {FoundNode++;}
   \                     ??RF_ExecuteOrder_25:
   \   0000032E   6D1C               ADDS     R5,R5,#+1
   \   00000330   2D06               LSLS     R5,R5,#+24
   \   00000332   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_24:
   \   00000334   0C20               MOVS     R0,#+12
   \   00000336   6843               MULS     R0,R5,R0
   \   00000338   3818               ADDS     R0,R7,R0
   \   0000033A   4068               LDR      R0,[R0, #+4]
   \   0000033C   0028               CMP      R0,#+0
   \   0000033E   01D0               BEQ      ??RF_ExecuteOrder_26
   \   00000340   222D               CMP      R5,#+34
   \   00000342   F4D3               BCC      ??RF_ExecuteOrder_25
    380                                           
    381                                           if ((FoundNode>=NumberNeurons-1) || (NeuronsList[FoundNode].NeuronID!=0))  //je¿eli jest miejsce na dodanie nowego wêz³a
   \                     ??RF_ExecuteOrder_26:
   \   00000344   2800               MOVS     R0,R5
   \   00000346   2228               CMP      R0,#+34
   \   00000348   00D3               BCC      .+4
   \   0000034A   B7E0               B        ??RF_ExecuteOrder_27
   \   0000034C   0C21               MOVS     R1,#+12
   \   0000034E   4843               MULS     R0,R1,R0
   \   00000350   3818               ADDS     R0,R7,R0
   \   00000352   4168               LDR      R1,[R0, #+4]
   \   00000354   0029               CMP      R1,#+0
   \   00000356   00D0               BEQ      .+4
   \   00000358   B0E0               B        ??RF_ExecuteOrder_27
    382                                           {
    383                                             FoundNode=0xFF;
    384                                           }else{
    385                                             NeuronsList[FoundNode].NeuronID=BC_ID2;
   \   0000035A   0599               LDR      R1,[SP, #+20]
   \   0000035C   4160               STR      R1,[R0, #+4]
    386                                             NeuronsList[FoundNode].Bridge=1;
   \   0000035E   017A               LDRB     R1,[R0, #+8]
   \   00000360   1022               MOVS     R2,#+16
   \   00000362   0A43               ORRS     R2,R2,R1
   \   00000364   0272               STRB     R2,[R0, #+8]
    387                                             NeuronsList[FoundNode].NeuronType=NodeRF_Period;
   \   00000366   0521               MOVS     R1,#+5
   \   00000368   0170               STRB     R1,[R0, #+0]
    388                                             BridgeMode=1; 
   \   0000036A   0120               MOVS     R0,#+1
   \   0000036C   3071               STRB     R0,[R6, #+4]
   \   0000036E   77E0               B        ??RF_ExecuteOrder_28
   \                     ??RF_ExecuteOrder_1:
   \   00000370   ........           DC32     IndWys
   \   00000374   F0FFFF00           DC32     0xfffff0
   \   00000378   ........           DC32     RF_Status + 24
   \   0000037C   A2030000           DC32     0x3a2
   \   00000380   ........           DC32     MainStage
   \   00000384   ........           DC32     NeuronsList + 4
   \   00000388   ........           DC32     Busy_program
   \   0000038C   ........           DC32     g_NextTimeProgram
   \   00000390   ........           DC32     g_counter
   \   00000394   0000F0FF           DC32     0xfff00000
   \   00000398   FFFF0F00           DC32     0xfffff
   \   0000039C   ........           DC32     NeuronsList
    389                                           }
    390                                           FoundTask=0;
    391          
    392                                       }else{ //je¿eli wêze³ znaleziony
    393                     
    394                                          char i=0;
   \                     ??RF_ExecuteOrder_23:
   \   000003A0   0022               MOVS     R2,#+0
   \   000003A2   2B00               MOVS     R3,R5
   \   000003A4   0C20               MOVS     R0,#+12
   \   000003A6   5843               MULS     R0,R3,R0
   \   000003A8   3818               ADDS     R0,R7,R0
   \   000003AA   0090               STR      R0,[SP, #+0]
   \   000003AC   1800               MOVS     R0,R3
   \   000003AE   401C               ADDS     R0,R0,#+1
   \   000003B0   0690               STR      R0,[SP, #+24]
   \   000003B2   D049               LDR      R1,??RF_ExecuteOrder_29  ;; RF_TaskTab
    395                                          while ((i<RF_Tasks-1) && (FoundTask==0))
    396                                          {
    397                                             if ((RF_TaskTab[i].Node==FoundNode+1) && 
    398                                                 (RF_TaskTab[i].Command.ID==NeuronsList[FoundNode].NeuronID) &&
    399                                                 (RF_TaskTab[i].Command.Order==R_RegOrd) &&
    400                                                 (RF_TaskTab[i].Command.Auxi==BC_REG))
   \                     ??RF_ExecuteOrder_30:
   \   000003B4   D000               LSLS     R0,R2,#+3
   \   000003B6   0818               ADDS     R0,R1,R0
   \   000003B8   0678               LDRB     R6,[R0, #+0]
   \   000003BA   069F               LDR      R7,[SP, #+24]
   \   000003BC   BE42               CMP      R6,R7
   \   000003BE   12D1               BNE      ??RF_ExecuteOrder_31
   \   000003C0   4068               LDR      R0,[R0, #+4]
   \   000003C2   0603               LSLS     R6,R0,#+12
   \   000003C4   360B               LSRS     R6,R6,#+12
   \   000003C6   009F               LDR      R7,[SP, #+0]
   \   000003C8   7F68               LDR      R7,[R7, #+4]
   \   000003CA   BE42               CMP      R6,R7
   \   000003CC   0BD1               BNE      ??RF_ExecuteOrder_31
   \   000003CE   F026               MOVS     R6,#+240
   \   000003D0   3604               LSLS     R6,R6,#+16       ;; #+15728640
   \   000003D2   0640               ANDS     R6,R6,R0
   \   000003D4   360D               LSRS     R6,R6,#+20
   \   000003D6   012E               CMP      R6,#+1
   \   000003D8   05D1               BNE      ??RF_ExecuteOrder_31
   \   000003DA   000E               LSRS     R0,R0,#+24
   \   000003DC   079E               LDR      R6,[SP, #+28]
   \   000003DE   B042               CMP      R0,R6
   \   000003E0   01D1               BNE      ??RF_ExecuteOrder_31
    401                                                {
    402                                                  FoundTask=1;
   \   000003E2   0120               MOVS     R0,#+1
   \   000003E4   0490               STR      R0,[SP, #+16]
    403                                                }
    404                                            
    405                                             i++;
   \                     ??RF_ExecuteOrder_31:
   \   000003E6   521C               ADDS     R2,R2,#+1
    406                                          }
   \   000003E8   1006               LSLS     R0,R2,#+24
   \   000003EA   000E               LSRS     R0,R0,#+24
   \   000003EC   4528               CMP      R0,#+69
   \   000003EE   02D2               BCS      ??RF_ExecuteOrder_32
   \   000003F0   0498               LDR      R0,[SP, #+16]
   \   000003F2   0006               LSLS     R0,R0,#+24
   \   000003F4   DED0               BEQ      ??RF_ExecuteOrder_30
    407                                          
    408                                          
    409                                          
    410                                          if ((FoundTask) && (TransQuality.Mensur[FoundNode]))
   \                     ??RF_ExecuteOrder_32:
   \   000003F6   0498               LDR      R0,[SP, #+16]
   \   000003F8   0006               LSLS     R0,R0,#+24
   \   000003FA   2ED0               BEQ      ??RF_ExecuteOrder_33
   \   000003FC   9800               LSLS     R0,R3,#+2
   \   000003FE   BE49               LDR      R1,??RF_ExecuteOrder_29+0x4  ;; TransQuality
   \   00000400   0818               ADDS     R0,R1,R0
   \   00000402   C06C               LDR      R0,[R0, #+76]
   \   00000404   0028               CMP      R0,#+0
   \   00000406   28D0               BEQ      ??RF_ExecuteOrder_33
    411                                           {
    412                                            //odpowied ------
    413                                             CommandToSend.Order= RW_BC_Res;
   \   00000408   2000               MOVS     R0,R4
   \   0000040A   801C               ADDS     R0,R0,#+2
   \   0000040C   ........           BL       __aeabi_uread4
   \   00000410   0200               MOVS     R2,R0
   \   00000412   2100               MOVS     R1,R4
   \   00000414   891C               ADDS     R1,R1,#+2
   \   00000416   F020               MOVS     R0,#+240
   \   00000418   1043               ORRS     R0,R0,R2
   \   0000041A   ........           BL       __aeabi_uwrite4
    414                                             CommandToSend.BC_ID2=BC_ID2; 
   \   0000041E   2000               MOVS     R0,R4
   \   00000420   C01C               ADDS     R0,R0,#+3
   \   00000422   ........           BL       __aeabi_uread8
   \   00000426   2200               MOVS     R2,R4
   \   00000428   D21C               ADDS     R2,R2,#+3
   \   0000042A   9446               MOV      R12,R2
   \   0000042C   0200               MOVS     R2,R0
   \   0000042E   0B00               MOVS     R3,R1
   \   00000430   B248               LDR      R0,??RF_ExecuteOrder_29+0x8  ;; 0xff00000f
   \   00000432   1040               ANDS     R0,R0,R2
   \   00000434   0600               MOVS     R6,R0
   \   00000436   059A               LDR      R2,[SP, #+20]
   \   00000438   1201               LSLS     R2,R2,#+4
   \   0000043A   B148               LDR      R0,??RF_ExecuteOrder_29+0xC  ;; 0xfffff0
   \   0000043C   0021               MOVS     R1,#+0
   \   0000043E   1040               ANDS     R0,R0,R2
   \   00000440   3043               ORRS     R0,R0,R6
   \   00000442   1943               ORRS     R1,R1,R3
   \   00000444   6246               MOV      R2,R12
   \   00000446   ........           BL       __aeabi_uwrite8
    415                                             CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000044A   0621               MOVS     R1,#+6
   \   0000044C   02A8               ADD      R0,SP,#+8
   \   0000044E   ........           BL       crc16
   \   00000452   E080               STRH     R0,[R4, #+6]
    416                                             ByteToSend =8;
   \   00000454   6846               MOV      R0,SP
   \   00000456   0821               MOVS     R1,#+8
   \   00000458   0171               STRB     R1,[R0, #+4]
    417                                           } 
    418                                         
    419                                        
    420                                       }  
    421                                       
    422                                       
    423                                       if ((FoundTask==0) && (FoundNode!=0xFF))
   \                     ??RF_ExecuteOrder_33:
   \   0000045A   0498               LDR      R0,[SP, #+16]
   \   0000045C   0006               LSLS     R0,R0,#+24
   \   0000045E   1CD1               BNE      ??RF_ExecuteOrder_3
   \                     ??RF_ExecuteOrder_28:
   \   00000460   FF2D               CMP      R5,#+255
   \   00000462   1AD0               BEQ      ??RF_ExecuteOrder_3
    424                                       if (AddRfTask(R_RegOrd, FoundNode+1, BC_REG)==0)  //je¿eli nie uda³o siê dodaæ zadania to usuñ wszystkie lady po tym wêle
                                                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000464   079A               LDR      R2,[SP, #+28]
   \   00000466   1206               LSLS     R2,R2,#+24
   \   00000468   120E               LSRS     R2,R2,#+24
   \   0000046A   2900               MOVS     R1,R5
   \   0000046C   491C               ADDS     R1,R1,#+1
   \   0000046E   0906               LSLS     R1,R1,#+24
   \   00000470   090E               LSRS     R1,R1,#+24
   \   00000472   0120               MOVS     R0,#+1
   \   00000474   ........           BL       AddRfTask
   \   00000478   0028               CMP      R0,#+0
   \   0000047A   23D1               BNE      ??RF_ExecuteOrder_34
    425                                           {
    426                                             RemoveRfNodeAllTaska(FoundNode);
                                                    ^
Warning[Pe223]: function "RemoveRfNodeAllTaska" declared implicitly
   \                     ??RF_ExecuteOrder_35:
   \   0000047C   2800               MOVS     R0,R5
   \   0000047E   ........           BL       RemoveRfNodeAllTaska
    427                                             NeuronsList[FoundNode].NeuronID=0;
   \   00000482   A04F               LDR      R7,??RF_ExecuteOrder_29+0x10  ;; NeuronsList
   \   00000484   0C20               MOVS     R0,#+12
   \   00000486   4543               MULS     R5,R0,R5
   \   00000488   7819               ADDS     R0,R7,R5
   \   0000048A   0021               MOVS     R1,#+0
   \   0000048C   4160               STR      R1,[R0, #+4]
    428                                             NeuronsList[FoundNode].Bridge=0;
   \   0000048E   017A               LDRB     R1,[R0, #+8]
   \   00000490   EF22               MOVS     R2,#+239
   \   00000492   0A40               ANDS     R2,R2,R1
   \   00000494   0272               STRB     R2,[R0, #+8]
    429                                             NeuronsList[FoundNode].NeuronType=0;
                                                                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000496   0021               MOVS     R1,#+0
   \                     ??RF_ExecuteOrder_36:
   \   00000498   0170               STRB     R1,[R0, #+0]
    430                                           }else{
    431                                             RF_Status.TimeToRemBridgeNoCom= MAX_TIME_TO_REM_BRIDGE_NO_CON;
    432                                           }
    433                                      
    434          
    435                               
    436                              } //koniec zapytania rozg³onego o trzeci modu³
    437                            
    438                         
    439                               //AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
    440          
    441                               
    442                         break;   
    443          
    444                           
    445                        case W_BC_Order :  //Odpowied na pytanie kto ma wêze³ (+ dodanie zadania odpytania)
    446                               //wykonanie ------
    447                               //CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
    448                       
    449                               
    450                              Nd=0;
    451                               FoundNode=0xFF;
    452                               FoundTask=0;
    453                          
    454                        
    455                               if (BC_ID2==RF_Status.RF_ID) //jezeli zapytanie rozg³one o mnie 
    456                               {
    457          
    458                                   CommandToSend.Order= RW_BC_Res;
    459                                   CommandToSend.BC_ID1=RF_Status.RF_ID; 
    460                                   CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    461                                   ByteToSend =8;
    462                                
    463                               }else{  //jezeli zapytanie rozg³one o trzeci modu³
    464                               
    465                                       while ((FoundNode==0xFF) && (NeuronsList[Nd].NeuronID!=BC_ID2) && (Nd<(NumberNeurons-1))) Nd++; 
    466                                         
    467                                       if (NeuronsList[Nd].NeuronID==CMD.BC_ID2 ) FoundNode=Nd;     
    468                              
    469                        
    470                                       if (FoundNode==0xFF)//je¿eli nie znaleziono wêz³a to dodaj
    471                                       {
    472                                           //znalezienie miejsca dla nowego wêz³a ---------------------------
    473                                           //char NewNode=NumberNeurons-1; 
    474                                           //while ((NewNode>0) && (NeuronsList[NewNode].NeuronID!=0)) {NewNode--;}
    475                  
    476                                           FoundNode=0;
    477                                           while ((NeuronsList[FoundNode].NeuronID!=0) && (FoundNode<NumberNeurons-1)) {FoundNode++;}
    478                                           
    479                                           if ((FoundNode>=NumberNeurons-1) || (NeuronsList[FoundNode].NeuronID!=0))  //je¿eli jest miejsce na dodanie nowego wêz³a
    480                                           {
    481                                             FoundNode=0xFF;
    482                                           }else{
    483                                             NeuronsList[FoundNode].NeuronID=BC_ID2;
    484                                             NeuronsList[FoundNode].Bridge=1;
    485                                             NeuronsList[FoundNode].NeuronType=NodeRF_Period;
    486                                             BridgeMode=1; 
    487                                           }
    488                                           FoundTask=0;
    489          
    490                                       }else{ //je¿eli wêze³ znaleziony
    491                     
    492                                          char i=0;
    493                                          while ((i<RF_Tasks-1) && (FoundTask==0))
    494                                          {
    495                                             if ((RF_TaskTab[i].Node==FoundNode+1) && 
    496                                                 (RF_TaskTab[i].Command.ID==NeuronsList[FoundNode].NeuronID) &&
    497                                                 (RF_TaskTab[i].Command.Order==W_RegOrd) &&
    498                                                 (RF_TaskTab[i].Command.Auxi==BC_REG))
    499                                                {
    500                                                  FoundTask=1;
    501                                                }
    502                                            
    503                                             i++;
    504                                          }
    505                                          
    506                                          
    507                                          
    508                                          if ((FoundTask) && (TransQuality.Mensur[FoundNode]))
    509                                           {
    510                                            //odpowied ------
    511                                             CommandToSend.Order= RW_BC_Res;
    512                                             CommandToSend.BC_ID2=BC_ID2; 
    513                                             CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    514                                             ByteToSend =8;
    515                                           } 
    516                                         
    517                                        
    518                                       }  
    519                                       
    520                                       
    521                                       if ((FoundTask==0) && (FoundNode!=0xFF))
    522                                       if (AddRfTask(W_RegOrd, FoundNode+1, BC_REG)==0)  //je¿eli nie uda³o siê dodaæ zadania to usuñ wszystkie lady po tym wêle
                                                            ^
Warning[Pe188]: enumerated type mixed with another type
    523                                           {
    524                                             RemoveRfNodeAllTaska(FoundNode);
                                                    ^
Warning[Pe223]: function "RemoveRfNodeAllTaska" declared implicitly
    525                                             NeuronsList[FoundNode].NeuronID=0;
    526                                             NeuronsList[FoundNode].Bridge=0;
    527                                             NeuronsList[FoundNode].NeuronType=0;
                                                                                     ^
Warning[Pe188]: enumerated type mixed with another type
    528                                           }
    529                                      
    530          
    531                               
    532                              } //koniec zapytania rozg³onego o trzeci modu³
    533                            
    534                           
    535                         break;
    536                         
    537          
    538                               
    539                      case W_NewIdOrd :  //zapis noweg ID
    540                               //wykonanie ------
    541                              // NODE_ID=Command->CHID_NEW_ID; 
    542                                 
    543                               //CommandToSend.CHID_CUR_ID=RF_Status.RF_ID;
    544          
    545                               RF_Status.RF_ID=Command->CHID_NEW_ID;//skrócone id
    546                               RF_Status.RF_ID_R=3000000+Command->CHID_NEW_ID;//pe³ne id
    547          
    548                               
    549                               unsigned int Save = __get_interrupt_state();            
    550                               __disable_interrupt();
    551                               FlashWrite((char*)(&(AT91C_IFLASH_MEM->NODE_ID)), (char*)&RF_Status.RF_ID_R,sizeof(RF_Status.RF_ID_R)); //(char *ptrMem, char *value, int length)
                                      ^
Warning[Pe223]: function "FlashWrite" declared implicitly
    552                               __set_interrupt_state(Save);
    553                               __enable_interrupt();  
    554                                 
    555                               
    556                               
    557                               //odpowied ------
    558                               CommandToSend.Order  = W_NewIdRes;
    559                               CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

      switch (Order)
      ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 - 04.06.2013\Framework\RF_Exe.c",282  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "Save" (declared at line 549 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.3 -
                      04.06.2013\Framework\RF_Exe.c")
    560                               ByteToSend =8;
    561                       break;
    562                         
    563                         
    564          
    565                         
    566                         
    567                         
    568          //***********************************************************************************************                 
    569           //Odpowiedzi rozkazów od slave do sterownika ------------------------------------------------------------   
    570          //***********************************************************************************************
    571                         
    572                         
    573                         
    574                         
    575                      case R_RegRes :  //Odczyt pojedyñczego rejestru - odp
    576                               //wykonanie ------
    577                               //CommandToSend.B8.Val  =  0xCC;                            // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  0xCC)
    578          
    579          #ifdef _LIVE_RJESTR  
    580                             LIVE_TAB[LIVE_TAB_IDX]=0xB000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((Command->B8.Val)&0xFF);
    581                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    582          #endif              
    583                        
    584                              //przypieszenie wykonania programu
    585                              if ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]!=Command->B8.Val) && (Busy_program==0))
    586                              {   
    587                                g_NextTimeProgram=g_counter+1;
    588                                
    589                           
    590                                //sygna³ dzwiêkowy je¿eli odczytano zmianê stanu na 1
    591                            /*    
    592                                 if ((Command->B8.Val>MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType==NodeRF_Remote) && (!(AT91C_IFLASH_MEM->Config.SoundOff)))
    593                                 {
    594                                    AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    595                                    ButtonBipCounter=g_counter+1;
    596                                 }
    597                             */
    598                                
    599                                
    600                                  #ifdef _LIVE_RJESTR    
    601                                      LIVE_TAB[LIVE_TAB_IDX]=0xFFFF;
    602                                    if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    603                                #endif   
    604                              
    605                              }
    606          
    607                              MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]=Command->B8.Val; 
    608                              
    609                              
    610                              #ifdef  DIRECT_Q_MESURE
    611                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    612                               #endif
    613                              
    614                   
    615                               TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
    616                               TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
    617                               TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
    618                                
    619                               
    620                               if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
    621                                {
    622                                    RF_NodeTest.Recived++; 
    623                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
    624                                }
    625                               
    626                               NextModule=1;
    627                               
    628                               
    629                              // //Reakcja na rz¹danie linku
    630                              // NeuronsList[RF_TaskTab[RF_CurrentTask].Node].Link
    631                               
    632                               
    633                           break;
    634                           
    635                      case W_RegRes :  //Zapis pojedyñczego rejestru  -odp
    636                               //wykonanie ------
    637                        
    638                             
    639                                 MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]=0;
    640                                 RF_SpecialTask=-1;
    641                             
    642                                if (RF_TaskTab[RF_CurrentTask].Node-1<=NumberNeurons)
    643                                {
    644                                    TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
    645                                    TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
    646                                    TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
    647                                }
    648                                
    649                                if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
    650                                {
    651                                    RF_NodeTest.Recived++;
    652                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
    653                                }
    654                                
    655                                    
    656                            //   g_RF_TimeOutCounter=0;
    657                               
    658                               NextModule=1;
    659                            #ifdef _LIVE_RJESTR            
    660                               LIVE_TAB[LIVE_TAB_IDX]=0xD000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | 0xFF;
    661                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    662                            #endif   
    663                             
    664                             
    665                             #ifdef  DIRECT_Q_MESURE
    666                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    667                               #endif
    668                             /*
    669                             if (RF_TaskTab[RF_CurrentTask].Node==6)
    670                             {
    671                                AT91C_BASE_PIOA->PIO_CODR =SpeakerPin; 
    672                                Delay(0xFFF);
    673                                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    674                             }
    675                             */
    676                         break;
    677                         
    678                         
    679                         
    680                         
    681                         case R_Iam :  //odpowied z ramki rozg³onej 
    682               
    683                              //Uwaga!!! ramka nie jest obs³ugiwana
    684                              
    685                              #ifdef  DIRECT_Q_MESURE
    686                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    687                               #endif
    688                   
    689                               TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
    690                               TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
    691                               TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
    692                                
    693                               
    694                               if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
    695                                {
    696                                    RF_NodeTest.Recived++; 
    697                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
    698                                }
    699                               
    700                               NextModule=1;
    701                         break;  
    702                         
    703                         
    704                        case W_NewIdRes :  //odpowied/potwierdzenie nadania nowego ID
    705                               
    706                              TransQuality.Mensur[0]=0;
    707                              TransQuality.QuickMensur[0]=0;
    708                              TransQuality.SlowMensur[0]=0; 
    709                               //wyczyæ zadania
    710                               for (char i=0; i<RF_Tasks-1; i++) 
    711                               {
    712                                  if(RF_TaskTab[i].Command.Order==W_NewIdOrd)
    713                                  {
    714                                   RemoveRfTask(i);  
    715                                  }
    716                               }
    717                         
    718                               
    719                               NextModule=1;
    720                         break;  
    721          
    722                         
    723              
    724                         case RW_BC_Res :  //Odpowied na ramkê rozg³on¹ "Kto ma wêze³"
    725                        
    726                                NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].IndirectCon=1;
    727                                AddRfTask_RemoveSearchNodeTask(RF_TaskTab[RF_CurrentTask].Node);  
    728                               
    729                                
    730                         break;
    731                         
    732                         
    733                         
    734                         
    735                         
    736                         
    737                
    738              }
    739              
    740                       
    741                      //Wylij odpowied
    742                      if (ByteToSend)
   \                     ??RF_ExecuteOrder_3:
   \   0000049A   6846               MOV      R0,SP
   \   0000049C   0079               LDRB     R0,[R0, #+4]
   \   0000049E   0028               CMP      R0,#+0
   \   000004A0   0CD0               BEQ      ??RF_ExecuteOrder_27
    743                      {
    744                          RF_Status.EnableTX();
   \                     ??RF_ExecuteOrder_10:
   \   000004A2   9948               LDR      R0,??RF_ExecuteOrder_29+0x14  ;; RF_Status + 36
   \   000004A4   0068               LDR      R0,[R0, #+0]
   \   000004A6   ........           BL       __iar_via_R0
    745                           RF_SendData(CommandToSend.Streem, ByteToSend);
                                              ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

     char* pNODE_ID=(char*)&NODE_ID;
           ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 - 04.06.2013\Framework\RF_Exe.c",271  Warning[Pe177]: 
          variable "pNODE_ID" was declared but never referenced
   \   000004AA   6846               MOV      R0,SP
   \   000004AC   0179               LDRB     R1,[R0, #+4]
   \   000004AE   02A8               ADD      R0,SP,#+8
   \   000004B0   ........           BL       RF_SendFarm
    746                          RF_Status.EnableRX();
   \   000004B4   9548               LDR      R0,??RF_ExecuteOrder_29+0x18  ;; RF_Status + 40
   \   000004B6   0068               LDR      R0,[R0, #+0]
   \   000004B8   ........           BL       __iar_via_R0
    747                         
    748                      }           
    749             
    750                      //odpytaj kolejny modu³
    751                      if (NextModule)
    752                      {
    753                         g_RF_TimeOutCounter=RF_TimeOut; 
    754                         RF_MasterExecut();
    755                        /*
    756                        if (RF_Status.MasterMode)
    757                          {
    758                            //if ((!SlaveMode) && (g_Stop_Program==0))
    759                            if (g_RF_TimeOutCounter>0)
    760                            {
    761                            }else{
    762                               CyklPerSekCount++;
    763                               g_RF_TimeOutCounter=RF_TimeOut; 
    764                               RF_MasterExecut();
    765                        
    766                            }
    767                          }
    768                        */
    769                      }
    770            
    771            
    772          }
   \                     ??RF_ExecuteOrder_27:
   \   000004BC   0DB0               ADD      SP,SP,#+52
   \   000004BE   F0BC               POP      {R4-R7}
   \   000004C0   01BC               POP      {R0}
   \   000004C2   0047               BX       R0               ;; return
   \                     ??RF_ExecuteOrder_34:
   \   000004C4   9248               LDR      R0,??RF_ExecuteOrder_29+0x1C  ;; RF_Status + 18
   \   000004C6   1E21               MOVS     R1,#+30
   \   000004C8   E6E7               B.N      ??RF_ExecuteOrder_36
   \                     ??RF_ExecuteOrder_37:
   \   000004CA   0025               MOVS     R5,#+0
   \   000004CC   0495               STR      R5,[SP, #+16]
   \   000004CE   0598               LDR      R0,[SP, #+20]
   \   000004D0   9049               LDR      R1,??RF_ExecuteOrder_29+0x20  ;; RF_Status + 24
   \   000004D2   0968               LDR      R1,[R1, #+0]
   \   000004D4   8842               CMP      R0,R1
   \   000004D6   29D1               BNE      ??RF_ExecuteOrder_38
   \   000004D8   2000               MOVS     R0,R4
   \   000004DA   801C               ADDS     R0,R0,#+2
   \   000004DC   ........           BL       __aeabi_uread4
   \   000004E0   0200               MOVS     R2,R0
   \   000004E2   2100               MOVS     R1,R4
   \   000004E4   891C               ADDS     R1,R1,#+2
   \   000004E6   F020               MOVS     R0,#+240
   \   000004E8   1043               ORRS     R0,R0,R2
   \   000004EA   ........           BL       __aeabi_uwrite4
   \   000004EE   02A8               ADD      R0,SP,#+8
   \   000004F0   ........           BL       __aeabi_uread8
   \   000004F4   02AA               ADD      R2,SP,#+8
   \   000004F6   1500               MOVS     R5,R2
   \   000004F8   874E               LDR      R6,??RF_ExecuteOrder_29+0x24  ;; 0xfff00000
   \   000004FA   0027               MOVS     R7,#+0
   \   000004FC   FF43               MVNS     R7,R7            ;; #-1
   \   000004FE   0640               ANDS     R6,R6,R0
   \   00000500   0F40               ANDS     R7,R7,R1
   \   00000502   8448               LDR      R0,??RF_ExecuteOrder_29+0x20  ;; RF_Status + 24
   \   00000504   0268               LDR      R2,[R0, #+0]
   \   00000506   8548               LDR      R0,??RF_ExecuteOrder_29+0x28  ;; 0xfffff
   \   00000508   0021               MOVS     R1,#+0
   \   0000050A   1040               ANDS     R0,R0,R2
   \   0000050C   3043               ORRS     R0,R0,R6
   \   0000050E   3943               ORRS     R1,R1,R7
   \   00000510   2A00               MOVS     R2,R5
   \   00000512   ........           BL       __aeabi_uwrite8
   \   00000516   0621               MOVS     R1,#+6
   \   00000518   02A8               ADD      R0,SP,#+8
   \   0000051A   ........           BL       crc16
   \   0000051E   E080               STRH     R0,[R4, #+6]
   \   00000520   6846               MOV      R0,SP
   \   00000522   0821               MOVS     R1,#+8
   \   00000524   26E6               B.N      ??RF_ExecuteOrder_9
   \                     ??RF_ExecuteOrder_39:
   \   00000526   6D1C               ADDS     R5,R5,#+1
   \   00000528   2D06               LSLS     R5,R5,#+24
   \   0000052A   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_38:
   \   0000052C   754F               LDR      R7,??RF_ExecuteOrder_29+0x10  ;; NeuronsList
   \   0000052E   2800               MOVS     R0,R5
   \   00000530   0C21               MOVS     R1,#+12
   \   00000532   4843               MULS     R0,R1,R0
   \   00000534   3818               ADDS     R0,R7,R0
   \   00000536   0090               STR      R0,[SP, #+0]
   \   00000538   4068               LDR      R0,[R0, #+4]
   \   0000053A   0599               LDR      R1,[SP, #+20]
   \   0000053C   8842               CMP      R0,R1
   \   0000053E   01D0               BEQ      ??RF_ExecuteOrder_40
   \   00000540   222D               CMP      R5,#+34
   \   00000542   F0D3               BCC      ??RF_ExecuteOrder_39
   \                     ??RF_ExecuteOrder_40:
   \   00000544   0AAA               ADD      R2,SP,#+40
   \   00000546   04B5               PUSH     {R2,LR}
   \   00000548   0AA8               ADD      R0,SP,#+40
   \   0000054A   C01C               ADDS     R0,R0,#+3
   \   0000054C   ........           BL       __aeabi_uread8
   \   00000550   009A               LDR      R2,[SP, #0]
   \   00000552   02B0               ADD      SP,SP,#+8
   \   00000554   03C2               STM      R2!,{R0,R1}
   \   00000556   0098               LDR      R0,[SP, #+0]
   \   00000558   4268               LDR      R2,[R0, #+4]
   \   0000055A   0AA8               ADD      R0,SP,#+40
   \   0000055C   03C8               LDM      R0!,{R0,R1}
   \   0000055E   6849               LDR      R1,??RF_ExecuteOrder_29+0xC  ;; 0xfffff0
   \   00000560   0140               ANDS     R1,R1,R0
   \   00000562   0809               LSRS     R0,R1,#+4
   \   00000564   8242               CMP      R2,R0
   \   00000566   01D1               BNE      ??RF_ExecuteOrder_41
   \   00000568   FF2D               CMP      R5,#+255
   \   0000056A   20D1               BNE      ??RF_ExecuteOrder_42
   \                     ??RF_ExecuteOrder_41:
   \   0000056C   0025               MOVS     R5,#+0
   \   0000056E   02E0               B        ??RF_ExecuteOrder_43
   \                     ??RF_ExecuteOrder_44:
   \   00000570   6D1C               ADDS     R5,R5,#+1
   \   00000572   2D06               LSLS     R5,R5,#+24
   \   00000574   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_43:
   \   00000576   0C20               MOVS     R0,#+12
   \   00000578   6843               MULS     R0,R5,R0
   \   0000057A   3818               ADDS     R0,R7,R0
   \   0000057C   4068               LDR      R0,[R0, #+4]
   \   0000057E   0028               CMP      R0,#+0
   \   00000580   01D0               BEQ      ??RF_ExecuteOrder_45
   \   00000582   222D               CMP      R5,#+34
   \   00000584   F4D3               BCC      ??RF_ExecuteOrder_44
   \                     ??RF_ExecuteOrder_45:
   \   00000586   2800               MOVS     R0,R5
   \   00000588   2228               CMP      R0,#+34
   \   0000058A   97D2               BCS      ??RF_ExecuteOrder_27
   \   0000058C   0C21               MOVS     R1,#+12
   \   0000058E   4843               MULS     R0,R1,R0
   \   00000590   3818               ADDS     R0,R7,R0
   \   00000592   4168               LDR      R1,[R0, #+4]
   \   00000594   0029               CMP      R1,#+0
   \   00000596   91D1               BNE      ??RF_ExecuteOrder_27
   \   00000598   0599               LDR      R1,[SP, #+20]
   \   0000059A   4160               STR      R1,[R0, #+4]
   \   0000059C   017A               LDRB     R1,[R0, #+8]
   \   0000059E   1022               MOVS     R2,#+16
   \   000005A0   0A43               ORRS     R2,R2,R1
   \   000005A2   0272               STRB     R2,[R0, #+8]
   \   000005A4   0521               MOVS     R1,#+5
   \   000005A6   0170               STRB     R1,[R0, #+0]
   \   000005A8   0120               MOVS     R0,#+1
   \   000005AA   3071               STRB     R0,[R6, #+4]
   \   000005AC   60E0               B        ??RF_ExecuteOrder_46
   \                     ??RF_ExecuteOrder_42:
   \   000005AE   0022               MOVS     R2,#+0
   \   000005B0   2B00               MOVS     R3,R5
   \   000005B2   0C20               MOVS     R0,#+12
   \   000005B4   5843               MULS     R0,R3,R0
   \   000005B6   3818               ADDS     R0,R7,R0
   \   000005B8   0090               STR      R0,[SP, #+0]
   \   000005BA   1800               MOVS     R0,R3
   \   000005BC   401C               ADDS     R0,R0,#+1
   \   000005BE   0690               STR      R0,[SP, #+24]
   \   000005C0   4C49               LDR      R1,??RF_ExecuteOrder_29  ;; RF_TaskTab
   \                     ??RF_ExecuteOrder_47:
   \   000005C2   D000               LSLS     R0,R2,#+3
   \   000005C4   0818               ADDS     R0,R1,R0
   \   000005C6   0678               LDRB     R6,[R0, #+0]
   \   000005C8   069F               LDR      R7,[SP, #+24]
   \   000005CA   BE42               CMP      R6,R7
   \   000005CC   12D1               BNE      ??RF_ExecuteOrder_48
   \   000005CE   4068               LDR      R0,[R0, #+4]
   \   000005D0   0603               LSLS     R6,R0,#+12
   \   000005D2   360B               LSRS     R6,R6,#+12
   \   000005D4   009F               LDR      R7,[SP, #+0]
   \   000005D6   7F68               LDR      R7,[R7, #+4]
   \   000005D8   BE42               CMP      R6,R7
   \   000005DA   0BD1               BNE      ??RF_ExecuteOrder_48
   \   000005DC   F026               MOVS     R6,#+240
   \   000005DE   3604               LSLS     R6,R6,#+16       ;; #+15728640
   \   000005E0   0640               ANDS     R6,R6,R0
   \   000005E2   360D               LSRS     R6,R6,#+20
   \   000005E4   022E               CMP      R6,#+2
   \   000005E6   05D1               BNE      ??RF_ExecuteOrder_48
   \   000005E8   000E               LSRS     R0,R0,#+24
   \   000005EA   079E               LDR      R6,[SP, #+28]
   \   000005EC   B042               CMP      R0,R6
   \   000005EE   01D1               BNE      ??RF_ExecuteOrder_48
   \   000005F0   0120               MOVS     R0,#+1
   \   000005F2   0490               STR      R0,[SP, #+16]
   \                     ??RF_ExecuteOrder_48:
   \   000005F4   521C               ADDS     R2,R2,#+1
   \   000005F6   1006               LSLS     R0,R2,#+24
   \   000005F8   000E               LSRS     R0,R0,#+24
   \   000005FA   4528               CMP      R0,#+69
   \   000005FC   02D2               BCS      ??RF_ExecuteOrder_49
   \   000005FE   0498               LDR      R0,[SP, #+16]
   \   00000600   0006               LSLS     R0,R0,#+24
   \   00000602   DED0               BEQ      ??RF_ExecuteOrder_47
   \                     ??RF_ExecuteOrder_49:
   \   00000604   0498               LDR      R0,[SP, #+16]
   \   00000606   0006               LSLS     R0,R0,#+24
   \   00000608   2ED0               BEQ      ??RF_ExecuteOrder_50
   \   0000060A   9800               LSLS     R0,R3,#+2
   \   0000060C   3A49               LDR      R1,??RF_ExecuteOrder_29+0x4  ;; TransQuality
   \   0000060E   0818               ADDS     R0,R1,R0
   \   00000610   C06C               LDR      R0,[R0, #+76]
   \   00000612   0028               CMP      R0,#+0
   \   00000614   28D0               BEQ      ??RF_ExecuteOrder_50
   \   00000616   2000               MOVS     R0,R4
   \   00000618   801C               ADDS     R0,R0,#+2
   \   0000061A   ........           BL       __aeabi_uread4
   \   0000061E   0200               MOVS     R2,R0
   \   00000620   2100               MOVS     R1,R4
   \   00000622   891C               ADDS     R1,R1,#+2
   \   00000624   F020               MOVS     R0,#+240
   \   00000626   1043               ORRS     R0,R0,R2
   \   00000628   ........           BL       __aeabi_uwrite4
   \   0000062C   2000               MOVS     R0,R4
   \   0000062E   C01C               ADDS     R0,R0,#+3
   \   00000630   ........           BL       __aeabi_uread8
   \   00000634   2200               MOVS     R2,R4
   \   00000636   D21C               ADDS     R2,R2,#+3
   \   00000638   9446               MOV      R12,R2
   \   0000063A   0200               MOVS     R2,R0
   \   0000063C   0B00               MOVS     R3,R1
   \   0000063E   2F48               LDR      R0,??RF_ExecuteOrder_29+0x8  ;; 0xff00000f
   \   00000640   1040               ANDS     R0,R0,R2
   \   00000642   0600               MOVS     R6,R0
   \   00000644   059A               LDR      R2,[SP, #+20]
   \   00000646   1201               LSLS     R2,R2,#+4
   \   00000648   2D48               LDR      R0,??RF_ExecuteOrder_29+0xC  ;; 0xfffff0
   \   0000064A   0021               MOVS     R1,#+0
   \   0000064C   1040               ANDS     R0,R0,R2
   \   0000064E   3043               ORRS     R0,R0,R6
   \   00000650   1943               ORRS     R1,R1,R3
   \   00000652   6246               MOV      R2,R12
   \   00000654   ........           BL       __aeabi_uwrite8
   \   00000658   0621               MOVS     R1,#+6
   \   0000065A   02A8               ADD      R0,SP,#+8
   \   0000065C   ........           BL       crc16
   \   00000660   E080               STRH     R0,[R4, #+6]
   \   00000662   6846               MOV      R0,SP
   \   00000664   0821               MOVS     R1,#+8
   \   00000666   0171               STRB     R1,[R0, #+4]
   \                     ??RF_ExecuteOrder_50:
   \   00000668   0498               LDR      R0,[SP, #+16]
   \   0000066A   0006               LSLS     R0,R0,#+24
   \   0000066C   00D0               BEQ      .+4
   \   0000066E   14E7               B        ??RF_ExecuteOrder_3
   \                     ??RF_ExecuteOrder_46:
   \   00000670   FF2D               CMP      R5,#+255
   \   00000672   00D1               BNE      .+4
   \   00000674   11E7               B        ??RF_ExecuteOrder_3
   \   00000676   079A               LDR      R2,[SP, #+28]
   \   00000678   1206               LSLS     R2,R2,#+24
   \   0000067A   120E               LSRS     R2,R2,#+24
   \   0000067C   2900               MOVS     R1,R5
   \   0000067E   491C               ADDS     R1,R1,#+1
   \   00000680   0906               LSLS     R1,R1,#+24
   \   00000682   090E               LSRS     R1,R1,#+24
   \   00000684   0220               MOVS     R0,#+2
   \   00000686   ........           BL       AddRfTask
   \   0000068A   0028               CMP      R0,#+0
   \   0000068C   00D0               BEQ      .+4
   \   0000068E   04E7               B        ??RF_ExecuteOrder_3
   \   00000690   F4E6               B        ??RF_ExecuteOrder_35
   \                     ??RF_ExecuteOrder_51:
   \   00000692   204D               LDR      R5,??RF_ExecuteOrder_29+0x20  ;; RF_Status + 24
   \   00000694   0C98               LDR      R0,[SP, #+48]
   \   00000696   C01C               ADDS     R0,R0,#+3
   \   00000698   ........           BL       __aeabi_uread8
   \   0000069C   1849               LDR      R1,??RF_ExecuteOrder_29+0xC  ;; 0xfffff0
   \   0000069E   0140               ANDS     R1,R1,R0
   \   000006A0   0809               LSRS     R0,R1,#+4
   \   000006A2   2860               STR      R0,[R5, #+0]
   \   000006A4   8E4D               LDR      R5,??RF_ExecuteOrder_52  ;; RF_Status + 28
   \   000006A6   0C98               LDR      R0,[SP, #+48]
   \   000006A8   C01C               ADDS     R0,R0,#+3
   \   000006AA   ........           BL       __aeabi_uread8
   \   000006AE   1449               LDR      R1,??RF_ExecuteOrder_29+0xC  ;; 0xfffff0
   \   000006B0   0140               ANDS     R1,R1,R0
   \   000006B2   0809               LSRS     R0,R1,#+4
   \   000006B4   8B49               LDR      R1,??RF_ExecuteOrder_52+0x4  ;; 0x2dc6c0
   \   000006B6   4018               ADDS     R0,R0,R1
   \   000006B8   2860               STR      R0,[R5, #+0]
   \   000006BA   ........           BL       __iar_get_interrupt_state
   \   000006BE   0500               MOVS     R5,R0
   \   000006C0   ........           BL       __iar_disable_interrupt
   \   000006C4   0422               MOVS     R2,#+4
   \   000006C6   8649               LDR      R1,??RF_ExecuteOrder_52  ;; RF_Status + 28
   \   000006C8   8748               LDR      R0,??RF_ExecuteOrder_52+0x8  ;; 0x13d95c
   \   000006CA   ........           BL       FlashWrite
   \   000006CE   2800               MOVS     R0,R5
   \   000006D0   ........           BL       __iar_set_interrupt_state
   \   000006D4   ........           BL       __iar_enable_interrupt
   \   000006D8   2000               MOVS     R0,R4
   \   000006DA   801C               ADDS     R0,R0,#+2
   \   000006DC   ........           BL       __aeabi_uread4
   \   000006E0   0200               MOVS     R2,R0
   \   000006E2   2100               MOVS     R1,R4
   \   000006E4   891C               ADDS     R1,R1,#+2
   \   000006E6   F020               MOVS     R0,#+240
   \   000006E8   8243               BICS     R2,R2,R0
   \   000006EA   D020               MOVS     R0,#+208
   \   000006EC   1043               ORRS     R0,R0,R2
   \   000006EE   ........           BL       __aeabi_uwrite4
   \   000006F2   EEE5               B.N      ??RF_ExecuteOrder_19
   \                     ??RF_ExecuteOrder_29:
   \   000006F4   ........           DC32     RF_TaskTab
   \   000006F8   ........           DC32     TransQuality
   \   000006FC   0F0000FF           DC32     0xff00000f
   \   00000700   F0FFFF00           DC32     0xfffff0
   \   00000704   ........           DC32     NeuronsList
   \   00000708   ........           DC32     RF_Status + 36
   \   0000070C   ........           DC32     RF_Status + 40
   \   00000710   ........           DC32     RF_Status + 18
   \   00000714   ........           DC32     RF_Status + 24
   \   00000718   0000F0FF           DC32     0xfff00000
   \   0000071C   FFFF0F00           DC32     0xfffff
   \                     ??RF_ExecuteOrder_53:
   \   00000720   7248               LDR      R0,??RF_ExecuteOrder_52+0xC  ;; MainStage
   \   00000722   7349               LDR      R1,??RF_ExecuteOrder_52+0x10  ;; RF_TaskTab
   \   00000724   0122               MOVS     R2,#+1
   \   00000726   B256               LDRSB    R2,[R6, R2]
   \   00000728   D200               LSLS     R2,R2,#+3
   \   0000072A   8A18               ADDS     R2,R1,R2
   \   0000072C   5268               LDR      R2,[R2, #+4]
   \   0000072E   120E               LSRS     R2,R2,#+24
   \   00000730   20D1               BNE      ??RF_ExecuteOrder_54
   \   00000732   0C9B               LDR      R3,[SP, #+48]
   \   00000734   1A79               LDRB     R2,[R3, #+4]
   \   00000736   5C79               LDRB     R4,[R3, #+5]
   \   00000738   2406               LSLS     R4,R4,#+24
   \   0000073A   240C               LSRS     R4,R4,#+16
   \   0000073C   2243               ORRS     R2,R2,R4
   \   0000073E   0123               MOVS     R3,#+1
   \   00000740   F356               LDRSB    R3,[R6, R3]
   \   00000742   DB00               LSLS     R3,R3,#+3
   \   00000744   CB18               ADDS     R3,R1,R3
   \   00000746   A024               MOVS     R4,#+160
   \   00000748   5D68               LDR      R5,[R3, #+4]
   \   0000074A   2D0E               LSRS     R5,R5,#+24
   \   0000074C   6D00               LSLS     R5,R5,#+1
   \   0000074E   1B78               LDRB     R3,[R3, #+0]
   \   00000750   1627               MOVS     R7,#+22
   \   00000752   7B43               MULS     R3,R7,R3
   \   00000754   C318               ADDS     R3,R0,R3
   \   00000756   5B19               ADDS     R3,R3,R5
   \   00000758   1B5F               LDRSH    R3,[R3, R4]
   \   0000075A   9342               CMP      R3,R2
   \   0000075C   0AD0               BEQ      ??RF_ExecuteOrder_54
   \   0000075E   654A               LDR      R2,??RF_ExecuteOrder_52+0x14  ;; Busy_program
   \   00000760   1278               LDRB     R2,[R2, #+0]
   \   00000762   002A               CMP      R2,#+0
   \   00000764   06D1               BNE      ??RF_ExecuteOrder_54
   \   00000766   644C               LDR      R4,??RF_ExecuteOrder_52+0x18  ;; g_NextTimeProgram
   \   00000768   644A               LDR      R2,??RF_ExecuteOrder_52+0x1C  ;; g_counter
   \   0000076A   0CCA               LDM      R2!,{R2,R3}
   \   0000076C   0025               MOVS     R5,#+0
   \   0000076E   521C               ADDS     R2,R2,#+1
   \   00000770   6B41               ADCS     R3,R3,R5
   \   00000772   0CC4               STM      R4!,{R2,R3}
   \                     ??RF_ExecuteOrder_54:
   \   00000774   0C9B               LDR      R3,[SP, #+48]
   \   00000776   1A79               LDRB     R2,[R3, #+4]
   \   00000778   5C79               LDRB     R4,[R3, #+5]
   \   0000077A   2406               LSLS     R4,R4,#+24
   \   0000077C   240C               LSRS     R4,R4,#+16
   \   0000077E   2243               ORRS     R2,R2,R4
   \   00000780   0123               MOVS     R3,#+1
   \   00000782   F356               LDRSB    R3,[R6, R3]
   \   00000784   DB00               LSLS     R3,R3,#+3
   \   00000786   C918               ADDS     R1,R1,R3
   \   00000788   4B68               LDR      R3,[R1, #+4]
   \   0000078A   1B0E               LSRS     R3,R3,#+24
   \   0000078C   5B00               LSLS     R3,R3,#+1
   \   0000078E   0C78               LDRB     R4,[R1, #+0]
   \   00000790   1625               MOVS     R5,#+22
   \   00000792   6C43               MULS     R4,R5,R4
   \   00000794   0019               ADDS     R0,R0,R4
   \   00000796   C018               ADDS     R0,R0,R3
   \   00000798   A030               ADDS     R0,R0,#+160
   \   0000079A   0280               STRH     R2,[R0, #+0]
   \   0000079C   0878               LDRB     R0,[R1, #+0]
   \   0000079E   5849               LDR      R1,??RF_ExecuteOrder_52+0x20  ;; TransQuality
   \   000007A0   8200               LSLS     R2,R0,#+2
   \   000007A2   8A18               ADDS     R2,R1,R2
   \   000007A4   936C               LDR      R3,[R2, #+72]
   \   000007A6   0124               MOVS     R4,#+1
   \   000007A8   0D78               LDRB     R5,[R1, #+0]
   \   000007AA   AC40               LSLS     R4,R4,R5
   \   000007AC   1C43               ORRS     R4,R4,R3
   \   000007AE   9464               STR      R4,[R2, #+72]
   \   000007B0   0A18               ADDS     R2,R1,R0
   \   000007B2   2523               MOVS     R3,#+37
   \   000007B4   D45C               LDRB     R4,[R2, R3]
   \   000007B6   0125               MOVS     R5,#+1
   \   000007B8   8F78               LDRB     R7,[R1, #+2]
   \   000007BA   BD40               LSLS     R5,R5,R7
   \   000007BC   2543               ORRS     R5,R5,R4
   \   000007BE   D554               STRB     R5,[R2, R3]
   \   000007C0   9378               LDRB     R3,[R2, #+2]
   \   000007C2   0124               MOVS     R4,#+1
   \   000007C4   4978               LDRB     R1,[R1, #+1]
   \   000007C6   8C40               LSLS     R4,R4,R1
   \   000007C8   1C43               ORRS     R4,R4,R3
   \   000007CA   9470               STRB     R4,[R2, #+2]
   \   000007CC   317A               LDRB     R1,[R6, #+8]
   \   000007CE   8142               CMP      R1,R0
   \   000007D0   06D1               BNE      ??RF_ExecuteOrder_55
   \                     ??RF_ExecuteOrder_56:
   \   000007D2   F068               LDR      R0,[R6, #+12]
   \   000007D4   0028               CMP      R0,#+0
   \   000007D6   03D0               BEQ      ??RF_ExecuteOrder_55
   \   000007D8   7169               LDR      R1,[R6, #+20]
   \   000007DA   491C               ADDS     R1,R1,#+1
   \   000007DC   7161               STR      R1,[R6, #+20]
   \   000007DE   3061               STR      R0,[R6, #+16]
   \                     ??RF_ExecuteOrder_55:
   \   000007E0   0920               MOVS     R0,#+9
   \   000007E2   F070               STRB     R0,[R6, #+3]
   \   000007E4   ........           BL       RF_MasterExecut
   \   000007E8   68E6               B        ??RF_ExecuteOrder_27
   \                     ??RF_ExecuteOrder_57:
   \   000007EA   4149               LDR      R1,??RF_ExecuteOrder_52+0x10  ;; RF_TaskTab
   \   000007EC   0120               MOVS     R0,#+1
   \   000007EE   3056               LDRSB    R0,[R6, R0]
   \   000007F0   C000               LSLS     R0,R0,#+3
   \   000007F2   0818               ADDS     R0,R1,R0
   \   000007F4   0078               LDRB     R0,[R0, #+0]
   \   000007F6   0200               MOVS     R2,R0
   \   000007F8   4249               LDR      R1,??RF_ExecuteOrder_52+0x24  ;; 0x6eb
   \   000007FA   3C4B               LDR      R3,??RF_ExecuteOrder_52+0xC  ;; MainStage
   \   000007FC   9B18               ADDS     R3,R3,R2
   \   000007FE   0024               MOVS     R4,#+0
   \   00000800   5C54               STRB     R4,[R3, R1]
   \   00000802   0021               MOVS     R1,#+0
   \   00000804   C943               MVNS     R1,R1            ;; #-1
   \   00000806   B170               STRB     R1,[R6, #+2]
   \   00000808   511E               SUBS     R1,R2,#+1
   \   0000080A   2429               CMP      R1,#+36
   \   0000080C   16DA               BGE      ??RF_ExecuteOrder_58
   \   0000080E   3C49               LDR      R1,??RF_ExecuteOrder_52+0x20  ;; TransQuality
   \   00000810   9300               LSLS     R3,R2,#+2
   \   00000812   CB18               ADDS     R3,R1,R3
   \   00000814   9C6C               LDR      R4,[R3, #+72]
   \   00000816   0125               MOVS     R5,#+1
   \   00000818   0F78               LDRB     R7,[R1, #+0]
   \   0000081A   BD40               LSLS     R5,R5,R7
   \   0000081C   2543               ORRS     R5,R5,R4
   \   0000081E   9D64               STR      R5,[R3, #+72]
   \   00000820   8A18               ADDS     R2,R1,R2
   \   00000822   2523               MOVS     R3,#+37
   \   00000824   D45C               LDRB     R4,[R2, R3]
   \   00000826   0125               MOVS     R5,#+1
   \   00000828   8F78               LDRB     R7,[R1, #+2]
   \   0000082A   BD40               LSLS     R5,R5,R7
   \   0000082C   2543               ORRS     R5,R5,R4
   \   0000082E   D554               STRB     R5,[R2, R3]
   \   00000830   9378               LDRB     R3,[R2, #+2]
   \   00000832   0124               MOVS     R4,#+1
   \   00000834   4978               LDRB     R1,[R1, #+1]
   \   00000836   8C40               LSLS     R4,R4,R1
   \   00000838   1C43               ORRS     R4,R4,R3
   \   0000083A   9470               STRB     R4,[R2, #+2]
   \                     ??RF_ExecuteOrder_58:
   \   0000083C   317A               LDRB     R1,[R6, #+8]
   \   0000083E   8142               CMP      R1,R0
   \   00000840   CED1               BNE      ??RF_ExecuteOrder_55
   \   00000842   C6E7               B        ??RF_ExecuteOrder_56
   \                     ??RF_ExecuteOrder_59:
   \   00000844   2A49               LDR      R1,??RF_ExecuteOrder_52+0x10  ;; RF_TaskTab
   \   00000846   0120               MOVS     R0,#+1
   \   00000848   3056               LDRSB    R0,[R6, R0]
   \   0000084A   C000               LSLS     R0,R0,#+3
   \   0000084C   0818               ADDS     R0,R1,R0
   \   0000084E   0078               LDRB     R0,[R0, #+0]
   \   00000850   0200               MOVS     R2,R0
   \   00000852   2B49               LDR      R1,??RF_ExecuteOrder_52+0x20  ;; TransQuality
   \   00000854   9300               LSLS     R3,R2,#+2
   \   00000856   CB18               ADDS     R3,R1,R3
   \   00000858   9C6C               LDR      R4,[R3, #+72]
   \   0000085A   0125               MOVS     R5,#+1
   \   0000085C   0F78               LDRB     R7,[R1, #+0]
   \   0000085E   BD40               LSLS     R5,R5,R7
   \   00000860   2543               ORRS     R5,R5,R4
   \   00000862   9D64               STR      R5,[R3, #+72]
   \   00000864   8A18               ADDS     R2,R1,R2
   \   00000866   2523               MOVS     R3,#+37
   \   00000868   D45C               LDRB     R4,[R2, R3]
   \   0000086A   0125               MOVS     R5,#+1
   \   0000086C   8F78               LDRB     R7,[R1, #+2]
   \   0000086E   BD40               LSLS     R5,R5,R7
   \   00000870   2543               ORRS     R5,R5,R4
   \   00000872   D554               STRB     R5,[R2, R3]
   \   00000874   9378               LDRB     R3,[R2, #+2]
   \   00000876   0124               MOVS     R4,#+1
   \   00000878   4978               LDRB     R1,[R1, #+1]
   \   0000087A   8C40               LSLS     R4,R4,R1
   \   0000087C   1C43               ORRS     R4,R4,R3
   \   0000087E   9470               STRB     R4,[R2, #+2]
   \   00000880   DCE7               B.N      ??RF_ExecuteOrder_58
   \                     ??RF_ExecuteOrder_60:
   \   00000882   1F49               LDR      R1,??RF_ExecuteOrder_52+0x20  ;; TransQuality
   \   00000884   0020               MOVS     R0,#+0
   \   00000886   C864               STR      R0,[R1, #+76]
   \   00000888   2620               MOVS     R0,#+38
   \   0000088A   0022               MOVS     R2,#+0
   \   0000088C   0A54               STRB     R2,[R1, R0]
   \   0000088E   CA70               STRB     R2,[R1, #+3]
   \   00000890   0024               MOVS     R4,#+0
   \   00000892   1D4D               LDR      R5,??RF_ExecuteOrder_52+0x28  ;; RF_TaskTab + 4
   \                     ??RF_ExecuteOrder_61:
   \   00000894   2868               LDR      R0,[R5, #+0]
   \   00000896   F021               MOVS     R1,#+240
   \   00000898   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   0000089A   0140               ANDS     R1,R1,R0
   \   0000089C   080D               LSRS     R0,R1,#+20
   \   0000089E   0528               CMP      R0,#+5
   \   000008A0   03D1               BNE      ??RF_ExecuteOrder_62
   \   000008A2   2006               LSLS     R0,R4,#+24
   \   000008A4   000E               LSRS     R0,R0,#+24
   \   000008A6   ........           BL       RemoveRfTask
   \                     ??RF_ExecuteOrder_62:
   \   000008AA   641C               ADDS     R4,R4,#+1
   \   000008AC   0835               ADDS     R5,R5,#+8
   \   000008AE   2006               LSLS     R0,R4,#+24
   \   000008B0   000E               LSRS     R0,R0,#+24
   \   000008B2   4528               CMP      R0,#+69
   \   000008B4   94D2               BCS      ??RF_ExecuteOrder_55
   \   000008B6   EDE7               B        ??RF_ExecuteOrder_61
   \                     ??RF_ExecuteOrder_63:
   \   000008B8   0D49               LDR      R1,??RF_ExecuteOrder_52+0x10  ;; RF_TaskTab
   \   000008BA   0120               MOVS     R0,#+1
   \   000008BC   3056               LDRSB    R0,[R6, R0]
   \   000008BE   C000               LSLS     R0,R0,#+3
   \   000008C0   0818               ADDS     R0,R1,R0
   \   000008C2   0078               LDRB     R0,[R0, #+0]
   \   000008C4   0200               MOVS     R2,R0
   \   000008C6   114F               LDR      R7,??RF_ExecuteOrder_52+0x2C  ;; NeuronsList
   \   000008C8   0C21               MOVS     R1,#+12
   \   000008CA   4A43               MULS     R2,R1,R2
   \   000008CC   B918               ADDS     R1,R7,R2
   \   000008CE   091F               SUBS     R1,R1,#+4
   \   000008D0   0A78               LDRB     R2,[R1, #+0]
   \   000008D2   0823               MOVS     R3,#+8
   \   000008D4   1343               ORRS     R3,R3,R2
   \   000008D6   0B70               STRB     R3,[R1, #+0]
   \   000008D8   ........           BL       AddRfTask_RemoveSearchNodeTask
   \   000008DC   EEE5               B        ??RF_ExecuteOrder_27
   \   000008DE   C046               Nop      
   \                     ??RF_ExecuteOrder_52:
   \   000008E0   ........           DC32     RF_Status + 28
   \   000008E4   C0C62D00           DC32     0x2dc6c0
   \   000008E8   5CD91300           DC32     0x13d95c
   \   000008EC   ........           DC32     MainStage
   \   000008F0   ........           DC32     RF_TaskTab
   \   000008F4   ........           DC32     Busy_program
   \   000008F8   ........           DC32     g_NextTimeProgram
   \   000008FC   ........           DC32     g_counter
   \   00000900   ........           DC32     TransQuality
   \   00000904   EB060000           DC32     0x6eb
   \   00000908   ........           DC32     RF_TaskTab + 4
   \   0000090C   ........           DC32     NeuronsList
    773          //_____________________________________________________________________________
    774          
    775          
    776          
    777          
    778          
    779          
    780          
    781          
    782          
    783          //-----------------------------------------------------------------------------
    784          //!  Nazwa funkcji :    RF_SendData
    785          //!  Funkcja wysy³a dane przez RF12
    786          //-----------------------------------------------------------------------------
    787          //  *data - wska¿nik na pierwszy bajt
    788          //  *size - iloæ bajtów do wys³ania
    789          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    790          void RF_SendData(unsigned char *data, char size)
    791          {
   \                     RF_SendData:
   \   00000000   01B5               PUSH     {R0,LR}
    792              RF_SendFarm(data, size);
   \   00000002   ........           BL       RF_SendFarm
    793          }
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    794          //------------------------------------------------------------------------------
    795          
    796          extern  AT91_SPI_Buff               SPI_Buff;
    797          
    798          
    799          

   \                                 In section Debug.txt, align 4, keep-with-next
    800          char IncCurentRfTask(void)
    801          {
   \                     IncCurentRfTask:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    802              static char Switch=0;
    803              static char WaitToSwithToSlave=0;
    804          
    805              char RF_CurrentTaskTMP=RF_CurrentTask;
   \   00000002   2748               LDR      R0,??IncCurentRfTask_0  ;; IndWys
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   4256               LDRSB    R2,[R0, R1]
   \   00000008   1206               LSLS     R2,R2,#+24
   \   0000000A   120E               LSRS     R2,R2,#+24
    806            
    807              char Fuss=RF_Tasks+10; 
   \   0000000C   5023               MOVS     R3,#+80
   \   0000000E   2549               LDR      R1,??IncCurentRfTask_0+0x4  ;; NeuronsList - 4
   \   00000010   0091               STR      R1,[SP, #+0]
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   244C               LDR      R4,??IncCurentRfTask_0+0x8  ;; RF_TaskTab
    808              do{ 
    809                      if (Fuss==0) break;
    810                      RF_CurrentTaskTMP++;  
   \                     ??IncCurentRfTask_1:
   \   00000016   521C               ADDS     R2,R2,#+1
   \   00000018   1206               LSLS     R2,R2,#+24
   \   0000001A   120E               LSRS     R2,R2,#+24
    811                      if ((RF_TaskTab[RF_CurrentTaskTMP].Node==0) || (RF_CurrentTaskTMP>=RF_Tasks))  
   \   0000001C   D500               LSLS     R5,R2,#+3
   \   0000001E   655D               LDRB     R5,[R4, R5]
   \   00000020   002D               CMP      R5,#+0
   \   00000022   01D0               BEQ      ??IncCurentRfTask_2
   \   00000024   462A               CMP      R2,#+70
   \   00000026   19D3               BCC      ??IncCurentRfTask_3
    812                      {
    813                        RF_CurrentTaskTMP=0; 
   \                     ??IncCurentRfTask_2:
   \   00000028   0022               MOVS     R2,#+0
    814                        
    815                        if ((AT91C_IFLASH_MEM->Config.SlaveMode) && (Switch) && (RF_Status.TimeInMasterMode>200))  //zagwarantowane minimum 110ms w trybie master
   \   0000002A   204D               LDR      R5,??IncCurentRfTask_0+0xC  ;; 0x13d7e8
   \   0000002C   2D78               LDRB     R5,[R5, #+0]
   \   0000002E   002D               CMP      R5,#+0
   \   00000030   12D0               BEQ      ??IncCurentRfTask_4
   \   00000032   4579               LDRB     R5,[R0, #+5]
   \   00000034   002D               CMP      R5,#+0
   \   00000036   0FD0               BEQ      ??IncCurentRfTask_4
   \   00000038   1D4D               LDR      R5,??IncCurentRfTask_0+0x10  ;; RF_Status + 20
   \   0000003A   2D88               LDRH     R5,[R5, #+0]
   \   0000003C   C92D               CMP      R5,#+201
   \   0000003E   0BD3               BCC      ??IncCurentRfTask_4
    816                        {
    817                          if (WaitToSwithToSlave<2)
   \   00000040   8279               LDRB     R2,[R0, #+6]
   \   00000042   022A               CMP      R2,#+2
   \   00000044   02D2               BCS      ??IncCurentRfTask_5
    818                          {
    819                            WaitToSwithToSlave++; 
   \   00000046   521C               ADDS     R2,R2,#+1
   \   00000048   8271               STRB     R2,[R0, #+6]
   \   0000004A   03E0               B        ??IncCurentRfTask_6
    820                          }
    821                          else
    822                          {
    823                            WaitToSwithToSlave=0;
   \                     ??IncCurentRfTask_5:
   \   0000004C   8171               STRB     R1,[R0, #+6]
    824                            Switch=0;
   \   0000004E   4171               STRB     R1,[R0, #+5]
    825                            SwitchToSlave();
   \   00000050   ........           BL       SwitchToSlave
    826                          }
    827                          return 0;
   \                     ??IncCurentRfTask_6:
   \   00000054   0020               MOVS     R0,#+0
   \   00000056   20E0               B        ??IncCurentRfTask_7
    828                        }else{
    829                          Switch=1;
   \                     ??IncCurentRfTask_4:
   \   00000058   0125               MOVS     R5,#+1
   \   0000005A   4571               STRB     R5,[R0, #+5]
    830                          
    831                        }
    832                        
    833                      }
    834                      Fuss--;
   \                     ??IncCurentRfTask_3:
   \   0000005C   5B1E               SUBS     R3,R3,#+1
   \   0000005E   1B06               LSLS     R3,R3,#+24
   \   00000060   1B0E               LSRS     R3,R3,#+24
    835                 }while ((NeuronsList[RF_TaskTab[RF_CurrentTaskTMP].Node-1].ReadSuspend) && ((RF_TaskTab[RF_CurrentTaskTMP].Command.Order!=R_BC_Order) && (RF_TaskTab[RF_CurrentTaskTMP].Command.Order!=W_BC_Order)));
   \   00000062   D500               LSLS     R5,R2,#+3
   \   00000064   6519               ADDS     R5,R4,R5
   \   00000066   2E78               LDRB     R6,[R5, #+0]
   \   00000068   0C27               MOVS     R7,#+12
   \   0000006A   7E43               MULS     R6,R7,R6
   \   0000006C   009F               LDR      R7,[SP, #+0]
   \   0000006E   BE5D               LDRB     R6,[R7, R6]
   \   00000070   7607               LSLS     R6,R6,#+29
   \   00000072   0AD5               BPL      ??IncCurentRfTask_8
   \   00000074   6D68               LDR      R5,[R5, #+4]
   \   00000076   F026               MOVS     R6,#+240
   \   00000078   3604               LSLS     R6,R6,#+16       ;; #+15728640
   \   0000007A   2E40               ANDS     R6,R6,R5
   \   0000007C   350D               LSRS     R5,R6,#+20
   \   0000007E   072D               CMP      R5,#+7
   \   00000080   03D0               BEQ      ??IncCurentRfTask_8
   \   00000082   082D               CMP      R5,#+8
   \   00000084   01D0               BEQ      ??IncCurentRfTask_8
   \   00000086   1D00               MOVS     R5,R3
   \   00000088   C5D1               BNE      ??IncCurentRfTask_1
    836                  
    837              if (RF_CurrentTaskTMP==0) CyklPerSekCount++;
   \                     ??IncCurentRfTask_8:
   \   0000008A   1100               MOVS     R1,R2
   \   0000008C   03D1               BNE      ??IncCurentRfTask_9
   \   0000008E   0949               LDR      R1,??IncCurentRfTask_0+0x14  ;; CyklPerSekCount
   \   00000090   0B68               LDR      R3,[R1, #+0]
   \   00000092   5B1C               ADDS     R3,R3,#+1
   \   00000094   0B60               STR      R3,[R1, #+0]
    838              RF_CurrentTask=RF_CurrentTaskTMP;
   \                     ??IncCurentRfTask_9:
   \   00000096   4270               STRB     R2,[R0, #+1]
    839              return 1;
   \   00000098   0120               MOVS     R0,#+1
   \                     ??IncCurentRfTask_7:
   \   0000009A   F8BC               POP      {R3-R7}
   \   0000009C   02BC               POP      {R1}
   \   0000009E   0847               BX       R1               ;; return
   \                     ??IncCurentRfTask_0:
   \   000000A0   ........           DC32     IndWys
   \   000000A4   ........           DC32     NeuronsList - 4
   \   000000A8   ........           DC32     RF_TaskTab
   \   000000AC   E8D71300           DC32     0x13d7e8
   \   000000B0   ........           DC32     RF_Status + 20
   \   000000B4   ........           DC32     CyklPerSekCount
    840                
    841          
    842          }
    843          
    844          #define SpeedExePeriods 0
    845          
    846          
    847          //-----------------------------------------------------------------------------
    848          //!  Nazwa funkcji :    RF_MasterExecut
    849          //!  Funkcja wysy³a dane wed³ug tablicy rozkazów RF_TaskTab
    850          //-----------------------------------------------------------------------------
    851          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    852          void RF_MasterExecut(void)
    853          {
   \                     RF_MasterExecut:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
   \   00000004   6846               MOV      R0,SP
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   0172               STRB     R1,[R0, #+8]
    854          
    855            
    856            char ByteToSend=0;
    857            //char TaskNr;
    858            
    859            unsigned int SendOrder=0;    //flaga wys³ania
   \   0000000A   0026               MOVS     R6,#+0
    860           
    861            if (SlaveMode) return;
   \   0000000C   D648               LDR      R0,??RF_MasterExecut_0  ;; SlaveMode
   \   0000000E   0078               LDRB     R0,[R0, #+0]
   \   00000010   0028               CMP      R0,#+0
   \   00000012   00D0               BEQ      .+4
   \   00000014   EDE1               B        ??RF_MasterExecut_1
    862          
    863          
    864            
    865            //wyszukanie rozkazów priorytetowych
    866            char Nd=0;
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   C943               MVNS     R1,R1            ;; #-1
   \   0000001A   D448               LDR      R0,??RF_MasterExecut_0+0x4  ;; MainStage + 1771
   \   0000001C   0490               STR      R0,[SP, #+16]
   \   0000001E   F020               MOVS     R0,#+240
   \   00000020   0004               LSLS     R0,R0,#+16       ;; #+15728640
    867            unsigned char Tn=0;
    868            static signed char  RF_RememberTask=-1;
    869            
    870            
    871            signed char TMP_RF_SpecialTask=-1;
    872            
    873            while ((Nd<NumberNeurons) && (TMP_RF_SpecialTask==-1))
    874            {
    875                if ((MainStage.SendStageChange[Nd]>=ChangeStageFlag-SpeedExePeriods))    
   \                     ??RF_MasterExecut_2:
   \   00000022   049B               LDR      R3,[SP, #+16]
   \   00000024   9B5C               LDRB     R3,[R3, R2]
   \   00000026   D24C               LDR      R4,??RF_MasterExecut_0+0x8  ;; ChangeStageFlag
   \   00000028   2478               LDRB     R4,[R4, #+0]
   \   0000002A   A342               CMP      R3,R4
   \   0000002C   29D3               BCC      ??RF_MasterExecut_3
    876                {
    877                  
    878                  Tn=0;
   \   0000002E   0023               MOVS     R3,#+0
   \   00000030   D04C               LDR      R4,??RF_MasterExecut_0+0xC  ;; 0x6eb
   \   00000032   D14D               LDR      R5,??RF_MasterExecut_0+0x10  ;; MainStage
   \   00000034   AD18               ADDS     R5,R5,R2
   \   00000036   2C19               ADDS     R4,R5,R4
   \   00000038   0394               STR      R4,[SP, #+12]
   \   0000003A   16E0               B        ??RF_MasterExecut_4
    879                  while (((RF_TaskTab[Tn].Node!=0) && (Tn<RF_Tasks-1) && (TMP_RF_SpecialTask==-1)))
    880                  {
    881                     if ((RF_TaskTab[Tn].Command.Order==W_RegOrd) &&  (RF_TaskTab[Tn].Command.Auxi==0) && (RF_TaskTab[Tn].Node==Nd)) 
   \                     ??RF_MasterExecut_5:
   \   0000003C   6568               LDR      R5,[R4, #+4]
   \   0000003E   0700               MOVS     R7,R0
   \   00000040   2F40               ANDS     R7,R7,R5
   \   00000042   3F0D               LSRS     R7,R7,#+20
   \   00000044   022F               CMP      R7,#+2
   \   00000046   0DD1               BNE      ??RF_MasterExecut_6
   \   00000048   2D0E               LSRS     R5,R5,#+24
   \   0000004A   0BD1               BNE      ??RF_MasterExecut_6
   \   0000004C   2478               LDRB     R4,[R4, #+0]
   \   0000004E   1506               LSLS     R5,R2,#+24
   \   00000050   2D0E               LSRS     R5,R5,#+24
   \   00000052   AC42               CMP      R4,R5
   \   00000054   06D1               BNE      ??RF_MasterExecut_6
    882                     {
    883                         TMP_RF_SpecialTask=Tn;
   \   00000056   1906               LSLS     R1,R3,#+24
   \   00000058   0916               ASRS     R1,R1,#+24
    884                         SendOrder=1;
   \   0000005A   0126               MOVS     R6,#+1
    885                         MainStage.SendStageChange[Nd]--;
   \   0000005C   039C               LDR      R4,[SP, #+12]
   \   0000005E   2578               LDRB     R5,[R4, #+0]
   \   00000060   6D1E               SUBS     R5,R5,#+1
   \   00000062   2570               STRB     R5,[R4, #+0]
    886                     }
    887                     Tn++;
   \                     ??RF_MasterExecut_6:
   \   00000064   5B1C               ADDS     R3,R3,#+1
   \   00000066   1B06               LSLS     R3,R3,#+24
   \   00000068   1B0E               LSRS     R3,R3,#+24
    888                  }
   \                     ??RF_MasterExecut_4:
   \   0000006A   DC00               LSLS     R4,R3,#+3
   \   0000006C   C34D               LDR      R5,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   0000006E   2C19               ADDS     R4,R5,R4
   \   00000070   2578               LDRB     R5,[R4, #+0]
   \   00000072   002D               CMP      R5,#+0
   \   00000074   05D0               BEQ      ??RF_MasterExecut_3
   \   00000076   452B               CMP      R3,#+69
   \   00000078   03D2               BCS      ??RF_MasterExecut_3
   \   0000007A   0025               MOVS     R5,#+0
   \   0000007C   ED43               MVNS     R5,R5            ;; #-1
   \   0000007E   A942               CMP      R1,R5
   \   00000080   DCD0               BEQ      ??RF_MasterExecut_5
    889                  
    890                }
    891                
    892                
    893                Nd++;  
   \                     ??RF_MasterExecut_3:
   \   00000082   521C               ADDS     R2,R2,#+1
    894            }  
   \   00000084   1306               LSLS     R3,R2,#+24
   \   00000086   1B0E               LSRS     R3,R3,#+24
   \   00000088   232B               CMP      R3,#+35
   \   0000008A   03D2               BCS      ??RF_MasterExecut_7
   \   0000008C   0023               MOVS     R3,#+0
   \   0000008E   DB43               MVNS     R3,R3            ;; #-1
   \   00000090   9942               CMP      R1,R3
   \   00000092   C6D0               BEQ      ??RF_MasterExecut_2
    895            
    896            RF_SpecialTask=TMP_RF_SpecialTask;
   \                     ??RF_MasterExecut_7:
   \   00000094   D94C               LDR      R4,??RF_MasterExecut_8  ;; IndWys
   \   00000096   A170               STRB     R1,[R4, #+2]
    897            
    898            if (RF_SpecialTask>=0)
   \   00000098   0220               MOVS     R0,#+2
   \   0000009A   2056               LDRSB    R0,[R4, R0]
   \   0000009C   0028               CMP      R0,#+0
   \   0000009E   00D5               BPL      .+4
   \   000000A0   ADE0               B        ??RF_MasterExecut_9
    899            {
    900              RF_RememberTask=RF_CurrentTask;
   \   000000A2   6178               LDRB     R1,[R4, #+1]
   \   000000A4   E171               STRB     R1,[R4, #+7]
    901              RF_CurrentTask=RF_SpecialTask;
   \   000000A6   6070               STRB     R0,[R4, #+1]
    902          
    903          
    904                                    
    905                        
    906            }else{
    907              if (RF_RememberTask>=0) 
    908              {
    909               RF_CurrentTask=RF_RememberTask;
    910               RF_RememberTask=-1;  
    911              }
    912              
    913              if (IncCurentRfTask()==0) return;
    914          
    915             
    916          
    917            
    918              
    919              //wykluczenie rozkazów ustawiania stanów oraz odczytu rejestrów je¿eli brak transmisji
    920              while (((RF_TaskTab[RF_CurrentTask].Node!=0) && (RF_CurrentTask<RF_Tasks-1)) && (SendOrder==0))
    921              {
    922                 if (((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]==0) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType!=NodeRF_Period) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType!=NodeRF_Remote) ))  ||
    923                    ((RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi>0) && (TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1]==0)))
    924                 {
    925                       if (IncCurentRfTask()==0) return;   
    926                   
    927                 }else{ 
    928                    if ((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && ((MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]>0)|| (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType==NodeRF_Remote)))  MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]--;
    929                    SendOrder=1;   
    930                 }
    931              }
    932            }
    933            
    934            
    935            if (RF_Status.MasterMode==0) return;
   \                     ??RF_MasterExecut_10:
   \   000000A8   D548               LDR      R0,??RF_MasterExecut_8+0x4  ;; RF_Status + 13
   \   000000AA   0078               LDRB     R0,[R0, #+0]
   \   000000AC   0028               CMP      R0,#+0
   \   000000AE   00D1               BNE      .+4
   \   000000B0   9FE1               B        ??RF_MasterExecut_1
    936          
    937               
    938            
    939            if (SendOrder)
   \   000000B2   002E               CMP      R6,#+0
   \   000000B4   00D1               BNE      .+4
   \   000000B6   92E1               B        ??RF_MasterExecut_11
   \   000000B8   0098               LDR      R0,[SP, #+0]
   \   000000BA   000D               LSRS     R0,R0,#+20
   \   000000BC   0005               LSLS     R0,R0,#+20
   \   000000BE   0121               MOVS     R1,#+1
   \   000000C0   6156               LDRSB    R1,[R4, R1]
   \   000000C2   C900               LSLS     R1,R1,#+3
   \   000000C4   AD4A               LDR      R2,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   000000C6   5118               ADDS     R1,R2,R1
   \   000000C8   4968               LDR      R1,[R1, #+4]
   \   000000CA   0903               LSLS     R1,R1,#+12
   \   000000CC   090B               LSRS     R1,R1,#+12
   \   000000CE   0143               ORRS     R1,R1,R0
   \   000000D0   0091               STR      R1,[SP, #+0]
    940            {
    941              
    942              
    943                _RF_Command  RF_Command;
    944                RF_Command.ID     = RF_TaskTab[RF_CurrentTask].Command.ID;
    945                RF_Command.Order  = RF_TaskTab[RF_CurrentTask].Command.Order;
   \   000000D2   6E46               MOV      R6,SP
   \   000000D4   3000               MOVS     R0,R6
   \   000000D6   801C               ADDS     R0,R0,#+2
   \   000000D8   ........           BL       __aeabi_uread4
   \   000000DC   3100               MOVS     R1,R6
   \   000000DE   891C               ADDS     R1,R1,#+2
   \   000000E0   F022               MOVS     R2,#+240
   \   000000E2   9043               BICS     R0,R0,R2
   \   000000E4   0122               MOVS     R2,#+1
   \   000000E6   A256               LDRSB    R2,[R4, R2]
   \   000000E8   D200               LSLS     R2,R2,#+3
   \   000000EA   A44B               LDR      R3,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   000000EC   9A18               ADDS     R2,R3,R2
   \   000000EE   5268               LDR      R2,[R2, #+4]
   \   000000F0   120D               LSRS     R2,R2,#+20
   \   000000F2   1301               LSLS     R3,R2,#+4
   \   000000F4   F022               MOVS     R2,#+240
   \   000000F6   1A40               ANDS     R2,R2,R3
   \   000000F8   0243               ORRS     R2,R2,R0
   \   000000FA   1000               MOVS     R0,R2
   \   000000FC   ........           BL       __aeabi_uwrite4
    946                RF_Command.Auxi   = RF_TaskTab[RF_CurrentTask].Command.Auxi;
   \   00000100   3000               MOVS     R0,R6
   \   00000102   C01C               ADDS     R0,R0,#+3
   \   00000104   ........           BL       __aeabi_uread4
   \   00000108   3100               MOVS     R1,R6
   \   0000010A   C91C               ADDS     R1,R1,#+3
   \   0000010C   FF22               MOVS     R2,#+255
   \   0000010E   9043               BICS     R0,R0,R2
   \   00000110   0122               MOVS     R2,#+1
   \   00000112   A256               LDRSB    R2,[R4, R2]
   \   00000114   D200               LSLS     R2,R2,#+3
   \   00000116   994B               LDR      R3,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   00000118   9A18               ADDS     R2,R3,R2
   \   0000011A   5268               LDR      R2,[R2, #+4]
   \   0000011C   120E               LSRS     R2,R2,#+24
   \   0000011E   0243               ORRS     R2,R2,R0
   \   00000120   1000               MOVS     R0,R2
   \   00000122   ........           BL       __aeabi_uwrite4
    947                
    948          
    949                if (RF_TaskTab[RF_CurrentTask].Command.Order==W_NewIdOrd)                 //rozkaz specjalny zmiany ID
   \   00000126   0120               MOVS     R0,#+1
   \   00000128   2056               LDRSB    R0,[R4, R0]
   \   0000012A   C000               LSLS     R0,R0,#+3
   \   0000012C   9349               LDR      R1,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   0000012E   0918               ADDS     R1,R1,R0
   \   00000130   F020               MOVS     R0,#+240
   \   00000132   0004               LSLS     R0,R0,#+16       ;; #+15728640
   \   00000134   4A68               LDR      R2,[R1, #+4]
   \   00000136   1040               ANDS     R0,R0,R2
   \   00000138   000D               LSRS     R0,R0,#+20
   \   0000013A   0528               CMP      R0,#+5
   \   0000013C   00D0               BEQ      .+4
   \   0000013E   BFE0               B        ??RF_MasterExecut_12
    950                {
    951                   ByteToSend=8;
   \   00000140   6846               MOV      R0,SP
   \   00000142   0821               MOVS     R1,#+8
   \   00000144   0172               STRB     R1,[R0, #+8]
    952                   RF_Command.CHID_CUR_ID=NeuronsList[0].NeuronID;
   \   00000146   ........           BL       __aeabi_uread8
   \   0000014A   AE4D               LDR      R5,??RF_MasterExecut_8+0x8  ;; NeuronsList
   \   0000014C   EC46               MOV      R12,SP
   \   0000014E   0200               MOVS     R2,R0
   \   00000150   0B00               MOVS     R3,R1
   \   00000152   AD48               LDR      R0,??RF_MasterExecut_8+0xC  ;; 0xfff00000
   \   00000154   0021               MOVS     R1,#+0
   \   00000156   C943               MVNS     R1,R1            ;; #-1
   \   00000158   1040               ANDS     R0,R0,R2
   \   0000015A   1940               ANDS     R1,R1,R3
   \   0000015C   03B4               PUSH     {R0,R1}
   \   0000015E   6A68               LDR      R2,[R5, #+4]
   \   00000160   AA48               LDR      R0,??RF_MasterExecut_8+0x10  ;; 0xfffff
   \   00000162   0021               MOVS     R1,#+0
   \   00000164   1040               ANDS     R0,R0,R2
   \   00000166   0CBC               POP      {R2,R3}
   \   00000168   1043               ORRS     R0,R0,R2
   \   0000016A   1943               ORRS     R1,R1,R3
   \   0000016C   6246               MOV      R2,R12
   \   0000016E   ........           BL       __aeabi_uwrite8
    953                   RF_Command.CHID_KODE=0xC;
   \   00000172   3000               MOVS     R0,R6
   \   00000174   C01C               ADDS     R0,R0,#+3
   \   00000176   ........           BL       __aeabi_uread8
   \   0000017A   3200               MOVS     R2,R6
   \   0000017C   D21C               ADDS     R2,R2,#+3
   \   0000017E   9446               MOV      R12,R2
   \   00000180   0F22               MOVS     R2,#+15
   \   00000182   D243               MVNS     R2,R2            ;; #-16
   \   00000184   0023               MOVS     R3,#+0
   \   00000186   DB43               MVNS     R3,R3            ;; #-1
   \   00000188   0240               ANDS     R2,R2,R0
   \   0000018A   0B40               ANDS     R3,R3,R1
   \   0000018C   0C20               MOVS     R0,#+12
   \   0000018E   0021               MOVS     R1,#+0
   \   00000190   1043               ORRS     R0,R0,R2
   \   00000192   1943               ORRS     R1,R1,R3
   \   00000194   6246               MOV      R2,R12
   \   00000196   ........           BL       __aeabi_uwrite8
    954                   RF_Command.CHID_NEW_ID=NeuronsList[1].NeuronID;
   \   0000019A   3000               MOVS     R0,R6
   \   0000019C   C01C               ADDS     R0,R0,#+3
   \   0000019E   ........           BL       __aeabi_uread8
   \   000001A2   3200               MOVS     R2,R6
   \   000001A4   D21C               ADDS     R2,R2,#+3
   \   000001A6   9446               MOV      R12,R2
   \   000001A8   0200               MOVS     R2,R0
   \   000001AA   0B00               MOVS     R3,R1
   \   000001AC   9848               LDR      R0,??RF_MasterExecut_8+0x14  ;; 0xff00000f
   \   000001AE   0021               MOVS     R1,#+0
   \   000001B0   C943               MVNS     R1,R1            ;; #-1
   \   000001B2   1040               ANDS     R0,R0,R2
   \   000001B4   1940               ANDS     R1,R1,R3
   \   000001B6   03B4               PUSH     {R0,R1}
   \   000001B8   2A69               LDR      R2,[R5, #+16]
   \   000001BA   1201               LSLS     R2,R2,#+4
   \   000001BC   9548               LDR      R0,??RF_MasterExecut_8+0x18  ;; 0xfffff0
   \   000001BE   0021               MOVS     R1,#+0
   \   000001C0   1040               ANDS     R0,R0,R2
   \   000001C2   0CBC               POP      {R2,R3}
   \   000001C4   1043               ORRS     R0,R0,R2
   \   000001C6   1943               ORRS     R1,R1,R3
   \   000001C8   6246               MOV      R2,R12
   \                     ??RF_MasterExecut_13:
   \   000001CA   ........           BL       __aeabi_uwrite8
    955                   RF_Command.CHID_CRC=crc16(RF_Command.Streem,6);
                                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000001CE   0621               MOVS     R1,#+6
   \   000001D0   6846               MOV      R0,SP
   \   000001D2   ........           BL       crc16
   \   000001D6   0500               MOVS     R5,R0
   \   000001D8   3000               MOVS     R0,R6
   \   000001DA   801D               ADDS     R0,R0,#+6
   \   000001DC   ........           BL       __aeabi_uread8
   \   000001E0   B61D               ADDS     R6,R6,#+6
   \   000001E2   0200               MOVS     R2,R0
   \   000001E4   0B00               MOVS     R3,R1
   \   000001E6   8C48               LDR      R0,??RF_MasterExecut_8+0x1C  ;; 0xffff0000
   \   000001E8   0021               MOVS     R1,#+0
   \   000001EA   C943               MVNS     R1,R1            ;; #-1
   \   000001EC   1040               ANDS     R0,R0,R2
   \   000001EE   1940               ANDS     R1,R1,R3
   \   000001F0   2A00               MOVS     R2,R5
   \   000001F2   0243               ORRS     R2,R2,R0
   \   000001F4   1000               MOVS     R0,R2
   \   000001F6   3200               MOVS     R2,R6
   \   000001F8   ........           BL       __aeabi_uwrite8
   \   000001FC   E0E0               B        ??RF_MasterExecut_14
    956                }
   \                     ??RF_MasterExecut_9:
   \   000001FE   0720               MOVS     R0,#+7
   \   00000200   2056               LDRSB    R0,[R4, R0]
   \   00000202   0028               CMP      R0,#+0
   \   00000204   03D4               BMI      ??RF_MasterExecut_15
   \   00000206   6070               STRB     R0,[R4, #+1]
   \   00000208   0020               MOVS     R0,#+0
   \   0000020A   C043               MVNS     R0,R0            ;; #-1
   \   0000020C   E071               STRB     R0,[R4, #+7]
   \                     ??RF_MasterExecut_15:
   \   0000020E   ........           BL       IncCurentRfTask
   \   00000212   0028               CMP      R0,#+0
   \   00000214   1AD1               BNE      ??RF_MasterExecut_16
   \   00000216   ECE0               B        ??RF_MasterExecut_1
   \                     ??RF_MasterExecut_17:
   \   00000218   4A68               LDR      R2,[R1, #+4]
   \   0000021A   1040               ANDS     R0,R0,R2
   \   0000021C   000D               LSRS     R0,R0,#+20
   \   0000021E   0228               CMP      R0,#+2
   \   00000220   13D1               BNE      ??RF_MasterExecut_18
   \   00000222   100E               LSRS     R0,R2,#+24
   \   00000224   11D1               BNE      ??RF_MasterExecut_18
   \   00000226   0878               LDRB     R0,[R1, #+0]
   \   00000228   5249               LDR      R1,??RF_MasterExecut_0+0xC  ;; 0x6eb
   \   0000022A   534A               LDR      R2,??RF_MasterExecut_0+0x10  ;; MainStage
   \   0000022C   1218               ADDS     R2,R2,R0
   \   0000022E   5118               ADDS     R1,R2,R1
   \   00000230   0A78               LDRB     R2,[R1, #+0]
   \   00000232   002A               CMP      R2,#+0
   \   00000234   07D1               BNE      ??RF_MasterExecut_19
   \   00000236   0C23               MOVS     R3,#+12
   \   00000238   5843               MULS     R0,R3,R0
   \   0000023A   724B               LDR      R3,??RF_MasterExecut_8+0x8  ;; NeuronsList
   \   0000023C   1818               ADDS     R0,R3,R0
   \   0000023E   0C38               SUBS     R0,R0,#+12
   \   00000240   0078               LDRB     R0,[R0, #+0]
   \   00000242   0428               CMP      R0,#+4
   \   00000244   01D1               BNE      ??RF_MasterExecut_18
   \                     ??RF_MasterExecut_19:
   \   00000246   501E               SUBS     R0,R2,#+1
   \   00000248   0870               STRB     R0,[R1, #+0]
   \                     ??RF_MasterExecut_18:
   \   0000024A   0126               MOVS     R6,#+1
   \                     ??RF_MasterExecut_16:
   \   0000024C   0120               MOVS     R0,#+1
   \   0000024E   2056               LDRSB    R0,[R4, R0]
   \   00000250   C100               LSLS     R1,R0,#+3
   \   00000252   4A4A               LDR      R2,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   00000254   5118               ADDS     R1,R2,R1
   \   00000256   0A78               LDRB     R2,[R1, #+0]
   \   00000258   002A               CMP      R2,#+0
   \   0000025A   00D1               BNE      .+4
   \   0000025C   24E7               B        ??RF_MasterExecut_10
   \   0000025E   4528               CMP      R0,#+69
   \   00000260   00DB               BLT      .+4
   \   00000262   21E7               B        ??RF_MasterExecut_10
   \   00000264   002E               CMP      R6,#+0
   \   00000266   00D0               BEQ      .+4
   \   00000268   1EE7               B        ??RF_MasterExecut_10
   \   0000026A   4A68               LDR      R2,[R1, #+4]
   \   0000026C   F020               MOVS     R0,#+240
   \   0000026E   0004               LSLS     R0,R0,#+16       ;; #+15728640
   \   00000270   0300               MOVS     R3,R0
   \   00000272   1340               ANDS     R3,R3,R2
   \   00000274   1B0D               LSRS     R3,R3,#+20
   \   00000276   022B               CMP      R3,#+2
   \   00000278   12D1               BNE      ??RF_MasterExecut_20
   \   0000027A   120E               LSRS     R2,R2,#+24
   \   0000027C   10D1               BNE      ??RF_MasterExecut_20
   \   0000027E   0A78               LDRB     R2,[R1, #+0]
   \   00000280   3C4B               LDR      R3,??RF_MasterExecut_0+0xC  ;; 0x6eb
   \   00000282   3D4D               LDR      R5,??RF_MasterExecut_0+0x10  ;; MainStage
   \   00000284   AD18               ADDS     R5,R5,R2
   \   00000286   EB5C               LDRB     R3,[R5, R3]
   \   00000288   002B               CMP      R3,#+0
   \   0000028A   09D1               BNE      ??RF_MasterExecut_20
   \   0000028C   5D4D               LDR      R5,??RF_MasterExecut_8+0x8  ;; NeuronsList
   \   0000028E   0C23               MOVS     R3,#+12
   \   00000290   5A43               MULS     R2,R3,R2
   \   00000292   AA18               ADDS     R2,R5,R2
   \   00000294   0C3A               SUBS     R2,R2,#+12
   \   00000296   1278               LDRB     R2,[R2, #+0]
   \   00000298   052A               CMP      R2,#+5
   \   0000029A   01D0               BEQ      ??RF_MasterExecut_20
   \   0000029C   042A               CMP      R2,#+4
   \   0000029E   B6D1               BNE      ??RF_MasterExecut_15
   \                     ??RF_MasterExecut_20:
   \   000002A0   4A68               LDR      R2,[R1, #+4]
   \   000002A2   0300               MOVS     R3,R0
   \   000002A4   1340               ANDS     R3,R3,R2
   \   000002A6   1B0D               LSRS     R3,R3,#+20
   \   000002A8   012B               CMP      R3,#+1
   \   000002AA   B5D1               BNE      ??RF_MasterExecut_17
   \   000002AC   120E               LSRS     R2,R2,#+24
   \   000002AE   B3D0               BEQ      ??RF_MasterExecut_17
   \   000002B0   0A78               LDRB     R2,[R1, #+0]
   \   000002B2   5A4B               LDR      R3,??RF_MasterExecut_8+0x20  ;; TransQuality
   \   000002B4   9A18               ADDS     R2,R3,R2
   \   000002B6   2532               ADDS     R2,R2,#+37
   \   000002B8   1278               LDRB     R2,[R2, #+0]
   \   000002BA   002A               CMP      R2,#+0
   \   000002BC   ACD1               BNE      ??RF_MasterExecut_17
   \                     ??RF_MasterExecut_21:
   \   000002BE   A6E7               B.N      ??RF_MasterExecut_15
    957                else if ((RF_TaskTab[RF_CurrentTask].Command.Order==R_BC_Order)   || (RF_TaskTab[RF_CurrentTask].Command.Order==W_BC_Order))           //rozkaz specjalny ramka rozg³ona
   \                     ??RF_MasterExecut_12:
   \   000002C0   0728               CMP      R0,#+7
   \   000002C2   01D0               BEQ      ??RF_MasterExecut_22
   \   000002C4   0828               CMP      R0,#+8
   \   000002C6   5BD1               BNE      ??RF_MasterExecut_23
    958                {
    959                   ByteToSend=8;
   \                     ??RF_MasterExecut_22:
   \   000002C8   6846               MOV      R0,SP
   \   000002CA   0821               MOVS     R1,#+8
   \   000002CC   0172               STRB     R1,[R0, #+8]
    960                   RF_Command.BC_ID1=0;
   \   000002CE   ........           BL       __aeabi_uread8
   \   000002D2   6A46               MOV      R2,SP
   \   000002D4   1500               MOVS     R5,R2
   \   000002D6   0200               MOVS     R2,R0
   \   000002D8   0B00               MOVS     R3,R1
   \   000002DA   4B48               LDR      R0,??RF_MasterExecut_8+0xC  ;; 0xfff00000
   \   000002DC   0021               MOVS     R1,#+0
   \   000002DE   C943               MVNS     R1,R1            ;; #-1
   \   000002E0   1040               ANDS     R0,R0,R2
   \   000002E2   1940               ANDS     R1,R1,R3
   \   000002E4   2A00               MOVS     R2,R5
   \   000002E6   ........           BL       __aeabi_uwrite8
    961                   RF_Command.BC_REG=RF_TaskTab[RF_CurrentTask].Command.Auxi;
   \   000002EA   3000               MOVS     R0,R6
   \   000002EC   C01C               ADDS     R0,R0,#+3
   \   000002EE   ........           BL       __aeabi_uread8
   \   000002F2   F51C               ADDS     R5,R6,#+3
   \   000002F4   0200               MOVS     R2,R0
   \   000002F6   0B00               MOVS     R3,R1
   \   000002F8   0F20               MOVS     R0,#+15
   \   000002FA   C043               MVNS     R0,R0            ;; #-16
   \   000002FC   0021               MOVS     R1,#+0
   \   000002FE   C943               MVNS     R1,R1            ;; #-1
   \   00000300   1040               ANDS     R0,R0,R2
   \   00000302   1940               ANDS     R1,R1,R3
   \   00000304   03B4               PUSH     {R0,R1}
   \   00000306   0120               MOVS     R0,#+1
   \   00000308   2056               LDRSB    R0,[R4, R0]
   \   0000030A   C000               LSLS     R0,R0,#+3
   \   0000030C   1B49               LDR      R1,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   0000030E   0818               ADDS     R0,R1,R0
   \   00000310   4068               LDR      R0,[R0, #+4]
   \   00000312   020E               LSRS     R2,R0,#+24
   \   00000314   0F20               MOVS     R0,#+15
   \   00000316   0021               MOVS     R1,#+0
   \   00000318   1040               ANDS     R0,R0,R2
   \   0000031A   0CBC               POP      {R2,R3}
   \   0000031C   1043               ORRS     R0,R0,R2
   \   0000031E   1943               ORRS     R1,R1,R3
   \   00000320   2A00               MOVS     R2,R5
   \   00000322   ........           BL       __aeabi_uwrite8
    962                   RF_Command.BC_ID2=NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronID;
   \   00000326   3000               MOVS     R0,R6
   \   00000328   C01C               ADDS     R0,R0,#+3
   \   0000032A   ........           BL       __aeabi_uread8
   \   0000032E   0200               MOVS     R2,R0
   \   00000330   0B00               MOVS     R3,R1
   \   00000332   3748               LDR      R0,??RF_MasterExecut_8+0x14  ;; 0xff00000f
   \   00000334   0021               MOVS     R1,#+0
   \   00000336   C943               MVNS     R1,R1            ;; #-1
   \   00000338   1040               ANDS     R0,R0,R2
   \   0000033A   1940               ANDS     R1,R1,R3
   \   0000033C   03B4               PUSH     {R0,R1}
   \   0000033E   0120               MOVS     R0,#+1
   \   00000340   2056               LDRSB    R0,[R4, R0]
   \   00000342   C000               LSLS     R0,R0,#+3
   \   00000344   0D49               LDR      R1,??RF_MasterExecut_0+0x14  ;; RF_TaskTab
   \   00000346   085C               LDRB     R0,[R1, R0]
   \   00000348   0C21               MOVS     R1,#+12
   \   0000034A   4843               MULS     R0,R1,R0
   \   0000034C   2D49               LDR      R1,??RF_MasterExecut_8+0x8  ;; NeuronsList
   \   0000034E   0818               ADDS     R0,R1,R0
   \   00000350   0838               SUBS     R0,R0,#+8
   \   00000352   0268               LDR      R2,[R0, #+0]
   \   00000354   1201               LSLS     R2,R2,#+4
   \   00000356   2F48               LDR      R0,??RF_MasterExecut_8+0x18  ;; 0xfffff0
   \   00000358   0021               MOVS     R1,#+0
   \   0000035A   1040               ANDS     R0,R0,R2
   \   0000035C   0CBC               POP      {R2,R3}
   \   0000035E   1043               ORRS     R0,R0,R2
   \   00000360   1943               ORRS     R1,R1,R3
   \   00000362   2A00               MOVS     R2,R5
   \   00000364   31E7               B.N      ??RF_MasterExecut_13
   \   00000366   C046               Nop      
   \                     ??RF_MasterExecut_0:
   \   00000368   ........           DC32     SlaveMode
   \   0000036C   ........           DC32     MainStage + 1771
   \   00000370   ........           DC32     ChangeStageFlag
   \   00000374   EB060000           DC32     0x6eb
   \   00000378   ........           DC32     MainStage
   \   0000037C   ........           DC32     RF_TaskTab
    963                   RF_Command.BC_CRC=crc16(RF_Command.Streem,6);
                                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    964                
    965                }
    966                else if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
   \                     ??RF_MasterExecut_23:
   \   00000380   0128               CMP      R0,#+1
   \   00000382   07D1               BNE      ??RF_MasterExecut_24
    967                {
    968                    ByteToSend=6;
   \   00000384   6846               MOV      R0,SP
   \   00000386   0621               MOVS     R1,#+6
   \   00000388   0172               STRB     R1,[R0, #+8]
    969                    RF_Command.B6.CRC = crc16(RF_Command.Streem,4);
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000038A   0421               MOVS     R1,#+4
   \   0000038C   ........           BL       crc16
   \   00000390   B080               STRH     R0,[R6, #+4]
   \   00000392   15E0               B        ??RF_MasterExecut_14
    970          
    971                    
    972                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)
   \                     ??RF_MasterExecut_24:
   \   00000394   0228               CMP      R0,#+2
   \   00000396   13D1               BNE      ??RF_MasterExecut_14
    973                {  
    974                    ByteToSend=8;
   \   00000398   6846               MOV      R0,SP
   \   0000039A   0822               MOVS     R2,#+8
   \   0000039C   0272               STRB     R2,[R0, #+8]
    975                    RF_Command.B8.Val = MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi];
   \   0000039E   2048               LDR      R0,??RF_MasterExecut_8+0x24  ;; 0x3a2
   \   000003A0   4A68               LDR      R2,[R1, #+4]
   \   000003A2   120E               LSRS     R2,R2,#+24
   \   000003A4   5200               LSLS     R2,R2,#+1
   \   000003A6   0978               LDRB     R1,[R1, #+0]
   \   000003A8   1623               MOVS     R3,#+22
   \   000003AA   5943               MULS     R1,R3,R1
   \   000003AC   1D4B               LDR      R3,??RF_MasterExecut_8+0x28  ;; MainStage
   \   000003AE   5918               ADDS     R1,R3,R1
   \   000003B0   8918               ADDS     R1,R1,R2
   \   000003B2   085A               LDRH     R0,[R1, R0]
   \   000003B4   B080               STRH     R0,[R6, #+4]
    976                    RF_Command.B8.CRC = crc16(RF_Command.Streem,6);
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000003B6   0621               MOVS     R1,#+6
   \   000003B8   6846               MOV      R0,SP
   \   000003BA   ........           BL       crc16
   \   000003BE   F080               STRH     R0,[R6, #+6]
    977                    
    978                    #ifdef _DEBUG_
    979                       AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    980                       ButtonBipCounter=g_counter+1;       
    981                    #endif
    982              
    983                }
    984              
    985                 #ifdef  DIRECT_Q_MESURE
    986                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]++; 
    987                 #endif
    988                
    989                
    990                if (RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node)
   \                     ??RF_MasterExecut_14:
   \   000003C0   207A               LDRB     R0,[R4, #+8]
   \   000003C2   0121               MOVS     R1,#+1
   \   000003C4   6156               LDRSB    R1,[R4, R1]
   \   000003C6   C900               LSLS     R1,R1,#+3
   \   000003C8   174A               LDR      R2,??RF_MasterExecut_8+0x2C  ;; RF_TaskTab
   \   000003CA   515C               LDRB     R1,[R2, R1]
   \   000003CC   8842               CMP      R0,R1
   \   000003CE   02D1               BNE      ??RF_MasterExecut_25
    991                {
    992                  RF_NodeTest.Sent++; 
   \   000003D0   E068               LDR      R0,[R4, #+12]
   \   000003D2   401C               ADDS     R0,R0,#+1
   \   000003D4   E060               STR      R0,[R4, #+12]
    993                }
    994                
    995                
    996                
    997                //RF_Status.EnableTX();
    998                RF_SendData(RF_Command.Streem, ByteToSend);
                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??RF_MasterExecut_25:
   \   000003D6   6846               MOV      R0,SP
   \   000003D8   017A               LDRB     R1,[R0, #+8]
   \   000003DA   ........           BL       RF_SendFarm
    999                //RF_Status.EnableRX();
   1000                
   1001          
   1002               
   1003                
   1004          
   1005                
   1006                
   1007              
   1008            }
   1009            
   1010            static int RF_LastPerTime;
   1011              if (RF_CurrentTask==0){
   \                     ??RF_MasterExecut_11:
   \   000003DE   0120               MOVS     R0,#+1
   \   000003E0   2056               LDRSB    R0,[R4, R0]
   \   000003E2   0028               CMP      R0,#+0
   \   000003E4   05D1               BNE      ??RF_MasterExecut_1
   1012                RF_Period=g_counter-RF_LastPerTime;
   \   000003E6   1148               LDR      R0,??RF_MasterExecut_8+0x30  ;; g_counter
   \   000003E8   03C8               LDM      R0!,{R0,R1}
   \   000003EA   226B               LDR      R2,[R4, #+48]
   \   000003EC   821A               SUBS     R2,R0,R2
   \   000003EE   E261               STR      R2,[R4, #+28]
   1013                RF_LastPerTime=g_counter;
   \   000003F0   2063               STR      R0,[R4, #+48]
   \                     ??RF_MasterExecut_1:
   \   000003F2   05B0               ADD      SP,SP,#+20
   \   000003F4   F0BC               POP      {R4-R7}
   \   000003F6   01BC               POP      {R0}
   \   000003F8   0047               BX       R0               ;; return
   \   000003FA   C046               Nop      
   \                     ??RF_MasterExecut_8:
   \   000003FC   ........           DC32     IndWys
   \   00000400   ........           DC32     RF_Status + 13
   \   00000404   ........           DC32     NeuronsList
   \   00000408   0000F0FF           DC32     0xfff00000
   \   0000040C   FFFF0F00           DC32     0xfffff
   \   00000410   0F0000FF           DC32     0xff00000f
   \   00000414   F0FFFF00           DC32     0xfffff0
   \   00000418   0000FFFF           DC32     0xffff0000
   \   0000041C   ........           DC32     TransQuality
   \   00000420   A2030000           DC32     0x3a2
   \   00000424   ........           DC32     MainStage
   \   00000428   ........           DC32     RF_TaskTab
   \   0000042C   ........           DC32     g_counter
   1014              }
   1015            
   1016          
   1017          
   1018                   #ifdef _LIVE_RJESTR  
   1019               if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
   1020                {
   1021                   LIVE_TAB[LIVE_TAB_IDX]=0xA000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
   1022                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
   1023          
   1024                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)  
   1025                {  
   1026                   LIVE_TAB[LIVE_TAB_IDX]=0xC000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
   1027                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
   1028                }
   1029               #endif
   1030          
   1031            
   1032          }

   \                                 In section .data, align 4
   \                     IndWys:
   \   00000000   00                 DC8 0
   \                     RF_CurrentTask:
   \   00000001   FF                 DC8 -1
   \                     RF_SpecialTask:
   \   00000002   FF                 DC8 -1
   \                     g_RF_TimeOutCounter:
   \   00000003   00                 DC8 0
   \                     BridgeMode:
   \   00000004   00                 DC8 0
   \   00000005   00                 DC8 0
   \   00000006   00                 DC8 0
   \   00000007   FF                 DC8 -1
   \                     RF_NodeTest:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     poprawnych:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \                     RF_Period:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \                     odb:
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     licznik_cykli:
   \   00000028   00000000           DC32 0
   \                     pRF_Command:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   00000000           DC8 0, 0, 0, 0

   \                                 In section .data, align 1
   \                     IndWysNeg:
   \   00000000   01                 DC8 1

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     RF_Status

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   19820000           DC32     0x8219

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   33333333           DC32     0x33333333

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   3333D33F           DC32     0x3fd33333

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   C3F5285C           DC32     0x5c28f5c3

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   8FE28A40           DC32     0x408ae28f

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   00006940           DC32     0x40690000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   00FF04C1           DC32     0xc104ff00

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     IndWys

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     RF_TaskTab

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   FFFF0F00           DC32     0xfffff

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     RF_Status + 24

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   E8D71300           DC32     0x13d7e8

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable30:
   \   00000000   ........           DC32     NeuronsList

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   ........           DC32     SlaveMode

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable38:
   \   00000000   ........           DC32     RF_Status
   1033          
   1034          

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     IncCurentRfTask     24
     RF_ExecuteOrder     80
     RF_MasterExecut     48
     RF_ReciveFarm       24
     RF_SendData          8
     SwitchToMaster      16
     SwitchToSlave       16


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     RF_TaskTab           560
     ReadNodeSoftVersion    2
     SwitchToMaster       136
     SwitchToSlave        128
     RF_ReciveFarm        484
     RF_ExecuteOrder     2320
     RF_SendData           12
     IncCurentRfTask      184
     RF_MasterExecut     1072
     IndWys                52
     IndWysNeg              1
     ??DataTable9           4
     ??DataTable10          4
     ??DataTable12          4
     ??DataTable13          4
     ??DataTable14          4
     ??DataTable15          4
     ??DataTable16          4
     ??DataTable17          4
     ??DataTable21          4
     ??DataTable22          4
     ??DataTable23          4
     ??DataTable25          4
     ??DataTable28          4
     ??DataTable30          4
     ??DataTable33          4
     ??DataTable38          4
      Others               66

 
   562 bytes in section .bss
    53 bytes in section .data
 4 466 bytes in section Debug.txt
 
 4 400 bytes of CODE memory (+ 66 bytes shared)
   615 bytes of DATA memory

Errors: none
Warnings: 31
