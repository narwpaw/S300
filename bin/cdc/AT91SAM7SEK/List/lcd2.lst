###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           10/Jun/2008  14:31:23 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Konstrukcje\MSU-101\mMaster\Framework\lcd2.c          #
#    Command line =  D:\Konstrukcje\MSU-101\mMaster\Framework\lcd2.c -D       #
#                    AT91SAM7S256 -D AT91SAM7SEK -D iH -lC                    #
#                    D:\Konstrukcje\MSU-101\mMaster\bin\cdc\AT91SAM7SEK\List\ #
#                     --diag_suppress Pa082 -o D:\Konstrukcje\MSU-101\mMaster #
#                    \bin\cdc\AT91SAM7SEK\Obj\ --debug --endian little --cpu  #
#                    ARM7TDMI -e --fpu None --dlib_config "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    D:\Konstrukcje\MSU-101\mMaster\lib\AT91SAM7S256\ -I      #
#                    D:\Konstrukcje\MSU-101\mMaster\lib\AT91SAM7S64\ -I       #
#                    D:\Konstrukcje\MSU-101\mMaster\ -I                       #
#                    D:\Konstrukcje\MSU-101\mMaster\cdc\ -I                   #
#                    D:\Konstrukcje\MSU-101\mMaster\core\ -I                  #
#                    D:\Konstrukcje\MSU-101\mMaster\startup\ -I               #
#                    D:\Konstrukcje\MSU-101\mMaster\Framework\ -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Ohs                                    #
#    List file    =  D:\Konstrukcje\MSU-101\mMaster\bin\cdc\AT91SAM7SEK\List\ #
#                    lcd2.lst                                                 #
#    Object file  =  D:\Konstrukcje\MSU-101\mMaster\bin\cdc\AT91SAM7SEK\Obj\l #
#                    cd2.o                                                    #
#                                                                             #
#                                                                             #
###############################################################################

D:\Konstrukcje\MSU-101\mMaster\Framework\lcd2.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : LCD.c                                    *//
      7          //*  Opis                         : Plik obs³ugi wyœwietlacza LCD            *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 15.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #define LCD_delay 35
     24          
     25          
     26          
     27          // Pliki do³¹czane -------------------------------------------------------------
     28               #include "common.h"
     29               #include "core/device.h"                                                   //aduje bibliotreki dla odpowiedniego procesora
     30               //#include "AT91SAM7S256.h"
     31               #include "lcd2.h"
     32               #include "core/trace.h"
     33          //-----------------------Koniec plików do³¹czanych -----------------------------
     34          
     35          
     36          //Zmienne globalne -------------------------------------------------------------
     37            //char LCD_Canvas[8][128];
     38          //___________________________Koniec zmiennych globalnych________________________
     39          
     40          
     41          extern void Delay (unsigned long a);
     42          extern MenuPaint(void);
     43          
     44          
     45          //Definicje --------------------------------------------------------------------

   \                                 In section .data, align 4
     46                AT91PS_PIO    m_pPio   = AT91C_BASE_PIOA;
     47                AT91PS_PIO    TS_pPio  = AT91C_BASE_PIOA;
     48                //TouchScreen
     49          
     50          #define  TS_ADC             AT91C_BASE_PDC_ADC
     51          #define  TS_ADC_CH0         AT91C_ADC_CH0
     52          #define  TS_ADC_CH1         AT91C_ADC_CH1
     53          #define  TS_ADC_CH2         AT91C_ADC_CH2
     54          #define  TS_ADC_CH3         AT91C_ADC_CH3
     55          #define  TS_PIO             AT91C_BASE_PIOA
     56          #define  TS_PIO_CH0         AT91C_PIO_PA17
     57          #define  TS_PIO_CH1         AT91C_PIO_PA18
     58          #define  TS_PIO_CH2         AT91C_PIO_PA19
     59          #define  TS_PIO_CH3         AT91C_PIO_PA20
     60          
     61          #define  TS_ADC_ID         AT91C_ID_ADC        
     62          // Leds
     63          //___________________________Koniec definicji___________________________________
     64          
     65          
     66                
     67          extern int X_down;
     68          extern int Y_down;
     69          extern int X_up;
     70          extern int Y_up;
     71          
     72          
     73          char LCD_Canvas[8][128] = {
     74                            {254,1,1,1,1,1,1,1,131,69,125,69,41,41,17,1,1,169,1,1,1,1,1,1,1,1,1,1,131,69,125,69,41,41,17,1,1,169,1,1,1,1,1,1,1,1,1,1,131,69,125,69,41,41,17,1,1,169,1,1,1,1,1,1,1,1,1,1,131,69,125,69,41,41,17,1,1,169,1,1,1,1,1,1,1,1,1,1,131,69,125,69,41,41,17,1,1,169,1,1,1,1,1,1,1,1,1,1,131,69,125,69,41,41,17,1,1,1,255,7,243,107,155,155,107,243,6,252},
     75                            {255,164,160,144,160,164,24,0,66,66,66,66,66,99,66,0,0,170,0,0,32,32,32,32,32,48,32,0,66,66,66,66,66,99,66,0,0,170,0,0,28,36,36,36,36,36,24,0,66,66,66,66,66,99,66,0,0,170,0,0,16,16,16,16,16,24,16,0,66,66,66,66,66,99,66,0,0,170,0,0,60,8,16,16,32,36,24,0,66,66,66,66,66,99,66,0,0,170,0,0,152,164,160,144,160,164,24,0,66,66,66,66,66,99,66,0,0,0,255,254,60,189,125,253,189,60,254,255},
     76                            {255,148,148,148,148,148,99,0,130,68,124,68,40,40,16,0,0,170,0,0,207,34,4,132,8,41,198,0,124,4,4,124,4,4,124,0,0,170,0,1,9,136,136,144,144,160,60,0,60,68,68,68,68,68,60,0,0,170,0,1,61,136,16,16,32,164,24,0,56,68,4,4,4,68,56,0,0,170,0,0,34,34,34,66,66,131,242,0,28,36,36,60,36,36,28,0,0,170,0,0,115,148,148,148,148,148,99,0,130,68,124,68,40,40,16,0,0,0,255,255,36,117,87,38,37,36,255,255},
     77                            {255,4,8,8,16,18,12,0,0,0,0,0,0,0,0,0,0,170,0,0,32,161,125,164,169,49,32,0,0,0,0,0,0,0,0,0,0,170,0,0,99,148,132,148,115,36,227,0,0,0,0,0,0,0,0,0,0,170,0,0,131,132,244,146,164,196,131,0,0,0,0,0,0,0,0,0,0,170,0,0,16,16,254,82,148,24,16,0,0,0,0,0,0,0,0,0,0,170,0,0,158,4,8,8,16,18,12,0,0,0,0,0,0,0,0,0,0,0,255,255,159,223,63,191,127,63,255,255},
     78                            {255,68,72,136,80,82,140,0,0,0,0,0,0,0,0,0,0,170,0,0,99,148,148,148,115,145,103,0,0,0,0,0,0,0,0,0,0,170,0,0,208,80,126,82,84,88,144,0,0,0,0,0,0,0,0,0,0,170,0,0,142,82,147,82,82,82,140,0,0,0,0,0,0,0,0,0,0,170,0,16,210,130,7,2,2,67,130,0,0,0,0,0,0,0,0,0,0,170,0,0,158,68,72,136,80,82,140,0,0,0,0,0,0,0,0,0,0,0,255,255,180,149,150,166,167,147,255,255},
     79                            {255,18,18,33,34,66,121,0,0,0,0,0,0,0,0,0,0,170,0,128,132,4,4,8,8,16,30,0,0,0,0,0,0,0,0,0,0,170,0,0,57,74,74,74,74,74,49,0,0,0,0,0,0,0,0,0,0,170,0,0,49,74,75,50,74,74,49,0,0,0,0,0,0,0,0,0,0,170,0,0,51,72,65,33,66,74,49,0,0,0,0,0,0,0,0,0,0,170,0,0,17,18,18,33,34,66,121,0,0,0,0,0,0,0,0,0,0,0,255,255,36,110,113,117,123,57,255,255},
     80                            {255,201,72,68,72,73,70,64,64,64,64,64,64,64,64,192,192,202,64,192,78,210,82,210,82,210,76,192,64,192,64,192,64,192,64,192,64,202,64,192,71,201,73,201,73,201,70,192,64,192,64,192,64,192,64,192,64,202,64,192,70,201,73,198,73,201,70,192,64,192,64,192,64,192,64,192,64,202,64,192,200,200,223,201,202,204,200,192,192,192,192,64,64,192,64,192,64,202,64,192,70,201,72,196,200,73,70,64,64,64,64,64,64,64,64,64,64,192,255,255,248,251,255,255,255,254,255,255},
     81                            {255,192,128,128,128,128,128,140,158,191,191,128,128,128,128,192,255,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,128,255,255,255,255,192,222,222,192,255,255,255,255,128,213,170,213,170,213,170,213,170,213,170,213,255,192,128,128,128,191,191,158,140,128,128,128,128,128,192,255,255,255,255,255,255,255,255,127,63}
     82                            };
     83          
     84          
     85          
     86          
     87          
     88          //===================================================================================================================================================================//
     89          //===================================================================================================================================================================//
     90          //===================================================================================================================================================================//
     91          //===================================================================================================================================================================//
     92          //============================================================      F U N K C J E      ==============================================================================//
     93          //===================================================================================================================================================================//
     94          //===================================================================================================================================================================//
     95          
     96          
     97          
     98          //*-----------------------------------------------------------------------------
     99          //* Nazwa funkcji :    RepaintLCD
    100          //* Funkcja g³ówna wyrysowywania tabeli LCD_Canvas na ekran LCD
    101          //*-----------------------------------------------------------------------------
    102          //* Konieczne zdefiniowanie zmiennej globalnej "char LCD_Canvas[8][128];"
    103          //*-----------------------------------------------------------------------------
    104          
    105          char chipSelect=1;
   \                     chipSelect:
   \   00000000   01                 DC8 1
   \   00000001   000000             DC8 0, 0, 0
   \                     m_pPio:
   \   00000004   00F4FFFF           DC32 0FFFFF400H

   \                                 In section .data, align 4
   \                     TS_pPio:
   \   00000000   00F4FFFF           DC32 0FFFFF400H

   \                                 In section .data, align 4
   \                     LCD_Canvas:
   \   00000000   FE0101010101       DC8 254, 1, 1, 1, 1, 1, 1, 1, 131, 69, 125, 69, 41, 41, 17, 1, 1, 169
   \              010183457D45
   \              2929110101A9
   \   00000012   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 131, 69, 125, 69, 41, 41, 17, 1, 1
   \              010101018345
   \              7D4529291101
   \              01          
   \   00000025   A90101010101       DC8 169, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 131, 69, 125, 69, 41, 41, 17, 1
   \              010101010183
   \              457D45292911
   \              01          
   \   00000038   01A901010101       DC8 1, 169, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 131, 69, 125, 69, 41, 41, 17
   \              010101010101
   \              83457D452929
   \              11          
   \   0000004B   0101A9010101       DC8 1, 1, 169, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 131, 69, 125, 69, 41, 41
   \              010101010101
   \              0183457D4529
   \              29          
   \   0000005E   110101A90101       DC8 17, 1, 1, 169, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 131, 69, 125, 69, 41
   \              010101010101
   \              010183457D45
   \              29          
   \   00000071   2911010101FF       DC8 41, 17, 1, 1, 1, 255, 7, 243, 107, 155, 155, 107, 243, 6, 252, 255
   \              07F36B9B9B6B
   \              F306FCFF    
   \   00000081   A4A090A0A418       DC8 164, 160, 144, 160, 164, 24, 0, 66, 66, 66, 66, 66, 99, 66, 0, 0
   \              004242424242
   \              63420000    
   \   00000091   AA0000202020       DC8 170, 0, 0, 32, 32, 32, 32, 32, 48, 32, 0, 66, 66, 66, 66, 66, 99
   \              202030200042
   \              4242424263  
   \   000000A2   420000AA0000       DC8 66, 0, 0, 170, 0, 0, 28, 36, 36, 36, 36, 36, 24, 0, 66, 66, 66, 66
   \              1C2424242424
   \              180042424242
   \   000000B4   4263420000AA       DC8 66, 99, 66, 0, 0, 170, 0, 0, 16, 16, 16, 16, 16, 24, 16, 0, 66, 66
   \              000010101010
   \              101810004242
   \   000000C6   424242634200       DC8 66, 66, 66, 99, 66, 0, 0, 170, 0, 0, 60, 8, 16, 16, 32, 36, 24, 0
   \              00AA00003C08
   \              101020241800
   \   000000D8   424242424263       DC8 66, 66, 66, 66, 66, 99, 66, 0, 0, 170, 0, 0, 152, 164, 160, 144
   \              420000AA0000
   \              98A4A090    
   \   000000E8   A0A418004242       DC8 160, 164, 24, 0, 66, 66, 66, 66, 66, 99, 66, 0, 0, 0, 255, 254, 60
   \              424242634200
   \              0000FFFE3C  
   \   000000F9   BD7DFDBD3CFE       DC8 189, 125, 253, 189, 60, 254, 255, 255, 148, 148, 148, 148, 148, 99
   \              FFFF94949494
   \              9463        
   \   00000107   0082447C4428       DC8 0, 130, 68, 124, 68, 40, 40, 16, 0, 0, 170, 0, 0, 207, 34, 4, 132
   \              28100000AA00
   \              00CF220484  
   \   00000118   0829C6007C04       DC8 8, 41, 198, 0, 124, 4, 4, 124, 4, 4, 124, 0, 0, 170, 0, 1, 9, 136
   \              047C04047C00
   \              00AA00010988
   \   0000012A   889090A03C00       DC8 136, 144, 144, 160, 60, 0, 60, 68, 68, 68, 68, 68, 60, 0, 0, 170, 0
   \              3C4444444444
   \              3C0000AA00  
   \   0000013B   013D88101020       DC8 1, 61, 136, 16, 16, 32, 164, 24, 0, 56, 68, 4, 4, 4, 68, 56, 0, 0
   \              A41800384404
   \              040444380000
   \   0000014D   AA0000222222       DC8 170, 0, 0, 34, 34, 34, 66, 66, 131, 242, 0, 28, 36, 36, 60, 36, 36
   \              424283F2001C
   \              24243C2424  
   \   0000015E   1C0000AA0000       DC8 28, 0, 0, 170, 0, 0, 115, 148, 148, 148, 148, 148, 99, 0, 130, 68
   \              739494949494
   \              63008244    
   \   0000016E   7C4428281000       DC8 124, 68, 40, 40, 16, 0, 0, 0, 255, 255, 36, 117, 87, 38, 37, 36
   \              0000FFFF2475
   \              57262524    
   \   0000017E   FFFFFF040808       DC8 255, 255, 255, 4, 8, 8, 16, 18, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              10120C000000
   \              000000000000
   \              00          
   \   00000191   AA000020A17D       DC8 170, 0, 0, 32, 161, 125, 164, 169, 49, 32, 0, 0, 0, 0, 0, 0, 0, 0
   \              A4A931200000
   \              000000000000
   \   000001A3   0000AA000063       DC8 0, 0, 170, 0, 0, 99, 148, 132, 148, 115, 36, 227, 0, 0, 0, 0, 0, 0
   \              9484947324E3
   \              000000000000
   \   000001B5   00000000AA00       DC8 0, 0, 0, 0, 170, 0, 0, 131, 132, 244, 146, 164, 196, 131, 0, 0, 0
   \              008384F492A4
   \              C483000000  
   \   000001C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 16, 16, 254, 82, 148, 24, 16, 0, 0
   \              00AA00001010
   \              FE5294181000
   \              00          
   \   000001D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 170, 0, 0, 158, 4, 8, 8, 16, 18, 12, 0, 0
   \              0000AA00009E
   \              04080810120C
   \              0000        
   \   000001ED   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 159, 223, 63, 191, 127, 63
   \              000000FFFF9F
   \              DF3FBF7F3F  
   \   000001FE   FFFFFF444888       DC8 255, 255, 255, 68, 72, 136, 80, 82, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              50528C000000
   \              000000000000
   \   00000210   00AA00006394       DC8 0, 170, 0, 0, 99, 148, 148, 148, 115, 145, 103, 0, 0, 0, 0, 0, 0, 0
   \              949473916700
   \              000000000000
   \   00000222   000000AA0000       DC8 0, 0, 0, 170, 0, 0, 208, 80, 126, 82, 84, 88, 144, 0, 0, 0, 0, 0, 0
   \              D0507E525458
   \              900000000000
   \              00          
   \   00000235   00000000AA00       DC8 0, 0, 0, 0, 170, 0, 0, 142, 82, 147, 82, 82, 82, 140, 0, 0, 0, 0, 0
   \              008E52935252
   \              528C00000000
   \              00          
   \   00000248   0000000000AA       DC8 0, 0, 0, 0, 0, 170, 0, 16, 210, 130, 7, 2, 2, 67, 130, 0, 0, 0, 0
   \              0010D2820702
   \              024382000000
   \              00          
   \   0000025B   000000000000       DC8 0, 0, 0, 0, 0, 0, 170, 0, 0, 158, 68, 72, 136, 80, 82, 140, 0, 0, 0
   \              AA00009E4448
   \              8850528C0000
   \              00          
   \   0000026E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 180, 149, 150, 166, 167, 147, 255
   \              0000FFFFB495
   \              96A6A793FF  
   \   0000027F   FFFF12122122       DC8 255, 255, 18, 18, 33, 34, 66, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              427900000000
   \              000000000000
   \   00000291   AA0080840404       DC8 170, 0, 128, 132, 4, 4, 8, 8, 16, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0808101E0000
   \              000000000000
   \              0000        
   \   000002A5   AA0000394A4A       DC8 170, 0, 0, 57, 74, 74, 74, 74, 74, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              4A4A4A310000
   \              000000000000
   \              0000        
   \   000002B9   AA0000314A4B       DC8 170, 0, 0, 49, 74, 75, 50, 74, 74, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              324A4A310000
   \              000000000000
   \              0000        
   \   000002CD   AA0000334841       DC8 170, 0, 0, 51, 72, 65, 33, 66, 74, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              21424A310000
   \              000000000000
   \              0000        
   \   000002E1   AA0000111212       DC8 170, 0, 0, 17, 18, 18, 33, 34, 66, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              212242790000
   \              000000000000
   \              00          
   \   000002F4   0000FFFF246E       DC8 0, 0, 255, 255, 36, 110, 113, 117, 123, 57, 255, 255, 255, 201, 72
   \              71757B39FFFF
   \              FFC948      
   \   00000303   444849464040       DC8 68, 72, 73, 70, 64, 64, 64, 64, 64, 64, 64, 64, 192, 192, 202, 64
   \              404040404040
   \              C0C0CA40    
   \   00000313   C04ED252D252       DC8 192, 78, 210, 82, 210, 82, 210, 76, 192, 64, 192, 64, 192, 64, 192
   \              D24CC040C040
   \              C040C0      
   \   00000322   40C040CA40C0       DC8 64, 192, 64, 202, 64, 192, 71, 201, 73, 201, 73, 201, 70, 192, 64
   \              47C949C949C9
   \              46C040      
   \   00000331   C040C040C040       DC8 192, 64, 192, 64, 192, 64, 192, 64, 202, 64, 192, 70, 201, 73, 198
   \              C040CA40C046
   \              C949C6      
   \   00000340   49C946C040C0       DC8 73, 201, 70, 192, 64, 192, 64, 192, 64, 192, 64, 192, 64, 202, 64
   \              40C040C040C0
   \              40CA40      
   \   0000034F   C0C8C8DFC9CA       DC8 192, 200, 200, 223, 201, 202, 204, 200, 192, 192, 192, 192, 64, 64
   \              CCC8C0C0C0C0
   \              4040        
   \   0000035D   C040C040CA40       DC8 192, 64, 192, 64, 202, 64, 192, 70, 201, 72, 196, 200, 73, 70, 64
   \              C046C948C4C8
   \              494640      
   \   0000036C   404040404040       DC8 64, 64, 64, 64, 64, 64, 64, 64, 64, 192, 255, 255, 248, 251, 255
   \              404040C0FFFF
   \              F8FBFF      
   \   0000037B   FFFFFEFFFFFF       DC8 255, 255, 254, 255, 255, 255, 192, 128, 128, 128, 128, 128, 140
   \              C08080808080
   \              8C          
   \   00000388   9EBFBF808080       DC8 158, 191, 191, 128, 128, 128, 128, 192, 255, 170, 213, 170, 213
   \              80C0FFAAD5AA
   \              D5          
   \   00000395   AAD5AAD5AAD5       DC8 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170
   \              AAD5AAD5AAD5
   \              AA          
   \   000003A2   D5AAD5AAD5AA       DC8 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213
   \              D5AAD5AAD5AA
   \              D5          
   \   000003AF   AAD5AAD5AAD5       DC8 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170
   \              AAD5AAD5AAD5
   \              AA          
   \   000003BC   D5AAD5AAD5AA       DC8 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213
   \              D5AAD5AAD5AA
   \              D5          
   \   000003C9   AAD5AAD5AA80       DC8 170, 213, 170, 213, 170, 128, 255, 255, 255, 255, 192, 222, 222
   \              FFFFFFFFC0DE
   \              DE          
   \   000003D6   C0FFFFFFFF80       DC8 192, 255, 255, 255, 255, 128, 213, 170, 213, 170, 213, 170, 213
   \              D5AAD5AAD5AA
   \              D5          
   \   000003E3   AAD5AAD5FFC0       DC8 170, 213, 170, 213, 255, 192, 128, 128, 128, 191, 191, 158, 140
   \              808080BFBF9E
   \              8C          
   \   000003F0   8080808080C0       DC8 128, 128, 128, 128, 128, 192, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FF          
   \   000003FD   FF7F3F             DC8 255, 127, 63

   \                                 In section Debug.txt, align 4, keep-with-next
    106          void RepaintLCD(void)
    107          {
   \                     RepaintLCD:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   ....               LDR      R0,??DataTable8  ;; 0xfffff430
   \   00000004   1021               MOVS     R1,#+16
   \   00000006   0160               STR      R1,[R0, #+0]
   \   00000008   4148               LDR      R0,??RepaintLCD_0  ;; 0xfffff434
   \   0000000A   0160               STR      R1,[R0, #+0]
    108            
    109          
    110          char lcdData=0;
    111          //char lcdStartPage=0;
    112          //char chipSelect=0;
    113          char displayY=0;
    114             AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
    115            
    116          //  for (char chipSelect=1; chipSelect<=2; chipSelect++)
    117          //{
    118          
    119             if (chipSelect<2) {chipSelect=2;} else {chipSelect=1;}
   \   0000000C   ....               LDR      R4,??DataTable1  ;; chipSelect
   \   0000000E   2078               LDRB     R0,[R4, #+0]
   \   00000010   0228               CMP      R0,#+2
   \   00000012   01D2               BCS      ??RepaintLCD_1
   \   00000014   0221               MOVS     R1,#+2
   \   00000016   00E0               B        ??RepaintLCD_2
   \                     ??RepaintLCD_1:
   \   00000018   0121               MOVS     R1,#+1
   \                     ??RepaintLCD_2:
   \   0000001A   2170               STRB     R1,[R4, #+0]
    120               at91ChipSelect(chipSelect);   
   \   0000001C   6068               LDR      R0,[R4, #+4]
   \   0000001E   ....               LDR      R5,??DataTable7  ;; 0x7e00811c
   \   00000020   0563               STR      R5,[R0, #+48]
   \   00000022   0229               CMP      R1,#+2
   \   00000024   03D1               BNE      ??RepaintLCD_3
   \   00000026   8022               MOVS     R2,#+128
   \   00000028   1204               LSLS     R2,R2,#+16       ;; #+8388608
   \   0000002A   D309               LSRS     R3,R2,#+7
   \   0000002C   04E0               B        ??RepaintLCD_4
   \                     ??RepaintLCD_3:
   \   0000002E   0129               CMP      R1,#+1
   \   00000030   02D1               BNE      ??RepaintLCD_4
   \   00000032   8022               MOVS     R2,#+128
   \   00000034   5202               LSLS     R2,R2,#+9        ;; #+65536
   \   00000036   D301               LSLS     R3,R2,#+7
   \                     ??RepaintLCD_4:
   \   00000038   0363               STR      R3,[R0, #+48]
   \   0000003A   4263               STR      R2,[R0, #+52]
   \   0000003C   0563               STR      R5,[R0, #+48]
   \   0000003E   ....               LDR      R1,??DataTable3  ;; 0x3c000110
   \   00000040   4163               STR      R1,[R0, #+52]
   \   00000042   0C21               MOVS     R1,#+12
   \   00000044   0163               STR      R1,[R0, #+48]
   \   00000046   8021               MOVS     R1,#+128
   \   00000048   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   0000004A   4163               STR      R1,[R0, #+52]
   \   0000004C   0220               MOVS     R0,#+2
   \   0000004E   ........           BL       Delay
   \   00000052   6068               LDR      R0,[R4, #+4]
   \   00000054   8021               MOVS     R1,#+128
   \   00000056   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000058   0163               STR      R1,[R0, #+48]
   \   0000005A   0563               STR      R5,[R0, #+48]
    121          
    122               at91DisplayYAdress(displayY);
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   ........           BL       at91DisplayYAdress
    123               Delay(1);  
   \   00000062   0120               MOVS     R0,#+1
   \   00000064   ........           BL       Delay
    124               
    125                for (char lcdStartPage=0; lcdStartPage<8; lcdStartPage++)
   \   00000068   0025               MOVS     R5,#+0
   \   0000006A   ....               LDR      R6,??DataTable15  ;; LCD_Canvas
    126                {
    127                   
    128                  at91DisplayStartPage(lcdStartPage); 
   \                     ??RepaintLCD_5:
   \   0000006C   6168               LDR      R1,[R4, #+4]
   \   0000006E   ....               LDR      R0,??DataTable7  ;; 0x7e00811c
   \   00000070   0863               STR      R0,[R1, #+48]
   \   00000072   0122               MOVS     R2,#+1
   \   00000074   0120               MOVS     R0,#+1
   \   00000076   0300               MOVS     R3,R0
   \   00000078   2B40               ANDS     R3,R3,R5
   \   0000007A   1D27               MOVS     R7,#+29
   \   0000007C   7B43               MULS     R3,R7,R3
   \   0000007E   9840               LSLS     R0,R0,R3
   \   00000080   8446               MOV      R12,R0
   \   00000082   1300               MOVS     R3,R2
   \   00000084   2F06               LSLS     R7,R5,#+24
   \   00000086   BF0E               LSRS     R7,R7,#+26
   \   00000088   1000               MOVS     R0,R2
   \   0000008A   3840               ANDS     R0,R0,R7
   \   0000008C   1B27               MOVS     R7,#+27
   \   0000008E   7843               MULS     R0,R7,R0
   \   00000090   8340               LSLS     R3,R3,R0
   \   00000092   6046               MOV      R0,R12
   \   00000094   0343               ORRS     R3,R3,R0
   \   00000096   1000               MOVS     R0,R2
   \   00000098   2F06               LSLS     R7,R5,#+24
   \   0000009A   7F0E               LSRS     R7,R7,#+25
   \   0000009C   3A40               ANDS     R2,R2,R7
   \   0000009E   1C27               MOVS     R7,#+28
   \   000000A0   7A43               MULS     R2,R7,R2
   \   000000A2   9040               LSLS     R0,R0,R2
   \   000000A4   1843               ORRS     R0,R0,R3
   \   000000A6   ....               LDR      R2,??DataTable6  ;; 0x4008110
   \   000000A8   0243               ORRS     R2,R2,R0
   \   000000AA   4A63               STR      R2,[R1, #+52]
   \   000000AC   0C20               MOVS     R0,#+12
   \   000000AE   0863               STR      R0,[R1, #+48]
   \   000000B0   8020               MOVS     R0,#+128
   \   000000B2   C005               LSLS     R0,R0,#+23       ;; #+1073741824
   \   000000B4   4863               STR      R0,[R1, #+52]
   \   000000B6   2320               MOVS     R0,#+35
   \   000000B8   ........           BL       Delay
   \   000000BC   6068               LDR      R0,[R4, #+4]
   \   000000BE   8021               MOVS     R1,#+128
   \   000000C0   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   000000C2   0163               STR      R1,[R0, #+48]
   \   000000C4   ....               LDR      R1,??DataTable7  ;; 0x7e00811c
   \   000000C6   0163               STR      R1,[R0, #+48]
    129                  Delay(1);
   \   000000C8   0120               MOVS     R0,#+1
   \   000000CA   ........           BL       Delay
    130                  for (lcdData=(64*chipSelect-64); lcdData<(64*chipSelect); lcdData++)
   \   000000CE   2078               LDRB     R0,[R4, #+0]
   \   000000D0   8701               LSLS     R7,R0,#+6
   \   000000D2   403F               SUBS     R7,R7,#+64
   \   000000D4   06E0               B.N      ??RepaintLCD_6
    131                  {
    132                    
    133                    at91DisplayData(LCD_Canvas[lcdStartPage][lcdData]);
   \                     ??RepaintLCD_7:
   \   000000D6   F05D               LDRB     R0,[R6, R7]
   \   000000D8   ........           BL       at91DisplayData
    134                    Delay(1);
   \   000000DC   0120               MOVS     R0,#+1
   \   000000DE   ........           BL       Delay
    135                  }
   \   000000E2   7F1C               ADDS     R7,R7,#+1
   \                     ??RepaintLCD_6:
   \   000000E4   3F06               LSLS     R7,R7,#+24
   \   000000E6   3F0E               LSRS     R7,R7,#+24
   \   000000E8   2078               LDRB     R0,[R4, #+0]
   \   000000EA   8001               LSLS     R0,R0,#+6
   \   000000EC   8742               CMP      R7,R0
   \   000000EE   F2DB               BLT      ??RepaintLCD_7
    136                }
   \   000000F0   6D1C               ADDS     R5,R5,#+1
   \   000000F2   8036               ADDS     R6,R6,#+128
   \   000000F4   2806               LSLS     R0,R5,#+24
   \   000000F6   000E               LSRS     R0,R0,#+24
   \   000000F8   0828               CMP      R0,#+8
   \   000000FA   B7D3               BCC      ??RepaintLCD_5
    137           //}
    138           
    139            AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
   \   000000FC   ....               LDR      R0,??DataTable8  ;; 0xfffff430
   \   000000FE   1021               MOVS     R1,#+16
   \   00000100   0160               STR      R1,[R0, #+0]
   \   00000102   0348               LDR      R0,??RepaintLCD_0  ;; 0xfffff434
   \   00000104   0160               STR      R1,[R0, #+0]
    140          }//_______________________ Koniec funkcji RepaintLCD __________________________
   \   00000106   01B0               ADD      SP,SP,#+4
   \   00000108   F0BC               POP      {R4-R7}
   \   0000010A   01BC               POP      {R0}
   \   0000010C   0047               BX       R0               ;; return
   \   0000010E   C046               Nop      
   \                     ??RepaintLCD_0:
   \   00000110   34F4FFFF           DC32     0xfffff434
    141          
    142          
    143          
    144          
    145          
    146          
    147          //*-----------------------------------------------------------------------------
    148          //* Nazwa funkcji :    CleanCanvas
    149          //* Funkcja czyszczenia bufora ekranu. 
    150          //*-----------------------------------------------------------------------------
    151          //* Efekt widoczny po odœwierzeniu LCD (RepaintLCD)
    152          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    153          void CleanCanvas(void)
    154          {
   \                     CleanCanvas:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    155            for (int i=0; i<=7; i++)
   \   00000002   ....               LDR      R4,??DataTable15  ;; LCD_Canvas
   \   00000004   0825               MOVS     R5,#+8
    156            {
    157              for (int j=0; j<=127; j++)
    158              {
    159                LCD_Canvas[i][j] =0; 
   \                     ??CleanCanvas_0:
   \   00000006   8021               MOVS     R1,#+128
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   ........           BL       __aeabi_memclr
    160              }
    161            }
   \   0000000E   8034               ADDS     R4,R4,#+128
   \   00000010   6D1E               SUBS     R5,R5,#+1
   \   00000012   F8D1               BNE      ??CleanCanvas_0
    162          }//_______________________ Koniec funkcji CleanCanvas __________________________
   \   00000014   01B0               ADD      SP,SP,#+4
   \   00000016   30BC               POP      {R4,R5}
   \   00000018   01BC               POP      {R0}
   \   0000001A   0047               BX       R0               ;; return
    163          
    164          
    165          
    166          
    167          
    168          //*-----------------------------------------------------------------------------
    169          //* Nazwa funkcji :    HalfCleanCanvas
    170          //* Funkcja szatkowania bufora ekranu. 
    171          //*-----------------------------------------------------------------------------
    172          //* Efekt widoczny po odœwierzeniu LCD (RepaintLCD)
    173          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    174          void HalfCleanCanvas(void)
    175          {
   \                     HalfCleanCanvas:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    176            for (int i=0; i<=7; i++)
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   ....               LDR      R1,??DataTable15  ;; LCD_Canvas
   \   00000006   5522               MOVS     R2,#+85
   \   00000008   AA23               MOVS     R3,#+170
    177            {
    178              for (int j=0; j<=127; j++)
   \                     ??HalfCleanCanvas_0:
   \   0000000A   0400               MOVS     R4,R0
   \   0000000C   8025               MOVS     R5,#+128
    179              {
    180                if ((j+i)%2) 
   \                     ??HalfCleanCanvas_1:
   \   0000000E   0E78               LDRB     R6,[R1, #+0]
   \   00000010   E70F               LSRS     R7,R4,#+31
   \   00000012   3F19               ADDS     R7,R7,R4
   \   00000014   7F10               ASRS     R7,R7,#+1
   \   00000016   7F00               LSLS     R7,R7,#+1
   \   00000018   E71B               SUBS     R7,R4,R7
   \   0000001A   01D0               BEQ      ??HalfCleanCanvas_2
    181                {
    182                  LCD_Canvas[i][j] &=0xAA; 
   \   0000001C   1E40               ANDS     R6,R6,R3
   \   0000001E   00E0               B        ??HalfCleanCanvas_3
    183                }
    184                else
    185                {
    186                  LCD_Canvas[i][j] &=0x55; 
   \                     ??HalfCleanCanvas_2:
   \   00000020   1640               ANDS     R6,R6,R2
   \                     ??HalfCleanCanvas_3:
   \   00000022   0E70               STRB     R6,[R1, #+0]
    187                } 
    188              }
   \   00000024   491C               ADDS     R1,R1,#+1
   \   00000026   641C               ADDS     R4,R4,#+1
   \   00000028   6D1E               SUBS     R5,R5,#+1
   \   0000002A   F0D1               BNE      ??HalfCleanCanvas_1
    189            }
   \   0000002C   401C               ADDS     R0,R0,#+1
   \   0000002E   0828               CMP      R0,#+8
   \   00000030   EBDB               BLT      ??HalfCleanCanvas_0
    190          }//_______________________ Koniec funkcji HalfCleanCanvas __________________________
   \   00000032   01B0               ADD      SP,SP,#+4
   \   00000034   F0BC               POP      {R4-R7}
   \   00000036   01BC               POP      {R0}
   \   00000038   0047               BX       R0               ;; return
    191          
    192          
    193          
    194          //*-----------------------------------------------------------------------------
    195          //* Nazwa funkcji :    CleanCanvasArea
    196          //* Funkcja czyszczenia okreœlonego obszaru
    197          //* Colour  -  0= bia³y, 1=czarny
    198          //*-----------------------------------------------------------------------------
    199          //* Efekt widoczny po odœwierzeniu LCD (RepaintLCD)
    200          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    201          void CleanCanvasArea(char X, char Y, char X_Lenght, char Y_Lenght, char Colour)
    202          {
   \                     CleanCanvasArea:
   \   00000000   F5B5               PUSH     {R0,R2,R4-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0AA8               ADD      R0,SP,#+40
   \   00000006   0078               LDRB     R0,[R0, #+0]
    203          
    204            char kol=0;
    205            char bit=0;
    206            char linia=Y;
    207            
    208          if ( Colour == 0 )
   \   00000008   5A1E               SUBS     R2,R3,#+1
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   2ED1               BNE      ??CleanCanvasArea_0
    209          {
    210            for (int i=0; i<=Y_Lenght-1; i++)
   \   0000000E   002A               CMP      R2,#+0
   \   00000010   5AD4               BMI      ??CleanCanvasArea_1
   \   00000012   ....               LDR      R0,??DataTable15  ;; LCD_Canvas
   \   00000014   4218               ADDS     R2,R0,R1
   \   00000016   6846               MOV      R0,SP
   \   00000018   6946               MOV      R1,SP
   \   0000001A   097B               LDRB     R1,[R1, #+12]
   \   0000001C   CC08               LSRS     R4,R1,#+3
   \   0000001E   E400               LSLS     R4,R4,#+3
   \   00000020   091B               SUBS     R1,R1,R4
   \   00000022   0170               STRB     R1,[R0, #+0]
   \   00000024   007C               LDRB     R0,[R0, #+16]
   \   00000026   401E               SUBS     R0,R0,#+1
   \   00000028   0190               STR      R0,[SP, #+4]
   \   0000002A   08E0               B        ??CleanCanvasArea_2
    211             { 
    212               kol=(X)/8;
    213               bit=(X)%8;
    214               
    215          
    216              
    217               for (int j=0; j<=X_Lenght-1; j++)
    218                {
    219                     LCD_Canvas[kol][linia] &=~(1<<bit);  
    220                     if (bit<7)  { bit++;}  else {bit=0;   kol++;  }
   \                     ??CleanCanvasArea_3:
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   0006               LSLS     R0,R0,#+24
   \   00000032   000E               LSRS     R0,R0,#+24
   \                     ??CleanCanvasArea_4:
   \   00000034   641E               SUBS     R4,R4,#+1
   \   00000036   0CD1               BNE      ??CleanCanvasArea_5
    221                }   
    222                linia++;
   \                     ??CleanCanvasArea_6:
   \   00000038   521C               ADDS     R2,R2,#+1
   \   0000003A   5B1E               SUBS     R3,R3,#+1
   \   0000003C   44D0               BEQ      ??CleanCanvasArea_1
   \                     ??CleanCanvasArea_2:
   \   0000003E   6846               MOV      R0,SP
   \   00000040   007B               LDRB     R0,[R0, #+12]
   \   00000042   C008               LSRS     R0,R0,#+3
   \   00000044   6946               MOV      R1,SP
   \   00000046   0978               LDRB     R1,[R1, #+0]
   \   00000048   019C               LDR      R4,[SP, #+4]
   \   0000004A   002C               CMP      R4,#+0
   \   0000004C   F4D4               BMI      ??CleanCanvasArea_6
   \   0000004E   6C46               MOV      R4,SP
   \   00000050   247C               LDRB     R4,[R4, #+16]
   \                     ??CleanCanvasArea_5:
   \   00000052   C501               LSLS     R5,R0,#+7
   \   00000054   5519               ADDS     R5,R2,R5
   \   00000056   2E78               LDRB     R6,[R5, #+0]
   \   00000058   0127               MOVS     R7,#+1
   \   0000005A   8F40               LSLS     R7,R7,R1
   \   0000005C   BE43               BICS     R6,R6,R7
   \   0000005E   2E70               STRB     R6,[R5, #+0]
   \   00000060   0906               LSLS     R1,R1,#+24
   \   00000062   090E               LSRS     R1,R1,#+24
   \   00000064   0729               CMP      R1,#+7
   \   00000066   E1D2               BCS      ??CleanCanvasArea_3
   \   00000068   491C               ADDS     R1,R1,#+1
   \   0000006A   E3E7               B        ??CleanCanvasArea_4
    223             }
    224          }
    225          else
    226          {
    227            for (int i=0; i<=Y_Lenght-1; i++)
   \                     ??CleanCanvasArea_0:
   \   0000006C   002A               CMP      R2,#+0
   \   0000006E   2BD4               BMI      ??CleanCanvasArea_1
   \   00000070   ....               LDR      R0,??DataTable15  ;; LCD_Canvas
   \   00000072   4218               ADDS     R2,R0,R1
   \   00000074   6846               MOV      R0,SP
   \   00000076   6946               MOV      R1,SP
   \   00000078   097B               LDRB     R1,[R1, #+12]
   \   0000007A   CC08               LSRS     R4,R1,#+3
   \   0000007C   E400               LSLS     R4,R4,#+3
   \   0000007E   091B               SUBS     R1,R1,R4
   \   00000080   0170               STRB     R1,[R0, #+0]
   \   00000082   007C               LDRB     R0,[R0, #+16]
   \   00000084   401E               SUBS     R0,R0,#+1
   \   00000086   0190               STR      R0,[SP, #+4]
    228             { 
    229               kol=(X)/8;
   \                     ??CleanCanvasArea_7:
   \   00000088   6846               MOV      R0,SP
   \   0000008A   007B               LDRB     R0,[R0, #+12]
   \   0000008C   C008               LSRS     R0,R0,#+3
    230               bit=(X)%8;
   \   0000008E   6946               MOV      R1,SP
   \   00000090   0978               LDRB     R1,[R1, #+0]
    231               
    232               for (int j=0; j<=X_Lenght-1; j++)
   \   00000092   019C               LDR      R4,[SP, #+4]
   \   00000094   002C               CMP      R4,#+0
   \   00000096   14D4               BMI      ??CleanCanvasArea_8
   \   00000098   6C46               MOV      R4,SP
   \   0000009A   247C               LDRB     R4,[R4, #+16]
    233                {
    234                     LCD_Canvas[kol][linia] |=(1<<bit);  
   \                     ??CleanCanvasArea_9:
   \   0000009C   C501               LSLS     R5,R0,#+7
   \   0000009E   5519               ADDS     R5,R2,R5
   \   000000A0   2E78               LDRB     R6,[R5, #+0]
   \   000000A2   0127               MOVS     R7,#+1
   \   000000A4   8F40               LSLS     R7,R7,R1
   \   000000A6   3743               ORRS     R7,R7,R6
   \   000000A8   2F70               STRB     R7,[R5, #+0]
    235                     if (bit<7)  { bit++;}  else {bit=0;   kol++;  }
   \   000000AA   0906               LSLS     R1,R1,#+24
   \   000000AC   090E               LSRS     R1,R1,#+24
   \   000000AE   0729               CMP      R1,#+7
   \   000000B0   01D2               BCS      ??CleanCanvasArea_10
   \   000000B2   491C               ADDS     R1,R1,#+1
   \   000000B4   03E0               B        ??CleanCanvasArea_11
   \                     ??CleanCanvasArea_10:
   \   000000B6   0021               MOVS     R1,#+0
   \   000000B8   401C               ADDS     R0,R0,#+1
   \   000000BA   0006               LSLS     R0,R0,#+24
   \   000000BC   000E               LSRS     R0,R0,#+24
    236                }   
   \                     ??CleanCanvasArea_11:
   \   000000BE   641E               SUBS     R4,R4,#+1
   \   000000C0   ECD1               BNE      ??CleanCanvasArea_9
    237                linia++;
    238             }
   \                     ??CleanCanvasArea_8:
   \   000000C2   521C               ADDS     R2,R2,#+1
   \   000000C4   5B1E               SUBS     R3,R3,#+1
   \   000000C6   DFD1               BNE      ??CleanCanvasArea_7
    239          }
    240            
    241          }//_______________________ Koniec funkcji CleanCanvasArea __________________________
   \                     ??CleanCanvasArea_1:
   \   000000C8   05B0               ADD      SP,SP,#+20
   \   000000CA   F0BC               POP      {R4-R7}
   \   000000CC   01BC               POP      {R0}
   \   000000CE   0047               BX       R0               ;; return
    242          
    243          
    244          
    245          
    246          //*-----------------------------------------------------------------------------
    247          //* Nazwa funkcji :    CleanCanvasArea
    248          //* Funkcja czyszczenia okreœlonego obszaru
    249          //* Colour  -  0= bia³y, 1=czarny
    250          //*-----------------------------------------------------------------------------
    251          //* Efekt widoczny po odœwierzeniu LCD (RepaintLCD)
    252          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    253          void CanvasPixel(char X, char Y, char Colour)
    254          {
   \                     CanvasPixel:
   \   00000000   10B5               PUSH     {R4,LR}
    255               char kol=(X)/8;
   \   00000002   C308               LSRS     R3,R0,#+3
    256               char bit=(X)%8;
   \   00000004   DC00               LSLS     R4,R3,#+3
   \   00000006   001B               SUBS     R0,R0,R4
   \   00000008   0006               LSLS     R0,R0,#+24
   \   0000000A   000E               LSRS     R0,R0,#+24
    257               
    258               if ( Colour == 0 )
   \   0000000C   002A               CMP      R2,#+0
   \   0000000E   09D1               BNE      ??CanvasPixel_0
    259               {
    260                 LCD_Canvas[kol][Y] &=~(1<<bit); 
   \   00000010   DA01               LSLS     R2,R3,#+7
   \   00000012   ....               LDR      R3,??DataTable15  ;; LCD_Canvas
   \   00000014   9A18               ADDS     R2,R3,R2
   \   00000016   5118               ADDS     R1,R2,R1
   \   00000018   0A78               LDRB     R2,[R1, #+0]
   \   0000001A   0123               MOVS     R3,#+1
   \   0000001C   8340               LSLS     R3,R3,R0
   \   0000001E   9A43               BICS     R2,R2,R3
   \   00000020   0A70               STRB     R2,[R1, #+0]
   \   00000022   08E0               B        ??CanvasPixel_1
    261               }
    262               else
    263               {
    264                 LCD_Canvas[kol][Y] |=(1<<bit);  
   \                     ??CanvasPixel_0:
   \   00000024   DA01               LSLS     R2,R3,#+7
   \   00000026   ....               LDR      R3,??DataTable15  ;; LCD_Canvas
   \   00000028   9A18               ADDS     R2,R3,R2
   \   0000002A   5118               ADDS     R1,R2,R1
   \   0000002C   0A78               LDRB     R2,[R1, #+0]
   \   0000002E   0123               MOVS     R3,#+1
   \   00000030   8340               LSLS     R3,R3,R0
   \   00000032   1343               ORRS     R3,R3,R2
   \   00000034   0B70               STRB     R3,[R1, #+0]
    265               }
    266          }//_______________________ Koniec funkcji CleanCanvasArea __________________________
   \                     ??CanvasPixel_1:
   \   00000036   10BC               POP      {R4}
   \   00000038   01BC               POP      {R0}
   \   0000003A   0047               BX       R0               ;; return
    267          
    268          
    269          
    270          
    271          
    272          
    273          //*-----------------------------------------------------------------------------
    274          //* Nazwa funkcji :    CopyToCanvas
    275          //* Funkcja kopiowania dowolnej tablicy[8][128] do bufora wyœwietlacza 
    276          //*-----------------------------------------------------------------------------
    277          //* Efekt widoczny po odœwierzeniu LCD (RepaintLCD)
    278          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    279          void CopyToCanvas(char Tabela[8][128])
    280          {
   \                     CopyToCanvas:
   \   00000000   01B5               PUSH     {R0,LR}
    281            for (int i=0; i<=7; i++)
   \   00000002   ....               LDR      R1,??DataTable15  ;; LCD_Canvas
   \   00000004   8022               MOVS     R2,#+128
   \   00000006   5200               LSLS     R2,R2,#+1        ;; #+256
    282            {
    283              for (int j=0; j<=127; j++)
    284              {
    285                LCD_Canvas[i][j] =Tabela[i][j]; 
   \                     ??CopyToCanvas_0:
   \   00000008   0378               LDRB     R3,[R0, #+0]
   \   0000000A   0B70               STRB     R3,[R1, #+0]
   \   0000000C   4378               LDRB     R3,[R0, #+1]
   \   0000000E   4B70               STRB     R3,[R1, #+1]
   \   00000010   8378               LDRB     R3,[R0, #+2]
   \   00000012   8B70               STRB     R3,[R1, #+2]
   \   00000014   C378               LDRB     R3,[R0, #+3]
   \   00000016   CB70               STRB     R3,[R1, #+3]
    286              }
   \   00000018   001D               ADDS     R0,R0,#+4
   \   0000001A   091D               ADDS     R1,R1,#+4
    287            }
   \   0000001C   521E               SUBS     R2,R2,#+1
   \   0000001E   F3D1               BNE      ??CopyToCanvas_0
    288          }//_______________________ Koniec funkcji CopyToCanvas __________________________
   \   00000020   01B0               ADD      SP,SP,#+4
   \   00000022   01BC               POP      {R0}
   \   00000024   0047               BX       R0               ;; return
    289          
    290          
    291          
    292          
    293          
    294          
    295          //*-----------------------------------------------------------------------------
    296          //* Nazwa funkcji :    CopyToCanvas
    297          //* Funkcja kopiowania dowolnej tablicy[8][128] do bufora wyœwietlacza 
    298          //*-----------------------------------------------------------------------------
    299          //* Efekt widoczny po odœwierzeniu LCD (RepaintLCD)
    300          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    301          void CopyToCanvasPoint(char *Tabela, char X, char Y, char X_Lenght, char Y_Lenght)
    302          {
   \                     CopyToCanvasPoint:
   \   00000000   FBB5               PUSH     {R0,R1,R3-R7,LR}
   \   00000002   86B0               SUB      SP,SP,#+24
    303          
    304            char kol=0;
    305            char bit=0;
    306            char kol2=0;
    307            char bit2=0;
    308            char linia=Y;
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   0090               STR      R0,[SP, #+0]
   \   00000008   0EA8               ADD      R0,SP,#+56
   \   0000000A   0078               LDRB     R0,[R0, #+0]
   \   0000000C   401E               SUBS     R0,R0,#+1
   \   0000000E   0290               STR      R0,[SP, #+8]
   \   00000010   56D4               BMI      ??CopyToCanvasPoint_0
   \   00000012   2D48               LDR      R0,??CopyToCanvasPoint_1  ;; LCD_Canvas
   \   00000014   8018               ADDS     R0,R0,R2
   \   00000016   0190               STR      R0,[SP, #+4]
   \   00000018   0800               MOVS     R0,R1
   \   0000001A   C108               LSRS     R1,R0,#+3
   \   0000001C   C900               LSLS     R1,R1,#+3
   \   0000001E   401A               SUBS     R0,R0,R1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \   00000024   0390               STR      R0,[SP, #+12]
   \   00000026   1800               MOVS     R0,R3
   \   00000028   401E               SUBS     R0,R0,#+1
   \   0000002A   0490               STR      R0,[SP, #+16]
    309            
    310            for (int i=0; i<=Y_Lenght-1; i++)
    311             {
    312          
    313               
    314               kol=(X)/8;
   \                     ??CopyToCanvasPoint_2:
   \   0000002C   6846               MOV      R0,SP
   \   0000002E   007F               LDRB     R0,[R0, #+28]
   \   00000030   C008               LSRS     R0,R0,#+3
    315               bit=(X)%8;
   \   00000032   0399               LDR      R1,[SP, #+12]
    316               
    317               kol2=0;
   \   00000034   0022               MOVS     R2,#+0
    318               bit2=0;
   \   00000036   0023               MOVS     R3,#+0
    319                 
    320               for (int j=0; j<=X_Lenght-1; j++)
   \   00000038   049C               LDR      R4,[SP, #+16]
   \   0000003A   002C               CMP      R4,#+0
   \   0000003C   36D4               BMI      ??CopyToCanvasPoint_3
   \   0000003E   08AC               ADD      R4,SP,#+32
   \   00000040   2478               LDRB     R4,[R4, #+0]
    321                {
    322                   if (((Tabela[(kol2*Y_Lenght)+(i)]>>bit2)&0x1)>0)
   \                     ??CopyToCanvasPoint_4:
   \   00000042   1206               LSLS     R2,R2,#+24
   \   00000044   120E               LSRS     R2,R2,#+24
   \   00000046   0EAD               ADD      R5,SP,#+56
   \   00000048   2D78               LDRB     R5,[R5, #+0]
   \   0000004A   5543               MULS     R5,R2,R5
   \   0000004C   009E               LDR      R6,[SP, #+0]
   \   0000004E   AD19               ADDS     R5,R5,R6
   \   00000050   069E               LDR      R6,[SP, #+24]
   \   00000052   755D               LDRB     R5,[R6, R5]
   \   00000054   1D41               ASRS     R5,R5,R3
   \   00000056   0126               MOVS     R6,#+1
   \   00000058   2E40               ANDS     R6,R6,R5
   \   0000005A   012E               CMP      R6,#+1
   \   0000005C   08DB               BLT      ??CopyToCanvasPoint_5
    323                    {
    324                       
    325                       LCD_Canvas[kol][linia] |=(1<<bit); 
   \   0000005E   C501               LSLS     R5,R0,#+7
   \   00000060   019E               LDR      R6,[SP, #+4]
   \   00000062   7519               ADDS     R5,R6,R5
   \   00000064   2E78               LDRB     R6,[R5, #+0]
   \   00000066   0127               MOVS     R7,#+1
   \   00000068   8F40               LSLS     R7,R7,R1
   \   0000006A   3743               ORRS     R7,R7,R6
   \   0000006C   2F70               STRB     R7,[R5, #+0]
   \   0000006E   07E0               B        ??CopyToCanvasPoint_6
    326                    }
    327                    else
    328                    {
    329                       LCD_Canvas[kol][linia] &=~(1<<bit);  
   \                     ??CopyToCanvasPoint_5:
   \   00000070   C501               LSLS     R5,R0,#+7
   \   00000072   019E               LDR      R6,[SP, #+4]
   \   00000074   7519               ADDS     R5,R6,R5
   \   00000076   2E78               LDRB     R6,[R5, #+0]
   \   00000078   0127               MOVS     R7,#+1
   \   0000007A   8F40               LSLS     R7,R7,R1
   \   0000007C   BE43               BICS     R6,R6,R7
   \   0000007E   2E70               STRB     R6,[R5, #+0]
    330                    }
    331                   
    332            
    333                     if (bit<7)  { bit++;}  else {bit=0;   kol++;  }
   \                     ??CopyToCanvasPoint_6:
   \   00000080   0D06               LSLS     R5,R1,#+24
   \   00000082   2D0E               LSRS     R5,R5,#+24
   \   00000084   072D               CMP      R5,#+7
   \   00000086   03D2               BCS      ??CopyToCanvasPoint_7
   \   00000088   491C               ADDS     R1,R1,#+1
   \   0000008A   0906               LSLS     R1,R1,#+24
   \   0000008C   090E               LSRS     R1,R1,#+24
   \   0000008E   03E0               B        ??CopyToCanvasPoint_8
   \                     ??CopyToCanvasPoint_7:
   \   00000090   0021               MOVS     R1,#+0
   \   00000092   401C               ADDS     R0,R0,#+1
   \   00000094   0006               LSLS     R0,R0,#+24
   \   00000096   000E               LSRS     R0,R0,#+24
    334                     if (bit2<7) { bit2++;} else {bit2=0;  kol2++; }           
   \                     ??CopyToCanvasPoint_8:
   \   00000098   1B06               LSLS     R3,R3,#+24
   \   0000009A   1B0E               LSRS     R3,R3,#+24
   \   0000009C   072B               CMP      R3,#+7
   \   0000009E   01D2               BCS      ??CopyToCanvasPoint_9
   \   000000A0   5B1C               ADDS     R3,R3,#+1
   \   000000A2   01E0               B        ??CopyToCanvasPoint_10
   \                     ??CopyToCanvasPoint_9:
   \   000000A4   0023               MOVS     R3,#+0
   \   000000A6   521C               ADDS     R2,R2,#+1
    335                }   
   \                     ??CopyToCanvasPoint_10:
   \   000000A8   641E               SUBS     R4,R4,#+1
   \   000000AA   CAD1               BNE      ??CopyToCanvasPoint_4
    336               
    337                linia++;
    338             }
   \                     ??CopyToCanvasPoint_3:
   \   000000AC   0098               LDR      R0,[SP, #+0]
   \   000000AE   401C               ADDS     R0,R0,#+1
   \   000000B0   0090               STR      R0,[SP, #+0]
   \   000000B2   0198               LDR      R0,[SP, #+4]
   \   000000B4   401C               ADDS     R0,R0,#+1
   \   000000B6   0190               STR      R0,[SP, #+4]
   \   000000B8   0298               LDR      R0,[SP, #+8]
   \   000000BA   0099               LDR      R1,[SP, #+0]
   \   000000BC   8842               CMP      R0,R1
   \   000000BE   B5DA               BGE      ??CopyToCanvasPoint_2
    339          
    340          }//_______________________ Koniec funkcji CopyToCanvas __________________________
   \                     ??CopyToCanvasPoint_0:
   \   000000C0   09B0               ADD      SP,SP,#+36
   \   000000C2   F0BC               POP      {R4-R7}
   \   000000C4   01BC               POP      {R0}
   \   000000C6   0047               BX       R0               ;; return
   \                     ??CopyToCanvasPoint_1:
   \   000000C8   ........           DC32     LCD_Canvas
    341          
    342          
    343          
    344          
    345          //*-----------------------------------------------------------------------------
    346          //* Nazwa funkcji :    at91DisplayOnOff
    347          //* Funkcja za³¹czania/wy³¹czania LCD
    348          //*-----------------------------------------------------------------------------
    349          //////////////////////////////////////////////////////
    350          // R/W  D/I  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    351          //  RW   DI  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    352          //   0    0    0    0    1    1    1    1    1    D //
    353          //                                                  //
    354          // on_off - "0" - OFF                               //
    355          //        - "1" - ON                                //
    356          //////////////////////////////////////////////////////
    357          //*-----------------------------------------------------------------------------
    358          

   \                                 In section Debug.txt, align 4, keep-with-next
    359           void at91DisplayOnOff(char on_off)
    360           {
   \                     at91DisplayOnOff:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    361              m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // zeruje piny
   \   00000002   0C4C               LDR      R4,??at91DisplayOnOff_0  ;; chipSelect
   \   00000004   6168               LDR      R1,[R4, #+4]
   \   00000006   0C4D               LDR      R5,??at91DisplayOnOff_0+0x4  ;; 0x7e00811c
   \   00000008   0D63               STR      R5,[R1, #+48]
    362          
    363             
    364              //m_pPio->PIO_CODR = DB5 | DB4 | DB3 | DB2 | DB1 | on_off << 3;  // "1" na wyœwietlaczu
    365             if (on_off)
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   01D0               BEQ      ??at91DisplayOnOff_1
    366             {
    367                m_pPio->PIO_CODR = DB5 | DB4 | DB3 | DB2 | DB1 | DB0;  // "1" na wyœwietlaczu
   \   0000000E   0B48               LDR      R0,??at91DisplayOnOff_0+0x8  ;; 0x3c000110
   \   00000010   00E0               B.N      ??at91DisplayOnOff_2
    368             }
    369             else
    370             {
    371                m_pPio->PIO_CODR = DB5 | DB4 | DB3 | DB2 | DB1 | (DB0 & 0);  // "1" na wyœwietlaczu 
   \                     ??at91DisplayOnOff_1:
   \   00000012   0B48               LDR      R0,??at91DisplayOnOff_0+0xC  ;; 0x1c000110
   \                     ??at91DisplayOnOff_2:
   \   00000014   4863               STR      R0,[R1, #+52]
    372             }
    373             
    374             m_pPio->PIO_SODR = DI | RW;
   \   00000016   0C20               MOVS     R0,#+12
   \   00000018   0863               STR      R0,[R1, #+48]
    375              m_pPio->PIO_CODR = ENABLE;
   \   0000001A   8026               MOVS     R6,#+128
   \   0000001C   F605               LSLS     R6,R6,#+23       ;; #+1073741824
   \   0000001E   4E63               STR      R6,[R1, #+52]
    376              Delay(2);
   \   00000020   0220               MOVS     R0,#+2
   \   00000022   ........           BL       Delay
    377              m_pPio->PIO_SODR = ENABLE;
   \   00000026   6068               LDR      R0,[R4, #+4]
   \   00000028   0663               STR      R6,[R0, #+48]
    378             m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // "0" na wyœwietlaczu
   \   0000002A   0563               STR      R5,[R0, #+48]
    379          
    380          }//_______________________ Koniec funkcji at91DisplayOnOff ______________________
   \   0000002C   70BC               POP      {R4-R6}
   \   0000002E   01BC               POP      {R0}
   \   00000030   0047               BX       R0               ;; return
   \   00000032   C046               Nop      
   \                     ??at91DisplayOnOff_0:
   \   00000034   ........           DC32     chipSelect
   \   00000038   1C81007E           DC32     0x7e00811c
   \   0000003C   1001003C           DC32     0x3c000110
   \   00000040   1001001C           DC32     0x1c000110
    381           
    382           
    383          
    384          
    385          
    386          
    387          
    388           
    389          //*-----------------------------------------------------------------------------
    390          //* Nazwa funkcji :    at91DisplayStartLine
    391          //* Funkcja ustawienia lini startowej
    392          //*-----------------------------------------------------------------------------
    393          //////////////////////////////////////////////////////
    394          // R/W  D/I  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    395          //  RW   DI  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    396          //   0    0    1    1    A    A    A    A    A    A //
    397          //                                                  //
    398          // AAAAAA - przesuniêcie w górê strony testowej     //
    399          //////////////////////////////////////////////////////
    400          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    401           void at91DisplayStartLine(void)
    402           {
   \                     at91DisplayStartLine:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    403             m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // zeruje piny
   \   00000002   0A4E               LDR      R6,??at91DisplayStartLine_0  ;; chipSelect
   \   00000004   7068               LDR      R0,[R6, #+4]
   \   00000006   0A4C               LDR      R4,??at91DisplayStartLine_0+0x4  ;; 0x7e00811c
   \   00000008   0463               STR      R4,[R0, #+48]
    404          
    405             
    406              m_pPio->PIO_CODR =  DB7 | DB6 ;  // "1" na wyœwietlaczu
   \   0000000A   0A49               LDR      R1,??at91DisplayStartLine_0+0x8  ;; 0x2008000
   \   0000000C   4163               STR      R1,[R0, #+52]
    407              m_pPio->PIO_SODR = DI | RW;
   \   0000000E   0C21               MOVS     R1,#+12
   \   00000010   0163               STR      R1,[R0, #+48]
    408              m_pPio->PIO_CODR = ENABLE;
   \   00000012   8025               MOVS     R5,#+128
   \   00000014   ED05               LSLS     R5,R5,#+23       ;; #+1073741824
   \   00000016   4563               STR      R5,[R0, #+52]
    409              Delay(2);
   \   00000018   0220               MOVS     R0,#+2
   \   0000001A   ........           BL       Delay
    410              m_pPio->PIO_SODR = ENABLE;
   \   0000001E   7068               LDR      R0,[R6, #+4]
   \   00000020   0563               STR      R5,[R0, #+48]
    411              m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // "0" na wyœwietlaczu
   \   00000022   0463               STR      R4,[R0, #+48]
    412          
    413          }//_____________________ Koniec funkcji at91DisplayStartLine ___________________
   \   00000024   70BC               POP      {R4-R6}
   \   00000026   01BC               POP      {R0}
   \   00000028   0047               BX       R0               ;; return
   \   0000002A   C046               Nop      
   \                     ??at91DisplayStartLine_0:
   \   0000002C   ........           DC32     chipSelect
   \   00000030   1C81007E           DC32     0x7e00811c
   \   00000034   00800002           DC32     0x2008000
    414          
    415          
    416          
    417          
    418          
    419          
    420          
    421          
    422           
    423          //*-----------------------------------------------------------------------------
    424          //* Nazwa funkcji :    at91DisplayStartPage
    425          //* Funkcja ustawienia strony
    426          //*-----------------------------------------------------------------------------
    427          //////////////////////////////////////////////////////
    428          // R/W  D/I  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    429          //  RW   DI  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    430          //   0    0    1    0    1    1    1    A    A    A //
    431          //                                                  //
    432          // AAA - numer zapisywanej strony                   //
    433          //////////////////////////////////////////////////////
    434          //*-----------------------------------------------------------------------------
    435          

   \                                 In section Debug.txt, align 4, keep-with-next
    436           void at91DisplayStartPage(char lcd_start_page)
    437           {
   \                     at91DisplayStartPage:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0100               MOVS     R1,R0
    438              char data=lcd_start_page; 
    439              
    440              m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // zeruje piny
   \   00000004   164C               LDR      R4,??at91DisplayStartPage_0  ;; chipSelect
   \   00000006   6268               LDR      R2,[R4, #+4]
   \   00000008   164D               LDR      R5,??at91DisplayStartPage_0+0x4  ;; 0x7e00811c
   \   0000000A   1563               STR      R5,[R2, #+48]
    441          
    442                
    443              //m_pPio->PIO_CODR = DB7 | DB5 | DB4 | DB3 | lcd_start_page << 3;  // "1" na wyœwietlaczu
    444              m_pPio->PIO_CODR = DB7 | DB5 | DB4 | DB3 | (DB2*((data>>2)&0x1)) | (DB1*((data>>1)&0x1)) | (DB0*((data>>0)&0x1)) ;  // "1" na wyœwietlaczu
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   0120               MOVS     R0,#+1
   \   00000010   8F08               LSRS     R7,R1,#+2
   \   00000012   0600               MOVS     R6,R0
   \   00000014   3E40               ANDS     R6,R6,R7
   \   00000016   1B27               MOVS     R7,#+27
   \   00000018   7E43               MULS     R6,R7,R6
   \   0000001A   B040               LSLS     R0,R0,R6
   \   0000001C   8446               MOV      R12,R0
   \   0000001E   1E00               MOVS     R6,R3
   \   00000020   4F08               LSRS     R7,R1,#+1
   \   00000022   1800               MOVS     R0,R3
   \   00000024   3840               ANDS     R0,R0,R7
   \   00000026   1C27               MOVS     R7,#+28
   \   00000028   7843               MULS     R0,R7,R0
   \   0000002A   8640               LSLS     R6,R6,R0
   \   0000002C   6046               MOV      R0,R12
   \   0000002E   0643               ORRS     R6,R6,R0
   \   00000030   1800               MOVS     R0,R3
   \   00000032   0B40               ANDS     R3,R3,R1
   \   00000034   1D21               MOVS     R1,#+29
   \   00000036   4B43               MULS     R3,R1,R3
   \   00000038   9840               LSLS     R0,R0,R3
   \   0000003A   3043               ORRS     R0,R0,R6
   \   0000003C   0A49               LDR      R1,??at91DisplayStartPage_0+0x8  ;; 0x4008110
   \   0000003E   0143               ORRS     R1,R1,R0
   \   00000040   5163               STR      R1,[R2, #+52]
    445              m_pPio->PIO_SODR = DI | RW;
   \   00000042   0C20               MOVS     R0,#+12
   \   00000044   1063               STR      R0,[R2, #+48]
    446              m_pPio->PIO_CODR = ENABLE;
   \   00000046   8026               MOVS     R6,#+128
   \   00000048   F605               LSLS     R6,R6,#+23       ;; #+1073741824
   \   0000004A   5663               STR      R6,[R2, #+52]
    447              Delay(LCD_delay);
   \   0000004C   2320               MOVS     R0,#+35
   \   0000004E   ........           BL       Delay
    448              m_pPio->PIO_SODR = ENABLE;
   \   00000052   6068               LDR      R0,[R4, #+4]
   \   00000054   0663               STR      R6,[R0, #+48]
    449             m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // "0" na wyœwietlaczu
   \   00000056   0563               STR      R5,[R0, #+48]
    450          
    451          }//_____________________ Koniec funkcji at91DisplayStartPage ___________________
   \   00000058   01B0               ADD      SP,SP,#+4
   \   0000005A   F0BC               POP      {R4-R7}
   \   0000005C   01BC               POP      {R0}
   \   0000005E   0047               BX       R0               ;; return
   \                     ??at91DisplayStartPage_0:
   \   00000060   ........           DC32     chipSelect
   \   00000064   1C81007E           DC32     0x7e00811c
   \   00000068   10810004           DC32     0x4008110
    452          
    453          
    454          
    455          
    456          
    457          
    458          
    459          
    460          
    461          //*-----------------------------------------------------------------------------
    462          //* Nazwa funkcji :    at91DisplayYAdress
    463          //* Funkcja okreœla wspó³rzêdne X od których ma zacz¹æ 
    464          //*         zapisywaæ, automatycznie inkrementowane    
    465          //*         po kazdej operacji zapisu/odczytu
    466          //*-----------------------------------------------------------------------------      
    467          //////////////////////////////////////////////////////
    468          // R/W  D/I  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    469          //  RW   DI  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 //
    470          //   0    0    0    1    A    A    A    A    A    A //
    471          //                                                  //
    472          // AAAAAA-przesuniêcie zapisywanej kolumny w prawo  //
    473          //////////////////////////////////////////////////////
    474          //*-----------------------------------------------------------------------------
    475          

   \                                 In section Debug.txt, align 4, keep-with-next
    476           void at91DisplayYAdress(char display_Y)
    477           {
   \                     at91DisplayYAdress:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0100               MOVS     R1,R0
    478             char data=(0x3F-display_Y); 
   \   00000004   3F20               MOVS     R0,#+63
   \   00000006   421A               SUBS     R2,R0,R1
   \   00000008   1206               LSLS     R2,R2,#+24
   \   0000000A   120E               LSRS     R2,R2,#+24
   \   0000000C   3A48               LDR      R0,??at91DisplayYAdress_0  ;; chipSelect + 4
   \   0000000E   0368               LDR      R3,[R0, #+0]
   \   00000010   3A4C               LDR      R4,??at91DisplayYAdress_0+0x4  ;; 0x7e00811c
   \   00000012   1C63               STR      R4,[R3, #+48]
    479             
    480             m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // zeruje piny
    481          
    482          
    483              m_pPio->PIO_CODR = DB6 | (DB5*((display_Y>>5)&0x1)) | (DB4*((display_Y>>4)&0x1)) | (DB3*((display_Y>>3)&0x1)) | (DB2*((display_Y>>2)&0x1)) | (DB1*((display_Y>>1)&0x1)) | (DB0*((display_Y>>0)&0x1));             // "0" na wyœwietlaczu // "1" na wyœwietlaczu
   \   00000014   0125               MOVS     R5,#+1
   \   00000016   0127               MOVS     R7,#+1
   \   00000018   4E09               LSRS     R6,R1,#+5
   \   0000001A   2800               MOVS     R0,R5
   \   0000001C   3040               ANDS     R0,R0,R6
   \   0000001E   1A26               MOVS     R6,#+26
   \   00000020   7043               MULS     R0,R6,R0
   \   00000022   8740               LSLS     R7,R7,R0
   \   00000024   AC46               MOV      R12,R5
   \   00000026   0E09               LSRS     R6,R1,#+4
   \   00000028   2800               MOVS     R0,R5
   \   0000002A   3040               ANDS     R0,R0,R6
   \   0000002C   C000               LSLS     R0,R0,#+3
   \   0000002E   6646               MOV      R6,R12
   \   00000030   8640               LSLS     R6,R6,R0
   \   00000032   3E43               ORRS     R6,R6,R7
   \   00000034   3700               MOVS     R7,R6
   \   00000036   CE08               LSRS     R6,R1,#+3
   \   00000038   2800               MOVS     R0,R5
   \   0000003A   3040               ANDS     R0,R0,R6
   \   0000003C   8000               LSLS     R0,R0,#+2
   \   0000003E   6646               MOV      R6,R12
   \   00000040   8640               LSLS     R6,R6,R0
   \   00000042   3E43               ORRS     R6,R6,R7
   \   00000044   B446               MOV      R12,R6
   \   00000046   2E00               MOVS     R6,R5
   \   00000048   8F08               LSRS     R7,R1,#+2
   \   0000004A   2800               MOVS     R0,R5
   \   0000004C   3840               ANDS     R0,R0,R7
   \   0000004E   1B27               MOVS     R7,#+27
   \   00000050   7843               MULS     R0,R7,R0
   \   00000052   8640               LSLS     R6,R6,R0
   \   00000054   6046               MOV      R0,R12
   \   00000056   0643               ORRS     R6,R6,R0
   \   00000058   B446               MOV      R12,R6
   \   0000005A   2E00               MOVS     R6,R5
   \   0000005C   4F08               LSRS     R7,R1,#+1
   \   0000005E   2800               MOVS     R0,R5
   \   00000060   3840               ANDS     R0,R0,R7
   \   00000062   1C27               MOVS     R7,#+28
   \   00000064   7843               MULS     R0,R7,R0
   \   00000066   8640               LSLS     R6,R6,R0
   \   00000068   6046               MOV      R0,R12
   \   0000006A   0643               ORRS     R6,R6,R0
   \   0000006C   2F00               MOVS     R7,R5
   \   0000006E   2800               MOVS     R0,R5
   \   00000070   0840               ANDS     R0,R0,R1
   \   00000072   1D21               MOVS     R1,#+29
   \   00000074   4843               MULS     R0,R1,R0
   \   00000076   8740               LSLS     R7,R7,R0
   \   00000078   3743               ORRS     R7,R7,R6
   \   0000007A   6806               LSLS     R0,R5,#+25
   \   0000007C   3843               ORRS     R0,R0,R7
   \   0000007E   5863               STR      R0,[R3, #+52]
    484             //m_pPio->PIO_CODR = DB6 | display_Y<<3;  // "1" na wyœwietlaczu
    485              //m_pPio->PIO_SODR = DI | RW |(0x3F - display_Y) << 3 ;             // "0" na wyœwietlaczu
    486             m_pPio->PIO_SODR = DI | RW | (DB5*((data>>5)&0x1)) | (DB4*((data>>4)&0x1)) | (DB3*((data>>3)&0x1)) | (DB2*((data>>2)&0x1)) | (DB1*((data>>1)&0x1)) | (DB0*((data>>0)&0x1));             // "0" na wyœwietlaczu
   \   00000080   2800               MOVS     R0,R5
   \   00000082   5111               ASRS     R1,R2,#+5
   \   00000084   2E00               MOVS     R6,R5
   \   00000086   0E40               ANDS     R6,R6,R1
   \   00000088   1A21               MOVS     R1,#+26
   \   0000008A   4E43               MULS     R6,R1,R6
   \   0000008C   B040               LSLS     R0,R0,R6
   \   0000008E   2900               MOVS     R1,R5
   \   00000090   1611               ASRS     R6,R2,#+4
   \   00000092   2F00               MOVS     R7,R5
   \   00000094   3740               ANDS     R7,R7,R6
   \   00000096   FE00               LSLS     R6,R7,#+3
   \   00000098   B140               LSLS     R1,R1,R6
   \   0000009A   0143               ORRS     R1,R1,R0
   \   0000009C   2800               MOVS     R0,R5
   \   0000009E   D610               ASRS     R6,R2,#+3
   \   000000A0   2F00               MOVS     R7,R5
   \   000000A2   3740               ANDS     R7,R7,R6
   \   000000A4   BE00               LSLS     R6,R7,#+2
   \   000000A6   B040               LSLS     R0,R0,R6
   \   000000A8   0843               ORRS     R0,R0,R1
   \   000000AA   2900               MOVS     R1,R5
   \   000000AC   9710               ASRS     R7,R2,#+2
   \   000000AE   2E00               MOVS     R6,R5
   \   000000B0   3E40               ANDS     R6,R6,R7
   \   000000B2   1B27               MOVS     R7,#+27
   \   000000B4   7E43               MULS     R6,R7,R6
   \   000000B6   B140               LSLS     R1,R1,R6
   \   000000B8   0143               ORRS     R1,R1,R0
   \   000000BA   2800               MOVS     R0,R5
   \   000000BC   5710               ASRS     R7,R2,#+1
   \   000000BE   2E00               MOVS     R6,R5
   \   000000C0   3E40               ANDS     R6,R6,R7
   \   000000C2   1C27               MOVS     R7,#+28
   \   000000C4   7E43               MULS     R6,R7,R6
   \   000000C6   B040               LSLS     R0,R0,R6
   \   000000C8   0843               ORRS     R0,R0,R1
   \   000000CA   2900               MOVS     R1,R5
   \   000000CC   1540               ANDS     R5,R5,R2
   \   000000CE   1D22               MOVS     R2,#+29
   \   000000D0   5543               MULS     R5,R2,R5
   \   000000D2   A940               LSLS     R1,R1,R5
   \   000000D4   0143               ORRS     R1,R1,R0
   \   000000D6   0C20               MOVS     R0,#+12
   \   000000D8   0843               ORRS     R0,R0,R1
   \   000000DA   1863               STR      R0,[R3, #+48]
    487              m_pPio->PIO_CODR = ENABLE;
   \   000000DC   8025               MOVS     R5,#+128
   \   000000DE   ED05               LSLS     R5,R5,#+23       ;; #+1073741824
   \   000000E0   5D63               STR      R5,[R3, #+52]
    488              Delay(1);
   \   000000E2   0120               MOVS     R0,#+1
   \   000000E4   ........           BL       Delay
    489              m_pPio->PIO_SODR = ENABLE;
   \   000000E8   0348               LDR      R0,??at91DisplayYAdress_0  ;; chipSelect + 4
   \   000000EA   0068               LDR      R0,[R0, #+0]
   \   000000EC   0563               STR      R5,[R0, #+48]
    490              m_pPio->PIO_SODR =  LCD_BUS_MASK;                       // "0" na wyœwietlaczu
   \   000000EE   0463               STR      R4,[R0, #+48]
    491          }//_______________________ Koniec funkcji at91DisplayYAdress ___________________
   \   000000F0   01B0               ADD      SP,SP,#+4
   \   000000F2   F0BC               POP      {R4-R7}
   \   000000F4   01BC               POP      {R0}
   \   000000F6   0047               BX       R0               ;; return
   \                     ??at91DisplayYAdress_0:
   \   000000F8   ........           DC32     chipSelect + 4
   \   000000FC   1C81007E           DC32     0x7e00811c
    492          
    493           
    494           
    495          
    496           
    497          
    498          
    499          
    500          //*-----------------------------------------------------------------------------
    501          //* Nazwa funkcji :    at91DisplayData
    502          //* Funkcja wpisywania danych do Ram LCD
    503          //*-----------------------------------------------------------------------------
    504          //* R/W  D/I  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 
    505          //*  RW   DI  DB7  DB6  DB5  DB4  DB3  DB2  DB1  DB0 
    506          //*  0    1    A    A    A    A    A    A    A    A 
    507          //*                                                  
    508          //*  AAAAAAAA - dane                                  
    509          //*-----------------------------------------------------------------------------
    510          

   \                                 In section Debug.txt, align 4
    511          inline void at91DisplayData(char lcd_data)
    512           {
   \                     at91DisplayData:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    513              //AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
    514             char data=(0xFF-lcd_data); 
   \   00000002   FF21               MOVS     R1,#+255
   \   00000004   091A               SUBS     R1,R1,R0
   \   00000006   0906               LSLS     R1,R1,#+24
   \   00000008   090E               LSRS     R1,R1,#+24
    515             m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // zeruje piny
   \   0000000A   284C               LDR      R4,??at91DisplayData_0  ;; chipSelect
   \   0000000C   6268               LDR      R2,[R4, #+4]
   \   0000000E   284B               LDR      R3,??at91DisplayData_0+0x4  ;; 0x7e00811c
   \   00000010   1363               STR      R3,[R2, #+48]
    516             
    517          
    518                //m_pPio->PIO_CODR = DI | (DB7*((lcd_data>>7)&0x1)) | (DB6*((lcd_data>>6)&0x1)) | (DB5*((lcd_data>>5)&0x1)) | (DB4*((lcd_data>>4)&0x1)) | (DB3*((lcd_data>>3)&0x1)) | (DB2*((lcd_data>>2)&0x1)) | (DB1*((lcd_data>>1)&0x1)) | (DB0*((lcd_data>>0)&0x1)); 
    519                
    520                m_pPio->PIO_CODR = DI | (((lcd_data>>7)&0x1)<<mDB7) | (((lcd_data>>6)&0x1)<<mDB6) | (((lcd_data>>5)&0x1)<<mDB5) | (((lcd_data>>4)&0x1)<<mDB4) | (((lcd_data>>3)&0x1)<<mDB3) | (((lcd_data>>2)&0x1)<<mDB2) | (((lcd_data>>1)&0x1)<<mDB1) | (((lcd_data>>0)&0x1)<<mDB0); 
   \   00000012   0123               MOVS     R3,#+1
   \   00000014   C509               LSRS     R5,R0,#+7
   \   00000016   EE03               LSLS     R6,R5,#+15
   \   00000018   8511               ASRS     R5,R0,#+6
   \   0000001A   1D40               ANDS     R5,R5,R3
   \   0000001C   6D06               LSLS     R5,R5,#+25
   \   0000001E   3543               ORRS     R5,R5,R6
   \   00000020   4611               ASRS     R6,R0,#+5
   \   00000022   1E40               ANDS     R6,R6,R3
   \   00000024   B606               LSLS     R6,R6,#+26
   \   00000026   2E43               ORRS     R6,R6,R5
   \   00000028   0511               ASRS     R5,R0,#+4
   \   0000002A   1D40               ANDS     R5,R5,R3
   \   0000002C   2D02               LSLS     R5,R5,#+8
   \   0000002E   3543               ORRS     R5,R5,R6
   \   00000030   C610               ASRS     R6,R0,#+3
   \   00000032   1E40               ANDS     R6,R6,R3
   \   00000034   3601               LSLS     R6,R6,#+4
   \   00000036   2E43               ORRS     R6,R6,R5
   \   00000038   8510               ASRS     R5,R0,#+2
   \   0000003A   1D40               ANDS     R5,R5,R3
   \   0000003C   ED06               LSLS     R5,R5,#+27
   \   0000003E   3543               ORRS     R5,R5,R6
   \   00000040   4610               ASRS     R6,R0,#+1
   \   00000042   1E40               ANDS     R6,R6,R3
   \   00000044   3607               LSLS     R6,R6,#+28
   \   00000046   2E43               ORRS     R6,R6,R5
   \   00000048   1840               ANDS     R0,R0,R3
   \   0000004A   4007               LSLS     R0,R0,#+29
   \   0000004C   3043               ORRS     R0,R0,R6
   \   0000004E   0425               MOVS     R5,#+4
   \   00000050   0543               ORRS     R5,R5,R0
   \   00000052   5563               STR      R5,[R2, #+52]
    521              
    522               // m_pPio->PIO_SODR = RW |(DB7*((data>>7)&0x1)) | (DB6*((data>>6)&0x1)) | (DB5*((data>>5)&0x1)) | (DB4*((data>>4)&0x1)) | (DB3*((data>>3)&0x1)) | (DB2*((data>>2)&0x1)) | (DB1*((data>>1)&0x1)) | (DB0*((data>>0)&0x1));          // "0" na wyœwietlaczu
    523             
    524                m_pPio->PIO_SODR = RW | (((data>>7)&0x1)<<mDB7) | (((data>>6)&0x1)<<mDB6) | (((data>>5)&0x1)<<mDB5) | (((data>>4)&0x1)<<mDB4) | (((data>>3)&0x1)<<mDB3) | (((data>>2)&0x1)<<mDB2) | (((data>>1)&0x1)<<mDB1) | (((data>>0)&0x1)<<mDB0); 
   \   00000054   C809               LSRS     R0,R1,#+7
   \   00000056   C003               LSLS     R0,R0,#+15
   \   00000058   8D11               ASRS     R5,R1,#+6
   \   0000005A   1D40               ANDS     R5,R5,R3
   \   0000005C   6D06               LSLS     R5,R5,#+25
   \   0000005E   0543               ORRS     R5,R5,R0
   \   00000060   4811               ASRS     R0,R1,#+5
   \   00000062   1840               ANDS     R0,R0,R3
   \   00000064   8006               LSLS     R0,R0,#+26
   \   00000066   2843               ORRS     R0,R0,R5
   \   00000068   0D11               ASRS     R5,R1,#+4
   \   0000006A   1D40               ANDS     R5,R5,R3
   \   0000006C   2D02               LSLS     R5,R5,#+8
   \   0000006E   0543               ORRS     R5,R5,R0
   \   00000070   C810               ASRS     R0,R1,#+3
   \   00000072   1840               ANDS     R0,R0,R3
   \   00000074   0001               LSLS     R0,R0,#+4
   \   00000076   2843               ORRS     R0,R0,R5
   \   00000078   8D10               ASRS     R5,R1,#+2
   \   0000007A   1D40               ANDS     R5,R5,R3
   \   0000007C   ED06               LSLS     R5,R5,#+27
   \   0000007E   0543               ORRS     R5,R5,R0
   \   00000080   4810               ASRS     R0,R1,#+1
   \   00000082   1840               ANDS     R0,R0,R3
   \   00000084   0007               LSLS     R0,R0,#+28
   \   00000086   2843               ORRS     R0,R0,R5
   \   00000088   0B40               ANDS     R3,R3,R1
   \   0000008A   5907               LSLS     R1,R3,#+29
   \   0000008C   0143               ORRS     R1,R1,R0
   \   0000008E   0820               MOVS     R0,#+8
   \   00000090   0843               ORRS     R0,R0,R1
   \   00000092   1063               STR      R0,[R2, #+48]
    525             
    526          
    527              
    528             m_pPio->PIO_CODR = ENABLE;
   \   00000094   8025               MOVS     R5,#+128
   \   00000096   ED05               LSLS     R5,R5,#+23       ;; #+1073741824
   \   00000098   5563               STR      R5,[R2, #+52]
    529          
    530              Delay(18);
   \   0000009A   1220               MOVS     R0,#+18
   \   0000009C   ........           BL       Delay
    531              m_pPio->PIO_SODR = ENABLE;
   \   000000A0   6068               LDR      R0,[R4, #+4]
   \   000000A2   0563               STR      R5,[R0, #+48]
    532          
    533             // m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // zeruje piny
    534          
    535          }//_______________________ Koniec funkcji at91DisplayData ______________________
   \   000000A4   70BC               POP      {R4-R6}
   \   000000A6   01BC               POP      {R0}
   \   000000A8   0047               BX       R0               ;; return
   \   000000AA   C046               Nop      
   \                     ??at91DisplayData_0:
   \   000000AC   ........           DC32     chipSelect
   \   000000B0   1C81007E           DC32     0x7e00811c
    536          
    537          
    538           
    539           
    540           
    541          //*-----------------------------------------------------------------------------
    542          //* Nazwa funkcji :    at91ChipSelect
    543          //* Funkcja wyboru kontrolera 1z2
    544          //*-----------------------------------------------------------------------------
    545          //* chip_select - "1" - CS1                   
    546          //*             - "2" - CS2      
    547          //*-----------------------------------------------------------------------------
    548          

   \                                 In section Debug.txt, align 4, keep-with-next
    549           void at91ChipSelect(char chip_select)
    550           {
   \                     at91ChipSelect:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    551             unsigned long cs_set;
    552             unsigned long cs_clr;
    553             
    554             m_pPio->PIO_SODR =  LCD_BUS_MASK;                         // zeruje piny
   \   00000002   114C               LDR      R4,??at91ChipSelect_0  ;; chipSelect
   \   00000004   6168               LDR      R1,[R4, #+4]
   \   00000006   114D               LDR      R5,??at91ChipSelect_0+0x4  ;; 0x7e00811c
   \   00000008   0D63               STR      R5,[R1, #+48]
    555          
    556             
    557             if (chip_select==2) 
   \   0000000A   0228               CMP      R0,#+2
   \   0000000C   03D1               BNE      ??at91ChipSelect_1
    558                {
    559                  cs_set=CS2;
   \   0000000E   8022               MOVS     R2,#+128
   \   00000010   1204               LSLS     R2,R2,#+16       ;; #+8388608
    560                  cs_clr=CS1;
   \   00000012   D309               LSRS     R3,R2,#+7
   \   00000014   04E0               B        ??at91ChipSelect_2
    561                }
    562           
    563             if (chip_select==1) 
   \                     ??at91ChipSelect_1:
   \   00000016   0128               CMP      R0,#+1
   \   00000018   02D1               BNE      ??at91ChipSelect_2
    564                {
    565                  cs_set=CS1;
   \   0000001A   8022               MOVS     R2,#+128
   \   0000001C   5202               LSLS     R2,R2,#+9        ;; #+65536
    566                  cs_clr=CS2;
   \   0000001E   D301               LSLS     R3,R2,#+7
    567                }
    568             
    569          
    570          
    571             
    572              m_pPio->PIO_SODR = cs_clr;   
   \                     ??at91ChipSelect_2:
   \   00000020   0B63               STR      R3,[R1, #+48]
    573              m_pPio->PIO_CODR = cs_set;                           // "1" na wyœwietlaczu
   \   00000022   4A63               STR      R2,[R1, #+52]
    574              
    575              
    576              
    577          at91DisplayOnOff(1); 
   \   00000024   0D63               STR      R5,[R1, #+48]
   \   00000026   0A48               LDR      R0,??at91ChipSelect_0+0x8  ;; 0x3c000110
   \   00000028   4863               STR      R0,[R1, #+52]
   \   0000002A   0C20               MOVS     R0,#+12
   \   0000002C   0863               STR      R0,[R1, #+48]
   \   0000002E   8026               MOVS     R6,#+128
   \   00000030   F605               LSLS     R6,R6,#+23       ;; #+1073741824
   \   00000032   4E63               STR      R6,[R1, #+52]
   \   00000034   0220               MOVS     R0,#+2
   \   00000036   ........           BL       Delay
   \   0000003A   6068               LDR      R0,[R4, #+4]
   \   0000003C   0663               STR      R6,[R0, #+48]
   \   0000003E   0563               STR      R5,[R0, #+48]
    578            
    579            
    580          
    581          }//_______________________ Koniec funkcji at91ChipSelect __________________________
   \   00000040   70BC               POP      {R4-R6}
   \   00000042   01BC               POP      {R0}
   \   00000044   0047               BX       R0               ;; return
   \   00000046   C046               Nop      
   \                     ??at91ChipSelect_0:
   \   00000048   ........           DC32     chipSelect
   \   0000004C   1C81007E           DC32     0x7e00811c
   \   00000050   1001003C           DC32     0x3c000110
    582          
    583           
    584           
    585           
    586          
    587          
    588          //*-----------------------------------------------------------------------------
    589          //* Nazwa funkcji :    ReadTP
    590          //* Funkcja obs³ugi TouchPanel`a
    591          //*-----------------------------------------------------------------------------
    592          //*  !!! Czas trwania funkcji 15us
    593          //*-----------------------------------------------------------------------------
    594          

   \                                 In section Debug.txt, align 4, keep-with-next
    595          void ReadTP(int *val_X, int *val_Y)
    596          {
   \                     ReadTP:
   \   00000000   F3B5               PUSH     {R0,R1,R4-R7,LR}
   \   00000002   81B0               SUB      SP,SP,#+4
   \   00000004   0800               MOVS     R0,R1
   \   00000006   0021               MOVS     R1,#+0
   \   00000008   C943               MVNS     R1,R1            ;; #-1
   \   0000000A   0160               STR      R1,[R0, #+0]
   \   0000000C   4248               LDR      R0,??ReadTP_0    ;; 0xfffff400
   \   0000000E   8021               MOVS     R1,#+128
   \   00000010   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   00000012   0160               STR      R1,[R0, #+0]
    597          
    598            //POMIAR Y 
    599            *val_Y=-1;
    600          
    601          
    602             
    603            AT91F_PIO_CfgOutput(TS_PIO, TS_PIO_CH3);
   \   00000014   414C               LDR      R4,??ReadTP_0+0x4  ;; 0xfffff410
   \   00000016   2160               STR      R1,[R4, #+0]
    604            AT91F_PIO_CfgOutput(TS_PIO, TS_PIO_CH1);
   \   00000018   8808               LSRS     R0,R1,#+2
   \   0000001A   3F49               LDR      R1,??ReadTP_0    ;; 0xfffff400
   \   0000001C   0860               STR      R0,[R1, #+0]
   \   0000001E   2060               STR      R0,[R4, #+0]
   \   00000020   3F49               LDR      R1,??ReadTP_0+0x8  ;; 0xfffff414
   \   00000022   4200               LSLS     R2,R0,#+1
   \   00000024   0A60               STR      R2,[R1, #+0]
    605            AT91F_PIO_CfgInput(TS_PIO, TS_PIO_CH2);
   \   00000026   3C49               LDR      R1,??ReadTP_0    ;; 0xfffff400
   \   00000028   0A60               STR      R2,[R1, #+0]
   \   0000002A   3E49               LDR      R1,??ReadTP_0+0xC  ;; TS_pPio
   \   0000002C   0968               LDR      R1,[R1, #+0]
   \   0000002E   0863               STR      R0,[R1, #+48]
    606            
    607           
    608            TS_pPio->PIO_SODR = TS_PIO_CH1; 
    609            TS_pPio->PIO_CODR = TS_PIO_CH3;                           // "1" na wyœwietlaczu
   \   00000030   8000               LSLS     R0,R0,#+2
   \   00000032   4863               STR      R0,[R1, #+52]
    610           
    611          *val_Y =  ReadADC(0);
   \   00000034   3C4D               LDR      R5,??ReadTP_0+0x10  ;; 0xfffd8014
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   C043               MVNS     R0,R0            ;; #-1
   \   0000003A   2860               STR      R0,[R5, #+0]
   \   0000003C   3B4E               LDR      R6,??ReadTP_0+0x14  ;; 0xfffd8010
   \   0000003E   0120               MOVS     R0,#+1
   \   00000040   3060               STR      R0,[R6, #+0]
   \   00000042   3B4F               LDR      R7,??ReadTP_0+0x18  ;; 0xfffd8000
   \   00000044   0220               MOVS     R0,#+2
   \   00000046   3860               STR      R0,[R7, #+0]
   \   00000048   0120               MOVS     R0,#+1
   \   0000004A   ........           BL       Delay
   \   0000004E   3948               LDR      R0,??ReadTP_0+0x1C  ;; 0xfffd8030
   \   00000050   0068               LDR      R0,[R0, #+0]
    612          
    613          if (*val_Y>90)
   \   00000052   5B28               CMP      R0,#+91
   \   00000054   1ADB               BLT      ??ReadTP_1
    614          {
    615          //  TRACE_INFO("\n\r wartosc  Y: %d ", adv);
    616          *val_Y=(((*val_Y-100)*18)/100)-13;
   \   00000056   6438               SUBS     R0,R0,#+100
   \   00000058   1221               MOVS     R1,#+18
   \   0000005A   4843               MULS     R0,R1,R0
   \   0000005C   6421               MOVS     R1,#+100
   \   0000005E   ........           BL       __aeabi_idivmod
   \   00000062   0D38               SUBS     R0,R0,#+13
    617          
    618          
    619          if ((*val_Y>127) && (*val_Y<137)) {*val_Y=127;}
   \   00000064   8028               CMP      R0,#+128
   \   00000066   03DB               BLT      ??ReadTP_2
   \   00000068   8928               CMP      R0,#+137
   \   0000006A   0DDA               BGE      ??ReadTP_3
   \   0000006C   7F20               MOVS     R0,#+127
   \   0000006E   0DE0               B        ??ReadTP_1
    620          if ((*val_Y<1) && (*val_Y>-10)) {*val_Y=1;}
   \                     ??ReadTP_2:
   \   00000070   0128               CMP      R0,#+1
   \   00000072   05DA               BGE      ??ReadTP_4
   \   00000074   0821               MOVS     R1,#+8
   \   00000076   C943               MVNS     R1,R1            ;; #-9
   \   00000078   8842               CMP      R0,R1
   \   0000007A   01DB               BLT      ??ReadTP_4
   \   0000007C   0120               MOVS     R0,#+1
   \   0000007E   05E0               B        ??ReadTP_1
   \                     ??ReadTP_4:
   \   00000080   0921               MOVS     R1,#+9
   \   00000082   C943               MVNS     R1,R1            ;; #-10
   \   00000084   8842               CMP      R0,R1
   \   00000086   01DA               BGE      ??ReadTP_1
    621          if ((*val_Y>=137) || (*val_Y<-10)) {*val_Y=-1;}
   \                     ??ReadTP_3:
   \   00000088   0020               MOVS     R0,#+0
   \   0000008A   C043               MVNS     R0,R0            ;; #-1
   \                     ??ReadTP_1:
   \   0000008C   0299               LDR      R1,[SP, #+8]
   \   0000008E   0860               STR      R0,[R1, #+0]
    622            
    623          //  TRACE_INFO("    wartosc  Y: %d ", adv);
    624          }
    625          else
    626          {
    627          //  TRACE_INFO("\n\r    wartosc  Y: ???");
    628          }
    629            
    630          //POMIAR X ---------------------------------------------------------------------
    631          *val_X=-1;
   \   00000090   0198               LDR      R0,[SP, #+4]
   \   00000092   0021               MOVS     R1,#+0
   \   00000094   C943               MVNS     R1,R1            ;; #-1
   \   00000096   0160               STR      R1,[R0, #+0]
    632          
    633          
    634             
    635            AT91F_PIO_CfgOutput(TS_PIO, TS_PIO_CH2);
   \   00000098   1F48               LDR      R0,??ReadTP_0    ;; 0xfffff400
   \   0000009A   8021               MOVS     R1,#+128
   \   0000009C   0903               LSLS     R1,R1,#+12       ;; #+524288
   \   0000009E   0160               STR      R1,[R0, #+0]
   \   000000A0   2160               STR      R1,[R4, #+0]
    636            
    637            AT91F_PIO_CfgOutput(TS_PIO, TS_PIO_CH0);
   \   000000A2   8808               LSRS     R0,R1,#+2
   \   000000A4   1C49               LDR      R1,??ReadTP_0    ;; 0xfffff400
   \   000000A6   0860               STR      R0,[R1, #+0]
   \   000000A8   2060               STR      R0,[R4, #+0]
    638            AT91F_PIO_CfgInput(TS_PIO, TS_PIO_CH3);
   \   000000AA   1D49               LDR      R1,??ReadTP_0+0x8  ;; 0xfffff414
   \   000000AC   C200               LSLS     R2,R0,#+3
   \   000000AE   0A60               STR      R2,[R1, #+0]
   \   000000B0   1949               LDR      R1,??ReadTP_0    ;; 0xfffff400
   \   000000B2   0A60               STR      R2,[R1, #+0]
    639            
    640           
    641            TS_pPio->PIO_SODR = TS_PIO_CH2; 
   \   000000B4   1B49               LDR      R1,??ReadTP_0+0xC  ;; TS_pPio
   \   000000B6   0968               LDR      R1,[R1, #+0]
   \   000000B8   8200               LSLS     R2,R0,#+2
   \   000000BA   0A63               STR      R2,[R1, #+48]
    642            TS_pPio->PIO_CODR = TS_PIO_CH0;                           // "1" na wyœwietlaczu
   \   000000BC   4863               STR      R0,[R1, #+52]
    643           
    644          *val_X =  ReadADC(1);
   \   000000BE   0020               MOVS     R0,#+0
   \   000000C0   C043               MVNS     R0,R0            ;; #-1
   \   000000C2   2860               STR      R0,[R5, #+0]
   \   000000C4   0220               MOVS     R0,#+2
   \   000000C6   3060               STR      R0,[R6, #+0]
   \   000000C8   3860               STR      R0,[R7, #+0]
   \   000000CA   0120               MOVS     R0,#+1
   \   000000CC   ........           BL       Delay
   \   000000D0   1948               LDR      R0,??ReadTP_0+0x20  ;; 0xfffd8034
   \   000000D2   0068               LDR      R0,[R0, #+0]
    645          
    646          if (*val_X>200)
   \   000000D4   C928               CMP      R0,#+201
   \   000000D6   18DB               BLT      ??ReadTP_5
    647          {
    648          
    649          
    650          *val_X=(((*val_X-220)*124)/1000);
   \   000000D8   DC38               SUBS     R0,R0,#+220
   \   000000DA   7C21               MOVS     R1,#+124
   \   000000DC   4843               MULS     R0,R1,R0
   \   000000DE   FA21               MOVS     R1,#+250
   \   000000E0   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   000000E2   ........           BL       __aeabi_idivmod
    651          if ((*val_X>63) && (*val_X<73)) {*val_X=63;}
   \   000000E6   4028               CMP      R0,#+64
   \   000000E8   03DB               BLT      ??ReadTP_6
   \   000000EA   4928               CMP      R0,#+73
   \   000000EC   0BDA               BGE      ??ReadTP_7
   \   000000EE   3F20               MOVS     R0,#+63
   \   000000F0   0BE0               B        ??ReadTP_5
    652          if ((*val_X<1) && (*val_X>-10)) {*val_X=1;} 
   \                     ??ReadTP_6:
   \   000000F2   0821               MOVS     R1,#+8
   \   000000F4   C943               MVNS     R1,R1            ;; #-9
   \   000000F6   0128               CMP      R0,#+1
   \   000000F8   03DA               BGE      ??ReadTP_8
   \   000000FA   8842               CMP      R0,R1
   \   000000FC   01DB               BLT      ??ReadTP_8
   \   000000FE   0120               MOVS     R0,#+1
   \   00000100   03E0               B        ??ReadTP_5
   \                     ??ReadTP_8:
   \   00000102   8842               CMP      R0,R1
   \   00000104   01DA               BGE      ??ReadTP_5
    653          if ((*val_X>=73) || (*val_X<=-10)) {*val_X=-1;}
   \                     ??ReadTP_7:
   \   00000106   0020               MOVS     R0,#+0
   \   00000108   C043               MVNS     R0,R0            ;; #-1
   \                     ??ReadTP_5:
   \   0000010A   0199               LDR      R1,[SP, #+4]
   \   0000010C   0860               STR      R0,[R1, #+0]
    654          
    655          }
    656           
    657          }
   \   0000010E   03B0               ADD      SP,SP,#+12
   \   00000110   F0BC               POP      {R4-R7}
   \   00000112   01BC               POP      {R0}
   \   00000114   0047               BX       R0               ;; return
   \   00000116   C046               Nop      
   \                     ??ReadTP_0:
   \   00000118   00F4FFFF           DC32     0xfffff400
   \   0000011C   10F4FFFF           DC32     0xfffff410
   \   00000120   14F4FFFF           DC32     0xfffff414
   \   00000124   ........           DC32     TS_pPio
   \   00000128   1480FDFF           DC32     0xfffd8014
   \   0000012C   1080FDFF           DC32     0xfffd8010
   \   00000130   0080FDFF           DC32     0xfffd8000
   \   00000134   3080FDFF           DC32     0xfffd8030
   \   00000138   3480FDFF           DC32     0xfffd8034
    658          //END Touth panel ----------------------------------------------------------  
    659            
    660          
    661          
    662          
    663          
    664          
    665          //*-----------------------------------------------------------------------------
    666          //* Nazwa funkcji :    ReadADC
    667          //* Funkcja konwersji zmiennej float na ³añcuch string   
    668          //*-----------------------------------------------------------------------------
    669          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    670          int ReadADC (char CH) 
    671          { 
   \                     ReadADC:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
    672          
    673              //ADC: PRES=4->MCK/10 SHTIM =3 -> 4/4,8MHz=833ns STARTUP =11 ->20us 
    674          
    675              //enable channel and set PIN to ADCx function (no need to write PIO!!) 
    676              AT91C_BASE_ADC->ADC_CHDR =0xFFFFFFFF; 
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   ED43               MVNS     R5,R5            ;; #-1
   \   00000008   1348               LDR      R0,??ReadADC_1   ;; 0xfffd8014
   \   0000000A   0560               STR      R5,[R0, #+0]
    677              AT91C_BASE_ADC->ADC_CHER = (1<< CH);    
   \   0000000C   1348               LDR      R0,??ReadADC_1+0x4  ;; 0xfffd8010
   \   0000000E   0121               MOVS     R1,#+1
   \   00000010   A140               LSLS     R1,R1,R4
   \   00000012   0160               STR      R1,[R0, #+0]
    678              //start first conversion 
    679              AT91C_BASE_ADC->ADC_CR = AT91C_ADC_START; 
   \   00000014   1248               LDR      R0,??ReadADC_1+0x8  ;; 0xfffd8000
   \   00000016   0221               MOVS     R1,#+2
   \   00000018   0160               STR      R1,[R0, #+0]
    680              Delay(1);
   \   0000001A   0120               MOVS     R0,#+1
   \   0000001C   ........           BL       Delay
    681              
    682              //while (AT91C_BASE_ADC->ADC_SR &(1 << CH));
    683            
    684              //if data ready 
    685              //if(AT91C_BASE_ADC->ADC_SR & (1 << CH)) 
    686              //{ 
    687                  //read channel register and reset end of conversion (EOC)   
    688                switch (CH){
   \   00000020   052C               CMP      R4,#+5
   \   00000022   14D8               BHI      ??ReadADC_2
   \   00000024   01A0               ADR      R0,??ReadADC_0
   \   00000026   005D               LDRB     R0,[R0, R4]
   \   00000028   8744               ADD      PC,PC,R0
   \   0000002A   C046               Nop      
   \                     ??ReadADC_0:
   \   0000002C   060C1016           DC8      +6,+12,+16,+22
   \   00000030   1A1E               DC8      +26,+30
    689                  case 0: return AT91C_BASE_ADC->ADC_CDR0;  
   \                     ??ReadADC_3:
   \   00000032   0C48               LDR      R0,??ReadADC_1+0xC  ;; 0xfffd8030
   \                     ??ReadADC_4:
   \   00000034   0068               LDR      R0,[R0, #+0]
   \   00000036   0BE0               B        ??ReadADC_5
    690                  case 1: return AT91C_BASE_ADC->ADC_CDR1;  
   \                     ??ReadADC_6:
   \   00000038   0B48               LDR      R0,??ReadADC_1+0x10  ;; 0xfffd8034
   \   0000003A   FBE7               B.N      ??ReadADC_4
    691                  case 2: return AT91C_BASE_ADC->ADC_CDR2;  
   \                     ??ReadADC_7:
   \   0000003C   0B48               LDR      R0,??ReadADC_1+0x14  ;; 0xfffd8038
   \                     ??ReadADC_8:
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   06E0               B        ??ReadADC_5
    692                  case 3: return AT91C_BASE_ADC->ADC_CDR3;  
   \                     ??ReadADC_9:
   \   00000042   0B48               LDR      R0,??ReadADC_1+0x18  ;; 0xfffd803c
   \   00000044   F6E7               B.N      ??ReadADC_4
    693                  case 4: return AT91C_BASE_ADC->ADC_CDR4;  
   \                     ??ReadADC_10:
   \   00000046   0B48               LDR      R0,??ReadADC_1+0x1C  ;; 0xfffd8040
   \   00000048   F9E7               B.N      ??ReadADC_8
    694                  case 5: return AT91C_BASE_ADC->ADC_CDR5;  
   \                     ??ReadADC_11:
   \   0000004A   0B48               LDR      R0,??ReadADC_1+0x20  ;; 0xfffd8044
   \   0000004C   F2E7               B.N      ??ReadADC_4
    695                } 
    696                
    697                  //do whatever you want whith ADC-value 
    698              //}
    699              //else
    700             // {
    701                //  ;
    702              //}
    703              return -1;
   \                     ??ReadADC_2:
   \   0000004E   2800               MOVS     R0,R5
   \                     ??ReadADC_5:
   \   00000050   01B0               ADD      SP,SP,#+4
   \   00000052   30BC               POP      {R4,R5}
   \   00000054   02BC               POP      {R1}
   \   00000056   0847               BX       R1               ;; return
   \                     ??ReadADC_1:
   \   00000058   1480FDFF           DC32     0xfffd8014
   \   0000005C   1080FDFF           DC32     0xfffd8010
   \   00000060   0080FDFF           DC32     0xfffd8000
   \   00000064   3080FDFF           DC32     0xfffd8030
   \   00000068   3480FDFF           DC32     0xfffd8034
   \   0000006C   3880FDFF           DC32     0xfffd8038
   \   00000070   3C80FDFF           DC32     0xfffd803c
   \   00000074   4080FDFF           DC32     0xfffd8040
   \   00000078   4480FDFF           DC32     0xfffd8044
    704          }
    705          //*-----------------------------------------------------------------------------   
    706             
    707             
    708          
    709          //*-----------------------------------------------------------------------------
    710          //* Nazwa funkcji :    InitTS
    711          //* Funkcja inicjalizacji obs³ugi touchopanel`a
    712          //*-----------------------------------------------------------------------------
    713          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    714          void Init_LCD_TS(void) 
    715          { 
   \                     Init_LCD_TS:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    716          //LCD panel ----------------------------------------------------------  
    717            AT91F_PIO_CfgOutput(LCD_PIO,(unsigned int)LightLCD);      //AT91PS_PIO pPio, unsigned int pioEnable
   \   00000002   8020               MOVS     R0,#+128
   \   00000004   0006               LSLS     R0,R0,#+24       ;; #-2147483648
   \   00000006   2249               LDR      R1,??Init_LCD_TS_0  ;; 0xfffff400
   \   00000008   0860               STR      R0,[R1, #+0]
   \   0000000A   2249               LDR      R1,??Init_LCD_TS_0+0x4  ;; 0xfffff410
   \   0000000C   0860               STR      R0,[R1, #+0]
    718           AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
   \   0000000E   2249               LDR      R1,??Init_LCD_TS_0+0x8  ;; 0xfffff430
   \   00000010   0860               STR      R0,[R1, #+0]
    719            at91DisplayOnOff(1);     // 0-OFF, 1-ON   
   \   00000012   224C               LDR      R4,??Init_LCD_TS_0+0xC  ;; chipSelect
   \   00000014   6068               LDR      R0,[R4, #+4]
   \   00000016   224D               LDR      R5,??Init_LCD_TS_0+0x10  ;; 0x7e00811c
   \   00000018   0563               STR      R5,[R0, #+48]
   \   0000001A   2249               LDR      R1,??Init_LCD_TS_0+0x14  ;; 0x3c000110
   \   0000001C   4163               STR      R1,[R0, #+52]
   \   0000001E   0C26               MOVS     R6,#+12
   \   00000020   0663               STR      R6,[R0, #+48]
   \   00000022   8027               MOVS     R7,#+128
   \   00000024   FF05               LSLS     R7,R7,#+23       ;; #+1073741824
   \   00000026   4763               STR      R7,[R0, #+52]
   \   00000028   0220               MOVS     R0,#+2
   \   0000002A   ........           BL       Delay
   \   0000002E   6068               LDR      R0,[R4, #+4]
   \   00000030   0763               STR      R7,[R0, #+48]
   \   00000032   0563               STR      R5,[R0, #+48]
    720            at91DisplayStartPage(0);
   \   00000034   0563               STR      R5,[R0, #+48]
   \   00000036   1C49               LDR      R1,??Init_LCD_TS_0+0x18  ;; 0x4008111
   \   00000038   4163               STR      R1,[R0, #+52]
   \   0000003A   0663               STR      R6,[R0, #+48]
   \   0000003C   4763               STR      R7,[R0, #+52]
   \   0000003E   2320               MOVS     R0,#+35
   \   00000040   ........           BL       Delay
   \   00000044   6068               LDR      R0,[R4, #+4]
   \   00000046   0763               STR      R7,[R0, #+48]
   \   00000048   0563               STR      R5,[R0, #+48]
    721            at91DisplayStartLine();  // set start line 
   \   0000004A   0563               STR      R5,[R0, #+48]
   \   0000004C   1749               LDR      R1,??Init_LCD_TS_0+0x1C  ;; 0x2008000
   \   0000004E   4163               STR      R1,[R0, #+52]
   \   00000050   0663               STR      R6,[R0, #+48]
   \   00000052   4763               STR      R7,[R0, #+52]
   \   00000054   0220               MOVS     R0,#+2
   \   00000056   ........           BL       Delay
   \   0000005A   6068               LDR      R0,[R4, #+4]
   \   0000005C   0763               STR      R7,[R0, #+48]
   \   0000005E   0563               STR      R5,[R0, #+48]
    722             //  at91DisplayStartPage(0);
    723             //at91DisplayYAdress(0);
    724            
    725          //Touth panel ----------------------------------------------------------  
    726          AT91C_BASE_PIOA->PIO_PPUDR|= TS_PIO_CH0;    //Pull-up enable enable reg.
   \   00000060   1348               LDR      R0,??Init_LCD_TS_0+0x20  ;; 0xfffff460
   \   00000062   0168               LDR      R1,[R0, #+0]
   \   00000064   7A0B               LSRS     R2,R7,#+13
   \   00000066   0A43               ORRS     R2,R2,R1
   \   00000068   0260               STR      R2,[R0, #+0]
    727          AT91C_BASE_PIOA->PIO_PPUDR|= TS_PIO_CH1;    //Pull-up enable enable reg.
   \   0000006A   0168               LDR      R1,[R0, #+0]
   \   0000006C   3A0B               LSRS     R2,R7,#+12
   \   0000006E   0A43               ORRS     R2,R2,R1
   \   00000070   0260               STR      R2,[R0, #+0]
    728          AT91C_BASE_PIOA->PIO_PPUDR|= TS_PIO_CH2;    //Pull-up enable enable reg.
   \   00000072   0168               LDR      R1,[R0, #+0]
   \   00000074   FA0A               LSRS     R2,R7,#+11
   \   00000076   0A43               ORRS     R2,R2,R1
   \   00000078   0260               STR      R2,[R0, #+0]
    729          AT91C_BASE_PIOA->PIO_PPUDR|= TS_PIO_CH3;    //Pull-up enable enable reg.
   \   0000007A   0168               LDR      R1,[R0, #+0]
   \   0000007C   BA0A               LSRS     R2,R7,#+10
   \   0000007E   0A43               ORRS     R2,R2,R1
   \   00000080   0260               STR      R2,[R0, #+0]
    730            
    731          AT91C_BASE_ADC->ADC_MR = (3<24)|(11<<16)|(4<<8); 
   \   00000082   0C48               LDR      R0,??Init_LCD_TS_0+0x24  ;; 0xfffd8004
   \   00000084   0C49               LDR      R1,??Init_LCD_TS_0+0x28  ;; 0xb0401
   \   00000086   0160               STR      R1,[R0, #+0]
    732          
    733          }//_______________________ Koniec funkcji InitTS __________________________
   \   00000088   01B0               ADD      SP,SP,#+4
   \   0000008A   F0BC               POP      {R4-R7}
   \   0000008C   01BC               POP      {R0}
   \   0000008E   0047               BX       R0               ;; return
   \                     ??Init_LCD_TS_0:
   \   00000090   00F4FFFF           DC32     0xfffff400
   \   00000094   10F4FFFF           DC32     0xfffff410
   \   00000098   30F4FFFF           DC32     0xfffff430
   \   0000009C   ........           DC32     chipSelect
   \   000000A0   1C81007E           DC32     0x7e00811c
   \   000000A4   1001003C           DC32     0x3c000110
   \   000000A8   11810004           DC32     0x4008111
   \   000000AC   00800002           DC32     0x2008000
   \   000000B0   60F4FFFF           DC32     0xfffff460
   \   000000B4   0480FDFF           DC32     0xfffd8004
   \   000000B8   01040B00           DC32     0xb0401
    734          
    735          
    736          
    737          
    738          
    739          
    740          
    741          
    742          
    743          
    744          
    745          
    746          //*-----------------------------------------------------------------------------
    747          //* Nazwa funkcji :    Arial_7
    748          //* Tablica znaków czcionki Arial_7
    749          //*-----------------------------------------------------------------------------
    750          /*
    751          char Arial_7[29][10] = {
    752                                    {5,0,0,4,4,31,4,4,0,0},   //+
    753                                    {1,1,1,0,0,0,0,0,0,0},    //,
    754                                    {2,0,0,0,0,3,0,0,0,0},    //-
    755                                    {1,0,1,0,0,0,0,0,0,0},    //.
    756                                    {3,0,1,1,2,2,2,4,4,0},    // /
    757                                    {4,0,6,9,9,9,9,9,6,0},    //0
    758                                    {2,0,2,2,2,2,2,3,2,0},    //1
    759                                    {4,0,15,2,4,4,8,9,6,0},   //2
    760                                    {4,0,6,9,8,4,8,9,6,0},    //3
    761                                    {4,0,8,8,31,9,10,12,8,0}, //4
    762                                    {4,0,6,9,8,8,7,1,15,0},   //5
    763                                    {5,0,6,9,9,9,7,9,6,0},    //6
    764                                    {4,0,2,2,2,4,4,8,15,0},   //7
    765                                    {4,0,6,9,9,6,9,9,6,0},    //8
    766                                    {4,0,6,9,14,9,9,9,6,0},    //9  
    767                                   {4,0,6,9,14,9,9,9,6,0},    //  
    768                                   {4,0,6,9,14,9,9,9,6,0},    //  
    769                                   {4,0,6,9,14,9,9,9,6,0},    //  
    770                                   {4,0,6,9,14,9,9,9,6,0},    //  
    771                                   {4,0,6,9,14,9,9,9,6,0},    //  
    772                                   {4,0,6,9,14,9,9,9,6,0},    //  
    773                                   {4,0,6,9,14,9,9,9,6,0},    //  
    774                                   {4,0,6,9,14,9,9,9,6,0},    //
    775                                   {7,0,65,34,62,34,20,20,8,0}, //A
    776                                   {4,0,7,9,9,15,9,9,7,0},      //B
    777                                   {5,0,14,17,1,1,1,17,14,0},   //C
    778                                   {5,0,15,17,17,17,17,17,15,0},  //D
    779                                   {5,0,31,1,1,31,1,1,31,0},        //E
    780                                   {4,0,1,1,1,7,1,1,15,0},          //F
    781                                   
    782                                   
    783          
    784          };//_______________________ Koniec tablicz Arial_7 ______________________0________
    785          
    786          */
    787          

   \                                 In section .rodata, align 4
    788          const char Arial_7[99][10] = {
   \                     Arial_7:
   \   00000000   077F7F3E3E3E       DC8 7, 127, 127, 62, 62, 62, 28, 28, 8, 8, 7, 8, 8, 28, 28, 62, 62, 62
   \              1C1C08080708
   \              081C1C3E3E3E
   \   00000012   7F7F00000000       DC8 127, 127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1
   \              000000000000
   \              010001000101
   \              010101      
   \   00000027   000300000000       DC8 0, 3, 0, 0, 0, 0, 0, 0, 5, 5, 0, 4, 0, 5, 5, 15, 10, 15, 10, 10, 0
   \              000005050004
   \              0005050F0A0F
   \              0A0A00      
   \   0000003C   05040E15140E       DC8 5, 4, 14, 21, 20, 14, 5, 21, 14, 0, 6, 0, 20, 44, 20, 8, 10, 13, 18
   \              05150E000600
   \              142C14080A0D
   \              12          
   \   0000004F   0006002E1129       DC8 0, 6, 0, 46, 17, 41, 14, 18, 18, 28, 0, 6, 0, 44, 16, 40, 12, 16
   \              0E12121C0006
   \              002C10280C10
   \   00000061   111D00060229       DC8 17, 29, 0, 6, 2, 41, 17, 41, 9, 17, 18, 28, 0, 6, 2, 44, 20, 44, 12
   \              11290911121C
   \              0006022C142C
   \              0C          
   \   00000074   141219000300       DC8 20, 18, 25, 0, 3, 0, 0, 0, 5, 2, 5, 0, 0, 0, 6, 0, 36, 4, 63, 4, 4
   \              000005020500
   \              000006002404
   \              3F0404      
   \   00000089   000000010101       DC8 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0
   \              000000000000
   \              000200000003
   \              0000000000  
   \   000000A0   010001000000       DC8 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 1, 1, 2, 2, 2, 4, 4, 0, 4, 0, 6
   \              000000000300
   \              010102020204
   \              0400040006  
   \   000000B7   090909090906       DC8 9, 9, 9, 9, 9, 6, 0, 2, 0, 2, 2, 2, 2, 2, 3, 2, 0, 4, 0, 15, 2, 4
   \              000200020202
   \              020203020004
   \              000F0204    
   \   000000CD   040809060004       DC8 4, 8, 9, 6, 0, 4, 0, 6, 9, 8, 4, 8, 9, 6, 0, 4, 0, 8, 8, 31, 9, 10
   \              000609080408
   \              090600040008
   \              081F090A    
   \   000000E3   0C0800040006       DC8 12, 8, 0, 4, 0, 6, 9, 8, 8, 7, 1, 15, 0, 4, 0, 6, 9, 9, 9, 7, 9, 6
   \              09080807010F
   \              000400060909
   \              09070906    
   \   000000F9   000400020202       DC8 0, 4, 0, 2, 2, 2, 4, 4, 8, 15, 0, 4, 0, 6, 9, 9, 6, 9, 9, 6, 0, 4
   \              0404080F0004
   \              000609090609
   \              09060004    
   \   0000010F   0006090E0909       DC8 0, 6, 9, 14, 9, 9, 9, 6, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1
   \              090600010001
   \              000000010000
   \              00010101    
   \   00000125   000000010000       DC8 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 4, 2, 1, 2, 4, 0, 0, 4, 0, 0, 0, 15
   \              000300000402
   \              010204000004
   \              0000000F    
   \   0000013B   000F00000003       DC8 0, 15, 0, 0, 0, 3, 0, 0, 1, 2, 4, 2, 1, 0, 0, 5, 0, 4, 0, 4, 12, 16
   \              000001020402
   \              010000050004
   \              00040C10    
   \   00000151   110E0008C23D       DC8 17, 14, 0, 8, 194, 61, 85, 149, 181, 169, 66, 60, 0, 7, 0, 65, 34
   \              5595B5A9423C
   \              0007004122  
   \   00000162   3E2214140800       DC8 62, 34, 20, 20, 8, 0, 4, 0, 7, 9, 9, 15, 9, 9, 7, 0, 5, 0, 14, 17
   \              04000709090F
   \              090907000500
   \              0E11        
   \   00000176   010101110E00       DC8 1, 1, 1, 17, 14, 0, 5, 0, 15, 17, 17, 17, 17, 17, 15, 0, 5, 0, 31
   \              05000F111111
   \              11110F000500
   \              1F          
   \   00000189   01011F01011F       DC8 1, 1, 31, 1, 1, 31, 0, 4, 0, 1, 1, 1, 7, 1, 1, 15, 0, 5, 0, 14, 17
   \              000400010101
   \              0701010F0005
   \              000E11      
   \   0000019E   111901110E00       DC8 17, 25, 1, 17, 14, 0, 5, 0, 17, 17, 17, 31, 17, 17, 17, 0, 1, 0, 1
   \              05001111111F
   \              111111000100
   \              01          
   \   000001B1   010101010101       DC8 1, 1, 1, 1, 1, 1, 0, 4, 0, 7, 9, 8, 8, 8, 8, 8, 0, 5, 0, 17, 9, 5
   \              000400070908
   \              080808080005
   \              00110905    
   \   000001C7   030509110004       DC8 3, 5, 9, 17, 0, 4, 0, 15, 1, 1, 1, 1, 1, 1, 0, 7, 0, 73, 85, 85, 85
   \              000F01010101
   \              010100070049
   \              555555      
   \   000001DC   636341000500       DC8 99, 99, 65, 0, 5, 0, 17, 25, 25, 21, 19, 19, 17, 0, 5, 0, 14, 17
   \              111919151313
   \              110005000E11
   \   000001EE   111111110E00       DC8 17, 17, 17, 17, 14, 0, 4, 0, 1, 1, 1, 15, 9, 9, 15, 0, 5, 0, 30, 9
   \              04000101010F
   \              09090F000500
   \              1E09        
   \   00000202   111111110E00       DC8 17, 17, 17, 17, 14, 0, 5, 0, 17, 17, 9, 15, 17, 17, 15, 0, 4, 0, 6
   \              05001111090F
   \              11110F000400
   \              06          
   \   00000215   090806010906       DC8 9, 8, 6, 1, 9, 6, 0, 5, 0, 4, 4, 4, 4, 4, 4, 31, 0, 5, 0, 14, 17
   \              000500040404
   \              0404041F0005
   \              000E11      
   \   0000022A   111111111100       DC8 17, 17, 17, 17, 17, 0, 5, 0, 4, 10, 10, 10, 17, 17, 17, 0, 7, 0, 34
   \              0500040A0A0A
   \              111111000700
   \              22          
   \   0000023D   225549494141       DC8 34, 85, 73, 73, 65, 65, 0, 8, 0, 81, 170, 170, 164, 170, 42, 17, 0
   \              00080051AAAA
   \              A4AA2A1100  
   \   0000024E   050004040404       DC8 5, 0, 4, 4, 4, 4, 10, 10, 17, 0, 6, 0, 63, 1, 2, 4, 8, 16, 63, 0, 2
   \              0A0A11000600
   \              3F0102040810
   \              3F0002      
   \   00000263   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 3, 0, 3, 0, 4, 4, 2, 2, 2, 1, 1, 0, 2, 2, 2, 2
   \              010300030004
   \              040202020101
   \              0002020202  
   \   0000027A   020202020300       DC8 2, 2, 2, 2, 3, 0, 3, 0, 0, 0, 0, 0, 5, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0
   \              030000000000
   \              050502000000
   \              0000000000  
   \   00000291   000000020000       DC8 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 1, 0, 4, 0, 15, 9, 14, 8, 15, 0, 0
   \              000000000201
   \              0004000F090E
   \              080F0000    
   \   000002A7   000400070909       DC8 0, 4, 0, 7, 9, 9, 9, 7, 1, 1, 0, 4, 0, 6, 9, 1, 9, 6, 0, 0, 0, 4, 0
   \              090701010004
   \              000609010906
   \              0000000400  
   \   000002BE   0E0909090E08       DC8 14, 9, 9, 9, 14, 8, 8, 0, 4, 0, 14, 1, 15, 9, 6, 0, 0, 0, 3, 0, 2
   \              080004000E01
   \              0F0906000000
   \              030002      
   \   000002D3   020202070204       DC8 2, 2, 2, 7, 2, 4, 0, 4, 6, 9, 14, 9, 9, 14, 0, 0, 0, 4, 0, 9, 9, 9
   \              000406090E09
   \              090E00000004
   \              00090909    
   \   000002E9   090701010001       DC8 9, 7, 1, 1, 0, 1, 0, 9, 9, 9, 9, 5, 0, 1, 0, 1, 1, 9, 9, 9, 9, 5, 0
   \              000909090905
   \              000100010109
   \              0909090500  
   \   00000300   010004000905       DC8 1, 0, 4, 0, 9, 5, 7, 5, 9, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 7
   \              070509010100
   \              010001010101
   \              0101010007  
   \   00000317   00494949493F       DC8 0, 73, 73, 73, 73, 63, 0, 0, 0, 4, 0, 9, 9, 9, 9, 7, 0, 0, 0, 4, 0
   \              000000040009
   \              090909070000
   \              000400      
   \   0000032C   464949492600       DC8 70, 73, 73, 73, 38, 0, 0, 0, 4, 1, 71, 73, 73, 73, 39, 0, 0, 0, 4
   \              000004014749
   \              494927000000
   \              04          
   \   0000033F   084E4949492E       DC8 8, 78, 73, 73, 73, 46, 0, 0, 0, 3, 0, 1, 1, 1, 1, 7, 0, 0, 0, 4, 0
   \              000000030001
   \              010101070000
   \              000400      
   \   00000354   474846412E00       DC8 71, 72, 70, 65, 46, 0, 0, 0, 2, 0, 67, 73, 65, 65, 43, 1, 0, 0, 4
   \              000002004349
   \              41412B010000
   \              04          
   \   00000367   000E09090909       DC8 0, 14, 9, 9, 9, 9, 0, 0, 0, 7, 0, 68, 74, 74, 74, 17, 0, 0, 0, 5, 0
   \              000000070044
   \              4A4A4A110000
   \              000500      
   \   0000037C   0A1515151500       DC8 10, 21, 21, 21, 21, 0, 0, 0, 4, 0, 73, 70, 70, 70, 9, 0, 0, 0, 5, 4
   \              000004004946
   \              464609000000
   \              0504        
   \   00000390   040A0A0A1100       DC8 4, 10, 10, 10, 17, 0, 0, 0, 3, 0, 71, 65, 66, 68, 23, 0, 0, 0, 3, 2
   \              000003004741
   \              424417000000
   \              0302        
   \   000003A4   424241421202       DC8 66, 66, 65, 66, 18, 2, 6, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 3, 2, 2
   \              060001010101
   \              010101010100
   \              030202      
   \   000003B9   020402020203       DC8 2, 4, 2, 2, 2, 3, 0, 4, 0, 0, 0, 13, 11, 0, 0, 0, 0, 5, 0, 31, 17
   \              00040000000D
   \              0B0000000005
   \              001F11      
   \   000003CE   1111111F0000       DC8 17, 17, 17, 31, 0, 0, 5, 0, 30, 1, 31, 1, 31, 1, 30, 0, 0, 0
   \              05001E011F01
   \              1F011E000000
    789                            {7,127,127,62,62,62,28,28,8,8},        //30   ""
    790                            {7,8,8,28,28,62,62,62,127,127},        //31   ""
    791                            {0,0,0,0,0,0,0,0,0,0},        //32   " "
    792                            {1,0,1,0,1,1,1,1,1,0},        //33   "!"
    793                            {3,0,0,0,0,0,0,5,5,0},        //34   """
    794                            {4,0,5,5,15,10,15,10,10,0},        //35   "#"
    795                            {5,4,14,21,20,14,5,21,14,0},        //36   "$"
    796                            {6,0,20,44,20,8,10,13,18,0},        //37   "%"
    797                            {6,0,46,17,41,14,18,18,28,0},        //38   "&"
    798                            {6,0,44,16,40,12,16,17,29,0},        //39   "'"
    799                            {6,2,41,17,41,9,17,18,28,0},        //40   "("
    800                            {6,2,44,20,44,12,20,18,25,0},        //41   ")"
    801                            {3,0,0,0,5,2,5,0,0,0},        //42   "*"
    802                            {6,0,36,4,63,4,4,0,0,0},        //43   "+"
    803                            {1,1,1,0,0,0,0,0,0,0},        //44   ","
    804                            {2,0,0,0,3,0,0,0,0,0},        //45   "-"
    805                            {1,0,1,0,0,0,0,0,0,0},        //46   "."
    806                            {3,0,1,1,2,2,2,4,4,0},        //47   "/"
    807                            {4,0,6,9,9,9,9,9,6,0},    //0
    808                            {2,0,2,2,2,2,2,3,2,0},    //1
    809                            {4,0,15,2,4,4,8,9,6,0},   //2
    810                            {4,0,6,9,8,4,8,9,6,0},    //3
    811                            {4,0,8,8,31,9,10,12,8,0}, //4
    812                            {4,0,6,9,8,8,7,1,15,0},   //5
    813                            {4,0,6,9,9,9,7,9,6,0},    //6
    814                            {4,0,2,2,2,4,4,8,15,0},   //7
    815                            {4,0,6,9,9,6,9,9,6,0},    //8
    816                            {4,0,6,9,14,9,9,9,6,0},    //9  
    817                            {1,0,1,0,0,0,1,0,0,0},        //58   ":"
    818                            {1,1,1,0,0,0,1,0,0,0},        //59   ";"
    819                            {3,0,0,4,2,1,2,4,0,0},        //60   "<"
    820                            {4,0,0,0,15,0,15,0,0,0},        //61   "="
    821                            {3,0,0,1,2,4,2,1,0,0},        //62   ">"
    822                            {5,0,4,0,4,12,16,17,14,0},        //63   "?"
    823                            {8,194,61,85,149,181,169,66,60,0},        //64   "@"
    824                            {7,0,65,34,62,34,20,20,8,0},        //65   "A"
    825                            {4,0,7,9,9,15,9,9,7,0},        //66   "B"
    826                            {5,0,14,17,1,1,1,17,14,0},        //67   "C"
    827                            {5,0,15,17,17,17,17,17,15,0},        //68   "D"
    828                            {5,0,31,1,1,31,1,1,31,0},        //69   "E"
    829                            {4,0,1,1,1,7,1,1,15,0},        //70   "F"
    830                            {5,0,14,17,17,25,1,17,14,0},        //71   "G"
    831                            {5,0,17,17,17,31,17,17,17,0},        //72   "H"
    832                            {1,0,1,1,1,1,1,1,1,0},        //73   "I"
    833                            {4,0,7,9,8,8,8,8,8,0},        //74   "J"
    834                            {5,0,17,9,5,3,5,9,17,0},        //75   "K"
    835                            {4,0,15,1,1,1,1,1,1,0},        //76   "L"
    836                            {7,0,73,85,85,85,99,99,65,0},        //77   "M"
    837                            {5,0,17,25,25,21,19,19,17,0},        //78   "N"
    838                            {5,0,14,17,17,17,17,17,14,0},        //79   "O"
    839                            {4,0,1,1,1,15,9,9,15,0},        //80   "P"
    840                            {5,0,30,9,17,17,17,17,14,0},        //81   "Q"
    841                            {5,0,17,17,9,15,17,17,15,0},        //82   "R"
    842                            {4,0,6,9,8,6,1,9,6,0},        //83   "S"
    843                            {5,0,4,4,4,4,4,4,31,0},        //84   "T"
    844                            {5,0,14,17,17,17,17,17,17,0},        //85   "U"
    845                            {5,0,4,10,10,10,17,17,17,0},        //86   "V"
    846                            {7,0,34,34,85,73,73,65,65,0},        //87   "W"
    847                            {8,0,81,170,170,164,170,42,17,0},        //88   "X"
    848                            {5,0,4,4,4,4,10,10,17,0},        //89   "Y"
    849                            {6,0,63,1,2,4,8,16,63,0},        //90   "Z"
    850                            {2,1,1,1,1,1,1,1,3,0},        //91   "["
    851                            {3,0,4,4,2,2,2,1,1,0},        //92   "\"
    852                            {2,2,2,2,2,2,2,2,3,0},        //93   "]"
    853                            {3,0,0,0,0,0,5,5,2,0},        //94   "^"
    854                            {0,0,0,0,0,0,0,0,0,0},        //95   "_"
    855                            {2,0,0,0,0,0,0,2,1,0},        //96   "`"
    856                            {4,0,15,9,14,8,15,0,0,0},        //97   "a"
    857                            {4,0,7,9,9,9,7,1,1,0},        //98   "b"
    858                            {4,0,6,9,1,9,6,0,0,0},        //99   "c"
    859                            {4,0,14,9,9,9,14,8,8,0},        //100   "d"
    860                            {4,0,14,1,15,9,6,0,0,0},        //101   "e"
    861                            {3,0,2,2,2,2,7,2,4,0},        //102   "f"
    862                            {4,6,9,14,9,9,14,0,0,0},        //103   "g"
    863                            {4,0,9,9,9,9,7,1,1,0},        //104   "h"
    864                            {1,0,9,9,9,9,5,0,1,0},        //105   "i"
    865                            {1,1,9,9,9,9,5,0,1,0},        //106   "j"
    866                            {4,0,9,5,7,5,9,1,1,0},        //107   "k"
    867                            {1,0,1,1,1,1,1,1,1,0},        //108   "l"
    868                            {7,0,73,73,73,73,63,0,0,0},        //109   "m"
    869                            {4,0,9,9,9,9,7,0,0,0},        //110   "n"
    870                            {4,0,70,73,73,73,38,0,0,0},        //111   "o"
    871                            {4,1,71,73,73,73,39,0,0,0},        //112   "p"
    872                            {4,8,78,73,73,73,46,0,0,0},        //113   "q"
    873                            {3,0,1,1,1,1,7,0,0,0},             //114   "r"
    874                            {4,0,71,72,70,65,46,0,0,0},        //115   "s"
    875                            {2,0,67,73,65,65,43,1,0,0},        //116   "t"
    876                            {4,0,14,9,9,9,9,0,0,0},            //117   "u"
    877                            {7,0,68,74,74,74,17,0,0,0},        //118   "v"
    878                            {5,0,10,21,21,21,21,0,0,0},         //119   "w"
    879                            {4,0,73,70,70,70,9,0,0,0},         //120   "x"
    880                            {5,4,4,10,10,10,17,0,0,0},         //121   "y"
    881                            {3,0,71,65,66,68,23,0,0,0},        //122   "z"
    882                            {3,2,66,66,65,66,18,2,6,0},        //123   "{"
    883                            {1,1,1,1,1,1,1,1,1,0},        //124   "|"
    884                            {3,2,2,2,4,2,2,2,3,0},        //125   "}"
    885                            {4,0,0,0,13,11,0,0,0,0},        //126   "~"
    886                            {5,0,31,17,17,17,17,31,0,0},        //127   ""
    887                            {5,0,30,1,31,1,31,1,30,0}        //128   "€"
    888                            };
    889          
    890          
    891          
    892          
    893          
    894          //*-----------------------------------------------------------------------------
    895          //* Nazwa funkcji :    Label
    896          //* Funkcja wrysowania napisu
    897          //*-----------------------------------------------------------------------------
    898          //*  Vstring    - wskaŸnik do tablicy znaków
    899          //*  alig       - wyrównanie -0=do lewej, 1=do prawej, 2=wyœrodkowany
    900          //*  X          - wspó³¿êdna X zale¿na od wyrównania 
    901          //*  Y          - wspó³¿êdna Y do³u napisu
    902          //*  maxChar    - maksymalna d³ugoœæ napisu w znakach 
    903          //*  clean      - d³ugoœæ (w pikselach) obszaru czyszczenia t³a 
    904          //*  minY, maxY - obszar roboczy
    905          //*  negatyw    - 0-brak, 1-negatyw
    906          //*-----------------------------------------------------------------------------
    907          

   \                                 In section Debug.txt, align 4, keep-with-next
    908          void Label (char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
    909          { 
   \                     Label:
   \   00000000   FFB5               PUSH     {R0-R7,LR}
   \   00000002   8DB0               SUB      SP,SP,#+52
   \   00000004   16A8               ADD      R0,SP,#+88
   \   00000006   0178               LDRB     R1,[R0, #+0]
   \   00000008   0020               MOVS     R0,#+0
    910            //char offset=43;
    911            char offset=30;
    912            
    913            
    914            int kol=0;
    915            char linia=0;
    916            char bit=0;
    917            char ill_znak=0;
    918            
    919            char pocz_X=X;
   \   0000000A   0FAA               ADD      R2,SP,#+60
   \   0000000C   1278               LDRB     R2,[R2, #+0]
   \   0000000E   0992               STR      R2,[SP, #+36]
    920            
    921            kol=X/8;
    922            bit=X%8;
    923            linia=Y;
    924             
    925            char dlugosc=0;
   \   00000010   0022               MOVS     R2,#+0
    926            char clean_offset=0;
   \   00000012   0690               STR      R0,[SP, #+24]
    927            
    928            
    929          
    930            
    931            
    932            
    933            if (alig==1)
   \   00000014   0EAB               ADD      R3,SP,#+56
   \   00000016   1B78               LDRB     R3,[R3, #+0]
   \   00000018   012B               CMP      R3,#+1
   \   0000001A   24D1               BNE      ??Label_0
    934            {
    935              do {       
    936                 
    937                 if (Vstring[ill_znak]>=offset)  
   \                     ??Label_1:
   \   0000001C   0D9C               LDR      R4,[SP, #+52]
   \   0000001E   2418               ADDS     R4,R4,R0
   \   00000020   2378               LDRB     R3,[R4, #+0]
   \   00000022   1E2B               CMP      R3,#+30
   \   00000024   08D3               BCC      ??Label_2
    938                  {
    939                    dlugosc += Arial_7[Vstring[ill_znak]-offset][0];
   \   00000026   CB4B               LDR      R3,??Label_3     ;; 0xfffffed4
   \   00000028   2478               LDRB     R4,[R4, #+0]
   \   0000002A   0A25               MOVS     R5,#+10
   \   0000002C   6C43               MULS     R4,R5,R4
   \   0000002E   CA4D               LDR      R5,??Label_3+0x4  ;; Arial_7
   \   00000030   2C19               ADDS     R4,R5,R4
   \   00000032   E35C               LDRB     R3,[R4, R3]
   \   00000034   D218               ADDS     R2,R2,R3
   \   00000036   00E0               B.N      ??Label_4
    940                  }
    941                 else
    942                 {
    943                   dlugosc++;
    944                   dlugosc++;
    945                   dlugosc++;
   \                     ??Label_2:
   \   00000038   D21C               ADDS     R2,R2,#+3
   \                     ??Label_4:
   \   0000003A   1206               LSLS     R2,R2,#+24
   \   0000003C   120E               LSRS     R2,R2,#+24
    946                 }
    947                 dlugosc++;
   \   0000003E   521C               ADDS     R2,R2,#+1
   \   00000040   1206               LSLS     R2,R2,#+24
   \   00000042   120E               LSRS     R2,R2,#+24
    948                 ill_znak++;
   \   00000044   401C               ADDS     R0,R0,#+1
   \   00000046   0006               LSLS     R0,R0,#+24
   \   00000048   000E               LSRS     R0,R0,#+24
    949                } while ((Vstring[ill_znak]) && (ill_znak<maxChar) && (X-dlugosc>=0) );
   \   0000004A   0D9C               LDR      R4,[SP, #+52]
   \   0000004C   235C               LDRB     R3,[R4, R0]
   \   0000004E   002B               CMP      R3,#+0
   \   00000050   05D0               BEQ      ??Label_5
   \   00000052   8842               CMP      R0,R1
   \   00000054   03D2               BCS      ??Label_5
   \   00000056   0FAB               ADD      R3,SP,#+60
   \   00000058   1B78               LDRB     R3,[R3, #+0]
   \   0000005A   9B1A               SUBS     R3,R3,R2
   \   0000005C   DED5               BPL      ??Label_1
    950           
    951              clean_offset=clean;
   \                     ??Label_5:
   \   0000005E   17A9               ADD      R1,SP,#+92
   \   00000060   0978               LDRB     R1,[R1, #+0]
   \   00000062   0691               STR      R1,[SP, #+24]
   \   00000064   23E0               B        ??Label_6
    952            }
    953            else
    954            {
    955              do {   
    956                 
    957                 
    958                 if (Vstring[ill_znak]>=offset)  
   \                     ??Label_0:
   \   00000066   0D9C               LDR      R4,[SP, #+52]
   \   00000068   2418               ADDS     R4,R4,R0
   \   0000006A   2378               LDRB     R3,[R4, #+0]
   \   0000006C   1E2B               CMP      R3,#+30
   \   0000006E   08D3               BCC      ??Label_7
    959                  {
    960                    dlugosc += Arial_7[Vstring[ill_znak]-offset][0];
   \   00000070   B84B               LDR      R3,??Label_3     ;; 0xfffffed4
   \   00000072   2478               LDRB     R4,[R4, #+0]
   \   00000074   0A25               MOVS     R5,#+10
   \   00000076   6C43               MULS     R4,R5,R4
   \   00000078   B74D               LDR      R5,??Label_3+0x4  ;; Arial_7
   \   0000007A   2C19               ADDS     R4,R5,R4
   \   0000007C   E35C               LDRB     R3,[R4, R3]
   \   0000007E   D218               ADDS     R2,R2,R3
   \   00000080   00E0               B.N      ??Label_8
    961                  }
    962                 else
    963                 {
    964                   dlugosc++;
    965                   dlugosc++;
    966                   dlugosc++;
   \                     ??Label_7:
   \   00000082   D21C               ADDS     R2,R2,#+3
   \                     ??Label_8:
   \   00000084   1206               LSLS     R2,R2,#+24
   \   00000086   120E               LSRS     R2,R2,#+24
    967                 }
    968                 
    969                 
    970                 dlugosc++;
   \   00000088   521C               ADDS     R2,R2,#+1
   \   0000008A   1206               LSLS     R2,R2,#+24
   \   0000008C   120E               LSRS     R2,R2,#+24
    971                 ill_znak++;
   \   0000008E   401C               ADDS     R0,R0,#+1
   \   00000090   0006               LSLS     R0,R0,#+24
   \   00000092   000E               LSRS     R0,R0,#+24
    972               } while ((Vstring[ill_znak]) && (ill_znak<maxChar) && (X+dlugosc<=64));
   \   00000094   0D9C               LDR      R4,[SP, #+52]
   \   00000096   235C               LDRB     R3,[R4, R0]
   \   00000098   002B               CMP      R3,#+0
   \   0000009A   08D0               BEQ      ??Label_6
   \   0000009C   8842               CMP      R0,R1
   \   0000009E   06D2               BCS      ??Label_6
   \   000000A0   0FAB               ADD      R3,SP,#+60
   \   000000A2   1B78               LDRB     R3,[R3, #+0]
   \   000000A4   9B18               ADDS     R3,R3,R2
   \   000000A6   1B04               LSLS     R3,R3,#+16
   \   000000A8   1B0C               LSRS     R3,R3,#+16
   \   000000AA   412B               CMP      R3,#+65
   \   000000AC   DBD3               BCC      ??Label_0
    973              
    974            }
    975              
    976            dlugosc--;
   \                     ??Label_6:
   \   000000AE   511E               SUBS     R1,R2,#+1
   \   000000B0   0906               LSLS     R1,R1,#+24
   \   000000B2   090E               LSRS     R1,R1,#+24
   \   000000B4   0391               STR      R1,[SP, #+12]
   \   000000B6   1099               LDR      R1,[SP, #+64]
   \   000000B8   0906               LSLS     R1,R1,#+24
   \   000000BA   090E               LSRS     R1,R1,#+24
    977            
    978             //Czyszczenie obszaru ----------------------
    979            linia=Y;
    980            for (int i=1; i<=9; i++)
   \   000000BC   A74A               LDR      R2,??Label_3+0x8  ;; LCD_Canvas
   \   000000BE   5218               ADDS     R2,R2,R1
   \   000000C0   0792               STR      R2,[SP, #+28]
   \   000000C2   079A               LDR      R2,[SP, #+28]
   \   000000C4   0192               STR      R2,[SP, #+4]
   \   000000C6   0922               MOVS     R2,#+9
   \   000000C8   0092               STR      R2,[SP, #+0]
   \   000000CA   069A               LDR      R2,[SP, #+24]
   \   000000CC   1206               LSLS     R2,R2,#+24
   \   000000CE   120E               LSRS     R2,R2,#+24
   \   000000D0   0892               STR      R2,[SP, #+32]
   \   000000D2   0FAA               ADD      R2,SP,#+60
   \   000000D4   1278               LDRB     R2,[R2, #+0]
   \   000000D6   089B               LDR      R3,[SP, #+32]
   \   000000D8   D21A               SUBS     R2,R2,R3
   \   000000DA   0492               STR      R2,[SP, #+16]
    981             {
    982              if ((linia>=minY) && (linia<=maxY))
   \                     ??Label_9:
   \   000000DC   18AB               ADD      R3,SP,#+96
   \   000000DE   1B78               LDRB     R3,[R3, #+0]
   \   000000E0   9942               CMP      R1,R3
   \   000000E2   27D3               BCC      ??Label_10
   \   000000E4   19AA               ADD      R2,SP,#+100
   \   000000E6   1278               LDRB     R2,[R2, #+0]
   \   000000E8   8A42               CMP      R2,R1
   \   000000EA   23D3               BCC      ??Label_10
    983              {
    984               kol=(X-clean_offset)/8;
   \   000000EC   049A               LDR      R2,[SP, #+16]
   \   000000EE   9310               ASRS     R3,R2,#+2
   \   000000F0   5B0F               LSRS     R3,R3,#+29
   \   000000F2   9A18               ADDS     R2,R3,R2
   \   000000F4   D210               ASRS     R2,R2,#+3
   \   000000F6   1300               MOVS     R3,R2
    985               bit=(X-clean_offset)%8;
   \   000000F8   0FAD               ADD      R5,SP,#+60
   \   000000FA   2D78               LDRB     R5,[R5, #+0]
   \   000000FC   069E               LDR      R6,[SP, #+24]
   \   000000FE   AD1B               SUBS     R5,R5,R6
   \   00000100   D200               LSLS     R2,R2,#+3
   \   00000102   AA1A               SUBS     R2,R5,R2
   \   00000104   1206               LSLS     R2,R2,#+24
   \   00000106   120E               LSRS     R2,R2,#+24
    986                 
    987                for (int j=0; j<=clean; j++)
   \   00000108   17AD               ADD      R5,SP,#+92
   \   0000010A   2D78               LDRB     R5,[R5, #+0]
   \   0000010C   6D1C               ADDS     R5,R5,#+1
    988                {
    989                  LCD_Canvas[kol][linia] &=~(1<<bit);
   \                     ??Label_11:
   \   0000010E   DC01               LSLS     R4,R3,#+7
   \   00000110   019E               LDR      R6,[SP, #+4]
   \   00000112   3419               ADDS     R4,R6,R4
   \   00000114   0594               STR      R4,[SP, #+20]
   \   00000116   2678               LDRB     R6,[R4, #+0]
   \   00000118   0127               MOVS     R7,#+1
   \   0000011A   9740               LSLS     R7,R7,R2
   \   0000011C   BE43               BICS     R6,R6,R7
   \   0000011E   2670               STRB     R6,[R4, #+0]
    990                  
    991                  if (bit<7) { bit++;} else {bit=0;  kol++; }
   \   00000120   072A               CMP      R2,#+7
   \   00000122   03D2               BCS      ??Label_12
   \   00000124   521C               ADDS     R2,R2,#+1
   \   00000126   1206               LSLS     R2,R2,#+24
   \   00000128   120E               LSRS     R2,R2,#+24
   \   0000012A   01E0               B        ??Label_13
   \                     ??Label_12:
   \   0000012C   0022               MOVS     R2,#+0
   \   0000012E   5B1C               ADDS     R3,R3,#+1
    992                }   
   \                     ??Label_13:
   \   00000130   6D1E               SUBS     R5,R5,#+1
   \   00000132   ECD1               BNE      ??Label_11
    993          
    994          
    995             }
    996              linia++;
   \                     ??Label_10:
   \   00000134   491C               ADDS     R1,R1,#+1
   \   00000136   0906               LSLS     R1,R1,#+24
   \   00000138   090E               LSRS     R1,R1,#+24
    997            }
   \   0000013A   019A               LDR      R2,[SP, #+4]
   \   0000013C   521C               ADDS     R2,R2,#+1
   \   0000013E   0192               STR      R2,[SP, #+4]
   \   00000140   009A               LDR      R2,[SP, #+0]
   \   00000142   521E               SUBS     R2,R2,#+1
   \   00000144   0092               STR      R2,[SP, #+0]
   \   00000146   C9D1               BNE      ??Label_9
    998            //------------------------------------------------------
    999              
   1000            if (alig==1)
   \   00000148   0EA9               ADD      R1,SP,#+56
   \   0000014A   0978               LDRB     R1,[R1, #+0]
   \   0000014C   0129               CMP      R1,#+1
   \   0000014E   05D1               BNE      ??Label_14
   1001            {  
   1002              X-=dlugosc;
   \   00000150   0FA9               ADD      R1,SP,#+60
   \   00000152   0FAA               ADD      R2,SP,#+60
   \   00000154   1278               LDRB     R2,[R2, #+0]
   \   00000156   039B               LDR      R3,[SP, #+12]
   \   00000158   D21A               SUBS     R2,R2,R3
   \   0000015A   19E0               B.N      ??Label_15
   1003            }  
   1004           
   1005            if (alig==2)
   \                     ??Label_14:
   \   0000015C   0EA9               ADD      R1,SP,#+56
   \   0000015E   0978               LDRB     R1,[R1, #+0]
   \   00000160   0229               CMP      R1,#+2
   \   00000162   16D1               BNE      ??Label_16
   \   00000164   17A9               ADD      R1,SP,#+92
   \   00000166   0978               LDRB     R1,[R1, #+0]
   \   00000168   039A               LDR      R2,[SP, #+12]
   \   0000016A   1206               LSLS     R2,R2,#+24
   \   0000016C   120E               LSRS     R2,R2,#+24
   \   0000016E   891A               SUBS     R1,R1,R2
   \   00000170   CA0F               LSRS     R2,R1,#+31
   \   00000172   5218               ADDS     R2,R2,R1
   \   00000174   5210               ASRS     R2,R2,#+1
   \   00000176   0FAB               ADD      R3,SP,#+60
   \   00000178   0FAC               ADD      R4,SP,#+60
   \   0000017A   2478               LDRB     R4,[R4, #+0]
   \   0000017C   A418               ADDS     R4,R4,R2
   \   0000017E   1C70               STRB     R4,[R3, #+0]
   1006            {  
   1007              X+=(clean-dlugosc)/2;
   1008              
   1009              if (((clean-dlugosc)%2)>0) X++;
   \   00000180   5200               LSLS     R2,R2,#+1
   \   00000182   8A1A               SUBS     R2,R1,R2
   \   00000184   012A               CMP      R2,#+1
   \   00000186   04DB               BLT      ??Label_16
   \   00000188   0FA9               ADD      R1,SP,#+60
   \   0000018A   0FAA               ADD      R2,SP,#+60
   \   0000018C   1278               LDRB     R2,[R2, #+0]
   \   0000018E   521C               ADDS     R2,R2,#+1
   \                     ??Label_15:
   \   00000190   0A70               STRB     R2,[R1, #+0]
   1010            }  
   1011          
   1012              
   1013            //wklejanie napisu do LCD_Canvas ----------------------
   1014            linia=Y;
   \                     ??Label_16:
   \   00000192   1099               LDR      R1,[SP, #+64]
   \   00000194   0906               LSLS     R1,R1,#+24
   \   00000196   090E               LSRS     R1,R1,#+24
   \   00000198   0291               STR      R1,[SP, #+8]
   1015            for (int i=1; i<=9; i++)
   \   0000019A   0799               LDR      R1,[SP, #+28]
   \   0000019C   0191               STR      R1,[SP, #+4]
   \   0000019E   6E49               LDR      R1,??Label_3+0x4  ;; Arial_7
   \   000001A0   6F4A               LDR      R2,??Label_3+0xC  ;; 0xfffffed5
   \   000001A2   8A18               ADDS     R2,R1,R2
   \   000001A4   0392               STR      R2,[SP, #+12]
   \   000001A6   0922               MOVS     R2,#+9
   \   000001A8   0492               STR      R2,[SP, #+16]
   \   000001AA   0FAA               ADD      R2,SP,#+60
   \   000001AC   1278               LDRB     R2,[R2, #+0]
   \   000001AE   D308               LSRS     R3,R2,#+3
   \   000001B0   DB00               LSLS     R3,R3,#+3
   \   000001B2   D21A               SUBS     R2,R2,R3
   \   000001B4   1206               LSLS     R2,R2,#+24
   \   000001B6   120E               LSRS     R2,R2,#+24
   \   000001B8   0592               STR      R2,[SP, #+20]
   \   000001BA   0200               MOVS     R2,R0
   \   000001BC   521E               SUBS     R2,R2,#+1
   \   000001BE   0A92               STR      R2,[SP, #+40]
   \   000001C0   644A               LDR      R2,??Label_3     ;; 0xfffffed4
   \   000001C2   8918               ADDS     R1,R1,R2
   \   000001C4   0B91               STR      R1,[SP, #+44]
   1016             {
   1017              if ((linia>=minY) && (linia<=maxY))
   \                     ??Label_17:
   \   000001C6   0299               LDR      R1,[SP, #+8]
   \   000001C8   18AA               ADD      R2,SP,#+96
   \   000001CA   1278               LDRB     R2,[R2, #+0]
   \   000001CC   0906               LSLS     R1,R1,#+24
   \   000001CE   090E               LSRS     R1,R1,#+24
   \   000001D0   9142               CMP      R1,R2
   \   000001D2   56D3               BCC      ??Label_18
   \   000001D4   19A9               ADD      R1,SP,#+100
   \   000001D6   0978               LDRB     R1,[R1, #+0]
   \   000001D8   029A               LDR      R2,[SP, #+8]
   \   000001DA   1206               LSLS     R2,R2,#+24
   \   000001DC   120E               LSRS     R2,R2,#+24
   \   000001DE   9142               CMP      R1,R2
   \   000001E0   4FD3               BCC      ??Label_18
   1018              {
   1019               kol=X/8;
   \   000001E2   0FA9               ADD      R1,SP,#+60
   \   000001E4   0978               LDRB     R1,[R1, #+0]
   \   000001E6   CB08               LSRS     R3,R1,#+3
   1020               bit=X%8;
   \   000001E8   059A               LDR      R2,[SP, #+20]
   1021              for (int k=0; k<=(ill_znak-1); k++)
   \   000001EA   0A99               LDR      R1,[SP, #+40]
   \   000001EC   0029               CMP      R1,#+0
   \   000001EE   48D4               BMI      ??Label_18
   \   000001F0   0D99               LDR      R1,[SP, #+52]
   \   000001F2   0091               STR      R1,[SP, #+0]
   \   000001F4   0100               MOVS     R1,R0
   1022              {     
   1023                
   1024                if ((Vstring[k]>=offset) &&  (Vstring[k]!=32))
   \                     ??Label_19:
   \   000001F6   009C               LDR      R4,[SP, #+0]
   \   000001F8   2478               LDRB     R4,[R4, #+0]
   \   000001FA   1E2C               CMP      R4,#+30
   \   000001FC   24D3               BCC      ??Label_20
   \   000001FE   202C               CMP      R4,#+32
   \   00000200   22D0               BEQ      ??Label_20
   1025                {
   1026                  for (int j=0; j<=Arial_7[Vstring[k]-offset][0]; j++)
   \   00000202   0024               MOVS     R4,#+0
   \   00000204   02E0               B        ??Label_21
   1027                  {
   1028                      LCD_Canvas[kol][linia] |= (((Arial_7[Vstring[k]-offset][i])>>j)&0x1)<<bit;
   1029                      if (bit<7) { bit++;} else {bit=0;  kol++; } 
   \                     ??Label_22:
   \   00000206   0022               MOVS     R2,#+0
   \   00000208   5B1C               ADDS     R3,R3,#+1
   \                     ??Label_23:
   \   0000020A   641C               ADDS     R4,R4,#+1
   \                     ??Label_21:
   \   0000020C   009D               LDR      R5,[SP, #+0]
   \   0000020E   2F78               LDRB     R7,[R5, #+0]
   \   00000210   0A25               MOVS     R5,#+10
   \   00000212   6F43               MULS     R7,R5,R7
   \   00000214   0B9D               LDR      R5,[SP, #+44]
   \   00000216   ED5D               LDRB     R5,[R5, R7]
   \   00000218   A542               CMP      R5,R4
   \   0000021A   2DDB               BLT      ??Label_24
   \   0000021C   DD01               LSLS     R5,R3,#+7
   \   0000021E   019E               LDR      R6,[SP, #+4]
   \   00000220   7519               ADDS     R5,R6,R5
   \   00000222   2E78               LDRB     R6,[R5, #+0]
   \   00000224   B446               MOV      R12,R6
   \   00000226   039E               LDR      R6,[SP, #+12]
   \   00000228   F75D               LDRB     R7,[R6, R7]
   \   0000022A   2741               ASRS     R7,R7,R4
   \   0000022C   0126               MOVS     R6,#+1
   \   0000022E   3E40               ANDS     R6,R6,R7
   \   00000230   9640               LSLS     R6,R6,R2
   \   00000232   6746               MOV      R7,R12
   \   00000234   3E43               ORRS     R6,R6,R7
   \   00000236   2E70               STRB     R6,[R5, #+0]
   \   00000238   1506               LSLS     R5,R2,#+24
   \   0000023A   2D0E               LSRS     R5,R5,#+24
   \   0000023C   072D               CMP      R5,#+7
   \   0000023E   E2D2               BCS      ??Label_22
   \   00000240   521C               ADDS     R2,R2,#+1
   \   00000242   1206               LSLS     R2,R2,#+24
   \   00000244   120E               LSRS     R2,R2,#+24
   \   00000246   E0E7               B        ??Label_23
   1030                  }
   1031                }
   1032                else 
   1033                {
   1034                     if (bit<7) { bit++;} else {bit=0;  kol++; } 
   \                     ??Label_20:
   \   00000248   1406               LSLS     R4,R2,#+24
   \   0000024A   240E               LSRS     R4,R4,#+24
   \   0000024C   072C               CMP      R4,#+7
   \   0000024E   0AD2               BCS      ??Label_25
   \   00000250   521C               ADDS     R2,R2,#+1
   \   00000252   1206               LSLS     R2,R2,#+24
   \   00000254   120E               LSRS     R2,R2,#+24
   1035                     if (bit<7) { bit++;} else {bit=0;  kol++; } 
   \   00000256   072A               CMP      R2,#+7
   \   00000258   07D3               BCC      ??Label_26
   \   0000025A   0022               MOVS     R2,#+0
   \   0000025C   5B1C               ADDS     R3,R3,#+1
   1036                     if (bit<7) { bit++;} else {bit=0;  kol++; } 
   \                     ??Label_27:
   \   0000025E   521C               ADDS     R2,R2,#+1
   \   00000260   1206               LSLS     R2,R2,#+24
   \   00000262   120E               LSRS     R2,R2,#+24
   \   00000264   08E0               B        ??Label_24
   \                     ??Label_25:
   \   00000266   0022               MOVS     R2,#+0
   \   00000268   5B1C               ADDS     R3,R3,#+1
   \                     ??Label_26:
   \   0000026A   521C               ADDS     R2,R2,#+1
   \   0000026C   1206               LSLS     R2,R2,#+24
   \   0000026E   120E               LSRS     R2,R2,#+24
   \   00000270   072A               CMP      R2,#+7
   \   00000272   F4D3               BCC      ??Label_27
   \   00000274   0022               MOVS     R2,#+0
   \   00000276   5B1C               ADDS     R3,R3,#+1
   1037          
   1038                }
   1039                
   1040                
   1041              }
   \                     ??Label_24:
   \   00000278   009C               LDR      R4,[SP, #+0]
   \   0000027A   641C               ADDS     R4,R4,#+1
   \   0000027C   0094               STR      R4,[SP, #+0]
   \   0000027E   491E               SUBS     R1,R1,#+1
   \   00000280   B9D1               BNE      ??Label_19
   1042             }
   1043              linia++;
   \                     ??Label_18:
   \   00000282   0299               LDR      R1,[SP, #+8]
   \   00000284   491C               ADDS     R1,R1,#+1
   \   00000286   0906               LSLS     R1,R1,#+24
   \   00000288   090E               LSRS     R1,R1,#+24
   \   0000028A   0291               STR      R1,[SP, #+8]
   1044            }
   \   0000028C   0399               LDR      R1,[SP, #+12]
   \   0000028E   491C               ADDS     R1,R1,#+1
   \   00000290   0391               STR      R1,[SP, #+12]
   \   00000292   0199               LDR      R1,[SP, #+4]
   \   00000294   491C               ADDS     R1,R1,#+1
   \   00000296   0191               STR      R1,[SP, #+4]
   \   00000298   0499               LDR      R1,[SP, #+16]
   \   0000029A   491E               SUBS     R1,R1,#+1
   \   0000029C   0491               STR      R1,[SP, #+16]
   \   0000029E   92D1               BNE      ??Label_17
   1045            //------------------------------------------------------
   1046              
   1047          
   1048            //negatyw obszaru ----------------------
   1049           if (negatyw)
   \   000002A0   1AA8               ADD      R0,SP,#+104
   \   000002A2   0078               LDRB     R0,[R0, #+0]
   \   000002A4   0028               CMP      R0,#+0
   \   000002A6   51D0               BEQ      ??Label_28
   1050           {
   1051            linia=Y;
   \   000002A8   1098               LDR      R0,[SP, #+64]
   \   000002AA   0006               LSLS     R0,R0,#+24
   \   000002AC   000E               LSRS     R0,R0,#+24
   \   000002AE   0290               STR      R0,[SP, #+8]
   1052            for (int i=1; i<=9; i++)
   \   000002B0   0798               LDR      R0,[SP, #+28]
   \   000002B2   0090               STR      R0,[SP, #+0]
   \   000002B4   0920               MOVS     R0,#+9
   \   000002B6   0999               LDR      R1,[SP, #+36]
   \   000002B8   0906               LSLS     R1,R1,#+24
   \   000002BA   090E               LSRS     R1,R1,#+24
   \   000002BC   089A               LDR      R2,[SP, #+32]
   \   000002BE   891A               SUBS     R1,R1,R2
   \   000002C0   0191               STR      R1,[SP, #+4]
   1053             {
   1054              if ((linia>=minY) && (linia<=maxY))
   \                     ??Label_29:
   \   000002C2   0299               LDR      R1,[SP, #+8]
   \   000002C4   18AA               ADD      R2,SP,#+96
   \   000002C6   1278               LDRB     R2,[R2, #+0]
   \   000002C8   0906               LSLS     R1,R1,#+24
   \   000002CA   090E               LSRS     R1,R1,#+24
   \   000002CC   9142               CMP      R1,R2
   \   000002CE   33D3               BCC      ??Label_30
   \   000002D0   19A9               ADD      R1,SP,#+100
   \   000002D2   0978               LDRB     R1,[R1, #+0]
   \   000002D4   029A               LDR      R2,[SP, #+8]
   \   000002D6   1206               LSLS     R2,R2,#+24
   \   000002D8   120E               LSRS     R2,R2,#+24
   \   000002DA   9142               CMP      R1,R2
   \   000002DC   2CD3               BCC      ??Label_30
   1055              {
   1056               
   1057               kol=(pocz_X-clean_offset)/8;
   \   000002DE   0199               LDR      R1,[SP, #+4]
   \   000002E0   8A10               ASRS     R2,R1,#+2
   \   000002E2   520F               LSRS     R2,R2,#+29
   \   000002E4   5118               ADDS     R1,R2,R1
   \   000002E6   CA10               ASRS     R2,R1,#+3
   \   000002E8   1300               MOVS     R3,R2
   1058               bit=(pocz_X-clean_offset)%8;
   \   000002EA   099C               LDR      R4,[SP, #+36]
   \   000002EC   069D               LDR      R5,[SP, #+24]
   \   000002EE   641B               SUBS     R4,R4,R5
   \   000002F0   D200               LSLS     R2,R2,#+3
   \   000002F2   A21A               SUBS     R2,R4,R2
   \   000002F4   1206               LSLS     R2,R2,#+24
   \   000002F6   120E               LSRS     R2,R2,#+24
   1059                 
   1060                for (int j=0; j<=clean; j++)
   \   000002F8   17AC               ADD      R4,SP,#+92
   \   000002FA   2478               LDRB     R4,[R4, #+0]
   \   000002FC   641C               ADDS     R4,R4,#+1
   1061                {
   1062                 
   1063                  if (((LCD_Canvas[kol][linia]>>bit)&0x1)>0)
   \                     ??Label_31:
   \   000002FE   D901               LSLS     R1,R3,#+7
   \   00000300   009D               LDR      R5,[SP, #+0]
   \   00000302   6D18               ADDS     R5,R5,R1
   \   00000304   2978               LDRB     R1,[R5, #+0]
   \   00000306   0E00               MOVS     R6,R1
   \   00000308   1641               ASRS     R6,R6,R2
   \   0000030A   0127               MOVS     R7,#+1
   \   0000030C   3740               ANDS     R7,R7,R6
   \   0000030E   012F               CMP      R7,#+1
   \   00000310   04DB               BLT      ??Label_32
   1064                  {
   1065                     LCD_Canvas[kol][linia] &=~(1<<bit);   
   \   00000312   0126               MOVS     R6,#+1
   \   00000314   9640               LSLS     R6,R6,R2
   \   00000316   B143               BICS     R1,R1,R6
   \   00000318   2970               STRB     R1,[R5, #+0]
   \   0000031A   03E0               B        ??Label_33
   1066                    
   1067                  }
   1068                  else
   1069                  {
   1070                    LCD_Canvas[kol][linia] |=(1<<bit); 
   \                     ??Label_32:
   \   0000031C   0126               MOVS     R6,#+1
   \   0000031E   9640               LSLS     R6,R6,R2
   \   00000320   0E43               ORRS     R6,R6,R1
   \   00000322   2E70               STRB     R6,[R5, #+0]
   1071                    
   1072                  }
   1073                  
   1074                  
   1075                  
   1076                  if (bit<7) { bit++;} else {bit=0;  kol++; }
   \                     ??Label_33:
   \   00000324   072A               CMP      R2,#+7
   \   00000326   03D2               BCS      ??Label_34
   \   00000328   521C               ADDS     R2,R2,#+1
   \   0000032A   1206               LSLS     R2,R2,#+24
   \   0000032C   120E               LSRS     R2,R2,#+24
   \   0000032E   01E0               B        ??Label_35
   \                     ??Label_34:
   \   00000330   0022               MOVS     R2,#+0
   \   00000332   5B1C               ADDS     R3,R3,#+1
   1077                }   
   \                     ??Label_35:
   \   00000334   641E               SUBS     R4,R4,#+1
   \   00000336   E2D1               BNE      ??Label_31
   1078          
   1079          
   1080             }
   1081              linia++;
   \                     ??Label_30:
   \   00000338   0299               LDR      R1,[SP, #+8]
   \   0000033A   491C               ADDS     R1,R1,#+1
   \   0000033C   0906               LSLS     R1,R1,#+24
   \   0000033E   090E               LSRS     R1,R1,#+24
   \   00000340   0291               STR      R1,[SP, #+8]
   1082            }
   \   00000342   0099               LDR      R1,[SP, #+0]
   \   00000344   491C               ADDS     R1,R1,#+1
   \   00000346   0091               STR      R1,[SP, #+0]
   \   00000348   401E               SUBS     R0,R0,#+1
   \   0000034A   BAD1               BNE      ??Label_29
   1083            }
   1084            //------------------------------------------------------
   1085             
   1086          
   1087            
   1088          }//_______________________ Koniec funkcji Label __________________________
   \                     ??Label_28:
   \   0000034C   11B0               ADD      SP,SP,#+68
   \   0000034E   F0BC               POP      {R4-R7}
   \   00000350   01BC               POP      {R0}
   \   00000352   0047               BX       R0               ;; return
   \                     ??Label_3:
   \   00000354   D4FEFFFF           DC32     0xfffffed4
   \   00000358   ........           DC32     Arial_7
   \   0000035C   ........           DC32     LCD_Canvas
   \   00000360   D5FEFFFF           DC32     0xfffffed5
   1089          
   1090          
   1091          
   1092          
   1093          
   1094          
   1095          
   1096          //*-----------------------------------------------------------------------------
   1097          //* Nazwa funkcji :    TimeToStr
   1098          //* Funkcja Czasu na string
   1099          //*-----------------------------------------------------------------------------
   1100          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1101          void TimeToStr (char godz, char min, char sek, char Vstring[8]) 
   1102          { 
   \                     TimeToStr:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0F00               MOVS     R7,R1
   \   00000006   1400               MOVS     R4,R2
   \   00000008   1D00               MOVS     R5,R3
   1103                 if (godz<10) 
   \   0000000A   0A2E               CMP      R6,#+10
   \   0000000C   04D2               BCS      ??TimeToStr_0
   1104                 {
   1105                   Vstring[0]=48;
   \   0000000E   3020               MOVS     R0,#+48
   \   00000010   2870               STRB     R0,[R5, #+0]
   1106                   Vstring[1]=godz+48;
   \   00000012   3036               ADDS     R6,R6,#+48
   \   00000014   6E70               STRB     R6,[R5, #+1]
   \   00000016   0AE0               B        ??TimeToStr_1
   1107                 }
   1108                 else
   1109                 {
   1110                   Vstring[0]=godz/10+48;
   \                     ??TimeToStr_0:
   \   00000018   0A21               MOVS     R1,#+10
   \   0000001A   ........           BL       __aeabi_idivmod
   \   0000001E   3030               ADDS     R0,R0,#+48
   \   00000020   2870               STRB     R0,[R5, #+0]
   1111                   Vstring[1]=godz%10+48;
   \   00000022   3000               MOVS     R0,R6
   \   00000024   0A21               MOVS     R1,#+10
   \   00000026   ........           BL       __aeabi_idivmod
   \   0000002A   3031               ADDS     R1,R1,#+48
   \   0000002C   6970               STRB     R1,[R5, #+1]
   1112                 }
   1113                 Vstring[2]=58;
   \                     ??TimeToStr_1:
   \   0000002E   3A26               MOVS     R6,#+58
   \   00000030   AE70               STRB     R6,[R5, #+2]
   1114                 
   1115                 if (min<10) 
   \   00000032   0A2F               CMP      R7,#+10
   \   00000034   04D2               BCS      ??TimeToStr_2
   1116                 {
   1117                   Vstring[3]=48;
   \   00000036   3020               MOVS     R0,#+48
   \   00000038   E870               STRB     R0,[R5, #+3]
   1118                   Vstring[4]=min+48;
   \   0000003A   3037               ADDS     R7,R7,#+48
   \   0000003C   2F71               STRB     R7,[R5, #+4]
   \   0000003E   0BE0               B        ??TimeToStr_3
   1119                 }
   1120                 else
   1121                 {
   1122                   Vstring[3]=min/10+48;
   \                     ??TimeToStr_2:
   \   00000040   3800               MOVS     R0,R7
   \   00000042   0A21               MOVS     R1,#+10
   \   00000044   ........           BL       __aeabi_idivmod
   \   00000048   3030               ADDS     R0,R0,#+48
   \   0000004A   E870               STRB     R0,[R5, #+3]
   1123                   Vstring[4]=min%10+48;
   \   0000004C   3800               MOVS     R0,R7
   \   0000004E   0A21               MOVS     R1,#+10
   \   00000050   ........           BL       __aeabi_idivmod
   \   00000054   3031               ADDS     R1,R1,#+48
   \   00000056   2971               STRB     R1,[R5, #+4]
   1124                 }
   1125                 Vstring[5]=58;
   \                     ??TimeToStr_3:
   \   00000058   6E71               STRB     R6,[R5, #+5]
   1126                 
   1127                 
   1128                 if (sek<10) 
   \   0000005A   0A2C               CMP      R4,#+10
   \   0000005C   04D2               BCS      ??TimeToStr_4
   1129                 {
   1130                   Vstring[6]=48;
   \   0000005E   3020               MOVS     R0,#+48
   \   00000060   A871               STRB     R0,[R5, #+6]
   1131                   Vstring[7]=sek+48;
   \   00000062   3034               ADDS     R4,R4,#+48
   \   00000064   EC71               STRB     R4,[R5, #+7]
   \   00000066   0BE0               B        ??TimeToStr_5
   1132                 }
   1133                 else
   1134                 {
   1135                   Vstring[6]=sek/10+48;
   \                     ??TimeToStr_4:
   \   00000068   2000               MOVS     R0,R4
   \   0000006A   0A21               MOVS     R1,#+10
   \   0000006C   ........           BL       __aeabi_idivmod
   \   00000070   3030               ADDS     R0,R0,#+48
   \   00000072   A871               STRB     R0,[R5, #+6]
   1136                   Vstring[7]=sek%10+48;
   \   00000074   2000               MOVS     R0,R4
   \   00000076   0A21               MOVS     R1,#+10
   \   00000078   ........           BL       __aeabi_idivmod
   \   0000007C   3031               ADDS     R1,R1,#+48
   \   0000007E   E971               STRB     R1,[R5, #+7]
   1137                 }
   1138          
   1139                 
   1140          }//_______________________ Koniec funkcji TimeToStr____________________________
   \                     ??TimeToStr_5:
   \   00000080   01B0               ADD      SP,SP,#+4
   \   00000082   F0BC               POP      {R4-R7}
   \   00000084   01BC               POP      {R0}
   \   00000086   0047               BX       R0               ;; return
   1141          
   1142          
   1143          
   1144          //*-----------------------------------------------------------------------------
   1145          //* Nazwa funkcji :    DateToStr
   1146          //* Funkcja Daty na string
   1147          //*-----------------------------------------------------------------------------
   1148          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1149          void DateToStr (char dzin, char mies, char rok, char Vstring[8]) 
   1150          { 
   \                     DateToStr:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   0F00               MOVS     R7,R1
   \   00000006   1400               MOVS     R4,R2
   \   00000008   1D00               MOVS     R5,R3
   1151                 if (dzin<10) 
   \   0000000A   0A2E               CMP      R6,#+10
   \   0000000C   04D2               BCS      ??DateToStr_0
   1152                 {
   1153                   Vstring[0]=48;
   \   0000000E   3020               MOVS     R0,#+48
   \   00000010   2870               STRB     R0,[R5, #+0]
   1154                   Vstring[1]=dzin+48;
   \   00000012   3036               ADDS     R6,R6,#+48
   \   00000014   6E70               STRB     R6,[R5, #+1]
   \   00000016   0AE0               B        ??DateToStr_1
   1155                 }
   1156                 else
   1157                 {
   1158                   Vstring[0]=dzin/10+48;
   \                     ??DateToStr_0:
   \   00000018   0A21               MOVS     R1,#+10
   \   0000001A   ........           BL       __aeabi_idivmod
   \   0000001E   3030               ADDS     R0,R0,#+48
   \   00000020   2870               STRB     R0,[R5, #+0]
   1159                   Vstring[1]=dzin%10+48;
   \   00000022   3000               MOVS     R0,R6
   \   00000024   0A21               MOVS     R1,#+10
   \   00000026   ........           BL       __aeabi_idivmod
   \   0000002A   3031               ADDS     R1,R1,#+48
   \   0000002C   6970               STRB     R1,[R5, #+1]
   1160                 }
   1161                 Vstring[2]=45; //"-"
   \                     ??DateToStr_1:
   \   0000002E   2D26               MOVS     R6,#+45
   \   00000030   AE70               STRB     R6,[R5, #+2]
   1162                 
   1163                 if (mies<10) 
   \   00000032   0A2F               CMP      R7,#+10
   \   00000034   04D2               BCS      ??DateToStr_2
   1164                 {
   1165                   Vstring[3]=48;
   \   00000036   3020               MOVS     R0,#+48
   \   00000038   E870               STRB     R0,[R5, #+3]
   1166                   Vstring[4]=mies+48;
   \   0000003A   3037               ADDS     R7,R7,#+48
   \   0000003C   2F71               STRB     R7,[R5, #+4]
   \   0000003E   0BE0               B        ??DateToStr_3
   1167                 }
   1168                 else
   1169                 {
   1170                   Vstring[3]=mies/10+48;
   \                     ??DateToStr_2:
   \   00000040   3800               MOVS     R0,R7
   \   00000042   0A21               MOVS     R1,#+10
   \   00000044   ........           BL       __aeabi_idivmod
   \   00000048   3030               ADDS     R0,R0,#+48
   \   0000004A   E870               STRB     R0,[R5, #+3]
   1171                   Vstring[4]=mies%10+48;
   \   0000004C   3800               MOVS     R0,R7
   \   0000004E   0A21               MOVS     R1,#+10
   \   00000050   ........           BL       __aeabi_idivmod
   \   00000054   3031               ADDS     R1,R1,#+48
   \   00000056   2971               STRB     R1,[R5, #+4]
   1172                 }
   1173                 Vstring[5]=45; //"-"
   \                     ??DateToStr_3:
   \   00000058   6E71               STRB     R6,[R5, #+5]
   1174                 
   1175                 
   1176                 if (rok<10) 
   \   0000005A   0A2C               CMP      R4,#+10
   \   0000005C   04D2               BCS      ??DateToStr_4
   1177                 {
   1178                   Vstring[6]=48;
   \   0000005E   3020               MOVS     R0,#+48
   \   00000060   A871               STRB     R0,[R5, #+6]
   1179                   Vstring[7]=rok+48;
   \   00000062   3034               ADDS     R4,R4,#+48
   \   00000064   EC71               STRB     R4,[R5, #+7]
   \   00000066   0BE0               B        ??DateToStr_5
   1180                 }
   1181                 else
   1182                 {
   1183                   Vstring[6]=rok/10+48;
   \                     ??DateToStr_4:
   \   00000068   2000               MOVS     R0,R4
   \   0000006A   0A21               MOVS     R1,#+10
   \   0000006C   ........           BL       __aeabi_idivmod
   \   00000070   3030               ADDS     R0,R0,#+48
   \   00000072   A871               STRB     R0,[R5, #+6]
   1184                   Vstring[7]=rok%10+48;
   \   00000074   2000               MOVS     R0,R4
   \   00000076   0A21               MOVS     R1,#+10
   \   00000078   ........           BL       __aeabi_idivmod
   \   0000007C   3031               ADDS     R1,R1,#+48
   \   0000007E   E971               STRB     R1,[R5, #+7]
   1185                 }
   1186          
   1187                 
   1188          }//_______________________ Koniec funkcji DateToStr ____________________________
   \                     ??DateToStr_5:
   \   00000080   01B0               ADD      SP,SP,#+4
   \   00000082   F0BC               POP      {R4-R7}
   \   00000084   01BC               POP      {R0}
   \   00000086   0047               BX       R0               ;; return
   1189          
   1190          
   1191          
   1192          
   1193          //*-----------------------------------------------------------------------------
   1194          //* Nazwa funkcji :    CharToStr
   1195          //* Funkcja konwersji zmiennej float na ³añcuch string   
   1196          //*-----------------------------------------------------------------------------
   1197          //*  Value   - zmienna typu float
   1198          //*  Vstring - tablica znaków
   1199          //*  ill     - liloœæ znaków (max=9) , ostatnia wartoœæ zapisanego ³añcucha to zawsze 0
   1200          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1201          void CharToStr (char Value, char *Vstring, char ill) 
   1202          { 
   \                     CharToStr:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0C00               MOVS     R4,R1
   \   00000004   1500               MOVS     R5,R2
   1203                char set=0;
   1204                char dzies=0;
   1205                char jedn=0;
   1206                
   1207                set= Value/100;
   \   00000006   0600               MOVS     R6,R0
   \   00000008   6421               MOVS     R1,#+100
   \   0000000A   ........           BL       __aeabi_idivmod
   \   0000000E   0706               LSLS     R7,R0,#+24
   \   00000010   3F0E               LSRS     R7,R7,#+24
   1208                dzies= (Value%100)/10;
   \   00000012   3000               MOVS     R0,R6
   \   00000014   6421               MOVS     R1,#+100
   \   00000016   ........           BL       __aeabi_idivmod
   \   0000001A   0800               MOVS     R0,R1
   \   0000001C   0A21               MOVS     R1,#+10
   \   0000001E   ........           BL       __aeabi_idivmod
   \   00000022   0006               LSLS     R0,R0,#+24
   \   00000024   000E               LSRS     R0,R0,#+24
   1209                jedn = Value- (set*100) - (dzies*10);
   \   00000026   3900               MOVS     R1,R7
   \   00000028   6422               MOVS     R2,#+100
   \   0000002A   5143               MULS     R1,R2,R1
   \   0000002C   711A               SUBS     R1,R6,R1
   \   0000002E   0200               MOVS     R2,R0
   \   00000030   0A23               MOVS     R3,#+10
   \   00000032   5A43               MULS     R2,R3,R2
   \   00000034   891A               SUBS     R1,R1,R2
   1210                
   1211                if (ill==0) ill=1; 
   \   00000036   002D               CMP      R5,#+0
   \   00000038   00D1               BNE      ??CharToStr_0
   \   0000003A   0125               MOVS     R5,#+1
   1212                ill--;
   \                     ??CharToStr_0:
   \   0000003C   6A1E               SUBS     R2,R5,#+1
   1213          
   1214                Vstring[ill]=jedn+48;
   \   0000003E   1206               LSLS     R2,R2,#+24
   \   00000040   120E               LSRS     R2,R2,#+24
   \   00000042   A318               ADDS     R3,R4,R2
   \   00000044   3031               ADDS     R1,R1,#+48
   \   00000046   1970               STRB     R1,[R3, #+0]
   1215                if ((ill-1)>=0) Vstring[ill-1]=dzies+48;
   \   00000048   511E               SUBS     R1,R2,#+1
   \   0000004A   02D4               BMI      ??CharToStr_1
   \   0000004C   991E               SUBS     R1,R3,#+2
   \   0000004E   3030               ADDS     R0,R0,#+48
   \   00000050   4870               STRB     R0,[R1, #+1]
   1216                if ((ill-2)>=0) Vstring[ill-2]=set+48;
   \                     ??CharToStr_1:
   \   00000052   921E               SUBS     R2,R2,#+2
   \   00000054   02D4               BMI      ??CharToStr_2
   \   00000056   9B1E               SUBS     R3,R3,#+2
   \   00000058   3037               ADDS     R7,R7,#+48
   \   0000005A   1F70               STRB     R7,[R3, #+0]
   1217                
   1218                 
   1219          }//_______________________ Koniec funkcji konwersji float na string ____________________________
   \                     ??CharToStr_2:
   \   0000005C   01B0               ADD      SP,SP,#+4
   \   0000005E   F0BC               POP      {R4-R7}
   \   00000060   01BC               POP      {R0}
   \   00000062   0047               BX       R0               ;; return
   1220          
   1221          
   1222          
   1223          
   1224          
   1225          //*-----------------------------------------------------------------------------
   1226          //* Nazwa funkcji :    FloToStr
   1227          //* Funkcja konwersji zmiennej float na ³añcuch string   
   1228          //*-----------------------------------------------------------------------------
   1229          //*  Value   - zmienna typu float
   1230          //*  Vstring - tablica znaków
   1231          //*  ill     - liloœæ znaków (max=9) , ostatnia wartoœæ zapisanego ³añcucha to zawsze 0
   1232          //*  Funkcja zwraca d³ugoœæ ³añcucha
   1233          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1234          void HexToStr (int Value, char Vstring[8],char length) 
   1235          { 
   \                     HexToStr:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
   1236                length=length-1; 
   \   00000006   541E               SUBS     R4,R2,#+1
   1237                for (int i=0; i<=length; i++) Vstring[i]=0;
   \   00000008   2406               LSLS     R4,R4,#+24
   \   0000000A   240E               LSRS     R4,R4,#+24
   \   0000000C   2100               MOVS     R1,R4
   \   0000000E   491C               ADDS     R1,R1,#+1
   \   00000010   3000               MOVS     R0,R6
   \   00000012   ........           BL       __aeabi_memclr
   1238                 
   1239                 for (int i=0; i<=length; i++)
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   3119               ADDS     R1,R6,R4
   \   0000001A   0F22               MOVS     R2,#+15
   1240                 {
   1241                    Vstring[length-i]=((Value>>(4*i))&0xf)+48;  
   \                     ??HexToStr_0:
   \   0000001C   8600               LSLS     R6,R0,#+2
   \   0000001E   2B00               MOVS     R3,R5
   \   00000020   3341               ASRS     R3,R3,R6
   \   00000022   1340               ANDS     R3,R3,R2
   \   00000024   3033               ADDS     R3,R3,#+48
   \   00000026   0B70               STRB     R3,[R1, #+0]
   1242                    
   1243                    if (Vstring[length-i]>57) {Vstring[length-i]+=7;}
   \   00000028   1B06               LSLS     R3,R3,#+24
   \   0000002A   1B0E               LSRS     R3,R3,#+24
   \   0000002C   3A2B               CMP      R3,#+58
   \   0000002E   01D3               BCC      ??HexToStr_1
   \   00000030   DB1D               ADDS     R3,R3,#+7
   \   00000032   0B70               STRB     R3,[R1, #+0]
   1244          
   1245                    
   1246                 }   
   \                     ??HexToStr_1:
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   491E               SUBS     R1,R1,#+1
   \   00000038   8442               CMP      R4,R0
   \   0000003A   EFDA               BGE      ??HexToStr_0
   1247             
   1248             
   1249             
   1250          }//_______________________ Koniec funkcji konwersji float na string ____________________________
   \   0000003C   70BC               POP      {R4-R6}
   \   0000003E   01BC               POP      {R0}
   \   00000040   0047               BX       R0               ;; return
   1251          
   1252          
   1253          
   1254          
   1255          
   1256          
   1257          //*-----------------------------------------------------------------------------
   1258          //* Nazwa funkcji :    List_Paint
   1259          //* Funkcja rysowania listy
   1260          //*-----------------------------------------------------------------------------
   1261          //* name[7]   -  Nazwa listy
   1262          //* Rows      -  ilosc wierszy
   1263          //* RowWith   -  szerokosc wiersza
   1264          //* Y         -  odsuniecie od górnej krawêdzi
   1265          //* FormStyle -  rodzaj formy 0-zwyk³a 1..-coraz mniejsze
   1266          //* Algin     - wyrównanie 0-pion œrodek, poziom lowo, 1-pion góra, poziom lowo, 2 pion dó³, poziom lowo, 3-pion œrodek, poziom wyœrodkowanie
   1267          //* p1...p8   - nazwy kolejnych pól
   1268          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1269          void List_Paint(char name[10], char Rows, char RowWith, char Y, char FormStyle, char Algin, char p1[15], char p2[15] , char p3[15] , char p4[15] , char p5[15] , char p6[15] , char p7[15] , char p8[15])
   1270          {
   \                     List_Paint:
   \   00000000   FBB5               PUSH     {R0,R1,R3-R7,LR}
   \   00000002   A8B0               SUB      SP,SP,#+160
   \   00000004   1400               MOVS     R4,R2
   \   00000006   30A8               ADD      R0,SP,#+192
   \   00000008   0578               LDRB     R5,[R0, #+0]
   1271           
   1272            if (FormStyle<4) 
   \   0000000A   042D               CMP      R5,#+4
   \   0000000C   43D2               BCS      ??List_Paint_1
   1273            {
   1274              CleanCanvas();
   \   0000000E   B74E               LDR      R6,??List_Paint_2  ;; LCD_Canvas
   \   00000010   0827               MOVS     R7,#+8
   \                     ??List_Paint_3:
   \   00000012   8021               MOVS     R1,#+128
   \   00000014   3000               MOVS     R0,R6
   \   00000016   ........           BL       __aeabi_memclr
   \   0000001A   8036               ADDS     R6,R6,#+128
   \   0000001C   7F1E               SUBS     R7,R7,#+1
   \   0000001E   F8D1               BNE      ??List_Paint_3
   1275            }
   1276            else
   1277            {
   1278              //  HalfCleanCanvas();
   1279              if (FormStyle)
   1280              {     
   1281                CleanCanvasArea(FormStyle-1, 127-(Y+18+(RowWith*Rows))-2, 62-2*FormStyle+4,(RowWith*Rows)+5,0);
   1282              }
   1283              else
   1284              {
   1285                CleanCanvasArea(0, 127-(18+(RowWith*Rows))+Y, 62,(RowWith*Rows),0);
   1286          
   1287              }
   1288            }
   1289            
   1290             
   1291            
   1292           
   1293            if (FormStyle==0)
   \   00000020   002D               CMP      R5,#+0
   \   00000022   26D1               BNE      ??List_Paint_4
   1294            {
   1295            char ekran_tab[8][18] = {
   1296                            {255,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252},
   1297                            {255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1298                            {255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1299                            {255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1300                            {255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1301                            {255,0,255,255,127,127,127,127,127,127,127,127,127,127,127,127,255,255},
   1302                            {255,0,255,0,254,255,251,247,111,159,159,111,247,251,255,254,0,255},
   1303                            {255,128,255,240,231,239,237,238,239,239,239,239,238,237,111,103,48,31}
   1304                            };
   \   00000024   04A8               ADD      R0,SP,#+16
   \   00000026   B249               LDR      R1,??List_Paint_2+0x4  ;; `?<Constant {{255, 1, 255, 255, 255, 255, 255, `
   \   00000028   9022               MOVS     R2,#+144
   \   0000002A   ........           BL       __aeabi_memcpy4
   1305              
   1306              CopyToCanvasPoint((char *)ekran_tab,0,109-Y,64,18); 
   \   0000002E   82B0               SUB      SP,SP,#+8
   \   00000030   1220               MOVS     R0,#+18
   \   00000032   0090               STR      R0,[SP, #+0]
   \   00000034   4023               MOVS     R3,#+64
   \   00000036   6D20               MOVS     R0,#+109
   \   00000038   2CA9               ADD      R1,SP,#+176
   \   0000003A   0978               LDRB     R1,[R1, #+0]
   \   0000003C   421A               SUBS     R2,R0,R1
   \   0000003E   1206               LSLS     R2,R2,#+24
   \   00000040   120E               LSRS     R2,R2,#+24
   \   00000042   0021               MOVS     R1,#+0
   \   00000044   06A8               ADD      R0,SP,#+24
   \   00000046   ........           BL       CopyToCanvasPoint
   \   0000004A   02B0               ADD      SP,SP,#+8
   1307              Label(name,0,2,114-Y,10,42,0,127,1);  //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   0000004C   82B0               SUB      SP,SP,#+8
   \   0000004E   0120               MOVS     R0,#+1
   \   00000050   0090               STR      R0,[SP, #+0]
   \   00000052   7F21               MOVS     R1,#+127
   \   00000054   0020               MOVS     R0,#+0
   \   00000056   03B4               PUSH     {R0,R1}
   \   00000058   2A21               MOVS     R1,#+42
   \   0000005A   0A20               MOVS     R0,#+10
   \   0000005C   03B4               PUSH     {R0,R1}
   \   0000005E   7220               MOVS     R0,#+114
   \   00000060   30A9               ADD      R1,SP,#+192
   \   00000062   0978               LDRB     R1,[R1, #+0]
   \   00000064   431A               SUBS     R3,R0,R1
   \   00000066   0222               MOVS     R2,#+2
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   2E98               LDR      R0,[SP, #+184]
   \   0000006C   ........           BL       Label
   \   00000070   06B0               ADD      SP,SP,#+24
   1308              
   1309             } 
   1310              
   1311             
   1312              
   1313              char napis1_Y=110-Y-(RowWith/2)-5;
   \                     ??List_Paint_4:
   \   00000072   6E20               MOVS     R0,#+110
   \   00000074   2AA9               ADD      R1,SP,#+168
   \   00000076   0978               LDRB     R1,[R1, #+0]
   \   00000078   401A               SUBS     R0,R0,R1
   \   0000007A   6108               LSRS     R1,R4,#+1
   \   0000007C   401A               SUBS     R0,R0,R1
   \   0000007E   401F               SUBS     R0,R0,#+5
   \   00000080   0006               LSLS     R0,R0,#+24
   \   00000082   000E               LSRS     R0,R0,#+24
   \   00000084   0390               STR      R0,[SP, #+12]
   1314          
   1315              
   1316              char *p_p;
   1317              for (char i=0; i<=Rows-1; i++)
   \   00000086   0026               MOVS     R6,#+0
   \   00000088   29A8               ADD      R0,SP,#+164
   \   0000008A   0078               LDRB     R0,[R0, #+0]
   \   0000008C   0190               STR      R0,[SP, #+4]
   \   0000008E   401E               SUBS     R0,R0,#+1
   \   00000090   0090               STR      R0,[SP, #+0]
   \   00000092   2BD5               BPL      ??List_Paint_5
   \   00000094   AEE0               B        ??List_Paint_6
   \                     ??List_Paint_1:
   \   00000096   82B0               SUB      SP,SP,#+8
   \   00000098   0020               MOVS     R0,#+0
   \   0000009A   0090               STR      R0,[SP, #+0]
   \   0000009C   0B00               MOVS     R3,R1
   \   0000009E   6343               MULS     R3,R4,R3
   \   000000A0   5B1D               ADDS     R3,R3,#+5
   \   000000A2   1B06               LSLS     R3,R3,#+24
   \   000000A4   1B0E               LSRS     R3,R3,#+24
   \   000000A6   4220               MOVS     R0,#+66
   \   000000A8   6900               LSLS     R1,R5,#+1
   \   000000AA   421A               SUBS     R2,R0,R1
   \   000000AC   1206               LSLS     R2,R2,#+24
   \   000000AE   120E               LSRS     R2,R2,#+24
   \   000000B0   7F20               MOVS     R0,#+127
   \   000000B2   2CA9               ADD      R1,SP,#+176
   \   000000B4   0978               LDRB     R1,[R1, #+0]
   \   000000B6   401A               SUBS     R0,R0,R1
   \   000000B8   2BA9               ADD      R1,SP,#+172
   \   000000BA   0978               LDRB     R1,[R1, #+0]
   \   000000BC   6143               MULS     R1,R4,R1
   \   000000BE   411A               SUBS     R1,R0,R1
   \   000000C0   1439               SUBS     R1,R1,#+20
   \   000000C2   0906               LSLS     R1,R1,#+24
   \   000000C4   090E               LSRS     R1,R1,#+24
   \   000000C6   681E               SUBS     R0,R5,#+1
   \   000000C8   0006               LSLS     R0,R0,#+24
   \   000000CA   000E               LSRS     R0,R0,#+24
   \   000000CC   ........           BL       CleanCanvasArea
   \   000000D0   02B0               ADD      SP,SP,#+8
   \   000000D2   CEE7               B        ??List_Paint_4
   1318              {
   1319                 switch (i)
   \                     ??List_Paint_7:
   \   000000D4   3006               LSLS     R0,R6,#+24
   \   000000D6   000E               LSRS     R0,R0,#+24
   \   000000D8   0728               CMP      R0,#+7
   \   000000DA   16D8               BHI      ??List_Paint_8
   \   000000DC   01A1               ADR      R1,??List_Paint_0
   \   000000DE   095C               LDRB     R1,[R1, R0]
   \   000000E0   8F44               ADD      PC,PC,R1
   \   000000E2   C046               Nop      
   \                     ??List_Paint_0:
   \   000000E4   080C1014           DC8      +8,+12,+16,+20
   \   000000E8   181C2024           DC8      +24,+28,+32,+36
   1320                 {
   1321                    case 0:  p_p = p1;   break;
   \                     ??List_Paint_5:
   \   000000EC   329F               LDR      R7,[SP, #+200]
   \   000000EE   0CE0               B        ??List_Paint_8
   1322                    case 1:  p_p = p2;   break;
   \                     ??List_Paint_9:
   \   000000F0   339F               LDR      R7,[SP, #+204]
   \   000000F2   0AE0               B        ??List_Paint_8
   1323                    case 2:  p_p = p3;   break;
   \                     ??List_Paint_10:
   \   000000F4   349F               LDR      R7,[SP, #+208]
   \   000000F6   08E0               B        ??List_Paint_8
   1324                    case 3:  p_p = p4;   break;
   \                     ??List_Paint_11:
   \   000000F8   359F               LDR      R7,[SP, #+212]
   \   000000FA   06E0               B        ??List_Paint_8
   1325                    case 4:  p_p = p5;   break;
   \                     ??List_Paint_12:
   \   000000FC   369F               LDR      R7,[SP, #+216]
   \   000000FE   04E0               B        ??List_Paint_8
   1326                    case 5:  p_p = p6;   break;
   \                     ??List_Paint_13:
   \   00000100   379F               LDR      R7,[SP, #+220]
   \   00000102   02E0               B        ??List_Paint_8
   1327                    case 6:  p_p = p7;   break;
   \                     ??List_Paint_14:
   \   00000104   389F               LDR      R7,[SP, #+224]
   \   00000106   00E0               B        ??List_Paint_8
   1328                    case 7:  p_p = p8;   break;
   \                     ??List_Paint_15:
   \   00000108   399F               LDR      R7,[SP, #+228]
   1329                 }
   1330                 switch (Algin)
   \                     ??List_Paint_8:
   \   0000010A   31A8               ADD      R0,SP,#+196
   \   0000010C   0078               LDRB     R0,[R0, #+0]
   \   0000010E   0028               CMP      R0,#+0
   \   00000110   06D0               BEQ      ??List_Paint_16
   \   00000112   0128               CMP      R0,#+1
   \   00000114   1BD0               BEQ      ??List_Paint_17
   \   00000116   0228               CMP      R0,#+2
   \   00000118   32D0               BEQ      ??List_Paint_18
   \   0000011A   0328               CMP      R0,#+3
   \   0000011C   4AD0               BEQ      ??List_Paint_19
   \   0000011E   64E0               B        ??List_Paint_20
   1331                 {
   1332                    case 0: Label(p_p,0,2+FormStyle,napis1_Y-RowWith*i,15,58-2*FormStyle,0,127,0);     break; //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \                     ??List_Paint_16:
   \   00000120   82B0               SUB      SP,SP,#+8
   \   00000122   0090               STR      R0,[SP, #+0]
   \   00000124   7F21               MOVS     R1,#+127
   \   00000126   03B4               PUSH     {R0,R1}
   \   00000128   3A20               MOVS     R0,#+58
   \   0000012A   6900               LSLS     R1,R5,#+1
   \   0000012C   411A               SUBS     R1,R0,R1
   \   0000012E   0F20               MOVS     R0,#+15
   \   00000130   0906               LSLS     R1,R1,#+24
   \   00000132   090E               LSRS     R1,R1,#+24
   \   00000134   03B4               PUSH     {R0,R1}
   \   00000136   0999               LDR      R1,[SP, #+36]
   \   00000138   0906               LSLS     R1,R1,#+24
   \   0000013A   090E               LSRS     R1,R1,#+24
   \   0000013C   2000               MOVS     R0,R4
   \   0000013E   7043               MULS     R0,R6,R0
   \   00000140   0B1A               SUBS     R3,R1,R0
   \   00000142   2A00               MOVS     R2,R5
   \   00000144   921C               ADDS     R2,R2,#+2
   \   00000146   1206               LSLS     R2,R2,#+24
   \   00000148   120E               LSRS     R2,R2,#+24
   \   0000014A   0021               MOVS     R1,#+0
   \   0000014C   49E0               B.N      ??List_Paint_21
   1333                    case 1: Label(p_p,0,2+FormStyle,110-Y-10-RowWith*i,15,58-2*FormStyle,0,127,0);     break; //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \                     ??List_Paint_17:
   \   0000014E   82B0               SUB      SP,SP,#+8
   \   00000150   0020               MOVS     R0,#+0
   \   00000152   0090               STR      R0,[SP, #+0]
   \   00000154   7F21               MOVS     R1,#+127
   \   00000156   03B4               PUSH     {R0,R1}
   \   00000158   3A20               MOVS     R0,#+58
   \   0000015A   6900               LSLS     R1,R5,#+1
   \   0000015C   411A               SUBS     R1,R0,R1
   \   0000015E   0F20               MOVS     R0,#+15
   \   00000160   0906               LSLS     R1,R1,#+24
   \   00000162   090E               LSRS     R1,R1,#+24
   \   00000164   03B4               PUSH     {R0,R1}
   \   00000166   6420               MOVS     R0,#+100
   \   00000168   30A9               ADD      R1,SP,#+192
   \   0000016A   0978               LDRB     R1,[R1, #+0]
   \   0000016C   411A               SUBS     R1,R0,R1
   \   0000016E   2000               MOVS     R0,R4
   \   00000170   7043               MULS     R0,R6,R0
   \   00000172   0B1A               SUBS     R3,R1,R0
   \   00000174   2A00               MOVS     R2,R5
   \   00000176   921C               ADDS     R2,R2,#+2
   \   00000178   1206               LSLS     R2,R2,#+24
   \   0000017A   120E               LSRS     R2,R2,#+24
   \   0000017C   0021               MOVS     R1,#+0
   \   0000017E   30E0               B.N      ??List_Paint_21
   1334                    case 2: Label(p_p,0,2+FormStyle,110-Y+1-RowWith*(i+1),15,58-2*FormStyle,0,127,0);  break; //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw)   
   \                     ??List_Paint_18:
   \   00000180   82B0               SUB      SP,SP,#+8
   \   00000182   0020               MOVS     R0,#+0
   \   00000184   0090               STR      R0,[SP, #+0]
   \   00000186   7F21               MOVS     R1,#+127
   \   00000188   03B4               PUSH     {R0,R1}
   \   0000018A   3A20               MOVS     R0,#+58
   \   0000018C   6900               LSLS     R1,R5,#+1
   \   0000018E   411A               SUBS     R1,R0,R1
   \   00000190   0F20               MOVS     R0,#+15
   \   00000192   0906               LSLS     R1,R1,#+24
   \   00000194   090E               LSRS     R1,R1,#+24
   \   00000196   03B4               PUSH     {R0,R1}
   \   00000198   6F20               MOVS     R0,#+111
   \   0000019A   30A9               ADD      R1,SP,#+192
   \   0000019C   0978               LDRB     R1,[R1, #+0]
   \   0000019E   411A               SUBS     R1,R0,R1
   \   000001A0   3000               MOVS     R0,R6
   \   000001A2   401C               ADDS     R0,R0,#+1
   \   000001A4   6043               MULS     R0,R4,R0
   \   000001A6   0B1A               SUBS     R3,R1,R0
   \   000001A8   2A00               MOVS     R2,R5
   \   000001AA   921C               ADDS     R2,R2,#+2
   \   000001AC   1206               LSLS     R2,R2,#+24
   \   000001AE   120E               LSRS     R2,R2,#+24
   \   000001B0   0021               MOVS     R1,#+0
   \   000001B2   16E0               B.N      ??List_Paint_21
   1335                    case 3: Label(p_p,2,2+FormStyle,napis1_Y-RowWith*i,15,58-2*FormStyle,0,127,0);     break; //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \                     ??List_Paint_19:
   \   000001B4   82B0               SUB      SP,SP,#+8
   \   000001B6   0020               MOVS     R0,#+0
   \   000001B8   0090               STR      R0,[SP, #+0]
   \   000001BA   7F21               MOVS     R1,#+127
   \   000001BC   03B4               PUSH     {R0,R1}
   \   000001BE   3A20               MOVS     R0,#+58
   \   000001C0   6900               LSLS     R1,R5,#+1
   \   000001C2   411A               SUBS     R1,R0,R1
   \   000001C4   0F20               MOVS     R0,#+15
   \   000001C6   0906               LSLS     R1,R1,#+24
   \   000001C8   090E               LSRS     R1,R1,#+24
   \   000001CA   03B4               PUSH     {R0,R1}
   \   000001CC   0999               LDR      R1,[SP, #+36]
   \   000001CE   0906               LSLS     R1,R1,#+24
   \   000001D0   090E               LSRS     R1,R1,#+24
   \   000001D2   2000               MOVS     R0,R4
   \   000001D4   7043               MULS     R0,R6,R0
   \   000001D6   0B1A               SUBS     R3,R1,R0
   \   000001D8   2A00               MOVS     R2,R5
   \   000001DA   921C               ADDS     R2,R2,#+2
   \   000001DC   1206               LSLS     R2,R2,#+24
   \   000001DE   120E               LSRS     R2,R2,#+24
   \   000001E0   0221               MOVS     R1,#+2
   \                     ??List_Paint_21:
   \   000001E2   3800               MOVS     R0,R7
   \   000001E4   ........           BL       Label
   \   000001E8   06B0               ADD      SP,SP,#+24
   1336                 }   
   1337                 
   1338              }
   \                     ??List_Paint_20:
   \   000001EA   761C               ADDS     R6,R6,#+1
   \   000001EC   0098               LDR      R0,[SP, #+0]
   \   000001EE   B042               CMP      R0,R6
   \   000001F0   00DB               BLT      .+4
   \   000001F2   6FE7               B        ??List_Paint_7
   1339              
   1340              
   1341              if (~FormStyle) H_line(2,127-(17)-Y,54,0); 
   \                     ??List_Paint_6:
   \   000001F4   2AA8               ADD      R0,SP,#+168
   \   000001F6   0078               LDRB     R0,[R0, #+0]
   \   000001F8   0090               STR      R0,[SP, #+0]
   \   000001FA   0023               MOVS     R3,#+0
   \   000001FC   3622               MOVS     R2,#+54
   \   000001FE   6E20               MOVS     R0,#+110
   \   00000200   0099               LDR      R1,[SP, #+0]
   \   00000202   411A               SUBS     R1,R0,R1
   \   00000204   0220               MOVS     R0,#+2
   \   00000206   ........           BL       H_line
   \   0000020A   019E               LDR      R6,[SP, #+4]
   \   0000020C   6643               MULS     R6,R4,R6
   \   0000020E   6D20               MOVS     R0,#+109
   \   00000210   801B               SUBS     R0,R0,R6
   \   00000212   0099               LDR      R1,[SP, #+0]
   \   00000214   471A               SUBS     R7,R0,R1
   \   00000216   6846               MOV      R0,SP
   \   00000218   29A9               ADD      R1,SP,#+164
   \   0000021A   0978               LDRB     R1,[R1, #+0]
   \   0000021C   6143               MULS     R1,R4,R1
   \   0000021E   0172               STRB     R1,[R0, #+8]
   \   00000220   0123               MOVS     R3,#+1
   \   00000222   027A               LDRB     R2,[R0, #+8]
   \   00000224   3900               MOVS     R1,R7
   \   00000226   3E20               MOVS     R0,#+62
   \   00000228   401B               SUBS     R0,R0,R5
   \   0000022A   0006               LSLS     R0,R0,#+24
   \   0000022C   000E               LSRS     R0,R0,#+24
   1342              
   1343              V_line(62-FormStyle,127-(18+(Rows*RowWith))-Y,(Rows*RowWith),1);
   \   0000022E   ........           BL       V_line
   1344              if (FormStyle)
   \   00000232   002D               CMP      R5,#+0
   \   00000234   09D0               BEQ      ??List_Paint_22
   1345              {
   1346                  V_line(63-FormStyle,127-(18+(Rows*RowWith))-Y,(Rows*RowWith)-2,1);
   \   00000236   0123               MOVS     R3,#+1
   \   00000238   B21E               SUBS     R2,R6,#+2
   \   0000023A   1206               LSLS     R2,R2,#+24
   \   0000023C   120E               LSRS     R2,R2,#+24
   \   0000023E   3900               MOVS     R1,R7
   \   00000240   3F20               MOVS     R0,#+63
   \   00000242   401B               SUBS     R0,R0,R5
   \   00000244   0006               LSLS     R0,R0,#+24
   \   00000246   000E               LSRS     R0,R0,#+24
   \   00000248   04E0               B.N      ??List_Paint_23
   1347              }
   1348              else
   1349              {
   1350                  V_line(63-FormStyle,127-(18+(Rows*RowWith))-Y,(Rows*RowWith),1); 
   \                     ??List_Paint_22:
   \   0000024A   0123               MOVS     R3,#+1
   \   0000024C   6846               MOV      R0,SP
   \   0000024E   027A               LDRB     R2,[R0, #+8]
   \   00000250   3900               MOVS     R1,R7
   \   00000252   3F20               MOVS     R0,#+63
   \                     ??List_Paint_23:
   \   00000254   ........           BL       V_line
   1351              }
   1352              
   1353              V_line(FormStyle,127-(18+(Rows*RowWith))-Y,(Rows*RowWith),1);
   \   00000258   0123               MOVS     R3,#+1
   \   0000025A   6846               MOV      R0,SP
   \   0000025C   027A               LDRB     R2,[R0, #+8]
   \   0000025E   3900               MOVS     R1,R7
   \   00000260   2800               MOVS     R0,R5
   \   00000262   ........           BL       V_line
   1354              
   1355              if (FormStyle) H_line(FormStyle,127-18-Y,63-2*FormStyle,1); 
   \   00000266   002D               CMP      R5,#+0
   \   00000268   0BD0               BEQ      ??List_Paint_24
   \   0000026A   0123               MOVS     R3,#+1
   \   0000026C   3F20               MOVS     R0,#+63
   \   0000026E   6900               LSLS     R1,R5,#+1
   \   00000270   421A               SUBS     R2,R0,R1
   \   00000272   1206               LSLS     R2,R2,#+24
   \   00000274   120E               LSRS     R2,R2,#+24
   \   00000276   6D20               MOVS     R0,#+109
   \   00000278   0099               LDR      R1,[SP, #+0]
   \   0000027A   411A               SUBS     R1,R0,R1
   \   0000027C   2800               MOVS     R0,R5
   \   0000027E   ........           BL       H_line
   1356              
   1357              for (char i=18+RowWith; i<=18+(Rows*RowWith); i=i+RowWith)
   \                     ??List_Paint_24:
   \   00000282   2700               MOVS     R7,R4
   \   00000284   1237               ADDS     R7,R7,#+18
   \   00000286   3F06               LSLS     R7,R7,#+24
   \   00000288   3F0E               LSRS     R7,R7,#+24
   \   0000028A   6800               LSLS     R0,R5,#+1
   \   0000028C   0190               STR      R0,[SP, #+4]
   \   0000028E   3000               MOVS     R0,R6
   \   00000290   1230               ADDS     R0,R0,#+18
   \   00000292   B842               CMP      R0,R7
   \   00000294   16DB               BLT      ??List_Paint_25
   1358              {
   1359                H_line(1+FormStyle,127-i-Y,61-2*FormStyle,1); 
   \                     ??List_Paint_26:
   \   00000296   0123               MOVS     R3,#+1
   \   00000298   3D20               MOVS     R0,#+61
   \   0000029A   0199               LDR      R1,[SP, #+4]
   \   0000029C   421A               SUBS     R2,R0,R1
   \   0000029E   1206               LSLS     R2,R2,#+24
   \   000002A0   120E               LSRS     R2,R2,#+24
   \   000002A2   7F20               MOVS     R0,#+127
   \   000002A4   C01B               SUBS     R0,R0,R7
   \   000002A6   0099               LDR      R1,[SP, #+0]
   \   000002A8   411A               SUBS     R1,R0,R1
   \   000002AA   2800               MOVS     R0,R5
   \   000002AC   401C               ADDS     R0,R0,#+1
   \   000002AE   0006               LSLS     R0,R0,#+24
   \   000002B0   000E               LSRS     R0,R0,#+24
   \   000002B2   ........           BL       H_line
   1360              }
   \   000002B6   3F19               ADDS     R7,R7,R4
   \   000002B8   3F06               LSLS     R7,R7,#+24
   \   000002BA   3F0E               LSRS     R7,R7,#+24
   \   000002BC   3000               MOVS     R0,R6
   \   000002BE   1230               ADDS     R0,R0,#+18
   \   000002C0   B842               CMP      R0,R7
   \   000002C2   E8DA               BGE      ??List_Paint_26
   1361              
   1362              H_line(4+FormStyle,127-(18+(Rows*RowWith))-1-Y,60-(2*FormStyle),1); 
   \                     ??List_Paint_25:
   \   000002C4   0123               MOVS     R3,#+1
   \   000002C6   3C20               MOVS     R0,#+60
   \   000002C8   0199               LDR      R1,[SP, #+4]
   \   000002CA   421A               SUBS     R2,R0,R1
   \   000002CC   1206               LSLS     R2,R2,#+24
   \   000002CE   120E               LSRS     R2,R2,#+24
   \   000002D0   6C20               MOVS     R0,#+108
   \   000002D2   801B               SUBS     R0,R0,R6
   \   000002D4   0099               LDR      R1,[SP, #+0]
   \   000002D6   411A               SUBS     R1,R0,R1
   \   000002D8   2D1D               ADDS     R5,R5,#+4
   \   000002DA   2806               LSLS     R0,R5,#+24
   \   000002DC   000E               LSRS     R0,R0,#+24
   \   000002DE   ........           BL       H_line
   1363            
   1364           
   1365              
   1366          }//_______________________ Koniec funkcji List_Paint __________________________
   \   000002E2   2BB0               ADD      SP,SP,#+172
   \   000002E4   F0BC               POP      {R4-R7}
   \   000002E6   01BC               POP      {R0}
   \   000002E8   0047               BX       R0               ;; return
   \   000002EA   C046               Nop      
   \                     ??List_Paint_2:
   \   000002EC   ........           DC32     LCD_Canvas
   \   000002F0   ........           DC32     `?<Constant {{255, 1, 255, 255, 255, 255, 255, `
   1367          
   1368          
   1369          
   1370          
   1371          
   1372          
   1373          
   1374              
   1375          
   1376          
   1377          
   1378          //*-----------------------------------------------------------------------------
   1379          //* Nazwa funkcji :    List_Event
   1380          //* Funkcja rysowania listy
   1381          //*-----------------------------------------------------------------------------
   1382          //* name[7]   -  Nazwa listy
   1383          //* Rows      -  ilosc wierszy
   1384          //* RowWith   -  szerokosc wiersza
   1385          //* Y         -  odsuniecie od górnej krawêdzi
   1386          //* p1...p8   - nazwy kolejnych pól
   1387          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1388          int List_Event(int X_up, int Y_up, int X_down, int Y_down, char Rows, char RowWith, char FormStyle, char Y)
   1389          {
   \                     List_Event:
   \   00000000   FDB5               PUSH     {R0,R2-R7,LR}
   \   00000002   84B0               SUB      SP,SP,#+16
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   0EA8               ADD      R0,SP,#+56
   \   00000008   0578               LDRB     R5,[R0, #+0]
   \   0000000A   6846               MOV      R0,SP
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0171               STRB     R1,[R0, #+4]
   1390          
   1391            char podswietl=0;
   1392            int ans = 0;
   \   00000010   0026               MOVS     R6,#+0
   \   00000012   9542               CMP      R5,R2
   \   00000014   69DA               BGE      ??List_Event_0
   \   00000016   3F21               MOVS     R1,#+63
   \   00000018   491B               SUBS     R1,R1,R5
   \   0000001A   8A42               CMP      R2,R1
   \   0000001C   65DA               BGE      ??List_Event_0
   \   0000001E   0FA8               ADD      R0,SP,#+60
   \   00000020   0778               LDRB     R7,[R0, #+0]
   \   00000022   0DA8               ADD      R0,SP,#+52
   \   00000024   0078               LDRB     R0,[R0, #+0]
   \   00000026   0090               STR      R0,[SP, #+0]
   \   00000028   6E20               MOVS     R0,#+110
   \   0000002A   0CA9               ADD      R1,SP,#+48
   \   0000002C   0978               LDRB     R1,[R1, #+0]
   \   0000002E   009A               LDR      R2,[SP, #+0]
   \   00000030   5143               MULS     R1,R2,R1
   \   00000032   401A               SUBS     R0,R0,R1
   \   00000034   C01B               SUBS     R0,R0,R7
   \   00000036   9842               CMP      R0,R3
   \   00000038   57DA               BGE      ??List_Event_0
   \   0000003A   6E21               MOVS     R1,#+110
   \   0000003C   C91B               SUBS     R1,R1,R7
   \   0000003E   8B42               CMP      R3,R1
   \   00000040   53DA               BGE      ??List_Event_0
   \   00000042   002A               CMP      R2,#+0
   \   00000044   51D0               BEQ      ??List_Event_0
   1393            
   1394          
   1395              
   1396            
   1397            //zdarzenie typu down
   1398              if ((X_down>FormStyle) && (X_down<63-FormStyle) && (Y_down>127-(17+(Rows*RowWith))-Y) && (Y_down<127-(17)-Y) && (RowWith))   
   1399              {
   1400                char Y_down_tmp=127-Y_down;
   \   00000046   7F20               MOVS     R0,#+127
   \   00000048   C01A               SUBS     R0,R0,R3
   \   0000004A   0006               LSLS     R0,R0,#+24
   \   0000004C   000E               LSRS     R0,R0,#+24
   \   0000004E   0290               STR      R0,[SP, #+8]
   1401                MenuPaint();
   \   00000050   ........           BL       MenuPaint
   1402                H_line(2+FormStyle,127-(  (((Y_down_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-1,61-2*FormStyle,1);
   \   00000054   7F21               MOVS     R1,#+127
   \   00000056   02B5               PUSH     {R1,LR}
   \   00000058   0498               LDR      R0,[SP, #+16]
   \   0000005A   0006               LSLS     R0,R0,#+24
   \   0000005C   000E               LSRS     R0,R0,#+24
   \   0000005E   1238               SUBS     R0,R0,#+18
   \   00000060   C01B               SUBS     R0,R0,R7
   \   00000062   0299               LDR      R1,[SP, #+8]
   \   00000064   ........           BL       __aeabi_idivmod
   \   00000068   0299               LDR      R1,[SP, #+8]
   \   0000006A   4843               MULS     R0,R1,R0
   \   0000006C   0099               LDR      R1,[SP, #0]
   \   0000006E   02B0               ADD      SP,SP,#+8
   \   00000070   081A               SUBS     R0,R1,R0
   \   00000072   C71B               SUBS     R7,R0,R7
   \   00000074   6846               MOV      R0,SP
   \   00000076   3D21               MOVS     R1,#+61
   \   00000078   6A00               LSLS     R2,R5,#+1
   \   0000007A   891A               SUBS     R1,R1,R2
   \   0000007C   4171               STRB     R1,[R0, #+5]
   \   0000007E   0123               MOVS     R3,#+1
   \   00000080   4279               LDRB     R2,[R0, #+5]
   \   00000082   3900               MOVS     R1,R7
   \   00000084   1339               SUBS     R1,R1,#+19
   \   00000086   2800               MOVS     R0,R5
   \   00000088   801C               ADDS     R0,R0,#+2
   \   0000008A   0006               LSLS     R0,R0,#+24
   \   0000008C   000E               LSRS     R0,R0,#+24
   \   0000008E   ........           BL       H_line
   1403                H_line(2+FormStyle,127-(  (((Y_down_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-(RowWith-1),61-2*FormStyle,1);
   \   00000092   123F               SUBS     R7,R7,#+18
   \   00000094   0098               LDR      R0,[SP, #+0]
   \   00000096   3F1A               SUBS     R7,R7,R0
   \   00000098   0123               MOVS     R3,#+1
   \   0000009A   6846               MOV      R0,SP
   \   0000009C   4279               LDRB     R2,[R0, #+5]
   \   0000009E   3900               MOVS     R1,R7
   \   000000A0   491C               ADDS     R1,R1,#+1
   \   000000A2   2800               MOVS     R0,R5
   \   000000A4   801C               ADDS     R0,R0,#+2
   \   000000A6   0006               LSLS     R0,R0,#+24
   \   000000A8   000E               LSRS     R0,R0,#+24
   \   000000AA   ........           BL       H_line
   1404                V_line(1+FormStyle,127-(  (((Y_down_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-(RowWith-1),RowWith-1,1);
   \   000000AE   0123               MOVS     R3,#+1
   \   000000B0   0DA8               ADD      R0,SP,#+52
   \   000000B2   0078               LDRB     R0,[R0, #+0]
   \   000000B4   421E               SUBS     R2,R0,#+1
   \   000000B6   1206               LSLS     R2,R2,#+24
   \   000000B8   120E               LSRS     R2,R2,#+24
   \   000000BA   3900               MOVS     R1,R7
   \   000000BC   491C               ADDS     R1,R1,#+1
   \   000000BE   2800               MOVS     R0,R5
   \   000000C0   401C               ADDS     R0,R0,#+1
   \   000000C2   0006               LSLS     R0,R0,#+24
   \   000000C4   000E               LSRS     R0,R0,#+24
   \   000000C6   ........           BL       V_line
   1405                V_line(61-FormStyle,127-(  (((Y_down_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-(RowWith-2),RowWith-3,1);
   \   000000CA   0123               MOVS     R3,#+1
   \   000000CC   0DA8               ADD      R0,SP,#+52
   \   000000CE   0078               LDRB     R0,[R0, #+0]
   \   000000D0   C21E               SUBS     R2,R0,#+3
   \   000000D2   1206               LSLS     R2,R2,#+24
   \   000000D4   120E               LSRS     R2,R2,#+24
   \   000000D6   B91C               ADDS     R1,R7,#+2
   \   000000D8   3D20               MOVS     R0,#+61
   \   000000DA   401B               SUBS     R0,R0,R5
   \   000000DC   0006               LSLS     R0,R0,#+24
   \   000000DE   000E               LSRS     R0,R0,#+24
   \   000000E0   ........           BL       V_line
   1406                podswietl=1;
   \   000000E4   6846               MOV      R0,SP
   \   000000E6   0121               MOVS     R1,#+1
   \   000000E8   0171               STRB     R1,[R0, #+4]
   1407           }
   1408              
   1409          
   1410            //zdarzenie typu down "X"
   1411              if ((FormStyle==0) && (X_down>46) && (X_down<63) && (Y_down>112-Y) && (Y_down<127-Y))    //"X"
   \                     ??List_Event_0:
   \   000000EA   002D               CMP      R5,#+0
   \   000000EC   41D1               BNE      ??List_Event_1
   \   000000EE   0598               LDR      R0,[SP, #+20]
   \   000000F0   2F28               CMP      R0,#+47
   \   000000F2   2EDB               BLT      ??List_Event_2
   \   000000F4   3F28               CMP      R0,#+63
   \   000000F6   2CDA               BGE      ??List_Event_2
   \   000000F8   0FA8               ADD      R0,SP,#+60
   \   000000FA   0778               LDRB     R7,[R0, #+0]
   \   000000FC   7020               MOVS     R0,#+112
   \   000000FE   C01B               SUBS     R0,R0,R7
   \   00000100   0699               LDR      R1,[SP, #+24]
   \   00000102   8842               CMP      R0,R1
   \   00000104   25DA               BGE      ??List_Event_2
   \   00000106   0800               MOVS     R0,R1
   \   00000108   7F21               MOVS     R1,#+127
   \   0000010A   C91B               SUBS     R1,R1,R7
   \   0000010C   8842               CMP      R0,R1
   \   0000010E   20DA               BGE      ??List_Event_2
   1412              {
   1413                MenuPaint();
   \   00000110   ........           BL       MenuPaint
   1414                H_line(49,114-Y,10,0);
   \   00000114   7220               MOVS     R0,#+114
   \   00000116   C01B               SUBS     R0,R0,R7
   \   00000118   0290               STR      R0,[SP, #+8]
   \   0000011A   0023               MOVS     R3,#+0
   \   0000011C   0A22               MOVS     R2,#+10
   \   0000011E   0100               MOVS     R1,R0
   \   00000120   3120               MOVS     R0,#+49
   \   00000122   ........           BL       H_line
   1415                H_line(49,123-Y,10,0); 
   \   00000126   3300               MOVS     R3,R6
   \   00000128   0A22               MOVS     R2,#+10
   \   0000012A   7B20               MOVS     R0,#+123
   \   0000012C   C11B               SUBS     R1,R0,R7
   \   0000012E   3120               MOVS     R0,#+49
   \   00000130   ........           BL       H_line
   1416                V_line(49,114-Y,10,0); 
   \   00000134   3300               MOVS     R3,R6
   \   00000136   0A22               MOVS     R2,#+10
   \   00000138   0299               LDR      R1,[SP, #+8]
   \   0000013A   3120               MOVS     R0,#+49
   \   0000013C   ........           BL       V_line
   1417                V_line(58,114-Y,10,0); 
   \   00000140   3300               MOVS     R3,R6
   \   00000142   0A22               MOVS     R2,#+10
   \   00000144   0299               LDR      R1,[SP, #+8]
   \   00000146   3A20               MOVS     R0,#+58
   \   00000148   ........           BL       V_line
   1418                podswietl=1;
   \   0000014C   6846               MOV      R0,SP
   \   0000014E   0121               MOVS     R1,#+1
   \   00000150   0171               STRB     R1,[R0, #+4]
   \                     ??List_Event_2:
   \   00000152   0498               LDR      R0,[SP, #+16]
   \   00000154   2F28               CMP      R0,#+47
   \   00000156   0CDB               BLT      ??List_Event_1
   \   00000158   3F28               CMP      R0,#+63
   \   0000015A   0ADA               BGE      ??List_Event_1
   \   0000015C   0FA8               ADD      R0,SP,#+60
   \   0000015E   0778               LDRB     R7,[R0, #+0]
   \   00000160   7020               MOVS     R0,#+112
   \   00000162   C01B               SUBS     R0,R0,R7
   \   00000164   A042               CMP      R0,R4
   \   00000166   04DA               BGE      ??List_Event_1
   \   00000168   7F20               MOVS     R0,#+127
   \   0000016A   C01B               SUBS     R0,R0,R7
   \   0000016C   8442               CMP      R4,R0
   \   0000016E   00DA               BGE      ??List_Event_1
   1419              }
   1420            
   1421              
   1422              if ((FormStyle==0) && (X_up>46) && (X_up<63) && (Y_up>112-Y) && (Y_up<127-Y))                    //"X"
   1423              {
   1424                ans = -1;
   \   00000170   F643               MVNS     R6,R6            ;; #-1
   1425              }  
   1426          
   1427              
   1428              
   1429              char Y_up_tmp=127-Y_up;
   \                     ??List_Event_1:
   \   00000172   7F20               MOVS     R0,#+127
   \   00000174   001B               SUBS     R0,R0,R4
   \   00000176   0006               LSLS     R0,R0,#+24
   \   00000178   000E               LSRS     R0,R0,#+24
   1430              if ((RowWith) &(X_up>3) && (X_up<59) && (Y_up<127-(  (((Y_up_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-1) && (Y_up>127-(  (((Y_up_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-(RowWith-1)))                        //ustawienia
   \   0000017A   0499               LDR      R1,[SP, #+16]
   \   0000017C   0429               CMP      R1,#+4
   \   0000017E   01DB               BLT      ??List_Event_3
   \   00000180   0121               MOVS     R1,#+1
   \   00000182   00E0               B        ??List_Event_4
   \                     ??List_Event_3:
   \   00000184   0021               MOVS     R1,#+0
   \                     ??List_Event_4:
   \   00000186   0DAA               ADD      R2,SP,#+52
   \   00000188   1278               LDRB     R2,[R2, #+0]
   \   0000018A   0123               MOVS     R3,#+1
   \   0000018C   1340               ANDS     R3,R3,R2
   \   0000018E   0B42               TST      R3,R1
   \   00000190   1BD0               BEQ      ??List_Event_5
   \   00000192   0499               LDR      R1,[SP, #+16]
   \   00000194   3B29               CMP      R1,#+59
   \   00000196   18DA               BGE      ??List_Event_5
   \   00000198   0FA9               ADD      R1,SP,#+60
   \   0000019A   0F78               LDRB     R7,[R1, #+0]
   \   0000019C   1100               MOVS     R1,R2
   \   0000019E   0091               STR      R1,[SP, #+0]
   \   000001A0   1238               SUBS     R0,R0,#+18
   \   000001A2   C01B               SUBS     R0,R0,R7
   \   000001A4   ........           BL       __aeabi_idivmod
   \   000001A8   7F21               MOVS     R1,#+127
   \   000001AA   009A               LDR      R2,[SP, #+0]
   \   000001AC   4243               MULS     R2,R0,R2
   \   000001AE   891A               SUBS     R1,R1,R2
   \   000001B0   CA1B               SUBS     R2,R1,R7
   \   000001B2   1100               MOVS     R1,R2
   \   000001B4   1339               SUBS     R1,R1,#+19
   \   000001B6   8C42               CMP      R4,R1
   \   000001B8   07DA               BGE      ??List_Event_5
   \   000001BA   123A               SUBS     R2,R2,#+18
   \   000001BC   0099               LDR      R1,[SP, #+0]
   \   000001BE   511A               SUBS     R1,R2,R1
   \   000001C0   491C               ADDS     R1,R1,#+1
   \   000001C2   A142               CMP      R1,R4
   \   000001C4   01DA               BGE      ??List_Event_5
   1431              {
   1432                ans=((Y_up_tmp-18-Y) / RowWith)+1;
   \   000001C6   0600               MOVS     R6,R0
   \   000001C8   761C               ADDS     R6,R6,#+1
   1433               // MenuPaint();
   1434              }
   1435              
   1436              if ((FormStyle==0) && (X_up>46) && (X_up<63) && (Y_up>112-Y) && (Y_up<127-Y))                    //"X"
   \                     ??List_Event_5:
   \   000001CA   002D               CMP      R5,#+0
   \   000001CC   10D1               BNE      ??List_Event_6
   \   000001CE   0498               LDR      R0,[SP, #+16]
   \   000001D0   2F28               CMP      R0,#+47
   \   000001D2   0DDB               BLT      ??List_Event_6
   \   000001D4   3F28               CMP      R0,#+63
   \   000001D6   0BDA               BGE      ??List_Event_6
   \   000001D8   0FA8               ADD      R0,SP,#+60
   \   000001DA   0778               LDRB     R7,[R0, #+0]
   \   000001DC   7020               MOVS     R0,#+112
   \   000001DE   C01B               SUBS     R0,R0,R7
   \   000001E0   A042               CMP      R0,R4
   \   000001E2   05DA               BGE      ??List_Event_6
   \   000001E4   7F20               MOVS     R0,#+127
   \   000001E6   C01B               SUBS     R0,R0,R7
   \   000001E8   8442               CMP      R4,R0
   \   000001EA   01DA               BGE      ??List_Event_6
   1437              {
   1438                ans = -1;
   \   000001EC   0026               MOVS     R6,#+0
   \   000001EE   F643               MVNS     R6,R6            ;; #-1
   1439              }  
   1440          
   1441              if ((X_down>=0) && (X_down<64) && (podswietl==0)) MenuPaint();
   \                     ??List_Event_6:
   \   000001F0   0598               LDR      R0,[SP, #+20]
   \   000001F2   0028               CMP      R0,#+0
   \   000001F4   07D4               BMI      ??List_Event_7
   \   000001F6   4028               CMP      R0,#+64
   \   000001F8   05DA               BGE      ??List_Event_7
   \   000001FA   6846               MOV      R0,SP
   \   000001FC   0079               LDRB     R0,[R0, #+4]
   \   000001FE   0028               CMP      R0,#+0
   \   00000200   01D1               BNE      ??List_Event_7
   \   00000202   ........           BL       MenuPaint
   1442          
   1443              if (ans>Rows) ans=0;  
   \                     ??List_Event_7:
   \   00000206   0CA8               ADD      R0,SP,#+48
   \   00000208   0078               LDRB     R0,[R0, #+0]
   \   0000020A   B042               CMP      R0,R6
   \   0000020C   00DA               BGE      ??List_Event_8
   \   0000020E   0026               MOVS     R6,#+0
   1444           
   1445              return ans;
   \                     ??List_Event_8:
   \   00000210   3000               MOVS     R0,R6
   \   00000212   07B0               ADD      SP,SP,#+28
   \   00000214   F0BC               POP      {R4-R7}
   \   00000216   02BC               POP      {R1}
   \   00000218   0847               BX       R1               ;; return
   1446            
   1447              
   1448          }//_______________________ Koniec funkcji List_Event __________________________
   1449          
   1450          
   1451          
   1452          
   1453          //*-----------------------------------------------------------------------------
   1454          //* Nazwa funkcji :    ScrollList_Paint
   1455          //* Funkcja rysowania listy
   1456          //*-----------------------------------------------------------------------------
   1457          //* name[7]   -  Nazwa listy
   1458          //* Size_scroll  -  wielkosc listy
   1459          //* poz   -1 -  poziome linie rozdzielaj¹ce
   1460          
   1461          //*-----------------------------------------------------------------------------
   1462          

   \                                 In section Debug.txt, align 4, keep-with-next
   1463          void ScrollList_Paint(char name[15], int Size_scroll, int *_Suw_poz, char poz)
   1464              {
   \                     ScrollList_Paint:
   \   00000000   FBB5               PUSH     {R0,R1,R3-R7,LR}
   \   00000002   3A4C               LDR      R4,??ScrollList_Paint_0  ;; 0xfffffbf0
   \   00000004   A544               ADD      SP,SP,R4
   \   00000006   1500               MOVS     R5,R2
   1465          
   1466                 char ekran_tab[8][128] = {
   1467                            {254,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,3,253,245,237,221,61,61,221,237,245,253,3,254},
   1468                            {255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,240,239,235,237,238,239,239,238,237,235,239,240,255},
   1469                            {255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1470                            {255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1471                            {255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1472                            {255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1473                            {255,96,32,32,32,32,32,32,32,32,32,32,32,32,32,32,224,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,160,96,224,32,32,32,32,32,32,32,32,32,32,32,32,32,32,96,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1474                            {127,192,128,128,128,128,132,142,159,155,128,128,128,128,128,128,255,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,170,213,255,128,128,128,128,155,159,142,132,128,128,128,128,128,128,192,255,255,255,255,255,255,255,255,255,255,255,255,127,63},
   1475                            };
   \   00000008   394E               LDR      R6,??ScrollList_Paint_0+0x4  ;; `?<Constant {{254, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1`
   \   0000000A   04A8               ADD      R0,SP,#+16
   \   0000000C   3100               MOVS     R1,R6
   \   0000000E   8022               MOVS     R2,#+128
   \   00000010   D200               LSLS     R2,R2,#+3        ;; #+1024
   \   00000012   ........           BL       __aeabi_memcpy4
   1476               
   1477                 
   1478                  char suwak[14] = {128,255,255,255,255,224,238,238,224,255,255,255,255,128};
   \   00000016   6846               MOV      R0,SP
   \   00000018   8021               MOVS     R1,#+128
   \   0000001A   C900               LSLS     R1,R1,#+3        ;; #+1024
   \   0000001C   7118               ADDS     R1,R6,R1
   \   0000001E   1022               MOVS     R2,#+16
   \   00000020   ........           BL       __aeabi_memcpy4
   1479                  
   1480                  int Suw_poz_tmp;
   1481                  //rysowanie wskaŸnika po³o¿enia
   1482                  if (Size_scroll>50)
   \   00000024   FFA8               ADD      R0,SP,#+1020
   \   00000026   8069               LDR      R0,[R0, #+24]
   \   00000028   3328               CMP      R0,#+51
   \   0000002A   19DB               BLT      ??ScrollList_Paint_1
   1483                  {
   1484                      Suw_poz_tmp=98-(((*_Suw_poz)*67)/Size_scroll)-14;
   \   0000002C   5424               MOVS     R4,#+84
   \   0000002E   2868               LDR      R0,[R5, #+0]
   \   00000030   4321               MOVS     R1,#+67
   \   00000032   4843               MULS     R0,R1,R0
   \   00000034   FFA9               ADD      R1,SP,#+1020
   \   00000036   8969               LDR      R1,[R1, #+24]
   \   00000038   ........           BL       __aeabi_idivmod
   \   0000003C   241A               SUBS     R4,R4,R0
   1485              
   1486                      for (int i=(Suw_poz_tmp); i<=Suw_poz_tmp+13; i++)
   \   0000003E   2100               MOVS     R1,R4
   \   00000040   2000               MOVS     R0,R4
   \   00000042   0D30               ADDS     R0,R0,#+13
   \   00000044   8842               CMP      R0,R1
   \   00000046   6E46               MOV      R6,SP
   \   00000048   08DA               BGE      ??ScrollList_Paint_2
   \   0000004A   09E0               B        ??ScrollList_Paint_1
   1487                      {
   1488                        ekran_tab[7][i]=suwak[i-Suw_poz_tmp];
   \                     ??ScrollList_Paint_3:
   \   0000004C   E022               MOVS     R2,#+224
   \   0000004E   9200               LSLS     R2,R2,#+2        ;; #+896
   \   00000050   04AB               ADD      R3,SP,#+16
   \   00000052   5B18               ADDS     R3,R3,R1
   \   00000054   0D1B               SUBS     R5,R1,R4
   \   00000056   755D               LDRB     R5,[R6, R5]
   \   00000058   9D54               STRB     R5,[R3, R2]
   1489                      }
   \   0000005A   491C               ADDS     R1,R1,#+1
   \                     ??ScrollList_Paint_2:
   \   0000005C   8842               CMP      R0,R1
   \   0000005E   F5DA               BGE      ??ScrollList_Paint_3
   1490                  }
   1491                  
   1492                  CopyToCanvas(ekran_tab);
   \                     ??ScrollList_Paint_1:
   \   00000060   04AD               ADD      R5,SP,#+16
   \   00000062   244E               LDR      R6,??ScrollList_Paint_0+0x8  ;; LCD_Canvas
   \   00000064   0827               MOVS     R7,#+8
   \                     ??ScrollList_Paint_4:
   \   00000066   8022               MOVS     R2,#+128
   \   00000068   2900               MOVS     R1,R5
   \   0000006A   3000               MOVS     R0,R6
   \   0000006C   ........           BL       __aeabi_memcpy
   \   00000070   8036               ADDS     R6,R6,#+128
   \   00000072   8035               ADDS     R5,R5,#+128
   \   00000074   7F1E               SUBS     R7,R7,#+1
   \   00000076   F6D1               BNE      ??ScrollList_Paint_4
   1493                  
   1494                  Label(name,0,15,116,15,46,0,127,1);  //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   00000078   82B0               SUB      SP,SP,#+8
   \   0000007A   0120               MOVS     R0,#+1
   \   0000007C   0090               STR      R0,[SP, #+0]
   \   0000007E   7F21               MOVS     R1,#+127
   \   00000080   0020               MOVS     R0,#+0
   \   00000082   03B4               PUSH     {R0,R1}
   \   00000084   2E21               MOVS     R1,#+46
   \   00000086   0F20               MOVS     R0,#+15
   \   00000088   03B4               PUSH     {R0,R1}
   \   0000008A   7423               MOVS     R3,#+116
   \   0000008C   0F22               MOVS     R2,#+15
   \   0000008E   0021               MOVS     R1,#+0
   \   00000090   FFA8               ADD      R0,SP,#+1020
   \   00000092   C06A               LDR      R0,[R0, #+44]
   \   00000094   ........           BL       Label
   \   00000098   06B0               ADD      SP,SP,#+24
   1495                  if ((poz) && (Size_scroll>50))
   \   0000009A   FFA8               ADD      R0,SP,#+1020
   \   0000009C   1C30               ADDS     R0,R0,#+28
   \   0000009E   0078               LDRB     R0,[R0, #+0]
   \   000000A0   0028               CMP      R0,#+0
   \   000000A2   1DD0               BEQ      ??ScrollList_Paint_5
   \   000000A4   FFA8               ADD      R0,SP,#+1020
   \   000000A6   8069               LDR      R0,[R0, #+24]
   \   000000A8   3328               CMP      R0,#+51
   \   000000AA   19DB               BLT      ??ScrollList_Paint_5
   1496                  {
   1497                    H_line(54,Suw_poz_tmp,9,0);
   \   000000AC   0023               MOVS     R3,#+0
   \   000000AE   0922               MOVS     R2,#+9
   \   000000B0   2100               MOVS     R1,R4
   \   000000B2   3620               MOVS     R0,#+54
   \   000000B4   ........           BL       H_line
   1498                    H_line(54,Suw_poz_tmp+13,9,0);
   \   000000B8   0023               MOVS     R3,#+0
   \   000000BA   0922               MOVS     R2,#+9
   \   000000BC   2100               MOVS     R1,R4
   \   000000BE   0D31               ADDS     R1,R1,#+13
   \   000000C0   3620               MOVS     R0,#+54
   \   000000C2   ........           BL       H_line
   1499                    V_line(54,Suw_poz_tmp+1,12,1); 
   \   000000C6   641C               ADDS     R4,R4,#+1
   \   000000C8   0123               MOVS     R3,#+1
   \   000000CA   0C22               MOVS     R2,#+12
   \   000000CC   2100               MOVS     R1,R4
   \   000000CE   3620               MOVS     R0,#+54
   \   000000D0   ........           BL       V_line
   1500                    V_line(55,Suw_poz_tmp+1,12,1); 
   \   000000D4   0123               MOVS     R3,#+1
   \   000000D6   0C22               MOVS     R2,#+12
   \   000000D8   2100               MOVS     R1,R4
   \   000000DA   3720               MOVS     R0,#+55
   \   000000DC   ........           BL       V_line
   1501                  }
   1502              
   1503              }//_________________________________________________________________________
   \                     ??ScrollList_Paint_5:
   \   000000E0   0548               LDR      R0,??ScrollList_Paint_0+0xC  ;; 0x41c
   \   000000E2   8544               ADD      SP,SP,R0
   \   000000E4   F0BC               POP      {R4-R7}
   \   000000E6   01BC               POP      {R0}
   \   000000E8   0047               BX       R0               ;; return
   \   000000EA   C046               Nop      
   \                     ??ScrollList_Paint_0:
   \   000000EC   F0FBFFFF           DC32     0xfffffbf0
   \   000000F0   ........           DC32     `?<Constant {{254, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1`
   \   000000F4   ........           DC32     LCD_Canvas
   \   000000F8   1C040000           DC32     0x41c
   1504          
   1505          
   1506          
   1507          
   1508          
   1509          //*-----------------------------------------------------------------------------
   1510          //* Nazwa funkcji :    Ask_Paint
   1511          //* Funkcja rysowania listy
   1512          //*-----------------------------------------------------------------------------
   1513          //* name[7]   -  Nazwa listy
   1514          //* p1...p2   - nazwy kolejnych pól
   1515          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1516          void Ask_Paint(char name[10], char p1[15], char p2[15])
   1517          {
   \                     Ask_Paint:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   9EB0               SUB      SP,SP,#+120
   \   00000004   0600               MOVS     R6,R0
   \   00000006   0C00               MOVS     R4,R1
   \   00000008   1500               MOVS     R5,R2
   1518          
   1519              List_Paint(name,1,47,25,0,3,0,0,0,0,0,0,0,0); //(char name[7], char Rows, char RowWith, char Y, char FormStyle, char back, char p1[12], char p2[12] , char p3[12] , char p4[12] , char p5[12] , char p6[12] , char p7[12] , char p8[12])
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   03B4               PUSH     {R0,R1}
   \   00000010   03B4               PUSH     {R0,R1}
   \   00000012   03B4               PUSH     {R0,R1}
   \   00000014   03B4               PUSH     {R0,R1}
   \   00000016   0321               MOVS     R1,#+3
   \   00000018   03B4               PUSH     {R0,R1}
   \   0000001A   1923               MOVS     R3,#+25
   \   0000001C   2F22               MOVS     R2,#+47
   \   0000001E   0121               MOVS     R1,#+1
   \   00000020   3000               MOVS     R0,R6
   \   00000022   ........           BL       List_Paint
   \   00000026   0AB0               ADD      SP,SP,#+40
   1520                   
   1521              char ekran_tab[8][15] = {
   1522                            {249,13,245,245,245,245,245,245,245,245,245,245,245,13,249},
   1523                            {255,0,255,255,119,55,55,87,103,103,119,255,255,0,255},
   1524                            {255,0,255,255,199,187,187,187,187,187,199,255,255,0,255},
   1525                            {63,96,95,95,95,95,95,95,95,95,95,95,95,96,63},
   1526                            {254,3,253,253,253,253,253,253,253,253,253,253,253,3,254},
   1527                            {255,0,255,255,227,221,221,221,221,221,227,255,255,0,255},
   1528                            {255,0,255,255,238,246,250,252,250,246,238,255,255,0,255},
   1529                            {207,216,215,215,215,215,215,215,215,215,215,215,215,216,207},
   1530                            };
   \   00000028   6846               MOV      R0,SP
   \   0000002A   1B49               LDR      R1,??Ask_Paint_0  ;; `?<Constant {{249, 13, 245, 245, 245, 245, 245,`
   \   0000002C   7822               MOVS     R2,#+120
   \   0000002E   ........           BL       __aeabi_memcpy4
   1531              
   1532              CopyToCanvasPoint((char *)ekran_tab,0,40,64,15); 
   \   00000032   82B0               SUB      SP,SP,#+8
   \   00000034   0F20               MOVS     R0,#+15
   \   00000036   0090               STR      R0,[SP, #+0]
   \   00000038   4023               MOVS     R3,#+64
   \   0000003A   2822               MOVS     R2,#+40
   \   0000003C   0021               MOVS     R1,#+0
   \   0000003E   02A8               ADD      R0,SP,#+8
   \   00000040   ........           BL       CopyToCanvasPoint
   \   00000044   02B0               ADD      SP,SP,#+8
   1533              H_line(2,57,59,1); 
   \   00000046   0123               MOVS     R3,#+1
   \   00000048   3B22               MOVS     R2,#+59
   \   0000004A   3921               MOVS     R1,#+57
   \   0000004C   0220               MOVS     R0,#+2
   \   0000004E   ........           BL       H_line
   1534              
   1535              Label(p1,2,2,71,9,59,0,127,0);  //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   00000052   82B0               SUB      SP,SP,#+8
   \   00000054   0020               MOVS     R0,#+0
   \   00000056   0090               STR      R0,[SP, #+0]
   \   00000058   7F21               MOVS     R1,#+127
   \   0000005A   03B4               PUSH     {R0,R1}
   \   0000005C   3B21               MOVS     R1,#+59
   \   0000005E   0920               MOVS     R0,#+9
   \   00000060   03B4               PUSH     {R0,R1}
   \   00000062   4723               MOVS     R3,#+71
   \   00000064   0222               MOVS     R2,#+2
   \   00000066   1100               MOVS     R1,R2
   \   00000068   2000               MOVS     R0,R4
   \   0000006A   ........           BL       Label
   \   0000006E   06B0               ADD      SP,SP,#+24
   1536              Label(p2,2,2,62,15,59,0,127,0);  //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   00000070   82B0               SUB      SP,SP,#+8
   \   00000072   0020               MOVS     R0,#+0
   \   00000074   0090               STR      R0,[SP, #+0]
   \   00000076   7F21               MOVS     R1,#+127
   \   00000078   03B4               PUSH     {R0,R1}
   \   0000007A   3B21               MOVS     R1,#+59
   \   0000007C   0F20               MOVS     R0,#+15
   \   0000007E   03B4               PUSH     {R0,R1}
   \   00000080   3E23               MOVS     R3,#+62
   \   00000082   0222               MOVS     R2,#+2
   \   00000084   1100               MOVS     R1,R2
   \   00000086   2800               MOVS     R0,R5
   \   00000088   ........           BL       Label
   \   0000008C   06B0               ADD      SP,SP,#+24
   1537          }//_______________________ Koniec funkcji Ask_Paint __________________________
   \   0000008E   1EB0               ADD      SP,SP,#+120
   \   00000090   70BC               POP      {R4-R6}
   \   00000092   01BC               POP      {R0}
   \   00000094   0047               BX       R0               ;; return
   \   00000096   C046               Nop      
   \                     ??Ask_Paint_0:
   \   00000098   ........           DC32     `?<Constant {{249, 13, 245, 245, 245, 245, 245,`
   1538          
   1539          
   1540          
   1541          
   1542          //*-----------------------------------------------------------------------------
   1543          //* Nazwa funkcji :    List_Event
   1544          //* Funkcja rysowania listy
   1545          //*-----------------------------------------------------------------------------
   1546          //* name[7]   -  Nazwa listy
   1547          //* Rows      -  ilosc wierszy
   1548          //* RowWith   -  szerokosc wiersza
   1549          //* Y         -  odsuniecie od górnej krawêdzi
   1550          //* p1...p8   - nazwy kolejnych pól
   1551          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1552          int Ask_Event(int X_up, int Y_up, int X_down, int Y_down)
   1553          {
   \                     Ask_Event:
   \   00000000   FBB5               PUSH     {R0,R1,R3-R7,LR}
   \   00000002   1400               MOVS     R4,R2
   \   00000004   0021               MOVS     R1,#+0
   1554            char Y=25;
   1555            
   1556            char podswietl=0;
   1557            int ans = 0;
   \   00000006   0025               MOVS     R5,#+0
   1558            
   1559          
   1560          
   1561          
   1562            
   1563            //zdarzenie typu down 
   1564              for (char i=0; i<=30; i=i+30)
   \   00000008   0E00               MOVS     R6,R1
   1565              {
   1566            
   1567                  if ((X_down>2+i) && (X_down<51+i) &&  (Y_down>38) && (Y_down<55))   
   \                     ??Ask_Event_0:
   \   0000000A   3000               MOVS     R0,R6
   \   0000000C   801C               ADDS     R0,R0,#+2
   \   0000000E   A042               CMP      R0,R4
   \   00000010   2DDA               BGE      ??Ask_Event_1
   \   00000012   3000               MOVS     R0,R6
   \   00000014   3330               ADDS     R0,R0,#+51
   \   00000016   8442               CMP      R4,R0
   \   00000018   29DA               BGE      ??Ask_Event_1
   \   0000001A   0298               LDR      R0,[SP, #+8]
   \   0000001C   2728               CMP      R0,#+39
   \   0000001E   26DB               BLT      ??Ask_Event_1
   \   00000020   3728               CMP      R0,#+55
   \   00000022   24DA               BGE      ??Ask_Event_1
   1568                  {  
   1569                    MenuPaint();
   \   00000024   ........           BL       MenuPaint
   1570                    H_line(4+i,41,26,1);
   \   00000028   3700               MOVS     R7,R6
   \   0000002A   3F1D               ADDS     R7,R7,#+4
   \   0000002C   0123               MOVS     R3,#+1
   \   0000002E   1A22               MOVS     R2,#+26
   \   00000030   2921               MOVS     R1,#+41
   \   00000032   3806               LSLS     R0,R7,#+24
   \   00000034   000E               LSRS     R0,R0,#+24
   \   00000036   ........           BL       H_line
   1571                    H_line(4+i,53,26,1);
   \   0000003A   0123               MOVS     R3,#+1
   \   0000003C   1A22               MOVS     R2,#+26
   \   0000003E   3521               MOVS     R1,#+53
   \   00000040   3806               LSLS     R0,R7,#+24
   \   00000042   000E               LSRS     R0,R0,#+24
   \   00000044   ........           BL       H_line
   1572                    V_line(3+i,41,12,1);
   \   00000048   0123               MOVS     R3,#+1
   \   0000004A   0C22               MOVS     R2,#+12
   \   0000004C   2921               MOVS     R1,#+41
   \   0000004E   3000               MOVS     R0,R6
   \   00000050   C01C               ADDS     R0,R0,#+3
   \   00000052   0006               LSLS     R0,R0,#+24
   \   00000054   000E               LSRS     R0,R0,#+24
   \   00000056   ........           BL       V_line
   1573                    V_line(29+i,42,13,1);
   \   0000005A   0123               MOVS     R3,#+1
   \   0000005C   0D22               MOVS     R2,#+13
   \   0000005E   2A21               MOVS     R1,#+42
   \   00000060   3000               MOVS     R0,R6
   \   00000062   1D30               ADDS     R0,R0,#+29
   \   00000064   0006               LSLS     R0,R0,#+24
   \   00000066   000E               LSRS     R0,R0,#+24
   \   00000068   ........           BL       V_line
   1574                    podswietl=1;
   \   0000006C   0121               MOVS     R1,#+1
   1575                  }
   1576              }
   \                     ??Ask_Event_1:
   \   0000006E   1E36               ADDS     R6,R6,#+30
   \   00000070   3006               LSLS     R0,R6,#+24
   \   00000072   000E               LSRS     R0,R0,#+24
   \   00000074   1F28               CMP      R0,#+31
   \   00000076   C8D3               BCC      ??Ask_Event_0
   1577          
   1578           
   1579            //zdarzenie typu down "X"
   1580              if ((X_down>46) && (X_down<63) && (Y_down>112-Y) && (Y_down<127-Y))    //"X"
   \   00000078   2F2C               CMP      R4,#+47
   \   0000007A   21DB               BLT      ??Ask_Event_2
   \   0000007C   3F2C               CMP      R4,#+63
   \   0000007E   1FDA               BGE      ??Ask_Event_2
   \   00000080   0298               LDR      R0,[SP, #+8]
   \   00000082   5828               CMP      R0,#+88
   \   00000084   1CDB               BLT      ??Ask_Event_2
   \   00000086   6628               CMP      R0,#+102
   \   00000088   1ADA               BGE      ??Ask_Event_2
   1581              {
   1582                MenuPaint();
   \   0000008A   ........           BL       MenuPaint
   1583                H_line(49,114-Y,10,0);
   \   0000008E   0023               MOVS     R3,#+0
   \   00000090   0A22               MOVS     R2,#+10
   \   00000092   5921               MOVS     R1,#+89
   \   00000094   3120               MOVS     R0,#+49
   \   00000096   ........           BL       H_line
   1584                H_line(49,123-Y,10,0); 
   \   0000009A   2B00               MOVS     R3,R5
   \   0000009C   0A22               MOVS     R2,#+10
   \   0000009E   6221               MOVS     R1,#+98
   \   000000A0   3120               MOVS     R0,#+49
   \   000000A2   ........           BL       H_line
   1585                V_line(49,114-Y,10,0); 
   \   000000A6   2B00               MOVS     R3,R5
   \   000000A8   0A22               MOVS     R2,#+10
   \   000000AA   5921               MOVS     R1,#+89
   \   000000AC   3120               MOVS     R0,#+49
   \   000000AE   ........           BL       V_line
   1586                V_line(58,114-Y,10,0); 
   \   000000B2   2B00               MOVS     R3,R5
   \   000000B4   0A22               MOVS     R2,#+10
   \   000000B6   5921               MOVS     R1,#+89
   \   000000B8   3A20               MOVS     R0,#+58
   \   000000BA   ........           BL       V_line
   1587                podswietl=1;
   \   000000BE   0121               MOVS     R1,#+1
   1588              }
   1589            
   1590              
   1591              if ((X_up>46) && (X_up<63) && (Y_up>112-Y) && (Y_up<127-Y))                    //"X"
   \                     ??Ask_Event_2:
   \   000000C0   0098               LDR      R0,[SP, #+0]
   \   000000C2   2F28               CMP      R0,#+47
   \   000000C4   07DB               BLT      ??Ask_Event_3
   \   000000C6   3F28               CMP      R0,#+63
   \   000000C8   05DA               BGE      ??Ask_Event_3
   \   000000CA   0198               LDR      R0,[SP, #+4]
   \   000000CC   5828               CMP      R0,#+88
   \   000000CE   02DB               BLT      ??Ask_Event_3
   \   000000D0   6628               CMP      R0,#+102
   \   000000D2   00DA               BGE      ??Ask_Event_3
   1592              {
   1593                ans = -1;
   \   000000D4   ED43               MVNS     R5,R5            ;; #-1
   1594              }  
   1595          
   1596              
   1597                //zdarzenie typu down 
   1598              for (char i=0; i<=1; i++)
   \                     ??Ask_Event_3:
   \   000000D6   0022               MOVS     R2,#+0
   \   000000D8   0223               MOVS     R3,#+2
   1599              {
   1600                  if ((X_up>2+(i*30)) && (X_up<51+(i*30)) &&  (Y_up>38) && (Y_up<55))   
   \                     ??Ask_Event_4:
   \   000000DA   0098               LDR      R0,[SP, #+0]
   \   000000DC   8342               CMP      R3,R0
   \   000000DE   0BDA               BGE      ??Ask_Event_5
   \   000000E0   0600               MOVS     R6,R0
   \   000000E2   1800               MOVS     R0,R3
   \   000000E4   3130               ADDS     R0,R0,#+49
   \   000000E6   8642               CMP      R6,R0
   \   000000E8   06DA               BGE      ??Ask_Event_5
   \   000000EA   0198               LDR      R0,[SP, #+4]
   \   000000EC   2728               CMP      R0,#+39
   \   000000EE   03DB               BLT      ??Ask_Event_5
   \   000000F0   3728               CMP      R0,#+55
   \   000000F2   01DA               BGE      ??Ask_Event_5
   1601                  {  
   1602                     ans=i+1;
   \   000000F4   1500               MOVS     R5,R2
   \   000000F6   6D1C               ADDS     R5,R5,#+1
   1603                  }
   1604              }
   \                     ??Ask_Event_5:
   \   000000F8   521C               ADDS     R2,R2,#+1
   \   000000FA   1E33               ADDS     R3,R3,#+30
   \   000000FC   1006               LSLS     R0,R2,#+24
   \   000000FE   000E               LSRS     R0,R0,#+24
   \   00000100   0228               CMP      R0,#+2
   \   00000102   EAD3               BCC      ??Ask_Event_4
   1605          
   1606              if ((X_down>=0) && (X_down<64) && (podswietl==0)) {MenuPaint();}
   \   00000104   002C               CMP      R4,#+0
   \   00000106   05D4               BMI      ??Ask_Event_6
   \   00000108   402C               CMP      R4,#+64
   \   0000010A   03DA               BGE      ??Ask_Event_6
   \   0000010C   0029               CMP      R1,#+0
   \   0000010E   01D1               BNE      ??Ask_Event_6
   \   00000110   ........           BL       MenuPaint
   1607          
   1608          
   1609              return ans;
   \                     ??Ask_Event_6:
   \   00000114   2800               MOVS     R0,R5
   \   00000116   03B0               ADD      SP,SP,#+12
   \   00000118   F0BC               POP      {R4-R7}
   \   0000011A   02BC               POP      {R1}
   \   0000011C   0847               BX       R1               ;; return
   1610            
   1611          }//_______________________ Koniec funkcji List_Event __________________________
   1612          
   1613          
   1614          
   1615          
   1616          
   1617          
   1618          //*-----------------------------------------------------------------------------
   1619          //* Nazwa funkcji :    List_Paint
   1620          //* Funkcja rysowania listy
   1621          //*-----------------------------------------------------------------------------
   1622          //* name[7]   -  Nazwa listy
   1623          //* Rows      -  ilosc wierszy
   1624          //* RowWith   -  szerokosc wiersza
   1625          //* Y         -  odsuniecie od górnej krawêdzi
   1626          //* FormStyle -  rodzaj formy 0-zwyk³a 1..-coraz mniejsze
   1627          //* Algin     - wyrównanie 0-pion œrodek, poziom lowo, 1-pion góra, poziom lowo, 2 pion dó³, poziom lowo, 3-pion œrodek, poziom wyœrodkowanie
   1628          //* p1...p8   - nazwy kolejnych pól
   1629          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1630          void Number_Paint(char name[10], char p1[1], char p2[1])
   1631          {
   \                     Number_Paint:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   2A4B               LDR      R3,??Number_Paint_0  ;; 0xfffffc00
   \   00000004   9D44               ADD      SP,SP,R3
   1632           
   1633            CleanCanvas();
   \   00000006   2A4C               LDR      R4,??Number_Paint_0+0x4  ;; LCD_Canvas
   \   00000008   2600               MOVS     R6,R4
   \   0000000A   0825               MOVS     R5,#+8
   \   0000000C   0827               MOVS     R7,#+8
   \                     ??Number_Paint_1:
   \   0000000E   8021               MOVS     R1,#+128
   \   00000010   3000               MOVS     R0,R6
   \   00000012   ........           BL       __aeabi_memclr
   \   00000016   8036               ADDS     R6,R6,#+128
   \   00000018   7F1E               SUBS     R7,R7,#+1
   \   0000001A   F8D1               BNE      ??Number_Paint_1
   1634          
   1635            char ekran_tab[8][128] = {
   1636                            {254,255,3,249,5,245,245,245,245,245,245,245,245,245,245,245,245,245,245,5,249,1,1,249,5,245,245,245,245,245,245,245,245,245,245,245,245,245,245,5,249,1,1,249,5,245,245,245,245,245,245,245,245,245,245,245,245,245,245,5,249,1,1,249,5,245,245,245,245,245,245,245,245,245,245,245,245,245,245,5,249,3,255,255,255,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,255,3,255,255,255,255,255,255,255,255,255,255,255,254,252,248},
   1637                            {255,255,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,255,0,0,255,0,255,255,249,249,249,243,243,243,231,231,207,192,255,255,0,255,0,0,255,0,255,255,231,231,192,230,229,229,227,227,231,231,255,255,0,255,0,0,255,0,255,255,231,231,231,231,231,231,229,225,227,231,255,255,0,255,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1638                            {255,255,0,7,136,139,139,139,139,139,139,139,139,139,139,139,139,139,139,136,7,0,0,7,136,139,139,139,139,139,139,139,139,139,139,139,139,139,139,136,7,0,0,7,136,139,139,139,139,139,139,139,139,139,139,139,139,139,139,136,7,0,0,7,136,139,139,139,139,139,139,139,139,139,139,139,139,139,139,136,7,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1639                            {255,255,0,255,0,254,254,62,158,158,158,158,158,158,158,158,62,254,254,0,255,0,0,255,0,254,254,62,158,158,158,158,62,158,158,158,62,254,254,0,255,0,0,255,0,254,254,62,158,254,254,254,158,30,158,62,62,254,254,0,255,0,0,255,0,254,254,30,158,62,126,126,254,254,254,158,62,254,254,0,255,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1640                            {255,255,0,255,0,127,127,124,121,121,121,121,121,121,121,121,124,127,127,0,255,0,0,255,0,127,127,124,121,121,121,121,124,121,121,121,124,127,127,0,255,0,0,255,0,127,127,124,121,121,121,121,121,124,127,127,120,127,127,0,255,0,0,255,0,127,127,120,127,127,126,124,124,121,121,121,124,127,127,0,255,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255},
   1641                            {255,255,0,224,17,209,209,209,209,209,209,209,209,209,209,209,209,209,209,17,224,0,0,224,17,209,209,209,209,209,209,209,209,209,209,209,209,209,209,17,224,0,0,224,17,209,209,209,209,209,209,209,209,209,209,209,209,209,209,17,224,0,0,224,17,209,209,209,209,209,209,209,209,209,209,209,209,209,209,17,224,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,192,127,127,127,127,127,127,127,127,127,127,127,127,255,255},
   1642                            {255,255,0,255,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,255,0,0,255,0,255,255,199,179,63,63,7,51,51,51,51,135,255,255,0,255,0,0,255,0,255,255,135,51,51,49,49,129,241,243,55,143,255,255,0,255,0,0,255,0,255,255,135,51,63,63,63,143,63,63,51,135,255,255,0,255,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,254,255,251,247,111,159,159,111,247,251,255,254,0,255},
   1643                            {127,255,192,159,160,175,175,175,175,175,175,175,175,175,175,175,175,175,175,160,159,128,128,159,160,175,175,175,175,175,175,175,175,175,175,175,175,175,175,160,159,128,128,159,160,175,175,175,175,175,175,175,175,175,175,175,175,175,175,160,159,128,128,159,160,175,175,175,175,175,175,175,175,175,175,175,175,175,175,160,159,192,255,255,255,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,255,240,231,239,237,238,239,239,239,239,238,237,239,103,48,31},
   1644                            };
   \   0000001C   6846               MOV      R0,SP
   \   0000001E   2549               LDR      R1,??Number_Paint_0+0x8  ;; `?<Constant {{254, 255, 3, 249, 5, 245, 245, 24`
   \   00000020   EA01               LSLS     R2,R5,#+7
   \   00000022   ........           BL       __aeabi_memcpy4
   1645              
   1646              CopyToCanvas(ekran_tab);
   \   00000026   6E46               MOV      R6,SP
   \                     ??Number_Paint_2:
   \   00000028   8022               MOVS     R2,#+128
   \   0000002A   3100               MOVS     R1,R6
   \   0000002C   2000               MOVS     R0,R4
   \   0000002E   ........           BL       __aeabi_memcpy
   \   00000032   8034               ADDS     R4,R4,#+128
   \   00000034   8036               ADDS     R6,R6,#+128
   \   00000036   6D1E               SUBS     R5,R5,#+1
   \   00000038   F6D1               BNE      ??Number_Paint_2
   1647              Label(name,0,2,116,10,42,0,127,1);  //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   0000003A   82B0               SUB      SP,SP,#+8
   \   0000003C   0120               MOVS     R0,#+1
   \   0000003E   0090               STR      R0,[SP, #+0]
   \   00000040   7F21               MOVS     R1,#+127
   \   00000042   0020               MOVS     R0,#+0
   \   00000044   03B4               PUSH     {R0,R1}
   \   00000046   2A21               MOVS     R1,#+42
   \   00000048   0A20               MOVS     R0,#+10
   \   0000004A   03B4               PUSH     {R0,R1}
   \   0000004C   7423               MOVS     R3,#+116
   \   0000004E   0222               MOVS     R2,#+2
   \   00000050   0021               MOVS     R1,#+0
   \   00000052   FFA8               ADD      R0,SP,#+1020
   \   00000054   C069               LDR      R0,[R0, #+28]
   \   00000056   ........           BL       Label
   \   0000005A   06B0               ADD      SP,SP,#+24
   1648              
   1649           
   1650              
   1651          
   1652          
   1653              Label(p1,0,9,7,2,7,0,127,1);      //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   0000005C   82B0               SUB      SP,SP,#+8
   \   0000005E   0120               MOVS     R0,#+1
   \   00000060   0090               STR      R0,[SP, #+0]
   \   00000062   7F21               MOVS     R1,#+127
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   03B4               PUSH     {R0,R1}
   \   00000068   0721               MOVS     R1,#+7
   \   0000006A   0220               MOVS     R0,#+2
   \   0000006C   03B4               PUSH     {R0,R1}
   \   0000006E   0723               MOVS     R3,#+7
   \   00000070   0922               MOVS     R2,#+9
   \   00000072   0021               MOVS     R1,#+0
   \   00000074   FFA8               ADD      R0,SP,#+1020
   \   00000076   006A               LDR      R0,[R0, #+32]
   \   00000078   ........           BL       Label
   \   0000007C   06B0               ADD      SP,SP,#+24
   1654              Label(p2,0,51,7,2,7,0,127,1);    //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   0000007E   82B0               SUB      SP,SP,#+8
   \   00000080   0120               MOVS     R0,#+1
   \   00000082   0090               STR      R0,[SP, #+0]
   \   00000084   7F21               MOVS     R1,#+127
   \   00000086   0020               MOVS     R0,#+0
   \   00000088   03B4               PUSH     {R0,R1}
   \   0000008A   0721               MOVS     R1,#+7
   \   0000008C   0220               MOVS     R0,#+2
   \   0000008E   03B4               PUSH     {R0,R1}
   \   00000090   0B00               MOVS     R3,R1
   \   00000092   3322               MOVS     R2,#+51
   \   00000094   0021               MOVS     R1,#+0
   \   00000096   FFA8               ADD      R0,SP,#+1020
   \   00000098   406A               LDR      R0,[R0, #+36]
   \   0000009A   ........           BL       Label
   \   0000009E   06B0               ADD      SP,SP,#+24
   1655              
   1656          }//_______________________ Koniec funkcji List_Paint __________________________
   \   000000A0   0548               LDR      R0,??Number_Paint_0+0xC  ;; 0x40c
   \   000000A2   8544               ADD      SP,SP,R0
   \   000000A4   F0BC               POP      {R4-R7}
   \   000000A6   01BC               POP      {R0}
   \   000000A8   0047               BX       R0               ;; return
   \   000000AA   C046               Nop      
   \                     ??Number_Paint_0:
   \   000000AC   00FCFFFF           DC32     0xfffffc00
   \   000000B0   ........           DC32     LCD_Canvas
   \   000000B4   ........           DC32     `?<Constant {{254, 255, 3, 249, 5, 245, 245, 24`
   \   000000B8   0C040000           DC32     0x40c
   1657          
   1658          
   1659          
   1660          
   1661          
   1662          
   1663          
   1664          //*-----------------------------------------------------------------------------
   1665          //* Nazwa funkcji :    Number_Event
   1666          //* Funkcja rysowania listy
   1667          //*-----------------------------------------------------------------------------
   1668          //* name[7]   -  Nazwa listy
   1669          //* Rows      -  ilosc wierszy
   1670          //* RowWith   -  szerokosc wiersza
   1671          //* Y         -  odsuniecie od górnej krawêdzi
   1672          //* p1...p8   - nazwy kolejnych pól
   1673          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1674          int Number_Event(int X_up, int Y_up, int X_down, int Y_down)
   1675          {
   \                     Number_Event:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   84B0               SUB      SP,SP,#+16
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   1500               MOVS     R5,R2
   \   00000008   1E00               MOVS     R6,R3
   1676          
   1677            char podswietl=0;
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   0027               MOVS     R7,#+0
   1678            int ans = 0;
   \   0000000E   0290               STR      R0,[SP, #+8]
   1679            char kol = 0;
   1680            char row = 0;
   1681            
   1682          
   1683          
   1684            //zdarzenie typu down (najechanie na przycisk)
   1685            if ((X_down>1) && (X_down<62) && (Y_down>3) && (Y_down<81) && (X_down!=21) && (X_down!=42) && (Y_down!=61) && (Y_down!=41) && (Y_down!=21) )   
   \   00000010   022D               CMP      R5,#+2
   \   00000012   4BDB               BLT      ??Number_Event_0
   \   00000014   3E2D               CMP      R5,#+62
   \   00000016   49DA               BGE      ??Number_Event_0
   \   00000018   042E               CMP      R6,#+4
   \   0000001A   47DB               BLT      ??Number_Event_0
   \   0000001C   512E               CMP      R6,#+81
   \   0000001E   45DA               BGE      ??Number_Event_0
   \   00000020   152D               CMP      R5,#+21
   \   00000022   43D0               BEQ      ??Number_Event_0
   \   00000024   2A2D               CMP      R5,#+42
   \   00000026   41D0               BEQ      ??Number_Event_0
   \   00000028   3D2E               CMP      R6,#+61
   \   0000002A   3FD0               BEQ      ??Number_Event_0
   \   0000002C   292E               CMP      R6,#+41
   \   0000002E   3DD0               BEQ      ??Number_Event_0
   \   00000030   152E               CMP      R6,#+21
   \   00000032   3BD0               BEQ      ??Number_Event_0
   1686              {
   1687                kol = (((X_down-1)/21))*21;
   \   00000034   681E               SUBS     R0,R5,#+1
   \   00000036   1521               MOVS     R1,#+21
   \   00000038   ........           BL       __aeabi_idivmod
   \   0000003C   0700               MOVS     R7,R0
   \   0000003E   1520               MOVS     R0,#+21
   \   00000040   4743               MULS     R7,R0,R7
   \   00000042   3F06               LSLS     R7,R7,#+24
   \   00000044   3F0E               LSRS     R7,R7,#+24
   1688                row = (((Y_down-3)/20))*20;
   \   00000046   F01E               SUBS     R0,R6,#+3
   \   00000048   1421               MOVS     R1,#+20
   \   0000004A   ........           BL       __aeabi_idivmod
   \   0000004E   1421               MOVS     R1,#+20
   \   00000050   4843               MULS     R0,R1,R0
   \   00000052   0006               LSLS     R0,R0,#+24
   \   00000054   000E               LSRS     R0,R0,#+24
   \   00000056   0090               STR      R0,[SP, #+0]
   1689                MenuPaint();
   \   00000058   ........           BL       MenuPaint
   1690                H_line(kol+3, row+4, 16,1);
   \   0000005C   0098               LDR      R0,[SP, #+0]
   \   0000005E   0006               LSLS     R0,R0,#+24
   \   00000060   000E               LSRS     R0,R0,#+24
   \   00000062   0390               STR      R0,[SP, #+12]
   \   00000064   001D               ADDS     R0,R0,#+4
   \   00000066   0090               STR      R0,[SP, #+0]
   \   00000068   6846               MOV      R0,SP
   \   0000006A   3900               MOVS     R1,R7
   \   0000006C   C91C               ADDS     R1,R1,#+3
   \   0000006E   0171               STRB     R1,[R0, #+4]
   \   00000070   0123               MOVS     R3,#+1
   \   00000072   1022               MOVS     R2,#+16
   \   00000074   0099               LDR      R1,[SP, #+0]
   \   00000076   0079               LDRB     R0,[R0, #+4]
   \   00000078   ........           BL       H_line
   1691                H_line(kol+3, row+19, 16,1);
   \   0000007C   0123               MOVS     R3,#+1
   \   0000007E   1022               MOVS     R2,#+16
   \   00000080   0399               LDR      R1,[SP, #+12]
   \   00000082   1331               ADDS     R1,R1,#+19
   \   00000084   6846               MOV      R0,SP
   \   00000086   0079               LDRB     R0,[R0, #+4]
   \   00000088   ........           BL       H_line
   1692                V_line(kol+3, row+4, 16,1);
   \   0000008C   0123               MOVS     R3,#+1
   \   0000008E   1022               MOVS     R2,#+16
   \   00000090   0099               LDR      R1,[SP, #+0]
   \   00000092   6846               MOV      R0,SP
   \   00000094   0079               LDRB     R0,[R0, #+4]
   \   00000096   ........           BL       V_line
   1693                V_line(kol+18, row+4, 16,1);
   \   0000009A   0123               MOVS     R3,#+1
   \   0000009C   1022               MOVS     R2,#+16
   \   0000009E   0099               LDR      R1,[SP, #+0]
   \   000000A0   1237               ADDS     R7,R7,#+18
   \   000000A2   3806               LSLS     R0,R7,#+24
   \   000000A4   000E               LSRS     R0,R0,#+24
   \   000000A6   ........           BL       V_line
   1694                
   1695                podswietl=1;
   \   000000AA   0127               MOVS     R7,#+1
   1696              }
   1697           
   1698          
   1699              
   1700            //zdarzenie typu down "X"
   1701              if ((X_down>46) && (X_down<63) && (Y_down>112) && (Y_down<127))    //"X"
   \                     ??Number_Event_0:
   \   000000AC   2F2D               CMP      R5,#+47
   \   000000AE   20DB               BLT      ??Number_Event_1
   \   000000B0   3F2D               CMP      R5,#+63
   \   000000B2   1EDA               BGE      ??Number_Event_1
   \   000000B4   712E               CMP      R6,#+113
   \   000000B6   1CDB               BLT      ??Number_Event_1
   \   000000B8   7F2E               CMP      R6,#+127
   \   000000BA   1ADA               BGE      ??Number_Event_1
   1702              {
   1703                MenuPaint();
   \   000000BC   ........           BL       MenuPaint
   1704                H_line(49,115,10,0);
   \   000000C0   0023               MOVS     R3,#+0
   \   000000C2   0A22               MOVS     R2,#+10
   \   000000C4   7321               MOVS     R1,#+115
   \   000000C6   3120               MOVS     R0,#+49
   \   000000C8   ........           BL       H_line
   1705                H_line(49,124,10,0); 
   \   000000CC   0023               MOVS     R3,#+0
   \   000000CE   0A22               MOVS     R2,#+10
   \   000000D0   7C21               MOVS     R1,#+124
   \   000000D2   3120               MOVS     R0,#+49
   \   000000D4   ........           BL       H_line
   1706                V_line(49,115,10,0); 
   \   000000D8   0023               MOVS     R3,#+0
   \   000000DA   0A22               MOVS     R2,#+10
   \   000000DC   7321               MOVS     R1,#+115
   \   000000DE   3120               MOVS     R0,#+49
   \   000000E0   ........           BL       V_line
   1707                V_line(58,115,10,0); 
   \   000000E4   0023               MOVS     R3,#+0
   \   000000E6   0A22               MOVS     R2,#+10
   \   000000E8   7321               MOVS     R1,#+115
   \   000000EA   3A20               MOVS     R0,#+58
   \   000000EC   ........           BL       V_line
   1708                podswietl=1;
   \   000000F0   0127               MOVS     R7,#+1
   1709              }
   1710             
   1711            
   1712             //zdarzenie typu up (naciœniêcie na "X")
   1713              if ( (X_up>46) && (X_up<63) && (Y_up>112) && (Y_up<127))                    //"X"
   \                     ??Number_Event_1:
   \   000000F2   0498               LDR      R0,[SP, #+16]
   \   000000F4   2F28               CMP      R0,#+47
   \   000000F6   3ADB               BLT      ??Number_Event_2
   \   000000F8   3F28               CMP      R0,#+63
   \   000000FA   06DA               BGE      ??Number_Event_3
   \   000000FC   712C               CMP      R4,#+113
   \   000000FE   04DB               BLT      ??Number_Event_3
   \   00000100   7F2C               CMP      R4,#+127
   \   00000102   02DA               BGE      ??Number_Event_3
   1714              {
   1715                ans = -1;
   \   00000104   0020               MOVS     R0,#+0
   \   00000106   C043               MVNS     R0,R0            ;; #-1
   \   00000108   0290               STR      R0,[SP, #+8]
   \                     ??Number_Event_3:
   \   0000010A   0498               LDR      R0,[SP, #+16]
   \   0000010C   3E28               CMP      R0,#+62
   \   0000010E   21DA               BGE      ??Number_Event_4
   \                     ??Number_Event_5:
   \   00000110   042C               CMP      R4,#+4
   \   00000112   1FDB               BLT      ??Number_Event_4
   \   00000114   512C               CMP      R4,#+81
   \   00000116   1DDA               BGE      ??Number_Event_4
   \   00000118   1528               CMP      R0,#+21
   \   0000011A   1BD0               BEQ      ??Number_Event_4
   \   0000011C   2A28               CMP      R0,#+42
   \   0000011E   19D0               BEQ      ??Number_Event_4
   \   00000120   3D2C               CMP      R4,#+61
   \   00000122   17D0               BEQ      ??Number_Event_4
   \   00000124   292C               CMP      R4,#+41
   \   00000126   15D0               BEQ      ??Number_Event_4
   \   00000128   152C               CMP      R4,#+21
   \   0000012A   13D0               BEQ      ??Number_Event_4
   1716              }  
   1717            
   1718            
   1719              if ((X_up>1) && (X_up<62) && (Y_up>3) && (Y_up<81) && (X_up!=21) && (X_up!=42) && (Y_up!=61) && (Y_up!=41) && (Y_up!=21) )   
   1720              {
   1721                kol = (((X_up-1)/21)+1);
   1722                row = 3-(((Y_up-3)/20));
   1723          
   1724                ans=(row*3)+kol;
   \   0000012C   0326               MOVS     R6,#+3
   \   0000012E   E01E               SUBS     R0,R4,#+3
   \   00000130   1421               MOVS     R1,#+20
   \   00000132   ........           BL       __aeabi_idivmod
   \   00000136   341A               SUBS     R4,R6,R0
   \   00000138   2406               LSLS     R4,R4,#+24
   \   0000013A   240E               LSRS     R4,R4,#+24
   \   0000013C   0320               MOVS     R0,#+3
   \   0000013E   4443               MULS     R4,R0,R4
   \   00000140   0498               LDR      R0,[SP, #+16]
   \   00000142   401E               SUBS     R0,R0,#+1
   \   00000144   1521               MOVS     R1,#+21
   \   00000146   ........           BL       __aeabi_idivmod
   \   0000014A   401C               ADDS     R0,R0,#+1
   \   0000014C   0006               LSLS     R0,R0,#+24
   \   0000014E   000E               LSRS     R0,R0,#+24
   \   00000150   2018               ADDS     R0,R4,R0
   \   00000152   0290               STR      R0,[SP, #+8]
   1725                
   1726              }
   1727              /*
   1728              char Y_up_tmp=127-Y_up;
   1729              if ((X_up>3) && (X_up<59) && (Y_up<127-(  (((Y_up_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-1) && (Y_up>127-(  (((Y_up_tmp-18-Y) / RowWith)*RowWith)    +18+Y)-(RowWith-1)))                        //ustawienia
   1730              {
   1731                ans=((Y_up_tmp-18-Y) / RowWith)+1;
   1732               // MenuPaint();
   1733              }
   1734              */
   1735            
   1736              if ((X_down>=0) && (X_down<64) && (podswietl==0)) MenuPaint();
   \                     ??Number_Event_4:
   \   00000154   002D               CMP      R5,#+0
   \   00000156   05D4               BMI      ??Number_Event_6
   \   00000158   402D               CMP      R5,#+64
   \   0000015A   03DA               BGE      ??Number_Event_6
   \   0000015C   002F               CMP      R7,#+0
   \   0000015E   01D1               BNE      ??Number_Event_6
   \   00000160   ........           BL       MenuPaint
   1737          
   1738           
   1739          
   1740              return ans;
   \                     ??Number_Event_6:
   \   00000164   0298               LDR      R0,[SP, #+8]
   \   00000166   05B0               ADD      SP,SP,#+20
   \   00000168   F0BC               POP      {R4-R7}
   \   0000016A   02BC               POP      {R1}
   \   0000016C   0847               BX       R1               ;; return
   \                     ??Number_Event_2:
   \   0000016E   0228               CMP      R0,#+2
   \   00000170   F0DB               BLT      ??Number_Event_4
   \   00000172   CDE7               B        ??Number_Event_5
   1741            
   1742              
   1743          }//_______________________ Koniec funkcji List_Event __________________________
   1744          
   1745          
   1746          
   1747          
   1748          
   1749          
   1750          
   1751          //*-----------------------------------------------------------------------------
   1752          //* Nazwa funkcji :    Message_Paint
   1753          //* Funkcja wiadomosci
   1754          //*-----------------------------------------------------------------------------
   1755          //* algin    - wyrównanie tekstu
   1756          //* p1..p3   -   napisy kolejnych lini
   1757          
   1758          //*-----------------------------------------------------------------------------
   1759          extern  char g_Message;

   \                                 In section Debug.txt, align 4, keep-with-next
   1760          void Message_Paint(char algin, char p1[15], char p2[15], char p3[15],char p4[15],char p5[15])
   1761          {
   \                     Message_Paint:
   \   00000000   FEB5               PUSH     {R1-R7,LR}
   \   00000002   364C               LDR      R4,??Message_Paint_0  ;; 0xfffffc00
   \   00000004   A544               ADD      SP,SP,R4
   \   00000006   0400               MOVS     R4,R0
   1762            g_Message=1;
   \   00000008   3548               LDR      R0,??Message_Paint_0+0x4  ;; g_Message
   \   0000000A   0121               MOVS     R1,#+1
   \   0000000C   0170               STRB     R1,[R0, #+0]
   1763          
   1764            char ekran_tab[8][128] = {
   1765                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,1,253,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,229,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,253,1,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1766                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,248,12,244,244,244,244,244,244,244,244,244,244,12,248,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1767                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,255,0,255,255,255,255,255,255,255,255,255,255,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1768                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,255,0,255,255,199,187,187,187,187,187,199,255,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1769                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,255,0,255,255,221,237,245,249,245,237,221,255,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1770                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,255,0,255,255,255,255,255,255,255,255,255,255,0,255,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1771                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,63,96,95,95,95,95,95,95,95,95,95,95,96,63,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1772                            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,128,191,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,167,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,191,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
   1773                            };
   \   0000000E   6846               MOV      R0,SP
   \   00000010   3449               LDR      R1,??Message_Paint_0+0x8  ;; `?<Constant {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `
   \   00000012   8022               MOVS     R2,#+128
   \   00000014   D200               LSLS     R2,R2,#+3        ;; #+1024
   \   00000016   ........           BL       __aeabi_memcpy4
   1774              
   1775              CopyToCanvas(ekran_tab);
   \   0000001A   6D46               MOV      R5,SP
   \   0000001C   324E               LDR      R6,??Message_Paint_0+0xC  ;; LCD_Canvas
   \   0000001E   0827               MOVS     R7,#+8
   \                     ??Message_Paint_1:
   \   00000020   8022               MOVS     R2,#+128
   \   00000022   2900               MOVS     R1,R5
   \   00000024   3000               MOVS     R0,R6
   \   00000026   ........           BL       __aeabi_memcpy
   \   0000002A   8036               ADDS     R6,R6,#+128
   \   0000002C   8035               ADDS     R5,R5,#+128
   \   0000002E   7F1E               SUBS     R7,R7,#+1
   \   00000030   F6D1               BNE      ??Message_Paint_1
   1776          
   1777          
   1778              Label(p1,algin,4,90,15,56,0,127,0);      //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   00000032   82B0               SUB      SP,SP,#+8
   \   00000034   0020               MOVS     R0,#+0
   \   00000036   0090               STR      R0,[SP, #+0]
   \   00000038   7F21               MOVS     R1,#+127
   \   0000003A   03B4               PUSH     {R0,R1}
   \   0000003C   3821               MOVS     R1,#+56
   \   0000003E   0F20               MOVS     R0,#+15
   \   00000040   03B4               PUSH     {R0,R1}
   \   00000042   5A23               MOVS     R3,#+90
   \   00000044   0422               MOVS     R2,#+4
   \   00000046   2100               MOVS     R1,R4
   \   00000048   FFA8               ADD      R0,SP,#+1020
   \   0000004A   C069               LDR      R0,[R0, #+28]
   \   0000004C   ........           BL       Label
   \   00000050   06B0               ADD      SP,SP,#+24
   1779              Label(p2,algin,4,90-9,15,56,0,127,0);    //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   00000052   82B0               SUB      SP,SP,#+8
   \   00000054   0020               MOVS     R0,#+0
   \   00000056   0090               STR      R0,[SP, #+0]
   \   00000058   7F21               MOVS     R1,#+127
   \   0000005A   03B4               PUSH     {R0,R1}
   \   0000005C   3821               MOVS     R1,#+56
   \   0000005E   0F20               MOVS     R0,#+15
   \   00000060   03B4               PUSH     {R0,R1}
   \   00000062   5123               MOVS     R3,#+81
   \   00000064   0422               MOVS     R2,#+4
   \   00000066   2100               MOVS     R1,R4
   \   00000068   FFA8               ADD      R0,SP,#+1020
   \   0000006A   006A               LDR      R0,[R0, #+32]
   \   0000006C   ........           BL       Label
   \   00000070   06B0               ADD      SP,SP,#+24
   1780              Label(p3,algin,4,90-18,15,56,0,127,0);    //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   00000072   82B0               SUB      SP,SP,#+8
   \   00000074   0020               MOVS     R0,#+0
   \   00000076   0090               STR      R0,[SP, #+0]
   \   00000078   7F21               MOVS     R1,#+127
   \   0000007A   03B4               PUSH     {R0,R1}
   \   0000007C   3821               MOVS     R1,#+56
   \   0000007E   0F20               MOVS     R0,#+15
   \   00000080   03B4               PUSH     {R0,R1}
   \   00000082   4823               MOVS     R3,#+72
   \   00000084   0422               MOVS     R2,#+4
   \   00000086   2100               MOVS     R1,R4
   \   00000088   FFA8               ADD      R0,SP,#+1020
   \   0000008A   406A               LDR      R0,[R0, #+36]
   \   0000008C   ........           BL       Label
   \   00000090   06B0               ADD      SP,SP,#+24
   1781              Label(p4,algin,4,90-27,15,56,0,127,0);    //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   00000092   82B0               SUB      SP,SP,#+8
   \   00000094   0020               MOVS     R0,#+0
   \   00000096   0090               STR      R0,[SP, #+0]
   \   00000098   7F21               MOVS     R1,#+127
   \   0000009A   03B4               PUSH     {R0,R1}
   \   0000009C   3821               MOVS     R1,#+56
   \   0000009E   0F20               MOVS     R0,#+15
   \   000000A0   03B4               PUSH     {R0,R1}
   \   000000A2   3F23               MOVS     R3,#+63
   \   000000A4   0422               MOVS     R2,#+4
   \   000000A6   2100               MOVS     R1,R4
   \   000000A8   FFA8               ADD      R0,SP,#+1020
   \   000000AA   C06B               LDR      R0,[R0, #+60]
   \   000000AC   ........           BL       Label
   \   000000B0   06B0               ADD      SP,SP,#+24
   1782              Label(p5,algin,4,90-36,15,56,0,127,0);    //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, char negatyw) 
   \   000000B2   82B0               SUB      SP,SP,#+8
   \   000000B4   0020               MOVS     R0,#+0
   \   000000B6   0090               STR      R0,[SP, #+0]
   \   000000B8   7F21               MOVS     R1,#+127
   \   000000BA   03B4               PUSH     {R0,R1}
   \   000000BC   3821               MOVS     R1,#+56
   \   000000BE   0F20               MOVS     R0,#+15
   \   000000C0   03B4               PUSH     {R0,R1}
   \   000000C2   3623               MOVS     R3,#+54
   \   000000C4   0422               MOVS     R2,#+4
   \   000000C6   2100               MOVS     R1,R4
   \   000000C8   FFA8               ADD      R0,SP,#+1020
   \   000000CA   006C               LDR      R0,[R0, #+64]
   \   000000CC   ........           BL       Label
   \   000000D0   06B0               ADD      SP,SP,#+24
   1783              
   1784          }//_______________________ Koniec funkcji Mesage_Paint __________________________
   \   000000D2   0648               LDR      R0,??Message_Paint_0+0x10  ;; 0x40c
   \   000000D4   8544               ADD      SP,SP,R0
   \   000000D6   F0BC               POP      {R4-R7}
   \   000000D8   01BC               POP      {R0}
   \   000000DA   0047               BX       R0               ;; return
   \                     ??Message_Paint_0:
   \   000000DC   00FCFFFF           DC32     0xfffffc00
   \   000000E0   ........           DC32     g_Message
   \   000000E4   ........           DC32     `?<Constant {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `
   \   000000E8   ........           DC32     LCD_Canvas
   \   000000EC   0C040000           DC32     0x40c
   1785          
   1786          
   1787          
   1788          
   1789          
   1790          
   1791          
   1792          //*-----------------------------------------------------------------------------
   1793          //* Nazwa funkcji :    FloToStr
   1794          //* Funkcja konwersji zmiennej float na ³añcuch string   
   1795          //*-----------------------------------------------------------------------------
   1796          //*  Value   - zmienna typu float
   1797          //*  Vstring - tablica znaków
   1798          //*  ill     - liloœæ znaków (max=9) , ostatnia wartoœæ zapisanego ³añcucha to zawsze 0
   1799          //*  Funkcja zwraca d³ugoœæ ³añcucha
   1800          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1801          char FloToStr (float Value, char Vstring[8],char ill) 
   1802          { 
   \                     FloToStr:
   \   00000000   F2B5               PUSH     {R1,R4-R7,LR}
   \   00000002   98B0               SUB      SP,SP,#+96
   \   00000004   0500               MOVS     R5,R0
   \   00000006   1400               MOVS     R4,R2
   1803            float str_tmp[15]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};        
   \   00000008   08A8               ADD      R0,SP,#+32
   \   0000000A   3C21               MOVS     R1,#+60
   \   0000000C   ........           BL       __aeabi_memclr4
   1804             int min;
   1805             ill-=1;
   \   00000010   6846               MOV      R0,SP
   \   00000012   611E               SUBS     R1,R4,#+1
   \   00000014   0171               STRB     R1,[R0, #+4]
   1806            
   1807             for (char i=0; i<=7; i++)  Vstring[i]=0;
   \   00000016   0821               MOVS     R1,#+8
   \   00000018   1898               LDR      R0,[SP, #+96]
   \   0000001A   ........           BL       __aeabi_memclr
   1808             for (char i=0; i<=14; i++)  str_tmp[i]=0;
   \   0000001E   08A8               ADD      R0,SP,#+32
   \   00000020   0F21               MOVS     R1,#+15
   \   00000022   0022               MOVS     R2,#+0
   \                     ??FloToStr_0:
   \   00000024   0260               STR      R2,[R0, #+0]
   \   00000026   001D               ADDS     R0,R0,#+4
   \   00000028   491E               SUBS     R1,R1,#+1
   \   0000002A   FBD1               BNE      ??FloToStr_0
   \   0000002C   0292               STR      R2,[SP, #+8]
   1809             
   1810             min=0;
   1811             if (Value<0)
   \   0000002E   2800               MOVS     R0,R5
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   ........           BL       __aeabi_cfcmple
   \   00000036   0BD2               BCS      ??FloToStr_1
   1812             {
   1813               Value=Value*(-1); 
   \   00000038   1A48               LDR      R0,??FloToStr_2  ;; 0xbf800000
   \   0000003A   2900               MOVS     R1,R5
   \   0000003C   ........           BL       __aeabi_fmul
   \   00000040   0500               MOVS     R5,R0
   1814               min=1;
   \   00000042   0120               MOVS     R0,#+1
   \   00000044   0290               STR      R0,[SP, #+8]
   1815               ill-=1;
   \   00000046   6846               MOV      R0,SP
   \   00000048   6946               MOV      R1,SP
   \   0000004A   0979               LDRB     R1,[R1, #+4]
   \   0000004C   491E               SUBS     R1,R1,#+1
   \   0000004E   0171               STRB     R1,[R0, #+4]
   1816             }
   1817             
   1818           
   1819             int E_tmp=0;
   \                     ??FloToStr_1:
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   0090               STR      R0,[SP, #+0]
   1820             int ill_tmp=0;
   \   00000054   0024               MOVS     R4,#+0
   1821             int ill_cor=0;
   \   00000056   0390               STR      R0,[SP, #+12]
   1822             
   1823             
   1824             if (Value==0)
   \   00000058   2800               MOVS     R0,R5
   \   0000005A   2100               MOVS     R1,R4
   \   0000005C   ........           BL       __aeabi_cfcmpeq
   \   00000060   05D1               BNE      ??FloToStr_3
   1825             {
   1826               Vstring[0]=48;
   \   00000062   1898               LDR      R0,[SP, #+96]
   \   00000064   3021               MOVS     R1,#+48
   \   00000066   0170               STRB     R1,[R0, #+0]
   1827               ill_tmp=1;
   \   00000068   0124               MOVS     R4,#+1
   \   0000006A   00F0F5FC           BL       ??FloToStr_4
   1828             }
   1829             else
   1830             {
   1831              if (Value>=1000000000000) 
   \                     ??FloToStr_3:
   \   0000006E   0E49               LDR      R1,??FloToStr_2+0x4  ;; 0x5368d4a5
   \   00000070   ........           BL       __aeabi_cfrcmple
   \   00000074   1AD8               BHI      ??FloToStr_5
   1832              {
   1833                 Vstring[0]=0x4C; //L
   \   00000076   1898               LDR      R0,[SP, #+96]
   \   00000078   4C21               MOVS     R1,#+76
   \   0000007A   0170               STRB     R1,[R0, #+0]
   1834                 Vstring[1]=0x4F; //O
   \   0000007C   1898               LDR      R0,[SP, #+96]
   \   0000007E   4F21               MOVS     R1,#+79
   \   00000080   4170               STRB     R1,[R0, #+1]
   1835                 Vstring[2]=0x4E; //N
   \   00000082   1898               LDR      R0,[SP, #+96]
   \   00000084   4E21               MOVS     R1,#+78
   \   00000086   8170               STRB     R1,[R0, #+2]
   1836                 Vstring[3]=0x47; //G
   \   00000088   1898               LDR      R0,[SP, #+96]
   \   0000008A   4721               MOVS     R1,#+71
   \   0000008C   C170               STRB     R1,[R0, #+3]
   1837                 Vstring[4]=0; Vstring[5]=0; Vstring[6]=0; Vstring[7]=0;
   \   0000008E   1898               LDR      R0,[SP, #+96]
   \   00000090   0471               STRB     R4,[R0, #+4]
   \   00000092   1898               LDR      R0,[SP, #+96]
   \   00000094   4471               STRB     R4,[R0, #+5]
   \   00000096   1898               LDR      R0,[SP, #+96]
   \   00000098   8471               STRB     R4,[R0, #+6]
   \   0000009A   1898               LDR      R0,[SP, #+96]
   \   0000009C   C471               STRB     R4,[R0, #+7]
   \   0000009E   00F0DBFC           BL       ??FloToStr_4
   \   000000A2   C046               Nop      
   \                     ??FloToStr_2:
   \   000000A4   000080BF           DC32     0xbf800000
   \   000000A8   A5D46853           DC32     0x5368d4a5
   1838              }  
   \                     ??FloToStr_5:
   \   000000AC   D348               LDR      R0,??FloToStr_6  ;; 0x49742400
   \   000000AE   2900               MOVS     R1,R5
   \   000000B0   ........           BL       __aeabi_fmul
   \   000000B4   ........           BL       __aeabi_f2lz
   \   000000B8   06AA               ADD      R2,SP,#+24
   \   000000BA   03C2               STM      R2!,{R0,R1}
   1839              else 
   1840              {  
   1841                long long int __Value=(long long int)(Value*1000000);
   1842                long long int __ValueRST=__Value;
   \   000000BC   06A8               ADD      R0,SP,#+24
   \   000000BE   C0C8               LDM      R0!,{R6,R7}
   \   000000C0   04AA               ADD      R2,SP,#+16
   \   000000C2   0020               MOVS     R0,#+0
   \   000000C4   0100               MOVS     R1,R0
   \   000000C6   03C2               STM      R2!,{R0,R1}
   1843                long long int NastDiel=0;
   1844               
   1845                 if (Value>=100000000000 ) {if (E_tmp==0) E_tmp=12;     if (ill_tmp<ill)                   { ill_tmp++;  str_tmp[ill_tmp]=48+__Value    / 100000000000000000; __ValueRST=__Value    % 100000000000000000; }};
   \   000000C8   2800               MOVS     R0,R5
   \   000000CA   CD49               LDR      R1,??FloToStr_6+0x4  ;; 0x51ba43b7
   \   000000CC   ........           BL       __aeabi_cfrcmple
   \   000000D0   1AD8               BHI      ??FloToStr_7
   \   000000D2   0C20               MOVS     R0,#+12
   \   000000D4   0090               STR      R0,[SP, #+0]
   \   000000D6   6846               MOV      R0,SP
   \   000000D8   0079               LDRB     R0,[R0, #+4]
   \   000000DA   0028               CMP      R0,#+0
   \   000000DC   14D0               BEQ      ??FloToStr_7
   \   000000DE   0124               MOVS     R4,#+1
   \   000000E0   06A8               ADD      R0,SP,#+24
   \   000000E2   03C8               LDM      R0!,{R0,R1}
   \   000000E4   C74A               LDR      R2,??FloToStr_6+0x8  ;; 0x5d8a0000
   \   000000E6   C84B               LDR      R3,??FloToStr_6+0xC  ;; 0x1634578
   \   000000E8   ........           BL       __aeabi_ldivmod
   \   000000EC   0022               MOVS     R2,#+0
   \   000000EE   3030               ADDS     R0,R0,#+48
   \   000000F0   5141               ADCS     R1,R1,R2
   \   000000F2   ........           BL       __aeabi_l2f
   \   000000F6   0990               STR      R0,[SP, #+36]
   \   000000F8   06A8               ADD      R0,SP,#+24
   \   000000FA   03C8               LDM      R0!,{R0,R1}
   \   000000FC   C14A               LDR      R2,??FloToStr_6+0x8  ;; 0x5d8a0000
   \   000000FE   C24B               LDR      R3,??FloToStr_6+0xC  ;; 0x1634578
   \   00000100   ........           BL       __aeabi_ldivmod
   \   00000104   1600               MOVS     R6,R2
   \   00000106   1F00               MOVS     R7,R3
   1846                 if (Value>=10000000000  ) {if (E_tmp==0) E_tmp=11;     if (ill_tmp<ill)                   { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 10000000000000000 ; __ValueRST=__ValueRST % 10000000000000000 ; }};
   \                     ??FloToStr_7:
   \   00000108   2800               MOVS     R0,R5
   \   0000010A   C049               LDR      R1,??FloToStr_6+0x10  ;; 0x501502f9
   \   0000010C   ........           BL       __aeabi_cfrcmple
   \   00000110   1FD8               BHI      ??FloToStr_8
   \   00000112   0098               LDR      R0,[SP, #+0]
   \   00000114   0028               CMP      R0,#+0
   \   00000116   01D1               BNE      ??FloToStr_9
   \   00000118   0B20               MOVS     R0,#+11
   \   0000011A   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_9:
   \   0000011C   6846               MOV      R0,SP
   \   0000011E   0079               LDRB     R0,[R0, #+4]
   \   00000120   8442               CMP      R4,R0
   \   00000122   16DA               BGE      ??FloToStr_8
   \   00000124   641C               ADDS     R4,R4,#+1
   \   00000126   3000               MOVS     R0,R6
   \   00000128   3900               MOVS     R1,R7
   \   0000012A   B94A               LDR      R2,??FloToStr_6+0x14  ;; 0x6fc10000
   \   0000012C   B94B               LDR      R3,??FloToStr_6+0x18  ;; 0x2386f2
   \   0000012E   ........           BL       __aeabi_ldivmod
   \   00000132   0022               MOVS     R2,#+0
   \   00000134   3030               ADDS     R0,R0,#+48
   \   00000136   5141               ADCS     R1,R1,R2
   \   00000138   ........           BL       __aeabi_l2f
   \   0000013C   A100               LSLS     R1,R4,#+2
   \   0000013E   08AA               ADD      R2,SP,#+32
   \   00000140   5050               STR      R0,[R2, R1]
   \   00000142   3000               MOVS     R0,R6
   \   00000144   3900               MOVS     R1,R7
   \   00000146   B24A               LDR      R2,??FloToStr_6+0x14  ;; 0x6fc10000
   \   00000148   B24B               LDR      R3,??FloToStr_6+0x18  ;; 0x2386f2
   \   0000014A   ........           BL       __aeabi_ldivmod
   \   0000014E   1600               MOVS     R6,R2
   \   00000150   1F00               MOVS     R7,R3
   1847                 if (Value>=1000000000   ) {if (E_tmp==0) E_tmp=10;     if (ill_tmp<ill)                   { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 1000000000000000  ; __ValueRST=__ValueRST % 1000000000000000  ; }};
   \                     ??FloToStr_8:
   \   00000152   2800               MOVS     R0,R5
   \   00000154   B049               LDR      R1,??FloToStr_6+0x1C  ;; 0x4e6e6b28
   \   00000156   ........           BL       __aeabi_cfrcmple
   \   0000015A   1FD8               BHI      ??FloToStr_10
   \   0000015C   0098               LDR      R0,[SP, #+0]
   \   0000015E   0028               CMP      R0,#+0
   \   00000160   01D1               BNE      ??FloToStr_11
   \   00000162   0A20               MOVS     R0,#+10
   \   00000164   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_11:
   \   00000166   6846               MOV      R0,SP
   \   00000168   0079               LDRB     R0,[R0, #+4]
   \   0000016A   8442               CMP      R4,R0
   \   0000016C   16DA               BGE      ??FloToStr_10
   \   0000016E   641C               ADDS     R4,R4,#+1
   \   00000170   3000               MOVS     R0,R6
   \   00000172   3900               MOVS     R1,R7
   \   00000174   A94A               LDR      R2,??FloToStr_6+0x20  ;; 0xa4c68000
   \   00000176   AA4B               LDR      R3,??FloToStr_6+0x24  ;; 0x38d7e
   \   00000178   ........           BL       __aeabi_ldivmod
   \   0000017C   0022               MOVS     R2,#+0
   \   0000017E   3030               ADDS     R0,R0,#+48
   \   00000180   5141               ADCS     R1,R1,R2
   \   00000182   ........           BL       __aeabi_l2f
   \   00000186   A100               LSLS     R1,R4,#+2
   \   00000188   08AA               ADD      R2,SP,#+32
   \   0000018A   5050               STR      R0,[R2, R1]
   \   0000018C   3000               MOVS     R0,R6
   \   0000018E   3900               MOVS     R1,R7
   \   00000190   A24A               LDR      R2,??FloToStr_6+0x20  ;; 0xa4c68000
   \   00000192   A34B               LDR      R3,??FloToStr_6+0x24  ;; 0x38d7e
   \   00000194   ........           BL       __aeabi_ldivmod
   \   00000198   1600               MOVS     R6,R2
   \   0000019A   1F00               MOVS     R7,R3
   1848                 if (Value>=100000000    ) {if (E_tmp==0) E_tmp=9;      if (ill_tmp<ill)                   { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 100000000000000   ; __ValueRST=__ValueRST % 100000000000000   ; }};
   \                     ??FloToStr_10:
   \   0000019C   2800               MOVS     R0,R5
   \   0000019E   A149               LDR      R1,??FloToStr_6+0x28  ;; 0x4cbebc20
   \   000001A0   ........           BL       __aeabi_cfrcmple
   \   000001A4   1FD8               BHI      ??FloToStr_12
   \   000001A6   0098               LDR      R0,[SP, #+0]
   \   000001A8   0028               CMP      R0,#+0
   \   000001AA   01D1               BNE      ??FloToStr_13
   \   000001AC   0920               MOVS     R0,#+9
   \   000001AE   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_13:
   \   000001B0   6846               MOV      R0,SP
   \   000001B2   0079               LDRB     R0,[R0, #+4]
   \   000001B4   8442               CMP      R4,R0
   \   000001B6   16DA               BGE      ??FloToStr_12
   \   000001B8   641C               ADDS     R4,R4,#+1
   \   000001BA   3000               MOVS     R0,R6
   \   000001BC   3900               MOVS     R1,R7
   \   000001BE   9A4A               LDR      R2,??FloToStr_6+0x2C  ;; 0x107a4000
   \   000001C0   9A4B               LDR      R3,??FloToStr_6+0x30  ;; 0x5af3
   \   000001C2   ........           BL       __aeabi_ldivmod
   \   000001C6   0022               MOVS     R2,#+0
   \   000001C8   3030               ADDS     R0,R0,#+48
   \   000001CA   5141               ADCS     R1,R1,R2
   \   000001CC   ........           BL       __aeabi_l2f
   \   000001D0   A100               LSLS     R1,R4,#+2
   \   000001D2   08AA               ADD      R2,SP,#+32
   \   000001D4   5050               STR      R0,[R2, R1]
   \   000001D6   3000               MOVS     R0,R6
   \   000001D8   3900               MOVS     R1,R7
   \   000001DA   934A               LDR      R2,??FloToStr_6+0x2C  ;; 0x107a4000
   \   000001DC   934B               LDR      R3,??FloToStr_6+0x30  ;; 0x5af3
   \   000001DE   ........           BL       __aeabi_ldivmod
   \   000001E2   1600               MOVS     R6,R2
   \   000001E4   1F00               MOVS     R7,R3
   1849                 if (Value>=10000000     ) {if (E_tmp==0) E_tmp=8;      if (ill_tmp<ill)                   { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 10000000000000    ; __ValueRST=__ValueRST % 10000000000000    ; }};
   \                     ??FloToStr_12:
   \   000001E6   2800               MOVS     R0,R5
   \   000001E8   9149               LDR      R1,??FloToStr_6+0x34  ;; 0x4b189680
   \   000001EA   ........           BL       __aeabi_cfrcmple
   \   000001EE   1FD8               BHI      ??FloToStr_14
   \   000001F0   0098               LDR      R0,[SP, #+0]
   \   000001F2   0028               CMP      R0,#+0
   \   000001F4   01D1               BNE      ??FloToStr_15
   \   000001F6   0820               MOVS     R0,#+8
   \   000001F8   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_15:
   \   000001FA   6846               MOV      R0,SP
   \   000001FC   0079               LDRB     R0,[R0, #+4]
   \   000001FE   8442               CMP      R4,R0
   \   00000200   16DA               BGE      ??FloToStr_14
   \   00000202   641C               ADDS     R4,R4,#+1
   \   00000204   3000               MOVS     R0,R6
   \   00000206   3900               MOVS     R1,R7
   \   00000208   8A4A               LDR      R2,??FloToStr_6+0x38  ;; 0x4e72a000
   \   0000020A   8B4B               LDR      R3,??FloToStr_6+0x3C  ;; 0x918
   \   0000020C   ........           BL       __aeabi_ldivmod
   \   00000210   0022               MOVS     R2,#+0
   \   00000212   3030               ADDS     R0,R0,#+48
   \   00000214   5141               ADCS     R1,R1,R2
   \   00000216   ........           BL       __aeabi_l2f
   \   0000021A   A100               LSLS     R1,R4,#+2
   \   0000021C   08AA               ADD      R2,SP,#+32
   \   0000021E   5050               STR      R0,[R2, R1]
   \   00000220   3000               MOVS     R0,R6
   \   00000222   3900               MOVS     R1,R7
   \   00000224   834A               LDR      R2,??FloToStr_6+0x38  ;; 0x4e72a000
   \   00000226   844B               LDR      R3,??FloToStr_6+0x3C  ;; 0x918
   \   00000228   ........           BL       __aeabi_ldivmod
   \   0000022C   1600               MOVS     R6,R2
   \   0000022E   1F00               MOVS     R7,R3
   1850                 if (Value>=1000000      ) {if (E_tmp==0) E_tmp=7;      if (ill_tmp<ill)                   { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 1000000000000     ; __ValueRST=__ValueRST % 1000000000000     ; NastDiel=100000000000; }};
   \                     ??FloToStr_14:
   \   00000230   2800               MOVS     R0,R5
   \   00000232   7249               LDR      R1,??FloToStr_6  ;; 0x49742400
   \   00000234   ........           BL       __aeabi_cfrcmple
   \   00000238   23D8               BHI      ??FloToStr_16
   \   0000023A   0098               LDR      R0,[SP, #+0]
   \   0000023C   0028               CMP      R0,#+0
   \   0000023E   01D1               BNE      ??FloToStr_17
   \   00000240   0720               MOVS     R0,#+7
   \   00000242   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_17:
   \   00000244   6846               MOV      R0,SP
   \   00000246   0079               LDRB     R0,[R0, #+4]
   \   00000248   8442               CMP      R4,R0
   \   0000024A   1ADA               BGE      ??FloToStr_16
   \   0000024C   641C               ADDS     R4,R4,#+1
   \   0000024E   3000               MOVS     R0,R6
   \   00000250   3900               MOVS     R1,R7
   \   00000252   7A4A               LDR      R2,??FloToStr_6+0x40  ;; 0xd4a51000
   \   00000254   E823               MOVS     R3,#+232
   \   00000256   ........           BL       __aeabi_ldivmod
   \   0000025A   0022               MOVS     R2,#+0
   \   0000025C   3030               ADDS     R0,R0,#+48
   \   0000025E   5141               ADCS     R1,R1,R2
   \   00000260   ........           BL       __aeabi_l2f
   \   00000264   A100               LSLS     R1,R4,#+2
   \   00000266   08AA               ADD      R2,SP,#+32
   \   00000268   5050               STR      R0,[R2, R1]
   \   0000026A   3000               MOVS     R0,R6
   \   0000026C   3900               MOVS     R1,R7
   \   0000026E   734A               LDR      R2,??FloToStr_6+0x40  ;; 0xd4a51000
   \   00000270   E823               MOVS     R3,#+232
   \   00000272   ........           BL       __aeabi_ldivmod
   \   00000276   1600               MOVS     R6,R2
   \   00000278   1F00               MOVS     R7,R3
   \   0000027A   04AA               ADD      R2,SP,#+16
   \   0000027C   7048               LDR      R0,??FloToStr_6+0x44  ;; 0x4876e800
   \   0000027E   1721               MOVS     R1,#+23
   \   00000280   03C2               STM      R2!,{R0,R1}
   1851                 if (Value>=100000       ) {if (E_tmp==0) E_tmp=6;      if (ill_tmp<ill)                   { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 100000000000      ; __ValueRST=__ValueRST % 100000000000      ; NastDiel=10000000000 ; }};
   \                     ??FloToStr_16:
   \   00000282   2800               MOVS     R0,R5
   \   00000284   6F49               LDR      R1,??FloToStr_6+0x48  ;; 0x47c35000
   \   00000286   ........           BL       __aeabi_cfrcmple
   \   0000028A   23D8               BHI      ??FloToStr_18
   \   0000028C   0098               LDR      R0,[SP, #+0]
   \   0000028E   0028               CMP      R0,#+0
   \   00000290   01D1               BNE      ??FloToStr_19
   \   00000292   0620               MOVS     R0,#+6
   \   00000294   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_19:
   \   00000296   6846               MOV      R0,SP
   \   00000298   0079               LDRB     R0,[R0, #+4]
   \   0000029A   8442               CMP      R4,R0
   \   0000029C   1ADA               BGE      ??FloToStr_18
   \   0000029E   641C               ADDS     R4,R4,#+1
   \   000002A0   3000               MOVS     R0,R6
   \   000002A2   3900               MOVS     R1,R7
   \   000002A4   664A               LDR      R2,??FloToStr_6+0x44  ;; 0x4876e800
   \   000002A6   1723               MOVS     R3,#+23
   \   000002A8   ........           BL       __aeabi_ldivmod
   \   000002AC   0022               MOVS     R2,#+0
   \   000002AE   3030               ADDS     R0,R0,#+48
   \   000002B0   5141               ADCS     R1,R1,R2
   \   000002B2   ........           BL       __aeabi_l2f
   \   000002B6   A100               LSLS     R1,R4,#+2
   \   000002B8   08AA               ADD      R2,SP,#+32
   \   000002BA   5050               STR      R0,[R2, R1]
   \   000002BC   3000               MOVS     R0,R6
   \   000002BE   3900               MOVS     R1,R7
   \   000002C0   5F4A               LDR      R2,??FloToStr_6+0x44  ;; 0x4876e800
   \   000002C2   1723               MOVS     R3,#+23
   \   000002C4   ........           BL       __aeabi_ldivmod
   \   000002C8   1600               MOVS     R6,R2
   \   000002CA   1F00               MOVS     R7,R3
   \   000002CC   04AA               ADD      R2,SP,#+16
   \   000002CE   5E48               LDR      R0,??FloToStr_6+0x4C  ;; 0x540be400
   \   000002D0   0221               MOVS     R1,#+2
   \   000002D2   03C2               STM      R2!,{R0,R1}
   1852                 if (Value>=10000        ) {if (E_tmp==0) E_tmp=5;      if (ill_tmp<ill) { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 10000000000       ; __ValueRST=__ValueRST % 10000000000       ; NastDiel=1000000000  ; }};
   \                     ??FloToStr_18:
   \   000002D4   2800               MOVS     R0,R5
   \   000002D6   5D49               LDR      R1,??FloToStr_6+0x50  ;; 0x461c4000
   \   000002D8   ........           BL       __aeabi_cfrcmple
   \   000002DC   23D8               BHI      ??FloToStr_20
   \   000002DE   0098               LDR      R0,[SP, #+0]
   \   000002E0   0028               CMP      R0,#+0
   \   000002E2   01D1               BNE      ??FloToStr_21
   \   000002E4   0520               MOVS     R0,#+5
   \   000002E6   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_21:
   \   000002E8   6846               MOV      R0,SP
   \   000002EA   0079               LDRB     R0,[R0, #+4]
   \   000002EC   8442               CMP      R4,R0
   \   000002EE   1ADA               BGE      ??FloToStr_20
   \   000002F0   641C               ADDS     R4,R4,#+1
   \   000002F2   3000               MOVS     R0,R6
   \   000002F4   3900               MOVS     R1,R7
   \   000002F6   544A               LDR      R2,??FloToStr_6+0x4C  ;; 0x540be400
   \   000002F8   0223               MOVS     R3,#+2
   \   000002FA   ........           BL       __aeabi_ldivmod
   \   000002FE   0022               MOVS     R2,#+0
   \   00000300   3030               ADDS     R0,R0,#+48
   \   00000302   5141               ADCS     R1,R1,R2
   \   00000304   ........           BL       __aeabi_l2f
   \   00000308   A100               LSLS     R1,R4,#+2
   \   0000030A   08AA               ADD      R2,SP,#+32
   \   0000030C   5050               STR      R0,[R2, R1]
   \   0000030E   3000               MOVS     R0,R6
   \   00000310   3900               MOVS     R1,R7
   \   00000312   4D4A               LDR      R2,??FloToStr_6+0x4C  ;; 0x540be400
   \   00000314   0223               MOVS     R3,#+2
   \   00000316   ........           BL       __aeabi_ldivmod
   \   0000031A   1600               MOVS     R6,R2
   \   0000031C   1F00               MOVS     R7,R3
   \   0000031E   04AA               ADD      R2,SP,#+16
   \   00000320   4B48               LDR      R0,??FloToStr_6+0x54  ;; 0x3b9aca00
   \   00000322   0021               MOVS     R1,#+0
   \   00000324   03C2               STM      R2!,{R0,R1}
   1853                 if (Value>=1000         ) {if (E_tmp==0) E_tmp=4;      if (ill_tmp<ill) { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 1000000000        ; __ValueRST=__ValueRST % 1000000000        ; NastDiel=100000000   ; }};
   \                     ??FloToStr_20:
   \   00000326   2800               MOVS     R0,R5
   \   00000328   4A49               LDR      R1,??FloToStr_6+0x58  ;; 0x447a0000
   \   0000032A   ........           BL       __aeabi_cfrcmple
   \   0000032E   23D8               BHI      ??FloToStr_22
   \   00000330   0098               LDR      R0,[SP, #+0]
   \   00000332   0028               CMP      R0,#+0
   \   00000334   01D1               BNE      ??FloToStr_23
   \   00000336   0420               MOVS     R0,#+4
   \   00000338   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_23:
   \   0000033A   6846               MOV      R0,SP
   \   0000033C   0079               LDRB     R0,[R0, #+4]
   \   0000033E   8442               CMP      R4,R0
   \   00000340   1ADA               BGE      ??FloToStr_22
   \   00000342   641C               ADDS     R4,R4,#+1
   \   00000344   3000               MOVS     R0,R6
   \   00000346   3900               MOVS     R1,R7
   \   00000348   414A               LDR      R2,??FloToStr_6+0x54  ;; 0x3b9aca00
   \   0000034A   0023               MOVS     R3,#+0
   \   0000034C   ........           BL       __aeabi_ldivmod
   \   00000350   0022               MOVS     R2,#+0
   \   00000352   3030               ADDS     R0,R0,#+48
   \   00000354   5141               ADCS     R1,R1,R2
   \   00000356   ........           BL       __aeabi_l2f
   \   0000035A   A100               LSLS     R1,R4,#+2
   \   0000035C   08AA               ADD      R2,SP,#+32
   \   0000035E   5050               STR      R0,[R2, R1]
   \   00000360   3000               MOVS     R0,R6
   \   00000362   3900               MOVS     R1,R7
   \   00000364   3A4A               LDR      R2,??FloToStr_6+0x54  ;; 0x3b9aca00
   \   00000366   0023               MOVS     R3,#+0
   \   00000368   ........           BL       __aeabi_ldivmod
   \   0000036C   1600               MOVS     R6,R2
   \   0000036E   1F00               MOVS     R7,R3
   \   00000370   04AA               ADD      R2,SP,#+16
   \   00000372   3948               LDR      R0,??FloToStr_6+0x5C  ;; 0x5f5e100
   \   00000374   0021               MOVS     R1,#+0
   \   00000376   03C2               STM      R2!,{R0,R1}
   1854                 if (Value>=100          ) {if (E_tmp==0) E_tmp=3;      if (ill_tmp<ill) { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 100000000         ; __ValueRST=__ValueRST % 100000000         ; NastDiel=10000000    ; }};
   \                     ??FloToStr_22:
   \   00000378   2800               MOVS     R0,R5
   \   0000037A   3849               LDR      R1,??FloToStr_6+0x60  ;; 0x42c80000
   \   0000037C   ........           BL       __aeabi_cfrcmple
   \   00000380   23D8               BHI      ??FloToStr_24
   \   00000382   0098               LDR      R0,[SP, #+0]
   \   00000384   0028               CMP      R0,#+0
   \   00000386   01D1               BNE      ??FloToStr_25
   \   00000388   0320               MOVS     R0,#+3
   \   0000038A   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_25:
   \   0000038C   6846               MOV      R0,SP
   \   0000038E   0079               LDRB     R0,[R0, #+4]
   \   00000390   8442               CMP      R4,R0
   \   00000392   1ADA               BGE      ??FloToStr_24
   \   00000394   641C               ADDS     R4,R4,#+1
   \   00000396   3000               MOVS     R0,R6
   \   00000398   3900               MOVS     R1,R7
   \   0000039A   2F4A               LDR      R2,??FloToStr_6+0x5C  ;; 0x5f5e100
   \   0000039C   0023               MOVS     R3,#+0
   \   0000039E   ........           BL       __aeabi_ldivmod
   \   000003A2   0022               MOVS     R2,#+0
   \   000003A4   3030               ADDS     R0,R0,#+48
   \   000003A6   5141               ADCS     R1,R1,R2
   \   000003A8   ........           BL       __aeabi_l2f
   \   000003AC   A100               LSLS     R1,R4,#+2
   \   000003AE   08AA               ADD      R2,SP,#+32
   \   000003B0   5050               STR      R0,[R2, R1]
   \   000003B2   3000               MOVS     R0,R6
   \   000003B4   3900               MOVS     R1,R7
   \   000003B6   284A               LDR      R2,??FloToStr_6+0x5C  ;; 0x5f5e100
   \   000003B8   0023               MOVS     R3,#+0
   \   000003BA   ........           BL       __aeabi_ldivmod
   \   000003BE   1600               MOVS     R6,R2
   \   000003C0   1F00               MOVS     R7,R3
   \   000003C2   04AA               ADD      R2,SP,#+16
   \   000003C4   2648               LDR      R0,??FloToStr_6+0x64  ;; 0x989680
   \   000003C6   0021               MOVS     R1,#+0
   \   000003C8   03C2               STM      R2!,{R0,R1}
   1855                 if (Value>=10           ) {if (E_tmp==0) E_tmp=2;      if (ill_tmp<ill) { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 10000000          ; __ValueRST=__ValueRST % 10000000          ; NastDiel=1000000     ; }};
   \                     ??FloToStr_24:
   \   000003CA   2800               MOVS     R0,R5
   \   000003CC   2549               LDR      R1,??FloToStr_6+0x68  ;; 0x41200000
   \   000003CE   ........           BL       __aeabi_cfrcmple
   \   000003D2   5BD8               BHI      ??FloToStr_26
   \   000003D4   0098               LDR      R0,[SP, #+0]
   \   000003D6   0028               CMP      R0,#+0
   \   000003D8   01D1               BNE      ??FloToStr_27
   \   000003DA   0220               MOVS     R0,#+2
   \   000003DC   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_27:
   \   000003DE   6846               MOV      R0,SP
   \   000003E0   0079               LDRB     R0,[R0, #+4]
   \   000003E2   8442               CMP      R4,R0
   \   000003E4   52DA               BGE      ??FloToStr_26
   \   000003E6   641C               ADDS     R4,R4,#+1
   \   000003E8   3000               MOVS     R0,R6
   \   000003EA   3900               MOVS     R1,R7
   \   000003EC   1C4A               LDR      R2,??FloToStr_6+0x64  ;; 0x989680
   \   000003EE   0023               MOVS     R3,#+0
   \   000003F0   ........           BL       __aeabi_ldivmod
   \   000003F4   0022               MOVS     R2,#+0
   \   000003F6   3030               ADDS     R0,R0,#+48
   \   000003F8   36E0               B.N      ??FloToStr_28
   \   000003FA   C046               Nop      
   \                     ??FloToStr_6:
   \   000003FC   00247449           DC32     0x49742400
   \   00000400   B743BA51           DC32     0x51ba43b7
   \   00000404   00008A5D           DC32     0x5d8a0000
   \   00000408   78456301           DC32     0x1634578
   \   0000040C   F9021550           DC32     0x501502f9
   \   00000410   0000C16F           DC32     0x6fc10000
   \   00000414   F2862300           DC32     0x2386f2
   \   00000418   286B6E4E           DC32     0x4e6e6b28
   \   0000041C   0080C6A4           DC32     0xa4c68000
   \   00000420   7E8D0300           DC32     0x38d7e
   \   00000424   20BCBE4C           DC32     0x4cbebc20
   \   00000428   00407A10           DC32     0x107a4000
   \   0000042C   F35A0000           DC32     0x5af3
   \   00000430   8096184B           DC32     0x4b189680
   \   00000434   00A0724E           DC32     0x4e72a000
   \   00000438   18090000           DC32     0x918
   \   0000043C   0010A5D4           DC32     0xd4a51000
   \   00000440   00E87648           DC32     0x4876e800
   \   00000444   0050C347           DC32     0x47c35000
   \   00000448   00E40B54           DC32     0x540be400
   \   0000044C   00401C46           DC32     0x461c4000
   \   00000450   00CA9A3B           DC32     0x3b9aca00
   \   00000454   00007A44           DC32     0x447a0000
   \   00000458   00E1F505           DC32     0x5f5e100
   \   0000045C   0000C842           DC32     0x42c80000
   \   00000460   80969800           DC32     0x989680
   \   00000464   00002041           DC32     0x41200000
   \                     ??FloToStr_28:
   \   00000468   5141               ADCS     R1,R1,R2
   \   0000046A   ........           BL       __aeabi_l2f
   \   0000046E   A100               LSLS     R1,R4,#+2
   \   00000470   08AA               ADD      R2,SP,#+32
   \   00000472   5050               STR      R0,[R2, R1]
   \   00000474   3000               MOVS     R0,R6
   \   00000476   3900               MOVS     R1,R7
   \   00000478   A24A               LDR      R2,??FloToStr_29  ;; 0x989680
   \   0000047A   0023               MOVS     R3,#+0
   \   0000047C   ........           BL       __aeabi_ldivmod
   \   00000480   1600               MOVS     R6,R2
   \   00000482   1F00               MOVS     R7,R3
   \   00000484   04AA               ADD      R2,SP,#+16
   \   00000486   A048               LDR      R0,??FloToStr_29+0x4  ;; 0xf4240
   \   00000488   0021               MOVS     R1,#+0
   \   0000048A   03C2               STM      R2!,{R0,R1}
   \                     ??FloToStr_26:
   \   0000048C   2800               MOVS     R0,R5
   \   0000048E   FE21               MOVS     R1,#+254
   \   00000490   8905               LSLS     R1,R1,#+22       ;; #+1065353216
   \   00000492   ........           BL       __aeabi_cfrcmple
   \   00000496   23D8               BHI      ??FloToStr_30
   1856                 if (Value>=1            ) {if (E_tmp==0) E_tmp=1;      if (ill_tmp<ill) { ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 1000000           ; __ValueRST=__ValueRST % 1000000           ; NastDiel=100000      ; }};
   \   00000498   0098               LDR      R0,[SP, #+0]
   \   0000049A   0028               CMP      R0,#+0
   \   0000049C   01D1               BNE      ??FloToStr_31
   \   0000049E   0120               MOVS     R0,#+1
   \   000004A0   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_31:
   \   000004A2   6846               MOV      R0,SP
   \   000004A4   0079               LDRB     R0,[R0, #+4]
   \   000004A6   8442               CMP      R4,R0
   \   000004A8   1ADA               BGE      ??FloToStr_30
   \   000004AA   641C               ADDS     R4,R4,#+1
   \   000004AC   3000               MOVS     R0,R6
   \   000004AE   3900               MOVS     R1,R7
   \   000004B0   954A               LDR      R2,??FloToStr_29+0x4  ;; 0xf4240
   \   000004B2   0023               MOVS     R3,#+0
   \   000004B4   ........           BL       __aeabi_ldivmod
   \   000004B8   0022               MOVS     R2,#+0
   \   000004BA   3030               ADDS     R0,R0,#+48
   \   000004BC   5141               ADCS     R1,R1,R2
   \   000004BE   ........           BL       __aeabi_l2f
   \   000004C2   A100               LSLS     R1,R4,#+2
   \   000004C4   08AA               ADD      R2,SP,#+32
   \   000004C6   5050               STR      R0,[R2, R1]
   \   000004C8   3000               MOVS     R0,R6
   \   000004CA   3900               MOVS     R1,R7
   \   000004CC   8E4A               LDR      R2,??FloToStr_29+0x4  ;; 0xf4240
   \   000004CE   0023               MOVS     R3,#+0
   \   000004D0   ........           BL       __aeabi_ldivmod
   \   000004D4   1600               MOVS     R6,R2
   \   000004D6   1F00               MOVS     R7,R3
   \   000004D8   04AA               ADD      R2,SP,#+16
   \   000004DA   8C48               LDR      R0,??FloToStr_29+0x8  ;; 0x186a0
   \   000004DC   0021               MOVS     R1,#+0
   \   000004DE   03C2               STM      R2!,{R0,R1}
   1857                 if (Value>=0.09999      ) {if (E_tmp==0) E_tmp=100;    if ((ill_tmp<ill)&&(__ValueRST>0)) { ill_tmp++;  str_tmp[ill_tmp]=0x2E; ill_tmp++;  str_tmp[ill_tmp]=48+__ValueRST / 100000            ; __ValueRST=__ValueRST % 100000            ; NastDiel=10000; }};
   \                     ??FloToStr_30:
   \   000004E0   2800               MOVS     R0,R5
   \   000004E2   8B49               LDR      R1,??FloToStr_29+0xC  ;; 0x3dccc78f
   \   000004E4   ........           BL       __aeabi_cfrcmple
   \   000004E8   2DD8               BHI      ??FloToStr_32
   \   000004EA   0098               LDR      R0,[SP, #+0]
   \   000004EC   0028               CMP      R0,#+0
   \   000004EE   01D1               BNE      ??FloToStr_33
   \   000004F0   6420               MOVS     R0,#+100
   \   000004F2   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_33:
   \   000004F4   6846               MOV      R0,SP
   \   000004F6   0079               LDRB     R0,[R0, #+4]
   \   000004F8   8442               CMP      R4,R0
   \   000004FA   24DA               BGE      ??FloToStr_32
   \   000004FC   002F               CMP      R7,#+0
   \   000004FE   22DB               BLT      ??FloToStr_32
   \   00000500   01DC               BGT      ??FloToStr_34
   \   00000502   012E               CMP      R6,#+1
   \   00000504   1FD3               BCC      ??FloToStr_32
   \                     ??FloToStr_34:
   \   00000506   641C               ADDS     R4,R4,#+1
   \   00000508   A000               LSLS     R0,R4,#+2
   \   0000050A   08A9               ADD      R1,SP,#+32
   \   0000050C   814A               LDR      R2,??FloToStr_29+0x10  ;; 0x42380000
   \   0000050E   0A50               STR      R2,[R1, R0]
   \   00000510   641C               ADDS     R4,R4,#+1
   \   00000512   3000               MOVS     R0,R6
   \   00000514   3900               MOVS     R1,R7
   \   00000516   7D4A               LDR      R2,??FloToStr_29+0x8  ;; 0x186a0
   \   00000518   0023               MOVS     R3,#+0
   \   0000051A   ........           BL       __aeabi_ldivmod
   \   0000051E   0022               MOVS     R2,#+0
   \   00000520   3030               ADDS     R0,R0,#+48
   \   00000522   5141               ADCS     R1,R1,R2
   \   00000524   ........           BL       __aeabi_l2f
   \   00000528   A100               LSLS     R1,R4,#+2
   \   0000052A   08AA               ADD      R2,SP,#+32
   \   0000052C   5050               STR      R0,[R2, R1]
   \   0000052E   3000               MOVS     R0,R6
   \   00000530   3900               MOVS     R1,R7
   \   00000532   764A               LDR      R2,??FloToStr_29+0x8  ;; 0x186a0
   \   00000534   0023               MOVS     R3,#+0
   \   00000536   ........           BL       __aeabi_ldivmod
   \   0000053A   1600               MOVS     R6,R2
   \   0000053C   1F00               MOVS     R7,R3
   \   0000053E   04AA               ADD      R2,SP,#+16
   \   00000540   7548               LDR      R0,??FloToStr_29+0x14  ;; 0x2710
   \   00000542   0021               MOVS     R1,#+0
   \   00000544   03C2               STM      R2!,{R0,R1}
   1858                 if (Value>=0.009999     ) {if (E_tmp==0) E_tmp=101;    if ((ill_tmp<ill)&&(__ValueRST>0)) { ill_tmp++;  str_tmp[ill_tmp]=48+(__ValueRST / 10000)           ; __ValueRST=__ValueRST % 10000             ; NastDiel=1000        ; }};
   \                     ??FloToStr_32:
   \   00000546   2800               MOVS     R0,R5
   \   00000548   7449               LDR      R1,??FloToStr_29+0x18  ;; 0x3c23d2d9
   \   0000054A   ........           BL       __aeabi_cfrcmple
   \   0000054E   29D8               BHI      ??FloToStr_35
   \   00000550   0098               LDR      R0,[SP, #+0]
   \   00000552   0028               CMP      R0,#+0
   \   00000554   01D1               BNE      ??FloToStr_36
   \   00000556   6520               MOVS     R0,#+101
   \   00000558   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_36:
   \   0000055A   6846               MOV      R0,SP
   \   0000055C   0079               LDRB     R0,[R0, #+4]
   \   0000055E   8442               CMP      R4,R0
   \   00000560   20DA               BGE      ??FloToStr_35
   \   00000562   002F               CMP      R7,#+0
   \   00000564   1EDB               BLT      ??FloToStr_35
   \   00000566   01DC               BGT      ??FloToStr_37
   \   00000568   012E               CMP      R6,#+1
   \   0000056A   1BD3               BCC      ??FloToStr_35
   \                     ??FloToStr_37:
   \   0000056C   641C               ADDS     R4,R4,#+1
   \   0000056E   3000               MOVS     R0,R6
   \   00000570   3900               MOVS     R1,R7
   \   00000572   694A               LDR      R2,??FloToStr_29+0x14  ;; 0x2710
   \   00000574   0023               MOVS     R3,#+0
   \   00000576   ........           BL       __aeabi_ldivmod
   \   0000057A   0022               MOVS     R2,#+0
   \   0000057C   3030               ADDS     R0,R0,#+48
   \   0000057E   5141               ADCS     R1,R1,R2
   \   00000580   ........           BL       __aeabi_l2f
   \   00000584   A100               LSLS     R1,R4,#+2
   \   00000586   08AA               ADD      R2,SP,#+32
   \   00000588   5050               STR      R0,[R2, R1]
   \   0000058A   3000               MOVS     R0,R6
   \   0000058C   3900               MOVS     R1,R7
   \   0000058E   624A               LDR      R2,??FloToStr_29+0x14  ;; 0x2710
   \   00000590   0023               MOVS     R3,#+0
   \   00000592   ........           BL       __aeabi_ldivmod
   \   00000596   1600               MOVS     R6,R2
   \   00000598   1F00               MOVS     R7,R3
   \   0000059A   04AA               ADD      R2,SP,#+16
   \   0000059C   FA20               MOVS     R0,#+250
   \   0000059E   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   000005A0   0021               MOVS     R1,#+0
   \   000005A2   03C2               STM      R2!,{R0,R1}
   1859                 if (Value>=0.0009999    ) {if (E_tmp==0) E_tmp=102;    if ((ill_tmp<ill)&&(__ValueRST>0)) { ill_tmp++;  str_tmp[ill_tmp]=48+(__ValueRST / 1000)            ; __ValueRST=__ValueRST % 1000              ; NastDiel=100         ; }};
   \                     ??FloToStr_35:
   \   000005A4   2800               MOVS     R0,R5
   \   000005A6   5E49               LDR      R1,??FloToStr_29+0x1C  ;; 0x3a830f14
   \   000005A8   ........           BL       __aeabi_cfrcmple
   \   000005AC   2AD8               BHI      ??FloToStr_38
   \   000005AE   0098               LDR      R0,[SP, #+0]
   \   000005B0   0028               CMP      R0,#+0
   \   000005B2   01D1               BNE      ??FloToStr_39
   \   000005B4   6620               MOVS     R0,#+102
   \   000005B6   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_39:
   \   000005B8   6846               MOV      R0,SP
   \   000005BA   0079               LDRB     R0,[R0, #+4]
   \   000005BC   8442               CMP      R4,R0
   \   000005BE   21DA               BGE      ??FloToStr_38
   \   000005C0   002F               CMP      R7,#+0
   \   000005C2   1FDB               BLT      ??FloToStr_38
   \   000005C4   01DC               BGT      ??FloToStr_40
   \   000005C6   012E               CMP      R6,#+1
   \   000005C8   1CD3               BCC      ??FloToStr_38
   \                     ??FloToStr_40:
   \   000005CA   641C               ADDS     R4,R4,#+1
   \   000005CC   3000               MOVS     R0,R6
   \   000005CE   3900               MOVS     R1,R7
   \   000005D0   FA22               MOVS     R2,#+250
   \   000005D2   9200               LSLS     R2,R2,#+2        ;; #+1000
   \   000005D4   0023               MOVS     R3,#+0
   \   000005D6   ........           BL       __aeabi_ldivmod
   \   000005DA   0022               MOVS     R2,#+0
   \   000005DC   3030               ADDS     R0,R0,#+48
   \   000005DE   5141               ADCS     R1,R1,R2
   \   000005E0   ........           BL       __aeabi_l2f
   \   000005E4   A100               LSLS     R1,R4,#+2
   \   000005E6   08AA               ADD      R2,SP,#+32
   \   000005E8   5050               STR      R0,[R2, R1]
   \   000005EA   3000               MOVS     R0,R6
   \   000005EC   3900               MOVS     R1,R7
   \   000005EE   FA22               MOVS     R2,#+250
   \   000005F0   9200               LSLS     R2,R2,#+2        ;; #+1000
   \   000005F2   0023               MOVS     R3,#+0
   \   000005F4   ........           BL       __aeabi_ldivmod
   \   000005F8   1600               MOVS     R6,R2
   \   000005FA   1F00               MOVS     R7,R3
   \   000005FC   04AA               ADD      R2,SP,#+16
   \   000005FE   6420               MOVS     R0,#+100
   \   00000600   0021               MOVS     R1,#+0
   \   00000602   03C2               STM      R2!,{R0,R1}
   1860                 if (Value>=0.00009999   ) {if (E_tmp==0) E_tmp=103;    if ((ill_tmp<ill)&&(__ValueRST>0)) { ill_tmp++;  str_tmp[ill_tmp]=48+(__ValueRST / 100)             ; __ValueRST=__ValueRST % 100               ; NastDiel=10          ; }};
   \                     ??FloToStr_38:
   \   00000604   2800               MOVS     R0,R5
   \   00000606   4749               LDR      R1,??FloToStr_29+0x20  ;; 0x38d1b1b9
   \   00000608   ........           BL       __aeabi_cfrcmple
   \   0000060C   28D8               BHI      ??FloToStr_41
   \   0000060E   0098               LDR      R0,[SP, #+0]
   \   00000610   0028               CMP      R0,#+0
   \   00000612   01D1               BNE      ??FloToStr_42
   \   00000614   6720               MOVS     R0,#+103
   \   00000616   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_42:
   \   00000618   6846               MOV      R0,SP
   \   0000061A   0079               LDRB     R0,[R0, #+4]
   \   0000061C   8442               CMP      R4,R0
   \   0000061E   1FDA               BGE      ??FloToStr_41
   \   00000620   002F               CMP      R7,#+0
   \   00000622   1DDB               BLT      ??FloToStr_41
   \   00000624   01DC               BGT      ??FloToStr_43
   \   00000626   012E               CMP      R6,#+1
   \   00000628   1AD3               BCC      ??FloToStr_41
   \                     ??FloToStr_43:
   \   0000062A   641C               ADDS     R4,R4,#+1
   \   0000062C   3000               MOVS     R0,R6
   \   0000062E   3900               MOVS     R1,R7
   \   00000630   6422               MOVS     R2,#+100
   \   00000632   0023               MOVS     R3,#+0
   \   00000634   ........           BL       __aeabi_ldivmod
   \   00000638   0022               MOVS     R2,#+0
   \   0000063A   3030               ADDS     R0,R0,#+48
   \   0000063C   5141               ADCS     R1,R1,R2
   \   0000063E   ........           BL       __aeabi_l2f
   \   00000642   A100               LSLS     R1,R4,#+2
   \   00000644   08AA               ADD      R2,SP,#+32
   \   00000646   5050               STR      R0,[R2, R1]
   \   00000648   3000               MOVS     R0,R6
   \   0000064A   3900               MOVS     R1,R7
   \   0000064C   6422               MOVS     R2,#+100
   \   0000064E   0023               MOVS     R3,#+0
   \   00000650   ........           BL       __aeabi_ldivmod
   \   00000654   1600               MOVS     R6,R2
   \   00000656   1F00               MOVS     R7,R3
   \   00000658   04AA               ADD      R2,SP,#+16
   \   0000065A   0A20               MOVS     R0,#+10
   \   0000065C   0021               MOVS     R1,#+0
   \   0000065E   03C2               STM      R2!,{R0,R1}
   1861                 if (Value>=0.000009999  ) {if (E_tmp==0) E_tmp=104;    if ((ill_tmp<ill)&&(__ValueRST>0)) { ill_tmp++;  str_tmp[ill_tmp]=48+(__ValueRST / 10)              ; __ValueRST=__ValueRST % 10                ; NastDiel=1           ; }};
   \                     ??FloToStr_41:
   \   00000660   2800               MOVS     R0,R5
   \   00000662   3149               LDR      R1,??FloToStr_29+0x24  ;; 0x3727c161
   \   00000664   ........           BL       __aeabi_cfrcmple
   \   00000668   28D8               BHI      ??FloToStr_44
   \   0000066A   0098               LDR      R0,[SP, #+0]
   \   0000066C   0028               CMP      R0,#+0
   \   0000066E   01D1               BNE      ??FloToStr_45
   \   00000670   6820               MOVS     R0,#+104
   \   00000672   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_45:
   \   00000674   6846               MOV      R0,SP
   \   00000676   0079               LDRB     R0,[R0, #+4]
   \   00000678   8442               CMP      R4,R0
   \   0000067A   1FDA               BGE      ??FloToStr_44
   \   0000067C   002F               CMP      R7,#+0
   \   0000067E   1DDB               BLT      ??FloToStr_44
   \   00000680   01DC               BGT      ??FloToStr_46
   \   00000682   012E               CMP      R6,#+1
   \   00000684   1AD3               BCC      ??FloToStr_44
   \                     ??FloToStr_46:
   \   00000686   641C               ADDS     R4,R4,#+1
   \   00000688   3000               MOVS     R0,R6
   \   0000068A   3900               MOVS     R1,R7
   \   0000068C   0A22               MOVS     R2,#+10
   \   0000068E   0023               MOVS     R3,#+0
   \   00000690   ........           BL       __aeabi_ldivmod
   \   00000694   0022               MOVS     R2,#+0
   \   00000696   3030               ADDS     R0,R0,#+48
   \   00000698   5141               ADCS     R1,R1,R2
   \   0000069A   ........           BL       __aeabi_l2f
   \   0000069E   A100               LSLS     R1,R4,#+2
   \   000006A0   08AA               ADD      R2,SP,#+32
   \   000006A2   5050               STR      R0,[R2, R1]
   \   000006A4   3000               MOVS     R0,R6
   \   000006A6   3900               MOVS     R1,R7
   \   000006A8   0A22               MOVS     R2,#+10
   \   000006AA   0023               MOVS     R3,#+0
   \   000006AC   ........           BL       __aeabi_ldivmod
   \   000006B0   1600               MOVS     R6,R2
   \   000006B2   1F00               MOVS     R7,R3
   \   000006B4   04AA               ADD      R2,SP,#+16
   \   000006B6   0120               MOVS     R0,#+1
   \   000006B8   0021               MOVS     R1,#+0
   \   000006BA   03C2               STM      R2!,{R0,R1}
   1862                 if (Value>=0.0000009999 ) {if (E_tmp==0) E_tmp=105;    if ((ill_tmp<ill)&&(__ValueRST>0)) { ill_tmp++;  str_tmp[ill_tmp]=48+(__ValueRST / 1)               ; __ValueRST=__ValueRST % 1                 ; NastDiel=0           ; }};
   \                     ??FloToStr_44:
   \   000006BC   2800               MOVS     R0,R5
   \   000006BE   1B49               LDR      R1,??FloToStr_29+0x28  ;; 0x3586344e
   \   000006C0   ........           BL       __aeabi_cfrcmple
   \   000006C4   34D8               BHI      ??FloToStr_47
   \   000006C6   0098               LDR      R0,[SP, #+0]
   \   000006C8   0028               CMP      R0,#+0
   \   000006CA   01D1               BNE      ??FloToStr_48
   \   000006CC   6920               MOVS     R0,#+105
   \   000006CE   0090               STR      R0,[SP, #+0]
   \                     ??FloToStr_48:
   \   000006D0   6846               MOV      R0,SP
   \   000006D2   0079               LDRB     R0,[R0, #+4]
   \   000006D4   8442               CMP      R4,R0
   \   000006D6   2BDA               BGE      ??FloToStr_47
   \   000006D8   002F               CMP      R7,#+0
   \   000006DA   29DB               BLT      ??FloToStr_47
   \   000006DC   01DC               BGT      ??FloToStr_49
   \   000006DE   012E               CMP      R6,#+1
   \   000006E0   26D3               BCC      ??FloToStr_47
   \                     ??FloToStr_49:
   \   000006E2   641C               ADDS     R4,R4,#+1
   \   000006E4   0020               MOVS     R0,#+0
   \   000006E6   3036               ADDS     R6,R6,#+48
   \   000006E8   4741               ADCS     R7,R7,R0
   \   000006EA   3000               MOVS     R0,R6
   \   000006EC   3900               MOVS     R1,R7
   \   000006EE   ........           BL       __aeabi_l2f
   \   000006F2   A100               LSLS     R1,R4,#+2
   \   000006F4   08AA               ADD      R2,SP,#+32
   \   000006F6   5050               STR      R0,[R2, R1]
   \   000006F8   04AA               ADD      R2,SP,#+16
   \   000006FA   0020               MOVS     R0,#+0
   \   000006FC   0021               MOVS     R1,#+0
   \   000006FE   03C2               STM      R2!,{R0,R1}
   \   00000700   D7E0               B        ??FloToStr_50
   \   00000702   C046               Nop      
   \                     ??FloToStr_29:
   \   00000704   80969800           DC32     0x989680
   \   00000708   40420F00           DC32     0xf4240
   \   0000070C   A0860100           DC32     0x186a0
   \   00000710   8FC7CC3D           DC32     0x3dccc78f
   \   00000714   00003842           DC32     0x42380000
   \   00000718   10270000           DC32     0x2710
   \   0000071C   D9D2233C           DC32     0x3c23d2d9
   \   00000720   140F833A           DC32     0x3a830f14
   \   00000724   B9B1D138           DC32     0x38d1b1b9
   \   00000728   61C12737           DC32     0x3727c161
   \   0000072C   4E348635           DC32     0x3586344e
   1863             
   1864                 if ((__ValueRST) && (NastDiel))
   \                     ??FloToStr_47:
   \   00000730   002F               CMP      R7,#+0
   \   00000732   02D1               BNE      ??FloToStr_51
   \   00000734   002E               CMP      R6,#+0
   \   00000736   00D1               BNE      .+4
   \   00000738   BBE0               B        ??FloToStr_50
   \                     ??FloToStr_51:
   \   0000073A   04A8               ADD      R0,SP,#+16
   \   0000073C   03C8               LDM      R0!,{R0,R1}
   \   0000073E   0029               CMP      R1,#+0
   \   00000740   02D1               BNE      ??FloToStr_52
   \   00000742   0028               CMP      R0,#+0
   \   00000744   00D1               BNE      .+4
   \   00000746   B4E0               B        ??FloToStr_50
   1865                 {
   1866                   if (((__ValueRST/NastDiel)>5) && (str_tmp[ill_tmp]<57)) { str_tmp[ill_tmp]++; }
   \                     ??FloToStr_52:
   \   00000748   3000               MOVS     R0,R6
   \   0000074A   3900               MOVS     R1,R7
   \   0000074C   04AA               ADD      R2,SP,#+16
   \   0000074E   0CCA               LDM      R2!,{R2,R3}
   \   00000750   ........           BL       __aeabi_ldivmod
   \   00000754   0029               CMP      R1,#+0
   \   00000756   00DA               BGE      .+4
   \   00000758   ABE0               B        ??FloToStr_50
   \   0000075A   02DC               BGT      ??FloToStr_53
   \   0000075C   0628               CMP      R0,#+6
   \   0000075E   00D2               BCS      .+4
   \   00000760   A7E0               B        ??FloToStr_50
   \                     ??FloToStr_53:
   \   00000762   A000               LSLS     R0,R4,#+2
   \   00000764   08A9               ADD      R1,SP,#+32
   \   00000766   0E18               ADDS     R6,R1,R0
   \   00000768   3768               LDR      R7,[R6, #+0]
   \   0000076A   A24D               LDR      R5,??FloToStr_54  ;; 0x42640000
   \   0000076C   3800               MOVS     R0,R7
   \   0000076E   2900               MOVS     R1,R5
   \   00000770   ........           BL       __aeabi_cfcmple
   \   00000774   05D2               BCS      ??FloToStr_55
   \   00000776   FE20               MOVS     R0,#+254
   \   00000778   8005               LSLS     R0,R0,#+22       ;; #+1065353216
   \   0000077A   3900               MOVS     R1,R7
   \   0000077C   ........           BL       __aeabi_fadd
   \   00000780   3060               STR      R0,[R6, #+0]
   \                     ??FloToStr_55:
   \   00000782   3068               LDR      R0,[R6, #+0]
   \   00000784   2900               MOVS     R1,R5
   \   00000786   ........           BL       __aeabi_cfcmpeq
   \   0000078A   00D0               BEQ      .+4
   \   0000078C   91E0               B        ??FloToStr_50
   1867                   if (((__ValueRST/NastDiel)>5) && (str_tmp[ill_tmp]==57)) 
   1868                      { 
   1869                        str_tmp[ill_tmp]=0;
   \   0000078E   0020               MOVS     R0,#+0
   \   00000790   3060               STR      R0,[R6, #+0]
   1870                        ill_cor++;
   \   00000792   0120               MOVS     R0,#+1
   \   00000794   0390               STR      R0,[SP, #+12]
   \   00000796   143E               SUBS     R6,R6,#+20
   \   00000798   3069               LDR      R0,[R6, #+16]
   \   0000079A   B24F               LDR      R7,??FloToStr_56  ;; 0x42540001
   \   0000079C   3900               MOVS     R1,R7
   \   0000079E   ........           BL       __aeabi_cfrcmple
   \   000007A2   0CD8               BHI      ??FloToStr_57
   \   000007A4   2900               MOVS     R1,R5
   \   000007A6   ........           BL       __aeabi_cfcmple
   \   000007AA   08D2               BCS      ??FloToStr_57
   \   000007AC   611E               SUBS     R1,R4,#+1
   \   000007AE   0129               CMP      R1,#+1
   \   000007B0   05DA               BGE      ??FloToStr_57
   1871                        if ((str_tmp[ill_tmp-1]>53) && (str_tmp[ill_tmp-1]<57) && ((ill_tmp-1)<1)  )
   1872                          { 
   1873                            str_tmp[ill_tmp-1]++; 
   \   000007B2   0100               MOVS     R1,R0
   \   000007B4   FE20               MOVS     R0,#+254
   \   000007B6   8005               LSLS     R0,R0,#+22       ;; #+1065353216
   \   000007B8   ........           BL       __aeabi_fadd
   \   000007BC   3061               STR      R0,[R6, #+16]
   1874                          }
   1875                          if ((str_tmp[ill_tmp-1]==57) && ((ill_tmp-1)>0)  )
   \                     ??FloToStr_57:
   \   000007BE   3069               LDR      R0,[R6, #+16]
   \   000007C0   2900               MOVS     R1,R5
   \   000007C2   ........           BL       __aeabi_cfcmpeq
   \   000007C6   74D1               BNE      ??FloToStr_50
   \   000007C8   601E               SUBS     R0,R4,#+1
   \   000007CA   0128               CMP      R0,#+1
   \   000007CC   71DB               BLT      ??FloToStr_50
   1876                          {
   1877                            ill_cor++;
   \   000007CE   0220               MOVS     R0,#+2
   \   000007D0   0390               STR      R0,[SP, #+12]
   1878                            str_tmp[ill_tmp-1]=0;
   \   000007D2   0020               MOVS     R0,#+0
   \   000007D4   3061               STR      R0,[R6, #+16]
   1879                            
   1880                              if ((str_tmp[ill_tmp-2]>53) && (str_tmp[ill_tmp-2]<57) && ((ill_tmp-2)<1)  )
   \   000007D6   F068               LDR      R0,[R6, #+12]
   \   000007D8   3900               MOVS     R1,R7
   \   000007DA   ........           BL       __aeabi_cfrcmple
   \   000007DE   0CD8               BHI      ??FloToStr_58
   \   000007E0   2900               MOVS     R1,R5
   \   000007E2   ........           BL       __aeabi_cfcmple
   \   000007E6   08D2               BCS      ??FloToStr_58
   \   000007E8   A11E               SUBS     R1,R4,#+2
   \   000007EA   0129               CMP      R1,#+1
   \   000007EC   05DA               BGE      ??FloToStr_58
   1881                              { 
   1882                                str_tmp[ill_tmp-2]++; 
   \   000007EE   0100               MOVS     R1,R0
   \   000007F0   FE20               MOVS     R0,#+254
   \   000007F2   8005               LSLS     R0,R0,#+22       ;; #+1065353216
   \   000007F4   ........           BL       __aeabi_fadd
   \   000007F8   F060               STR      R0,[R6, #+12]
   1883                              }
   1884                            
   1885                              if ((str_tmp[ill_tmp-2]==57) && ((ill_tmp-2)>0)  )
   \                     ??FloToStr_58:
   \   000007FA   F068               LDR      R0,[R6, #+12]
   \   000007FC   2900               MOVS     R1,R5
   \   000007FE   ........           BL       __aeabi_cfcmpeq
   \   00000802   56D1               BNE      ??FloToStr_50
   \   00000804   A01E               SUBS     R0,R4,#+2
   \   00000806   0128               CMP      R0,#+1
   \   00000808   53DB               BLT      ??FloToStr_50
   1886                              {
   1887                                  str_tmp[ill_tmp-2]=0;
   \   0000080A   0020               MOVS     R0,#+0
   \   0000080C   F060               STR      R0,[R6, #+12]
   1888                                  if ((str_tmp[ill_tmp-3]>53) && (str_tmp[ill_tmp-3]<57) && ((ill_tmp-3)<1)  )
   \   0000080E   B068               LDR      R0,[R6, #+8]
   \   00000810   3900               MOVS     R1,R7
   \   00000812   ........           BL       __aeabi_cfrcmple
   \   00000816   0ED8               BHI      ??FloToStr_59
   \   00000818   2900               MOVS     R1,R5
   \   0000081A   ........           BL       __aeabi_cfcmple
   \   0000081E   0AD2               BCS      ??FloToStr_59
   \   00000820   E11E               SUBS     R1,R4,#+3
   \   00000822   0129               CMP      R1,#+1
   \   00000824   07DA               BGE      ??FloToStr_59
   1889                                  { 
   1890                                    ill_cor++;
   \   00000826   0321               MOVS     R1,#+3
   \   00000828   0391               STR      R1,[SP, #+12]
   1891                                    str_tmp[ill_tmp-3]++; 
   \   0000082A   0100               MOVS     R1,R0
   \   0000082C   FE20               MOVS     R0,#+254
   \   0000082E   8005               LSLS     R0,R0,#+22       ;; #+1065353216
   \   00000830   ........           BL       __aeabi_fadd
   \   00000834   B060               STR      R0,[R6, #+8]
   1892                                  }
   1893                                  if ((str_tmp[ill_tmp-3]==57) && ((ill_tmp-3)>0)  )
   \                     ??FloToStr_59:
   \   00000836   B068               LDR      R0,[R6, #+8]
   \   00000838   2900               MOVS     R1,R5
   \   0000083A   ........           BL       __aeabi_cfcmpeq
   \   0000083E   38D1               BNE      ??FloToStr_50
   \   00000840   E01E               SUBS     R0,R4,#+3
   \   00000842   0128               CMP      R0,#+1
   \   00000844   35DB               BLT      ??FloToStr_50
   1894                                  {
   1895                                      str_tmp[ill_tmp-3]=0;
   \   00000846   0020               MOVS     R0,#+0
   \   00000848   B060               STR      R0,[R6, #+8]
   1896                                      if ((str_tmp[ill_tmp-4]>53) && (str_tmp[ill_tmp-4]<57) && ((ill_tmp-4)<1)  )
   \   0000084A   7068               LDR      R0,[R6, #+4]
   \   0000084C   3900               MOVS     R1,R7
   \   0000084E   ........           BL       __aeabi_cfrcmple
   \   00000852   0FD8               BHI      ??FloToStr_60
   \   00000854   2900               MOVS     R1,R5
   \   00000856   ........           BL       __aeabi_cfcmple
   \   0000085A   0BD2               BCS      ??FloToStr_60
   \   0000085C   211F               SUBS     R1,R4,#+4
   \   0000085E   0129               CMP      R1,#+1
   \   00000860   08DA               BGE      ??FloToStr_60
   1897                                      { 
   1898                                        ill_cor++;
   \   00000862   0399               LDR      R1,[SP, #+12]
   \   00000864   491C               ADDS     R1,R1,#+1
   \   00000866   0391               STR      R1,[SP, #+12]
   1899                            
   1900                                        str_tmp[ill_tmp-4]++; 
   \   00000868   0100               MOVS     R1,R0
   \   0000086A   FE20               MOVS     R0,#+254
   \   0000086C   8005               LSLS     R0,R0,#+22       ;; #+1065353216
   \   0000086E   ........           BL       __aeabi_fadd
   \   00000872   7060               STR      R0,[R6, #+4]
   1901                                      }
   1902                                      if ((str_tmp[ill_tmp-4]==57) && ((ill_tmp-4)>0)  )
   \                     ??FloToStr_60:
   \   00000874   7068               LDR      R0,[R6, #+4]
   \   00000876   2900               MOVS     R1,R5
   \   00000878   ........           BL       __aeabi_cfcmpeq
   \   0000087C   19D1               BNE      ??FloToStr_50
   \   0000087E   201F               SUBS     R0,R4,#+4
   \   00000880   0128               CMP      R0,#+1
   \   00000882   16DB               BLT      ??FloToStr_50
   1903                                      {
   1904                                
   1905                                        if ((str_tmp[ill_tmp-5]>53) && (str_tmp[ill_tmp-5]<57) && ((ill_tmp-5)<1)  )
   \   00000884   3068               LDR      R0,[R6, #+0]
   \   00000886   3900               MOVS     R1,R7
   \   00000888   ........           BL       __aeabi_cfrcmple
   \   0000088C   11D8               BHI      ??FloToStr_50
   \   0000088E   2900               MOVS     R1,R5
   \   00000890   ........           BL       __aeabi_cfcmple
   \   00000894   0DD2               BCS      ??FloToStr_50
   \   00000896   601F               SUBS     R0,R4,#+5
   \   00000898   0128               CMP      R0,#+1
   \   0000089A   0ADA               BGE      ??FloToStr_50
   1906                                        { 
   1907                                          ill_cor++;
   \   0000089C   0398               LDR      R0,[SP, #+12]
   \   0000089E   401C               ADDS     R0,R0,#+1
   \   000008A0   0390               STR      R0,[SP, #+12]
   1908                                          str_tmp[ill_tmp-4]=0;
   \   000008A2   0020               MOVS     R0,#+0
   \   000008A4   7060               STR      R0,[R6, #+4]
   1909                                          str_tmp[ill_tmp-5]++; 
   \   000008A6   3168               LDR      R1,[R6, #+0]
   \   000008A8   FE20               MOVS     R0,#+254
   \   000008AA   8005               LSLS     R0,R0,#+22       ;; #+1065353216
   \   000008AC   ........           BL       __aeabi_fadd
   \   000008B0   3060               STR      R0,[R6, #+0]
   1910                                        }
   1911                      
   1912                                      }
   1913                                  }
   1914                                     
   1915                              }
   1916                            
   1917                            
   1918                          }
   1919                      }
   1920                 }
   1921                 
   1922          
   1923                
   1924                if (ill_tmp-ill_cor) {ill_tmp-=ill_cor;} else {ill_tmp=0;}
   \                     ??FloToStr_50:
   \   000008B2   0398               LDR      R0,[SP, #+12]
   \   000008B4   241A               SUBS     R4,R4,R0
   \   000008B6   00D1               BNE      ??FloToStr_61
   \   000008B8   0024               MOVS     R4,#+0
   1925          
   1926                
   1927                if (E_tmp<100) 
   \                     ??FloToStr_61:
   \   000008BA   0098               LDR      R0,[SP, #+0]
   \   000008BC   6428               CMP      R0,#+100
   \   000008BE   12DA               BGE      ??FloToStr_62
   1928                {
   1929                  for (int i=0; i<=ill-1; i++) Vstring[min+i]=str_tmp[i+1];  
   \   000008C0   0026               MOVS     R6,#+0
   \   000008C2   6846               MOV      R0,SP
   \   000008C4   0579               LDRB     R5,[R0, #+4]
   \   000008C6   6D1E               SUBS     R5,R5,#+1
   \   000008C8   54D4               BMI      ??FloToStr_63
   \                     ??FloToStr_64:
   \   000008CA   B000               LSLS     R0,R6,#+2
   \   000008CC   08A9               ADD      R1,SP,#+32
   \   000008CE   0818               ADDS     R0,R1,R0
   \   000008D0   4068               LDR      R0,[R0, #+4]
   \   000008D2   ........           BL       __aeabi_f2iz
   \   000008D6   0299               LDR      R1,[SP, #+8]
   \   000008D8   8919               ADDS     R1,R1,R6
   \   000008DA   189A               LDR      R2,[SP, #+96]
   \   000008DC   5054               STRB     R0,[R2, R1]
   \   000008DE   761C               ADDS     R6,R6,#+1
   \   000008E0   B542               CMP      R5,R6
   \   000008E2   47DB               BLT      ??FloToStr_63
   \   000008E4   F1E7               B        ??FloToStr_64
   1930                }
   1931          
   1932                if ( E_tmp == 100 )
   \                     ??FloToStr_62:
   \   000008E6   3020               MOVS     R0,#+48
   \   000008E8   0099               LDR      R1,[SP, #+0]
   \   000008EA   6429               CMP      R1,#+100
   \   000008EC   0299               LDR      R1,[SP, #+8]
   \   000008EE   189A               LDR      R2,[SP, #+96]
   \   000008F0   5054               STRB     R0,[R2, R1]
   \   000008F2   12D1               BNE      ??FloToStr_65
   1933                  {
   1934                    Vstring[min+0]=48;
   1935                    for (int i=1; i<=(E_tmp-100); i++) Vstring[min+i]=48; 
   1936                    for (int i=1+(E_tmp-100); i<=ill-1; i++) Vstring[min+i]=str_tmp[1+i-(1+(E_tmp-100))];  
   \   000008F4   0126               MOVS     R6,#+1
   \   000008F6   6846               MOV      R0,SP
   \   000008F8   0579               LDRB     R5,[R0, #+4]
   \   000008FA   6D1E               SUBS     R5,R5,#+1
   \   000008FC   012D               CMP      R5,#+1
   \   000008FE   39DB               BLT      ??FloToStr_63
   \                     ??FloToStr_66:
   \   00000900   B000               LSLS     R0,R6,#+2
   \   00000902   08A9               ADD      R1,SP,#+32
   \   00000904   0858               LDR      R0,[R1, R0]
   \   00000906   ........           BL       __aeabi_f2iz
   \   0000090A   0299               LDR      R1,[SP, #+8]
   \   0000090C   8919               ADDS     R1,R1,R6
   \   0000090E   189A               LDR      R2,[SP, #+96]
   \   00000910   5054               STRB     R0,[R2, R1]
   \   00000912   761C               ADDS     R6,R6,#+1
   \   00000914   B542               CMP      R5,R6
   \   00000916   2DDB               BLT      ??FloToStr_63
   \   00000918   F2E7               B        ??FloToStr_66
   1937                  }
   1938                if ( E_tmp > 100 )
   1939                  {
   1940                    Vstring[min+0]=48;
   1941                    Vstring[min+1]=46;
   \                     ??FloToStr_65:
   \   0000091A   0298               LDR      R0,[SP, #+8]
   \   0000091C   1899               LDR      R1,[SP, #+96]
   \   0000091E   0818               ADDS     R0,R1,R0
   \   00000920   2E21               MOVS     R1,#+46
   \   00000922   4170               STRB     R1,[R0, #+1]
   1942                    for (int i=2; i<=(1+E_tmp-100); i++) Vstring[min+i]=48; 
   \   00000924   0098               LDR      R0,[SP, #+0]
   \   00000926   6338               SUBS     R0,R0,#+99
   \   00000928   0228               CMP      R0,#+2
   \   0000092A   08DB               BLT      ??FloToStr_67
   \   0000092C   3022               MOVS     R2,#+48
   \   0000092E   0099               LDR      R1,[SP, #+0]
   \   00000930   6439               SUBS     R1,R1,#+100
   \   00000932   0298               LDR      R0,[SP, #+8]
   \   00000934   189B               LDR      R3,[SP, #+96]
   \   00000936   1818               ADDS     R0,R3,R0
   \   00000938   801C               ADDS     R0,R0,#+2
   \   0000093A   ........           BL       __aeabi_memset
   1943                    for (int i=2+(E_tmp-100); i<=ill-1; i++) {Vstring[min+i]=str_tmp[1+i-(2+(E_tmp-100))];  }
   \                     ??FloToStr_67:
   \   0000093E   009E               LDR      R6,[SP, #+0]
   \   00000940   623E               SUBS     R6,R6,#+98
   \   00000942   6846               MOV      R0,SP
   \   00000944   0579               LDRB     R5,[R0, #+4]
   \   00000946   6D1E               SUBS     R5,R5,#+1
   \   00000948   B542               CMP      R5,R6
   \   0000094A   11DA               BGE      ??FloToStr_68
   \   0000094C   12E0               B        ??FloToStr_63
   \                     ??FloToStr_69:
   \   0000094E   3700               MOVS     R7,R6
   \   00000950   7F1C               ADDS     R7,R7,#+1
   \   00000952   C420               MOVS     R0,#+196
   \   00000954   4000               LSLS     R0,R0,#+1        ;; #+392
   \   00000956   0099               LDR      R1,[SP, #+0]
   \   00000958   791A               SUBS     R1,R7,R1
   \   0000095A   8900               LSLS     R1,R1,#+2
   \   0000095C   08AA               ADD      R2,SP,#+32
   \   0000095E   5118               ADDS     R1,R2,R1
   \   00000960   0858               LDR      R0,[R1, R0]
   \   00000962   ........           BL       __aeabi_f2iz
   \   00000966   0299               LDR      R1,[SP, #+8]
   \   00000968   8919               ADDS     R1,R1,R6
   \   0000096A   189A               LDR      R2,[SP, #+96]
   \   0000096C   5054               STRB     R0,[R2, R1]
   \   0000096E   3E00               MOVS     R6,R7
   \                     ??FloToStr_68:
   \   00000970   B542               CMP      R5,R6
   \   00000972   ECDA               BGE      ??FloToStr_69
   1944          
   1945                  }  
   1946           
   1947              
   1948            
   1949                if (NastDiel<=10000)
   \                     ??FloToStr_63:
   \   00000974   6846               MOV      R0,SP
   \   00000976   0579               LDRB     R5,[R0, #+4]
   \   00000978   04A8               ADD      R0,SP,#+16
   \   0000097A   03C8               LDM      R0!,{R0,R1}
   \   0000097C   3A4A               LDR      R2,??FloToStr_56+0x4  ;; 0x2711
   \   0000097E   0023               MOVS     R3,#+0
   \   00000980   9942               CMP      R1,R3
   \   00000982   42DC               BGT      ??FloToStr_70
   \   00000984   01DB               BLT      ??FloToStr_71
   \   00000986   9042               CMP      R0,R2
   \   00000988   3FD2               BCS      ??FloToStr_70
   1950                {
   1951                  if ((Vstring[ill-1]==46)) 
   \                     ??FloToStr_71:
   \   0000098A   1898               LDR      R0,[SP, #+96]
   \   0000098C   4019               ADDS     R0,R0,R5
   \   0000098E   C01F               SUBS     R0,R0,#+7
   \   00000990   8179               LDRB     R1,[R0, #+6]
   \   00000992   2E29               CMP      R1,#+46
   \   00000994   00D1               BNE      ??FloToStr_72
   1952                    {
   1953                      Vstring[ill-1]=0;
   \   00000996   8371               STRB     R3,[R0, #+6]
   1954                    }
   1955                  if ((Vstring[ill-1]==48)) 
   \                     ??FloToStr_72:
   \   00000998   8179               LDRB     R1,[R0, #+6]
   \   0000099A   3029               CMP      R1,#+48
   \   0000099C   35D1               BNE      ??FloToStr_70
   1956                    {
   1957                      Vstring[ill-1]=0;
   \   0000099E   8371               STRB     R3,[R0, #+6]
   1958                      ill_tmp--;
   \   000009A0   641E               SUBS     R4,R4,#+1
   1959                      if (Vstring[ill-2]==46)
   \   000009A2   4179               LDRB     R1,[R0, #+5]
   \   000009A4   2E29               CMP      R1,#+46
   \   000009A6   01D1               BNE      ??FloToStr_73
   1960                      {
   1961                         Vstring[ill-2]=0;
   \   000009A8   4371               STRB     R3,[R0, #+5]
   1962                         ill_tmp--; 
   \   000009AA   2DE0               B.N      ??FloToStr_74
   1963                      }
   1964                      else
   1965                      {
   1966                           if ((Vstring[ill-2]==48)) 
   \                     ??FloToStr_73:
   \   000009AC   3029               CMP      R1,#+48
   \   000009AE   2CD1               BNE      ??FloToStr_70
   1967                           {
   1968                              Vstring[ill-2]=0;
   \   000009B0   4371               STRB     R3,[R0, #+5]
   1969                              ill_tmp--;
   \   000009B2   641E               SUBS     R4,R4,#+1
   1970                              if (Vstring[ill-3]==46)
   \   000009B4   0179               LDRB     R1,[R0, #+4]
   \   000009B6   2E29               CMP      R1,#+46
   \   000009B8   01D1               BNE      ??FloToStr_75
   1971                              {
   1972                                Vstring[ill-3]=0;
   \   000009BA   0371               STRB     R3,[R0, #+4]
   1973                                ill_tmp--; 
   \   000009BC   24E0               B.N      ??FloToStr_74
   1974                              }
   1975                              else
   1976                              {
   1977                                    if ((Vstring[ill-3]==48)) 
   \                     ??FloToStr_75:
   \   000009BE   3029               CMP      R1,#+48
   \   000009C0   23D1               BNE      ??FloToStr_70
   1978                                    {
   1979                                      Vstring[ill-3]=0;
   \   000009C2   0371               STRB     R3,[R0, #+4]
   1980                                      ill_tmp--;
   \   000009C4   641E               SUBS     R4,R4,#+1
   1981                                      if (Vstring[ill-4]==46)
   \   000009C6   C178               LDRB     R1,[R0, #+3]
   \   000009C8   2E29               CMP      R1,#+46
   \   000009CA   01D1               BNE      ??FloToStr_76
   1982                                      {
   1983                                        Vstring[ill-4]=0;
   \   000009CC   C370               STRB     R3,[R0, #+3]
   1984                                        ill_tmp--; 
   \   000009CE   1BE0               B.N      ??FloToStr_74
   1985                                      }
   1986                                      else
   1987                                      {
   1988                                          if ((Vstring[ill-4]==48)) 
   \                     ??FloToStr_76:
   \   000009D0   3029               CMP      R1,#+48
   \   000009D2   1AD1               BNE      ??FloToStr_70
   1989                                          {
   1990                                            Vstring[ill-4]=0;
   \   000009D4   C370               STRB     R3,[R0, #+3]
   1991                                            ill_tmp--;
   \   000009D6   641E               SUBS     R4,R4,#+1
   1992                                            if (Vstring[ill-5]==46)
   \   000009D8   8178               LDRB     R1,[R0, #+2]
   \   000009DA   2E29               CMP      R1,#+46
   \   000009DC   01D1               BNE      ??FloToStr_77
   1993                                            {
   1994                                              Vstring[ill-5]=0;
   \   000009DE   8370               STRB     R3,[R0, #+2]
   1995                                              ill_tmp--; 
   \   000009E0   12E0               B.N      ??FloToStr_74
   1996                                            }
   1997                                            else
   1998                                            {
   1999                                                if ((Vstring[ill-5]==48)) 
   \                     ??FloToStr_77:
   \   000009E2   3029               CMP      R1,#+48
   \   000009E4   11D1               BNE      ??FloToStr_70
   2000                                                {
   2001                                                  Vstring[ill-5]=0;
   \   000009E6   8370               STRB     R3,[R0, #+2]
   2002                                                  ill_tmp--;
   \   000009E8   641E               SUBS     R4,R4,#+1
   2003                                                  if (Vstring[ill-6]==46)
   \   000009EA   4178               LDRB     R1,[R0, #+1]
   \   000009EC   2E29               CMP      R1,#+46
   \   000009EE   03D1               BNE      ??FloToStr_78
   2004                                                  {
   2005                                                    Vstring[ill-6]=0;
   \   000009F0   4370               STRB     R3,[R0, #+1]
   2006                                                    ill_tmp--; 
   \   000009F2   09E0               B.N      ??FloToStr_74
   \                     ??FloToStr_54:
   \   000009F4   00006442           DC32     0x42640000
   2007                                                  }
   2008                                                  else
   2009                                                  {  
   2010                                                    if ((Vstring[ill-6]==48)) 
   \                     ??FloToStr_78:
   \   000009F8   3029               CMP      R1,#+48
   \   000009FA   06D1               BNE      ??FloToStr_70
   2011                                                    {
   2012                                                      Vstring[ill-6]=0;
   \   000009FC   4370               STRB     R3,[R0, #+1]
   2013                                                      ill_tmp--;
   \   000009FE   641E               SUBS     R4,R4,#+1
   2014                                                      if (Vstring[ill-7]==46)
   \   00000A00   0178               LDRB     R1,[R0, #+0]
   \   00000A02   2E29               CMP      R1,#+46
   \   00000A04   01D1               BNE      ??FloToStr_70
   2015                                                      {
   2016                                                        Vstring[ill-7]=0;
   \   00000A06   0370               STRB     R3,[R0, #+0]
   2017                                                        ill_tmp--; 
   \                     ??FloToStr_74:
   \   00000A08   641E               SUBS     R4,R4,#+1
   2018                                                      }
   2019          
   2020                                                    }
   2021                                                  }
   2022                                                 }
   2023                                          
   2024                                          
   2025                         
   2026                                            }
   2027                                          }
   2028                                    
   2029                         
   2030                                      }
   2031                                    }  
   2032                         
   2033                              }
   2034                           }  
   2035                        
   2036                         
   2037                      }
   2038                  
   2039                    }
   2040                  
   2041                }
   2042                
   2043              
   2044                if ((E_tmp>ill) && (E_tmp<100))
   \                     ??FloToStr_70:
   \   00000A0A   0098               LDR      R0,[SP, #+0]
   \   00000A0C   8542               CMP      R5,R0
   \   00000A0E   15DA               BGE      ??FloToStr_79
   \   00000A10   6428               CMP      R0,#+100
   \   00000A12   13DA               BGE      ??FloToStr_79
   2045                {
   2046                  if ((Vstring[ill-2]>53)&&(Vstring[ill-3]<57)) Vstring[ill-3]++;
   \   00000A14   1898               LDR      R0,[SP, #+96]
   \   00000A16   4019               ADDS     R0,R0,R5
   \   00000A18   C01F               SUBS     R0,R0,#+7
   \   00000A1A   4179               LDRB     R1,[R0, #+5]
   \   00000A1C   3629               CMP      R1,#+54
   \   00000A1E   04D3               BCC      ??FloToStr_80
   \   00000A20   0179               LDRB     R1,[R0, #+4]
   \   00000A22   3929               CMP      R1,#+57
   \   00000A24   01D2               BCS      ??FloToStr_80
   \   00000A26   491C               ADDS     R1,R1,#+1
   \   00000A28   0171               STRB     R1,[R0, #+4]
   2047                  Vstring[ill-2]=0x45;
   \                     ??FloToStr_80:
   \   00000A2A   4521               MOVS     R1,#+69
   \   00000A2C   4171               STRB     R1,[R0, #+5]
   2048                  Vstring[ill-1]=48+E_tmp-ill+2;
   \   00000A2E   0099               LDR      R1,[SP, #+0]
   \   00000A30   3031               ADDS     R1,R1,#+48
   \   00000A32   6A46               MOV      R2,SP
   \   00000A34   1279               LDRB     R2,[R2, #+4]
   \   00000A36   891A               SUBS     R1,R1,R2
   \   00000A38   891C               ADDS     R1,R1,#+2
   \   00000A3A   8171               STRB     R1,[R0, #+6]
   2049                }    
   2050              
   2051                if (min)
   \                     ??FloToStr_79:
   \   00000A3C   0298               LDR      R0,[SP, #+8]
   \   00000A3E   0028               CMP      R0,#+0
   \   00000A40   02D0               BEQ      ??FloToStr_81
   2052                {
   2053                  Vstring[0]=45; 
   \   00000A42   1898               LDR      R0,[SP, #+96]
   \   00000A44   2D21               MOVS     R1,#+45
   \   00000A46   0170               STRB     R1,[R0, #+0]
   2054                }
   2055                
   2056                ill++;
   2057                Vstring[ill+1]=0;
   \                     ??FloToStr_81:
   \   00000A48   6846               MOV      R0,SP
   \   00000A4A   0079               LDRB     R0,[R0, #+4]
   \   00000A4C   401C               ADDS     R0,R0,#+1
   \   00000A4E   0006               LSLS     R0,R0,#+24
   \   00000A50   000E               LSRS     R0,R0,#+24
   \   00000A52   1899               LDR      R1,[SP, #+96]
   \   00000A54   0818               ADDS     R0,R1,R0
   \   00000A56   4370               STRB     R3,[R0, #+1]
   2058              
   2059               }
   2060             }
   2061          
   2062               
   2063             return ill_tmp;
   \                     ??FloToStr_4:
   \   00000A58   2006               LSLS     R0,R4,#+24
   \   00000A5A   000E               LSRS     R0,R0,#+24
   \   00000A5C   19B0               ADD      SP,SP,#+100
   \   00000A5E   F0BC               POP      {R4-R7}
   \   00000A60   02BC               POP      {R1}
   \   00000A62   0847               BX       R1               ;; return
   \                     ??FloToStr_56:
   \   00000A64   01005442           DC32     0x42540001
   \   00000A68   11270000           DC32     0x2711
   2064          
   2065          
   2066             
   2067          }//_______________________ Koniec funkcji konwersji float na string ____________________________
   2068          
   2069          
   2070          
   2071          
   2072          
   2073          
   2074          //*-----------------------------------------------------------------------------
   2075          //* Nazwa funkcji :    H_line
   2076          //* Funkcja rysowania lini poziomej
   2077          //*-----------------------------------------------------------------------------
   2078          
   2079          //*  X          - wspó³¿êdna X zale¿na 
   2080          //*  Y          - wspó³¿êdna Y do³u napisu
   2081          //*  length     -d³ugoœæ
   2082          //*  typ        -0-bia³a 1=ci¹gla, 2=kropkowana, 3=kreskowana 
   2083          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   2084          void H_line (char X, int Y, char lenght, char typ) 
   2085          { 
   \                     H_line:
   \   00000000   FEB5               PUSH     {R1-R7,LR}
   2086              int kol=0;
   2087              char bit=0;
   2088            
   2089                kol=X/8;
   \   00000002   C108               LSRS     R1,R0,#+3
   2090                bit=X%8;
   \   00000004   CA00               LSLS     R2,R1,#+3
   \   00000006   831A               SUBS     R3,R0,R2
   \   00000008   1B06               LSLS     R3,R3,#+24
   \   0000000A   1B0E               LSRS     R3,R3,#+24
   2091                
   2092                for (int j=1; j<=lenght; j++)
   \   0000000C   0124               MOVS     R4,#+1
   \   0000000E   6846               MOV      R0,SP
   \   00000010   0079               LDRB     R0,[R0, #+4]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   5AD0               BEQ      ??H_line_0
   \   00000016   03E0               B        ??H_line_1
   2093                {
   2094                    
   2095                    if (typ>0) 
   2096                    {
   2097                      LCD_Canvas[kol][Y] |= (0x1)<<bit;
   2098                      if (bit<7) { bit++;} else {bit=0;  kol++; }
   2099                    }
   2100                    else
   2101                    {
   2102                        
   2103                        LCD_Canvas[kol][Y] &= ~((0x1)<<bit);
   2104                      if (bit<7) { bit++;} else {bit=0;  kol++; }
   2105                      
   2106                    }
   2107                   
   2108                    if ((typ==3) && ((j+1)<=lenght))
   2109                    {
   2110                      LCD_Canvas[kol][Y] |= (0x1)<<bit;
   2111                      if (bit<7) { bit++;} else {bit=0;  kol++;}
   2112                      j++;
   2113                    }
   2114                     if ((typ>=2) && ((j+1)<=lenght))
   2115                    {
   2116                      LCD_Canvas[kol][Y] &=~((0x1)<<bit);
   2117                      if (bit<7) { bit++;} else {bit=0;  kol++;}
   \                     ??H_line_2:
   \   00000018   0023               MOVS     R3,#+0
   \   0000001A   491C               ADDS     R1,R1,#+1
   2118                      j++;
   \                     ??H_line_3:
   \   0000001C   0400               MOVS     R4,R0
   \                     ??H_line_4:
   \   0000001E   641C               ADDS     R4,R4,#+1
   \                     ??H_line_1:
   \   00000020   6846               MOV      R0,SP
   \   00000022   0079               LDRB     R0,[R0, #+4]
   \   00000024   A042               CMP      R0,R4
   \   00000026   51DB               BLT      ??H_line_0
   \   00000028   0120               MOVS     R0,#+1
   \   0000002A   9840               LSLS     R0,R0,R3
   \   0000002C   CD01               LSLS     R5,R1,#+7
   \   0000002E   009E               LDR      R6,[SP, #+0]
   \   00000030   284F               LDR      R7,??H_line_5    ;; LCD_Canvas
   \   00000032   BE19               ADDS     R6,R7,R6
   \   00000034   7519               ADDS     R5,R6,R5
   \   00000036   2E78               LDRB     R6,[R5, #+0]
   \   00000038   6F46               MOV      R7,SP
   \   0000003A   3F7A               LDRB     R7,[R7, #+8]
   \   0000003C   002F               CMP      R7,#+0
   \   0000003E   20D0               BEQ      ??H_line_6
   \   00000040   3043               ORRS     R0,R0,R6
   \   00000042   2870               STRB     R0,[R5, #+0]
   \   00000044   072B               CMP      R3,#+7
   \   00000046   20D2               BCS      ??H_line_7
   \                     ??H_line_8:
   \   00000048   5B1C               ADDS     R3,R3,#+1
   \   0000004A   1B06               LSLS     R3,R3,#+24
   \   0000004C   1B0E               LSRS     R3,R3,#+24
   \                     ??H_line_9:
   \   0000004E   6846               MOV      R0,SP
   \   00000050   007A               LDRB     R0,[R0, #+8]
   \   00000052   0328               CMP      R0,#+3
   \   00000054   20D1               BNE      ??H_line_10
   \   00000056   2000               MOVS     R0,R4
   \   00000058   401C               ADDS     R0,R0,#+1
   \   0000005A   6D46               MOV      R5,SP
   \   0000005C   2D79               LDRB     R5,[R5, #+4]
   \   0000005E   8542               CMP      R5,R0
   \   00000060   1EDB               BLT      ??H_line_11
   \   00000062   CC01               LSLS     R4,R1,#+7
   \   00000064   009D               LDR      R5,[SP, #+0]
   \   00000066   1B4E               LDR      R6,??H_line_5    ;; LCD_Canvas
   \   00000068   7519               ADDS     R5,R6,R5
   \   0000006A   2C19               ADDS     R4,R5,R4
   \   0000006C   2578               LDRB     R5,[R4, #+0]
   \   0000006E   0126               MOVS     R6,#+1
   \   00000070   9E40               LSLS     R6,R6,R3
   \   00000072   2E43               ORRS     R6,R6,R5
   \   00000074   2670               STRB     R6,[R4, #+0]
   \   00000076   072B               CMP      R3,#+7
   \   00000078   0AD2               BCS      ??H_line_12
   \   0000007A   5B1C               ADDS     R3,R3,#+1
   \   0000007C   1B06               LSLS     R3,R3,#+24
   \   0000007E   1B0E               LSRS     R3,R3,#+24
   \   00000080   08E0               B        ??H_line_13
   \                     ??H_line_6:
   \   00000082   8643               BICS     R6,R6,R0
   \   00000084   2E70               STRB     R6,[R5, #+0]
   \   00000086   072B               CMP      R3,#+7
   \   00000088   DED3               BCC      ??H_line_8
   \                     ??H_line_7:
   \   0000008A   0023               MOVS     R3,#+0
   \   0000008C   491C               ADDS     R1,R1,#+1
   \   0000008E   DEE7               B        ??H_line_9
   \                     ??H_line_12:
   \   00000090   0023               MOVS     R3,#+0
   \   00000092   491C               ADDS     R1,R1,#+1
   \                     ??H_line_13:
   \   00000094   0400               MOVS     R4,R0
   \   00000096   03E0               B        ??H_line_11
   \                     ??H_line_10:
   \   00000098   6846               MOV      R0,SP
   \   0000009A   007A               LDRB     R0,[R0, #+8]
   \   0000009C   0228               CMP      R0,#+2
   \   0000009E   BED3               BCC      ??H_line_4
   \                     ??H_line_11:
   \   000000A0   2000               MOVS     R0,R4
   \   000000A2   401C               ADDS     R0,R0,#+1
   \   000000A4   6D46               MOV      R5,SP
   \   000000A6   2D79               LDRB     R5,[R5, #+4]
   \   000000A8   8542               CMP      R5,R0
   \   000000AA   B8DB               BLT      ??H_line_4
   \   000000AC   CC01               LSLS     R4,R1,#+7
   \   000000AE   009D               LDR      R5,[SP, #+0]
   \   000000B0   084E               LDR      R6,??H_line_5    ;; LCD_Canvas
   \   000000B2   7519               ADDS     R5,R6,R5
   \   000000B4   2C19               ADDS     R4,R5,R4
   \   000000B6   2578               LDRB     R5,[R4, #+0]
   \   000000B8   0126               MOVS     R6,#+1
   \   000000BA   9E40               LSLS     R6,R6,R3
   \   000000BC   B543               BICS     R5,R5,R6
   \   000000BE   2570               STRB     R5,[R4, #+0]
   \   000000C0   072B               CMP      R3,#+7
   \   000000C2   A9D2               BCS      ??H_line_2
   \   000000C4   5B1C               ADDS     R3,R3,#+1
   \   000000C6   1B06               LSLS     R3,R3,#+24
   \   000000C8   1B0E               LSRS     R3,R3,#+24
   \   000000CA   A7E7               B        ??H_line_3
   2119                    }
   2120                    
   2121                }   
   2122          
   2123          }//_______________________ Koniec funkcji H_line ____________________________ 
   \                     ??H_line_0:
   \   000000CC   03B0               ADD      SP,SP,#+12
   \   000000CE   F0BC               POP      {R4-R7}
   \   000000D0   01BC               POP      {R0}
   \   000000D2   0047               BX       R0               ;; return
   \                     ??H_line_5:
   \   000000D4   ........           DC32     LCD_Canvas
   2124          
   2125          
   2126          
   2127          
   2128          
   2129          
   2130          
   2131          //*-----------------------------------------------------------------------------
   2132          //* Nazwa funkcji :    V_line
   2133          //* Funkcja rysowania lini pionowej
   2134          //*-----------------------------------------------------------------------------
   2135          
   2136          //*  X          - wspó³¿êdna X zale¿na 
   2137          //*  Y          - wspó³¿êdna Y do³u napisu
   2138          //*  length     -d³ugoœæ
   2139          //*  typ        -0-bia³a 1=ci¹gla, 2=kropkowana, 3=kreskowana 
   2140          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   2141          void V_line (char X, int Y, char lenght, char typ) 
   2142          { 
   \                     V_line:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   2143              int kol=0;
   2144              char bit=0;
   2145            
   2146                kol=X/8;
   \   00000002   C408               LSRS     R4,R0,#+3
   2147                bit=X%8;
   \   00000004   E500               LSLS     R5,R4,#+3
   \   00000006   401B               SUBS     R0,R0,R5
   \   00000008   0006               LSLS     R0,R0,#+24
   \   0000000A   000E               LSRS     R0,R0,#+24
   2148                
   2149                if (typ==1) 
   \   0000000C   012B               CMP      R3,#+1
   \   0000000E   25D1               BNE      ??V_line_0
   2150                {
   2151                  for (int j=0; j<=lenght-1; j++)
   \   00000010   531E               SUBS     R3,R2,#+1
   \   00000012   7DD4               BMI      ??V_line_1
   \   00000014   E301               LSLS     R3,R4,#+7
   \   00000016   404C               LDR      R4,??V_line_2    ;; LCD_Canvas
   \   00000018   E318               ADDS     R3,R4,R3
   \   0000001A   5B18               ADDS     R3,R3,R1
   \   0000001C   0121               MOVS     R1,#+1
   \   0000001E   8140               LSLS     R1,R1,R0
   \   00000020   0325               MOVS     R5,#+3
   \   00000022   04E0               B        ??V_line_3
   2152                  {
   2153                    LCD_Canvas[kol][Y+j] |= (0x1)<<bit;
   \                     ??V_line_4:
   \   00000024   1C78               LDRB     R4,[R3, #+0]
   \   00000026   0C43               ORRS     R4,R4,R1
   \   00000028   1C70               STRB     R4,[R3, #+0]
   \   0000002A   521E               SUBS     R2,R2,#+1
   \   0000002C   5B1C               ADDS     R3,R3,#+1
   \                     ??V_line_3:
   \   0000002E   2A42               TST      R2,R5
   \   00000030   F8D1               BNE      ??V_line_4
   \   00000032   9208               LSRS     R2,R2,#+2
   \   00000034   6CD0               BEQ      ??V_line_1
   \   00000036   0121               MOVS     R1,#+1
   \   00000038   8140               LSLS     R1,R1,R0
   \                     ??V_line_5:
   \   0000003A   1878               LDRB     R0,[R3, #+0]
   \   0000003C   0843               ORRS     R0,R0,R1
   \   0000003E   1870               STRB     R0,[R3, #+0]
   \   00000040   5878               LDRB     R0,[R3, #+1]
   \   00000042   0843               ORRS     R0,R0,R1
   \   00000044   5870               STRB     R0,[R3, #+1]
   \   00000046   9878               LDRB     R0,[R3, #+2]
   \   00000048   0843               ORRS     R0,R0,R1
   \   0000004A   9870               STRB     R0,[R3, #+2]
   \   0000004C   D878               LDRB     R0,[R3, #+3]
   \   0000004E   0843               ORRS     R0,R0,R1
   \   00000050   D870               STRB     R0,[R3, #+3]
   2154                  }
   \   00000052   521E               SUBS     R2,R2,#+1
   \   00000054   1B1D               ADDS     R3,R3,#+4
   \   00000056   002A               CMP      R2,#+0
   \   00000058   EFD1               BNE      ??V_line_5
   \   0000005A   59E0               B        ??V_line_1
   2155                }
   2156                
   2157                if (typ==2) 
   \                     ??V_line_0:
   \   0000005C   022B               CMP      R3,#+2
   \   0000005E   16D1               BNE      ??V_line_6
   2158                {
   2159                  char zmiana=0;
   \   00000060   0025               MOVS     R5,#+0
   2160                  for (int j=0; j<=lenght-1; j++)
   \   00000062   561E               SUBS     R6,R2,#+1
   \   00000064   54D4               BMI      ??V_line_1
   \   00000066   E401               LSLS     R4,R4,#+7
   \   00000068   2B4E               LDR      R6,??V_line_2    ;; LCD_Canvas
   \   0000006A   3419               ADDS     R4,R6,R4
   \   0000006C   6418               ADDS     R4,R4,R1
   \   0000006E   0121               MOVS     R1,#+1
   \   00000070   8140               LSLS     R1,R1,R0
   \   00000072   C843               MVNS     R0,R1
   \   00000074   05E0               B        ??V_line_7
   2161                  {
   2162                    if (zmiana==0)
   2163                    {
   2164                      LCD_Canvas[kol][Y+j] |= (0x1)<<bit;
   2165                      zmiana=1;
   2166                    }
   2167                    else
   2168                    {
   2169                      LCD_Canvas[kol][Y+j] &= ~((0x1)<<bit);
   \                     ??V_line_8:
   \   00000076   0640               ANDS     R6,R6,R0
   2170                      zmiana=0;
   \   00000078   0025               MOVS     R5,#+0
   \                     ??V_line_9:
   \   0000007A   2670               STRB     R6,[R4, #+0]
   2171                    }
   \   0000007C   641C               ADDS     R4,R4,#+1
   \   0000007E   521E               SUBS     R2,R2,#+1
   \   00000080   46D0               BEQ      ??V_line_1
   \                     ??V_line_7:
   \   00000082   2678               LDRB     R6,[R4, #+0]
   \   00000084   002D               CMP      R5,#+0
   \   00000086   F6D1               BNE      ??V_line_8
   \   00000088   0E43               ORRS     R6,R6,R1
   \   0000008A   0125               MOVS     R5,#+1
   \   0000008C   F5E7               B        ??V_line_9
   2172                  }
   2173                }
   2174                
   2175                if (typ==3) 
   \                     ??V_line_6:
   \   0000008E   032B               CMP      R3,#+3
   \   00000090   18D1               BNE      ??V_line_10
   2176                {
   2177                  char zmiana=0;
   \   00000092   0025               MOVS     R5,#+0
   2178                  for (int j=0; j<=lenght-1; j++)
   \   00000094   561E               SUBS     R6,R2,#+1
   \   00000096   3BD4               BMI      ??V_line_1
   \   00000098   E401               LSLS     R4,R4,#+7
   \   0000009A   1F4E               LDR      R6,??V_line_2    ;; LCD_Canvas
   \   0000009C   3419               ADDS     R4,R6,R4
   \   0000009E   6418               ADDS     R4,R4,R1
   \   000000A0   0121               MOVS     R1,#+1
   \   000000A2   8140               LSLS     R1,R1,R0
   \   000000A4   C843               MVNS     R0,R1
   \   000000A6   05E0               B        ??V_line_11
   2179                  {
   2180                    if (zmiana<2)
   2181                    {
   2182                      LCD_Canvas[kol][Y+j] |= (0x1)<<bit;
   2183                      zmiana++;
   2184                    }
   2185                    else
   2186                    {
   2187                      LCD_Canvas[kol][Y+j] &= ~((0x1)<<bit);
   \                     ??V_line_12:
   \   000000A8   0640               ANDS     R6,R6,R0
   2188                      zmiana=0;
   \   000000AA   0025               MOVS     R5,#+0
   \                     ??V_line_13:
   \   000000AC   2670               STRB     R6,[R4, #+0]
   2189                    }
   \   000000AE   641C               ADDS     R4,R4,#+1
   \   000000B0   521E               SUBS     R2,R2,#+1
   \   000000B2   2DD0               BEQ      ??V_line_1
   \                     ??V_line_11:
   \   000000B4   2678               LDRB     R6,[R4, #+0]
   \   000000B6   2D06               LSLS     R5,R5,#+24
   \   000000B8   2D0E               LSRS     R5,R5,#+24
   \   000000BA   022D               CMP      R5,#+2
   \   000000BC   F4D2               BCS      ??V_line_12
   \   000000BE   0E43               ORRS     R6,R6,R1
   \   000000C0   6D1C               ADDS     R5,R5,#+1
   \   000000C2   F3E7               B        ??V_line_13
   2190                  }
   2191                }
   2192                
   2193                
   2194                if (typ==0) 
   \                     ??V_line_10:
   \   000000C4   002B               CMP      R3,#+0
   \   000000C6   23D1               BNE      ??V_line_1
   2195                {
   2196                   for (int j=0; j<=lenght-1; j++)
   \   000000C8   531E               SUBS     R3,R2,#+1
   \   000000CA   21D4               BMI      ??V_line_1
   \   000000CC   E301               LSLS     R3,R4,#+7
   \   000000CE   124C               LDR      R4,??V_line_2    ;; LCD_Canvas
   \   000000D0   E318               ADDS     R3,R4,R3
   \   000000D2   5B18               ADDS     R3,R3,R1
   \   000000D4   0121               MOVS     R1,#+1
   \   000000D6   8140               LSLS     R1,R1,R0
   \   000000D8   C843               MVNS     R0,R1
   \   000000DA   0325               MOVS     R5,#+3
   \   000000DC   04E0               B        ??V_line_14
   2197                    {
   2198                    LCD_Canvas[kol][Y+j] &= ~((0x1)<<bit);
   \                     ??V_line_15:
   \   000000DE   1C78               LDRB     R4,[R3, #+0]
   \   000000E0   0440               ANDS     R4,R4,R0
   \   000000E2   1C70               STRB     R4,[R3, #+0]
   \   000000E4   521E               SUBS     R2,R2,#+1
   \   000000E6   5B1C               ADDS     R3,R3,#+1
   \                     ??V_line_14:
   \   000000E8   2A42               TST      R2,R5
   \   000000EA   F8D1               BNE      ??V_line_15
   \   000000EC   9208               LSRS     R2,R2,#+2
   \   000000EE   0FD0               BEQ      ??V_line_1
   \                     ??V_line_16:
   \   000000F0   1978               LDRB     R1,[R3, #+0]
   \   000000F2   0140               ANDS     R1,R1,R0
   \   000000F4   1970               STRB     R1,[R3, #+0]
   \   000000F6   5978               LDRB     R1,[R3, #+1]
   \   000000F8   0140               ANDS     R1,R1,R0
   \   000000FA   5970               STRB     R1,[R3, #+1]
   \   000000FC   9978               LDRB     R1,[R3, #+2]
   \   000000FE   0140               ANDS     R1,R1,R0
   \   00000100   9970               STRB     R1,[R3, #+2]
   \   00000102   D978               LDRB     R1,[R3, #+3]
   \   00000104   0140               ANDS     R1,R1,R0
   \   00000106   D970               STRB     R1,[R3, #+3]
   2199                    }
   \   00000108   521E               SUBS     R2,R2,#+1
   \   0000010A   1B1D               ADDS     R3,R3,#+4
   \   0000010C   002A               CMP      R2,#+0
   \   0000010E   EFD1               BNE      ??V_line_16
   2200                  
   2201                }
   2202                
   2203                
   2204                
   2205                
   2206                
   2207          
   2208                  
   2209                /*
   2210                for (int j=1; j<=lenght; j++)
   2211                {
   2212                    
   2213                    if (typ>0) 
   2214                    {
   2215                      LCD_Canvas[kol][Y] |= (0x1)<<bit;
   2216                      if (bit<7) { bit++;} else {bit=0;  kol++; }
   2217                    }
   2218                   
   2219                    if ((typ==3) && ((j+1)<=lenght))
   2220                    {
   2221                      LCD_Canvas[kol][Y] |= (0x1)<<bit;
   2222                      if (bit<7) { bit++;} else {bit=0;  kol++;}
   2223                      j++;
   2224                    }
   2225                     if ((typ>=2) && ((j+1)<=lenght))
   2226                    {
   2227                      LCD_Canvas[kol][Y] &=~((0x1)<<bit);
   2228                      if (bit<7) { bit++;} else {bit=0;  kol++;}
   2229                      j++;
   2230                    }
   2231                    
   2232                }   
   2233                
   2234                
   2235                */
   2236          
   2237          }//_______________________ Koniec funkcji H_line ____________________________ 
   \                     ??V_line_1:
   \   00000110   70BC               POP      {R4-R6}
   \   00000112   01BC               POP      {R0}
   \   00000114   0047               BX       R0               ;; return
   \   00000116   C046               Nop      
   \                     ??V_line_2:
   \   00000118   ........           DC32     LCD_Canvas
   2238          
   2239          
   2240          
   2241          
   2242          //*-----------------------------------------------------------------------------
   2243          //* Nazwa funkcji :    Button
   2244          //* Uniwersalna funkcja przycisku
   2245          //*-----------------------------------------------------------------------------
   2246          //*  Label        - etykieta
   2247          //*  poz_X   - pozycja lewy róg
   2248          //*  poz_Y   - pozycja dolny róg
   2249          //*  DoPaint - 
   2250          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   2251          char Button (char _Label[15], char poz_X , char poz_Y ,char width, char height) 
   2252          { 
   \                     Button:
   \   00000000   FCB5               PUSH     {R2-R7,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
   \   00000004   0500               MOVS     R5,R0
   \   00000006   0C00               MOVS     R4,R1
   2253              char odp =0;
   \   00000008   6846               MOV      R0,SP
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   C170               STRB     R1,[R0, #+3]
   \   0000000E   1900               MOVS     R1,R3
   \   00000010   091F               SUBS     R1,R1,#+4
   \   00000012   0170               STRB     R1,[R0, #+0]
   \   00000014   0CA9               ADD      R1,SP,#+48
   \   00000016   0978               LDRB     R1,[R1, #+0]
   \   00000018   091F               SUBS     R1,R1,#+4
   \   0000001A   4170               STRB     R1,[R0, #+1]
   \   0000001C   82B0               SUB      SP,SP,#+8
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   0090               STR      R0,[SP, #+0]
   \   00000022   02A8               ADD      R0,SP,#+8
   \   00000024   4378               LDRB     R3,[R0, #+1]
   \   00000026   0278               LDRB     R2,[R0, #+0]
   \   00000028   017D               LDRB     R1,[R0, #+20]
   \   0000002A   891C               ADDS     R1,R1,#+2
   \   0000002C   0906               LSLS     R1,R1,#+24
   \   0000002E   090E               LSRS     R1,R1,#+24
   \   00000030   2000               MOVS     R0,R4
   \   00000032   801C               ADDS     R0,R0,#+2
   \   00000034   0006               LSLS     R0,R0,#+24
   \   00000036   000E               LSRS     R0,R0,#+24
   2254              
   2255              
   2256              CleanCanvasArea(poz_X+2, poz_Y+2, width-4, height-4,1);  //(char X, char Y, char X_Lenght, char Y_Lenght, char Type);   
   \   00000038   ........           BL       CleanCanvasArea
   \   0000003C   02B0               ADD      SP,SP,#+8
   2257              Label(_Label,2,poz_X+3,poz_Y+(height/2)-4,1,width-7,1,127,1);  //(char *Vstring, char alig, char X, int Y, char maxChar, char clean, char minY, char maxY, negatyw) 
   \   0000003E   6846               MOV      R0,SP
   \   00000040   077D               LDRB     R7,[R0, #+20]
   \   00000042   82B0               SUB      SP,SP,#+8
   \   00000044   0120               MOVS     R0,#+1
   \   00000046   0090               STR      R0,[SP, #+0]
   \   00000048   7F21               MOVS     R1,#+127
   \   0000004A   03B4               PUSH     {R0,R1}
   \   0000004C   04A8               ADD      R0,SP,#+16
   \   0000004E   007E               LDRB     R0,[R0, #+24]
   \   00000050   C11F               SUBS     R1,R0,#+7
   \   00000052   0120               MOVS     R0,#+1
   \   00000054   0906               LSLS     R1,R1,#+24
   \   00000056   090E               LSRS     R1,R1,#+24
   \   00000058   03B4               PUSH     {R0,R1}
   \   0000005A   12A8               ADD      R0,SP,#+72
   \   0000005C   0078               LDRB     R0,[R0, #+0]
   \   0000005E   4008               LSRS     R0,R0,#+1
   \   00000060   3B18               ADDS     R3,R7,R0
   \   00000062   1B1F               SUBS     R3,R3,#+4
   \   00000064   2200               MOVS     R2,R4
   \   00000066   D21C               ADDS     R2,R2,#+3
   \   00000068   1206               LSLS     R2,R2,#+24
   \   0000006A   120E               LSRS     R2,R2,#+24
   \   0000006C   0221               MOVS     R1,#+2
   \   0000006E   2800               MOVS     R0,R5
   \   00000070   ........           BL       Label
   \   00000074   06B0               ADD      SP,SP,#+24
   2258           
   2259          
   2260          
   2261              if ( (X_down>poz_X) && (X_down<poz_X+width) && (Y_down>poz_Y+2) && (Y_down<poz_Y+height))
   \   00000076   8948               LDR      R0,??Button_0    ;; X_down
   \   00000078   0068               LDR      R0,[R0, #+0]
   \   0000007A   8442               CMP      R4,R0
   \   0000007C   3BDA               BGE      ??Button_1
   \   0000007E   6946               MOV      R1,SP
   \   00000080   097E               LDRB     R1,[R1, #+24]
   \   00000082   6118               ADDS     R1,R4,R1
   \   00000084   8842               CMP      R0,R1
   \   00000086   36DA               BGE      ??Button_1
   \   00000088   3E00               MOVS     R6,R7
   \   0000008A   B61C               ADDS     R6,R6,#+2
   \   0000008C   8448               LDR      R0,??Button_0+0x4  ;; Y_down
   \   0000008E   0068               LDR      R0,[R0, #+0]
   \   00000090   8642               CMP      R6,R0
   \   00000092   30DA               BGE      ??Button_1
   \   00000094   0CA9               ADD      R1,SP,#+48
   \   00000096   0978               LDRB     R1,[R1, #+0]
   \   00000098   7D18               ADDS     R5,R7,R1
   \   0000009A   A842               CMP      R0,R5
   \   0000009C   2BDA               BGE      ??Button_1
   2262              {    
   2263                  H_line(poz_X+2,poz_Y+1,width-4,1); // (char X, int Y, char lenght, char typ) 
   \   0000009E   0123               MOVS     R3,#+1
   \   000000A0   6846               MOV      R0,SP
   \   000000A2   0278               LDRB     R2,[R0, #+0]
   \   000000A4   791C               ADDS     R1,R7,#+1
   \   000000A6   2000               MOVS     R0,R4
   \   000000A8   801C               ADDS     R0,R0,#+2
   \   000000AA   0006               LSLS     R0,R0,#+24
   \   000000AC   000E               LSRS     R0,R0,#+24
   \   000000AE   ........           BL       H_line
   2264                  H_line(poz_X+2,poz_Y+height-2,width-4,1); // (char X, int Y, char lenght, char typ) 
   \   000000B2   0123               MOVS     R3,#+1
   \   000000B4   6846               MOV      R0,SP
   \   000000B6   0278               LDRB     R2,[R0, #+0]
   \   000000B8   A91E               SUBS     R1,R5,#+2
   \   000000BA   2000               MOVS     R0,R4
   \   000000BC   801C               ADDS     R0,R0,#+2
   \   000000BE   0006               LSLS     R0,R0,#+24
   \   000000C0   000E               LSRS     R0,R0,#+24
   \   000000C2   ........           BL       H_line
   2265                  V_line(poz_X+1,poz_Y+2,height-4,1); // (char X, int Y, char lenght, char typ) 
   \   000000C6   0123               MOVS     R3,#+1
   \   000000C8   6846               MOV      R0,SP
   \   000000CA   4278               LDRB     R2,[R0, #+1]
   \   000000CC   3100               MOVS     R1,R6
   \   000000CE   2000               MOVS     R0,R4
   \   000000D0   401C               ADDS     R0,R0,#+1
   \   000000D2   0006               LSLS     R0,R0,#+24
   \   000000D4   000E               LSRS     R0,R0,#+24
   \   000000D6   ........           BL       V_line
   2266                  V_line(poz_X+width-2,poz_Y+2,height-4,1); // (char X, int Y, char lenght, char typ) 
   \   000000DA   0123               MOVS     R3,#+1
   \   000000DC   6846               MOV      R0,SP
   \   000000DE   4278               LDRB     R2,[R0, #+1]
   \   000000E0   3100               MOVS     R1,R6
   \   000000E2   007E               LDRB     R0,[R0, #+24]
   \   000000E4   2018               ADDS     R0,R4,R0
   \   000000E6   801E               SUBS     R0,R0,#+2
   \   000000E8   0006               LSLS     R0,R0,#+24
   \   000000EA   000E               LSRS     R0,R0,#+24
   \   000000EC   ........           BL       V_line
   2267                  odp=2;
   \   000000F0   6846               MOV      R0,SP
   \   000000F2   0221               MOVS     R1,#+2
   \   000000F4   CBE0               B.N      ??Button_2
   2268              }
   2269              else 
   2270              {
   2271                  
   2272                
   2273                 
   2274                  H_line(poz_X+2,poz_Y+1,width-4,0); // (char X, int Y, char lenght, char typ) 
   \                     ??Button_1:
   \   000000F6   3800               MOVS     R0,R7
   \   000000F8   401C               ADDS     R0,R0,#+1
   \   000000FA   0290               STR      R0,[SP, #+8]
   \   000000FC   0023               MOVS     R3,#+0
   \   000000FE   6846               MOV      R0,SP
   \   00000100   0278               LDRB     R2,[R0, #+0]
   \   00000102   0299               LDR      R1,[SP, #+8]
   \   00000104   2000               MOVS     R0,R4
   \   00000106   801C               ADDS     R0,R0,#+2
   \   00000108   0006               LSLS     R0,R0,#+24
   \   0000010A   000E               LSRS     R0,R0,#+24
   \   0000010C   ........           BL       H_line
   2275                  H_line(poz_X+2,poz_Y+height-2,width-4,0); // (char X, int Y, char lenght, char typ) 
   \   00000110   0CA8               ADD      R0,SP,#+48
   \   00000112   0078               LDRB     R0,[R0, #+0]
   \   00000114   3D18               ADDS     R5,R7,R0
   \   00000116   0023               MOVS     R3,#+0
   \   00000118   6846               MOV      R0,SP
   \   0000011A   0278               LDRB     R2,[R0, #+0]
   \   0000011C   A91E               SUBS     R1,R5,#+2
   \   0000011E   2000               MOVS     R0,R4
   \   00000120   801C               ADDS     R0,R0,#+2
   \   00000122   0006               LSLS     R0,R0,#+24
   \   00000124   000E               LSRS     R0,R0,#+24
   \   00000126   ........           BL       H_line
   2276                  V_line(poz_X+1,poz_Y+2,height-4,0); // (char X, int Y, char lenght, char typ) 
   \   0000012A   3E00               MOVS     R6,R7
   \   0000012C   B61C               ADDS     R6,R6,#+2
   \   0000012E   0023               MOVS     R3,#+0
   \   00000130   6846               MOV      R0,SP
   \   00000132   4278               LDRB     R2,[R0, #+1]
   \   00000134   3100               MOVS     R1,R6
   \   00000136   2000               MOVS     R0,R4
   \   00000138   401C               ADDS     R0,R0,#+1
   \   0000013A   0006               LSLS     R0,R0,#+24
   \   0000013C   000E               LSRS     R0,R0,#+24
   \   0000013E   ........           BL       V_line
   2277                  V_line(poz_X+width-2,poz_Y+2,height-4,0); // (char X, int Y, char lenght, char typ)   
   \   00000142   6846               MOV      R0,SP
   \   00000144   6946               MOV      R1,SP
   \   00000146   097E               LDRB     R1,[R1, #+24]
   \   00000148   6118               ADDS     R1,R4,R1
   \   0000014A   0170               STRB     R1,[R0, #+0]
   \   0000014C   6946               MOV      R1,SP
   \   0000014E   0978               LDRB     R1,[R1, #+0]
   \   00000150   891E               SUBS     R1,R1,#+2
   \   00000152   8170               STRB     R1,[R0, #+2]
   \   00000154   0023               MOVS     R3,#+0
   \   00000156   4278               LDRB     R2,[R0, #+1]
   \   00000158   3100               MOVS     R1,R6
   \   0000015A   8078               LDRB     R0,[R0, #+2]
   \   0000015C   ........           BL       V_line
   2278                 
   2279                  H_line(poz_X+1,poz_Y,width-2,1); // (char X, int Y, char lenght, char typ) 
   \   00000160   6846               MOV      R0,SP
   \   00000162   6946               MOV      R1,SP
   \   00000164   097E               LDRB     R1,[R1, #+24]
   \   00000166   891E               SUBS     R1,R1,#+2
   \   00000168   4170               STRB     R1,[R0, #+1]
   \   0000016A   0123               MOVS     R3,#+1
   \   0000016C   4278               LDRB     R2,[R0, #+1]
   \   0000016E   3900               MOVS     R1,R7
   \   00000170   2000               MOVS     R0,R4
   \   00000172   401C               ADDS     R0,R0,#+1
   \   00000174   0006               LSLS     R0,R0,#+24
   \   00000176   000E               LSRS     R0,R0,#+24
   \   00000178   ........           BL       H_line
   2280                  H_line(poz_X+1,poz_Y+height-1,width-2,1); // (char X, int Y, char lenght, char typ) 
   \   0000017C   0123               MOVS     R3,#+1
   \   0000017E   6846               MOV      R0,SP
   \   00000180   4278               LDRB     R2,[R0, #+1]
   \   00000182   691E               SUBS     R1,R5,#+1
   \   00000184   2000               MOVS     R0,R4
   \   00000186   401C               ADDS     R0,R0,#+1
   \   00000188   0006               LSLS     R0,R0,#+24
   \   0000018A   000E               LSRS     R0,R0,#+24
   \   0000018C   ........           BL       H_line
   2281                  V_line(poz_X,poz_Y+1,height-2,1); // (char X, int Y, char lenght, char typ) 
   \   00000190   0CA8               ADD      R0,SP,#+48
   \   00000192   0078               LDRB     R0,[R0, #+0]
   \   00000194   871E               SUBS     R7,R0,#+2
   \   00000196   0123               MOVS     R3,#+1
   \   00000198   3A06               LSLS     R2,R7,#+24
   \   0000019A   120E               LSRS     R2,R2,#+24
   \   0000019C   0299               LDR      R1,[SP, #+8]
   \   0000019E   2000               MOVS     R0,R4
   \   000001A0   ........           BL       V_line
   2282                  V_line(poz_X+width-1,poz_Y+1,height-2,1); // (char X, int Y, char lenght, char typ) 
   \   000001A4   0123               MOVS     R3,#+1
   \   000001A6   3A06               LSLS     R2,R7,#+24
   \   000001A8   120E               LSRS     R2,R2,#+24
   \   000001AA   0299               LDR      R1,[SP, #+8]
   \   000001AC   6846               MOV      R0,SP
   \   000001AE   0078               LDRB     R0,[R0, #+0]
   \   000001B0   401E               SUBS     R0,R0,#+1
   \   000001B2   0006               LSLS     R0,R0,#+24
   \   000001B4   000E               LSRS     R0,R0,#+24
   \   000001B6   ........           BL       V_line
   2283              
   2284                  CanvasPixel(poz_X+1, poz_Y+1,1);   //(char X, char Y, char Colour)
   \   000001BA   6846               MOV      R0,SP
   \   000001BC   007D               LDRB     R0,[R0, #+20]
   \   000001BE   401C               ADDS     R0,R0,#+1
   \   000001C0   6B46               MOV      R3,SP
   \   000001C2   2100               MOVS     R1,R4
   \   000001C4   491C               ADDS     R1,R1,#+1
   \   000001C6   1970               STRB     R1,[R3, #+0]
   \   000001C8   6946               MOV      R1,SP
   \   000001CA   1B78               LDRB     R3,[R3, #+0]
   \   000001CC   DB08               LSRS     R3,R3,#+3
   \   000001CE   4B70               STRB     R3,[R1, #+1]
   \   000001D0   D901               LSLS     R1,R3,#+7
   \   000001D2   344B               LDR      R3,??Button_0+0x8  ;; LCD_Canvas
   \   000001D4   5918               ADDS     R1,R3,R1
   \   000001D6   0391               STR      R1,[SP, #+12]
   \   000001D8   0106               LSLS     R1,R0,#+24
   \   000001DA   090E               LSRS     R1,R1,#+24
   \   000001DC   039A               LDR      R2,[SP, #+12]
   \   000001DE   5218               ADDS     R2,R2,R1
   \   000001E0   6B46               MOV      R3,SP
   \   000001E2   08B5               PUSH     {R3,LR}
   \   000001E4   1F78               LDRB     R7,[R3, #+0]
   \   000001E6   5B78               LDRB     R3,[R3, #+1]
   \   000001E8   DB00               LSLS     R3,R3,#+3
   \   000001EA   FB1A               SUBS     R3,R7,R3
   \   000001EC   0127               MOVS     R7,#+1
   \   000001EE   9F40               LSLS     R7,R7,R3
   \   000001F0   009B               LDR      R3,[SP, #0]
   \   000001F2   02B0               ADD      SP,SP,#+8
   \   000001F4   1F71               STRB     R7,[R3, #+4]
   \   000001F6   1378               LDRB     R3,[R2, #+0]
   \   000001F8   6F46               MOV      R7,SP
   \   000001FA   3F79               LDRB     R7,[R7, #+4]
   \   000001FC   1F43               ORRS     R7,R7,R3
   \   000001FE   1770               STRB     R7,[R2, #+0]
   2285                  CanvasPixel(poz_X+width-2, poz_Y+1,1);   //(char X, char Y, char Colour)
   \   00000200   6A46               MOV      R2,SP
   \   00000202   1070               STRB     R0,[R2, #+0]
   \   00000204   6846               MOV      R0,SP
   \   00000206   8378               LDRB     R3,[R0, #+2]
   \   00000208   D808               LSRS     R0,R3,#+3
   \   0000020A   C201               LSLS     R2,R0,#+7
   \   0000020C   254F               LDR      R7,??Button_0+0x8  ;; LCD_Canvas
   \   0000020E   BA18               ADDS     R2,R7,R2
   \   00000210   0492               STR      R2,[SP, #+16]
   \   00000212   5118               ADDS     R1,R2,R1
   \   00000214   6F46               MOV      R7,SP
   \   00000216   C200               LSLS     R2,R0,#+3
   \   00000218   9A1A               SUBS     R2,R3,R2
   \   0000021A   0123               MOVS     R3,#+1
   \   0000021C   9340               LSLS     R3,R3,R2
   \   0000021E   BB71               STRB     R3,[R7, #+6]
   \   00000220   0A78               LDRB     R2,[R1, #+0]
   \   00000222   6B46               MOV      R3,SP
   \   00000224   9B79               LDRB     R3,[R3, #+6]
   \   00000226   1343               ORRS     R3,R3,R2
   \   00000228   0B70               STRB     R3,[R1, #+0]
   2286                  CanvasPixel(poz_X+1, poz_Y+height-2,1);   //(char X, char Y, char Colour)
   \   0000022A   6946               MOV      R1,SP
   \   0000022C   6A46               MOV      R2,SP
   \   0000022E   127D               LDRB     R2,[R2, #+20]
   \   00000230   0CAB               ADD      R3,SP,#+48
   \   00000232   1B78               LDRB     R3,[R3, #+0]
   \   00000234   D218               ADDS     R2,R2,R3
   \   00000236   921E               SUBS     R2,R2,#+2
   \   00000238   4A71               STRB     R2,[R1, #+5]
   \   0000023A   4A79               LDRB     R2,[R1, #+5]
   \   0000023C   6B46               MOV      R3,SP
   \   0000023E   2100               MOVS     R1,R4
   \   00000240   491C               ADDS     R1,R1,#+1
   \   00000242   1970               STRB     R1,[R3, #+0]
   \   00000244   6946               MOV      R1,SP
   \   00000246   4978               LDRB     R1,[R1, #+1]
   \   00000248   0291               STR      R1,[SP, #+8]
   \   0000024A   0399               LDR      R1,[SP, #+12]
   \   0000024C   8918               ADDS     R1,R1,R2
   \   0000024E   0B78               LDRB     R3,[R1, #+0]
   \   00000250   3F79               LDRB     R7,[R7, #+4]
   \   00000252   1F43               ORRS     R7,R7,R3
   \   00000254   0F70               STRB     R7,[R1, #+0]
   2287                  CanvasPixel(poz_X+width-2, poz_Y+height-2 ,1);   //(char X, char Y, char Colour)
   \   00000256   6946               MOV      R1,SP
   \   00000258   6B46               MOV      R3,SP
   \   0000025A   5B79               LDRB     R3,[R3, #+5]
   \   0000025C   0B70               STRB     R3,[R1, #+0]
   \   0000025E   049B               LDR      R3,[SP, #+16]
   \   00000260   9A18               ADDS     R2,R3,R2
   \   00000262   1378               LDRB     R3,[R2, #+0]
   \   00000264   6F46               MOV      R7,SP
   \   00000266   BF79               LDRB     R7,[R7, #+6]
   \   00000268   1F43               ORRS     R7,R7,R3
   \   0000026A   1770               STRB     R7,[R2, #+0]
   2288                  
   2289                  
   2290                  if ( (X_up>poz_X) && (X_up<poz_X+width) && (Y_up>poz_Y+2) && (Y_up<poz_Y+height))
   \   0000026C   0E4A               LDR      R2,??Button_0+0xC  ;; X_up
   \   0000026E   1268               LDR      R2,[R2, #+0]
   \   00000270   9442               CMP      R4,R2
   \   00000272   0DDA               BGE      ??Button_3
   \   00000274   6846               MOV      R0,SP
   \   00000276   007E               LDRB     R0,[R0, #+24]
   \   00000278   2018               ADDS     R0,R4,R0
   \   0000027A   8242               CMP      R2,R0
   \   0000027C   08DA               BGE      ??Button_3
   \   0000027E   0B48               LDR      R0,??Button_0+0x10  ;; Y_up
   \   00000280   0068               LDR      R0,[R0, #+0]
   \   00000282   8642               CMP      R6,R0
   \   00000284   04DA               BGE      ??Button_3
   \   00000286   A842               CMP      R0,R5
   \   00000288   02DA               BGE      ??Button_3
   2291                  {    
   2292                    odp =1;
   \   0000028A   6846               MOV      R0,SP
   \   0000028C   0121               MOVS     R1,#+1
   \                     ??Button_2:
   \   0000028E   C170               STRB     R1,[R0, #+3]
   2293                  }
   2294              }
   2295          
   2296              return odp;
   \                     ??Button_3:
   \   00000290   6846               MOV      R0,SP
   \   00000292   C078               LDRB     R0,[R0, #+3]
   \   00000294   07B0               ADD      SP,SP,#+28
   \   00000296   F0BC               POP      {R4-R7}
   \   00000298   02BC               POP      {R1}
   \   0000029A   0847               BX       R1               ;; return
   \                     ??Button_0:
   \   0000029C   ........           DC32     X_down
   \   000002A0   ........           DC32     Y_down
   \   000002A4   ........           DC32     LCD_Canvas
   \   000002A8   ........           DC32     X_up
   \   000002AC   ........           DC32     Y_up
   2297              
   2298          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     chipSelect

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   1001003C           DC32     0x3c000110

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   10810004           DC32     0x4008110

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   1C81007E           DC32     0x7e00811c

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   30F4FFFF           DC32     0xfffff430

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     LCD_Canvas

   \                                 In section .rodata, align 4
   \                     `?<Constant {{255, 1, 255, 255, 255, 255, 255, `:
   \   00000000   FF01FFFFFFFF       DC8 255, 1, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FFFF        
   \   0000000E   FFFFFEFCFF00       DC8 255, 255, 254, 252, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FFFF        
   \   0000001C   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 255, 255, 255
   \              FFFFFF00FFFF
   \              FFFF        
   \   0000002A   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0
   \              FFFFFFFFFFFF
   \              FF00        
   \   00000038   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FF          
   \   00000045   FFFFFFFF00FF       DC8 255, 255, 255, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FFFF        
   \   00000053   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 255, 127, 127, 127
   \              FFFF00FFFF7F
   \              7F7F        
   \   00000061   7F7F7F7F7F7F       DC8 127, 127, 127, 127, 127, 127, 127, 127, 127, 255, 255, 255, 0, 255
   \              7F7F7FFFFFFF
   \              00FF        
   \   0000006F   00FEFFFBF76F       DC8 0, 254, 255, 251, 247, 111, 159, 159, 111, 247, 251, 255, 254, 0
   \              9F9F6FF7FBFF
   \              FE00        
   \   0000007D   FFFF80FFF0E7       DC8 255, 255, 128, 255, 240, 231, 239, 237, 238, 239, 239, 239, 239
   \              EFEDEEEFEFEF
   \              EF          
   \   0000008A   EEED6F67301F       DC8 238, 237, 111, 103, 48, 31

   \                                 In section .rodata, align 4
   \                     `?<Constant {{254, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1`:
   \   00000000   FE0101010101       DC8 254, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
   \              010101010101
   \              010101010101
   \              01010101    
   \   00000016   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
   \              010101010101
   \              010101010101
   \              0101010101  
   \   0000002D   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
   \              010101010101
   \              010101010101
   \              0101010101  
   \   00000044   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
   \              010101010101
   \              010101010101
   \              0101010101  
   \   0000005B   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
   \              010101010101
   \              010101010101
   \              0101010101  
   \   00000072   FF03FDF5EDDD       DC8 255, 3, 253, 245, 237, 221, 61, 61, 221, 237, 245, 253, 3, 254, 255
   \              3D3DDDEDF5FD
   \              03FEFF      
   \   00000081   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000AF   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000C6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000DD   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255
   \              000000000000
   \              000000000000
   \              000000FF    
   \   000000F3   F0EFEBEDEEEF       DC8 240, 239, 235, 237, 238, 239, 239, 238, 237, 235, 239, 240, 255
   \              EFEEEDEBEFF0
   \              FF          
   \   00000100   FF0000000000       DC8 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000116   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000012D   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000144   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000015B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000172   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FF          
   \   0000017F   FFFF00000000       DC8 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      
   \   00000194   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000001AB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000001C2   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000001D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000001F0   0000FFFFFFFF       DC8 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FFFF        
   \   000001FE   FFFFFF000000       DC8 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      
   \   00000213   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000022A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000241   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000026F   000000FFFFFF       DC8 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FFFFFF      
   \   0000027E   FFFFFF000000       DC8 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      
   \   00000293   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002AA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002C1   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002EF   000000FFFFFF       DC8 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FFFFFF      
   \   000002FE   FFFFFF602020       DC8 255, 255, 255, 96, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
   \              202020202020
   \              20202020    
   \   0000030E   2020E060A060       DC8 32, 32, 224, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160
   \              A060A060A060
   \              A060A0      
   \   0000031D   60A060A060A0       DC8 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96
   \              60A060A060A0
   \              60A060      
   \   0000032C   A060A060A060       DC8 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160
   \              A060A060A060
   \              A060A0      
   \   0000033B   60A060A060A0       DC8 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96
   \              60A060A060A0
   \              60A060      
   \   0000034A   A060A060A060       DC8 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160, 96, 160
   \              A060A060A060
   \              A060A0      
   \   00000359   60A060A060A0       DC8 96, 160, 96, 160, 96, 160, 96, 160, 96, 224, 32, 32, 32, 32, 32, 32
   \              60A060E02020
   \              20202020    
   \   00000369   202020202020       DC8 32, 32, 32, 32, 32, 32, 32, 32, 96, 255, 255, 255, 255, 255, 255
   \              202060FFFFFF
   \              FFFFFF      
   \   00000378   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 127, 192, 128, 128, 128
   \              FFFF7FC08080
   \              80          
   \   00000385   80848E9F9B80       DC8 128, 132, 142, 159, 155, 128, 128, 128, 128, 128, 128, 255, 213
   \              8080808080FF
   \              D5          
   \   00000392   AAD5AAD5AAD5       DC8 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170
   \              AAD5AAD5AAD5
   \              AA          
   \   0000039F   D5AAD5AAD5AA       DC8 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213
   \              D5AAD5AAD5AA
   \              D5          
   \   000003AC   AAD5AAD5AAD5       DC8 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170
   \              AAD5AAD5AAD5
   \              AA          
   \   000003B9   D5AAD5AAD5AA       DC8 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213
   \              D5AAD5AAD5AA
   \              D5          
   \   000003C6   AAD5AAD5AAD5       DC8 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170
   \              AAD5AAD5AAD5
   \              AA          
   \   000003D3   D5AAD5AAD5AA       DC8 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213, 170, 213
   \              D5AAD5AAD5AA
   \              D5          
   \   000003E0   AAD5FF808080       DC8 170, 213, 255, 128, 128, 128, 128, 155, 159, 142, 132, 128, 128
   \              809B9F8E8480
   \              80          
   \   000003ED   80808080C0FF       DC8 128, 128, 128, 128, 192, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FF          
   \   000003FA   FFFFFFFF7F3F       DC8 255, 255, 255, 255, 127, 63
   \   00000400   80FFFFFFFFE0       DC8 128, 255, 255, 255, 255, 224, 238, 238, 224, 255, 255, 255, 255
   \              EEEEE0FFFFFF
   \              FF          
   \   0000040D   800000             DC8 128, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {{249, 13, 245, 245, 245, 245, 245,`:
   \   00000000   F90DF5F5F5F5       DC8 249, 13, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 13
   \              F5F5F5F5F5F5
   \              F50D        
   \   0000000E   F9FF00FFFF77       DC8 249, 255, 0, 255, 255, 119, 55, 55, 87, 103, 103, 119, 255, 255, 0
   \              373757676777
   \              FFFF00      
   \   0000001D   FFFF00FFFFC7       DC8 255, 255, 0, 255, 255, 199, 187, 187, 187, 187, 187, 199, 255, 255
   \              BBBBBBBBBBC7
   \              FFFF        
   \   0000002B   00FF3F605F5F       DC8 0, 255, 63, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 63
   \              5F5F5F5F5F5F
   \              5F5F5F603F  
   \   0000003C   FE03FDFDFDFD       DC8 254, 3, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 3
   \              FDFDFDFDFDFD
   \              FD03        
   \   0000004A   FEFF00FFFFE3       DC8 254, 255, 0, 255, 255, 227, 221, 221, 221, 221, 221, 227, 255, 255
   \              DDDDDDDDDDE3
   \              FFFF        
   \   00000058   00FFFF00FFFF       DC8 0, 255, 255, 0, 255, 255, 238, 246, 250, 252, 250, 246, 238, 255
   \              EEF6FAFCFAF6
   \              EEFF        
   \   00000066   FF00FFCFD8D7       DC8 255, 0, 255, 207, 216, 215, 215, 215, 215, 215, 215, 215, 215, 215
   \              D7D7D7D7D7D7
   \              D7D7        
   \   00000074   D7D7D8CF           DC8 215, 215, 216, 207

   \                                 In section .rodata, align 4
   \                     `?<Constant {{254, 255, 3, 249, 5, 245, 245, 24`:
   \   00000000   FEFF03F905F5       DC8 254, 255, 3, 249, 5, 245, 245, 245, 245, 245, 245, 245, 245, 245
   \              F5F5F5F5F5F5
   \              F5F5        
   \   0000000E   F5F5F5F5F505       DC8 245, 245, 245, 245, 245, 5, 249, 1, 1, 249, 5, 245, 245, 245, 245
   \              F90101F905F5
   \              F5F5F5      
   \   0000001D   F5F5F5F5F5F5       DC8 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 5, 249, 1, 1, 249
   \              F5F5F5F505F9
   \              0101F9      
   \   0000002C   05F5F5F5F5F5       DC8 5, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245
   \              F5F5F5F5F5F5
   \              F5F5        
   \   0000003A   F505F90101F9       DC8 245, 5, 249, 1, 1, 249, 5, 245, 245, 245, 245, 245, 245, 245, 245
   \              05F5F5F5F5F5
   \              F5F5F5      
   \   00000049   F5F5F5F5F5F5       DC8 245, 245, 245, 245, 245, 245, 5, 249, 3, 255, 255, 255, 3, 3, 3, 3
   \              05F903FFFFFF
   \              03030303    
   \   00000059   030303030303       DC8 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
   \              030303030303
   \              030303030303
   \              0303030303  
   \   00000070   FF03FFFFFFFF       DC8 255, 3, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 254
   \              FFFFFFFFFFFF
   \              FFFE        
   \   0000007E   FCF8FFFF00FF       DC8 252, 248, 255, 255, 0, 255, 0, 255, 255, 255, 255, 255, 255, 255
   \              00FFFFFFFFFF
   \              FFFF        
   \   0000008C   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 0, 255, 0, 0, 255, 0, 255, 255
   \              FF00FF0000FF
   \              00FFFF      
   \   0000009B   F9F9F9F3F3F3       DC8 249, 249, 249, 243, 243, 243, 231, 231, 207, 192, 255, 255, 0, 255
   \              E7E7CFC0FFFF
   \              00FF        
   \   000000A9   0000FF00FFFF       DC8 0, 0, 255, 0, 255, 255, 231, 231, 192, 230, 229, 229, 227, 227, 231
   \              E7E7C0E6E5E5
   \              E3E3E7      
   \   000000B8   E7FFFF00FF00       DC8 231, 255, 255, 0, 255, 0, 0, 255, 0, 255, 255, 231, 231, 231, 231
   \              00FF00FFFFE7
   \              E7E7E7      
   \   000000C7   E7E7E5E1E3E7       DC8 231, 231, 229, 225, 227, 231, 255, 255, 0, 255, 0, 255, 255, 255, 0
   \              FFFF00FF00FF
   \              FFFF00      
   \   000000D6   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000ED   000000FF00FF       DC8 0, 0, 0, 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FFFFFF      
   \   000000FC   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 0, 7, 136, 139, 139, 139, 139, 139
   \              0007888B8B8B
   \              8B8B        
   \   0000010A   8B8B8B8B8B8B       DC8 139, 139, 139, 139, 139, 139, 139, 139, 139, 136, 7, 0, 0, 7, 136
   \              8B8B8B880700
   \              000788      
   \   00000119   8B8B8B8B8B8B       DC8 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139
   \              8B8B8B8B8B8B
   \              8B          
   \   00000126   8B8807000007       DC8 139, 136, 7, 0, 0, 7, 136, 139, 139, 139, 139, 139, 139, 139, 139
   \              888B8B8B8B8B
   \              8B8B8B      
   \   00000135   8B8B8B8B8B8B       DC8 139, 139, 139, 139, 139, 139, 136, 7, 0, 0, 7, 136, 139, 139, 139
   \              880700000788
   \              8B8B8B      
   \   00000144   8B8B8B8B8B8B       DC8 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 136, 7, 0
   \              8B8B8B8B8B88
   \              0700        
   \   00000152   FFFFFF000000       DC8 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      
   \   00000167   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 255, 255, 255, 255, 255
   \              000000FF00FF
   \              FFFFFFFFFF  
   \   00000178   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 0, 254
   \              FFFFFFFF00FF
   \              00FE        
   \   00000186   FE3E9E9E9E9E       DC8 254, 62, 158, 158, 158, 158, 158, 158, 158, 158, 62, 254, 254, 0
   \              9E9E9E9E3EFE
   \              FE00        
   \   00000194   FF0000FF00FE       DC8 255, 0, 0, 255, 0, 254, 254, 62, 158, 158, 158, 158, 62, 158, 158
   \              FE3E9E9E9E9E
   \              3E9E9E      
   \   000001A3   9E3EFEFE00FF       DC8 158, 62, 254, 254, 0, 255, 0, 0, 255, 0, 254, 254, 62, 158, 254
   \              0000FF00FEFE
   \              3E9EFE      
   \   000001B2   FEFE9E1E9E3E       DC8 254, 254, 158, 30, 158, 62, 62, 254, 254, 0, 255, 0, 0, 255, 0, 254
   \              3EFEFE00FF00
   \              00FF00FE    
   \   000001C2   FE1E9E3E7E7E       DC8 254, 30, 158, 62, 126, 126, 254, 254, 254, 158, 62, 254, 254, 0
   \              FEFEFE9E3EFE
   \              FE00        
   \   000001D0   FF00FFFFFF00       DC8 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   000001E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 255, 255, 255, 255
   \              000000000000
   \              FF00FFFFFFFF
   \              FF          
   \   000001F7   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 0
   \              FFFFFFFFFF00
   \              FF00        
   \   00000205   7F7F7C797979       DC8 127, 127, 124, 121, 121, 121, 121, 121, 121, 121, 121, 124, 127
   \              79797979797C
   \              7F          
   \   00000212   7F00FF0000FF       DC8 127, 0, 255, 0, 0, 255, 0, 127, 127, 124, 121, 121, 121, 121, 124
   \              007F7F7C7979
   \              79797C      
   \   00000221   7979797C7F7F       DC8 121, 121, 121, 124, 127, 127, 0, 255, 0, 0, 255, 0, 127, 127, 124
   \              00FF0000FF00
   \              7F7F7C      
   \   00000230   79797979797C       DC8 121, 121, 121, 121, 121, 124, 127, 127, 120, 127, 127, 0, 255, 0, 0
   \              7F7F787F7F00
   \              FF0000      
   \   0000023F   FF007F7F787F       DC8 255, 0, 127, 127, 120, 127, 127, 126, 124, 124, 121, 121, 121, 124
   \              7F7E7C7C7979
   \              797C        
   \   0000024D   7F7F00FF00FF       DC8 127, 127, 0, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              FFFF00000000
   \              000000000000
   \              00          
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 255
   \              000000000000
   \              00000000FF00
   \              FFFF        
   \   00000274   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255
   \              FFFFFFFFFFFF
   \              FF          
   \   00000281   FF00E011D1D1       DC8 255, 0, 224, 17, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209
   \              D1D1D1D1D1D1
   \              D1D1        
   \   0000028F   D1D1D1D111E0       DC8 209, 209, 209, 209, 17, 224, 0, 0, 224, 17, 209, 209, 209, 209, 209
   \              0000E011D1D1
   \              D1D1D1      
   \   0000029E   D1D1D1D1D1D1       DC8 209, 209, 209, 209, 209, 209, 209, 209, 209, 17, 224, 0, 0, 224, 17
   \              D1D1D111E000
   \              00E011      
   \   000002AD   D1D1D1D1D1D1       DC8 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209
   \              D1D1D1D1D1D1
   \              D1          
   \   000002BA   D111E00000E0       DC8 209, 17, 224, 0, 0, 224, 17, 209, 209, 209, 209, 209, 209, 209, 209
   \              11D1D1D1D1D1
   \              D1D1D1      
   \   000002C9   D1D1D1D1D1D1       DC8 209, 209, 209, 209, 209, 209, 17, 224, 0, 255, 255, 255, 0, 0, 0, 0
   \              11E000FFFFFF
   \              00000000    
   \   000002D9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002F0   FFC07F7F7F7F       DC8 255, 192, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127
   \              7F7F7F7F7F7F
   \              7F          
   \   000002FD   7FFFFFFFFF00       DC8 127, 255, 255, 255, 255, 0, 255, 0, 255, 255, 255, 255, 255, 255
   \              FF00FFFFFFFF
   \              FFFF        
   \   0000030B   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 0, 0, 255, 0, 255
   \              FFFF00FF0000
   \              FF00FF      
   \   0000031A   FFC7B33F3F07       DC8 255, 199, 179, 63, 63, 7, 51, 51, 51, 51, 135, 255, 255, 0, 255, 0
   \              3333333387FF
   \              FF00FF00    
   \   0000032A   00FF00FFFF87       DC8 0, 255, 0, 255, 255, 135, 51, 51, 49, 49, 129, 241, 243, 55, 143
   \              3333313181F1
   \              F3378F      
   \   00000339   FFFF00FF0000       DC8 255, 255, 0, 255, 0, 0, 255, 0, 255, 255, 135, 51, 63, 63, 63, 143
   \              FF00FFFF8733
   \              3F3F3F8F    
   \   00000349   3F3F3387FFFF       DC8 63, 63, 51, 135, 255, 255, 0, 255, 0, 255, 255, 255, 0, 0, 0, 0, 0
   \              00FF00FFFFFF
   \              0000000000  
   \   0000035A   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000370   FF00FEFFFBF7       DC8 255, 0, 254, 255, 251, 247, 111, 159, 159, 111, 247, 251, 255, 254
   \              6F9F9F6FF7FB
   \              FFFE        
   \   0000037E   00FF7FFFC09F       DC8 0, 255, 127, 255, 192, 159, 160, 175, 175, 175, 175, 175, 175, 175
   \              A0AFAFAFAFAF
   \              AFAF        
   \   0000038C   AFAFAFAFAFAF       DC8 175, 175, 175, 175, 175, 175, 175, 160, 159, 128, 128, 159, 160
   \              AFA09F80809F
   \              A0          
   \   00000399   AFAFAFAFAFAF       DC8 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175
   \              AFAFAFAFAFAF
   \              AF          
   \   000003A6   AFA09F80809F       DC8 175, 160, 159, 128, 128, 159, 160, 175, 175, 175, 175, 175, 175
   \              A0AFAFAFAFAF
   \              AF          
   \   000003B3   AFAFAFAFAFAF       DC8 175, 175, 175, 175, 175, 175, 175, 175, 160, 159, 128, 128, 159
   \              AFAFA09F8080
   \              9F          
   \   000003C0   A0AFAFAFAFAF       DC8 160, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175, 175
   \              AFAFAFAFAFAF
   \              AF          
   \   000003CD   AFAFA09FC0FF       DC8 175, 175, 160, 159, 192, 255, 255, 255, 192, 192, 192, 192, 192
   \              FFFFC0C0C0C0
   \              C0          
   \   000003DA   C0C0C0C0C0C0       DC8 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192
   \              C0C0C0C0C0C0
   \              C0          
   \   000003E7   C0C0C0C0C0C0       DC8 192, 192, 192, 192, 192, 192, 192, 192, 192, 255, 240, 231, 239
   \              C0C0C0FFF0E7
   \              EF          
   \   000003F4   EDEEEFEFEFEF       DC8 237, 238, 239, 239, 239, 239, 238, 237, 239, 103, 48, 31
   \              EEEDEF67301F

   \                                 In section .rodata, align 4
   \                     `?<Constant {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, `:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000017   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 1, 253, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
   \              0000FF01FD05
   \              050505050505
   \              050505      
   \   0000002C   050505050505       DC8 5, 5, 5, 5, 5, 5, 5, 5, 229, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
   \              0505E5050505
   \              050505050505
   \              05050505    
   \   00000042   050505050505       DC8 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5
   \              050505050505
   \              050505050505
   \              0505050505  
   \   00000059   050505050505       DC8 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 253, 1, 255, 0, 0, 0, 0, 0, 0, 0
   \              0505050505FD
   \              01FF00000000
   \              000000      
   \   0000006E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000085   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000009C   000000FF00FF       DC8 0, 0, 0, 255, 0, 255, 0, 0, 248, 12, 244, 244, 244, 244, 244, 244
   \              0000F80CF4F4
   \              F4F4F4F4    
   \   000000AC   F4F4F4F40CF8       DC8 244, 244, 244, 244, 12, 248, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0000FF000000
   \              000000000000
   \   000000BE   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000000D5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 0, 0, 0
   \              000000000000
   \              000000FF00FF
   \              000000      
   \   000000EA   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000101   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 0, 0, 255, 0, 255, 255, 255, 255
   \              00FF00FF0000
   \              FF00FFFFFFFF
   \   0000012A   FFFFFFFFFFFF       DC8 255, 255, 255, 255, 255, 255, 0, 255, 0, 0, 255, 0, 0, 0, 0, 0, 0
   \              00FF0000FF00
   \              0000000000  
   \   0000013B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000152   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255
   \              000000000000
   \              000000000000
   \              FF00FF      
   \   00000167   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000017E   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000195   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 0, 0, 255, 0, 255, 255
   \              00000000FF00
   \              FF0000FF00FF
   \              FF          
   \   000001A8   C7BBBBBBBBBB       DC8 199, 187, 187, 187, 187, 187, 199, 255, 0, 255, 0, 0, 255, 0, 0, 0
   \              C7FF00FF0000
   \              FF000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000001CF   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255
   \              000000000000
   \              000000000000
   \              000000FF    
   \   000001E5   00FF00000000       DC8 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00000000    
   \   000001FB   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000212   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 0, 0, 255, 0
   \              000000000000
   \              00FF00FF0000
   \              FF00        
   \   00000226   FFFFDDEDF5F9       DC8 255, 255, 221, 237, 245, 249, 245, 237, 221, 255, 0, 255, 0, 0, 255
   \              F5EDDDFF00FF
   \              0000FF      
   \   00000235   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000024C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   00000263   00FF00FF0000       DC8 0, 255, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              000000      
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000028F   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 255, 0, 0
   \              000000000000
   \              00000000FF00
   \              FF0000      
   \   000002A4   FF00FFFFFFFF       DC8 255, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 255, 0
   \              FFFFFFFFFFFF
   \              00FF00      
   \   000002B3   00FF00000000       DC8 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00000000    
   \   000002C9   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   000002E0   00000000FF00       DC8 0, 0, 0, 0, 255, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              FF0000000000
   \              000000000000
   \              000000      
   \   000002F5   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000030C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0
   \              000000000000
   \              000000000000
   \              00FF00      
   \   00000321   FF00003F605F       DC8 255, 0, 0, 63, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 63
   \              5F5F5F5F5F5F
   \              5F5F5F603F  
   \   00000332   0000FF000000       DC8 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000035F   0000000000FF       DC8 0, 0, 0, 0, 0, 255, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              00FF00000000
   \              000000000000
   \              000000      
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000000000  
   \   0000038B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255
   \              000000000000
   \              000000000000
   \              0000FF      
   \   000003A0   80BFA0A0A0A0       DC8 128, 191, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160
   \              A0A0A0A0A0A0
   \              A0          
   \   000003AD   A0A0A0A0A0A0       DC8 160, 160, 160, 160, 160, 160, 160, 167, 160, 160, 160, 160, 160
   \              A0A7A0A0A0A0
   \              A0          
   \   000003BA   A0A0A0A0A0A0       DC8 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160
   \              A0A0A0A0A0A0
   \              A0          
   \   000003C7   A0A0A0A0A0A0       DC8 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160
   \              A0A0A0A0A0A0
   \              A0          
   \   000003D4   A0A0A0A0A0A0       DC8 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160
   \              A0A0A0A0A0A0
   \              A0          
   \   000003E1   A0A0A0BF80FF       DC8 160, 160, 160, 191, 128, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              00          
   \   000003F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000

   \                                 In section .rodata, align 4
   \   00000000   000000000000       DC32 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H, 0H
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   2299          

   Maximum stack usage in bytes:

     Function             .cstack
     --------             -------
     Ask_Event                32
     Ask_Paint               176
     Button                   72
     CanvasPixel               8
     CharToStr                24
     CleanCanvas              16
     CleanCanvasArea          40
     CopyToCanvas              8
     CopyToCanvasPoint        56
     DateToStr                24
     FloToStr                120
     H_line                   32
     HalfCleanCanvas          24
     HexToStr                 16
     Init_LCD_TS              24
     Label                    88
     List_Event               56
     List_Paint              216
     Message_Paint          1080
     Number_Event             40
     Number_Paint           1080
     ReadADC                  16
     ReadTP                   32
     RepaintLCD               24
     ScrollList_Paint       1096
     TimeToStr                24
     V_line                   16
     at91ChipSelect           16
     at91DisplayData          16
     at91DisplayOnOff         16
     at91DisplayStartLine     16
     at91DisplayStartPage     24
     at91DisplayYAdress       24


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     chipSelect                        8
     TS_pPio                           4
     LCD_Canvas                     1024
     RepaintLCD                      276
     CleanCanvas                      28
     HalfCleanCanvas                  58
     CleanCanvasArea                 208
     CanvasPixel                      60
     CopyToCanvas                     38
     CopyToCanvasPoint               204
     at91DisplayOnOff                 68
     at91DisplayStartLine             56
     at91DisplayStartPage            108
     at91DisplayYAdress              256
     at91DisplayData                 180
     at91ChipSelect                   84
     ReadTP                          316
     ReadADC                         124
     Init_LCD_TS                     188
     Arial_7                         992
     Label                           868
     TimeToStr                       136
     DateToStr                       136
     CharToStr                       100
     HexToStr                         66
     List_Paint                      756
     List_Event                      538
     ScrollList_Paint                252
     Ask_Paint                       156
     Ask_Event                       286
     Number_Paint                    188
     Number_Event                    372
     Message_Paint                   240
     FloToStr                       2668
     H_line                          216
     V_line                          284
     Button                          688
     ??DataTable1                      4
     ??DataTable3                      4
     ??DataTable6                      4
     ??DataTable7                      4
     ??DataTable8                      4
     ??DataTable15                     4
     ?<Constant {{255, 1, 255, 255, 255, 255, 255,
                                     144
     ?<Constant {{254, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
                                    1040
     ?<Constant {{249, 13, 245, 245, 245, 245, 245,
                                     120
     ?<Constant {{254, 255, 3, 249, 5, 245, 245, 24
                                    1024
     ?<Constant {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                    1024
     ?<Constant {(0.0F), (0.0F), (0.0F), (0.0F), (0
                                      60

 
  1 036 bytes in section .data
  4 404 bytes in section .rodata
 10 226 bytes in section Debug.txt
 
 10 046 bytes of CODE  memory (+ 180 bytes shared)
  4 404 bytes of CONST memory
  1 036 bytes of DATA  memory

Errors: none
Warnings: none
