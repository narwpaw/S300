###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           23/Apr/2012  16:52:48 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\Framework\RF_Exe.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\Framework\RF_Exe.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D __ALARM -lC                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\List\" --diag_suppress    #
#                    Pa082 -o "D:\Zeuron\Projekty\S300\S300-program v0.6 -    #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\Obj\" --no_unroll         #
#                    --no_inline --no_tbaa --no_scheduling --debug --endian   #
#                    little --cpu ARM7TDMI -e --fpu None --dlib_config        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v0.6 - 13.03.2012\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v0.6 - 13.03.2012\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v0.6 - 13.03.2012\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\Framework\Configuration\" -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=Debug.txt --interwork --cpu_mode thumb   #
#                    -Om                                                      #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\List\RF_Exe.lst           #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\Obj\RF_Exe.o              #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\RF_Exe.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                  Microcontroller Software Support                        *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : RF_Exe.c                                 *//
      7          //*  Opis                         : Plik wykonawczy komunikacji radiowej     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 31.06.2010                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #include "RF_Exe.h"
     24          #include "Application_prog.h" 
     25          
     26          
     27          //tymczasowe
     28          extern int licznik_cykli;
     29          int poprawnych;
     30          extern int odb[2];
     31          extern char IndWys; 
     32          extern volatile char SlaveMode;
     33          extern long long int g_counter;
     34          unsigned int        RF_Period;                                              //cykl transmisji
     35          short int SymulacjaRejWej=0xAB;
     36          short int SymulacjaRejWyj;
     37          char IndWys=0; 
     38          char IndWysNeg=1; 
     39          int odb[2];
     40          int licznik_cykli=0;
     41          extern unsigned int CyklPerSekCount; 
     42          extern unsigned long long g_NextTimeProgram; 
     43          extern volatile char Busy_program;
     44          extern _NeuronsListUnit NeuronsList[NumberNeurons];
     45          //tymczasowo koniec-----------
     46          
     47          
     48          
     49          #ifdef _LIVE_RJESTR
     50          extern unsigned short LIVE_TAB[LIVE_TAB_SIZE];
     51          extern char LIVE_TAB_IDX;
     52          #endif
     53          
     54          
     55          //Zmienne globalne -------------------------------------------------------------
     56            

   \                                 In section .bss, align 4
     57            _RF_TaskTab  RF_TaskTab;
   \                     RF_TaskTab:
   \   00000000                      DS8 400
     58            signed char           RF_CurrentTask=-1; 
     59            signed char           RF_SpecialTask=-1; 
     60            char g_RF_TimeOutCounter =0;  //bierz¹cy czas odliczania do timeout`u
     61            _RF_NodeTest         RF_NodeTest; 
     62          //__________________________Koniec zmiennych globalnych________________________
     63          
     64          
     65            
     66            
     67          //Zmienne globalne importowane--------------------------------------------------  
     68            extern _RF_Status   RF_Status;
     69            extern _MainStage  MainStage;
     70            extern _TransQuality TransQuality;
     71          //___________________________Koniec zmiennych globalnych importowanych_________
     72          
     73          
     74          
     75          #define IncCurentRfTask  RF_CurrentTask++;  if ((RF_TaskTab[RF_CurrentTask].Node==0) || (RF_CurrentTask>=RF_Tasks))  {RF_CurrentTask=0; CyklPerSekCount++;}
     76             
     77            /*
     78              RF_CurrentTask++;
     79              if ((RF_TaskTab[RF_CurrentTask].Node==0) || (RF_CurrentTask>=RF_Tasks))
     80              {
     81                RF_CurrentTask=0;
     82                CyklPerSekCount++;
     83              }    
     84             */
     85          
     86          //-----------------------------------------------------------------------------
     87          //!  Nazwa funkcji :    RF_ExecuteOrder
     88          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
     89          //-----------------------------------------------------------------------------
     90          //  Res   - wskaŸnik na bufor danych
     91          //  Size  - wielkoœæ bufora danych
     92          //-----------------------------------------------------------------------------
     93            _RF_Command  *pRF_Command;

   \                                 In section Debug.txt, align 4, keep-with-next
     94          void RF_ReciveFarm(char *Buff, char Size)
     95          {
   \                     RF_ReciveFarm:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0D00               MOVS     R5,R1
     96                  
     97          
     98                    pRF_Command=(_pRF_Command)(Buff); //rzutowanie na strukturê rozkazu
   \   00000004   ....               LDR      R4,??DataTable4  ;; IndWys
   \   00000006   E062               STR      R0,[R4, #+44]
     99                  
    100                    if (
    101                        ((Size==6) && (pRF_Command->B6.CRC == crc16(pRF_Command->Streem, Size-2))) || 
                                                                     ^
Warning[Pe223]: function "crc16" declared implicitly
    102                        ((Size==8) && (pRF_Command->B8.CRC == crc16(pRF_Command->Streem, Size-2)))
    103                       )
   \   00000008   062D               CMP      R5,#+6
   \   0000000A   0AD1               BNE      ??RF_ReciveFarm_0
   \   0000000C   0421               MOVS     R1,#+4
   \   0000000E   ........           BL       crc16
   \   00000012   E16A               LDR      R1,[R4, #+44]
   \   00000014   0B79               LDRB     R3,[R1, #+4]
   \   00000016   4A79               LDRB     R2,[R1, #+5]
   \   00000018   1206               LSLS     R2,R2,#+24
   \   0000001A   120C               LSRS     R2,R2,#+16
   \   0000001C   1343               ORRS     R3,R3,R2
   \   0000001E   8342               CMP      R3,R0
   \   00000020   0DD0               BEQ      ??RF_ReciveFarm_1
   \                     ??RF_ReciveFarm_0:
   \   00000022   082D               CMP      R5,#+8
   \   00000024   3AD1               BNE      ??RF_ReciveFarm_2
   \   00000026   0621               MOVS     R1,#+6
   \   00000028   E06A               LDR      R0,[R4, #+44]
   \   0000002A   ........           BL       crc16
   \   0000002E   E16A               LDR      R1,[R4, #+44]
   \   00000030   8B79               LDRB     R3,[R1, #+6]
   \   00000032   CA79               LDRB     R2,[R1, #+7]
   \   00000034   1206               LSLS     R2,R2,#+24
   \   00000036   120C               LSRS     R2,R2,#+16
   \   00000038   1343               ORRS     R3,R3,R2
   \   0000003A   8342               CMP      R3,R0
   \   0000003C   2ED1               BNE      ??RF_ReciveFarm_2
    104                    {  
    105                      
    106                    //Sprawdzenie zgodnoœci ID 
    107                      
    108                    if(((pRF_Command->ID==RF_TaskTab[RF_CurrentTask].Command.ID) && (!SlaveMode)) ||
    109                       ((pRF_Command->ID==RF_ID) && (SlaveMode))
    110                       ) 
   \                     ??RF_ReciveFarm_1:
   \   0000003E   E06A               LDR      R0,[R4, #+44]
   \   00000040   ........           BL       __aeabi_uread4
   \   00000044   174D               LDR      R5,??RF_ReciveFarm_3  ;; 0xfffff
   \   00000046   2840               ANDS     R0,R0,R5
   \   00000048   0121               MOVS     R1,#+1
   \   0000004A   6156               LDRSB    R1,[R4, R1]
   \   0000004C   C900               LSLS     R1,R1,#+3
   \   0000004E   ....               LDR      R2,??DataTable11  ;; RF_TaskTab
   \   00000050   5118               ADDS     R1,R2,R1
   \   00000052   4968               LDR      R1,[R1, #+4]
   \   00000054   2940               ANDS     R1,R1,R5
   \   00000056   8842               CMP      R0,R1
   \   00000058   03D1               BNE      ??RF_ReciveFarm_4
   \   0000005A   1348               LDR      R0,??RF_ReciveFarm_3+0x4  ;; SlaveMode
   \   0000005C   0078               LDRB     R0,[R0, #+0]
   \   0000005E   0028               CMP      R0,#+0
   \   00000060   0AD0               BEQ      ??RF_ReciveFarm_5
   \                     ??RF_ReciveFarm_4:
   \   00000062   E06A               LDR      R0,[R4, #+44]
   \   00000064   ........           BL       __aeabi_uread4
   \   00000068   0540               ANDS     R5,R5,R0
   \   0000006A   ....               LDR      R0,??DataTable5  ;; 0x20139
   \   0000006C   8542               CMP      R5,R0
   \   0000006E   0CD1               BNE      ??RF_ReciveFarm_6
   \   00000070   0D48               LDR      R0,??RF_ReciveFarm_3+0x4  ;; SlaveMode
   \   00000072   0078               LDRB     R0,[R0, #+0]
   \   00000074   0028               CMP      R0,#+0
   \   00000076   08D0               BEQ      ??RF_ReciveFarm_6
    111                    {
    112                      if(RF_Status.ConfResive==1) RF_Status.ConfResive=2;  //znacznik odebrania danych (dla kontroli kana³u)
   \                     ??RF_ReciveFarm_5:
   \   00000078   ....               LDR      R0,??DataTable6  ;; RF_Status
   \   0000007A   C17A               LDRB     R1,[R0, #+11]
   \   0000007C   0129               CMP      R1,#+1
   \   0000007E   01D1               BNE      ??RF_ReciveFarm_7
   \   00000080   0221               MOVS     R1,#+2
   \   00000082   C172               STRB     R1,[R0, #+11]
    113                      RF_ExecuteOrder(pRF_Command);   //realizacja rozkazu         
   \                     ??RF_ReciveFarm_7:
   \   00000084   E06A               LDR      R0,[R4, #+44]
   \   00000086   ........           BL       RF_ExecuteOrder
    114                    }  
    115          
    116                             poprawnych++;
   \                     ??RF_ReciveFarm_6:
   \   0000008A   A069               LDR      R0,[R4, #+24]
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   A061               STR      R0,[R4, #+24]
    117                             odb[IndWys]++;
   \   00000090   2078               LDRB     R0,[R4, #+0]
   \   00000092   8000               LSLS     R0,R0,#+2
   \   00000094   2018               ADDS     R0,R4,R0
   \   00000096   016A               LDR      R1,[R0, #+32]
   \   00000098   491C               ADDS     R1,R1,#+1
   \   0000009A   0162               STR      R1,[R0, #+32]
    118          
    119                    }
    120            
    121            
    122          
    123          }
   \                     ??RF_ReciveFarm_2:
   \   0000009C   38BC               POP      {R3-R5}
   \   0000009E   01BC               POP      {R0}
   \   000000A0   0047               BX       R0               ;; return
   \   000000A2   C046               Nop      
   \                     ??RF_ReciveFarm_3:
   \   000000A4   FFFF0F00           DC32     0xfffff
   \   000000A8   ........           DC32     SlaveMode
    124          
    125          
    126          
    127          
    128          //-----------------------------------------------------------------------------
    129          //!  Nazwa funkcji :    RF_ExecuteOrder
    130          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
    131          //-----------------------------------------------------------------------------
    132          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    133          void RF_ExecuteOrder(_RF_Command *Command)
    134          {
   \                     RF_ExecuteOrder:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   82B0               SUB      SP,SP,#+8
    135           // TRACE_INFO("Id: %X,  Ord: %X,  Reg: %X,  Val: %X \n\r", Command->ID, Command->Order, Command->Auxi, Command->B8.Val); 
    136             licznik_cykli=0;  
   \   00000004   ....               LDR      R4,??DataTable4  ;; IndWys
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   A062               STR      R0,[R4, #+40]
    137                         
    138                        
    139             _RF_Command  CommandToSend;
    140             
    141             //czêœæ wspólna wszystkich odpowiedzi
    142             CommandToSend.ID     = RF_ID;
   \   0000000A   0098               LDR      R0,[SP, #+0]
   \   0000000C   000D               LSRS     R0,R0,#+20
   \   0000000E   0005               LSLS     R0,R0,#+20
   \   00000010   ....               LDR      R1,??DataTable5  ;; 0x20139
   \   00000012   0143               ORRS     R1,R1,R0
   \   00000014   0091               STR      R1,[SP, #+0]
    143             CommandToSend.Auxi   = Command->Auxi;
   \   00000016   6E46               MOV      R6,SP
   \   00000018   3000               MOVS     R0,R6
   \   0000001A   C01C               ADDS     R0,R0,#+3
   \   0000001C   ........           BL       __aeabi_uread4
   \   00000020   0500               MOVS     R5,R0
   \   00000022   0298               LDR      R0,[SP, #+8]
   \   00000024   C01C               ADDS     R0,R0,#+3
   \   00000026   ........           BL       __aeabi_uread4
   \   0000002A   3100               MOVS     R1,R6
   \   0000002C   C91C               ADDS     R1,R1,#+3
   \   0000002E   FF22               MOVS     R2,#+255
   \   00000030   9543               BICS     R5,R5,R2
   \   00000032   0006               LSLS     R0,R0,#+24
   \   00000034   000E               LSRS     R0,R0,#+24
   \   00000036   2843               ORRS     R0,R0,R5
   \   00000038   ........           BL       __aeabi_uwrite4
    144             
    145                 
    146              char ByteToSend=0;          
   \   0000003C   0025               MOVS     R5,#+0
    147              char NextModule=0;
   \   0000003E   2F00               MOVS     R7,R5
    148              switch (Command->Order)
   \   00000040   0298               LDR      R0,[SP, #+8]
   \   00000042   801C               ADDS     R0,R0,#+2
   \   00000044   ........           BL       __aeabi_uread4
   \   00000048   F021               MOVS     R1,#+240
   \   0000004A   0140               ANDS     R1,R1,R0
   \   0000004C   0800               MOVS     R0,R1
   \   0000004E   0009               LSRS     R0,R0,#+4
   \   00000050   0128               CMP      R0,#+1
   \   00000052   07D0               BEQ      ??RF_ExecuteOrder_0
   \   00000054   0228               CMP      R0,#+2
   \   00000056   30D0               BEQ      ??RF_ExecuteOrder_1
   \   00000058   0928               CMP      R0,#+9
   \   0000005A   49D0               BEQ      ??RF_ExecuteOrder_2
   \   0000005C   0A28               CMP      R0,#+10
   \   0000005E   00D1               BNE      .+4
   \   00000060   ACE0               B        ??RF_ExecuteOrder_3
   \   00000062   14E0               B        ??RF_ExecuteOrder_4
    149              {  
    150               
    151                 //Rozkazy dla Slave ------------------------------------------------------------
    152                
    153                      case R_RegOrd :  //Odczyt pojedyñczego rejestru - rozkaz
    154                               //wykonanie ------
    155                               CommandToSend.B8.Val  =  SymulacjaRejWej;                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
   \                     ??RF_ExecuteOrder_0:
   \   00000064   E08A               LDRH     R0,[R4, #+22]
   \   00000066   B080               STRH     R0,[R6, #+4]
    156               
    157                               //odpowiedŸ ------
    158                               CommandToSend.Order  = R_RegRes;
   \   00000068   3000               MOVS     R0,R6
   \   0000006A   801C               ADDS     R0,R0,#+2
   \   0000006C   ........           BL       __aeabi_uread4
   \   00000070   0200               MOVS     R2,R0
   \   00000072   3100               MOVS     R1,R6
   \   00000074   891C               ADDS     R1,R1,#+2
   \   00000076   F020               MOVS     R0,#+240
   \   00000078   8243               BICS     R2,R2,R0
   \   0000007A   9020               MOVS     R0,#+144
   \   0000007C   1043               ORRS     R0,R0,R2
   \   0000007E   ........           BL       __aeabi_uwrite4
    159                               CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                             ^
Warning[Pe223]: function "crc16" declared implicitly
   \   00000082   0621               MOVS     R1,#+6
   \   00000084   6846               MOV      R0,SP
   \   00000086   ........           BL       crc16
   \   0000008A   F080               STRH     R0,[R6, #+6]
    160                               ByteToSend =8;
   \   0000008C   0825               MOVS     R5,#+8
    161                           break;
    162                           
    163                      case W_RegOrd :  //Zapis pojedyñczego rejestru  -rozkaz
    164                               //wykonanie ------
    165                               SymulacjaRejWyj=Command->B8.Val;                                    //Ustaw rejestr nr: Command.Auxi 
    166                               //odpowiedŸ ------
    167                               CommandToSend.Order  = W_RegRes;
    168                               CommandToSend.B6.CRC = crc16(CommandToSend.Streem,4);    
    169                               ByteToSend =6;
    170                           break;
    171          
    172                           
    173                   //Odpowiedzi rozkazów od slave do sterownika ------------------------------------------------------------   
    174                      
    175                      case R_RegRes :  //Odczyt pojedyñczego rejestru - odp
    176                               //wykonanie ------
    177                               //CommandToSend.B8.Val  =  0xCC;                            // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  0xCC)
    178          
    179          #ifdef _LIVE_RJESTR  
    180                             LIVE_TAB[LIVE_TAB_IDX]=0xB000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((Command->B8.Val)&0xFF);
    181                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    182          #endif              
    183                        
    184                              //przyœpieszenie wykonania programu
    185                              if ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]!=Command->B8.Val) && (Busy_program==0))
    186                              {   
    187                                g_NextTimeProgram=g_counter+1;
    188                                
    189                           
    190                                //sygna³ dzwiêkowy je¿eli odczytano zmianê stanu na 1
    191                            /*    
    192                                 if ((Command->B8.Val>MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType==NodeRF_Remote) && (!(AT91C_IFLASH_MEM->Config.SoundOff)))
    193                                 {
    194                                    AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    195                                    ButtonBipCounter=g_counter+1;
    196                                 }
    197                             */
    198                                
    199                                
    200                                  #ifdef _LIVE_RJESTR    
    201                                      LIVE_TAB[LIVE_TAB_IDX]=0xFFFF;
    202                                    if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    203                                #endif   
    204                              
    205                              }
    206                              
    207                              
    208                                MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]=Command->B8.Val; 
    209                              
    210                              
    211                              
    212                              #ifdef  DIRECT_Q_MESURE
    213                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    214                               #endif
    215                              
    216                   
    217                   
    218                   
    219                               TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoœci
    220                               TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoœci 
    221                               TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoœci d³ugotrwa³ej
    222                                
    223                               
    224                               if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
    225                                {
    226                                    RF_NodeTest.Recived++; 
    227                                }
    228                               
    229                               NextModule=1;
    230                           break;
    231                           
    232                      case W_RegRes :  //Zapis pojedyñczego rejestru  -odp
    233                               //wykonanie ------
    234                        
    235                             
    236                                 MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]=0;
    237                                 RF_SpecialTask=-1;
    238                             
    239                                if (RF_TaskTab[RF_CurrentTask].Node-1<=NumberNeurons)
    240                                {
    241                                    TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoœci
    242                                    TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoœci 
    243                                    TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoœci d³ugotrwa³ej
    244                                }
    245                                
    246                                if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
    247                                {
    248                                    RF_NodeTest.Recived++; 
    249                                }
    250                                
    251                                    
    252                            //   g_RF_TimeOutCounter=0;
    253                               
    254                               NextModule=1;
    255                            #ifdef _LIVE_RJESTR            
    256                               LIVE_TAB[LIVE_TAB_IDX]=0xD000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | 0xFF;
    257                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    258                            #endif   
    259                             
    260                             
    261                             #ifdef  DIRECT_Q_MESURE
    262                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    263                               #endif
    264                             /*
    265                             if (RF_TaskTab[RF_CurrentTask].Node==6)
    266                             {
    267                                AT91C_BASE_PIOA->PIO_CODR =SpeakerPin; 
    268                                Delay(0xFFF);
    269                                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    270                             }
    271                             */
    272                         break;
    273                
    274              }
    275              
    276                       
    277                      //Wyœlij odpowiedŸ
    278                      if (ByteToSend)
   \                     ??RF_ExecuteOrder_4:
   \   0000008E   002D               CMP      R5,#+0
   \   00000090   0AD0               BEQ      ??RF_ExecuteOrder_5
    279                      {
    280                          RF_Status.EnableTX();
   \   00000092   ....               LDR      R6,??DataTable6  ;; RF_Status
   \   00000094   B069               LDR      R0,[R6, #+24]
   \   00000096   ........           BL       __iar_via_R0
    281                           RF_SendData(CommandToSend.Streem, ByteToSend);
                                              ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000009A   2900               MOVS     R1,R5
   \   0000009C   6846               MOV      R0,SP
   \   0000009E   ........           BL       RF_SendData
    282                          RF_Status.EnableRX();
   \   000000A2   F069               LDR      R0,[R6, #+28]
   \   000000A4   ........           BL       __iar_via_R0
    283                         
    284                      }           
    285             
    286                      //odpytaj kolejny modu³
    287                      if (NextModule)
   \                     ??RF_ExecuteOrder_5:
   \   000000A8   002F               CMP      R7,#+0
   \   000000AA   03D0               BEQ      ??RF_ExecuteOrder_6
    288                      {
    289                         g_RF_TimeOutCounter=RF_TimeOut; 
   \   000000AC   0920               MOVS     R0,#+9
   \   000000AE   E070               STRB     R0,[R4, #+3]
    290                         RF_MasterExecut();
   \   000000B0   ........           BL       RF_MasterExecut
    291                        /*
    292                        if (RF_Status.MasterMode)
    293                          {
    294                            //if ((!SlaveMode) && (g_Stop_Program==0))
    295                            if (g_RF_TimeOutCounter>0)
    296                            {
    297                            }else{
    298                               CyklPerSekCount++;
    299                               g_RF_TimeOutCounter=RF_TimeOut; 
    300                               RF_MasterExecut();
    301                        
    302                            }
    303                          }
    304                        */
    305                      }
    306            
    307            
    308          }
   \                     ??RF_ExecuteOrder_6:
   \   000000B4   FEBC               POP      {R1-R7}
   \   000000B6   01BC               POP      {R0}
   \   000000B8   0047               BX       R0               ;; return
   \                     ??RF_ExecuteOrder_1:
   \   000000BA   0298               LDR      R0,[SP, #+8]
   \   000000BC   0279               LDRB     R2,[R0, #+4]
   \   000000BE   4179               LDRB     R1,[R0, #+5]
   \   000000C0   0906               LSLS     R1,R1,#+24
   \   000000C2   090C               LSRS     R1,R1,#+16
   \   000000C4   0A43               ORRS     R2,R2,R1
   \   000000C6   A282               STRH     R2,[R4, #+20]
   \   000000C8   3000               MOVS     R0,R6
   \   000000CA   801C               ADDS     R0,R0,#+2
   \   000000CC   ........           BL       __aeabi_uread4
   \   000000D0   0200               MOVS     R2,R0
   \   000000D2   3100               MOVS     R1,R6
   \   000000D4   891C               ADDS     R1,R1,#+2
   \   000000D6   F020               MOVS     R0,#+240
   \   000000D8   8243               BICS     R2,R2,R0
   \   000000DA   A020               MOVS     R0,#+160
   \   000000DC   1043               ORRS     R0,R0,R2
   \   000000DE   ........           BL       __aeabi_uwrite4
   \   000000E2   0421               MOVS     R1,#+4
   \   000000E4   6846               MOV      R0,SP
   \   000000E6   ........           BL       crc16
   \   000000EA   B080               STRH     R0,[R6, #+4]
   \   000000EC   0625               MOVS     R5,#+6
   \   000000EE   CEE7               B        ??RF_ExecuteOrder_4
   \                     ??RF_ExecuteOrder_2:
   \   000000F0   ....               LDR      R2,??DataTable11  ;; RF_TaskTab
   \   000000F2   ....               LDR      R3,??DataTable13  ;; MainStage
   \   000000F4   0120               MOVS     R0,#+1
   \   000000F6   2056               LDRSB    R0,[R4, R0]
   \   000000F8   C000               LSLS     R0,R0,#+3
   \   000000FA   1018               ADDS     R0,R2,R0
   \   000000FC   4068               LDR      R0,[R0, #+4]
   \   000000FE   000E               LSRS     R0,R0,#+24
   \   00000100   22D1               BNE      ??RF_ExecuteOrder_7
   \   00000102   0299               LDR      R1,[SP, #+8]
   \   00000104   0879               LDRB     R0,[R1, #+4]
   \   00000106   4E79               LDRB     R6,[R1, #+5]
   \   00000108   3606               LSLS     R6,R6,#+24
   \   0000010A   360C               LSRS     R6,R6,#+16
   \   0000010C   3043               ORRS     R0,R0,R6
   \   0000010E   0121               MOVS     R1,#+1
   \   00000110   6156               LDRSB    R1,[R4, R1]
   \   00000112   C900               LSLS     R1,R1,#+3
   \   00000114   5118               ADDS     R1,R2,R1
   \   00000116   A027               MOVS     R7,#+160
   \   00000118   4E68               LDR      R6,[R1, #+4]
   \   0000011A   360E               LSRS     R6,R6,#+24
   \   0000011C   7600               LSLS     R6,R6,#+1
   \   0000011E   B446               MOV      R12,R6
   \   00000120   0E78               LDRB     R6,[R1, #+0]
   \   00000122   1421               MOVS     R1,#+20
   \   00000124   4E43               MULS     R6,R1,R6
   \   00000126   9919               ADDS     R1,R3,R6
   \   00000128   6646               MOV      R6,R12
   \   0000012A   8919               ADDS     R1,R1,R6
   \   0000012C   C95F               LDRSH    R1,[R1, R7]
   \   0000012E   8142               CMP      R1,R0
   \   00000130   0AD0               BEQ      ??RF_ExecuteOrder_7
   \   00000132   3E48               LDR      R0,??RF_ExecuteOrder_8  ;; Busy_program
   \   00000134   0078               LDRB     R0,[R0, #+0]
   \   00000136   0028               CMP      R0,#+0
   \   00000138   06D1               BNE      ??RF_ExecuteOrder_7
   \   0000013A   3D4E               LDR      R6,??RF_ExecuteOrder_8+0x4  ;; g_NextTimeProgram
   \   0000013C   ....               LDR      R0,??DataTable9  ;; g_counter
   \   0000013E   03C8               LDM      R0!,{R0,R1}
   \   00000140   0027               MOVS     R7,#+0
   \   00000142   401C               ADDS     R0,R0,#+1
   \   00000144   7941               ADCS     R1,R1,R7
   \   00000146   03C6               STM      R6!,{R0,R1}
   \                     ??RF_ExecuteOrder_7:
   \   00000148   0299               LDR      R1,[SP, #+8]
   \   0000014A   0879               LDRB     R0,[R1, #+4]
   \   0000014C   4E79               LDRB     R6,[R1, #+5]
   \   0000014E   3606               LSLS     R6,R6,#+24
   \   00000150   360C               LSRS     R6,R6,#+16
   \   00000152   3043               ORRS     R0,R0,R6
   \   00000154   0121               MOVS     R1,#+1
   \   00000156   6156               LDRSB    R1,[R4, R1]
   \   00000158   C900               LSLS     R1,R1,#+3
   \   0000015A   5118               ADDS     R1,R2,R1
   \   0000015C   4A68               LDR      R2,[R1, #+4]
   \   0000015E   120E               LSRS     R2,R2,#+24
   \   00000160   5200               LSLS     R2,R2,#+1
   \   00000162   0E78               LDRB     R6,[R1, #+0]
   \   00000164   1427               MOVS     R7,#+20
   \   00000166   7E43               MULS     R6,R7,R6
   \   00000168   9B19               ADDS     R3,R3,R6
   \   0000016A   9A18               ADDS     R2,R3,R2
   \   0000016C   A032               ADDS     R2,R2,#+160
   \   0000016E   1080               STRH     R0,[R2, #+0]
   \   00000170   0878               LDRB     R0,[R1, #+0]
   \   00000172   ....               LDR      R1,??DataTable14  ;; TransQuality
   \   00000174   8200               LSLS     R2,R0,#+2
   \   00000176   8A18               ADDS     R2,R1,R2
   \   00000178   976C               LDR      R7,[R2, #+72]
   \   0000017A   0126               MOVS     R6,#+1
   \   0000017C   0B78               LDRB     R3,[R1, #+0]
   \   0000017E   9E40               LSLS     R6,R6,R3
   \   00000180   3E43               ORRS     R6,R6,R7
   \   00000182   9664               STR      R6,[R2, #+72]
   \   00000184   0A18               ADDS     R2,R1,R0
   \   00000186   2527               MOVS     R7,#+37
   \   00000188   3B00               MOVS     R3,R7
   \   0000018A   D35C               LDRB     R3,[R2, R3]
   \   0000018C   9C46               MOV      R12,R3
   \   0000018E   0126               MOVS     R6,#+1
   \   00000190   8B78               LDRB     R3,[R1, #+2]
   \   00000192   9E40               LSLS     R6,R6,R3
   \   00000194   6346               MOV      R3,R12
   \   00000196   1E43               ORRS     R6,R6,R3
   \   00000198   D655               STRB     R6,[R2, R7]
   \   0000019A   9378               LDRB     R3,[R2, #+2]
   \   0000019C   0126               MOVS     R6,#+1
   \   0000019E   4978               LDRB     R1,[R1, #+1]
   \   000001A0   8E40               LSLS     R6,R6,R1
   \   000001A2   1E43               ORRS     R6,R6,R3
   \   000001A4   9670               STRB     R6,[R2, #+2]
   \   000001A6   217A               LDRB     R1,[R4, #+8]
   \   000001A8   8142               CMP      R1,R0
   \   000001AA   05D1               BNE      ??RF_ExecuteOrder_9
   \   000001AC   E068               LDR      R0,[R4, #+12]
   \   000001AE   0128               CMP      R0,#+1
   \   000001B0   02DB               BLT      ??RF_ExecuteOrder_9
   \   000001B2   2069               LDR      R0,[R4, #+16]
   \   000001B4   401C               ADDS     R0,R0,#+1
   \   000001B6   2061               STR      R0,[R4, #+16]
   \                     ??RF_ExecuteOrder_9:
   \   000001B8   0127               MOVS     R7,#+1
   \   000001BA   68E7               B        ??RF_ExecuteOrder_4
   \                     ??RF_ExecuteOrder_3:
   \   000001BC   ....               LDR      R2,??DataTable11  ;; RF_TaskTab
   \   000001BE   0120               MOVS     R0,#+1
   \   000001C0   2056               LDRSB    R0,[R4, R0]
   \   000001C2   C000               LSLS     R0,R0,#+3
   \   000001C4   105C               LDRB     R0,[R2, R0]
   \   000001C6   0200               MOVS     R2,R0
   \   000001C8   ....               LDR      R1,??DataTable12  ;; 0x619
   \   000001CA   ....               LDR      R3,??DataTable13  ;; MainStage
   \   000001CC   9B18               ADDS     R3,R3,R2
   \   000001CE   2E00               MOVS     R6,R5
   \   000001D0   5E54               STRB     R6,[R3, R1]
   \   000001D2   0021               MOVS     R1,#+0
   \   000001D4   C943               MVNS     R1,R1            ;; #-1
   \   000001D6   A170               STRB     R1,[R4, #+2]
   \   000001D8   511E               SUBS     R1,R2,#+1
   \   000001DA   2429               CMP      R1,#+36
   \   000001DC   1BDA               BGE      ??RF_ExecuteOrder_10
   \   000001DE   ....               LDR      R1,??DataTable14  ;; TransQuality
   \   000001E0   9300               LSLS     R3,R2,#+2
   \   000001E2   CB18               ADDS     R3,R1,R3
   \   000001E4   9E6C               LDR      R6,[R3, #+72]
   \   000001E6   B446               MOV      R12,R6
   \   000001E8   0127               MOVS     R7,#+1
   \   000001EA   0E78               LDRB     R6,[R1, #+0]
   \   000001EC   B740               LSLS     R7,R7,R6
   \   000001EE   6646               MOV      R6,R12
   \   000001F0   3743               ORRS     R7,R7,R6
   \   000001F2   9F64               STR      R7,[R3, #+72]
   \   000001F4   8A18               ADDS     R2,R1,R2
   \   000001F6   2527               MOVS     R7,#+37
   \   000001F8   3B00               MOVS     R3,R7
   \   000001FA   D35C               LDRB     R3,[R2, R3]
   \   000001FC   9C46               MOV      R12,R3
   \   000001FE   0126               MOVS     R6,#+1
   \   00000200   8B78               LDRB     R3,[R1, #+2]
   \   00000202   9E40               LSLS     R6,R6,R3
   \   00000204   6346               MOV      R3,R12
   \   00000206   1E43               ORRS     R6,R6,R3
   \   00000208   D655               STRB     R6,[R2, R7]
   \   0000020A   9378               LDRB     R3,[R2, #+2]
   \   0000020C   0126               MOVS     R6,#+1
   \   0000020E   4978               LDRB     R1,[R1, #+1]
   \   00000210   8E40               LSLS     R6,R6,R1
   \   00000212   1E43               ORRS     R6,R6,R3
   \   00000214   9670               STRB     R6,[R2, #+2]
   \                     ??RF_ExecuteOrder_10:
   \   00000216   217A               LDRB     R1,[R4, #+8]
   \   00000218   8142               CMP      R1,R0
   \   0000021A   CDD1               BNE      ??RF_ExecuteOrder_9
   \   0000021C   E068               LDR      R0,[R4, #+12]
   \   0000021E   0128               CMP      R0,#+1
   \   00000220   CADB               BLT      ??RF_ExecuteOrder_9
   \   00000222   2069               LDR      R0,[R4, #+16]
   \   00000224   401C               ADDS     R0,R0,#+1
   \   00000226   2061               STR      R0,[R4, #+16]
   \   00000228   C6E7               B        ??RF_ExecuteOrder_9
   \   0000022A   C046               Nop      
   \                     ??RF_ExecuteOrder_8:
   \   0000022C   ........           DC32     Busy_program
   \   00000230   ........           DC32     g_NextTimeProgram
    309          //_____________________________________________________________________________
    310          
    311          
    312          
    313          
    314          
    315          
    316          
    317          
    318          
    319          //-----------------------------------------------------------------------------
    320          //!  Nazwa funkcji :    RF_SendData
    321          //!  Funkcja wysy³a dane przez RF12
    322          //-----------------------------------------------------------------------------
    323          //  *data - wska¿nik na pierwszy bajt
    324          //  *size - iloœæ bajtów do wys³ania
    325          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    326          void RF_SendData(unsigned char *data, char size)
    327          {
   \                     RF_SendData:
   \   00000000   01B5               PUSH     {R0,LR}
    328              RF_SendFarm(data, size);
   \   00000002   ........           BL       RF_SendFarm
    329          }
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    330          //------------------------------------------------------------------------------
    331          
    332          
    333          
    334          #define SpeedExePeriods 0
    335          
    336          
    337          //-----------------------------------------------------------------------------
    338          //!  Nazwa funkcji :    RF_MasterExecut
    339          //!  Funkcja wysy³a dane wed³ug tablicy rozkazów RF_TaskTab
    340          //-----------------------------------------------------------------------------
    341          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    342          void RF_MasterExecut(void)
    343          {
   \                     RF_MasterExecut:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   6846               MOV      R0,SP
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0170               STRB     R1,[R0, #+0]
    344          
    345            
    346            char ByteToSend=0;
    347            //char TaskNr;
    348            
    349            unsigned int SendOrder=0;    //flaga wys³ania
   \   00000008   0800               MOVS     R0,R1
    350           
    351          
    352          
    353            
    354            //wyszukanie rozkazów priorytetowych
    355            char Nd=0;
   \   0000000A   0200               MOVS     R2,R0
   \   0000000C   C943               MVNS     R1,R1            ;; #-1
   \   0000000E   27E0               B        ??RF_MasterExecut_0
    356            unsigned char Tn=0;
    357            static signed char  RF_RememberTask=-1;
    358            
    359            
    360            signed char TMP_RF_SpecialTask=-1;
    361            
    362            while ((Nd<NumberNeurons) && (TMP_RF_SpecialTask==-1))
    363            {
    364                if ((MainStage.SendStageChange[Nd]>=ChangeStageFlag-SpeedExePeriods))    
    365                {
    366                  
    367                  Tn=0;
    368                  while (((RF_TaskTab[Tn].Node!=0) && (Tn<RF_Tasks) && (TMP_RF_SpecialTask==-1)))
    369                  {
    370                     if ((RF_TaskTab[Tn].Command.Order==W_RegOrd) &&  (RF_TaskTab[Tn].Command.Auxi==0) && (RF_TaskTab[Tn].Node==Nd)) 
   \                     ??RF_MasterExecut_1:
   \   00000010   6E68               LDR      R6,[R5, #+4]
   \   00000012   F027               MOVS     R7,#+240
   \   00000014   3F04               LSLS     R7,R7,#+16       ;; #+15728640
   \   00000016   3740               ANDS     R7,R7,R6
   \   00000018   3F0D               LSRS     R7,R7,#+20
   \   0000001A   022F               CMP      R7,#+2
   \   0000001C   0CD1               BNE      ??RF_MasterExecut_2
   \   0000001E   360E               LSRS     R6,R6,#+24
   \   00000020   0AD1               BNE      ??RF_MasterExecut_2
   \   00000022   2D78               LDRB     R5,[R5, #+0]
   \   00000024   1600               MOVS     R6,R2
   \   00000026   B542               CMP      R5,R6
   \   00000028   06D1               BNE      ??RF_MasterExecut_2
    371                     {
    372                         TMP_RF_SpecialTask=Tn;
   \   0000002A   1900               MOVS     R1,R3
   \   0000002C   0906               LSLS     R1,R1,#+24
   \   0000002E   0916               ASRS     R1,R1,#+24
    373                         SendOrder=1;
   \   00000030   0120               MOVS     R0,#+1
    374                         MainStage.SendStageChange[Nd]--;
   \   00000032   2578               LDRB     R5,[R4, #+0]
   \   00000034   6D1E               SUBS     R5,R5,#+1
   \   00000036   2570               STRB     R5,[R4, #+0]
    375                     }
    376                     Tn++;
   \                     ??RF_MasterExecut_2:
   \   00000038   5B1C               ADDS     R3,R3,#+1
   \   0000003A   1B06               LSLS     R3,R3,#+24
   \   0000003C   1B0E               LSRS     R3,R3,#+24
    377                  }
   \                     ??RF_MasterExecut_3:
   \   0000003E   854D               LDR      R5,??RF_MasterExecut_4  ;; RF_TaskTab
   \   00000040   1E00               MOVS     R6,R3
   \   00000042   F600               LSLS     R6,R6,#+3
   \   00000044   AD19               ADDS     R5,R5,R6
   \   00000046   2E78               LDRB     R6,[R5, #+0]
   \   00000048   002E               CMP      R6,#+0
   \   0000004A   06D0               BEQ      ??RF_MasterExecut_5
   \   0000004C   1E00               MOVS     R6,R3
   \   0000004E   322E               CMP      R6,#+50
   \   00000050   03D2               BCS      ??RF_MasterExecut_5
   \   00000052   0026               MOVS     R6,#+0
   \   00000054   F643               MVNS     R6,R6            ;; #-1
   \   00000056   B142               CMP      R1,R6
   \   00000058   DAD0               BEQ      ??RF_MasterExecut_1
    378                  
    379                }
    380                
    381                
    382                Nd++;  
   \                     ??RF_MasterExecut_5:
   \   0000005A   521C               ADDS     R2,R2,#+1
   \   0000005C   1206               LSLS     R2,R2,#+24
   \   0000005E   120E               LSRS     R2,R2,#+24
   \                     ??RF_MasterExecut_0:
   \   00000060   1300               MOVS     R3,R2
   \   00000062   232B               CMP      R3,#+35
   \   00000064   0DD2               BCS      ??RF_MasterExecut_6
   \   00000066   0023               MOVS     R3,#+0
   \   00000068   DB43               MVNS     R3,R3            ;; #-1
   \   0000006A   9942               CMP      R1,R3
   \   0000006C   09D1               BNE      ??RF_MasterExecut_6
   \   0000006E   7A4B               LDR      R3,??RF_MasterExecut_4+0x4  ;; MainStage
   \   00000070   7A4C               LDR      R4,??RF_MasterExecut_4+0x8  ;; 0x619
   \   00000072   1500               MOVS     R5,R2
   \   00000074   5B19               ADDS     R3,R3,R5
   \   00000076   1C19               ADDS     R4,R3,R4
   \   00000078   2378               LDRB     R3,[R4, #+0]
   \   0000007A   142B               CMP      R3,#+20
   \   0000007C   EDD3               BCC      ??RF_MasterExecut_5
   \   0000007E   0023               MOVS     R3,#+0
   \   00000080   DDE7               B        ??RF_MasterExecut_3
    383            }  
    384            
    385            RF_SpecialTask=TMP_RF_SpecialTask;
   \                     ??RF_MasterExecut_6:
   \   00000082   774C               LDR      R4,??RF_MasterExecut_4+0xC  ;; IndWys
   \   00000084   A170               STRB     R1,[R4, #+2]
    386            
    387            if (RF_SpecialTask>=0)
   \   00000086   0221               MOVS     R1,#+2
   \   00000088   6156               LDRSB    R1,[R4, R1]
   \   0000008A   0029               CMP      R1,#+0
   \   0000008C   03D4               BMI      ??RF_MasterExecut_7
    388            {
    389              RF_RememberTask=RF_CurrentTask;
   \   0000008E   6278               LDRB     R2,[R4, #+1]
   \   00000090   2271               STRB     R2,[R4, #+4]
    390              RF_CurrentTask=RF_SpecialTask;
   \   00000092   6170               STRB     R1,[R4, #+1]
   \   00000094   60E0               B        ??RF_MasterExecut_8
    391          
    392          
    393                                    
    394                        
    395            }else{
    396              if (RF_RememberTask>=0) 
   \                     ??RF_MasterExecut_7:
   \   00000096   0421               MOVS     R1,#+4
   \   00000098   6156               LDRSB    R1,[R4, R1]
   \   0000009A   0029               CMP      R1,#+0
   \   0000009C   03D4               BMI      ??RF_MasterExecut_9
    397              {
    398               RF_CurrentTask=RF_RememberTask;
   \   0000009E   6170               STRB     R1,[R4, #+1]
    399               RF_RememberTask=-1;  
   \   000000A0   0021               MOVS     R1,#+0
   \   000000A2   C943               MVNS     R1,R1            ;; #-1
   \   000000A4   2171               STRB     R1,[R4, #+4]
    400              }
    401              
    402              IncCurentRfTask;
   \                     ??RF_MasterExecut_9:
   \   000000A6   0121               MOVS     R1,#+1
   \   000000A8   6156               LDRSB    R1,[R4, R1]
   \   000000AA   491C               ADDS     R1,R1,#+1
   \   000000AC   6170               STRB     R1,[R4, #+1]
   \   000000AE   694D               LDR      R5,??RF_MasterExecut_4  ;; RF_TaskTab
   \   000000B0   0906               LSLS     R1,R1,#+24
   \   000000B2   0916               ASRS     R1,R1,#+24
   \   000000B4   CA00               LSLS     R2,R1,#+3
   \   000000B6   AA5C               LDRB     R2,[R5, R2]
   \   000000B8   002A               CMP      R2,#+0
   \   000000BA   01D0               BEQ      ??RF_MasterExecut_10
   \   000000BC   3229               CMP      R1,#+50
   \   000000BE   40DB               BLT      ??RF_MasterExecut_11
   \                     ??RF_MasterExecut_10:
   \   000000C0   0021               MOVS     R1,#+0
   \   000000C2   6170               STRB     R1,[R4, #+1]
   \   000000C4   6749               LDR      R1,??RF_MasterExecut_4+0x10  ;; CyklPerSekCount
   \   000000C6   0A68               LDR      R2,[R1, #+0]
   \   000000C8   521C               ADDS     R2,R2,#+1
   \   000000CA   0A60               STR      R2,[R1, #+0]
   \   000000CC   39E0               B        ??RF_MasterExecut_11
    403            
    404              
    405              //wykluczenie rozkazów ustawiania stanów oraz odczytu rejestrów je¿eli brak transmisji
    406              while (((RF_TaskTab[RF_CurrentTask].Node!=0) && (RF_CurrentTask<RF_Tasks)) && (SendOrder==0))
    407              {
    408                 if (((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]==0) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType!=NodeRF_Period) ))  ||
    409                    ((RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi>0) && (TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1]==0)))
   \                     ??RF_MasterExecut_12:
   \   000000CE   5368               LDR      R3,[R2, #+4]
   \   000000D0   F021               MOVS     R1,#+240
   \   000000D2   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000000D4   0E00               MOVS     R6,R1
   \   000000D6   1E40               ANDS     R6,R6,R3
   \   000000D8   360D               LSRS     R6,R6,#+20
   \   000000DA   022E               CMP      R6,#+2
   \   000000DC   10D1               BNE      ??RF_MasterExecut_13
   \   000000DE   1B0E               LSRS     R3,R3,#+24
   \   000000E0   0ED1               BNE      ??RF_MasterExecut_13
   \   000000E2   1378               LDRB     R3,[R2, #+0]
   \   000000E4   5D4E               LDR      R6,??RF_MasterExecut_4+0x8  ;; 0x619
   \   000000E6   5C4F               LDR      R7,??RF_MasterExecut_4+0x4  ;; MainStage
   \   000000E8   FF18               ADDS     R7,R7,R3
   \   000000EA   BE5D               LDRB     R6,[R7, R6]
   \   000000EC   002E               CMP      R6,#+0
   \   000000EE   07D1               BNE      ??RF_MasterExecut_13
   \   000000F0   0C26               MOVS     R6,#+12
   \   000000F2   7343               MULS     R3,R6,R3
   \   000000F4   5C4E               LDR      R6,??RF_MasterExecut_4+0x14  ;; NeuronsList
   \   000000F6   F318               ADDS     R3,R6,R3
   \   000000F8   0C3B               SUBS     R3,R3,#+12
   \   000000FA   1B78               LDRB     R3,[R3, #+0]
   \   000000FC   052B               CMP      R3,#+5
   \   000000FE   D2D1               BNE      ??RF_MasterExecut_9
   \                     ??RF_MasterExecut_13:
   \   00000100   5368               LDR      R3,[R2, #+4]
   \   00000102   0E00               MOVS     R6,R1
   \   00000104   1E40               ANDS     R6,R6,R3
   \   00000106   360D               LSRS     R6,R6,#+20
   \   00000108   012E               CMP      R6,#+1
   \   0000010A   08D1               BNE      ??RF_MasterExecut_14
   \   0000010C   1B0E               LSRS     R3,R3,#+24
   \   0000010E   06D0               BEQ      ??RF_MasterExecut_14
   \   00000110   1378               LDRB     R3,[R2, #+0]
   \   00000112   564E               LDR      R6,??RF_MasterExecut_4+0x18  ;; TransQuality
   \   00000114   F318               ADDS     R3,R6,R3
   \   00000116   2533               ADDS     R3,R3,#+37
   \   00000118   1B78               LDRB     R3,[R3, #+0]
   \   0000011A   002B               CMP      R3,#+0
   \   0000011C   C3D0               BEQ      ??RF_MasterExecut_9
    410                 {
    411                      IncCurentRfTask;   
    412                   
    413                 }else{ 
    414                    if ((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]>0))  MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]--;
   \                     ??RF_MasterExecut_14:
   \   0000011E   5068               LDR      R0,[R2, #+4]
   \   00000120   0140               ANDS     R1,R1,R0
   \   00000122   090D               LSRS     R1,R1,#+20
   \   00000124   0229               CMP      R1,#+2
   \   00000126   0BD1               BNE      ??RF_MasterExecut_15
   \   00000128   000E               LSRS     R0,R0,#+24
   \   0000012A   09D1               BNE      ??RF_MasterExecut_15
   \   0000012C   4A4B               LDR      R3,??RF_MasterExecut_4+0x4  ;; MainStage
   \   0000012E   4B48               LDR      R0,??RF_MasterExecut_4+0x8  ;; 0x619
   \   00000130   1178               LDRB     R1,[R2, #+0]
   \   00000132   5918               ADDS     R1,R3,R1
   \   00000134   0818               ADDS     R0,R1,R0
   \   00000136   0178               LDRB     R1,[R0, #+0]
   \   00000138   0029               CMP      R1,#+0
   \   0000013A   01D0               BEQ      ??RF_MasterExecut_15
   \   0000013C   491E               SUBS     R1,R1,#+1
   \   0000013E   0170               STRB     R1,[R0, #+0]
    415                    SendOrder=1;   
   \                     ??RF_MasterExecut_15:
   \   00000140   0120               MOVS     R0,#+1
    416                 }
    417              }
   \                     ??RF_MasterExecut_11:
   \   00000142   0121               MOVS     R1,#+1
   \   00000144   6156               LDRSB    R1,[R4, R1]
   \   00000146   CA00               LSLS     R2,R1,#+3
   \   00000148   AA18               ADDS     R2,R5,R2
   \   0000014A   1378               LDRB     R3,[R2, #+0]
   \   0000014C   002B               CMP      R3,#+0
   \   0000014E   03D0               BEQ      ??RF_MasterExecut_8
   \   00000150   3229               CMP      R1,#+50
   \   00000152   01DA               BGE      ??RF_MasterExecut_8
   \   00000154   0028               CMP      R0,#+0
   \   00000156   BAD0               BEQ      ??RF_MasterExecut_12
    418            //  TaskNr=RF_CurrentTask; 
    419            }
    420            
    421            
    422          
    423               
    424            
    425            if (SendOrder)
   \                     ??RF_MasterExecut_8:
   \   00000158   0028               CMP      R0,#+0
   \   0000015A   6ED0               BEQ      ??RF_MasterExecut_16
    426            {
    427               /*
    428          
    429                         if  (RF_TaskTab[RF_CurrentTask].Command.Order==2)
    430               {
    431                  AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    432                  if (MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi])
    433                  {
    434                  ButtonBipCounter=g_counter+6;
    435                  }else{
    436                  ButtonBipCounter=g_counter+10;  
    437                  }
    438               }
    439               */
    440          
    441              
    442              
    443                _RF_Command  RF_Command;
    444                RF_Command.ID     = RF_TaskTab[RF_CurrentTask].Command.ID;
   \   0000015C   3D4D               LDR      R5,??RF_MasterExecut_4  ;; RF_TaskTab
   \   0000015E   0198               LDR      R0,[SP, #+4]
   \   00000160   000D               LSRS     R0,R0,#+20
   \   00000162   0005               LSLS     R0,R0,#+20
   \   00000164   0121               MOVS     R1,#+1
   \   00000166   6156               LDRSB    R1,[R4, R1]
   \   00000168   C900               LSLS     R1,R1,#+3
   \   0000016A   6918               ADDS     R1,R5,R1
   \   0000016C   4968               LDR      R1,[R1, #+4]
   \   0000016E   0903               LSLS     R1,R1,#+12
   \   00000170   090B               LSRS     R1,R1,#+12
   \   00000172   0143               ORRS     R1,R1,R0
   \   00000174   0191               STR      R1,[SP, #+4]
    445                RF_Command.Order  = RF_TaskTab[RF_CurrentTask].Command.Order;
   \   00000176   01AE               ADD      R6,SP,#+4
   \   00000178   3000               MOVS     R0,R6
   \   0000017A   801C               ADDS     R0,R0,#+2
   \   0000017C   ........           BL       __aeabi_uread4
   \   00000180   3100               MOVS     R1,R6
   \   00000182   891C               ADDS     R1,R1,#+2
   \   00000184   F022               MOVS     R2,#+240
   \   00000186   9043               BICS     R0,R0,R2
   \   00000188   0122               MOVS     R2,#+1
   \   0000018A   A256               LDRSB    R2,[R4, R2]
   \   0000018C   D200               LSLS     R2,R2,#+3
   \   0000018E   AA18               ADDS     R2,R5,R2
   \   00000190   5268               LDR      R2,[R2, #+4]
   \   00000192   120D               LSRS     R2,R2,#+20
   \   00000194   1301               LSLS     R3,R2,#+4
   \   00000196   F022               MOVS     R2,#+240
   \   00000198   1A40               ANDS     R2,R2,R3
   \   0000019A   0243               ORRS     R2,R2,R0
   \   0000019C   1000               MOVS     R0,R2
   \   0000019E   ........           BL       __aeabi_uwrite4
    446                RF_Command.Auxi   = RF_TaskTab[RF_CurrentTask].Command.Auxi;
   \   000001A2   3000               MOVS     R0,R6
   \   000001A4   C01C               ADDS     R0,R0,#+3
   \   000001A6   ........           BL       __aeabi_uread4
   \   000001AA   3100               MOVS     R1,R6
   \   000001AC   C91C               ADDS     R1,R1,#+3
   \   000001AE   FF22               MOVS     R2,#+255
   \   000001B0   9043               BICS     R0,R0,R2
   \   000001B2   0122               MOVS     R2,#+1
   \   000001B4   A256               LDRSB    R2,[R4, R2]
   \   000001B6   D200               LSLS     R2,R2,#+3
   \   000001B8   AA18               ADDS     R2,R5,R2
   \   000001BA   5268               LDR      R2,[R2, #+4]
   \   000001BC   120E               LSRS     R2,R2,#+24
   \   000001BE   0243               ORRS     R2,R2,R0
   \   000001C0   1000               MOVS     R0,R2
   \   000001C2   ........           BL       __aeabi_uwrite4
    447                
    448          
    449          
    450                
    451                if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
   \   000001C6   0120               MOVS     R0,#+1
   \   000001C8   2056               LDRSB    R0,[R4, R0]
   \   000001CA   C000               LSLS     R0,R0,#+3
   \   000001CC   2818               ADDS     R0,R5,R0
   \   000001CE   F021               MOVS     R1,#+240
   \   000001D0   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000001D2   4268               LDR      R2,[R0, #+4]
   \   000001D4   1140               ANDS     R1,R1,R2
   \   000001D6   090D               LSRS     R1,R1,#+20
   \   000001D8   0129               CMP      R1,#+1
   \   000001DA   08D1               BNE      ??RF_MasterExecut_17
    452                {
    453                    ByteToSend=6;
   \   000001DC   6846               MOV      R0,SP
   \   000001DE   0621               MOVS     R1,#+6
   \   000001E0   0170               STRB     R1,[R0, #+0]
    454                    RF_Command.B6.CRC = crc16(RF_Command.Streem,4);
                                               ^
Warning[Pe223]: function "crc16" declared implicitly
   \   000001E2   0421               MOVS     R1,#+4
   \   000001E4   01A8               ADD      R0,SP,#+4
   \   000001E6   ........           BL       crc16
   \   000001EA   B080               STRH     R0,[R6, #+4]
    455                          if (RF_CurrentTask==0)
   \   000001EC   16E0               B        ??RF_MasterExecut_18
    456            {
    457               //AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    458               //ButtonBipCounter=g_counter+1;
    459              
    460            }
    461                    
    462                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)  
   \                     ??RF_MasterExecut_17:
   \   000001EE   0229               CMP      R1,#+2
   \   000001F0   14D1               BNE      ??RF_MasterExecut_18
    463                {  
    464                    ByteToSend=8;
   \   000001F2   6946               MOV      R1,SP
   \   000001F4   0822               MOVS     R2,#+8
   \   000001F6   0A70               STRB     R2,[R1, #+0]
    465                    RF_Command.B8.Val = MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi];
   \   000001F8   D721               MOVS     R1,#+215
   \   000001FA   8900               LSLS     R1,R1,#+2        ;; #+860
   \   000001FC   4268               LDR      R2,[R0, #+4]
   \   000001FE   120E               LSRS     R2,R2,#+24
   \   00000200   5200               LSLS     R2,R2,#+1
   \   00000202   0078               LDRB     R0,[R0, #+0]
   \   00000204   1423               MOVS     R3,#+20
   \   00000206   5843               MULS     R0,R3,R0
   \   00000208   134B               LDR      R3,??RF_MasterExecut_4+0x4  ;; MainStage
   \   0000020A   1818               ADDS     R0,R3,R0
   \   0000020C   8018               ADDS     R0,R0,R2
   \   0000020E   405A               LDRH     R0,[R0, R1]
   \   00000210   B080               STRH     R0,[R6, #+4]
    466                    RF_Command.B8.CRC = crc16(RF_Command.Streem,6);
                                               ^
Warning[Pe223]: function "crc16" declared implicitly
   \   00000212   0621               MOVS     R1,#+6
   \   00000214   01A8               ADD      R0,SP,#+4
   \   00000216   ........           BL       crc16
   \   0000021A   F080               STRH     R0,[R6, #+6]
    467                    
    468                    
    469                          if (RF_CurrentTask==0)
    470            {
    471               //AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    472               //ButtonBipCounter=g_counter+1;
    473              
    474            }
    475                }
    476              
    477                 #ifdef  DIRECT_Q_MESURE
    478                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]++; 
    479                 #endif
    480                
    481                
    482                if (RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node)
   \                     ??RF_MasterExecut_18:
   \   0000021C   207A               LDRB     R0,[R4, #+8]
   \   0000021E   0121               MOVS     R1,#+1
   \   00000220   6156               LDRSB    R1,[R4, R1]
   \   00000222   C900               LSLS     R1,R1,#+3
   \   00000224   695C               LDRB     R1,[R5, R1]
   \   00000226   8842               CMP      R0,R1
   \   00000228   02D1               BNE      ??RF_MasterExecut_19
    483                {
    484                  RF_NodeTest.Sent++; 
   \   0000022A   E068               LDR      R0,[R4, #+12]
   \   0000022C   401C               ADDS     R0,R0,#+1
   \   0000022E   E060               STR      R0,[R4, #+12]
    485                }
    486                
    487                
    488                //RF_Status.EnableTX();
    489                RF_SendData(RF_Command.Streem, ByteToSend);
                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??RF_MasterExecut_19:
   \   00000230   6846               MOV      R0,SP
   \   00000232   0178               LDRB     R1,[R0, #+0]
   \   00000234   01A8               ADD      R0,SP,#+4
   \   00000236   ........           BL       RF_SendData
    490                //RF_Status.EnableRX();
    491                
    492          
    493               
    494                
    495          
    496                
    497                
    498              
    499            }
    500            
    501            static int RF_LastPerTime;
    502              if (RF_CurrentTask==0){
   \                     ??RF_MasterExecut_16:
   \   0000023A   0120               MOVS     R0,#+1
   \   0000023C   2056               LDRSB    R0,[R4, R0]
   \   0000023E   0028               CMP      R0,#+0
   \   00000240   05D1               BNE      ??RF_MasterExecut_20
    503                RF_Period=g_counter-RF_LastPerTime;
   \   00000242   0B48               LDR      R0,??RF_MasterExecut_4+0x1C  ;; g_counter
   \   00000244   03C8               LDM      R0!,{R0,R1}
   \   00000246   226B               LDR      R2,[R4, #+48]
   \   00000248   821A               SUBS     R2,R0,R2
   \   0000024A   E261               STR      R2,[R4, #+28]
    504                RF_LastPerTime=g_counter;
   \   0000024C   2063               STR      R0,[R4, #+48]
    505              }
    506            
    507          
    508          
    509                   #ifdef _LIVE_RJESTR  
    510               if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
    511                {
    512                   LIVE_TAB[LIVE_TAB_IDX]=0xA000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
    513                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    514          
    515                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)  
    516                {  
    517                   LIVE_TAB[LIVE_TAB_IDX]=0xC000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
    518                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    519                }
    520               #endif
    521          
    522            
    523          }
   \                     ??RF_MasterExecut_20:
   \   0000024E   FEBC               POP      {R1-R7}
   \   00000250   01BC               POP      {R0}
   \   00000252   0047               BX       R0               ;; return
   \                     ??RF_MasterExecut_4:
   \   00000254   ........           DC32     RF_TaskTab
   \   00000258   ........           DC32     MainStage
   \   0000025C   19060000           DC32     0x619
   \   00000260   ........           DC32     IndWys
   \   00000264   ........           DC32     CyklPerSekCount
   \   00000268   ........           DC32     NeuronsList
   \   0000026C   ........           DC32     TransQuality
   \   00000270   ........           DC32     g_counter

   \                                 In section .data, align 4
   \                     IndWys:
   \   00000000   00                 DC8 0
   \                     RF_CurrentTask:
   \   00000001   FF                 DC8 -1
   \                     RF_SpecialTask:
   \   00000002   FF                 DC8 -1
   \                     g_RF_TimeOutCounter:
   \   00000003   00                 DC8 0
   \   00000004   FF                 DC8 -1
   \   00000005   000000             DC8 0, 0, 0
   \                     RF_NodeTest:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \                     SymulacjaRejWyj:
   \   00000014   0000               DC8 0, 0
   \                     SymulacjaRejWej:
   \   00000016   AB00               DC16 171
   \                     poprawnych:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \                     RF_Period:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \                     odb:
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     licznik_cykli:
   \   00000028   00000000           DC32 0
   \                     pRF_Command:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   00000000           DC8 0, 0, 0, 0

   \                                 In section .data, align 1
   \                     IndWysNeg:
   \   00000000   01                 DC8 1

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     IndWys

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   39010200           DC32     0x20139

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     RF_Status

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     g_counter

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     RF_TaskTab

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   19060000           DC32     0x619

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     MainStage

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     TransQuality
    524          
    525          

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     RF_ExecuteOrder     32
     RF_MasterExecut     32
     RF_ReciveFarm       16
     RF_SendData          8


   Section sizes:

     Function/Label  Bytes
     --------------  -----
     RF_TaskTab       400
     RF_ReciveFarm    172
     RF_ExecuteOrder  564
     RF_SendData       12
     RF_MasterExecut  628
     IndWys            52
     IndWysNeg          1
     ??DataTable4       4
     ??DataTable5       4
     ??DataTable6       4
     ??DataTable9       4
     ??DataTable11      4
     ??DataTable12      4
     ??DataTable13      4
     ??DataTable14      4
      Others            2

 
   400 bytes in section .bss
    53 bytes in section .data
 1 410 bytes in section Debug.txt
 
 1 408 bytes of CODE memory (+ 2 bytes shared)
   453 bytes of DATA memory

Errors: none
Warnings: 6
