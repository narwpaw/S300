###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           23/Apr/2012  16:53:18 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\Framework\WizFiCommand.c                      #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\Framework\WizFiCommand.c" -D AT91SAM7S256 -D  #
#                    AT91SAM7SEK -D iH -D __ALARM -lC                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\List\" --diag_suppress    #
#                    Pa082 -o "D:\Zeuron\Projekty\S300\S300-program v0.6 -    #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\Obj\" --no_unroll         #
#                    --no_inline --no_tbaa --no_scheduling --debug --endian   #
#                    little --cpu ARM7TDMI -e --fpu None --dlib_config        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v0.6 - 13.03.2012\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v0.6 - 13.03.2012\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v0.6 - 13.03.2012\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\Framework\Configuration\" -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=Debug.txt --interwork --cpu_mode thumb   #
#                    -Om                                                      #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\List\WizFiCommand.lst     #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\Obj\WizFiCommand.o        #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\WizFiCommand.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 CEURON                                                   *//
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : WizFiCommacd.c                           *//
      7          //*  Opis                         : Obs³uga komend modu³u WizFi              *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 11.04.2012                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*//
     19          //****************************************************************************//
     20          
     21          
     22          
     23          #include "WizFi.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetNextTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetNextTx:
   \   00000000   8161               STR      R1,[R0, #+24]
   \   00000002   C261               STR      R2,[R0, #+28]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetTx:
   \   00000000   8160               STR      R1,[R0, #+8]
   \   00000002   C260               STR      R2,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsTxEmpty:
   \   00000000   C068               LDR      R0,[R0, #+12]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsNextTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsNextTxEmpty:
   \   00000000   C069               LDR      R0,[R0, #+28]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PDC_SendFrame(AT91PS_PDC, char *, unsigned int, char *, unsigned int)
   \                     AT91F_PDC_SendFrame:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   069F               LDR      R7,[SP, #+24]
   \   0000000A   ........           BL       AT91F_PDC_IsTxEmpty
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   0BD0               BEQ      ??AT91F_PDC_SendFrame_0
   \   00000012   3200               MOVS     R2,R6
   \   00000014   2900               MOVS     R1,R5
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       AT91F_PDC_SetTx
   \   0000001C   3A00               MOVS     R2,R7
   \   0000001E   0099               LDR      R1,[SP, #+0]
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       AT91F_PDC_SetNextTx
   \   00000026   0220               MOVS     R0,#+2
   \   00000028   0AE0               B        ??AT91F_PDC_SendFrame_1
   \                     ??AT91F_PDC_SendFrame_0:
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_PDC_IsNextTxEmpty
   \   00000030   0028               CMP      R0,#+0
   \   00000032   05D0               BEQ      ??AT91F_PDC_SendFrame_1
   \   00000034   3200               MOVS     R2,R6
   \   00000036   2900               MOVS     R1,R5
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   ........           BL       AT91F_PDC_SetNextTx
   \   0000003E   0120               MOVS     R0,#+1
   \                     ??AT91F_PDC_SendFrame_1:
   \   00000040   F8BC               POP      {R3-R7}
   \   00000042   02BC               POP      {R1}
   \   00000044   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_US_SendFrame(AT91PS_USART, unsigned char *, unsigned int, unsigned char *, unsigned int)
   \                     AT91F_US_SendFrame:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   029C               LDR      R4,[SP, #+8]
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0094               STR      R4,[SP, #+0]
   \   00000008   8024               MOVS     R4,#+128
   \   0000000A   6400               LSLS     R4,R4,#+1        ;; #+256
   \   0000000C   0019               ADDS     R0,R0,R4
   \   0000000E   ........           BL       AT91F_PDC_SendFrame
   \   00000012   02B0               ADD      SP,SP,#+8
   \   00000014   10BC               POP      {R4}
   \   00000016   02BC               POP      {R1}
   \   00000018   0847               BX       R1               ;; return

                                                            
                                                            ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline

        
        ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\WizFi.h",143  Warning[Pe001]: 
          last line of file ends without a newline
     24          //#include "Framework.h"
     25          //#include "core/device.h"                                                        //aduje bibliotreki dla odpowiedniego procesora
     26          //#include "main_H.h" 
     27          #include "string.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __intrinsic __code __interwork char *strstr(char const *, char const *)
   \                     strstr:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   ........           BL       __iar_Strstr
   \   00000006   08BC               POP      {R3}
   \   00000008   02BC               POP      {R1}
   \   0000000A   0847               BX       R1               ;; return
     28          
     29          
     30          //Sta³e ------------------------------------------------------------------------

   \                                 In section .rodata, align 4
     31              const char AT[]="AT\r";                                                     //komenda WizFi 
   \                     AT:
   \   00000000   41540D00           DC8 "AT\015"

   \                                 In section .rodata, align 4
     32              const char AT_XDUM0[]="AT+XDUM=0\r";                                                //komenda WizFi 
   \                     AT_XDUM0:
   \   00000000   41542B584455       DC8 "AT+XDUM=0\015"
   \              4D3D300D00  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
     33              const char AT_WD[]="AT+WD\r";                                               //komenda WizFi 
   \                     AT_WD:
   \   00000000   41542B57440D       DC8 "AT+WD\015"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     34              const char AT_NDHCP_1[]="AT+NDHCP=1\r";                                     //komenda WizFi   
   \                     AT_NDHCP_1:
   \   00000000   41542B4E4448       DC8 "AT+NDHCP=1\015"
   \              43503D310D00

   \                                 In section .rodata, align 4
     35              const char AT_WWEP1[]="AT+WWEP1=";                                          //komenda WizFi  
   \                     AT_WWEP1:
   \   00000000   41542B575745       DC8 "AT+WWEP1="
   \              50313D00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     36              const char AT_WWPA[]="AT+WWPA=";                                            //komenda WizFi  
   \                     AT_WWPA:
   \   00000000   41542B575750       DC8 "AT+WWPA="
   \              413D00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
     37              const char AT_WA[]="AT+WA=";                                              //komenda WizFi  
   \                     AT_WA:
   \   00000000   41542B57413D       DC8 "AT+WA="
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     38              const char AT_DNSLOOKUP[]="AT+DNSLOOKUP=";                                              //komenda WizFi  
   \                     AT_DNSLOOKUP:
   \   00000000   41542B444E53       DC8 "AT+DNSLOOKUP="
   \              4C4F4F4B5550
   \              3D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     39              const char AT_NCTCP[]="AT+NCTCP=";                                              //komenda WizFi  
   \                     AT_NCTCP:
   \   00000000   41542B4E4354       DC8 "AT+NCTCP="
   \              43503D00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     40              const char AT_NCLOSEALL[]="AT+NCLOSEALL\r";                                              //komenda WizFi  
   \                     AT_NCLOSEALL:
   \   00000000   41542B4E434C       DC8 "AT+NCLOSEALL\015"
   \              4F5345414C4C
   \              0D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     41              const char AT_WS[]="AT+WS\r";
   \                     AT_WS:
   \   00000000   41542B57530D       DC8 "AT+WS\015"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     42              const char AT_CID[]="AT+CID=?\r";
   \                     AT_CID:
   \   00000000   41542B434944       DC8 "AT+CID=?\015"
   \              3D3F0D00    
   \   0000000A   0000               DC8 0, 0
     43           //____________________________Koniec sta³ych ___________________________________
     44           
     45          
     46              extern unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
     47              
     48              
     49              
     50              extern char Variables[];    //zmienne
     51              extern short int VariablesAnal[];    //zmienne
     52          
     53                  
     54          
     55          
     56          
     57          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     58          void WizFiCommand_AT(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
     59          {
   \                     WizFiCommand_AT:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0D00               MOVS     R5,R1
   \   00000004   1400               MOVS     R4,R2
     60             if (Net->WiFi.SSID[0]==0)
   \   00000006   9A21               MOVS     R1,#+154
   \   00000008   615C               LDRB     R1,[R4, R1]
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   11D1               BNE      ??WizFiCommand_AT_0
     61             {
     62               Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000000E   2034               ADDS     R4,R4,#+32
   \   00000010   ....               LDR      R5,??DataTable20  ;; g_counter
   \   00000012   0CCD               LDM      R5!,{R2,R3}
   \   00000014   083D               SUBS     R5,R5,#+8
   \   00000016   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000018   8018               ADDS     R0,R0,R2
   \   0000001A   5941               ADCS     R1,R1,R3
   \   0000001C   03C4               STM      R4!,{R0,R1}
   \   0000001E   083C               SUBS     R4,R4,#+8
     63               Net->Status.FreezTime=g_counter+1000;
   \   00000020   0834               ADDS     R4,R4,#+8
   \   00000022   0CCD               LDM      R5!,{R2,R3}
   \   00000024   FA20               MOVS     R0,#+250
   \   00000026   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   00000028   0021               MOVS     R1,#+0
   \   0000002A   8018               ADDS     R0,R0,R2
   \   0000002C   5941               ADCS     R1,R1,R3
   \   0000002E   03C4               STM      R4!,{R0,R1}
   \   00000030   1BE0               B        ??WizFiCommand_AT_1
     64             }else{
     65               Buff_TX[0]='A';
   \                     ??WizFiCommand_AT_0:
   \   00000032   4121               MOVS     R1,#+65
   \   00000034   0170               STRB     R1,[R0, #+0]
     66               Buff_TX[1]='T';
   \   00000036   5421               MOVS     R1,#+84
   \   00000038   4170               STRB     R1,[R0, #+1]
     67               Buff_TX[2]=0x0d;
   \   0000003A   0D21               MOVS     R1,#+13
   \   0000003C   8170               STRB     R1,[R0, #+2]
     68               Buff_TX[3]=0x0A;
   \   0000003E   0A21               MOVS     R1,#+10
   \   00000040   C170               STRB     R1,[R0, #+3]
     69               
     70               Net->Status.CurrentOrder=WizFi_AT;
   \   00000042   0121               MOVS     R1,#+1
   \   00000044   A170               STRB     R1,[R4, #+2]
     71               AT91F_US_SendFrame(USART,Buff_TX,4,0, 0);                        //Wysyla ramke 
                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000046   82B0               SUB      SP,SP,#+8
   \   00000048   0021               MOVS     R1,#+0
   \   0000004A   0091               STR      R1,[SP, #+0]
   \   0000004C   0B00               MOVS     R3,R1
   \   0000004E   0422               MOVS     R2,#+4
   \   00000050   0100               MOVS     R1,R0
   \   00000052   2800               MOVS     R0,R5
   \   00000054   ........           BL       AT91F_US_SendFrame
   \   00000058   02B0               ADD      SP,SP,#+8
     72               Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000005A   2034               ADDS     R4,R4,#+32
   \   0000005C   ....               LDR      R0,??DataTable20  ;; g_counter
   \   0000005E   0CC8               LDM      R0!,{R2,R3}
   \   00000060   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000062   0021               MOVS     R1,#+0
   \   00000064   8018               ADDS     R0,R0,R2
   \   00000066   5941               ADCS     R1,R1,R3
   \   00000068   03C4               STM      R4!,{R0,R1}
     73             }
     74          }
   \                     ??WizFiCommand_AT_1:
   \   0000006A   38BC               POP      {R3-R5}
   \   0000006C   01BC               POP      {R0}
   \   0000006E   0047               BX       R0               ;; return
     75          

   \                                 In section Debug.txt, align 4, keep-with-next
     76          char WizFiResponseCommand_AT(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
     77          {
   \                     WizFiResponseCommand_AT:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1D00               MOVS     R5,R3
     78             char odp=0;
   \   00000006   0027               MOVS     R7,#+0
   \   00000008   3C00               MOVS     R4,R7
     79             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   12D0               BEQ      ??WizFiResponseCommand_AT_1
     80                  {
     81                    odp=1;  //ok 
   \   00000014   0124               MOVS     R4,#+1
     82                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   3800               MOVS     R0,R7
   \   00000018   3A00               MOVS     R2,R7
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_2
   \                     ??WizFiResponseCommand_AT_3:
   \   0000001C   7254               STRB     R2,[R6, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_3
     83                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2035               ADDS     R5,R5,#+32
   \   0000002C   ....               LDR      R0,??DataTable20  ;; g_counter
   \   0000002E   0CC8               LDM      R0!,{R2,R3}
   \   00000030   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000032   3900               MOVS     R1,R7
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C5               STM      R5!,{R0,R1}
     84                  }
     85             return odp;
   \                     ??WizFiResponseCommand_AT_1:
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   F8BC               POP      {R3-R7}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??WizFiResponseCommand_AT_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
     86          }
     87          
     88          
     89          
     90          
     91          
     92          
     93          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     94          void WizFiCommand_AT_XDUM0(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
     95          {
   \                     WizFiCommand_AT_XDUM0:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0800               MOVS     R0,R1
   \   00000004   1400               MOVS     R4,R2
     96             Net->Status.CurrentOrder=WizFi_AT_XDUM0;     
   \   00000006   0221               MOVS     R1,#+2
   \   00000008   A170               STRB     R1,[R4, #+2]
     97             AT91F_US_SendFrame(USART,(char*)AT_XDUM0,sizeof(AT_XDUM0)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0B00               MOVS     R3,R1
   \   00000012   0A22               MOVS     R2,#+10
   \   00000014   0749               LDR      R1,??WizFiCommand_AT_XDUM0_0  ;; AT_XDUM0
   \   00000016   ........           BL       AT91F_US_SendFrame
   \   0000001A   02B0               ADD      SP,SP,#+8
     98             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000001C   2034               ADDS     R4,R4,#+32
   \   0000001E   ....               LDR      R0,??DataTable20  ;; g_counter
   \   00000020   0CC8               LDM      R0!,{R2,R3}
   \   00000022   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   8018               ADDS     R0,R0,R2
   \   00000028   5941               ADCS     R1,R1,R3
   \   0000002A   03C4               STM      R4!,{R0,R1}
     99          }
   \   0000002C   10BC               POP      {R4}
   \   0000002E   01BC               POP      {R0}
   \   00000030   0047               BX       R0               ;; return
   \   00000032   C046               Nop      
   \                     ??WizFiCommand_AT_XDUM0_0:
   \   00000034   ........           DC32     AT_XDUM0
    100          

   \                                 In section Debug.txt, align 4, keep-with-next
    101          char WizFiResponseCommand_AT_XDUM0(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    102          {
   \                     WizFiResponseCommand_AT_XDUM0:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1D00               MOVS     R5,R3
    103             char odp=0;
   \   00000006   0027               MOVS     R7,#+0
   \   00000008   3C00               MOVS     R4,R7
    104             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_XDUM0_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   12D0               BEQ      ??WizFiResponseCommand_AT_XDUM0_1
    105                  {
    106                    odp=1;  //ok 
   \   00000014   0124               MOVS     R4,#+1
    107                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   3800               MOVS     R0,R7
   \   00000018   3A00               MOVS     R2,R7
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_XDUM0_2
   \                     ??WizFiResponseCommand_AT_XDUM0_3:
   \   0000001C   7254               STRB     R2,[R6, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_XDUM0_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_XDUM0_3
    108                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2035               ADDS     R5,R5,#+32
   \   0000002C   ....               LDR      R0,??DataTable20  ;; g_counter
   \   0000002E   0CC8               LDM      R0!,{R2,R3}
   \   00000030   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000032   3900               MOVS     R1,R7
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C5               STM      R5!,{R0,R1}
    109                  }
    110             return odp;
   \                     ??WizFiResponseCommand_AT_XDUM0_1:
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   F8BC               POP      {R3-R7}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??WizFiResponseCommand_AT_XDUM0_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    111          }
    112          
    113          
    114          
    115          
    116          
    117          
    118          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    119          void WizFiCommand_AT_NCLOSEALL(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    120          {
   \                     WizFiCommand_AT_NCLOSEALL:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0800               MOVS     R0,R1
   \   00000004   1400               MOVS     R4,R2
    121             Net->Status.CurrentOrder=WizFi_AT_NCLOSEALL;     
   \   00000006   0A21               MOVS     R1,#+10
   \   00000008   A170               STRB     R1,[R4, #+2]
    122             AT91F_US_SendFrame(USART,(char*)AT_NCLOSEALL,sizeof(AT_NCLOSEALL)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0B00               MOVS     R3,R1
   \   00000012   0D22               MOVS     R2,#+13
   \   00000014   0849               LDR      R1,??WizFiCommand_AT_NCLOSEALL_0  ;; AT_NCLOSEALL
   \   00000016   ........           BL       AT91F_US_SendFrame
   \   0000001A   02B0               ADD      SP,SP,#+8
    123             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000001C   2500               MOVS     R5,R4
   \   0000001E   2035               ADDS     R5,R5,#+32
   \   00000020   ....               LDR      R0,??DataTable20  ;; g_counter
   \   00000022   0CC8               LDM      R0!,{R2,R3}
   \   00000024   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   8018               ADDS     R0,R0,R2
   \   0000002A   5941               ADCS     R1,R1,R3
   \   0000002C   03C5               STM      R5!,{R0,R1}
    124             Net->Status.HostLink=DISCONNECTED; 
   \   0000002E   0020               MOVS     R0,#+0
   \   00000030   6070               STRB     R0,[R4, #+1]
    125          }
   \   00000032   38BC               POP      {R3-R5}
   \   00000034   01BC               POP      {R0}
   \   00000036   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_NCLOSEALL_0:
   \   00000038   ........           DC32     AT_NCLOSEALL
    126          

   \                                 In section Debug.txt, align 4, keep-with-next
    127          char WizFiResponseCommand_AT_NCLOSEALL0(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    128          {
   \                     WizFiResponseCommand_AT_NCLOSEALL0:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    129             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    130             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_NCLOSEALL0_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_NCLOSEALL0_1
    131                  {
    132                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    133                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NCLOSEALL0_2
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NCLOSEALL0_3
    134                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   2037               ADDS     R7,R7,#+32
   \   0000002E   ....               LDR      R0,??DataTable20  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    135                     Net->Status.HostLink=DISCONNECTED;
   \   00000040   6570               STRB     R5,[R4, #+1]
    136                  }
    137             return odp;
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    138          }
    139          
    140          
    141          
    142          
    143          
    144          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    145          void WizFiCommand_AT_WD(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    146          {
   \                     WizFiCommand_AT_WD:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0800               MOVS     R0,R1
   \   00000004   1400               MOVS     R4,R2
    147             Net->Status.CurrentOrder=WizFi_AT_WD;     
   \   00000006   0321               MOVS     R1,#+3
   \   00000008   A170               STRB     R1,[R4, #+2]
    148             AT91F_US_SendFrame(USART,(char*)AT_WD,sizeof(AT_WD)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0B00               MOVS     R3,R1
   \   00000012   0622               MOVS     R2,#+6
   \   00000014   0749               LDR      R1,??WizFiCommand_AT_WD_0  ;; AT_WD
   \   00000016   ........           BL       AT91F_US_SendFrame
   \   0000001A   02B0               ADD      SP,SP,#+8
    149             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000001C   2034               ADDS     R4,R4,#+32
   \   0000001E   ....               LDR      R0,??DataTable20  ;; g_counter
   \   00000020   0CC8               LDM      R0!,{R2,R3}
   \   00000022   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   8018               ADDS     R0,R0,R2
   \   00000028   5941               ADCS     R1,R1,R3
   \   0000002A   03C4               STM      R4!,{R0,R1}
    150          }
   \   0000002C   10BC               POP      {R4}
   \   0000002E   01BC               POP      {R0}
   \   00000030   0047               BX       R0               ;; return
   \   00000032   C046               Nop      
   \                     ??WizFiCommand_AT_WD_0:
   \   00000034   ........           DC32     AT_WD
    151          

   \                                 In section Debug.txt, align 4, keep-with-next
    152          char WizFiResponseCommand_AT_WD(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    153          {
   \                     WizFiResponseCommand_AT_WD:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1D00               MOVS     R5,R3
    154             char odp=0;
   \   00000006   0027               MOVS     R7,#+0
   \   00000008   3C00               MOVS     R4,R7
    155             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_WD_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   12D0               BEQ      ??WizFiResponseCommand_AT_WD_1
    156                  {
    157                    odp=1;  //ok 
   \   00000014   0124               MOVS     R4,#+1
    158                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   3800               MOVS     R0,R7
   \   00000018   3A00               MOVS     R2,R7
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WD_2
   \                     ??WizFiResponseCommand_AT_WD_3:
   \   0000001C   7254               STRB     R2,[R6, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WD_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WD_3
    159                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2035               ADDS     R5,R5,#+32
   \   0000002C   ....               LDR      R0,??DataTable20  ;; g_counter
   \   0000002E   0CC8               LDM      R0!,{R2,R3}
   \   00000030   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000032   3900               MOVS     R1,R7
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C5               STM      R5!,{R0,R1}
    160                  }
    161             return odp;
   \                     ??WizFiResponseCommand_AT_WD_1:
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   F8BC               POP      {R3-R7}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WD_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    162          }
    163          
    164          
    165          
    166          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    167          void WizFiCommand_AT_NDHCP_1(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    168          {
   \                     WizFiCommand_AT_NDHCP_1:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0800               MOVS     R0,R1
   \   00000004   1400               MOVS     R4,R2
    169             Net->Status.CurrentOrder=WizFi_AT_NDHCP_1;     
   \   00000006   0421               MOVS     R1,#+4
   \   00000008   A170               STRB     R1,[R4, #+2]
    170             AT91F_US_SendFrame(USART,(char*)AT_NDHCP_1,sizeof(AT_NDHCP_1)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0021               MOVS     R1,#+0
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0B00               MOVS     R3,R1
   \   00000012   0B22               MOVS     R2,#+11
   \   00000014   0749               LDR      R1,??WizFiCommand_AT_NDHCP_1_0  ;; AT_NDHCP_1
   \   00000016   ........           BL       AT91F_US_SendFrame
   \   0000001A   02B0               ADD      SP,SP,#+8
    171             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000001C   2034               ADDS     R4,R4,#+32
   \   0000001E   ....               LDR      R0,??DataTable20  ;; g_counter
   \   00000020   0CC8               LDM      R0!,{R2,R3}
   \   00000022   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000024   0021               MOVS     R1,#+0
   \   00000026   8018               ADDS     R0,R0,R2
   \   00000028   5941               ADCS     R1,R1,R3
   \   0000002A   03C4               STM      R4!,{R0,R1}
    172          }
   \   0000002C   10BC               POP      {R4}
   \   0000002E   01BC               POP      {R0}
   \   00000030   0047               BX       R0               ;; return
   \   00000032   C046               Nop      
   \                     ??WizFiCommand_AT_NDHCP_1_0:
   \   00000034   ........           DC32     AT_NDHCP_1
    173          

   \                                 In section Debug.txt, align 4, keep-with-next
    174          char WizFiResponseCommand_AT_NDHCP_1(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    175          {
   \                     WizFiResponseCommand_AT_NDHCP_1:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1D00               MOVS     R5,R3
    176             char odp=0;
   \   00000006   0027               MOVS     R7,#+0
   \   00000008   3C00               MOVS     R4,R7
    177             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_NDHCP_1_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   12D0               BEQ      ??WizFiResponseCommand_AT_NDHCP_1_1
    178                  {
    179                    odp=1;  //ok 
   \   00000014   0124               MOVS     R4,#+1
    180                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   3800               MOVS     R0,R7
   \   00000018   3A00               MOVS     R2,R7
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NDHCP_1_2
   \                     ??WizFiResponseCommand_AT_NDHCP_1_3:
   \   0000001C   7254               STRB     R2,[R6, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NDHCP_1_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NDHCP_1_3
    181                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2035               ADDS     R5,R5,#+32
   \   0000002C   ....               LDR      R0,??DataTable20  ;; g_counter
   \   0000002E   0CC8               LDM      R0!,{R2,R3}
   \   00000030   ....               LDR      R0,??DataTable21  ;; 0x2710
   \   00000032   3900               MOVS     R1,R7
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C5               STM      R5!,{R0,R1}
    182                  }
    183             return odp;
   \                     ??WizFiResponseCommand_AT_NDHCP_1_1:
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   F8BC               POP      {R3-R7}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??WizFiResponseCommand_AT_NDHCP_1_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    184          }
    185          
    186          
    187          
    188          
    189          
    190          
    191          
    192          
    193          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    194          void WizFiCommand_AT_WWEP1(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    195          {
   \                     WizFiCommand_AT_WWEP1:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0D00               MOVS     R5,R1
   \   00000004   1400               MOVS     R4,R2
    196                     Net->Status.CurrentOrder=WizFi_AT_WWEP1;
   \   00000006   0521               MOVS     R1,#+5
   \   00000008   A170               STRB     R1,[R4, #+2]
    197                     char BTS=0;
   \   0000000A   0022               MOVS     R2,#+0
   \   0000000C   1100               MOVS     R1,R2
    198                     for (char i=0; i<sizeof(AT_WWEP1); i++)  {Buff_TX[i]=AT_WWEP1[i];   BTS++;}
   \   0000000E   1300               MOVS     R3,R2
   \   00000010   07E0               B        ??WizFiCommand_AT_WWEP1_0
   \                     ??WizFiCommand_AT_WWEP1_1:
   \   00000012   1E00               MOVS     R6,R3
   \   00000014   1B4F               LDR      R7,??WizFiCommand_AT_WWEP1_2  ;; AT_WWEP1
   \   00000016   BF5D               LDRB     R7,[R7, R6]
   \   00000018   8755               STRB     R7,[R0, R6]
   \   0000001A   491C               ADDS     R1,R1,#+1
   \   0000001C   0906               LSLS     R1,R1,#+24
   \   0000001E   090E               LSRS     R1,R1,#+24
   \   00000020   5B1C               ADDS     R3,R3,#+1
   \                     ??WizFiCommand_AT_WWEP1_0:
   \   00000022   0A2B               CMP      R3,#+10
   \   00000024   F5D3               BCC      ??WizFiCommand_AT_WWEP1_1
    199                     BTS--;
   \   00000026   491E               SUBS     R1,R1,#+1
   \   00000028   0906               LSLS     R1,R1,#+24
   \   0000002A   090E               LSRS     R1,R1,#+24
    200                     char PassN=0;
   \   0000002C   06E0               B        ??WizFiCommand_AT_WWEP1_3
    201                     while ((Net->WiFi.Key[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Key[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WWEP1_4:
   \   0000002E   0F00               MOVS     R7,R1
   \   00000030   FB18               ADDS     R3,R7,R3
   \   00000032   3678               LDRB     R6,[R6, #+0]
   \   00000034   C654               STRB     R6,[R0, R3]
   \   00000036   521C               ADDS     R2,R2,#+1
   \   00000038   1206               LSLS     R2,R2,#+24
   \   0000003A   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WWEP1_3:
   \   0000003C   1300               MOVS     R3,R2
   \   0000003E   E618               ADDS     R6,R4,R3
   \   00000040   8B36               ADDS     R6,R6,#+139
   \   00000042   3778               LDRB     R7,[R6, #+0]
   \   00000044   002F               CMP      R7,#+0
   \   00000046   02D0               BEQ      ??WizFiCommand_AT_WWEP1_5
   \   00000048   1700               MOVS     R7,R2
   \   0000004A   102F               CMP      R7,#+16
   \   0000004C   EFD3               BCC      ??WizFiCommand_AT_WWEP1_4
    202                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WWEP1_5:
   \   0000004E   CB18               ADDS     R3,R1,R3
   \   00000050   0D26               MOVS     R6,#+13
   \   00000052   C654               STRB     R6,[R0, R3]
    203                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke  
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000054   82B0               SUB      SP,SP,#+8
   \   00000056   0023               MOVS     R3,#+0
   \   00000058   0093               STR      R3,[SP, #+0]
   \   0000005A   521C               ADDS     R2,R2,#+1
   \   0000005C   1206               LSLS     R2,R2,#+24
   \   0000005E   120E               LSRS     R2,R2,#+24
   \   00000060   8A18               ADDS     R2,R1,R2
   \   00000062   0100               MOVS     R1,R0
   \   00000064   2800               MOVS     R0,R5
   \   00000066   ........           BL       AT91F_US_SendFrame
   \   0000006A   02B0               ADD      SP,SP,#+8
    204                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000006C   2034               ADDS     R4,R4,#+32
   \   0000006E   ....               LDR      R0,??DataTable22  ;; g_counter
   \   00000070   0CC8               LDM      R0!,{R2,R3}
   \   00000072   ....               LDR      R0,??DataTable23  ;; 0x2710
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   8018               ADDS     R0,R0,R2
   \   00000078   5941               ADCS     R1,R1,R3
   \   0000007A   03C4               STM      R4!,{R0,R1}
    205          }
   \   0000007C   F8BC               POP      {R3-R7}
   \   0000007E   01BC               POP      {R0}
   \   00000080   0047               BX       R0               ;; return
   \   00000082   C046               Nop      
   \                     ??WizFiCommand_AT_WWEP1_2:
   \   00000084   ........           DC32     AT_WWEP1
    206          

   \                                 In section Debug.txt, align 4, keep-with-next
    207          char WizFiResponseCommand_AT_WWEP1(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    208          {
   \                     WizFiResponseCommand_AT_WWEP1:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1D00               MOVS     R5,R3
    209             char odp=0;
   \   00000006   0027               MOVS     R7,#+0
   \   00000008   3C00               MOVS     R4,R7
    210             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_WWEP1_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   12D0               BEQ      ??WizFiResponseCommand_AT_WWEP1_1
    211                  {
    212                    odp=1;  //ok 
   \   00000014   0124               MOVS     R4,#+1
    213                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   3800               MOVS     R0,R7
   \   00000018   3A00               MOVS     R2,R7
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WWEP1_2
   \                     ??WizFiResponseCommand_AT_WWEP1_3:
   \   0000001C   7254               STRB     R2,[R6, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WWEP1_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WWEP1_3
    214                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2035               ADDS     R5,R5,#+32
   \   0000002C   0648               LDR      R0,??WizFiResponseCommand_AT_WWEP1_0+0x4  ;; g_counter
   \   0000002E   0CC8               LDM      R0!,{R2,R3}
   \   00000030   0648               LDR      R0,??WizFiResponseCommand_AT_WWEP1_0+0x8  ;; 0x2710
   \   00000032   3900               MOVS     R1,R7
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C5               STM      R5!,{R0,R1}
    215                  }
    216             return odp;
   \                     ??WizFiResponseCommand_AT_WWEP1_1:
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   F8BC               POP      {R3-R7}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WWEP1_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000048   ........           DC32     g_counter
   \   0000004C   10270000           DC32     0x2710
    217          }
    218          
    219          
    220          
    221          
    222          
    223          
    224          
    225          
    226          
    227          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    228          void WizFiCommand_AT_WWPA(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    229          {
   \                     WizFiCommand_AT_WWPA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0D00               MOVS     R5,R1
   \   00000004   1400               MOVS     R4,R2
    230                     Net->Status.CurrentOrder=WizFi_AT_WWPA;
   \   00000006   0621               MOVS     R1,#+6
   \   00000008   A170               STRB     R1,[R4, #+2]
    231                     char BTS=0;
   \   0000000A   0022               MOVS     R2,#+0
   \   0000000C   1100               MOVS     R1,R2
    232                     for (char i=0; i<sizeof(AT_WWPA); i++)  {Buff_TX[i]=AT_WWPA[i];   BTS++;}
   \   0000000E   1300               MOVS     R3,R2
   \   00000010   07E0               B        ??WizFiCommand_AT_WWPA_0
   \                     ??WizFiCommand_AT_WWPA_1:
   \   00000012   1E00               MOVS     R6,R3
   \   00000014   1B4F               LDR      R7,??WizFiCommand_AT_WWPA_2  ;; AT_WWPA
   \   00000016   BF5D               LDRB     R7,[R7, R6]
   \   00000018   8755               STRB     R7,[R0, R6]
   \   0000001A   491C               ADDS     R1,R1,#+1
   \   0000001C   0906               LSLS     R1,R1,#+24
   \   0000001E   090E               LSRS     R1,R1,#+24
   \   00000020   5B1C               ADDS     R3,R3,#+1
   \                     ??WizFiCommand_AT_WWPA_0:
   \   00000022   092B               CMP      R3,#+9
   \   00000024   F5D3               BCC      ??WizFiCommand_AT_WWPA_1
    233                     BTS--;
   \   00000026   491E               SUBS     R1,R1,#+1
   \   00000028   0906               LSLS     R1,R1,#+24
   \   0000002A   090E               LSRS     R1,R1,#+24
    234                     char PassN=0;
   \   0000002C   06E0               B        ??WizFiCommand_AT_WWPA_3
    235                     while ((Net->WiFi.Key[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Key[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WWPA_4:
   \   0000002E   0F00               MOVS     R7,R1
   \   00000030   FB18               ADDS     R3,R7,R3
   \   00000032   3678               LDRB     R6,[R6, #+0]
   \   00000034   C654               STRB     R6,[R0, R3]
   \   00000036   521C               ADDS     R2,R2,#+1
   \   00000038   1206               LSLS     R2,R2,#+24
   \   0000003A   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WWPA_3:
   \   0000003C   1300               MOVS     R3,R2
   \   0000003E   E618               ADDS     R6,R4,R3
   \   00000040   8B36               ADDS     R6,R6,#+139
   \   00000042   3778               LDRB     R7,[R6, #+0]
   \   00000044   002F               CMP      R7,#+0
   \   00000046   02D0               BEQ      ??WizFiCommand_AT_WWPA_5
   \   00000048   1700               MOVS     R7,R2
   \   0000004A   102F               CMP      R7,#+16
   \   0000004C   EFD3               BCC      ??WizFiCommand_AT_WWPA_4
    236                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WWPA_5:
   \   0000004E   CB18               ADDS     R3,R1,R3
   \   00000050   0D26               MOVS     R6,#+13
   \   00000052   C654               STRB     R6,[R0, R3]
    237          
    238                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000054   82B0               SUB      SP,SP,#+8
   \   00000056   0023               MOVS     R3,#+0
   \   00000058   0093               STR      R3,[SP, #+0]
   \   0000005A   521C               ADDS     R2,R2,#+1
   \   0000005C   1206               LSLS     R2,R2,#+24
   \   0000005E   120E               LSRS     R2,R2,#+24
   \   00000060   8A18               ADDS     R2,R1,R2
   \   00000062   0100               MOVS     R1,R0
   \   00000064   2800               MOVS     R0,R5
   \   00000066   ........           BL       AT91F_US_SendFrame
   \   0000006A   02B0               ADD      SP,SP,#+8
    239                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000006C   2034               ADDS     R4,R4,#+32
   \   0000006E   0648               LDR      R0,??WizFiCommand_AT_WWPA_2+0x4  ;; g_counter
   \   00000070   0CC8               LDM      R0!,{R2,R3}
   \   00000072   0648               LDR      R0,??WizFiCommand_AT_WWPA_2+0x8  ;; 0x2710
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   8018               ADDS     R0,R0,R2
   \   00000078   5941               ADCS     R1,R1,R3
   \   0000007A   03C4               STM      R4!,{R0,R1}
    240          }
   \   0000007C   F8BC               POP      {R3-R7}
   \   0000007E   01BC               POP      {R0}
   \   00000080   0047               BX       R0               ;; return
   \   00000082   C046               Nop      
   \                     ??WizFiCommand_AT_WWPA_2:
   \   00000084   ........           DC32     AT_WWPA
   \   00000088   ........           DC32     g_counter
   \   0000008C   10270000           DC32     0x2710
    241          

   \                                 In section Debug.txt, align 4, keep-with-next
    242          char WizFiResponseCommand_AT_WWPA(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    243          {
   \                     WizFiResponseCommand_AT_WWPA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1D00               MOVS     R5,R3
    244             char odp=0;
   \   00000006   0027               MOVS     R7,#+0
   \   00000008   3C00               MOVS     R4,R7
    245             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_WWPA_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   12D0               BEQ      ??WizFiResponseCommand_AT_WWPA_1
    246                  {
    247                    odp=1;  //ok 
   \   00000014   0124               MOVS     R4,#+1
    248                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   3800               MOVS     R0,R7
   \   00000018   3A00               MOVS     R2,R7
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WWPA_2
   \                     ??WizFiResponseCommand_AT_WWPA_3:
   \   0000001C   7254               STRB     R2,[R6, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WWPA_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WWPA_3
    249                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2035               ADDS     R5,R5,#+32
   \   0000002C   0648               LDR      R0,??WizFiResponseCommand_AT_WWPA_0+0x4  ;; g_counter
   \   0000002E   0CC8               LDM      R0!,{R2,R3}
   \   00000030   0648               LDR      R0,??WizFiResponseCommand_AT_WWPA_0+0x8  ;; 0x2710
   \   00000032   3900               MOVS     R1,R7
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C5               STM      R5!,{R0,R1}
    250                  }
    251             return odp;
   \                     ??WizFiResponseCommand_AT_WWPA_1:
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   F8BC               POP      {R3-R7}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WWPA_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000048   ........           DC32     g_counter
   \   0000004C   10270000           DC32     0x2710
    252          }
    253          
    254          
    255          
    256          
    257          
    258          
    259          
    260          
    261          //³¹czenie z accespointem ------------------------------------------------------
    262          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    263          void WizFiCommand_AT_WA(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    264          {
   \                     WizFiCommand_AT_WA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0D00               MOVS     R5,R1
   \   00000004   1400               MOVS     R4,R2
    265               if (Net->WiFi.SSID[0]!=0)
   \   00000006   9A21               MOVS     R1,#+154
   \   00000008   615C               LDRB     R1,[R4, R1]
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   3AD0               BEQ      ??WizFiCommand_AT_WA_0
    266               {
    267                     Net->Status.CurrentOrder=WizFi_AT_WA;
   \   0000000E   0721               MOVS     R1,#+7
   \   00000010   A170               STRB     R1,[R4, #+2]
    268          
    269                     char BTS=0;
   \   00000012   0022               MOVS     R2,#+0
   \   00000014   1100               MOVS     R1,R2
    270                     for (char i=0; i<sizeof(AT_WA); i++)  {Buff_TX[i]=AT_WA[i];   BTS++;}
   \   00000016   1300               MOVS     R3,R2
   \   00000018   07E0               B        ??WizFiCommand_AT_WA_1
   \                     ??WizFiCommand_AT_WA_2:
   \   0000001A   1E00               MOVS     R6,R3
   \   0000001C   1B4F               LDR      R7,??WizFiCommand_AT_WA_3  ;; AT_WA
   \   0000001E   BF5D               LDRB     R7,[R7, R6]
   \   00000020   8755               STRB     R7,[R0, R6]
   \   00000022   491C               ADDS     R1,R1,#+1
   \   00000024   0906               LSLS     R1,R1,#+24
   \   00000026   090E               LSRS     R1,R1,#+24
   \   00000028   5B1C               ADDS     R3,R3,#+1
   \                     ??WizFiCommand_AT_WA_1:
   \   0000002A   072B               CMP      R3,#+7
   \   0000002C   F5D3               BCC      ??WizFiCommand_AT_WA_2
    271                     BTS--;
   \   0000002E   491E               SUBS     R1,R1,#+1
   \   00000030   0906               LSLS     R1,R1,#+24
   \   00000032   090E               LSRS     R1,R1,#+24
    272                     char PassN=0;
   \   00000034   06E0               B        ??WizFiCommand_AT_WA_4
    273                     while ((Net->WiFi.SSID[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.SSID[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WA_5:
   \   00000036   0F00               MOVS     R7,R1
   \   00000038   FB18               ADDS     R3,R7,R3
   \   0000003A   3678               LDRB     R6,[R6, #+0]
   \   0000003C   C654               STRB     R6,[R0, R3]
   \   0000003E   521C               ADDS     R2,R2,#+1
   \   00000040   1206               LSLS     R2,R2,#+24
   \   00000042   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WA_4:
   \   00000044   1300               MOVS     R3,R2
   \   00000046   E618               ADDS     R6,R4,R3
   \   00000048   9A36               ADDS     R6,R6,#+154
   \   0000004A   3778               LDRB     R7,[R6, #+0]
   \   0000004C   002F               CMP      R7,#+0
   \   0000004E   02D0               BEQ      ??WizFiCommand_AT_WA_6
   \   00000050   1700               MOVS     R7,R2
   \   00000052   102F               CMP      R7,#+16
   \   00000054   EFD3               BCC      ??WizFiCommand_AT_WA_5
    274                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WA_6:
   \   00000056   CB18               ADDS     R3,R1,R3
   \   00000058   0D26               MOVS     R6,#+13
   \   0000005A   C654               STRB     R6,[R0, R3]
    275                     
    276                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000005C   82B0               SUB      SP,SP,#+8
   \   0000005E   0023               MOVS     R3,#+0
   \   00000060   0093               STR      R3,[SP, #+0]
   \   00000062   521C               ADDS     R2,R2,#+1
   \   00000064   1206               LSLS     R2,R2,#+24
   \   00000066   120E               LSRS     R2,R2,#+24
   \   00000068   8A18               ADDS     R2,R1,R2
   \   0000006A   0100               MOVS     R1,R0
   \   0000006C   2800               MOVS     R0,R5
   \   0000006E   ........           BL       AT91F_US_SendFrame
   \   00000072   02B0               ADD      SP,SP,#+8
    277                     Net->Status.Timeout=g_counter + AP_CONNECT_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000074   2034               ADDS     R4,R4,#+32
   \   00000076   0648               LDR      R0,??WizFiCommand_AT_WA_3+0x4  ;; g_counter
   \   00000078   0CC8               LDM      R0!,{R2,R3}
   \   0000007A   0648               LDR      R0,??WizFiCommand_AT_WA_3+0x8  ;; 0x4e20
   \   0000007C   0021               MOVS     R1,#+0
   \   0000007E   8018               ADDS     R0,R0,R2
   \   00000080   5941               ADCS     R1,R1,R3
   \   00000082   03C4               STM      R4!,{R0,R1}
    278               }
    279          
    280          
    281          }
   \                     ??WizFiCommand_AT_WA_0:
   \   00000084   F8BC               POP      {R3-R7}
   \   00000086   01BC               POP      {R0}
   \   00000088   0047               BX       R0               ;; return
   \   0000008A   C046               Nop      
   \                     ??WizFiCommand_AT_WA_3:
   \   0000008C   ........           DC32     AT_WA
   \   00000090   ........           DC32     g_counter
   \   00000094   204E0000           DC32     0x4e20
    282          

   \                                 In section Debug.txt, align 4, keep-with-next
    283          char WizFiResponseCommand_AT_WA(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    284          {
   \                     WizFiResponseCommand_AT_WA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1D00               MOVS     R5,R3
    285             char odp=0;
   \   00000006   0027               MOVS     R7,#+0
   \   00000008   3C00               MOVS     R4,R7
    286             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_WA_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   12D0               BEQ      ??WizFiResponseCommand_AT_WA_1
    287                  {
    288                    odp=1;  //ok 
   \   00000014   0124               MOVS     R4,#+1
    289                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   3800               MOVS     R0,R7
   \   00000018   3A00               MOVS     R2,R7
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WA_2
   \                     ??WizFiResponseCommand_AT_WA_3:
   \   0000001C   7254               STRB     R2,[R6, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WA_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WA_3
    290                    
    291                    //Tu mo¿e byæ pobranie otrzymanego IP, Bramy, 
    292          
    293                    //---------------
    294                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2035               ADDS     R5,R5,#+32
   \   0000002C   0648               LDR      R0,??WizFiResponseCommand_AT_WA_0+0x4  ;; g_counter
   \   0000002E   0CC8               LDM      R0!,{R2,R3}
   \   00000030   0648               LDR      R0,??WizFiResponseCommand_AT_WA_0+0x8  ;; 0x2710
   \   00000032   3900               MOVS     R1,R7
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C5               STM      R5!,{R0,R1}
    295                  }
    296               
    297             return odp;
   \                     ??WizFiResponseCommand_AT_WA_1:
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   F8BC               POP      {R3-R7}
   \   0000003E   02BC               POP      {R1}
   \   00000040   0847               BX       R1               ;; return
   \   00000042   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WA_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000048   ........           DC32     g_counter
   \   0000004C   10270000           DC32     0x2710
    298          }
    299          
    300          
    301          
    302          
    303          
    304          
    305          //Sprawdzenie czy w WiFi.Domena jest wpisana domena czy IP serwera domeny ------
    306          // odp: 0- domena
    307          // odp: 1 - IP
    308          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    309          char CheckExistDomenaIP(_Net *Net)
    310          {
   \                     CheckExistDomenaIP:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0100               MOVS     R1,R0
    311            char ExistIP=1;
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   1000               MOVS     R0,R2
    312            
    313            if ((Net->WiFi.Domena[0]<'0') && ((Net->WiFi.Domena[0]>'9'))) ExistIP=0;
   \   00000008   0B00               MOVS     R3,R1
   \   0000000A   A933               ADDS     R3,R3,#+169
   \   0000000C   1C78               LDRB     R4,[R3, #+0]
   \   0000000E   302C               CMP      R4,#+48
   \   00000010   0FD2               BCS      ??CheckExistDomenaIP_0
   \   00000012   2300               MOVS     R3,R4
   \   00000014   3A2B               CMP      R3,#+58
   \   00000016   0CD3               BCC      ??CheckExistDomenaIP_0
   \   00000018   0020               MOVS     R0,#+0
    314            
    315            char Size= sizeof(Net->WiFi.Domena);
    316            char Znak=1;
   \   0000001A   0AE0               B        ??CheckExistDomenaIP_0
    317            while ((Znak<Size) && (ExistIP==1)  && (Net->WiFi.Domena[Znak]>0) )  
    318            {
    319               if (((Net->WiFi.Domena[Znak]<'0') || (Net->WiFi.Domena[Znak]>'9')) && (Net->WiFi.Domena[Znak]!='.'))  ExistIP=0;
   \                     ??CheckExistDomenaIP_1:
   \   0000001C   302C               CMP      R4,#+48
   \   0000001E   01D3               BCC      ??CheckExistDomenaIP_2
   \   00000020   3A2C               CMP      R4,#+58
   \   00000022   03D3               BCC      ??CheckExistDomenaIP_3
   \                     ??CheckExistDomenaIP_2:
   \   00000024   2300               MOVS     R3,R4
   \   00000026   2E2B               CMP      R3,#+46
   \   00000028   00D0               BEQ      ??CheckExistDomenaIP_3
   \   0000002A   0020               MOVS     R0,#+0
    320            
    321               Znak++; 
   \                     ??CheckExistDomenaIP_3:
   \   0000002C   521C               ADDS     R2,R2,#+1
   \   0000002E   1206               LSLS     R2,R2,#+24
   \   00000030   120E               LSRS     R2,R2,#+24
    322            }
   \                     ??CheckExistDomenaIP_0:
   \   00000032   1300               MOVS     R3,R2
   \   00000034   192B               CMP      R3,#+25
   \   00000036   08D2               BCS      ??CheckExistDomenaIP_4
   \   00000038   0300               MOVS     R3,R0
   \   0000003A   012B               CMP      R3,#+1
   \   0000003C   05D1               BNE      ??CheckExistDomenaIP_4
   \   0000003E   1300               MOVS     R3,R2
   \   00000040   CB18               ADDS     R3,R1,R3
   \   00000042   A933               ADDS     R3,R3,#+169
   \   00000044   1C78               LDRB     R4,[R3, #+0]
   \   00000046   002C               CMP      R4,#+0
   \   00000048   E8D1               BNE      ??CheckExistDomenaIP_1
    323            
    324            //je¿eli w Net->WiFi.Domena wpisany jest IP tp przepisz do  Net->Status.DomenaIP
    325            if (ExistIP==1)
   \                     ??CheckExistDomenaIP_4:
   \   0000004A   0200               MOVS     R2,R0
   \   0000004C   012A               CMP      R2,#+1
   \   0000004E   1ED1               BNE      ??CheckExistDomenaIP_5
    326            {
    327              Znak=0;
   \   00000050   0023               MOVS     R3,#+0
   \   00000052   1A00               MOVS     R2,R3
    328              for (char i=0; i<Size; i++) Net->Status.DomenaIP[i]=0;
   \   00000054   1C00               MOVS     R4,R3
   \   00000056   1E00               MOVS     R6,R3
   \   00000058   04E0               B        ??CheckExistDomenaIP_6
   \                     ??CheckExistDomenaIP_7:
   \   0000005A   4D19               ADDS     R5,R1,R5
   \   0000005C   6E71               STRB     R6,[R5, #+5]
   \   0000005E   641C               ADDS     R4,R4,#+1
   \   00000060   2406               LSLS     R4,R4,#+24
   \   00000062   240E               LSRS     R4,R4,#+24
   \                     ??CheckExistDomenaIP_6:
   \   00000064   2500               MOVS     R5,R4
   \   00000066   192D               CMP      R5,#+25
   \   00000068   F7D3               BCC      ??CheckExistDomenaIP_7
    329              while ((Znak<Size) && (ExistIP)  && (Net->WiFi.Domena[Znak]>0))
   \                     ??CheckExistDomenaIP_8:
   \   0000006A   1300               MOVS     R3,R2
   \   0000006C   192B               CMP      R3,#+25
   \   0000006E   0ED2               BCS      ??CheckExistDomenaIP_5
   \   00000070   0300               MOVS     R3,R0
   \   00000072   0CD0               BEQ      ??CheckExistDomenaIP_5
   \   00000074   1300               MOVS     R3,R2
   \   00000076   CB18               ADDS     R3,R1,R3
   \   00000078   1C00               MOVS     R4,R3
   \   0000007A   A934               ADDS     R4,R4,#+169
   \   0000007C   2578               LDRB     R5,[R4, #+0]
   \   0000007E   002D               CMP      R5,#+0
   \   00000080   05D0               BEQ      ??CheckExistDomenaIP_5
    330              {
    331                Net->Status.DomenaIP[Znak]=Net->WiFi.Domena[Znak];
   \   00000082   2C00               MOVS     R4,R5
   \   00000084   5C71               STRB     R4,[R3, #+5]
    332                Znak++;
   \   00000086   521C               ADDS     R2,R2,#+1
   \   00000088   1206               LSLS     R2,R2,#+24
   \   0000008A   120E               LSRS     R2,R2,#+24
   \   0000008C   EDE7               B        ??CheckExistDomenaIP_8
    333              }
    334            }
    335            
    336            return ExistIP;
   \                     ??CheckExistDomenaIP_5:
   \   0000008E   70BC               POP      {R4-R6}
   \   00000090   02BC               POP      {R1}
   \   00000092   0847               BX       R1               ;; return
    337            
    338          }
    339          
    340          
    341          
    342          
    343          
    344          
    345          //Pobranie adresu domeny ------------------------------------------------------
    346          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    347          void WizFiCommand_AT_DNSLOOKUP(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    348          {
   \                     WizFiCommand_AT_DNSLOOKUP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
   \   00000006   1400               MOVS     R4,R2
    349                if (Net->WiFi.Domena[0]!=0)
   \   00000008   A920               MOVS     R0,#+169
   \   0000000A   205C               LDRB     R0,[R4, R0]
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   50D0               BEQ      ??WizFiCommand_AT_DNSLOOKUP_0
    350                {
    351             
    352                    if (CheckExistDomenaIP(Net)==0)                                                  //sprawdzenie czy w WiFi.Domena jest wpisana domena czy IP serwera domeny
   \   00000010   2000               MOVS     R0,R4
   \   00000012   ........           BL       CheckExistDomenaIP
   \   00000016   0028               CMP      R0,#+0
   \   00000018   3FD1               BNE      ??WizFiCommand_AT_DNSLOOKUP_1
    353                    {                                                                     //w WiFi.Domena jest wpisana domena
    354                       Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
   \   0000001A   0820               MOVS     R0,#+8
   \   0000001C   A070               STRB     R0,[R4, #+2]
    355            
    356                       char BTS=0;
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   0800               MOVS     R0,R1
    357                       for (char i=0; i<sizeof(AT_DNSLOOKUP); i++)  {Buff_TX[i]=AT_DNSLOOKUP[i];   BTS++;}
   \   00000022   0A00               MOVS     R2,R1
   \   00000024   07E0               B        ??WizFiCommand_AT_DNSLOOKUP_2
   \                     ??WizFiCommand_AT_DNSLOOKUP_3:
   \   00000026   1300               MOVS     R3,R2
   \   00000028   234F               LDR      R7,??WizFiCommand_AT_DNSLOOKUP_4  ;; AT_DNSLOOKUP
   \   0000002A   FF5C               LDRB     R7,[R7, R3]
   \   0000002C   EF54               STRB     R7,[R5, R3]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   0006               LSLS     R0,R0,#+24
   \   00000032   000E               LSRS     R0,R0,#+24
   \   00000034   521C               ADDS     R2,R2,#+1
   \                     ??WizFiCommand_AT_DNSLOOKUP_2:
   \   00000036   0E2A               CMP      R2,#+14
   \   00000038   F5D3               BCC      ??WizFiCommand_AT_DNSLOOKUP_3
    358                       BTS--;
   \   0000003A   401E               SUBS     R0,R0,#+1
   \   0000003C   0006               LSLS     R0,R0,#+24
   \   0000003E   000E               LSRS     R0,R0,#+24
    359                       char PassN=0;
   \   00000040   06E0               B        ??WizFiCommand_AT_DNSLOOKUP_5
    360                       while ((Net->WiFi.Domena[PassN]>0) && (PassN<=25)) {Buff_TX[BTS+PassN]=Net->WiFi.Domena[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_DNSLOOKUP_6:
   \   00000042   0700               MOVS     R7,R0
   \   00000044   BA18               ADDS     R2,R7,R2
   \   00000046   1B78               LDRB     R3,[R3, #+0]
   \   00000048   AB54               STRB     R3,[R5, R2]
   \   0000004A   491C               ADDS     R1,R1,#+1
   \   0000004C   0906               LSLS     R1,R1,#+24
   \   0000004E   090E               LSRS     R1,R1,#+24
   \                     ??WizFiCommand_AT_DNSLOOKUP_5:
   \   00000050   0A00               MOVS     R2,R1
   \   00000052   A318               ADDS     R3,R4,R2
   \   00000054   A933               ADDS     R3,R3,#+169
   \   00000056   1F78               LDRB     R7,[R3, #+0]
   \   00000058   002F               CMP      R7,#+0
   \   0000005A   02D0               BEQ      ??WizFiCommand_AT_DNSLOOKUP_7
   \   0000005C   0F00               MOVS     R7,R1
   \   0000005E   1A2F               CMP      R7,#+26
   \   00000060   EFD3               BCC      ??WizFiCommand_AT_DNSLOOKUP_6
    361                       Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_DNSLOOKUP_7:
   \   00000062   8218               ADDS     R2,R0,R2
   \   00000064   0D23               MOVS     R3,#+13
   \   00000066   AB54               STRB     R3,[R5, R2]
    362                   
    363                       AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000068   82B0               SUB      SP,SP,#+8
   \   0000006A   0022               MOVS     R2,#+0
   \   0000006C   0092               STR      R2,[SP, #+0]
   \   0000006E   1300               MOVS     R3,R2
   \   00000070   491C               ADDS     R1,R1,#+1
   \   00000072   0906               LSLS     R1,R1,#+24
   \   00000074   090E               LSRS     R1,R1,#+24
   \   00000076   4218               ADDS     R2,R0,R1
   \   00000078   2900               MOVS     R1,R5
   \   0000007A   3000               MOVS     R0,R6
   \   0000007C   ........           BL       AT91F_US_SendFrame
   \   00000080   02B0               ADD      SP,SP,#+8
    364                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000082   2500               MOVS     R5,R4
   \   00000084   2035               ADDS     R5,R5,#+32
   \   00000086   0D48               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_4+0x4  ;; g_counter
   \   00000088   0CC8               LDM      R0!,{R2,R3}
   \   0000008A   0D48               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_4+0x8  ;; 0x2710
   \   0000008C   0021               MOVS     R1,#+0
   \   0000008E   8018               ADDS     R0,R0,R2
   \   00000090   5941               ADCS     R1,R1,R3
   \   00000092   03C5               STM      R5!,{R0,R1}
    365                       Net->Status.NextHttpOrder=HTTP_GET_Config;
   \   00000094   0F20               MOVS     R0,#+15
   \   00000096   E070               STRB     R0,[R4, #+3]
   \   00000098   0BE0               B        ??WizFiCommand_AT_DNSLOOKUP_0
    366                    }
    367                    else                                                                  //je¿eli w WiFi.Domena jest wpisany IP serwera domeny
    368                    {
    369                       Net->Status.AccesPointAssociate=CONNECTED;    
   \                     ??WizFiCommand_AT_DNSLOOKUP_1:
   \   0000009A   0320               MOVS     R0,#+3
   \   0000009C   2070               STRB     R0,[R4, #+0]
    370                       Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   A070               STRB     R0,[R4, #+2]
    371                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   000000A2   2034               ADDS     R4,R4,#+32
   \   000000A4   0548               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_4+0x4  ;; g_counter
   \   000000A6   0CC8               LDM      R0!,{R2,R3}
   \   000000A8   0548               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_4+0x8  ;; 0x2710
   \   000000AA   0021               MOVS     R1,#+0
   \   000000AC   8018               ADDS     R0,R0,R2
   \   000000AE   5941               ADCS     R1,R1,R3
   \   000000B0   03C4               STM      R4!,{R0,R1}
    372                    }
    373                    
    374                }
    375          }
   \                     ??WizFiCommand_AT_DNSLOOKUP_0:
   \   000000B2   F8BC               POP      {R3-R7}
   \   000000B4   01BC               POP      {R0}
   \   000000B6   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_DNSLOOKUP_4:
   \   000000B8   ........           DC32     AT_DNSLOOKUP
   \   000000BC   ........           DC32     g_counter
   \   000000C0   10270000           DC32     0x2710
    376          
    377          
    378          
    379          /*
    380          //Pobranie adresu domeny ------------------------------------------------------
    381          //------------------------------------------------------------------------------
    382          void WizFiCommand_AT_DNSLOOKUP(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    383          {
    384                       Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
    385            
    386                       char BTS=0;
    387                       for (char i=0; i<sizeof(AT_DNSLOOKUP); i++)  {Buff_TX[i]=AT_DNSLOOKUP[i];   BTS++;}
    388                       BTS--;
    389                       char PassN=0;
    390                       while ((Net->WiFi.Domena[PassN]>0) && (PassN<=25)) {Buff_TX[BTS+PassN]=Net->WiFi.Domena[PassN]; PassN++;}
    391                       Buff_TX[BTS+PassN++]=0x0d;
    392                   
    393                       AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
    394                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
    395                       Net->Status.NextHttpOrder=HTTP_GET_Config;
    396          }
    397          */
    398          
    399          

   \                                 In section Debug.txt, align 4, keep-with-next
    400          char WizFiResponseCommand_AT_DNSLOOKUP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    401          {
   \                     WizFiResponseCommand_AT_DNSLOOKUP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   1E00               MOVS     R6,R3
    402             char odp=0;
   \   00000004   0024               MOVS     R4,#+0
   \   00000006   2500               MOVS     R5,R4
    403             char *pTxt;
    404             
    405             pTxt=strstr(Buff_RX, "IP:");
   \   00000008   1BA1               ADR      R1,??WizFiResponseCommand_AT_DNSLOOKUP_0  ;; "IP:"
   \   0000000A   ........           BL       strstr
   \   0000000E   0700               MOVS     R7,R0
    406             if((strstr(Buff_RX, "OK")!=NULL) && (pTxt!=NULL))
   \   00000010   1AA1               ADR      R1,??WizFiResponseCommand_AT_DNSLOOKUP_0+0x4  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   ........           BL       strstr
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   28D0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_1
   \   0000001C   002F               CMP      R7,#+0
   \   0000001E   26D0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_1
    407                  {
    408                    odp=1;  //ok 
   \   00000020   0125               MOVS     R5,#+1
    409                    
    410                    Net->Status.AccesPointAssociate=CONNECTED;    
   \   00000022   0320               MOVS     R0,#+3
   \   00000024   3070               STRB     R0,[R6, #+0]
    411                    Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   00000026   2000               MOVS     R0,R4
   \   00000028   B070               STRB     R0,[R6, #+2]
    412                      
    413                    pTxt+=3;
   \   0000002A   FF1C               ADDS     R7,R7,#+3
    414                    char p=0;
   \   0000002C   06E0               B        ??WizFiResponseCommand_AT_DNSLOOKUP_2
    415                    while ((*pTxt!=0x0d) && (p<=15))  {Net->Status.DomenaIP[p++]=*pTxt; pTxt++;}
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_3:
   \   0000002E   7118               ADDS     R1,R6,R1
   \   00000030   3A78               LDRB     R2,[R7, #+0]
   \   00000032   4A71               STRB     R2,[R1, #+5]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   0006               LSLS     R0,R0,#+24
   \   00000038   000E               LSRS     R0,R0,#+24
   \   0000003A   7F1C               ADDS     R7,R7,#+1
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_2:
   \   0000003C   3978               LDRB     R1,[R7, #+0]
   \   0000003E   0D29               CMP      R1,#+13
   \   00000040   02D0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_4
   \   00000042   0100               MOVS     R1,R0
   \   00000044   1029               CMP      R1,#+16
   \   00000046   F2D3               BCC      ??WizFiResponseCommand_AT_DNSLOOKUP_3
    416                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_4:
   \   00000048   2036               ADDS     R6,R6,#+32
   \   0000004A   0D48               LDR      R0,??WizFiResponseCommand_AT_DNSLOOKUP_0+0x8  ;; g_counter
   \   0000004C   0CC8               LDM      R0!,{R2,R3}
   \   0000004E   0D48               LDR      R0,??WizFiResponseCommand_AT_DNSLOOKUP_0+0xC  ;; 0x2710
   \   00000050   2100               MOVS     R1,R4
   \   00000052   8018               ADDS     R0,R0,R2
   \   00000054   5941               ADCS     R1,R1,R3
   \   00000056   03C6               STM      R6!,{R0,R1}
    417                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000058   2000               MOVS     R0,R4
   \   0000005A   2300               MOVS     R3,R4
   \   0000005C   04E0               B        ??WizFiResponseCommand_AT_DNSLOOKUP_5
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_6:
   \   0000005E   009A               LDR      R2,[SP, #+0]
   \   00000060   5354               STRB     R3,[R2, R1]
   \   00000062   401C               ADDS     R0,R0,#+1
   \   00000064   0006               LSLS     R0,R0,#+24
   \   00000066   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_5:
   \   00000068   0100               MOVS     R1,R0
   \   0000006A   3229               CMP      R1,#+50
   \   0000006C   F7D3               BCC      ??WizFiResponseCommand_AT_DNSLOOKUP_6
    418                  }
    419               
    420             return odp;
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_1:
   \   0000006E   2800               MOVS     R0,R5
   \   00000070   F8BC               POP      {R3-R7}
   \   00000072   02BC               POP      {R1}
   \   00000074   0847               BX       R1               ;; return
   \   00000076   C046               Nop      
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_0:
   \   00000078   49503A00           DC8      "IP:"
   \   0000007C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000080   ........           DC32     g_counter
   \   00000084   10270000           DC32     0x2710
    421          }
    422          
    423          
    424          
    425          
    426          
    427          
    428          
    429          
    430          
    431          //Rozkaz po³¹czenia z hostem----------------------------------------------------
    432          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    433          void WizFiCommand_AT_NCTCP(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    434          {
   \                     WizFiCommand_AT_NCTCP:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    435               if (Net->WiFi.Domena[0]!=0)
   \   00000004   1000               MOVS     R0,R2
   \   00000006   A930               ADDS     R0,R0,#+169
   \   00000008   0078               LDRB     R0,[R0, #+0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   5ED0               BEQ      ??WizFiCommand_AT_NCTCP_0
    436               {
    437                     Net->Status.HostLink=CONNECTING;
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   6D1C               ADDS     R5,R5,#+1
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   2870               STRB     R0,[R5, #+0]
    438                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000016   029F               LDR      R7,[SP, #+8]
   \   00000018   2037               ADDS     R7,R7,#+32
   \   0000001A   2E4E               LDR      R6,??WizFiCommand_AT_NCTCP_1  ;; g_counter
   \   0000001C   03CE               LDM      R6!,{R0,R1}
   \   0000001E   083E               SUBS     R6,R6,#+8
   \   00000020   0200               MOVS     R2,R0
   \   00000022   0B00               MOVS     R3,R1
   \   00000024   2C48               LDR      R0,??WizFiCommand_AT_NCTCP_1+0x4  ;; 0x2710
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   8018               ADDS     R0,R0,R2
   \   0000002A   5941               ADCS     R1,R1,R3
   \   0000002C   03C7               STM      R7!,{R0,R1}
   \   0000002E   083F               SUBS     R7,R7,#+8
    439                     //Net->Status.HttpNextQueryTime=g_counter+100;   //rezerwa czasu pomiêdzy odpytaniami HTTP.
    440                     Net->Status.FreezTime=g_counter+FREEZ_TIME;
   \   00000030   0837               ADDS     R7,R7,#+8
   \   00000032   03CE               LDM      R6!,{R0,R1}
   \   00000034   0022               MOVS     R2,#+0
   \   00000036   3230               ADDS     R0,R0,#+50
   \   00000038   5141               ADCS     R1,R1,R2
   \   0000003A   03C7               STM      R7!,{R0,R1}
    441                     
    442                     Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
   \   0000003C   0820               MOVS     R0,#+8
   \   0000003E   6870               STRB     R0,[R5, #+1]
    443                     
    444                     char BTS=0;
   \   00000040   1000               MOVS     R0,R2
   \   00000042   0100               MOVS     R1,R0
    445                     for (char i=0; i<sizeof(AT_NCTCP); i++)  {Buff_TX[i]=AT_NCTCP[i];   BTS++;}
   \   00000044   07E0               B        ??WizFiCommand_AT_NCTCP_2
   \                     ??WizFiCommand_AT_NCTCP_3:
   \   00000046   1300               MOVS     R3,R2
   \   00000048   244D               LDR      R5,??WizFiCommand_AT_NCTCP_1+0x8  ;; AT_NCTCP
   \   0000004A   ED5C               LDRB     R5,[R5, R3]
   \   0000004C   E554               STRB     R5,[R4, R3]
   \   0000004E   491C               ADDS     R1,R1,#+1
   \   00000050   0906               LSLS     R1,R1,#+24
   \   00000052   090E               LSRS     R1,R1,#+24
   \   00000054   521C               ADDS     R2,R2,#+1
   \                     ??WizFiCommand_AT_NCTCP_2:
   \   00000056   0A2A               CMP      R2,#+10
   \   00000058   F5D3               BCC      ??WizFiCommand_AT_NCTCP_3
    446                     BTS--;
   \   0000005A   491E               SUBS     R1,R1,#+1
   \   0000005C   0906               LSLS     R1,R1,#+24
   \   0000005E   090E               LSRS     R1,R1,#+24
    447                     char PN=0;
   \   00000060   06E0               B        ??WizFiCommand_AT_NCTCP_4
    448                     while ((Net->Status.DomenaIP[PN]>0) && (PN<=15)) {Buff_TX[BTS+PN]=Net->Status.DomenaIP[PN]; PN++;}
   \                     ??WizFiCommand_AT_NCTCP_5:
   \   00000062   0D00               MOVS     R5,R1
   \   00000064   AA18               ADDS     R2,R5,R2
   \   00000066   5B79               LDRB     R3,[R3, #+5]
   \   00000068   A354               STRB     R3,[R4, R2]
   \   0000006A   401C               ADDS     R0,R0,#+1
   \   0000006C   0006               LSLS     R0,R0,#+24
   \   0000006E   000E               LSRS     R0,R0,#+24
   \                     ??WizFiCommand_AT_NCTCP_4:
   \   00000070   0200               MOVS     R2,R0
   \   00000072   029B               LDR      R3,[SP, #+8]
   \   00000074   9B18               ADDS     R3,R3,R2
   \   00000076   5D79               LDRB     R5,[R3, #+5]
   \   00000078   002D               CMP      R5,#+0
   \   0000007A   02D0               BEQ      ??WizFiCommand_AT_NCTCP_6
   \   0000007C   0500               MOVS     R5,R0
   \   0000007E   102D               CMP      R5,#+16
   \   00000080   EFD3               BCC      ??WizFiCommand_AT_NCTCP_5
    449                     Buff_TX[BTS+PN++]=',';
   \                     ??WizFiCommand_AT_NCTCP_6:
   \   00000082   8A18               ADDS     R2,R1,R2
   \   00000084   2C23               MOVS     R3,#+44
   \   00000086   A354               STRB     R3,[R4, R2]
   \   00000088   401C               ADDS     R0,R0,#+1
   \   0000008A   0006               LSLS     R0,R0,#+24
   \   0000008C   000E               LSRS     R0,R0,#+24
    450                     Buff_TX[BTS+PN++]='8';
   \   0000008E   0200               MOVS     R2,R0
   \   00000090   8A18               ADDS     R2,R1,R2
   \   00000092   3823               MOVS     R3,#+56
   \   00000094   A354               STRB     R3,[R4, R2]
   \   00000096   401C               ADDS     R0,R0,#+1
   \   00000098   0006               LSLS     R0,R0,#+24
   \   0000009A   000E               LSRS     R0,R0,#+24
    451                     Buff_TX[BTS+PN++]='0';
   \   0000009C   0200               MOVS     R2,R0
   \   0000009E   8A18               ADDS     R2,R1,R2
   \   000000A0   3023               MOVS     R3,#+48
   \   000000A2   A354               STRB     R3,[R4, R2]
   \   000000A4   401C               ADDS     R0,R0,#+1
   \   000000A6   0006               LSLS     R0,R0,#+24
   \   000000A8   000E               LSRS     R0,R0,#+24
    452                     Buff_TX[BTS+PN++]=0x0d;
   \   000000AA   0200               MOVS     R2,R0
   \   000000AC   8A18               ADDS     R2,R1,R2
   \   000000AE   0D23               MOVS     R3,#+13
   \   000000B0   A354               STRB     R3,[R4, R2]
    453                    
    454                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PN,0, 0);                        //Wysyla ramke  otwieraj¹c¹ po³¹czenie 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000000B2   82B0               SUB      SP,SP,#+8
   \   000000B4   0022               MOVS     R2,#+0
   \   000000B6   0092               STR      R2,[SP, #+0]
   \   000000B8   1300               MOVS     R3,R2
   \   000000BA   401C               ADDS     R0,R0,#+1
   \   000000BC   0006               LSLS     R0,R0,#+24
   \   000000BE   000E               LSRS     R0,R0,#+24
   \   000000C0   0A18               ADDS     R2,R1,R0
   \   000000C2   2100               MOVS     R1,R4
   \   000000C4   0398               LDR      R0,[SP, #+12]
   \   000000C6   ........           BL       AT91F_US_SendFrame
   \   000000CA   02B0               ADD      SP,SP,#+8
    455               }
    456          }
   \                     ??WizFiCommand_AT_NCTCP_0:
   \   000000CC   FEBC               POP      {R1-R7}
   \   000000CE   01BC               POP      {R0}
   \   000000D0   0047               BX       R0               ;; return
   \   000000D2   C046               Nop      
   \                     ??WizFiCommand_AT_NCTCP_1:
   \   000000D4   ........           DC32     g_counter
   \   000000D8   10270000           DC32     0x2710
   \   000000DC   ........           DC32     AT_NCTCP
    457          
    458          
    459          

   \                                 In section Debug.txt, align 4, keep-with-next
    460          char WizFiResponseCommand_AT_NCTCP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    461          {
   \                     WizFiResponseCommand_AT_NCTCP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1C00               MOVS     R4,R3
    462             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   6846               MOV      R0,SP
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   0170               STRB     R1,[R0, #+0]
    463             char *pTxt;
    464             
    465             pTxt=strstr(Buff_RX, "[CONNECT");
   \   0000000E   1D4F               LDR      R7,??WizFiResponseCommand_AT_NCTCP_0  ;; `?<Constant "[CONNECT">`
   \   00000010   3900               MOVS     R1,R7
   \   00000012   3000               MOVS     R0,R6
   \   00000014   ........           BL       strstr
    466             if (pTxt!=NULL)
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   22D0               BEQ      ??WizFiResponseCommand_AT_NCTCP_1
    467                  {
    468                    odp=1;  //ok 
   \   0000001C   6946               MOV      R1,SP
   \   0000001E   0122               MOVS     R2,#+1
   \   00000020   0A70               STRB     R2,[R1, #+0]
    469                    pTxt+=9;
    470                    Net->Status.HostChannel=*pTxt;
   \   00000022   407A               LDRB     R0,[R0, #+9]
   \   00000024   2075               STRB     R0,[R4, #+20]
    471                    Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   00000026   2800               MOVS     R0,R5
   \   00000028   A070               STRB     R0,[R4, #+2]
    472                    
    473                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   2037               ADDS     R7,R7,#+32
   \   0000002E   1648               LDR      R0,??WizFiResponseCommand_AT_NCTCP_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   1548               LDR      R0,??WizFiResponseCommand_AT_NCTCP_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    474                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000040   2800               MOVS     R0,R5
   \   00000042   2A00               MOVS     R2,R5
   \   00000044   03E0               B        ??WizFiResponseCommand_AT_NCTCP_2
   \                     ??WizFiResponseCommand_AT_NCTCP_3:
   \   00000046   7254               STRB     R2,[R6, R1]
   \   00000048   401C               ADDS     R0,R0,#+1
   \   0000004A   0006               LSLS     R0,R0,#+24
   \   0000004C   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCTCP_2:
   \   0000004E   0100               MOVS     R1,R0
   \   00000050   3229               CMP      R1,#+50
   \   00000052   F8D3               BCC      ??WizFiResponseCommand_AT_NCTCP_3
    475                    Net->Status.HostLink=CONNECTED;
   \   00000054   0320               MOVS     R0,#+3
   \   00000056   6070               STRB     R0,[R4, #+1]
    476                    Net->Status.FreezTime=0;
   \   00000058   2834               ADDS     R4,R4,#+40
   \   0000005A   1000               MOVS     R0,R2
   \   0000005C   0100               MOVS     R1,R0
   \   0000005E   03C4               STM      R4!,{R0,R1}
   \   00000060   0BE0               B        ??WizFiResponseCommand_AT_NCTCP_4
    477                  }else if (strstr(Buff_RX, "[ERROR")!=NULL)
   \                     ??WizFiResponseCommand_AT_NCTCP_1:
   \   00000062   0C37               ADDS     R7,R7,#+12
   \   00000064   3900               MOVS     R1,R7
   \   00000066   3000               MOVS     R0,R6
   \   00000068   ........           BL       strstr
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   04D0               BEQ      ??WizFiResponseCommand_AT_NCTCP_4
    478                  {
    479                    odp=0;
    480                    //AT91F_US_SendFrame(USART,(char*)AT_NCLOSEALL,sizeof(AT_NCLOSEALL)-1,0, 0);                        //Wysyla ramke    zamykaj¹c¹ otwarte po³¹czenia 
    481                    Net->Status.HostLink=DISCONNECTED;
   \   00000070   6570               STRB     R5,[R4, #+1]
    482                    Net->Status.FreezTime=0;
   \   00000072   2834               ADDS     R4,R4,#+40
   \   00000074   2800               MOVS     R0,R5
   \   00000076   0100               MOVS     R1,R0
   \   00000078   03C4               STM      R4!,{R0,R1}
    483                  }
    484                    
    485          
    486             return odp;
   \                     ??WizFiResponseCommand_AT_NCTCP_4:
   \   0000007A   6846               MOV      R0,SP
   \   0000007C   0078               LDRB     R0,[R0, #+0]
   \   0000007E   F8BC               POP      {R3-R7}
   \   00000080   02BC               POP      {R1}
   \   00000082   0847               BX       R1               ;; return
   \                     ??WizFiResponseCommand_AT_NCTCP_0:
   \   00000084   ........           DC32     `?<Constant "[CONNECT">`
   \   00000088   ........           DC32     g_counter
   \   0000008C   10270000           DC32     0x2710
    487          }
    488          
    489          
    490          
    491          
    492           
    493          
    494          
    495          
    496          //funkcja konwertuje napis na wartoæ short int --------------------------------
    497          // Txt  -wskanik na ci¹g
    498          // Cyfr -funkcja zwraca iloæ cyfr w ci¹gu
    499          // funkcja zwraca wartoæ short int

   \                                 In section Debug.txt, align 4, keep-with-next
    500          signed short int StrToWord(char *String, char *Cyfr)
    501          {
   \                     StrToWord:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
    502             char *Txt=String;
   \   00000002   0023               MOVS     R3,#+0
    503             char LiczbaTab[5];
    504             char IlCyfr=0;
    505             signed char Min=1;
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   1400               MOVS     R4,R2
   \   00000008   08E0               B        ??StrToWord_0
    506             
    507             while ((((*Txt>='0') && (*Txt<='9')) || (*Txt=='-')) && (IlCyfr<5))
    508             {
    509                if (*Txt=='-')
    510                {
    511                   Min=-1;
    512                }else{
    513                   LiczbaTab[IlCyfr++]=*Txt-48;
   \                     ??StrToWord_1:
   \   0000000A   1F00               MOVS     R7,R3
   \   0000000C   6D46               MOV      R5,SP
   \   0000000E   0678               LDRB     R6,[R0, #+0]
   \   00000010   303E               SUBS     R6,R6,#+48
   \   00000012   EE55               STRB     R6,[R5, R7]
   \   00000014   5B1C               ADDS     R3,R3,#+1
   \   00000016   1B06               LSLS     R3,R3,#+24
   \   00000018   1B0E               LSRS     R3,R3,#+24
    514                }
    515                *Txt++;
   \                     ??StrToWord_2:
   \   0000001A   401C               ADDS     R0,R0,#+1
   \                     ??StrToWord_0:
   \   0000001C   0578               LDRB     R5,[R0, #+0]
   \   0000001E   302D               CMP      R5,#+48
   \   00000020   01D3               BCC      ??StrToWord_3
   \   00000022   3A2D               CMP      R5,#+58
   \   00000024   01D3               BCC      ??StrToWord_4
   \                     ??StrToWord_3:
   \   00000026   2D2D               CMP      R5,#+45
   \   00000028   08D1               BNE      ??StrToWord_5
   \                     ??StrToWord_4:
   \   0000002A   1D00               MOVS     R5,R3
   \   0000002C   052D               CMP      R5,#+5
   \   0000002E   05D2               BCS      ??StrToWord_5
   \   00000030   0578               LDRB     R5,[R0, #+0]
   \   00000032   2D2D               CMP      R5,#+45
   \   00000034   E9D1               BNE      ??StrToWord_1
   \   00000036   0024               MOVS     R4,#+0
   \   00000038   E443               MVNS     R4,R4            ;; #-1
   \   0000003A   EEE7               B        ??StrToWord_2
    516             }
    517             *Cyfr=IlCyfr;
   \                     ??StrToWord_5:
   \   0000003C   1800               MOVS     R0,R3
   \   0000003E   0870               STRB     R0,[R1, #+0]
    518             
    519             int Mnoz=1;
    520             signed short int Wartosc=0; 
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   0CE0               B        ??StrToWord_6
    521             while (IlCyfr>0)
    522             {
    523                 Wartosc+=LiczbaTab[--IlCyfr]*Mnoz;
   \                     ??StrToWord_7:
   \   00000044   5B1E               SUBS     R3,R3,#+1
   \   00000046   1B06               LSLS     R3,R3,#+24
   \   00000048   1B0E               LSRS     R3,R3,#+24
   \   0000004A   1900               MOVS     R1,R3
   \   0000004C   6D46               MOV      R5,SP
   \   0000004E   695C               LDRB     R1,[R5, R1]
   \   00000050   1500               MOVS     R5,R2
   \   00000052   6943               MULS     R1,R5,R1
   \   00000054   4018               ADDS     R0,R0,R1
   \   00000056   0004               LSLS     R0,R0,#+16
   \   00000058   0014               ASRS     R0,R0,#+16
    524                 Mnoz*=10;
   \   0000005A   0A21               MOVS     R1,#+10
   \   0000005C   4A43               MULS     R2,R1,R2
    525             }
   \                     ??StrToWord_6:
   \   0000005E   1900               MOVS     R1,R3
   \   00000060   F0D1               BNE      ??StrToWord_7
    526             Wartosc*=Min;
    527             
    528             return Wartosc;
   \   00000062   6043               MULS     R0,R4,R0
   \   00000064   0004               LSLS     R0,R0,#+16
   \   00000066   0014               ASRS     R0,R0,#+16
   \   00000068   FEBC               POP      {R1-R7}
   \   0000006A   02BC               POP      {R1}
   \   0000006C   0847               BX       R1               ;; return
    529          }//_____________________________________________________________________________
    530          
    531          
    532          
    533          
    534          
    535          
    536          
    537          //Funkcja wys³ania zadania HTTP

   \                                 In section Debug.txt, align 4, keep-with-next
    538          void HTTP_Query(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    539          {
   \                     HTTP_Query:
   \   00000000   F6B5               PUSH     {R1,R2,R4-R7,LR}
   \   00000002   89B0               SUB      SP,SP,#+36
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   04E0               B        ??HTTP_Query_0
    540                          
    541                     //wysy³anie danych ------------------------------------
    542                     
    543                     char BTS=0;
    544                     for (short i=0; i<sizeof(Buff_TX); i++) Buff_TX[i]=0;
   \                     ??HTTP_Query_1:
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   2154               STRB     R1,[R4, R0]
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   0004               LSLS     R0,R0,#+16
   \   00000012   0014               ASRS     R0,R0,#+16
   \                     ??HTTP_Query_0:
   \   00000014   0100               MOVS     R1,R0
   \   00000016   0904               LSLS     R1,R1,#+16
   \   00000018   090C               LSRS     R1,R1,#+16
   \   0000001A   0429               CMP      R1,#+4
   \   0000001C   F5D3               BCC      ??HTTP_Query_1
   \   0000001E   1B20               MOVS     R0,#+27
   \   00000020   2070               STRB     R0,[R4, #+0]
    545                     Buff_TX[BTS++]=0x1B;
    546                     Buff_TX[BTS++]='S';
   \   00000022   5320               MOVS     R0,#+83
   \   00000024   6070               STRB     R0,[R4, #+1]
    547                     Buff_TX[BTS++]=Net->Status.HostChannel;     //numer kana³u [przydzielony przez serwer
   \   00000026   0A98               LDR      R0,[SP, #+40]
   \   00000028   401C               ADDS     R0,R0,#+1
   \   0000002A   0190               STR      R0,[SP, #+4]
   \   0000002C   C07C               LDRB     R0,[R0, #+19]
   \   0000002E   A070               STRB     R0,[R4, #+2]
   \   00000030   0325               MOVS     R5,#+3
    548                     
    549                     
    550                     char Send=0; 
   \   00000032   0026               MOVS     R6,#+0
    551                     char txt[16]; 
    552                     //czyszczenie bufora nadawczego
    553                     char *PozIlByte;
    554                     switch (Net->Status.CurrentOrder)     
   \   00000034   0198               LDR      R0,[SP, #+4]
   \   00000036   4078               LDRB     R0,[R0, #+1]
   \   00000038   0D28               CMP      R0,#+13
   \   0000003A   7CD0               BEQ      ??HTTP_Query_2
   \   0000003C   0E28               CMP      R0,#+14
   \   0000003E   3ED0               BEQ      ??HTTP_Query_3
   \   00000040   0F28               CMP      R0,#+15
   \   00000042   00D0               BEQ      .+4
   \   00000044   81E1               B        ??HTTP_Query_4
    555                     {
    556                        case HTTP_GET_Config:              //proba o podanie konfiguracji zestawu zmiennych
    557                              strcat(Buff_TX,"GET ");
   \   00000046   DC4D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   00000048   2900               MOVS     R1,R5
   \   0000004A   2000               MOVS     R0,R4
   \   0000004C   ........           BL       strcat
    558                              strcat(Buff_TX,Net->WiFi.Path);
   \   00000050   0A99               LDR      R1,[SP, #+40]
   \   00000052   C231               ADDS     R1,R1,#+194
   \   00000054   2000               MOVS     R0,R4
   \   00000056   ........           BL       strcat
    559                              strcat(Buff_TX,"/dc");
   \   0000005A   D8A1               ADR      R1,??HTTP_Query_5+0x4  ;; "/dc"
   \   0000005C   2000               MOVS     R0,R4
   \   0000005E   ........           BL       strcat
    560                              sprintf(txt, "%d",RF_ID_R);
                                     ^
Warning[Pe223]: function "sprintf" declared implicitly
   \   00000062   D74A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x12d687
   \   00000064   D7A1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   00000066   04A8               ADD      R0,SP,#+16
   \   00000068   ........           BL       sprintf
    561                              strcat(Buff_TX,txt);
   \   0000006C   04A9               ADD      R1,SP,#+16
   \   0000006E   2000               MOVS     R0,R4
   \   00000070   ........           BL       strcat
    562                          
    563                              //strcat(Buff_TX,"GET /Test/dc");
    564                              //strcat(Buff_TX,"1234567");              //do zmiany (wpisaæ prawdziwe ID)
    565                              strcat(Buff_TX,".csv HTTP/1.1\r\n");
   \   00000074   2900               MOVS     R1,R5
   \   00000076   0831               ADDS     R1,R1,#+8
   \   00000078   2000               MOVS     R0,R4
   \   0000007A   ........           BL       strcat
    566                              strcat(Buff_TX,"User-Agent: CEURON\r\nHost: ");
   \   0000007E   2900               MOVS     R1,R5
   \   00000080   1831               ADDS     R1,R1,#+24
   \   00000082   2000               MOVS     R0,R4
   \   00000084   ........           BL       strcat
    567                              strcat(Buff_TX,Net->WiFi.Domena);
   \   00000088   0A99               LDR      R1,[SP, #+40]
   \   0000008A   A931               ADDS     R1,R1,#+169
   \   0000008C   2000               MOVS     R0,R4
   \   0000008E   ........           BL       strcat
    568                              strcat(Buff_TX,"\r\n");
   \   00000092   CDA1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000094   2000               MOVS     R0,R4
   \   00000096   ........           BL       strcat
    569                              strcat(Buff_TX,"Connection: keep-alive\r\n");
   \   0000009A   2900               MOVS     R1,R5
   \   0000009C   3431               ADDS     R1,R1,#+52
   \   0000009E   2000               MOVS     R0,R4
   \   000000A0   ........           BL       strcat
    570                              strcat(Buff_TX,"\r\n\r\n");
   \   000000A4   5035               ADDS     R5,R5,#+80
   \   000000A6   2900               MOVS     R1,R5
   \   000000A8   2000               MOVS     R0,R4
   \   000000AA   ........           BL       strcat
    571                              BTS=strlen(Buff_TX);
   \   000000AE   2000               MOVS     R0,R4
   \   000000B0   ........           BL       strlen
   \   000000B4   0500               MOVS     R5,R0
   \   000000B6   2D06               LSLS     R5,R5,#+24
   \   000000B8   2D0E               LSRS     R5,R5,#+24
    572                              Send=1;
   \   000000BA   0126               MOVS     R6,#+1
   \   000000BC   45E1               B        ??HTTP_Query_4
    573          
    574                        break; 
    575                        
    576                        case HTTP_GET:              //proba o podanie konfiguracji zestawu zmiennych
    577                              strcat(Buff_TX,"GET ");
   \                     ??HTTP_Query_3:
   \   000000BE   BE4D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   000000C0   2900               MOVS     R1,R5
   \   000000C2   2000               MOVS     R0,R4
   \   000000C4   ........           BL       strcat
    578                              strcat(Buff_TX,Net->WiFi.Path);
   \   000000C8   0A99               LDR      R1,[SP, #+40]
   \   000000CA   C231               ADDS     R1,R1,#+194
   \   000000CC   2000               MOVS     R0,R4
   \   000000CE   ........           BL       strcat
    579                              strcat(Buff_TX,"/do");
   \   000000D2   BEA1               ADR      R1,??HTTP_Query_5+0x14  ;; "/do"
   \   000000D4   2000               MOVS     R0,R4
   \   000000D6   ........           BL       strcat
    580                              sprintf(txt, "%d",RF_ID_R);
   \   000000DA   B94A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x12d687
   \   000000DC   B9A1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   000000DE   04A8               ADD      R0,SP,#+16
   \   000000E0   ........           BL       sprintf
    581                              strcat(Buff_TX,txt);
   \   000000E4   04A9               ADD      R1,SP,#+16
   \   000000E6   2000               MOVS     R0,R4
   \   000000E8   ........           BL       strcat
    582                              //strcat(Buff_TX,"GET /Test/do");
    583                              //strcat(Buff_TX,"1234567");              //do zmiany (wpisaæ prawdziwe ID)
    584                              strcat(Buff_TX,".csv HTTP/1.1\r\n");
   \   000000EC   2900               MOVS     R1,R5
   \   000000EE   0831               ADDS     R1,R1,#+8
   \   000000F0   2000               MOVS     R0,R4
   \   000000F2   ........           BL       strcat
    585                              strcat(Buff_TX,"User-Agent: CEURON\r\nHost: ");
   \   000000F6   2900               MOVS     R1,R5
   \   000000F8   1831               ADDS     R1,R1,#+24
   \   000000FA   2000               MOVS     R0,R4
   \   000000FC   ........           BL       strcat
    586                              strcat(Buff_TX,Net->WiFi.Domena);
   \   00000100   0A99               LDR      R1,[SP, #+40]
   \   00000102   A931               ADDS     R1,R1,#+169
   \   00000104   2000               MOVS     R0,R4
   \   00000106   ........           BL       strcat
    587                              strcat(Buff_TX,"\r\n");
   \   0000010A   AFA1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000010C   2000               MOVS     R0,R4
   \   0000010E   ........           BL       strcat
    588                              strcat(Buff_TX,"Connection: keep-alive\r\n");
   \   00000112   2900               MOVS     R1,R5
   \   00000114   3431               ADDS     R1,R1,#+52
   \   00000116   2000               MOVS     R0,R4
   \   00000118   ........           BL       strcat
    589                              strcat(Buff_TX,"\r\n\r\n");
   \   0000011C   5035               ADDS     R5,R5,#+80
   \   0000011E   2900               MOVS     R1,R5
   \   00000120   2000               MOVS     R0,R4
   \   00000122   ........           BL       strcat
    590                              BTS=strlen(Buff_TX);
   \   00000126   2000               MOVS     R0,R4
   \   00000128   ........           BL       strlen
   \   0000012C   0500               MOVS     R5,R0
   \   0000012E   2D06               LSLS     R5,R5,#+24
   \   00000130   2D0E               LSRS     R5,R5,#+24
    591                               Send=1;
   \   00000132   0126               MOVS     R6,#+1
   \   00000134   09E1               B        ??HTTP_Query_4
    592                              
    593                              
    594                        break; 
    595                        
    596                        case HTTP_POST:                   //wys³anie zmiennych
    597                         
    598                              strcat(Buff_TX,"POST ");
   \                     ??HTTP_Query_2:
   \   00000136   A04D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   00000138   2900               MOVS     R1,R5
   \   0000013A   5831               ADDS     R1,R1,#+88
   \   0000013C   2000               MOVS     R0,R4
   \   0000013E   ........           BL       strcat
    599                              strcat(Buff_TX,Net->WiFi.Path);
   \   00000142   0A99               LDR      R1,[SP, #+40]
   \   00000144   C231               ADDS     R1,R1,#+194
   \   00000146   2000               MOVS     R0,R4
   \   00000148   ........           BL       strcat
    600                              strcat(Buff_TX,"/putgate.php HTTP/1.1\r\nUser-Agent: CEURON\r\nHost: ");
   \   0000014C   2900               MOVS     R1,R5
   \   0000014E   6031               ADDS     R1,R1,#+96
   \   00000150   2000               MOVS     R0,R4
   \   00000152   ........           BL       strcat
    601                              strcat(Buff_TX,Net->WiFi.Domena);
   \   00000156   0A99               LDR      R1,[SP, #+40]
   \   00000158   A931               ADDS     R1,R1,#+169
   \   0000015A   2000               MOVS     R0,R4
   \   0000015C   ........           BL       strcat
    602                              strcat(Buff_TX,"\r\nContent-Length: ");
   \   00000160   2900               MOVS     R1,R5
   \   00000162   9431               ADDS     R1,R1,#+148
   \   00000164   2000               MOVS     R0,R4
   \   00000166   ........           BL       strcat
    603                              char PozLength=strlen(Buff_TX);
   \   0000016A   2000               MOVS     R0,R4
   \   0000016C   ........           BL       strlen
   \   00000170   6946               MOV      R1,SP
   \   00000172   0872               STRB     R0,[R1, #+8]
    604                      
    605                              strcat(Buff_TX,"   ");
   \   00000174   96A1               ADR      R1,??HTTP_Query_5+0x18  ;; "   "
   \   00000176   2000               MOVS     R0,R4
   \   00000178   ........           BL       strcat
    606                              strcat(Buff_TX,"\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\nNodeID=");
   \   0000017C   2900               MOVS     R1,R5
   \   0000017E   A831               ADDS     R1,R1,#+168
   \   00000180   2000               MOVS     R0,R4
   \   00000182   ........           BL       strcat
    607                              sprintf(txt, "%d",RF_ID_R);
   \   00000186   8E4A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x12d687
   \   00000188   8EA1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   0000018A   04A8               ADD      R0,SP,#+16
   \   0000018C   ........           BL       sprintf
    608                              strcat(Buff_TX,txt);
   \   00000190   04A9               ADD      R1,SP,#+16
   \   00000192   2000               MOVS     R0,R4
   \   00000194   ........           BL       strcat
    609                              strcat(Buff_TX,"&Order=1&Content=;\r\n");
   \   00000198   E835               ADDS     R5,R5,#+232
   \   0000019A   2900               MOVS     R1,R5
   \   0000019C   2000               MOVS     R0,R4
   \   0000019E   ........           BL       strcat
    610                              BTS=strlen(Buff_TX);
   \   000001A2   2000               MOVS     R0,R4
   \   000001A4   ........           BL       strlen
   \   000001A8   0500               MOVS     R5,R0
   \   000001AA   2D06               LSLS     R5,R5,#+24
   \   000001AC   2D0E               LSRS     R5,R5,#+24
    611                              //oko³o 179 byte do tej pory
    612                              char ContentLength=34;
   \   000001AE   2227               MOVS     R7,#+34
    613                              for (char VSN=0; VSN<Net->HTTP.VarSetCount; VSN++)
   \   000001B0   3000               MOVS     R0,R6
   \   000001B2   0090               STR      R0,[SP, #+0]
   \   000001B4   49E0               B        ??HTTP_Query_6
    614                              {
    615                                switch (Net->HTTP.VarSet[VSN].VarType)
                                       ^
Warning[Pe546]: transfer of control bypasses initialization of:
            variable "ilLit" (declared at line 623 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.6 -
                      13.03.2012\Framework\WizFiCommand.c")
    616                                {
    617                                  case 'a':  //jezeli zmienna analogowa
    618                                        
    619                                        Buff_TX[BTS++]='a';
    620                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr/10)+48;
    621                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr%10)+48;
    622                                        Buff_TX[BTS++]=';';
    623                                        char ilLit=sIntToStr(VariablesAnal[Net->HTTP.VarSet[VSN].VarNr],&Buff_TX[BTS]);
    624                                        BTS+=ilLit;
    625                                        for (char i=ilLit; i<4; i++) {Buff_TX[BTS++]=' ';}
    626                                        Buff_TX[BTS++]=0xd;
    627                                        Buff_TX[BTS++]=0xa;
    628                                        ContentLength+=10;
    629                                          
    630                                  break;
    631                                  
    632                                  case 'b':  //jezeli zmienna analogowa
    633                                        Buff_TX[BTS++]='b';
   \                     ??HTTP_Query_7:
   \   000001B6   2800               MOVS     R0,R5
   \   000001B8   6221               MOVS     R1,#+98
   \   000001BA   2154               STRB     R1,[R4, R0]
   \   000001BC   6D1C               ADDS     R5,R5,#+1
   \   000001BE   2D06               LSLS     R5,R5,#+24
   \   000001C0   2D0E               LSRS     R5,R5,#+24
    634                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr/10)+48;
   \   000001C2   7078               LDRB     R0,[R6, #+1]
   \   000001C4   0A21               MOVS     R1,#+10
   \   000001C6   ........           BL       __aeabi_idivmod
   \   000001CA   3030               ADDS     R0,R0,#+48
   \   000001CC   2900               MOVS     R1,R5
   \   000001CE   6054               STRB     R0,[R4, R1]
   \   000001D0   6D1C               ADDS     R5,R5,#+1
   \   000001D2   2D06               LSLS     R5,R5,#+24
   \   000001D4   2D0E               LSRS     R5,R5,#+24
    635                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr%10)+48;
   \   000001D6   2800               MOVS     R0,R5
   \   000001D8   01B5               PUSH     {R0,LR}
   \   000001DA   7078               LDRB     R0,[R6, #+1]
   \   000001DC   0A21               MOVS     R1,#+10
   \   000001DE   ........           BL       __aeabi_idivmod
   \   000001E2   3031               ADDS     R1,R1,#+48
   \   000001E4   2800               MOVS     R0,R5
   \   000001E6   02B0               ADD      SP,SP,#+8
   \   000001E8   2154               STRB     R1,[R4, R0]
   \   000001EA   6D1C               ADDS     R5,R5,#+1
   \   000001EC   2D06               LSLS     R5,R5,#+24
   \   000001EE   2D0E               LSRS     R5,R5,#+24
    636                                        Buff_TX[BTS++]=';';
   \   000001F0   2800               MOVS     R0,R5
   \   000001F2   3B21               MOVS     R1,#+59
   \   000001F4   2154               STRB     R1,[R4, R0]
   \   000001F6   6D1C               ADDS     R5,R5,#+1
   \   000001F8   2D06               LSLS     R5,R5,#+24
   \   000001FA   2D0E               LSRS     R5,R5,#+24
    637                                        Net->HTTP.VarSet[VSN].Value=((Variables[Net->HTTP.VarSet[VSN].VarNr/8]>>(Net->HTTP.VarSet[VSN].VarNr%8))&0x1);
   \   000001FC   7078               LDRB     R0,[R6, #+1]
   \   000001FE   C010               ASRS     R0,R0,#+3
   \   00000200   7449               LDR      R1,??HTTP_Query_5+0x1C  ;; Variables
   \   00000202   095C               LDRB     R1,[R1, R0]
   \   00000204   7078               LDRB     R0,[R6, #+1]
   \   00000206   0200               MOVS     R2,R0
   \   00000208   D208               LSRS     R2,R2,#+3
   \   0000020A   D200               LSLS     R2,R2,#+3
   \   0000020C   801A               SUBS     R0,R0,R2
   \   0000020E   0141               ASRS     R1,R1,R0
   \   00000210   0120               MOVS     R0,#+1
   \   00000212   0840               ANDS     R0,R0,R1
   \   00000214   7080               STRH     R0,[R6, #+2]
    638                                        Buff_TX[BTS++]=Net->HTTP.VarSet[VSN].Value+48;
   \   00000216   2800               MOVS     R0,R5
   \   00000218   0221               MOVS     R1,#+2
   \   0000021A   715E               LDRSH    R1,[R6, R1]
   \   0000021C   3031               ADDS     R1,R1,#+48
   \   0000021E   2154               STRB     R1,[R4, R0]
   \   00000220   6D1C               ADDS     R5,R5,#+1
   \   00000222   2D06               LSLS     R5,R5,#+24
   \   00000224   2D0E               LSRS     R5,R5,#+24
    639                                        Buff_TX[BTS++]=0xd;
   \   00000226   2800               MOVS     R0,R5
   \   00000228   0D21               MOVS     R1,#+13
   \   0000022A   2154               STRB     R1,[R4, R0]
   \   0000022C   6D1C               ADDS     R5,R5,#+1
   \   0000022E   2D06               LSLS     R5,R5,#+24
   \   00000230   2D0E               LSRS     R5,R5,#+24
    640                                        Buff_TX[BTS++]=0xa;
   \   00000232   2800               MOVS     R0,R5
   \   00000234   0A21               MOVS     R1,#+10
   \   00000236   2154               STRB     R1,[R4, R0]
   \   00000238   6D1C               ADDS     R5,R5,#+1
   \   0000023A   2D06               LSLS     R5,R5,#+24
   \   0000023C   2D0E               LSRS     R5,R5,#+24
    641                                        ContentLength+=7;
   \   0000023E   FF1D               ADDS     R7,R7,#+7
   \                     ??HTTP_Query_8:
   \   00000240   0098               LDR      R0,[SP, #+0]
   \   00000242   401C               ADDS     R0,R0,#+1
   \   00000244   0006               LSLS     R0,R0,#+24
   \   00000246   000E               LSRS     R0,R0,#+24
   \   00000248   0090               STR      R0,[SP, #+0]
   \                     ??HTTP_Query_6:
   \   0000024A   0098               LDR      R0,[SP, #+0]
   \   0000024C   0A99               LDR      R1,[SP, #+40]
   \   0000024E   D331               ADDS     R1,R1,#+211
   \   00000250   0978               LDRB     R1,[R1, #+0]
   \   00000252   0006               LSLS     R0,R0,#+24
   \   00000254   000E               LSRS     R0,R0,#+24
   \   00000256   8842               CMP      R0,R1
   \   00000258   55D2               BCS      ??HTTP_Query_9
   \   0000025A   0098               LDR      R0,[SP, #+0]
   \   0000025C   0006               LSLS     R0,R0,#+24
   \   0000025E   000E               LSRS     R0,R0,#+24
   \   00000260   8000               LSLS     R0,R0,#+2
   \   00000262   0A99               LDR      R1,[SP, #+40]
   \   00000264   0E18               ADDS     R6,R1,R0
   \   00000266   D636               ADDS     R6,R6,#+214
   \   00000268   3078               LDRB     R0,[R6, #+0]
   \   0000026A   6128               CMP      R0,#+97
   \   0000026C   02D0               BEQ      ??HTTP_Query_10
   \   0000026E   6228               CMP      R0,#+98
   \   00000270   A1D0               BEQ      ??HTTP_Query_7
   \   00000272   E5E7               B        ??HTTP_Query_8
   \                     ??HTTP_Query_10:
   \   00000274   2800               MOVS     R0,R5
   \   00000276   6121               MOVS     R1,#+97
   \   00000278   2154               STRB     R1,[R4, R0]
   \   0000027A   6D1C               ADDS     R5,R5,#+1
   \   0000027C   2D06               LSLS     R5,R5,#+24
   \   0000027E   2D0E               LSRS     R5,R5,#+24
   \   00000280   7078               LDRB     R0,[R6, #+1]
   \   00000282   0A21               MOVS     R1,#+10
   \   00000284   ........           BL       __aeabi_idivmod
   \   00000288   3030               ADDS     R0,R0,#+48
   \   0000028A   2900               MOVS     R1,R5
   \   0000028C   6054               STRB     R0,[R4, R1]
   \   0000028E   6D1C               ADDS     R5,R5,#+1
   \   00000290   2D06               LSLS     R5,R5,#+24
   \   00000292   2D0E               LSRS     R5,R5,#+24
   \   00000294   2800               MOVS     R0,R5
   \   00000296   01B5               PUSH     {R0,LR}
   \   00000298   7078               LDRB     R0,[R6, #+1]
   \   0000029A   0A21               MOVS     R1,#+10
   \   0000029C   ........           BL       __aeabi_idivmod
   \   000002A0   3031               ADDS     R1,R1,#+48
   \   000002A2   2800               MOVS     R0,R5
   \   000002A4   02B0               ADD      SP,SP,#+8
   \   000002A6   2154               STRB     R1,[R4, R0]
   \   000002A8   6D1C               ADDS     R5,R5,#+1
   \   000002AA   2D06               LSLS     R5,R5,#+24
   \   000002AC   2D0E               LSRS     R5,R5,#+24
   \   000002AE   2800               MOVS     R0,R5
   \   000002B0   3B21               MOVS     R1,#+59
   \   000002B2   2154               STRB     R1,[R4, R0]
   \   000002B4   6D1C               ADDS     R5,R5,#+1
   \   000002B6   2D06               LSLS     R5,R5,#+24
   \   000002B8   2D0E               LSRS     R5,R5,#+24
   \   000002BA   2800               MOVS     R0,R5
   \   000002BC   2118               ADDS     R1,R4,R0
   \   000002BE   7078               LDRB     R0,[R6, #+1]
   \   000002C0   4000               LSLS     R0,R0,#+1
   \   000002C2   454A               LDR      R2,??HTTP_Query_5+0x20  ;; VariablesAnal
   \   000002C4   105E               LDRSH    R0,[R2, R0]
   \   000002C6   ........           BL       sIntToStr
   \   000002CA   2D18               ADDS     R5,R5,R0
   \   000002CC   2D06               LSLS     R5,R5,#+24
   \   000002CE   2D0E               LSRS     R5,R5,#+24
   \   000002D0   08E0               B        ??HTTP_Query_11
   \                     ??HTTP_Query_12:
   \   000002D2   2900               MOVS     R1,R5
   \   000002D4   2022               MOVS     R2,#+32
   \   000002D6   6254               STRB     R2,[R4, R1]
   \   000002D8   6D1C               ADDS     R5,R5,#+1
   \   000002DA   2D06               LSLS     R5,R5,#+24
   \   000002DC   2D0E               LSRS     R5,R5,#+24
   \   000002DE   401C               ADDS     R0,R0,#+1
   \   000002E0   0006               LSLS     R0,R0,#+24
   \   000002E2   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_Query_11:
   \   000002E4   0100               MOVS     R1,R0
   \   000002E6   0429               CMP      R1,#+4
   \   000002E8   F3D3               BCC      ??HTTP_Query_12
   \   000002EA   2800               MOVS     R0,R5
   \   000002EC   0D21               MOVS     R1,#+13
   \   000002EE   2154               STRB     R1,[R4, R0]
   \   000002F0   6D1C               ADDS     R5,R5,#+1
   \   000002F2   2D06               LSLS     R5,R5,#+24
   \   000002F4   2D0E               LSRS     R5,R5,#+24
   \   000002F6   2800               MOVS     R0,R5
   \   000002F8   0A21               MOVS     R1,#+10
   \   000002FA   2154               STRB     R1,[R4, R0]
   \   000002FC   6D1C               ADDS     R5,R5,#+1
   \   000002FE   2D06               LSLS     R5,R5,#+24
   \   00000300   2D0E               LSRS     R5,R5,#+24
   \   00000302   0A37               ADDS     R7,R7,#+10
   \   00000304   9CE7               B        ??HTTP_Query_8
    642                                          
    643                                        //SendBuff[BTS++]=
    644                                          
    645                                  break;
    646          
    647                                  
    648                                }
    649                                
    650                                
    651                              }
    652                              
    653                               Send=1;
   \                     ??HTTP_Query_9:
   \   00000306   0126               MOVS     R6,#+1
    654                              char LengthTxt[4];
    655                              char IlLiczb=CharToStr(ContentLength,LengthTxt,3);    //(char Value, char *Vstring, char ill) 
   \   00000308   0322               MOVS     R2,#+3
   \   0000030A   03A9               ADD      R1,SP,#+12
   \   0000030C   3800               MOVS     R0,R7
   \   0000030E   0006               LSLS     R0,R0,#+24
   \   00000310   000E               LSRS     R0,R0,#+24
   \   00000312   ........           BL       CharToStr
    656                              
    657                              for (char i=0; i<IlLiczb; i++)
   \   00000316   0021               MOVS     R1,#+0
   \   00000318   03AF               ADD      R7,SP,#+12
   \   0000031A   07E0               B        ??HTTP_Query_13
    658                              {
    659                                Buff_TX[PozLength+i]=LengthTxt[i];
   \                     ??HTTP_Query_14:
   \   0000031C   6B46               MOV      R3,SP
   \   0000031E   1B7A               LDRB     R3,[R3, #+8]
   \   00000320   9B18               ADDS     R3,R3,R2
   \   00000322   BA5C               LDRB     R2,[R7, R2]
   \   00000324   E254               STRB     R2,[R4, R3]
    660                              }
   \   00000326   491C               ADDS     R1,R1,#+1
   \   00000328   0906               LSLS     R1,R1,#+24
   \   0000032A   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_Query_13:
   \   0000032C   0A00               MOVS     R2,R1
   \   0000032E   8242               CMP      R2,R0
   \   00000330   F4D3               BCC      ??HTTP_Query_14
    661                              
    662                    
    663                            Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000332   0A9F               LDR      R7,[SP, #+40]
   \   00000334   1837               ADDS     R7,R7,#+24
   \   00000336   0837               ADDS     R7,R7,#+8
   \   00000338   2848               LDR      R0,??HTTP_Query_5+0x24  ;; g_counter
   \   0000033A   03C8               LDM      R0!,{R0,R1}
   \   0000033C   0200               MOVS     R2,R0
   \   0000033E   0B00               MOVS     R3,R1
   \   00000340   2748               LDR      R0,??HTTP_Query_5+0x28  ;; 0x2710
   \   00000342   0021               MOVS     R1,#+0
   \   00000344   8018               ADDS     R0,R0,R2
   \   00000346   5941               ADCS     R1,R1,R3
   \   00000348   03C7               STM      R7!,{R0,R1}
    664                      break;              
    665                    }
    666                     
    667                      if (Send)
   \                     ??HTTP_Query_4:
   \   0000034A   002E               CMP      R6,#+0
   \   0000034C   2FD0               BEQ      ??HTTP_Query_15
    668                      {
    669                        Buff_TX[BTS++]=0x1B;
   \   0000034E   2800               MOVS     R0,R5
   \   00000350   1B21               MOVS     R1,#+27
   \   00000352   2154               STRB     R1,[R4, R0]
   \   00000354   6D1C               ADDS     R5,R5,#+1
   \   00000356   2D06               LSLS     R5,R5,#+24
   \   00000358   2D0E               LSRS     R5,R5,#+24
    670                        Buff_TX[BTS++]='E';
   \   0000035A   2800               MOVS     R0,R5
   \   0000035C   4521               MOVS     R1,#+69
   \   0000035E   2154               STRB     R1,[R4, R0]
   \   00000360   6D1C               ADDS     R5,R5,#+1
   \   00000362   2D06               LSLS     R5,R5,#+24
   \   00000364   2D0E               LSRS     R5,R5,#+24
    671                        
    672                        if (Net->Status.HostLink==CONNECTED)
   \   00000366   0198               LDR      R0,[SP, #+4]
   \   00000368   0078               LDRB     R0,[R0, #+0]
   \   0000036A   0328               CMP      R0,#+3
   \   0000036C   1FD1               BNE      ??HTTP_Query_15
    673                        {
    674                            Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000036E   0A9F               LDR      R7,[SP, #+40]
   \   00000370   1837               ADDS     R7,R7,#+24
   \   00000372   1A4E               LDR      R6,??HTTP_Query_5+0x24  ;; g_counter
   \   00000374   3A00               MOVS     R2,R7
   \   00000376   0832               ADDS     R2,R2,#+8
   \   00000378   9446               MOV      R12,R2
   \   0000037A   03CE               LDM      R6!,{R0,R1}
   \   0000037C   083E               SUBS     R6,R6,#+8
   \   0000037E   0200               MOVS     R2,R0
   \   00000380   0B00               MOVS     R3,R1
   \   00000382   1748               LDR      R0,??HTTP_Query_5+0x28  ;; 0x2710
   \   00000384   0021               MOVS     R1,#+0
   \   00000386   8018               ADDS     R0,R0,R2
   \   00000388   5941               ADCS     R1,R1,R3
   \   0000038A   6246               MOV      R2,R12
   \   0000038C   03C2               STM      R2!,{R0,R1}
    675                            Net->Status.HttpNextQueryTime=g_counter+HTTP_QUERY_MAX_TIME;   //restart czasu pomiêdzy odpytaniami HTTP. Ustawienie Maksymalnego czasu na odpowied
   \   0000038E   0CCE               LDM      R6!,{R2,R3}
   \   00000390   1448               LDR      R0,??HTTP_Query_5+0x2C  ;; 0x1388
   \   00000392   0021               MOVS     R1,#+0
   \   00000394   8018               ADDS     R0,R0,R2
   \   00000396   5941               ADCS     R1,R1,R3
   \   00000398   03C7               STM      R7!,{R0,R1}
    676                            
    677                            AT91F_US_SendFrame(USART,Buff_TX,BTS,0, 0);                        //Wysyla ramke 
                                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

             char *PozIlByte;
                   ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\WizFiCommand.c",553  Warning[Pe177]: 
          variable "PozIlByte" was declared but never referenced
   \   0000039A   82B0               SUB      SP,SP,#+8
   \   0000039C   0020               MOVS     R0,#+0
   \   0000039E   0090               STR      R0,[SP, #+0]
   \   000003A0   0300               MOVS     R3,R0
   \   000003A2   2A00               MOVS     R2,R5
   \   000003A4   2100               MOVS     R1,R4
   \   000003A6   0B98               LDR      R0,[SP, #+44]
   \   000003A8   ........           BL       AT91F_US_SendFrame
   \   000003AC   02B0               ADD      SP,SP,#+8
    678                        }
    679                      }
    680            
    681          }
   \                     ??HTTP_Query_15:
   \   000003AE   0BB0               ADD      SP,SP,#+44
   \   000003B0   F0BC               POP      {R4-R7}
   \   000003B2   01BC               POP      {R0}
   \   000003B4   0047               BX       R0               ;; return
   \   000003B6   C046               Nop      
   \                     ??HTTP_Query_5:
   \   000003B8   ........           DC32     `?<Constant "GET ">`
   \   000003BC   2F646300           DC8      "/dc"
   \   000003C0   87D61200           DC32     0x12d687
   \   000003C4   25640000           DC8      0x25, 0x64, 0x00, 0x00
   \   000003C8   0D0A0000           DC8      0x0D, 0x0A, 0x00, 0x00
   \   000003CC   2F646F00           DC8      "/do"
   \   000003D0   20202000           DC8      "   "
   \   000003D4   ........           DC32     Variables
   \   000003D8   ........           DC32     VariablesAnal
   \   000003DC   ........           DC32     g_counter
   \   000003E0   10270000           DC32     0x2710
   \   000003E4   88130000           DC32     0x1388
    682          
    683          
    684          
    685          
    686          
    687          
    688          
    689          

   \                                 In section Debug.txt, align 4, keep-with-next
    690          char HTTP_QueryResponse(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    691          {
   \                     HTTP_QueryResponse:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   84B0               SUB      SP,SP,#+16
   \   00000004   0400               MOVS     R4,R0
    692          
    693                   char *pTxt;
    694                  /* if (strstr(Buff_RX, "send() failed:")!=NULL)
    695                   {
    696                      for (char i=0; i<20; i++) Buff_RX[i]=0;
    697                      Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
    698                      Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
    699                      Net->Status.HttpNextQueryTime=g_counter+1;   //restart czasu pomiêdzy odpytaniami HTTP.
    700                     
    701                   }
    702                   else 
    703                   */
    704                   
    705                   ButtonBipCounter=g_counter+1;
   \   00000006   9C4D               LDR      R5,??HTTP_QueryResponse_0  ;; ButtonBipCounter
   \   00000008   9C48               LDR      R0,??HTTP_QueryResponse_0+0x4  ;; g_counter
   \   0000000A   03C8               LDM      R0!,{R0,R1}
   \   0000000C   0022               MOVS     R2,#+0
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   5141               ADCS     R1,R1,R2
   \   00000012   03C5               STM      R5!,{R0,R1}
   \   00000014   083D               SUBS     R5,R5,#+8
    706                   AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
                                                     ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000016   9A4A               LDR      R2,??HTTP_QueryResponse_0+0x8  ;; 0xfffff430
   \   00000018   8023               MOVS     R3,#+128
   \   0000001A   1B06               LSLS     R3,R3,#+24       ;; #-2147483648
   \   0000001C   1360               STR      R3,[R2, #+0]
    707                   
    708                   if ((Buff_RX[3]=='H') && (Buff_RX[4]=='T')&& (Buff_RX[5]=='T') && (Buff_RX[6]=='P')  ) //(strstr(Buff_RX, "HTTP")!=NULL)
   \   0000001E   E078               LDRB     R0,[R4, #+3]
   \   00000020   4828               CMP      R0,#+72
   \   00000022   00D0               BEQ      .+4
   \   00000024   9BE0               B        ??HTTP_QueryResponse_1
   \   00000026   2079               LDRB     R0,[R4, #+4]
   \   00000028   5428               CMP      R0,#+84
   \   0000002A   00D0               BEQ      .+4
   \   0000002C   97E0               B        ??HTTP_QueryResponse_1
   \   0000002E   6079               LDRB     R0,[R4, #+5]
   \   00000030   5428               CMP      R0,#+84
   \   00000032   00D0               BEQ      .+4
   \   00000034   93E0               B        ??HTTP_QueryResponse_1
   \   00000036   A079               LDRB     R0,[R4, #+6]
   \   00000038   5028               CMP      R0,#+80
   \   0000003A   00D0               BEQ      .+4
   \   0000003C   8FE0               B        ??HTTP_QueryResponse_1
    709                   {
    710                         ButtonBipCounter=g_counter+10;
   \   0000003E   8F48               LDR      R0,??HTTP_QueryResponse_0+0x4  ;; g_counter
   \   00000040   03C8               LDM      R0!,{R0,R1}
   \   00000042   0026               MOVS     R6,#+0
   \   00000044   0A30               ADDS     R0,R0,#+10
   \   00000046   7141               ADCS     R1,R1,R6
   \   00000048   03C5               STM      R5!,{R0,R1}
    711                         AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
                                                           ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000004A   1360               STR      R3,[R2, #+0]
    712                     
    713                         Net->Status.HttpNextQueryTime=g_counter+HTTP_QUERY_PERIOD; 
   \   0000004C   0498               LDR      R0,[SP, #+16]
   \   0000004E   1830               ADDS     R0,R0,#+24
   \   00000050   0190               STR      R0,[SP, #+4]
   \   00000052   0500               MOVS     R5,R0
   \   00000054   8948               LDR      R0,??HTTP_QueryResponse_0+0x4  ;; g_counter
   \   00000056   0CC8               LDM      R0!,{R2,R3}
   \   00000058   9620               MOVS     R0,#+150
   \   0000005A   4000               LSLS     R0,R0,#+1        ;; #+300
   \   0000005C   3100               MOVS     R1,R6
   \   0000005E   8018               ADDS     R0,R0,R2
   \   00000060   5941               ADCS     R1,R1,R3
   \   00000062   03C5               STM      R5!,{R0,R1}
   \   00000064   8749               LDR      R1,??HTTP_QueryResponse_0+0xC  ;; `?<Constant "GET ">` + 80
   \   00000066   2000               MOVS     R0,R4
    714                         pTxt=strstr(Buff_RX, "\r\n\r\n");
   \   00000068   ........           BL       strstr
   \   0000006C   0600               MOVS     R6,R0
    715                         if ((pTxt!=NULL) && (strstr(Buff_RX, "OK")!=NULL))
   \   0000006E   76D0               BEQ      ??HTTP_QueryResponse_1
   \   00000070   85A1               ADR      R1,??HTTP_QueryResponse_0+0x10  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000072   2000               MOVS     R0,R4
   \   00000074   ........           BL       strstr
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   70D0               BEQ      ??HTTP_QueryResponse_1
    716                         {  
    717                            
    718                           pTxt+=4;
   \   0000007C   361D               ADDS     R6,R6,#+4
    719                           switch (Net->Status.CurrentOrder)     
   \   0000007E   0498               LDR      R0,[SP, #+16]
   \   00000080   401C               ADDS     R0,R0,#+1
   \   00000082   0290               STR      R0,[SP, #+8]
   \   00000084   4078               LDRB     R0,[R0, #+1]
   \   00000086   0D28               CMP      R0,#+13
   \   00000088   00D1               BNE      .+4
   \   0000008A   E9E0               B        ??HTTP_QueryResponse_2
   \   0000008C   0E28               CMP      R0,#+14
   \   0000008E   6AD0               BEQ      ??HTTP_QueryResponse_3
   \   00000090   0F28               CMP      R0,#+15
   \   00000092   53D1               BNE      ??HTTP_QueryResponse_4
    720                                 {
    721                                    case HTTP_GET_Config:
    722                                         pTxt+=3;
   \   00000094   F61C               ADDS     R6,R6,#+3
    723                                         Net->HTTP.VarSetCount=0;    
   \   00000096   0499               LDR      R1,[SP, #+16]
   \   00000098   D331               ADDS     R1,R1,#+211
   \   0000009A   0020               MOVS     R0,#+0
   \   0000009C   0200               MOVS     R2,R0
   \   0000009E   0A70               STRB     R2,[R1, #+0]
    724                                         for (char i=0; i<VAR_SET_AMOUNT; i++) {Net->HTTP.VarSet[i].VarType=NO_Var;}  //wyczyszczenie tablicy 
   \   000000A0   08E0               B        ??HTTP_QueryResponse_5
   \                     ??HTTP_QueryResponse_6:
   \   000000A2   9B00               LSLS     R3,R3,#+2
   \   000000A4   049D               LDR      R5,[SP, #+16]
   \   000000A6   EB18               ADDS     R3,R5,R3
   \   000000A8   D633               ADDS     R3,R3,#+214
   \   000000AA   0500               MOVS     R5,R0
   \   000000AC   1D70               STRB     R5,[R3, #+0]
   \   000000AE   521C               ADDS     R2,R2,#+1
   \   000000B0   1206               LSLS     R2,R2,#+24
   \   000000B2   120E               LSRS     R2,R2,#+24
   \                     ??HTTP_QueryResponse_5:
   \   000000B4   1300               MOVS     R3,R2
   \   000000B6   142B               CMP      R3,#+20
   \   000000B8   F3D3               BCC      ??HTTP_QueryResponse_6
    725                                         //przepisanie konfiguracji do tabeli VarSet  
    726                                          while (((pTxt[0]=='a') || (pTxt[0]=='b') || (pTxt[0]=='c') || (pTxt[0]=='d')) && (Net->HTTP.VarSetCount<VAR_SET_AMOUNT))
   \                     ??HTTP_QueryResponse_7:
   \   000000BA   3278               LDRB     R2,[R6, #+0]
   \   000000BC   612A               CMP      R2,#+97
   \   000000BE   05D0               BEQ      ??HTTP_QueryResponse_8
   \   000000C0   622A               CMP      R2,#+98
   \   000000C2   03D0               BEQ      ??HTTP_QueryResponse_8
   \   000000C4   632A               CMP      R2,#+99
   \   000000C6   01D0               BEQ      ??HTTP_QueryResponse_8
   \   000000C8   642A               CMP      R2,#+100
   \   000000CA   19D1               BNE      ??HTTP_QueryResponse_9
   \                     ??HTTP_QueryResponse_8:
   \   000000CC   0A78               LDRB     R2,[R1, #+0]
   \   000000CE   142A               CMP      R2,#+20
   \   000000D0   16D2               BCS      ??HTTP_QueryResponse_9
    727                                          {
    728                                             Net->HTTP.VarSet[Net->HTTP.VarSetCount].VarType=pTxt[0];
                                                                                                   ^
Warning[Pe188]: enumerated type mixed with another type

                   switch (Net->Status.CurrentOrder)     
                   ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\WizFiCommand.c",719  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "ZmType" (declared at line 745 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.6 -
                      13.03.2012\Framework\WizFiCommand.c")
            variable "ZmNr" (declared at line 746 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.6 -
                      13.03.2012\Framework\WizFiCommand.c")
            variable "NNW" (declared at line 748 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.6 -
                      13.03.2012\Framework\WizFiCommand.c")
            variable "NW" (declared at line 749 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.6 -
                      13.03.2012\Framework\WizFiCommand.c")
   \   000000D2   9200               LSLS     R2,R2,#+2
   \   000000D4   049B               LDR      R3,[SP, #+16]
   \   000000D6   9A18               ADDS     R2,R3,R2
   \   000000D8   D632               ADDS     R2,R2,#+214
   \   000000DA   3378               LDRB     R3,[R6, #+0]
   \   000000DC   1370               STRB     R3,[R2, #+0]
    729                                             Net->HTTP.VarSet[Net->HTTP.VarSetCount].VarNr=(pTxt[1]-48)*10+(pTxt[2]-48);
   \   000000DE   0A78               LDRB     R2,[R1, #+0]
   \   000000E0   9200               LSLS     R2,R2,#+2
   \   000000E2   049B               LDR      R3,[SP, #+16]
   \   000000E4   9A18               ADDS     R2,R3,R2
   \   000000E6   D732               ADDS     R2,R2,#+215
   \   000000E8   7378               LDRB     R3,[R6, #+1]
   \   000000EA   0A25               MOVS     R5,#+10
   \   000000EC   6B43               MULS     R3,R5,R3
   \   000000EE   B578               LDRB     R5,[R6, #+2]
   \   000000F0   5B19               ADDS     R3,R3,R5
   \   000000F2   103B               SUBS     R3,R3,#+16
   \   000000F4   1370               STRB     R3,[R2, #+0]
    730                                             Net->HTTP.VarSetCount++;
   \   000000F6   0A78               LDRB     R2,[R1, #+0]
   \   000000F8   521C               ADDS     R2,R2,#+1
   \   000000FA   0A70               STRB     R2,[R1, #+0]
    731                                             pTxt+=7;
   \   000000FC   F61D               ADDS     R6,R6,#+7
   \   000000FE   DCE7               B        ??HTTP_QueryResponse_7
    732                                          }
    733                                         //Net->HTTP.OrderType=HTTP_NULL;
    734                                         //PostHTTP_Force(SendBuff, USART);
    735                                       
    736                                         for (char i=0; i<20; i++) Buff_RX[i]=0;
   \                     ??HTTP_QueryResponse_9:
   \   00000100   0100               MOVS     R1,R0
   \   00000102   0300               MOVS     R3,R0
   \   00000104   03E0               B        ??HTTP_QueryResponse_10
   \                     ??HTTP_QueryResponse_11:
   \   00000106   A354               STRB     R3,[R4, R2]
   \   00000108   491C               ADDS     R1,R1,#+1
   \   0000010A   0906               LSLS     R1,R1,#+24
   \   0000010C   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_QueryResponse_10:
   \   0000010E   0A00               MOVS     R2,R1
   \   00000110   142A               CMP      R2,#+20
   \   00000112   F8D3               BCC      ??HTTP_QueryResponse_11
    737                                         Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \                     ??HTTP_QueryResponse_12:
   \   00000114   0298               LDR      R0,[SP, #+8]
   \   00000116   1900               MOVS     R1,R3
   \   00000118   4170               STRB     R1,[R0, #+1]
    738                                         Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000011A   019D               LDR      R5,[SP, #+4]
   \   0000011C   0835               ADDS     R5,R5,#+8
   \   0000011E   5748               LDR      R0,??HTTP_QueryResponse_0+0x4  ;; g_counter
   \   00000120   0CC8               LDM      R0!,{R2,R3}
   \   00000122   5A48               LDR      R0,??HTTP_QueryResponse_0+0x14  ;; 0x2710
   \   00000124   8018               ADDS     R0,R0,R2
   \   00000126   5941               ADCS     R1,R1,R3
   \   00000128   03C5               STM      R5!,{R0,R1}
    739                                         Net->Status.HttpNextQueryTime=g_counter+HTTP_QUERY_PERIOD;   //restart czasu pomiêdzy odpytaniami HTTP.
   \   0000012A   019D               LDR      R5,[SP, #+4]
   \   0000012C   5348               LDR      R0,??HTTP_QueryResponse_0+0x4  ;; g_counter
   \   0000012E   0CC8               LDM      R0!,{R2,R3}
   \   00000130   9620               MOVS     R0,#+150
   \   00000132   4000               LSLS     R0,R0,#+1        ;; #+300
   \   00000134   0021               MOVS     R1,#+0
   \   00000136   8018               ADDS     R0,R0,R2
   \   00000138   5941               ADCS     R1,R1,R3
   \   0000013A   03C5               STM      R5!,{R0,R1}
    740                                    break; 
    741                                    
    742                                    case HTTP_GET: 
    743                               
    744                                          pTxt=pTxt;
    745                                          char ZmType=0;
    746                                          char ZmNr=0;
    747                                          char IlCyfr;
    748                                          short int NNW=StrToWord(pTxt, &IlCyfr);       //numer najnowszego wpisu
    749                                          short int NW=NNW;
    750                                          pTxt+=IlCyfr+1;
    751                                          ZmType=*pTxt; pTxt++;
    752                                          ZmNr=(pTxt[0]-48)*10+pTxt[1]-48;
    753                                          pTxt+=3;
    754                                          while (((ZmType=='a') || (ZmType=='b') || (ZmType=='c') || (ZmType=='d')) && (NW>Net->HTTP.LastForseOrderNr) && (Net->HTTP.LastForseOrderNr!=0))
    755                                          {
    756                                            switch (ZmType) 
    757                                            {
    758                                              case 'a':
    759                                                  VariablesAnal[ZmNr]=StrToWord(pTxt, &IlCyfr);
    760                                                  pTxt+=IlCyfr+2;
    761                                              break;
    762                                                
    763                                              case 'b':
    764                                                   if (*pTxt=='1') {Variables[ZmNr/8] |= 1<<(ZmNr%8);} else{ Variables[ZmNr/8]&= ~(1<<(ZmNr%8));}
    765                                                   pTxt+=3;
    766                                              break;  
    767                                            }
    768                                            NW=StrToWord(pTxt, &IlCyfr);
    769                                            pTxt+=IlCyfr+1;
    770                                            ZmType=*pTxt; pTxt++;
    771                                            ZmNr=(pTxt[0]-48)*10+pTxt[1]-48;
    772                                            pTxt+=3;
    773                                          
    774                                        }
    775                                        
    776                                        if (NNW>Net->HTTP.LastForseOrderNr) {Net->HTTP.LastForseOrderNr=NNW;}
    777                                       
    778                                        for (char i=0; i<20; i++) Buff_RX[i]=0;
    779                                        Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
    780                                        Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
    781                                        Net->Status.HttpNextQueryTime=g_counter+HTTP_QUERY_PERIOD;   //restart czasu pomiêdzy odpytaniami HTTP.
    782                                    break; 
    783                                    
    784                                    case HTTP_POST:
    785                                          /*
    786                                          HTTP.WaitingPost=0;
    787                                          WiFi_TimeOut_Counter=0;
    788                                          HTTP.OrderType=HTTP_NULL;
    789                                         
    790                                          // HTTP.Status=HTTP_DISCONNECT;
    791                                          NextGetTime=g_counter + WiFi_CONNECT_PERIOD;
    792                        
    793                                          HTTP.Status=HTTP_HOST_CONNECTED;
    794                                        */
    795                                        for (char i=0; i<20; i++) Buff_RX[i]=0;
    796                                        Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
    797                                        Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
    798                                        Net->Status.HttpNextQueryTime=g_counter+HTTP_QUERY_PERIOD;   //restart czasu pomiêdzy odpytaniami HTTP.
    799                                   break;
    800                                   
    801                                   
    802                               } //koniec switch (Net->Status.CurrentOrder)
    803                           
    804                            
    805                              //Zg³oszone zamkniête po³¹czenie
    806                           
    807                              if ((strstr(Buff_RX, "Connection: close")!=NULL) /*&& (Net->Status.HostLink==CONNECTED)*/) 
   \                     ??HTTP_QueryResponse_4:
   \   0000013C   5449               LDR      R1,??HTTP_QueryResponse_0+0x18  ;; `?<Constant "GET ">` + 256
   \   0000013E   2000               MOVS     R0,R4
   \   00000140   ........           BL       strstr
   \   00000144   0028               CMP      R0,#+0
   \   00000146   0AD0               BEQ      ??HTTP_QueryResponse_1
    808                              {
    809                                Net->Status.FreezTime=g_counter+FREEZ_TIME;
   \   00000148   019A               LDR      R2,[SP, #+4]
   \   0000014A   1032               ADDS     R2,R2,#+16
   \   0000014C   4B48               LDR      R0,??HTTP_QueryResponse_0+0x4  ;; g_counter
   \   0000014E   03C8               LDM      R0!,{R0,R1}
   \   00000150   0023               MOVS     R3,#+0
   \   00000152   3230               ADDS     R0,R0,#+50
   \   00000154   5941               ADCS     R1,R1,R3
   \   00000156   03C2               STM      R2!,{R0,R1}
    810                                 Net->Status.HostLink=DISCONNECTING;                             //Roz³¹czenie
   \   00000158   0298               LDR      R0,[SP, #+8]
   \   0000015A   0121               MOVS     R1,#+1
   \   0000015C   0170               STRB     R1,[R0, #+0]
    811                              }
    812                          
    813                           
    814                         } //koniec if(pTxt!=NULL)
    815                   
    816                   } 
    817                   
    818                
    819            
    820          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "HTTP_QueryResponse"
   \                     ??HTTP_QueryResponse_1:
   \   0000015E   05B0               ADD      SP,SP,#+20
   \   00000160   F0BC               POP      {R4-R7}
   \   00000162   01BC               POP      {R0}
   \   00000164   0047               BX       R0               ;; return
   \                     ??HTTP_QueryResponse_3:
   \   00000166   6946               MOV      R1,SP
   \   00000168   3000               MOVS     R0,R6
   \   0000016A   ........           BL       StrToWord
   \   0000016E   0500               MOVS     R5,R0
   \   00000170   6946               MOV      R1,SP
   \   00000172   0978               LDRB     R1,[R1, #+0]
   \   00000174   7618               ADDS     R6,R6,R1
   \   00000176   761C               ADDS     R6,R6,#+1
   \   00000178   3178               LDRB     R1,[R6, #+0]
   \   0000017A   761C               ADDS     R6,R6,#+1
   \   0000017C   3278               LDRB     R2,[R6, #+0]
   \   0000017E   0A23               MOVS     R3,#+10
   \   00000180   5A43               MULS     R2,R3,R2
   \   00000182   7378               LDRB     R3,[R6, #+1]
   \   00000184   D718               ADDS     R7,R2,R3
   \   00000186   103F               SUBS     R7,R7,#+16
   \   00000188   F61C               ADDS     R6,R6,#+3
   \   0000018A   20E0               B        ??HTTP_QueryResponse_13
   \                     ??HTTP_QueryResponse_14:
   \   0000018C   3F06               LSLS     R7,R7,#+24
   \   0000018E   3F0E               LSRS     R7,R7,#+24
   \   00000190   3800               MOVS     R0,R7
   \   00000192   C010               ASRS     R0,R0,#+3
   \   00000194   3F49               LDR      R1,??HTTP_QueryResponse_0+0x1C  ;; Variables
   \   00000196   0818               ADDS     R0,R1,R0
   \   00000198   0278               LDRB     R2,[R0, #+0]
   \   0000019A   0121               MOVS     R1,#+1
   \   0000019C   3B00               MOVS     R3,R7
   \   0000019E   DB08               LSRS     R3,R3,#+3
   \   000001A0   DB00               LSLS     R3,R3,#+3
   \   000001A2   FB1A               SUBS     R3,R7,R3
   \   000001A4   9940               LSLS     R1,R1,R3
   \   000001A6   8A43               BICS     R2,R2,R1
   \   000001A8   0270               STRB     R2,[R0, #+0]
   \                     ??HTTP_QueryResponse_15:
   \   000001AA   F61C               ADDS     R6,R6,#+3
   \                     ??HTTP_QueryResponse_16:
   \   000001AC   6946               MOV      R1,SP
   \   000001AE   3000               MOVS     R0,R6
   \   000001B0   ........           BL       StrToWord
   \   000001B4   6946               MOV      R1,SP
   \   000001B6   0978               LDRB     R1,[R1, #+0]
   \   000001B8   7618               ADDS     R6,R6,R1
   \   000001BA   761C               ADDS     R6,R6,#+1
   \   000001BC   3178               LDRB     R1,[R6, #+0]
   \   000001BE   761C               ADDS     R6,R6,#+1
   \   000001C0   3278               LDRB     R2,[R6, #+0]
   \   000001C2   0A23               MOVS     R3,#+10
   \   000001C4   5A43               MULS     R2,R3,R2
   \   000001C6   7378               LDRB     R3,[R6, #+1]
   \   000001C8   D718               ADDS     R7,R2,R3
   \   000001CA   103F               SUBS     R7,R7,#+16
   \   000001CC   F61C               ADDS     R6,R6,#+3
   \                     ??HTTP_QueryResponse_13:
   \   000001CE   6129               CMP      R1,#+97
   \   000001D0   05D0               BEQ      ??HTTP_QueryResponse_17
   \   000001D2   6229               CMP      R1,#+98
   \   000001D4   03D0               BEQ      ??HTTP_QueryResponse_17
   \   000001D6   6329               CMP      R1,#+99
   \   000001D8   01D0               BEQ      ??HTTP_QueryResponse_17
   \   000001DA   6429               CMP      R1,#+100
   \   000001DC   2DD1               BNE      ??HTTP_QueryResponse_18
   \                     ??HTTP_QueryResponse_17:
   \   000001DE   049A               LDR      R2,[SP, #+16]
   \   000001E0   D432               ADDS     R2,R2,#+212
   \   000001E2   0023               MOVS     R3,#+0
   \   000001E4   D35E               LDRSH    R3,[R2, R3]
   \   000001E6   8342               CMP      R3,R0
   \   000001E8   27DA               BGE      ??HTTP_QueryResponse_18
   \   000001EA   1800               MOVS     R0,R3
   \   000001EC   25D0               BEQ      ??HTTP_QueryResponse_18
   \   000001EE   6129               CMP      R1,#+97
   \   000001F0   02D0               BEQ      ??HTTP_QueryResponse_19
   \   000001F2   6229               CMP      R1,#+98
   \   000001F4   0ED0               BEQ      ??HTTP_QueryResponse_20
   \   000001F6   D9E7               B        ??HTTP_QueryResponse_16
   \                     ??HTTP_QueryResponse_19:
   \   000001F8   6946               MOV      R1,SP
   \   000001FA   3000               MOVS     R0,R6
   \   000001FC   ........           BL       StrToWord
   \   00000200   3F06               LSLS     R7,R7,#+24
   \   00000202   3F0E               LSRS     R7,R7,#+24
   \   00000204   7900               LSLS     R1,R7,#+1
   \   00000206   244A               LDR      R2,??HTTP_QueryResponse_0+0x20  ;; VariablesAnal
   \   00000208   5052               STRH     R0,[R2, R1]
   \   0000020A   6846               MOV      R0,SP
   \   0000020C   0078               LDRB     R0,[R0, #+0]
   \   0000020E   3618               ADDS     R6,R6,R0
   \   00000210   B61C               ADDS     R6,R6,#+2
   \   00000212   CBE7               B        ??HTTP_QueryResponse_16
   \                     ??HTTP_QueryResponse_20:
   \   00000214   3078               LDRB     R0,[R6, #+0]
   \   00000216   3128               CMP      R0,#+49
   \   00000218   B8D1               BNE      ??HTTP_QueryResponse_14
   \   0000021A   3F06               LSLS     R7,R7,#+24
   \   0000021C   3F0E               LSRS     R7,R7,#+24
   \   0000021E   3800               MOVS     R0,R7
   \   00000220   C010               ASRS     R0,R0,#+3
   \   00000222   1C49               LDR      R1,??HTTP_QueryResponse_0+0x1C  ;; Variables
   \   00000224   0818               ADDS     R0,R1,R0
   \   00000226   0278               LDRB     R2,[R0, #+0]
   \   00000228   0121               MOVS     R1,#+1
   \   0000022A   3B00               MOVS     R3,R7
   \   0000022C   DB08               LSRS     R3,R3,#+3
   \   0000022E   DB00               LSLS     R3,R3,#+3
   \   00000230   FB1A               SUBS     R3,R7,R3
   \   00000232   9940               LSLS     R1,R1,R3
   \   00000234   1143               ORRS     R1,R1,R2
   \   00000236   0170               STRB     R1,[R0, #+0]
   \   00000238   B7E7               B        ??HTTP_QueryResponse_15
   \                     ??HTTP_QueryResponse_18:
   \   0000023A   049A               LDR      R2,[SP, #+16]
   \   0000023C   D432               ADDS     R2,R2,#+212
   \   0000023E   0020               MOVS     R0,#+0
   \   00000240   105E               LDRSH    R0,[R2, R0]
   \   00000242   A842               CMP      R0,R5
   \   00000244   00DA               BGE      ??HTTP_QueryResponse_21
   \   00000246   1580               STRH     R5,[R2, #+0]
   \                     ??HTTP_QueryResponse_21:
   \   00000248   0020               MOVS     R0,#+0
   \   0000024A   0100               MOVS     R1,R0
   \   0000024C   0300               MOVS     R3,R0
   \                     ??HTTP_QueryResponse_22:
   \   0000024E   0A00               MOVS     R2,R1
   \   00000250   142A               CMP      R2,#+20
   \   00000252   00D3               BCC      .+4
   \   00000254   5EE7               B        ??HTTP_QueryResponse_12
   \   00000256   A354               STRB     R3,[R4, R2]
   \   00000258   491C               ADDS     R1,R1,#+1
   \   0000025A   0906               LSLS     R1,R1,#+24
   \   0000025C   090E               LSRS     R1,R1,#+24
   \   0000025E   F6E7               B        ??HTTP_QueryResponse_22
   \                     ??HTTP_QueryResponse_2:
   \   00000260   0020               MOVS     R0,#+0
   \   00000262   0100               MOVS     R1,R0
   \   00000264   0300               MOVS     R3,R0
   \                     ??HTTP_QueryResponse_23:
   \   00000266   0A00               MOVS     R2,R1
   \   00000268   142A               CMP      R2,#+20
   \   0000026A   00D3               BCC      .+4
   \   0000026C   52E7               B        ??HTTP_QueryResponse_12
   \   0000026E   A354               STRB     R3,[R4, R2]
   \   00000270   491C               ADDS     R1,R1,#+1
   \   00000272   0906               LSLS     R1,R1,#+24
   \   00000274   090E               LSRS     R1,R1,#+24
   \   00000276   F6E7               B        ??HTTP_QueryResponse_23
   \                     ??HTTP_QueryResponse_0:
   \   00000278   ........           DC32     ButtonBipCounter
   \   0000027C   ........           DC32     g_counter
   \   00000280   30F4FFFF           DC32     0xfffff430
   \   00000284   ........           DC32     `?<Constant "GET ">` + 80
   \   00000288   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   0000028C   10270000           DC32     0x2710
   \   00000290   ........           DC32     `?<Constant "GET ">` + 256
   \   00000294   ........           DC32     Variables
   \   00000298   ........           DC32     VariablesAnal
    821          
    822          
    823          

   \                                 In section Debug.txt, align 4, keep-with-next
    824          void HTTP_CheckConnection(char *Buff_TX, AT91PS_USART USART, _Net *Net)
    825          {
   \                     HTTP_CheckConnection:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0E00               MOVS     R6,R1
   \   00000004   1400               MOVS     R4,R2
    826             Net->Status.FreezTime=g_counter+FREEZ_TIME; //rezerwowanie czasu
   \   00000006   0E4D               LDR      R5,??HTTP_CheckConnection_0  ;; g_counter
   \   00000008   2832               ADDS     R2,R2,#+40
   \   0000000A   03CD               LDM      R5!,{R0,R1}
   \   0000000C   083D               SUBS     R5,R5,#+8
   \   0000000E   0023               MOVS     R3,#+0
   \   00000010   3230               ADDS     R0,R0,#+50
   \   00000012   5941               ADCS     R1,R1,R3
   \   00000014   03C2               STM      R2!,{R0,R1}
    827             Net->Status.CurrentOrder=WizFi_AT_CID;     
   \   00000016   0C20               MOVS     R0,#+12
   \   00000018   A070               STRB     R0,[R4, #+2]
    828             AT91F_US_SendFrame(USART,(char*)AT_CID,sizeof(AT_CID)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000001A   82B0               SUB      SP,SP,#+8
   \   0000001C   1800               MOVS     R0,R3
   \   0000001E   0090               STR      R0,[SP, #+0]
   \   00000020   0922               MOVS     R2,#+9
   \   00000022   0849               LDR      R1,??HTTP_CheckConnection_0+0x4  ;; AT_CID
   \   00000024   3000               MOVS     R0,R6
   \   00000026   ........           BL       AT91F_US_SendFrame
   \   0000002A   02B0               ADD      SP,SP,#+8
    829             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002C   2034               ADDS     R4,R4,#+32
   \   0000002E   0CCD               LDM      R5!,{R2,R3}
   \   00000030   0548               LDR      R0,??HTTP_CheckConnection_0+0x8  ;; 0x2710
   \   00000032   0021               MOVS     R1,#+0
   \   00000034   8018               ADDS     R0,R0,R2
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C4               STM      R4!,{R0,R1}
    830             
    831          }
   \   0000003A   70BC               POP      {R4-R6}
   \   0000003C   01BC               POP      {R0}
   \   0000003E   0047               BX       R0               ;; return
   \                     ??HTTP_CheckConnection_0:
   \   00000040   ........           DC32     g_counter
   \   00000044   ........           DC32     AT_CID
   \   00000048   10270000           DC32     0x2710
    832          

   \                                 In section Debug.txt, align 4, keep-with-next
    833          char HTTP_CheckConnectionResponse(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    834          {
   \                     HTTP_CheckConnectionResponse:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1C00               MOVS     R4,R3
    835             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   6846               MOV      R0,SP
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   0170               STRB     R1,[R0, #+0]
    836             char *ptr;
                          ^
Warning[Pe177]: variable "ptr" was declared but never referenced
    837             
    838          
    839          
    840                  if ((strstr(Buff_RX, "[ERROR")!=NULL) || (strstr(Buff_RX, "No valid Cids")!=NULL))    //((Buff_RX, "[ERROR")!=NULL) ||       strstr(Buff_RX, "No valid Cids")!=NULL)
   \   0000000E   2A4F               LDR      R7,??HTTP_CheckConnectionResponse_0  ;; `?<Constant "[CONNECT">`
   \   00000010   3900               MOVS     R1,R7
   \   00000012   0C31               ADDS     R1,R1,#+12
   \   00000014   3000               MOVS     R0,R6
   \   00000016   ........           BL       strstr
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   06D1               BNE      ??HTTP_CheckConnectionResponse_1
   \   0000001E   1437               ADDS     R7,R7,#+20
   \   00000020   3900               MOVS     R1,R7
   \   00000022   3000               MOVS     R0,R6
   \   00000024   ........           BL       strstr
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   1AD0               BEQ      ??HTTP_CheckConnectionResponse_2
    841                  {
    842                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \                     ??HTTP_CheckConnectionResponse_1:
   \   0000002C   2800               MOVS     R0,R5
   \   0000002E   2A00               MOVS     R2,R5
   \   00000030   03E0               B        ??HTTP_CheckConnectionResponse_3
   \                     ??HTTP_CheckConnectionResponse_4:
   \   00000032   7254               STRB     R2,[R6, R1]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   0006               LSLS     R0,R0,#+24
   \   00000038   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_CheckConnectionResponse_3:
   \   0000003A   0100               MOVS     R1,R0
   \   0000003C   3229               CMP      R1,#+50
   \   0000003E   F8D3               BCC      ??HTTP_CheckConnectionResponse_4
    843                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000040   2600               MOVS     R6,R4
   \   00000042   2036               ADDS     R6,R6,#+32
   \   00000044   1D48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x4  ;; g_counter
   \   00000046   0CC8               LDM      R0!,{R2,R3}
   \   00000048   1D48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x8  ;; 0x2710
   \   0000004A   2900               MOVS     R1,R5
   \   0000004C   8018               ADDS     R0,R0,R2
   \   0000004E   5941               ADCS     R1,R1,R3
   \   00000050   03C6               STM      R6!,{R0,R1}
    844                    Net->Status.FreezTime=0;
   \   00000052   2200               MOVS     R2,R4
   \   00000054   2832               ADDS     R2,R2,#+40
   \   00000056   2800               MOVS     R0,R5
   \   00000058   0100               MOVS     R1,R0
   \   0000005A   03C2               STM      R2!,{R0,R1}
    845                    Net->Status.HostLink=DISCONNECTED;
   \   0000005C   6070               STRB     R0,[R4, #+1]
    846                    Net->Status.CurrentOrder=WizFi_NC;
   \   0000005E   A570               STRB     R5,[R4, #+2]
   \   00000060   25E0               B        ??HTTP_CheckConnectionResponse_5
    847                  }else if(strstr(Buff_RX, "[OK")!=NULL)
   \                     ??HTTP_CheckConnectionResponse_2:
   \   00000062   18A1               ADR      R1,??HTTP_CheckConnectionResponse_0+0xC  ;; "[OK"
   \   00000064   3000               MOVS     R0,R6
   \   00000066   ........           BL       strstr
   \   0000006A   0028               CMP      R0,#+0
   \   0000006C   1FD0               BEQ      ??HTTP_CheckConnectionResponse_5
    848                  {
    849                    odp=1;  //ok 
   \   0000006E   6846               MOV      R0,SP
   \   00000070   0121               MOVS     R1,#+1
   \   00000072   0170               STRB     R1,[R0, #+0]
    850                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000074   2800               MOVS     R0,R5
   \   00000076   2A00               MOVS     R2,R5
   \   00000078   03E0               B        ??HTTP_CheckConnectionResponse_6
   \                     ??HTTP_CheckConnectionResponse_7:
   \   0000007A   7254               STRB     R2,[R6, R1]
   \   0000007C   401C               ADDS     R0,R0,#+1
   \   0000007E   0006               LSLS     R0,R0,#+24
   \   00000080   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_CheckConnectionResponse_6:
   \   00000082   0100               MOVS     R1,R0
   \   00000084   3229               CMP      R1,#+50
   \   00000086   F8D3               BCC      ??HTTP_CheckConnectionResponse_7
    851                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000088   2600               MOVS     R6,R4
   \   0000008A   2036               ADDS     R6,R6,#+32
   \   0000008C   0B48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x4  ;; g_counter
   \   0000008E   0CC8               LDM      R0!,{R2,R3}
   \   00000090   0B48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x8  ;; 0x2710
   \   00000092   2900               MOVS     R1,R5
   \   00000094   8018               ADDS     R0,R0,R2
   \   00000096   5941               ADCS     R1,R1,R3
   \   00000098   03C6               STM      R6!,{R0,R1}
    852                    Net->Status.CurrentOrder=WizFi_NC;
   \   0000009A   A570               STRB     R5,[R4, #+2]
    853                    HTTP_Task(Buff_TX,USART, Net);                                //wykonaj kolejne zadanie HTTP
   \   0000009C   2200               MOVS     R2,R4
   \   0000009E   0299               LDR      R1,[SP, #+8]
   \   000000A0   0198               LDR      R0,[SP, #+4]
   \   000000A2   ........           BL       HTTP_Task
    854                    Net->Status.FreezTime=0;
   \   000000A6   2834               ADDS     R4,R4,#+40
   \   000000A8   2800               MOVS     R0,R5
   \   000000AA   0100               MOVS     R1,R0
   \   000000AC   03C4               STM      R4!,{R0,R1}
    855                  }
    856                    
    857            
    858             return odp;
   \                     ??HTTP_CheckConnectionResponse_5:
   \   000000AE   6846               MOV      R0,SP
   \   000000B0   0078               LDRB     R0,[R0, #+0]
   \   000000B2   FEBC               POP      {R1-R7}
   \   000000B4   02BC               POP      {R1}
   \   000000B6   0847               BX       R1               ;; return
   \                     ??HTTP_CheckConnectionResponse_0:
   \   000000B8   ........           DC32     `?<Constant "[CONNECT">`
   \   000000BC   ........           DC32     g_counter
   \   000000C0   10270000           DC32     0x2710
   \   000000C4   5B4F4B00           DC8      "[OK"
    859          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     g_counter

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   10270000           DC32     0x2710

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     g_counter

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   10270000           DC32     0x2710

   \                                 In section .rodata, align 4
   \   00000000   4F4B00             DC8 "OK"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   49503A00           DC8 "IP:"

   \                                 In section .rodata, align 4
   \                     `?<Constant "[CONNECT">`:
   \   00000000   5B434F4E4E45       DC8 "[CONNECT"
   \              435400      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   5B4552524F52       DC8 "[ERROR"
   \              00          
   \   00000013   00                 DC8 0
   \   00000014   4E6F2076616C       DC8 "No valid Cids"
   \              696420436964
   \              7300        
   \   00000022   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GET ">`:
   \   00000000   4745542000         DC8 "GET "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   2E6373762048       DC8 ".csv HTTP/1.1\015\012"
   \              5454502F312E
   \              310D0A00    
   \   00000018   557365722D41       DC8 "User-Agent: CEURON\015\012Host: "
   \              67656E743A20
   \              434555524F4E
   \              0D0A486F7374
   \              3A2000      
   \   00000033   00                 DC8 0
   \   00000034   436F6E6E6563       DC8 "Connection: keep-alive\015\012"
   \              74696F6E3A20
   \              6B6565702D61
   \              6C6976650D0A
   \              00          
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   0D0A0D0A00         DC8 "\015\012\015\012"
   \   00000055   000000             DC8 0, 0, 0
   \   00000058   504F53542000       DC8 "POST "
   \   0000005E   0000               DC8 0, 0
   \   00000060   2F7075746761       DC8 "/putgate.php HTTP/1.1\015\012User-Agent: CEURON\015\012Host: "
   \              74652E706870
   \              20485454502F
   \              312E310D0A55
   \              7365722D4167
   \              656E743A2043
   \              4555524F4E0D
   \              0A486F73743A
   \              2000        
   \   00000092   0000               DC8 0, 0
   \   00000094   0D0A436F6E74       DC8 "\015\012Content-Length: "
   \              656E742D4C65
   \              6E6774683A20
   \              00          
   \   000000A7   00                 DC8 0
   \   000000A8   0D0A436F6E74       DC8 0DH, 0AH, 43H, 6FH, 6EH, 74H, 65H, 6EH
   \              656E        
   \   000000B0   742D54797065       DC8 74H, 2DH, 54H, 79H, 70H, 65H, 3AH, 20H
   \              3A20        
   \   000000B8   6170706C6963       DC8 61H, 70H, 70H, 6CH, 69H, 63H, 61H, 74H
   \              6174        
   \   000000C0   696F6E2F782D       DC8 69H, 6FH, 6EH, 2FH, 78H, 2DH, 77H, 77H
   \              7777        
   \   000000C8   772D666F726D       DC8 77H, 2DH, 66H, 6FH, 72H, 6DH, 2DH, 75H
   \              2D75        
   \   000000D0   726C656E636F       DC8 72H, 6CH, 65H, 6EH, 63H, 6FH, 64H, 65H
   \              6465        
   \   000000D8   640D0A0D0A4E       DC8 64H, 0DH, 0AH, 0DH, 0AH, 4EH, 6FH, 64H
   \              6F64        
   \   000000E0   6549443D00         DC8 65H, 49H, 44H, 3DH, 0
   \   000000E5   000000             DC8 0, 0, 0
   \   000000E8   264F72646572       DC8 "&Order=1&Content=;\015\012"
   \              3D3126436F6E
   \              74656E743D3B
   \              0D0A00      
   \   000000FD   000000             DC8 0, 0, 0
   \   00000100   436F6E6E6563       DC8 "Connection: close"
   \              74696F6E3A20
   \              636C6F736500
   \   00000112   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   2F646300           DC8 "/dc"

   \                                 In section .rodata, align 4
   \   00000000   256400             DC8 "%d"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0D0A00             DC8 "\015\012"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   2F646F00           DC8 "/do"

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "

   \                                 In section .rodata, align 4
   \   00000000   5B4F4B00           DC8 "[OK"

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     AT91F_PDC_IsNextTxEmpty             0
     AT91F_PDC_IsTxEmpty                 0
     AT91F_PDC_SendFrame                24
     AT91F_PDC_SetNextTx                 0
     AT91F_PDC_SetTx                     0
     AT91F_US_SendFrame                 16
     CheckExistDomenaIP                 16
     HTTP_CheckConnection               24
     HTTP_CheckConnectionResponse       32
     HTTP_Query                         72
     HTTP_QueryResponse                 40
     StrToWord                          32
     WizFiCommand_AT                    24
     WizFiCommand_AT_DNSLOOKUP          32
     WizFiCommand_AT_NCLOSEALL          24
     WizFiCommand_AT_NCTCP              40
     WizFiCommand_AT_NDHCP_1            16
     WizFiCommand_AT_WA                 32
     WizFiCommand_AT_WD                 16
     WizFiCommand_AT_WWEP1              32
     WizFiCommand_AT_WWPA               32
     WizFiCommand_AT_XDUM0              16
     WizFiResponseCommand_AT            24
     WizFiResponseCommand_AT_DNSLOOKUP
                                        24
     WizFiResponseCommand_AT_NCLOSEALL0
                                        24
     WizFiResponseCommand_AT_NCTCP      24
     WizFiResponseCommand_AT_NDHCP_1
                                        24
     WizFiResponseCommand_AT_WA         24
     WizFiResponseCommand_AT_WD         24
     WizFiResponseCommand_AT_WWEP1      24
     WizFiResponseCommand_AT_WWPA       24
     WizFiResponseCommand_AT_XDUM0      24
     strstr                              8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     AT91F_PDC_SetNextTx               6
     AT91F_PDC_SetTx                   6
     AT91F_PDC_IsTxEmpty              10
     AT91F_PDC_IsNextTxEmpty          10
     AT91F_PDC_SendFrame              70
     AT91F_US_SendFrame               26
     strstr                           12
     AT                                4
     AT_XDUM0                         12
     AT_WD                             8
     AT_NDHCP_1                       12
     AT_WWEP1                         12
     AT_WWPA                          12
     AT_WA                             8
     AT_DNSLOOKUP                     16
     AT_NCTCP                         12
     AT_NCLOSEALL                     16
     AT_WS                             8
     AT_CID                           12
     WizFiCommand_AT                 112
     WizFiResponseCommand_AT          72
     WizFiCommand_AT_XDUM0            56
     WizFiResponseCommand_AT_XDUM0    72
     WizFiCommand_AT_NCLOSEALL        60
     WizFiResponseCommand_AT_NCLOSEALL0
                                      80
     WizFiCommand_AT_WD               56
     WizFiResponseCommand_AT_WD       72
     WizFiCommand_AT_NDHCP_1          56
     WizFiResponseCommand_AT_NDHCP_1
                                      72
     WizFiCommand_AT_WWEP1           136
     WizFiResponseCommand_AT_WWEP1    80
     WizFiCommand_AT_WWPA            144
     WizFiResponseCommand_AT_WWPA     80
     WizFiCommand_AT_WA              152
     WizFiResponseCommand_AT_WA       80
     CheckExistDomenaIP              148
     WizFiCommand_AT_DNSLOOKUP       196
     WizFiResponseCommand_AT_DNSLOOKUP
                                     136
     WizFiCommand_AT_NCTCP           224
     WizFiResponseCommand_AT_NCTCP   144
     StrToWord                       110
     HTTP_Query                     1000
     HTTP_QueryResponse              668
     HTTP_CheckConnection             76
     HTTP_CheckConnectionResponse    200
     ??DataTable20                     4
     ??DataTable21                     4
     ??DataTable22                     4
     ??DataTable23                     4
     ?<Constant "OK">                  4
     ?<Constant "IP:">                 4
     ?<Constant "[CONNECT">           36
     ?<Constant "GET ">              276
     ?<Constant "/dc">                 4
     ?<Constant "%d">                  4
     ?<Constant "\r\n">                4
     ?<Constant "/do">                 4
     ?<Constant "   ">                 4
     ?<Constant "[OK">                 4

 
   476 bytes in section .rodata
 4 438 bytes in section Debug.txt
 
 4 298 bytes of CODE  memory (+ 140 bytes shared)
   476 bytes of CONST memory

Errors: none
Warnings: 23
