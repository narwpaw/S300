###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           23/Apr/2012  16:53:27 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\Framework\main.c                              #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\Framework\main.c" -D AT91SAM7S256 -D          #
#                    AT91SAM7SEK -D iH -D __ALARM -lC                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\List\" --diag_suppress    #
#                    Pa082 -o "D:\Zeuron\Projekty\S300\S300-program v0.6 -    #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\Obj\" --no_unroll         #
#                    --no_inline --no_tbaa --no_scheduling --debug --endian   #
#                    little --cpu ARM7TDMI -e --fpu None --dlib_config        #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v0.6 - 13.03.2012\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v0.6 - 13.03.2012\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v0.6 - 13.03.2012\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    13.03.2012\Framework\Configuration\" -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=Debug.txt --interwork --cpu_mode thumb   #
#                    -Om                                                      #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\List\main.lst             #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    13.03.2012\bin\cdc\AT91SAM7SEK\Obj\main.o                #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\main.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//                     
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : main.c                                   *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21            
     22          
     23          
     24          //Sta³e ------------------------------------------------------------------------

   \                                 In section .rodata, align 4
     25              const char identyfikacja[]="S300 ";                                          //nazwa urz¹dzeni 
   \                     identyfikacja:
   \   00000000   533330302000       DC8 "S300 "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     26              const char system[]="0.6 ";                                                  //nazwa urz¹dzeni 
   \                     system:
   \   00000000   302E362000         DC8 "0.6 "
   \   00000005   000000             DC8 0, 0, 0
     27              //const char identyfikacja[]="SMC3_148";                                    //nazwa urz¹dzeni 
     28              
     29          //____________________________Koniec sta³ych ___________________________________
     30          
     31          
     32          
     33          //Konfiguracja -----------------------------------------------------------------
     34              #define LightLCD_Time              10                                     //czas (s sek.) wygaszania podœwietlenia
     35          //___________________________Koniec konfiguracji________________________________
     36          
     37          
     38          
     39          
     40          //Definicje --------------------------------------------------------------------
     41              #define MSG_SIZE 	                1000                                    
     42              #define TAB_SIZE                    1000                                    
     43              #define USB_BUFFER_SIZE             256                                     //bufor odbiorczy USB  
     44             
     45             // #define NOTRACES                                                            //Wy³¹cza debagowania poprzez US1
     46              
     47          //___________________________Koniec definicji___________________________________
     48          
     49          
     50          
     51          // Pliki do³¹czane -------------------------------------------------------------
     52          
     53               #include "main_H.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_AIC_ConfigureIt(AT91PS_AIC, unsigned int, unsigned int, unsigned int, void (*)())
   \                     AT91F_AIC_ConfigureIt:
   \   00000000   F5B4               PUSH     {R0,R2,R4-R7}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   069E               LDR      R6,[SP, #+24]
   \   00000008   A100               LSLS     R1,R4,#+2
   \   0000000A   5718               ADDS     R7,R2,R1
   \   0000000C   8037               ADDS     R7,R7,#+128
   \   0000000E   3868               LDR      R0,[R7, #+0]
   \   00000010   0125               MOVS     R5,#+1
   \   00000012   A540               LSLS     R5,R5,R4
   \   00000014   2C00               MOVS     R4,R5
   \   00000016   9225               MOVS     R5,#+146
   \   00000018   6D00               LSLS     R5,R5,#+1        ;; #+292
   \   0000001A   5519               ADDS     R5,R2,R5
   \   0000001C   2C60               STR      R4,[R5, #+0]
   \   0000001E   3E60               STR      R6,[R7, #+0]
   \   00000020   019E               LDR      R6,[SP, #+4]
   \   00000022   1E43               ORRS     R6,R6,R3
   \   00000024   5650               STR      R6,[R2, R1]
   \   00000026   6C60               STR      R4,[R5, #+4]
   \   00000028   FCBC               POP      {R2-R7}
   \   0000002A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_AIC_EnableIt(AT91PS_AIC, unsigned int)
   \                     AT91F_AIC_EnableIt:
   \   00000000   9022               MOVS     R2,#+144
   \   00000002   5200               LSLS     R2,R2,#+1        ;; #+288
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   8B40               LSLS     R3,R3,R1
   \   00000008   8350               STR      R3,[R0, R2]
   \   0000000A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgOutput:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   0161               STR      R1,[R0, #+16]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgInput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgInput:
   \   00000000   4161               STR      R1,[R0, #+20]
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPullup(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgPullup:
   \   00000000   CA43               MVNS     R2,R1
   \   00000002   0266               STR      R2,[R0, #+96]
   \   00000004   4166               STR      R1,[R0, #+100]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_InterruptEnable(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_InterruptEnable:
   \   00000000   0164               STR      R1,[R0, #+64]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PIO_GetInterruptStatus(AT91PS_PIO)
   \                     AT91F_PIO_GetInterruptStatus:
   \   00000000   C06C               LDR      R0,[R0, #+76]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_WDTRestart(AT91PS_WDTC)
   \                     AT91F_WDTRestart:
   \   00000000   0149               LDR      R1,??AT91F_WDTRestart_0  ;; 0xa5000001
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??AT91F_WDTRestart_0:
   \   00000008   010000A5           DC32     0xa5000001

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_LCD_Init()
   \                     AT91F_LCD_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   2248               LDR      R0,??AT91F_LCD_Init_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   224C               LDR      R4,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000000C   0421               MOVS     R1,#+4
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       AT91F_PIO_CfgOutput
   \   00000014   0821               MOVS     R1,#+8
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       AT91F_PIO_CfgOutput
   \   0000001C   8021               MOVS     R1,#+128
   \   0000001E   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       AT91F_PIO_CfgOutput
   \   00000026   8021               MOVS     R1,#+128
   \   00000028   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_PIO_CfgOutput
   \   00000030   8021               MOVS     R1,#+128
   \   00000032   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   00000034   2000               MOVS     R0,R4
   \   00000036   ........           BL       AT91F_PIO_CfgOutput
   \   0000003A   8021               MOVS     R1,#+128
   \   0000003C   0905               LSLS     R1,R1,#+20       ;; #+134217728
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       AT91F_PIO_CfgOutput
   \   00000044   1021               MOVS     R1,#+16
   \   00000046   2000               MOVS     R0,R4
   \   00000048   ........           BL       AT91F_PIO_CfgOutput
   \   0000004C   8021               MOVS     R1,#+128
   \   0000004E   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000050   2000               MOVS     R0,R4
   \   00000052   ........           BL       AT91F_PIO_CfgOutput
   \   00000056   8021               MOVS     R1,#+128
   \   00000058   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   ........           BL       AT91F_PIO_CfgOutput
   \   00000060   8021               MOVS     R1,#+128
   \   00000062   8904               LSLS     R1,R1,#+18       ;; #+33554432
   \   00000064   2000               MOVS     R0,R4
   \   00000066   ........           BL       AT91F_PIO_CfgOutput
   \   0000006A   8021               MOVS     R1,#+128
   \   0000006C   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   0000006E   2000               MOVS     R0,R4
   \   00000070   ........           BL       AT91F_PIO_CfgOutput
   \   00000074   8021               MOVS     R1,#+128
   \   00000076   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   00000078   2000               MOVS     R0,R4
   \   0000007A   ........           BL       AT91F_PIO_CfgOutput
   \   0000007E   8021               MOVS     R1,#+128
   \   00000080   0904               LSLS     R1,R1,#+16       ;; #+8388608
   \   00000082   2000               MOVS     R0,R4
   \   00000084   ........           BL       AT91F_PIO_CfgOutput
   \   00000088   10BC               POP      {R4}
   \   0000008A   01BC               POP      {R0}
   \   0000008C   0047               BX       R0               ;; return
   \   0000008E   C046               Nop      
   \                     ??AT91F_LCD_Init_0:
   \   00000090   00FCFFFF           DC32     0xfffffc00
   \   00000094   00F4FFFF           DC32     0xfffff400

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void *USB_GetDriverInterface(S_usb const *)
   \                     USB_GetDriverInterface:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetDriverID(S_usb const *)
   \                     USB_GetDriverID:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   C068               LDR      R0,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Handler(S_usb const *)
   \                     USB_Handler:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   896A               LDR      R1,[R1, #+40]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork bool USB_Attach(S_usb const *)
   \                     USB_Attach:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C969               LDR      R1,[R1, #+28]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   02BC               POP      {R1}
   \   00000010   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Connect(S_usb const *)
   \                     USB_Connect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C96A               LDR      R1,[R1, #+44]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Disconnect(S_usb const *)
   \                     USB_Disconnect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   096B               LDR      R1,[R1, #+48]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetState(S_usb const *)
   \                     USB_GetState:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0004               LSLS     R0,R0,#+16
   \   00000006   000C               LSRS     R0,R0,#+16
   \   00000008   7047               BX       LR               ;; return

                                                            
                                                            ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     54               #include "WizFi.h"

        
        ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\WizFi.h",143  Warning[Pe001]: 
          last line of file ends without a newline
     55          
     56          
     57          
     58          //-----------------------Koniec plików do³¹czanych -----------------------------
     59          
     60          
     61          
     62          
     63          
     64          
     65          
     66          
     67          
     68          

   \                                 In section .bss, align 1
     69          char APC;
   \                     APC:
   \   00000000                      DS8 1
     70          
     71          
     72          
     73          
     74          
     75          //Zmienne globalne -------------------------------------------------------------

   \                                 In section .data, align 1
     76              char g_czas_petli = 10;                                                     //  Czas przebiegu pêtli programu w ms
   \                     g_czas_petli:
   \   00000000   0A                 DC8 10

   \                                 In section .bss, align 4
     77              unsigned int komunikacja_ok=0;                                              //1-ok, 0-brak
   \                     komunikacja_ok:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     78              int  rej_prog[10];
   \                     rej_prog:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     79              int LifeCouter = 0, LifeCouterMax = 0;                                      // Zmienne funkcji LifeBlinking
   \                     LifeCouter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     LifeCouterMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     80              byte USB_busy;
   \                     USB_busy:
   \   00000000                      DS8 1
     81              int FlashProgramOfset =  256;                                               //0-wykonywany program A, 
     82              int FlashProgramReserveOfset =  256+UseProgramSize;                         //0-wykonywany program A, 

   \                                 In section .bss, align 4
     83              int  advY =0;                                                                  //chwilowa wspolzedna Y TP
   \                     advY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     84              int  advX =0;                                                                  //chwilowa wspolzedna X TP
   \                     advX:
   \   00000000                      DS8 4
     85               signed short  Y_down  =-1;                                                           //wspolzedna Y TP (naciœniêcie)
     86               signed short  X_down  =-1;                                                           //wspolzedna X TP (naciœniêcie)
     87               signed short  Y_up    =-1;                                                           //wspolzedna Y TP (puszczenie)
     88               signed short  X_up    =-1;                                                           //wspolzedna X TP (puszczenie)

   \                                 In section .bss, align 4
     89              int  g_leng  =0;                                                            //jêzyk 1-polski, 2 angielski
   \                     g_leng:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     90              char g_level =0;                                                            //poziom dostêpu 0-ograniczony, 1- operator, 2-administrator
   \                     g_level:
   \   00000000                      DS8 1
     91              char g_Password_1[8]={"1111"};                                              //haslo poziomu 1  
     92              char g_Password_2[8]={"2222"};                                              //haslo poziomu 1  

   \                                 In section .bss, align 4
     93              long int g_Message =0;                                                             //1-wiadomosc ekranowa
   \                     g_Message:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     94              int g_info=0;                                                                   
   \                     g_info:
   \   00000000                      DS8 4
     95              char g_PC_Connected;                                                       //1-pod³aczony komputer
     96              unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
     97              unsigned long       g_seconds_counter;                                      //globalny licznik sekundowy od w³¹czenia/restartu sterownika
     98              
     99          //    static char US0_Buffer[US_BUFFER_SIZE];                                    //bufor odbiorczy USART 0
    100          //    static char US0_Buffer2[US_BUFFER_SIZE];                                   //zapasowy bufor odbiorczy USART 0
    101              char AdressModbus = 1;                                                      //Adres urz¹dzenia dla protoko³u modbus
    102              int g_LightCouterLCD = 0;                                                   //licznik podœwietlenia lcd
    103              char g_LightLCDEnable = 0;                                                   //podœwietlenia lcd
    104              char g_ScreenSever_On;                                                      //1-Wygaszacz aktywny
    105              char g_ScreenSever_Time_On;                                                 //godzina w³¹czenia wygaszacz
    106              char g_ScreenSever_Time_Off;                                                //godzina wy³¹czenia wygaszacza
    107              char g_SlaveConnect=0;                                                   //
    108              char g_Stop_Program = 0;                                                    //1- zatrzymuje program
    109              char g_Restart_Program = 1;                                                 //1- restartuje program
    110              unsigned long long g_NextTimeProgram = 0;                                                    //
    111              char g_NeedPass=0;  //wymóg has³a
    112              char AlarmOn=0;                                                             //1=alarm dzwiêkowy
    113              char Speaker[SPK_Amount];                                                   //sygna³ dŸwiêkowy
    114              _AlarmScreenActionType AlarmScreenAction;

   \                                 In section .bss, align 8
    115              _Net NET; 
   \                     NET:
   \   00000000                      DS8 296
    116              //___________________________Koniec zmiennych globalnych________________________
    117          
    118          
    119          
    120          
    121          
    122          //Zmienne lokalne -------------------------------------------------------------

   \                                 In section .bss, align 1
    123              char LightLCD_OFF_Counter;                                                  //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    124              char LightLCD_OFF_Counter2;                                                 //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    125              char LightLCD_OFF_Curent;                                                   //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Curent:
   \   00000000                      DS8 1
    126              volatile char SlaveMode=0;
    127          //___________________________Koniec zmiennych lplkalnych________________________
    128          
    129          
    130              
    131               
    132          
    133              
    134          
    135          //Zmienne zewnêtrzne -------------------------------------------------------------    
    136              extern char       LCD_Canvas[8][128];
    137              extern char       Label_move;
    138              extern int        MenuLevel;      //poziom menu
    139              extern int        Suw_poz_analog;  
    140              extern int        ScrollMenu_poz;
    141              extern char       g_US0_Connect_OK;
    142              extern char       g_US1_Connect_OK;
    143              extern char       g_US0_Comm_TIMEOUT;
    144              extern _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];
    145              extern char       g_Ans_ZD_MODBUS_0;
    146              extern char       g_Current_ZD_MODBUS_0;
    147              extern char       g_ERR_ZD_MODBUS_0;
    148              extern int        g_US0_Comm_MinCykle;
    149              extern char       US0_MasterMODBUS_ENABLE;
    150              extern char       g_US1_Comm_TIMEOUT;
    151              extern _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];
    152              extern char       g_Ans_ZD_MODBUS_1;
    153              extern char       g_Current_ZD_MODBUS_1;
    154              extern char       g_ERR_ZD_MODBUS_1;
    155              extern int        g_US1_Comm_MinCykle;
    156              extern char       US1_MasterMODBUS_ENABLE;
    157              extern char       Busy_program;
    158              extern _Trap      Trap;
    159              extern _Correct korekta_Y;
    160              extern _Correct korekta_X;
    161              extern  char Synchronizacja;
    162              extern char         RF_CurrentTask;
    163              //extern unsigned char  SPI_Buffer_Rx[SPI_Read_BUFFER_SIZE];                         //bufor odbiorczy SPI
    164              //extern unsigned char  SPI_Buffer_Tx[SPI_Write_BUFFER_SIZE];                        //bufor odbiorczy SPI
    165              extern void ReadWriteSpi (unsigned char* pReadBuffer, int nReadLen, unsigned char* pWriteBuffer, int nWriteLen, bool bHoldCS);
    166              extern void SPI_init(void) ;
    167              
    168              extern _MainStage  MainStage; 
    169              extern _ProgramTab gProg;
    170              extern void RF_Init(void);
    171              extern _RF_Status RF_Status;
    172              extern char g_RF_TimeOutCounter;
    173              extern   _RF_TaskTab  RF_TaskTab;
    174              extern _TransQuality TransQuality;
    175              extern _DateTime  *pDateTime;
    176              extern char Variables[];
    177              extern unsigned int CyklPerSek;
    178              extern char Buff_TX_1[];
    179              AT91PS_MEM pAT91C_IFLASH_MEM=AT91C_IFLASH_MEM;
    180              
    181          //___________________________Koniec zmiennych zewnêtrznych________________________    
    182              
    183              
    184              
    185          //Zmienne tymczasowe -----------------------------------------------------------

   \                                 In section .bss, align 1
    186              char tmp_i =0; 
   \                     tmp_i:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    187              float licznik = 0.0;
   \                     licznik:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    188              int licznik2 = 0;
   \                     licznik2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    189              int licznik3 = 0;
   \                     licznik3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    190              char *memory;
   \                     memory:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    191              unsigned long sss;
   \                     sss:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    192              int int1 =0;
   \                     int1:
   \   00000000                      DS8 4
    193              
    194          
    195              _DateTime DateTime;
    196              
    197               
    198              //___________________________Koniec zmiennych tymczasowych______________________
    199          
    200          
    201              
    202          
    203          //Funkcje zewnêtrzne -----------------------------------------------------------
    204              extern RAM ram;
    205              extern ConversFC Convers_DW_B;
    206              extern void InitFlash(void);
    207              extern void Program (_ProgramTab *ProgTab);
    208              extern void at91flashWriteDW(int sektor, int nr_DW, unsigned long wartDW );
    209              extern void ScreenEvent(void);
    210              extern int Suw_poz;
    211              extern void MenuPaint(void);
    212              extern void at91flashWrite();
    213              extern void ConfigureIrBus(void);
    214              extern void MenuRefresh();
    215              //extern unsigned short crc16(unsigned char* modbusframe,int Length);
    216              //extern unsigned char ModBus_CommS(unsigned char* modbusframe);
    217              //extern void ModBus_CommS_US0();
    218              extern void US0_init(void);
    219              extern void US1_init(void);
    220              extern char ModBus_MASTER_TX(char US_Nr);
    221              extern void ReadTP(_TPoint *Point);
    222              //extern BYTE ModBus_MASTER_Return(BYTE* modbusframe);
    223          //_______________________ Koniec funkcji zewnêtrznych __________________________
    224              
    225          
    226          /*
    227          $Id: serial_example.c,v 1.1.2.1 2006/12/05 08:33:25 danielru Exp $
    228          */
    229          
    230          
    231          
    232          
    233          //------------------------------------------------------------------------------
    234          //      Prototypes
    235          //------------------------------------------------------------------------------
    236          
    237          //! \brief  Initialization callback
    238          static void CBK_Init(const S_usb *pUsb);
    239          
    240          //! \brief  Suspend callback
    241          static void CBK_Suspend(const S_usb *pUsb);
    242          
    243          //! \brief  Resume callback
    244          static void CBK_Resume(const S_usb *pUsb);
    245          
    246          //! \brief  New request callback
    247          static void CBK_NewRequest(const S_usb *pUsb);
    248          
    249          //! \brief  New reset callback
    250          //static void CBK_Reset(const S_usb *pUsb);
    251          
    252          //! \brief  New SOF callback
    253          //static void CBK_SOF(const S_usb *pUsb);
    254          
    255          //------------------------------------------------------------------------------
    256          //      Internal variables
    257          //------------------------------------------------------------------------------
    258          
    259          //! \brief  List of endpoints (including endpoint 0) used by the device.
    260          //! \see    S_usb_endpoint
    261          static S_usb_endpoint pEndpoints[] = {
    262          
    263              USB_ENDPOINT_SINGLEBANK, // Control endpoint 0
    264              USB_ENDPOINT_DUALBANK,   // Data out endpoint
    265              USB_ENDPOINT_DUALBANK,   // Data in endpoint
    266              USB_ENDPOINT_SINGLEBANK, // Notification endpoint
    267          };
    268          
    269          //! \brief  Variable used to store the last received SETUP packet.
    270          //! \see    S_usb_request
    271          //! \see    S_usb

   \                                 In section .bss, align 4
    272          static S_usb_request sSetup;
   \                     sSetup:
   \   00000000                      DS8 8
    273          
    274          //! \brief  Variable used to store the current device state
    275          //! \see    S_usb

   \                                 In section .bss, align 4
    276          static unsigned int dState;
   \                     dState:
   \   00000000                      DS8 4
    277          
    278          //! \brief  List of implemented callbacks
    279          //! \see    S_usb_callbacks
    280          //! \see    S_usb

   \                                 In section .rodata, align 4
    281          static const S_usb_callbacks sCallbacks = {
   \                     sCallbacks:
   \   00000000   ........0000       DC32 CBK_Init, 0H, 0H, CBK_Resume, CBK_NewRequest, 0H
   \              000000000000
   \              ............
   \              ....00000000
    282          
    283              CBK_Init,
    284              0, // CBK_Reset
    285              0, //CBK_Suspend,
    286              CBK_Resume,
    287              CBK_NewRequest,
    288              0  // CBK_SOF
    289          };
    290          
    291          //! \brief  USB driver instance
    292          //! \see    S_usb

   \                                 In section .rodata, align 4
    293          static const S_usb sUsb = {
   \                     sUsb:
   \   00000000   ............       DC32 sDefaultDriver, pEndpoints, 4, sCallbacks, sSetup, dState
   \              ....04000000
   \              ............
   \              ............
    294          
    295              &sDefaultDriver,
    296              pEndpoints,
    297              SER_NUM_ENDPOINTS,
    298              &sCallbacks,
    299              &sSetup,
    300              &dState
    301          };
    302          
    303          //! \brief  CDC serial class driver instance
    304          //! \see    S_ser
    305          static S_ser sSer;
    306          
    307          // Buffer for receiving data from the USB
    308          static unsigned char pUsbBuffer[USB_BUFFER_SIZE];
    309          
    310          
    311          //------------------------------------------------------------------------------
    312          //      Internal Functions
    313          //------------------------------------------------------------------------------
    314          
    315          // Interrupt Service Routines
    316          //------------------------------------------------------------------------------
    317          
    318          //------------------------------------------------------------------------------
    319          //! \brief  Handler for the USB controller interrupt
    320          //!
    321          //!         Defers the call to the USB_Handler function.
    322          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    323          void ISR_Driver(void)
    324          {
   \                     ISR_Driver:
   \   00000000   01B5               PUSH     {R0,LR}
    325              USB_Handler(&sUsb);
   \   00000002   ....               LDR      R0,??DataTable1  ;; sUsb
   \   00000004   ........           BL       USB_Handler
    326          }//_______________________ Koniec funkcji ISR_Driver ____________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    327          
    328          
    329          
    330          
    331          //------------------------------------------------------------------------------
    332          //! \brief  Handler for the VBus state change interrupt
    333          //!
    334          //! This method calls the USB_Attach function to perform the necessary
    335          //! operations.
    336          //------------------------------------------------------------------------------
    337          //#if !defined(USB_BUS_POWERED)
    338          char ForwardUSB2Serialferst=0;
    339          
    340          
    341           
    342          

   \                                 In section Debug.txt, align 4, keep-with-next
    343          void ISR_VBus(void)
    344          {
   \                     ISR_VBus:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    345            
    346            
    347            USB_Attach(&sUsb);
   \   00000002   ....               LDR      R6,??DataTable1  ;; sUsb
   \   00000004   3000               MOVS     R0,R6
   \   00000006   ........           BL       USB_Attach
    348          
    349            if ((( AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)>0)
   \   0000000A   0227               MOVS     R7,#+2
   \   0000000C   ....               LDR      R0,??DataTable2  ;; 0xfffff43c
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   3900               MOVS     R1,R7
   \   00000012   0842               TST      R0,R1
   \   00000014   2CD0               BEQ      ??ISR_VBus_0
    350            {
    351              g_PC_Connected=1;
   \   00000016   0124               MOVS     R4,#+1
   \   00000018   ....               LDR      R5,??DataTable12  ;; DateTime
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   2873               STRB     R0,[R5, #+12]
    352              
    353              if (ISSET(USB_GetState(&sUsb), USB_STATE_POWERED)) 
   \   0000001E   3000               MOVS     R0,R6
   \   00000020   ........           BL       USB_GetState
   \   00000024   3842               TST      R0,R7
   \   00000026   10D0               BEQ      ??ISR_VBus_1
    354              {
    355                MenuLevel=1;
   \   00000028   ....               LDR      R0,??DataTable4  ;; MenuLevel
   \   0000002A   0460               STR      R4,[R0, #+0]
    356                g_PC_Connected=1;
    357                MenuPaint();
   \   0000002C   ........           BL       MenuPaint
    358                RepaintLCD();
   \   00000030   ........           BL       RepaintLCD
    359                RepaintLCD();
   \   00000034   ........           BL       RepaintLCD
    360               
    361                USB_Connect(&sUsb);   
   \   00000038   3000               MOVS     R0,R6
   \   0000003A   ........           BL       USB_Connect
    362                
    363          
    364               // if (ForwardUSB2Serialferst!=1)
    365               // {
    366                  ForwardUSB2Serialferst=1; 
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   A875               STRB     R0,[R5, #+22]
    367               // }
    368                
    369                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000042   0020               MOVS     R0,#+0
   \   00000044   A865               STR      R0,[R5, #+88]
    370                g_LightLCDEnable=1;
   \   00000046   6C73               STRB     R4,[R5, #+13]
   \   00000048   0FE0               B        ??ISR_VBus_2
    371          
    372              }
    373                else
    374              {
    375          
    376                USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_1:
   \   0000004A   3000               MOVS     R0,R6
   \   0000004C   ........           BL       USB_Disconnect
    377                g_PC_Connected=0;
   \   00000050   0026               MOVS     R6,#+0
   \   00000052   3000               MOVS     R0,R6
   \   00000054   2873               STRB     R0,[R5, #+12]
    378                MenuPaint();
   \   00000056   ........           BL       MenuPaint
    379                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000005A   AE65               STR      R6,[R5, #+88]
    380                g_LightLCDEnable=1;
   \   0000005C   6C73               STRB     R4,[R5, #+13]
    381                Trap.Enable=0;
   \   0000005E   0F48               LDR      R0,??ISR_VBus_3  ;; Trap
   \   00000060   3100               MOVS     R1,R6
   \   00000062   0170               STRB     R1,[R0, #+0]
    382                Trap.Row=0;
   \   00000064   4170               STRB     R1,[R0, #+1]
    383                Trap.Col=0;
   \   00000066   8170               STRB     R1,[R0, #+2]
    384                Trap.Activ=0;
   \   00000068   C670               STRB     R6,[R0, #+3]
    385                
    386                
    387          
    388              }
    389              MenuPaint();
   \                     ??ISR_VBus_2:
   \   0000006A   ........           BL       MenuPaint
   \   0000006E   11E0               B        ??ISR_VBus_4
    390            }
    391            else
    392            {
    393              USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_0:
   \   00000070   3000               MOVS     R0,R6
   \   00000072   ........           BL       USB_Disconnect
    394              g_PC_Connected=0;
   \   00000076   0026               MOVS     R6,#+0
   \   00000078   ....               LDR      R5,??DataTable12  ;; DateTime
   \   0000007A   3000               MOVS     R0,R6
   \   0000007C   2873               STRB     R0,[R5, #+12]
    395              MenuPaint();
   \   0000007E   ........           BL       MenuPaint
    396              g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000082   AE65               STR      R6,[R5, #+88]
    397              g_LightLCDEnable=1;
   \   00000084   0120               MOVS     R0,#+1
   \   00000086   6873               STRB     R0,[R5, #+13]
    398              
    399              Trap.Enable=0;
   \   00000088   0448               LDR      R0,??ISR_VBus_3  ;; Trap
   \   0000008A   3100               MOVS     R1,R6
   \   0000008C   0170               STRB     R1,[R0, #+0]
    400              Trap.Row=0;
   \   0000008E   4170               STRB     R1,[R0, #+1]
    401              Trap.Col=0;
   \   00000090   8170               STRB     R1,[R0, #+2]
    402              Trap.Activ=0;
   \   00000092   C670               STRB     R6,[R0, #+3]
    403              
    404          
    405            } 
    406          
    407          }//_____________________________________________________________________________
   \                     ??ISR_VBus_4:
   \   00000094   F8BC               POP      {R3-R7}
   \   00000096   01BC               POP      {R0}
   \   00000098   0047               BX       R0               ;; return
   \   0000009A   C046               Nop      
   \                     ??ISR_VBus_3:
   \   0000009C   ........           DC32     Trap
    408          //#endif // !defined(USB_BUS_POWERED)
    409          
    410          
    411          
    412          
    413          
    414          // Callbacks
    415          //------------------------------------------------------------------------------
    416          //------------------------------------------------------------------------------
    417          //! \brief  Callback invoked during the initialization of the USB driver
    418          //!
    419          //!         Configures and enables USB controller and VBus monitoring interrupts
    420          //! \param  pUsb    Pointer to a S_usb instance
    421          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    422          static void CBK_Init(const S_usb *pUsb)
    423          {
   \                     CBK_Init:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
    424          
    425            TRACE_INFO("\n\rInicjalizacja przerwania VBUS od podlaczenia USB  \n\r" ); 
    426              
    427              // Configure and enable the USB controller interrupt
    428              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    429                                    USB_GetDriverID(pUsb),
    430                                    USB_CON_PRIOR,
    431                                    0, //AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    432                                    ISR_Driver);
   \   00000004   ........           BL       USB_GetDriverID
   \   00000008   ....               LDR      R5,??DataTable6  ;; 0xfffff000
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0F49               LDR      R1,??CBK_Init_0  ;; ISR_Driver
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   0522               MOVS     R2,#+5
   \   00000014   0100               MOVS     R1,R0
   \   00000016   2800               MOVS     R0,R5
   \   00000018   ........           BL       AT91F_AIC_ConfigureIt
   \   0000001C   02B0               ADD      SP,SP,#+8
    433          
    434              AT91F_AIC_EnableIt(AT91C_BASE_AIC, USB_GetDriverID(pUsb));
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       USB_GetDriverID
   \   00000024   0100               MOVS     R1,R0
   \   00000026   2800               MOVS     R0,R5
   \   00000028   ........           BL       AT91F_AIC_EnableIt
    435          
    436          //#ifndef USB_BUS_POWERED
    437             
    438              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   0000002C   0221               MOVS     R1,#+2
   \   0000002E   ....               LDR      R0,??DataTable7  ;; 0xfffff400
   \   00000030   ........           BL       AT91F_PIO_CfgInput
    439              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   00000034   ....               LDR      R0,??DataTable8  ;; 0xfffff460
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   0160               STR      R1,[R0, #+0]
    440             
    441              // Configure VBus monitoring
    442              BRD_ConfigureVBus(USB_GetDriverInterface(pUsb));
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USB_GetDriverInterface
   \   00000040   ........           BL       BRD_ConfigureVBus
    443          
    444            /*
    445              // Configure and enable the Vbus detection interrupt
    446              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    447                                    AT91C_ID_VBUS,
    448                                    USB_CON_PRIOR, //AT91C_AIC_PRIOR_LOWEST,
    449                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    450                                    ISR_VBus);
    451          
    452              
    453              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
    454              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
    455              */
    456              
    457              
    458          /*
    459          #else
    460              // Power up the USB controller
    461              USB_Attach(pUsb);
    462            
    463          #endif
    464          */
    465          
    466          }//_____________________________________________________________________________
   \   00000044   38BC               POP      {R3-R5}
   \   00000046   01BC               POP      {R0}
   \   00000048   0047               BX       R0               ;; return
   \   0000004A   C046               Nop      
   \                     ??CBK_Init_0:
   \   0000004C   ........           DC32     ISR_Driver
    467          
    468          
    469          
    470          
    471          
    472          
    473          
    474          
    475          
    476          
    477          
    478          
    479          
    480          
    481          
    482          
    483          
    484          
    485          
    486          
    487          
    488          
    489          
    490          //------------------------------------------------------------------------------
    491          //! \brief  Callback invoked when the device becomes suspended
    492          //!
    493          //!         Disables LEDs (if they are used) and then puts the device into
    494          //!         low-power mode. When traces are used, the device does not enter
    495          //!         low-power mode to avoid losing some outputs.
    496          //! \param  pUsb    Pointer to a S_usb instance
    497          //------------------------------------------------------------------------------
    498          static void CBK_Suspend(const S_usb *pUsb)
    499          {
    500          
    501          #if defined(NOTRACES)
    502              DEV_Suspend();
    503          #endif
    504          }//_____________________________________________________________________________
    505          
    506          
    507          
    508          
    509          
    510          
    511          //------------------------------------------------------------------------------
    512          //! \brief  Callback invoked when the device leaves the suspended state
    513          //!
    514          //!         The device is first returned to a normal operating mode and LEDs are
    515          //!         re-enabled. When traces are used, the device does not enter
    516          //!         low-power mode to avoid losing some outputs.
    517          //! \param  pUsb    Pointer to a S_usb instance
    518          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    519          static void CBK_Resume(const S_usb *pUsb)
    520          {
   \                     CBK_Resume:
   \   00000000   01B5               PUSH     {R0,LR}
    521          #if defined(NOTRACES)
    522              DEV_Resume();
   \   00000002   ........           BL       DEV_Resume
    523          #endif
    524          
    525          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    526          
    527          
    528          
    529          
    530          
    531          
    532          //------------------------------------------------------------------------------
    533          //! \brief  Callback invoked when a new SETUP request is received
    534          //!
    535          //!         The new request if forwarded to the standard request handler,
    536          //!         which performs the enumeration of the device.
    537          //! \param  pUsb   Pointer to a S_usb instance
    538          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    539          static void CBK_NewRequest(const S_usb *pUsb)
    540          {
   \                     CBK_NewRequest:
   \   00000000   01B5               PUSH     {R0,LR}
    541              SER_RequestHandler(&sSer);
   \   00000002   0348               LDR      R0,??CBK_NewRequest_0  ;; DateTime + 132
   \   00000004   ........           BL       SER_RequestHandler
    542          }//_____________________________________________________________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
   \   0000000E   C046               Nop      
   \                     ??CBK_NewRequest_0:
   \   00000010   ........           DC32     DateTime + 132
    543          
    544          
    545          
    546          
    547          
    548          
    549          //------------------------------------------------------------------------------
    550          //! \brief  Callback invoked when a Reset request is received
    551          //!
    552          //! \param  pUsb   Pointer to a S_usb instance
    553          //------------------------------------------------------------------------------
    554          //static void CBK_Reset(const S_usb *pUsb)
    555          //{
    556              // Put your reset handler here
    557          //}//_____________________________________________________________________________
    558          
    559          
    560          
    561          
    562          //------------------------------------------------------------------------------
    563          //! \brief  Callback invoked when a SOF is received
    564          //!
    565          //! \param  pUsb   Pointer to a S_usb instance
    566          //------------------------------------------------------------------------------
    567          //static void CBK_SOF(const S_usb *pUsb)
    568          //{
    569              // Put your SOF handler here
    570          //}//_____________________________________________________________________________
    571          
    572          
    573          
    574          
    575          
    576          // Other functions
    577          //------------------------------------------------------------------------------
    578          //------------------------------------------------------------------------------
    579          //! \brief  Forwards data receiving from the USB host through the USART
    580          //!
    581          //!         This function operates asynchronously.
    582          //! \param  pBuffer           Must be 0 when function is first called
    583          //! \param  bStatus           Same as above
    584          //! \param  dBytesTransferred Same as above
    585          //! \param  dBytesRemaining   Same as above
    586          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    587          static void ForwardUSB2Serial(unsigned char *pBuffer,
    588                                        unsigned char bStatus,
    589                                        unsigned int dBytesTransferred,
    590                                        unsigned int dBytesRemaining)
    591          {
   \                     ForwardUSB2Serial:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    592              //Zmienne lokalne ----------------------------------------------------
    593                      static char buff_tx[1000];                                          //Bufor danych wysy³anych do USB
    594                   
    595                      unsigned int rozmiar_tx=0;                                          //Iloœæ danych do wys³ania przez USB
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0093               STR      R3,[SP, #+0]
    596                    //---------------------koniec zmiennych lokalnych--------------------
    597                  
    598          
    599              if (pBuffer != 0) {                                                                   
   \   00000006   0028               CMP      R0,#+0
   \   00000008   15D0               BEQ      ??ForwardUSB2Serial_0
    600                  if (bStatus != SER_STATUS_SUCCESS) 
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   13D1               BNE      ??ForwardUSB2Serial_0
    601                  {
    602                    
    603                    TRACE_WARNING("\n\r W: ForwardUSB2Serial: B³¹d transmisji USB\n\r");
    604                  }
    605                  else 
    606                  {
    607          
    608                      pBuffer[dBytesTransferred] = 0;
   \   0000000E   8354               STRB     R3,[R0, R2]
    609                     komunikcja_RSwin((char *)pBuffer,buff_tx,&rozmiar_tx);
   \   00000010   ....               LDR      R4,??DataTable12  ;; DateTime
   \   00000012   CC21               MOVS     R1,#+204
   \   00000014   4900               LSLS     R1,R1,#+1        ;; #+408
   \   00000016   6518               ADDS     R5,R4,R1
   \   00000018   6A46               MOV      R2,SP
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   ........           BL       komunikcja_RSwin
    610                     SER_Write(&sSer, buff_tx,rozmiar_tx,0, 0);                                                                        
   \   00000020   82B0               SUB      SP,SP,#+8
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   0090               STR      R0,[SP, #+0]
   \   00000026   0300               MOVS     R3,R0
   \   00000028   029A               LDR      R2,[SP, #+8]
   \   0000002A   2900               MOVS     R1,R5
   \   0000002C   8434               ADDS     R4,R4,#+132
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       SER_Write
   \   00000034   02B0               ADD      SP,SP,#+8
    611                  }
    612              }
    613          
    614          
    615              do {
    616          
    617                  bStatus = SER_Read(&sSer,
    618                                     pUsbBuffer,
    619              
    620                                     USB_BUFFER_SIZE,
    621                                     (Callback_f) ForwardUSB2Serial,
    622                                     pUsbBuffer);
    623              }
    624              while (bStatus != SER_STATUS_SUCCESS);
   \                     ??ForwardUSB2Serial_0:
   \   00000036   ....               LDR      R4,??DataTable12  ;; DateTime
   \   00000038   2100               MOVS     R1,R4
   \   0000003A   9831               ADDS     R1,R1,#+152
   \   0000003C   82B0               SUB      SP,SP,#+8
   \   0000003E   0091               STR      R1,[SP, #+0]
   \   00000040   064B               LDR      R3,??ForwardUSB2Serial_1  ;; ForwardUSB2Serial
   \   00000042   8022               MOVS     R2,#+128
   \   00000044   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000046   8434               ADDS     R4,R4,#+132
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       SER_Read
   \   0000004E   02B0               ADD      SP,SP,#+8
   \   00000050   0028               CMP      R0,#+0
   \   00000052   F0D1               BNE      ??ForwardUSB2Serial_0
    625           
    626          }//_____________________________________________________________________________
   \   00000054   38BC               POP      {R3-R5}
   \   00000056   01BC               POP      {R0}
   \   00000058   0047               BX       R0               ;; return
   \   0000005A   C046               Nop      
   \                     ??ForwardUSB2Serial_1:
   \   0000005C   ........           DC32     ForwardUSB2Serial
    627          
    628          
    629          
    630          
    631          
    632          
    633          //-----------------------------------------------------------------------------
    634          //!  Nazwa funkcji :    Delay
    635          //!  Funkcja opóŸnienia
    636          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    637          void Delay (unsigned long a) 
    638          { 
   \                     Delay:
   \   00000000   01B5               PUSH     {R0,LR}
    639              while (--a!=0);   AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Delay_0:
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   FDD1               BNE      ??Delay_0
   \   00000006   ....               LDR      R0,??DataTable11  ;; 0xfffffd40
   \   00000008   ........           BL       AT91F_WDTRestart
    640          }//_______________________ Koniec funkcji opóŸnienia ____________________________
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return
    641          
    642          
    643          
    644          

   \                                 In section .bss, align 4
    645          char *memory_read;
   \                     memory_read:
   \   00000000                      DS8 4
    646          
    647          //-----------------------------------------------------------------------------
    648          //! Nazwa funkcji :    InitFramework
    649          //! Funkcja ustawieñ wstêpnych systemu
    650          //-----------------------------------------------------------------------------
    651          int tProgramTabSize=ProgramTabSize;
    652          char *SourRam;
    653          unsigned int  stop=2000;
    654          unsigned int  siz;

   \                                 In section Debug.txt, align 4, keep-with-next
    655          void InitFramework (void) 
    656          { 
   \                     InitFramework:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    657             
    658           //  TRACE_INFO("\n\ InitFramework \n\r");
    659              
    660          
    661          
    662                                            FlashProgramOfset=FlashProgram_A_Ofset;
   \   00000002   ....               LDR      R2,??DataTable12  ;; DateTime
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   1065               STR      R0,[R2, #+80]
    663                                 
    664                                            
    665                                          //  TRACE_INFO("\n\r---  Strona flash = A  \n\r" ); 
    666          
    667              
    668              
    669          //    TRACE_INFO(" ---  Przepisuje program z FLASH do RAM     -Ofset : %d\n\r",AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    670              //przepisz program z flash do ram
    671              char *memory_read_prog;
    672              memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
    673          
    674            
    675               SourRam= (char*)&gProg;
   \   00000008   ....               LDR      R1,??DataTable13  ;; gProg
   \   0000000A   1166               STR      R1,[R2, #+96]
    676          
    677             
    678              siz=sizeof(gProg);
   \   0000000C   ....               LDR      R3,??DataTable14  ;; 0xc670
   \   0000000E   5366               STR      R3,[R2, #+100]
    679              for (unsigned int k = 0 ; k <siz; k++) 
   \   00000010   0300               MOVS     R3,R0
   \   00000012   04E0               B        ??InitFramework_0
    680              {      
    681                    SourRam[k]=memory_read_prog[k]; 
   \                     ??InitFramework_1:
   \   00000014   146E               LDR      R4,[R2, #+96]
   \   00000016   ....               LDR      R5,??DataTable15  ;; 0x130100
   \   00000018   ED5C               LDRB     R5,[R5, R3]
   \   0000001A   E554               STRB     R5,[R4, R3]
    682              }
   \   0000001C   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_0:
   \   0000001E   546E               LDR      R4,[R2, #+100]
   \   00000020   A342               CMP      R3,R4
   \   00000022   F7D3               BCC      ??InitFramework_1
    683              
    684             
    685            
    686              for (char i=0; i<ScreenNr; i++) 
   \   00000024   0300               MOVS     R3,R0
   \   00000026   03E0               B        ??InitFramework_2
    687             {
    688               //je¿eli ustawienie automatyczne temperatury
    689               if (gProg.Screen[i].Thermo.AutoOn) 
    690               {
    691                 
    692                   //je¿eli dzieñ typu pierwszego
    693                   if (((gProg.Screen[i].Thermo.Week>>DateTime.DayOfWeek) & 0x1)==1)       
    694                   {
    695                      if (((gProg.Screen[i].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    696                      {                 
    697                        //ustaw wy¿sz¹ temperaturê
    698                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    699                        {
    700                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
    701                        }else{
    702                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    703                        }
    704                      }else{
    705                        //ustaw ni¿sz¹ temperaturê
    706                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    707                        {
    708                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    709                        }else{
    710                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
   \                     ??InitFramework_3:
   \   00000028   2C81               STRH     R4,[R5, #+8]
    711                        }
   \                     ??InitFramework_4:
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \   0000002C   1B06               LSLS     R3,R3,#+24
   \   0000002E   1B0E               LSRS     R3,R3,#+24
   \                     ??InitFramework_2:
   \   00000030   1C00               MOVS     R4,R3
   \   00000032   082C               CMP      R4,#+8
   \   00000034   27D2               BCS      ??InitFramework_5
   \   00000036   A025               MOVS     R5,#+160
   \   00000038   6C43               MULS     R4,R5,R4
   \   0000003A   0C19               ADDS     R4,R1,R4
   \   0000003C   ....               LDR      R5,??DataTable16  ;; 0xbc26
   \   0000003E   6519               ADDS     R5,R4,R5
   \   00000040   2E78               LDRB     R6,[R5, #+0]
   \   00000042   002E               CMP      R6,#+0
   \   00000044   F1D0               BEQ      ??InitFramework_4
   \   00000046   EE78               LDRB     R6,[R5, #+3]
   \   00000048   9779               LDRB     R7,[R2, #+6]
   \   0000004A   3E41               ASRS     R6,R6,R7
   \   0000004C   F607               LSLS     R6,R6,#+31
   \   0000004E   ECD5               BPL      ??InitFramework_4
   \   00000050   ....               LDR      R6,??DataTable17  ;; 0xbc30
   \   00000052   A459               LDR      R4,[R4, R6]
   \   00000054   D678               LDRB     R6,[R2, #+3]
   \   00000056   F440               LSRS     R4,R4,R6
   \   00000058   E407               LSLS     R4,R4,#+31
   \   0000005A   0BD5               BPL      ??InitFramework_6
   \   0000005C   0624               MOVS     R4,#+6
   \   0000005E   2C5F               LDRSH    R4,[R5, R4]
   \   00000060   0426               MOVS     R6,#+4
   \   00000062   AE5F               LDRSH    R6,[R5, R6]
   \   00000064   B442               CMP      R4,R6
   \   00000066   02DA               BGE      ??InitFramework_7
   \   00000068   AC88               LDRH     R4,[R5, #+4]
   \   0000006A   2C81               STRH     R4,[R5, #+8]
   \   0000006C   DDE7               B        ??InitFramework_4
   \                     ??InitFramework_7:
   \   0000006E   EC88               LDRH     R4,[R5, #+6]
   \   00000070   2C81               STRH     R4,[R5, #+8]
   \   00000072   DAE7               B        ??InitFramework_4
   \                     ??InitFramework_6:
   \   00000074   0424               MOVS     R4,#+4
   \   00000076   2C5F               LDRSH    R4,[R5, R4]
   \   00000078   0626               MOVS     R6,#+6
   \   0000007A   AE5F               LDRSH    R6,[R5, R6]
   \   0000007C   A642               CMP      R6,R4
   \   0000007E   D3DA               BGE      ??InitFramework_3
   \   00000080   EC88               LDRH     R4,[R5, #+6]
   \   00000082   2C81               STRH     R4,[R5, #+8]
   \   00000084   D1E7               B        ??InitFramework_4
    712                      }
    713                   }
    714               }
    715             }
    716           
    717              
    718           
    719              //koniec
    720             
    721             
    722             
    723             
    724             //czyszczenie zmiennych programowych
    725                for (int LineNr=0; LineNr<MaxPrcLines; LineNr++)
   \                     ??InitFramework_5:
   \   00000086   0200               MOVS     R2,R0
   \   00000088   0DE0               B        ??InitFramework_8
    726                {
    727                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
    728                  {
    729                    gProg.Line[LineNr].Proc[PrcInLine].LastIn=0;
   \                     ??InitFramework_9:
   \   0000008A   1824               MOVS     R4,#+24
   \   0000008C   5C43               MULS     R4,R3,R4
   \   0000008E   F025               MOVS     R5,#+240
   \   00000090   5543               MULS     R5,R2,R5
   \   00000092   4D19               ADDS     R5,R1,R5
   \   00000094   2C19               ADDS     R4,R5,R4
   \   00000096   2834               ADDS     R4,R4,#+40
   \   00000098   0500               MOVS     R5,R0
   \   0000009A   2570               STRB     R5,[R4, #+0]
    730                    gProg.Line[LineNr].Proc[PrcInLine].Out=0;
   \   0000009C   6580               STRH     R5,[R4, #+2]
    731                  }
   \   0000009E   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_10:
   \   000000A0   0A2B               CMP      R3,#+10
   \   000000A2   F2DB               BLT      ??InitFramework_9
   \   000000A4   521C               ADDS     R2,R2,#+1
   \                     ??InitFramework_8:
   \   000000A6   C82A               CMP      R2,#+200
   \   000000A8   01DA               BGE      ??InitFramework_11
   \   000000AA   0300               MOVS     R3,R0
   \   000000AC   F8E7               B        ??InitFramework_10
    732                }
    733           
    734          
    735                //Ustawienie wartoœci analogowych wêz³ów na niewiarygodne (0x8AAA)
    736                for (char NN=1; NN<NumberNeurons; NN++)
   \                     ??InitFramework_11:
   \   000000AE   0121               MOVS     R1,#+1
   \   000000B0   12E0               B        ??InitFramework_12
    737                {
    738                  for (char NR=0; NR<NumberReg; NR++)
    739                  {
    740                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   \                     ??InitFramework_13:
   \   000000B2   5B00               LSLS     R3,R3,#+1
   \   000000B4   0C00               MOVS     R4,R1
   \   000000B6   1425               MOVS     R5,#+20
   \   000000B8   6C43               MULS     R4,R5,R4
   \   000000BA   ....               LDR      R5,??DataTable18  ;; MainStage
   \   000000BC   2C19               ADDS     R4,R5,R4
   \   000000BE   E318               ADDS     R3,R4,R3
   \   000000C0   A033               ADDS     R3,R3,#+160
   \   000000C2   ....               LDR      R4,??DataTable19  ;; 0xffff8aaa
   \   000000C4   1C80               STRH     R4,[R3, #+0]
    741                  }
   \   000000C6   521C               ADDS     R2,R2,#+1
   \   000000C8   1206               LSLS     R2,R2,#+24
   \   000000CA   120E               LSRS     R2,R2,#+24
   \                     ??InitFramework_14:
   \   000000CC   1300               MOVS     R3,R2
   \   000000CE   0A2B               CMP      R3,#+10
   \   000000D0   EFD3               BCC      ??InitFramework_13
   \   000000D2   491C               ADDS     R1,R1,#+1
   \   000000D4   0906               LSLS     R1,R1,#+24
   \   000000D6   090E               LSRS     R1,R1,#+24
   \                     ??InitFramework_12:
   \   000000D8   0A00               MOVS     R2,R1
   \   000000DA   232A               CMP      R2,#+35
   \   000000DC   01D2               BCS      ??InitFramework_15
   \   000000DE   0200               MOVS     R2,R0
   \   000000E0   F4E7               B        ??InitFramework_14
    742                }
    743               
    744          }//_______________________ Koniec funkcji InitFramework ____________________________
   \                     ??InitFramework_15:
   \   000000E2   F8BC               POP      {R3-R7}
   \   000000E4   01BC               POP      {R0}
   \   000000E6   0047               BX       R0               ;; return
    745          
    746          
    747          
    748          
    749          
    750          
    751          //char gLcdLightDuty=2;

   \                                 In section Debug.txt, align 4, keep-with-next
    752          void Timer_10us(void)                        //timer isr 
    753          { 
    754              unsigned int dummy0 = AT91C_BASE_TC1->TC_SR;      
   \                     Timer_10us:
   \   00000000   0148               LDR      R0,??Timer_10us_0  ;; 0xfffa0060
   \   00000002   0068               LDR      R0,[R0, #+0]
    755            
    756           /*
    757            
    758            //PWM podœwietlenia
    759            static char LcdLightCounterPWM=6;        //licznik podœwietlenia
    760            
    761            
    762          AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD); 
    763            
    764            /*
                   ^
Warning[Pe009]: nested comment is not allowed
    765            static long long ScreenSaverCounter=0;
    766            if (g_LightLCDEnable)
    767            {
    768              AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);    
    769              ScreenSaverCounter=0;
    770            }else{
    771            
    772              if (LcdLightCounterPWM<6)
    773            {
    774              LcdLightCounterPWM++;
    775             
    776            }else{
    777              LcdLightCounterPWM=0; 
    778              
    779              if ((ScreenSaverCounter<500000) && (g_ScreenSever_On) ) 
    780              {
    781                ScreenSaverCounter++;  
    782                AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    783              }
    784              if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))   AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    785            }
    786            if  (LcdLightCounterPWM==gLcdLightDuty) AT91F_PIO_ClearOutput(LCD_PIO,(unsigned int)LightLCD);
    787            }
    788            */
    789            
    790          
    791            //----koniec PWM podœwietlenia ------
    792            
    793          
    794            
    795          }//_____________________________________________________________________________
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??Timer_10us_0:
   \   00000008   6000FAFF           DC32     0xfffa0060
    796          
    797          
    798          
    799          
    800          
    801          
    802          
    803          
    804          //-----------------------------------------------------------------------------
    805          //!  Nazwa funkcji :    Timer_1_Setup
    806          //!  Funkcja inicjalizacji Timer1 - 1ms
    807          //-----------------------------------------------------------------------------
    808          //! 
    809          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    810          void Timer_10us_Setup(void) 
    811          { 
    812          
    813            
    814           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
    815           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
    816           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC1] = (unsigned int)Timer_10us;  //set AIC             
   \                     Timer_10us_Setup:
   \   00000000   1148               LDR      R0,??Timer_10us_Setup_0  ;; 0xfffff0b4
   \   00000002   1249               LDR      R1,??Timer_10us_Setup_0+0x4  ;; Timer_10us
   \   00000004   0160               STR      R1,[R0, #+0]
    817           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC1] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10US_PRIOR); 
   \   00000006   1248               LDR      R0,??Timer_10us_Setup_0+0x8  ;; 0xfffff034
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0160               STR      R1,[R0, #+0]
    818           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC1);      //enable clock 
   \   0000000C   4803               LSLS     R0,R1,#+13
   \   0000000E   ....               LDR      R1,??DataTable20  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
    819           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   ....               LDR      R1,??DataTable21  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
    820           //no external clocks 
    821           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   ....               LDR      R1,??DataTable22  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
    822           AT91C_BASE_TC1->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   0D49               LDR      R1,??Timer_10us_Setup_0+0xC  ;; 0xfffa0040
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
    823           AT91C_BASE_TC1->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0C49               LDR      R1,??Timer_10us_Setup_0+0x10  ;; 0xfffa0044
   \   00000026   ....               LDR      R2,??DataTable23  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
    824           //clock: MCK/1024  = 48054841/ DIV
    825           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
    826           //! DIV5 - 1024
    827           //! DIV4 - 128
    828           //! DIV3 - 32
    829           //! DIV2 - 8
    830           
    831           //AT91C_BASE_TC3->TC_RC = 5090;                  //1ms  (z wyliczeñ 6007)
    832           //AT91C_BASE_TC0->TC_RC = 5286;                    //880us 
    833           AT91C_BASE_TC1->TC_RC = 200;                    //440us  
   \   0000002A   0C49               LDR      R1,??Timer_10us_Setup_0+0x14  ;; 0xfffa005c
   \   0000002C   C822               MOVS     R2,#+200
   \   0000002E   0A60               STR      R2,[R1, #+0]
    834           AT91C_BASE_TC1->TC_IER = AT91C_TC_CPCS;          //enable RC compare int 
   \   00000030   0B49               LDR      R1,??Timer_10us_Setup_0+0x18  ;; 0xfffa0064
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
    835           AT91C_BASE_TC1->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   0B49               LDR      R1,??Timer_10us_Setup_0+0x1C  ;; 0xfffa0068
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
    836           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC1);       //enable int 
   \   0000003C   ....               LDR      R1,??DataTable24  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
    837           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC1);       //clear int 
   \   00000040   ....               LDR      R1,??DataTable25  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
    838           
    839           
    840           //AT91C_BASE_TC1->TC_CMR |= 1<<6;
    841          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_10us_Setup_0:
   \   00000048   B4F0FFFF           DC32     0xfffff0b4
   \   0000004C   ........           DC32     Timer_10us
   \   00000050   34F0FFFF           DC32     0xfffff034
   \   00000054   4000FAFF           DC32     0xfffa0040
   \   00000058   4400FAFF           DC32     0xfffa0044
   \   0000005C   5C00FAFF           DC32     0xfffa005c
   \   00000060   6400FAFF           DC32     0xfffa0064
   \   00000064   6800FAFF           DC32     0xfffa0068
    842          
    843          
    844          
    845          

   \                                 In section Debug.txt, align 4, keep-with-next
    846          void TimetableExecute(void)
    847          {
   \                     TimetableExecute:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   04E0               B        ??TimetableExecute_0
    848          
    849            
    850            __Timetable *Timetable=AT91C_IFLASH_MEM->Config.Timetable;
    851            
    852            static  char Out[ScreenNr][TimetableTasks];
    853            char Hour;
    854            for (char sc=0; sc<ScreenNr; sc++)
   \                     ??TimetableExecute_1:
   \   00000008   0098               LDR      R0,[SP, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   0006               LSLS     R0,R0,#+24
   \   0000000E   000E               LSRS     R0,R0,#+24
   \   00000010   0090               STR      R0,[SP, #+0]
   \                     ??TimetableExecute_0:
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   0006               LSLS     R0,R0,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0828               CMP      R0,#+8
   \   0000001A   00D3               BCC      .+4
   \   0000001C   ACE0               B        ??TimetableExecute_2
    855            {
    856               for (char tn=0; tn<4; tn++)
   \   0000001E   0024               MOVS     R4,#+0
   \   00000020   56E0               B        ??TimetableExecute_3
    857               {
    858                   
    859          
    860                  
    861                   if (Timetable[sc].Task[tn].Enable==1) 
    862                   {    
    863                     
    864                             if (gProg.Screen[sc].Timetable.Min1h)
    865                             {
    866                               if(Timetable[sc].Task[tn].Hour>0) {
    867                                 Hour=Timetable[sc].Task[tn].Hour-1;
    868                               }else{
    869                                 Hour=23;
   \                     ??TimetableExecute_4:
   \   00000022   1722               MOVS     R2,#+23
   \   00000024   00E0               B        ??TimetableExecute_5
    870                               }
    871                             }else{
    872                               Hour=Timetable[sc].Task[tn].Hour;
   \                     ??TimetableExecute_6:
   \   00000026   C278               LDRB     R2,[R0, #+3]
    873                             }
    874                  
    875                     
    876                       if ((Hour==DateTime.Hour)&& (Timetable[sc].Task[tn].Minute==DateTime.Minute) && ((Timetable[sc].Task[tn].Week) & (1<<DateTime.DayOfWeek-1))  && (DateTime.Second==0))
   \                     ??TimetableExecute_5:
   \   00000028   5549               LDR      R1,??TimetableExecute_7  ;; DateTime
   \   0000002A   CB78               LDRB     R3,[R1, #+3]
   \   0000002C   1206               LSLS     R2,R2,#+24
   \   0000002E   120E               LSRS     R2,R2,#+24
   \   00000030   9A42               CMP      R2,R3
   \   00000032   00D0               BEQ      .+4
   \   00000034   96E0               B        ??TimetableExecute_8
   \   00000036   0279               LDRB     R2,[R0, #+4]
   \   00000038   0B79               LDRB     R3,[R1, #+4]
   \   0000003A   9A42               CMP      R2,R3
   \   0000003C   00D0               BEQ      .+4
   \   0000003E   91E0               B        ??TimetableExecute_8
   \   00000040   8078               LDRB     R0,[R0, #+2]
   \   00000042   0122               MOVS     R2,#+1
   \   00000044   8B79               LDRB     R3,[R1, #+6]
   \   00000046   5B1E               SUBS     R3,R3,#+1
   \   00000048   9A40               LSLS     R2,R2,R3
   \   0000004A   1042               TST      R0,R2
   \   0000004C   00D1               BNE      .+4
   \   0000004E   89E0               B        ??TimetableExecute_8
   \   00000050   4879               LDRB     R0,[R1, #+5]
   \   00000052   0028               CMP      R0,#+0
   \   00000054   00D0               BEQ      .+4
   \   00000056   85E0               B        ??TimetableExecute_8
    877                       {
    878                         if (gProg.Screen[sc].Timetable.ActionType==2)
   \   00000058   A800               LSLS     R0,R5,#+2
   \   0000005A   4A49               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   0000005C   0818               ADDS     R0,R1,R0
   \   0000005E   8019               ADDS     R0,R0,R6
   \   00000060   0190               STR      R0,[SP, #+4]
   \   00000062   0078               LDRB     R0,[R0, #+0]
   \   00000064   B978               LDRB     R1,[R7, #+2]
   \   00000066   0229               CMP      R1,#+2
   \   00000068   50D1               BNE      ??TimetableExecute_9
    879                         {
    880                           if (Out[sc][tn])
   \   0000006A   0028               CMP      R0,#+0
   \   0000006C   2DD0               BEQ      ??TimetableExecute_10
    881                           {
    882                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \                     ??TimetableExecute_11:
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   3856               LDRSB    R0,[R7, R0]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   0ED5               BPL      ??TimetableExecute_12
    883                             {
    884                                Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
   \   00000076   7878               LDRB     R0,[R7, #+1]
   \   00000078   4349               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000007A   0200               MOVS     R2,R0
   \   0000007C   D210               ASRS     R2,R2,#+3
   \   0000007E   8A18               ADDS     R2,R1,R2
   \   00000080   1378               LDRB     R3,[R2, #+0]
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   0700               MOVS     R7,R0
   \   00000086   FF08               LSRS     R7,R7,#+3
   \   00000088   FF00               LSLS     R7,R7,#+3
   \   0000008A   C01B               SUBS     R0,R0,R7
   \   0000008C   8140               LSLS     R1,R1,R0
   \   0000008E   8B43               BICS     R3,R3,R1
   \   00000090   1370               STRB     R3,[R2, #+0]
   \   00000092   15E0               B        ??TimetableExecute_13
    885                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_12:
   \   00000094   0022               MOVS     R2,#+0
   \   00000096   7978               LDRB     R1,[R7, #+1]
   \   00000098   8C46               MOV      R12,R1
   \   0000009A   D721               MOVS     R1,#+215
   \   0000009C   8900               LSLS     R1,R1,#+2        ;; #+860
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   3856               LDRSB    R0,[R7, R0]
   \   000000A2   1423               MOVS     R3,#+20
   \   000000A4   5843               MULS     R0,R3,R0
   \   000000A6   394B               LDR      R3,??TimetableExecute_7+0xC  ;; MainStage
   \   000000A8   1818               ADDS     R0,R3,R0
   \   000000AA   4018               ADDS     R0,R0,R1
   \   000000AC   6146               MOV      R1,R12
    886                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);  
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   000000AE   ........           BL       PortStageSet
    887                                MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
   \   000000B2   3748               LDR      R0,??TimetableExecute_7+0x10  ;; 0x619
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   7956               LDRSB    R1,[R7, R1]
   \   000000B8   344A               LDR      R2,??TimetableExecute_7+0xC  ;; MainStage
   \   000000BA   5118               ADDS     R1,R2,R1
   \   000000BC   1422               MOVS     R2,#+20
   \   000000BE   0A54               STRB     R2,[R1, R0]
    888                             }
    889                             Out[sc][tn]=0;
   \                     ??TimetableExecute_13:
   \   000000C0   A800               LSLS     R0,R5,#+2
   \   000000C2   3049               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   000000C4   0818               ADDS     R0,R1,R0
   \   000000C6   0021               MOVS     R1,#+0
   \   000000C8   8155               STRB     R1,[R0, R6]
    890                           }
    891                         }else{
   \                     ??TimetableExecute_10:
   \   000000CA   641C               ADDS     R4,R4,#+1
   \   000000CC   2406               LSLS     R4,R4,#+24
   \   000000CE   240E               LSRS     R4,R4,#+24
   \                     ??TimetableExecute_3:
   \   000000D0   2000               MOVS     R0,R4
   \   000000D2   0428               CMP      R0,#+4
   \   000000D4   98D2               BCS      ??TimetableExecute_1
   \   000000D6   2600               MOVS     R6,R4
   \   000000D8   009D               LDR      R5,[SP, #+0]
   \   000000DA   2D06               LSLS     R5,R5,#+24
   \   000000DC   2D0E               LSRS     R5,R5,#+24
   \   000000DE   B000               LSLS     R0,R6,#+2
   \   000000E0   1121               MOVS     R1,#+17
   \   000000E2   6943               MULS     R1,R5,R1
   \   000000E4   2B4A               LDR      R2,??TimetableExecute_7+0x14  ;; 0x13d830
   \   000000E6   5118               ADDS     R1,R2,R1
   \   000000E8   0818               ADDS     R0,R1,R0
   \   000000EA   4178               LDRB     R1,[R0, #+1]
   \   000000EC   0129               CMP      R1,#+1
   \   000000EE   ECD1               BNE      ??TimetableExecute_10
   \   000000F0   2949               LDR      R1,??TimetableExecute_7+0x18  ;; 0xbc24
   \   000000F2   A022               MOVS     R2,#+160
   \   000000F4   6A43               MULS     R2,R5,R2
   \   000000F6   294B               LDR      R3,??TimetableExecute_7+0x1C  ;; gProg
   \   000000F8   9A18               ADDS     R2,R3,R2
   \   000000FA   5718               ADDS     R7,R2,R1
   \   000000FC   F978               LDRB     R1,[R7, #+3]
   \   000000FE   0029               CMP      R1,#+0
   \   00000100   91D0               BEQ      ??TimetableExecute_6
   \   00000102   C178               LDRB     R1,[R0, #+3]
   \   00000104   0029               CMP      R1,#+0
   \   00000106   8CD0               BEQ      ??TimetableExecute_4
   \   00000108   4A1E               SUBS     R2,R1,#+1
   \   0000010A   8DE7               B        ??TimetableExecute_5
    892                           
    893                           if (Out[sc][tn]==0) {
   \                     ??TimetableExecute_9:
   \   0000010C   0028               CMP      R0,#+0
   \   0000010E   25D1               BNE      ??TimetableExecute_14
    894                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \   00000110   3856               LDRSB    R0,[R7, R0]
   \   00000112   0028               CMP      R0,#+0
   \   00000114   0ED5               BPL      ??TimetableExecute_15
    895                             {
    896                                Variables[gProg.Screen[sc].Timetable.ActorPort/8] |= 1<<(gProg.Screen[sc].Timetable.ActorPort%8);
   \   00000116   7878               LDRB     R0,[R7, #+1]
   \   00000118   1B49               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000011A   0200               MOVS     R2,R0
   \   0000011C   D210               ASRS     R2,R2,#+3
   \   0000011E   8918               ADDS     R1,R1,R2
   \   00000120   0A78               LDRB     R2,[R1, #+0]
   \   00000122   0123               MOVS     R3,#+1
   \   00000124   0500               MOVS     R5,R0
   \   00000126   ED08               LSRS     R5,R5,#+3
   \   00000128   ED00               LSLS     R5,R5,#+3
   \   0000012A   401B               SUBS     R0,R0,R5
   \   0000012C   8340               LSLS     R3,R3,R0
   \   0000012E   1343               ORRS     R3,R3,R2
   \   00000130   0B70               STRB     R3,[R1, #+0]
   \   00000132   13E0               B        ??TimetableExecute_14
    897                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_15:
   \   00000134   0122               MOVS     R2,#+1
   \   00000136   7978               LDRB     R1,[R7, #+1]
   \   00000138   D720               MOVS     R0,#+215
   \   0000013A   8000               LSLS     R0,R0,#+2        ;; #+860
   \   0000013C   0023               MOVS     R3,#+0
   \   0000013E   FB56               LDRSB    R3,[R7, R3]
   \   00000140   1425               MOVS     R5,#+20
   \   00000142   6B43               MULS     R3,R5,R3
   \   00000144   114D               LDR      R5,??TimetableExecute_7+0xC  ;; MainStage
   \   00000146   EB18               ADDS     R3,R5,R3
   \   00000148   1818               ADDS     R0,R3,R0
    898                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 1);  
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000014A   ........           BL       PortStageSet
    899                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;}
   \   0000014E   1048               LDR      R0,??TimetableExecute_7+0x10  ;; 0x619
   \   00000150   0021               MOVS     R1,#+0
   \   00000152   7956               LDRSB    R1,[R7, R1]
   \   00000154   0D4A               LDR      R2,??TimetableExecute_7+0xC  ;; MainStage
   \   00000156   5118               ADDS     R1,R2,R1
   \   00000158   1422               MOVS     R2,#+20
   \   0000015A   0A54               STRB     R2,[R1, R0]
    900                             }
    901                           Out[sc][tn]=1;
   \                     ??TimetableExecute_14:
   \   0000015C   0198               LDR      R0,[SP, #+4]
   \   0000015E   0121               MOVS     R1,#+1
   \   00000160   0170               STRB     R1,[R0, #+0]
   \   00000162   B2E7               B        ??TimetableExecute_10
    902                           
    903                         }
    904                       }else{
    905                         if ((gProg.Screen[sc].Timetable.ActionType==0) && (Out[sc][tn]==1)) 
   \                     ??TimetableExecute_8:
   \   00000164   B878               LDRB     R0,[R7, #+2]
   \   00000166   0028               CMP      R0,#+0
   \   00000168   AAD1               BNE      ??TimetableExecute_13
   \   0000016A   A800               LSLS     R0,R5,#+2
   \   0000016C   0549               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   0000016E   0818               ADDS     R0,R1,R0
   \   00000170   805D               LDRB     R0,[R0, R6]
   \   00000172   0128               CMP      R0,#+1
   \   00000174   A4D1               BNE      ??TimetableExecute_13
   \   00000176   7AE7               B        ??TimetableExecute_11
    906                         {
    907                           if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    908                             {
    909                               Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
    910                             }else{  //je¿eli wêze³
    911                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
    912                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
    913                             }
    914                         }
    915                         Out[sc][tn]=0;
    916                         
    917                       }
    918                   
    919                   }
    920                   
    921                   
    922               }
    923               
    924            }
    925          }
   \                     ??TimetableExecute_2:
   \   00000178   FEBC               POP      {R1-R7}
   \   0000017A   01BC               POP      {R0}
   \   0000017C   0047               BX       R0               ;; return
   \   0000017E   C046               Nop      
   \                     ??TimetableExecute_7:
   \   00000180   ........           DC32     DateTime
   \   00000184   ........           DC32     ??Out
   \   00000188   ........           DC32     Variables
   \   0000018C   ........           DC32     MainStage
   \   00000190   19060000           DC32     0x619
   \   00000194   30D81300           DC32     0x13d830
   \   00000198   24BC0000           DC32     0xbc24
   \   0000019C   ........           DC32     gProg

   \                                 In section .bss, align 4
   \                     ??Out:
   \   00000000                      DS8 32
    926          
    927          
    928          

   \                                 In section Debug.txt, align 4, keep-with-next
    929          void ThermostatsTimeChartExecute(void)
    930          {
   \                     ThermostatsTimeChartExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    931            
    932            signed   short H_Tmp;
    933            signed   short L_Tmp;
    934            signed   short New_Temp;
    935            static  signed short LastTemp[ScreenNr];
    936              
    937            for (signed int sc=0; sc<ScreenNr; )
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   05E0               B        ??ThermostatsTimeChartExecute_0
    938            {
    939              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
    940                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
    941              {
    942                     //je¿eli ustawienie automatyczne temperatury
    943                     if (gProg.Screen[sc].Thermo.AutoOn) 
    944                     {                       
    945                          if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    946                              {
    947                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    948                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[1]; 
    949                              }else{
    950                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[1];
    951                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    952                              }
    953                          
    954                         //je¿eli dzieñ wykresu pierwszego
    955                         if (((gProg.Screen[sc].Thermo.Week>>(DateTime.DayOfWeek-1)) & 0x1)==1)       
    956                         {
    957          
    958                           
    959                              if (((gProg.Screen[sc].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    960                              {                 
    961                                //ustaw wy¿sz¹ temperaturê
    962                                  New_Temp=H_Tmp; 
    963                              }else{
    964                                //ustaw ni¿sz¹ temperaturê
    965                                  New_Temp=L_Tmp;
    966                              }
    967                         }else{
    968          
    969                              if (((gProg.Screen[sc].Thermo.Chart[1]>>DateTime.Hour) & 0x1)==1)
    970                              {                 
    971                                //ustaw wy¿sz¹ temperaturê
    972                                  New_Temp=H_Tmp; 
    973                              }else{
    974                                //ustaw ni¿sz¹ temperaturê
    975                                  New_Temp=L_Tmp;
    976                              }
    977                         }
    978                         if (LastTemp[sc]!=New_Temp)  
    979                            {
    980                                gProg.Screen[sc].Thermo.SetTemperature=New_Temp;
    981                                LastTemp[sc]=gProg.Screen[sc].Thermo.SetTemperature;
    982                            }
    983                     }else{
    984                        LastTemp[sc]=-9999;
   \                     ??ThermostatsTimeChartExecute_1:
   \   00000006   5000               LSLS     R0,R2,#+1
   \   00000008   2949               LDR      R1,??ThermostatsTimeChartExecute_2  ;; DateTime
   \   0000000A   0818               ADDS     R0,R1,R0
   \   0000000C   2949               LDR      R1,??ThermostatsTimeChartExecute_2+0x4  ;; 0xffffd8f1
   \   0000000E   0186               STRH     R1,[R0, #+48]
    985                     }
    986               }
    987              sc++;
   \                     ??ThermostatsTimeChartExecute_3:
   \   00000010   521C               ADDS     R2,R2,#+1
   \                     ??ThermostatsTimeChartExecute_0:
   \   00000012   082A               CMP      R2,#+8
   \   00000014   48DA               BGE      ??ThermostatsTimeChartExecute_4
   \   00000016   002A               CMP      R2,#+0
   \   00000018   03D1               BNE      ??ThermostatsTimeChartExecute_5
   \   0000001A   2748               LDR      R0,??ThermostatsTimeChartExecute_2+0x8  ;; gProg + 48024
   \   0000001C   0078               LDRB     R0,[R0, #+0]
   \   0000001E   0828               CMP      R0,#+8
   \   00000020   09D0               BEQ      ??ThermostatsTimeChartExecute_6
   \                     ??ThermostatsTimeChartExecute_5:
   \   00000022   002A               CMP      R2,#+0
   \   00000024   F4D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   00000026   2548               LDR      R0,??ThermostatsTimeChartExecute_2+0xC  ;; 0xbb98
   \   00000028   A021               MOVS     R1,#+160
   \   0000002A   5143               MULS     R1,R2,R1
   \   0000002C   244B               LDR      R3,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000002E   5918               ADDS     R1,R3,R1
   \   00000030   085C               LDRB     R0,[R1, R0]
   \   00000032   0528               CMP      R0,#+5
   \   00000034   ECD1               BNE      ??ThermostatsTimeChartExecute_3
   \                     ??ThermostatsTimeChartExecute_6:
   \   00000036   A020               MOVS     R0,#+160
   \   00000038   5043               MULS     R0,R2,R0
   \   0000003A   2149               LDR      R1,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000003C   0C18               ADDS     R4,R1,R0
   \   0000003E   2148               LDR      R0,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc26
   \   00000040   2318               ADDS     R3,R4,R0
   \   00000042   1878               LDRB     R0,[R3, #+0]
   \   00000044   0028               CMP      R0,#+0
   \   00000046   DED0               BEQ      ??ThermostatsTimeChartExecute_1
   \   00000048   0620               MOVS     R0,#+6
   \   0000004A   185E               LDRSH    R0,[R3, R0]
   \   0000004C   0421               MOVS     R1,#+4
   \   0000004E   595E               LDRSH    R1,[R3, R1]
   \   00000050   8842               CMP      R0,R1
   \   00000052   03DA               BGE      ??ThermostatsTimeChartExecute_7
   \   00000054   0800               MOVS     R0,R1
   \   00000056   0621               MOVS     R1,#+6
   \   00000058   595E               LDRSH    R1,[R3, R1]
   \   0000005A   03E0               B        ??ThermostatsTimeChartExecute_8
   \                     ??ThermostatsTimeChartExecute_7:
   \   0000005C   0620               MOVS     R0,#+6
   \   0000005E   185E               LDRSH    R0,[R3, R0]
   \   00000060   0421               MOVS     R1,#+4
   \   00000062   595E               LDRSH    R1,[R3, R1]
   \                     ??ThermostatsTimeChartExecute_8:
   \   00000064   184D               LDR      R5,??ThermostatsTimeChartExecute_2+0x18  ;; DateTime + 3
   \   00000066   2D78               LDRB     R5,[R5, #+0]
   \   00000068   DE78               LDRB     R6,[R3, #+3]
   \   0000006A   184F               LDR      R7,??ThermostatsTimeChartExecute_2+0x1C  ;; DateTime + 6
   \   0000006C   3F78               LDRB     R7,[R7, #+0]
   \   0000006E   7F1E               SUBS     R7,R7,#+1
   \   00000070   3E41               ASRS     R6,R6,R7
   \   00000072   F607               LSLS     R6,R6,#+31
   \   00000074   06D5               BPL      ??ThermostatsTimeChartExecute_9
   \   00000076   164E               LDR      R6,??ThermostatsTimeChartExecute_2+0x20  ;; 0xbc30
   \   00000078   A459               LDR      R4,[R4, R6]
   \   0000007A   EC40               LSRS     R4,R4,R5
   \   0000007C   E407               LSLS     R4,R4,#+31
   \   0000007E   08D4               BMI      ??ThermostatsTimeChartExecute_10
   \   00000080   0800               MOVS     R0,R1
   \   00000082   06E0               B        ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_9:
   \   00000084   124E               LDR      R6,??ThermostatsTimeChartExecute_2+0x20  ;; 0xbc30
   \   00000086   A419               ADDS     R4,R4,R6
   \   00000088   6468               LDR      R4,[R4, #+4]
   \   0000008A   EC40               LSRS     R4,R4,R5
   \   0000008C   E407               LSLS     R4,R4,#+31
   \   0000008E   00D4               BMI      ??ThermostatsTimeChartExecute_10
   \   00000090   0800               MOVS     R0,R1
   \                     ??ThermostatsTimeChartExecute_10:
   \   00000092   5100               LSLS     R1,R2,#+1
   \   00000094   064C               LDR      R4,??ThermostatsTimeChartExecute_2  ;; DateTime
   \   00000096   6118               ADDS     R1,R4,R1
   \   00000098   3024               MOVS     R4,#+48
   \   0000009A   0C5F               LDRSH    R4,[R1, R4]
   \   0000009C   8442               CMP      R4,R0
   \   0000009E   B7D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   000000A0   1881               STRH     R0,[R3, #+8]
   \   000000A2   1889               LDRH     R0,[R3, #+8]
   \   000000A4   0886               STRH     R0,[R1, #+48]
   \   000000A6   B3E7               B        ??ThermostatsTimeChartExecute_3
    988            }
    989          }
   \                     ??ThermostatsTimeChartExecute_4:
   \   000000A8   F8BC               POP      {R3-R7}
   \   000000AA   01BC               POP      {R0}
   \   000000AC   0047               BX       R0               ;; return
   \   000000AE   C046               Nop      
   \                     ??ThermostatsTimeChartExecute_2:
   \   000000B0   ........           DC32     DateTime
   \   000000B4   F1D8FFFF           DC32     0xffffd8f1
   \   000000B8   ........           DC32     gProg + 48024
   \   000000BC   98BB0000           DC32     0xbb98
   \   000000C0   ........           DC32     gProg
   \   000000C4   26BC0000           DC32     0xbc26
   \   000000C8   ........           DC32     DateTime + 3
   \   000000CC   ........           DC32     DateTime + 6
   \   000000D0   30BC0000           DC32     0xbc30
    990          
    991          
    992           // int MainScreenTermo=ScreenSetTab_0_Nr;
    993           // int SubScreenTermo=ScreenSetTab_1_Nr;
    994            //int MainScreenTimetable=ScreenSetTab_0_Nr+1;
    995            //int SubScreenTimetable=ScreenSetTab_1_Nr+1;

   \                                 In section Debug.txt, align 4, keep-with-next
    996          void ThermostatsExecute(void)
    997          {
   \                     ThermostatsExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   71E0               B        ??ThermostatsExecute_0
    998          
    999           
   1000            static char Hysteresis[ScreenNr];
   1001            
   1002            for (char sc=0; sc<ScreenNr; sc++)
   1003            {
   1004              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
   1005                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
   \                     ??ThermostatsExecute_1:
   \   00000006   2000               MOVS     R0,R4
   \   00000008   08D1               BNE      ??ThermostatsExecute_2
   \   0000000A   3B48               LDR      R0,??ThermostatsExecute_3  ;; 0xbb98
   \   0000000C   2100               MOVS     R1,R4
   \   0000000E   A022               MOVS     R2,#+160
   \   00000010   5143               MULS     R1,R2,R1
   \   00000012   3A4A               LDR      R2,??ThermostatsExecute_3+0x4  ;; gProg
   \   00000014   5118               ADDS     R1,R2,R1
   \   00000016   085C               LDRB     R0,[R1, R0]
   \   00000018   0828               CMP      R0,#+8
   \   0000001A   0AD0               BEQ      ??ThermostatsExecute_4
   \                     ??ThermostatsExecute_2:
   \   0000001C   2000               MOVS     R0,R4
   \   0000001E   61D0               BEQ      ??ThermostatsExecute_5
   \   00000020   3548               LDR      R0,??ThermostatsExecute_3  ;; 0xbb98
   \   00000022   2100               MOVS     R1,R4
   \   00000024   A022               MOVS     R2,#+160
   \   00000026   5143               MULS     R1,R2,R1
   \   00000028   344A               LDR      R2,??ThermostatsExecute_3+0x4  ;; gProg
   \   0000002A   5118               ADDS     R1,R2,R1
   \   0000002C   085C               LDRB     R0,[R1, R0]
   \   0000002E   0528               CMP      R0,#+5
   \   00000030   58D1               BNE      ??ThermostatsExecute_5
   1006              {
   1007          
   1008                
   1009                     //zeruje stan wyjœcia je¿eli temperatura wy¿sza od za³o¿onej 
   1010                     if (MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg]>=gProg.Screen[sc].Thermo.SetTemperature)
   \                     ??ThermostatsExecute_4:
   \   00000032   2700               MOVS     R7,R4
   \   00000034   3248               LDR      R0,??ThermostatsExecute_3+0x8  ;; 0xbc24
   \   00000036   A021               MOVS     R1,#+160
   \   00000038   7943               MULS     R1,R7,R1
   \   0000003A   5118               ADDS     R1,R2,R1
   \   0000003C   0D18               ADDS     R5,R1,R0
   \   0000003E   314E               LDR      R6,??ThermostatsExecute_3+0xC  ;; MainStage
   \   00000040   A020               MOVS     R0,#+160
   \   00000042   2979               LDRB     R1,[R5, #+4]
   \   00000044   4900               LSLS     R1,R1,#+1
   \   00000046   EA78               LDRB     R2,[R5, #+3]
   \   00000048   1423               MOVS     R3,#+20
   \   0000004A   5A43               MULS     R2,R3,R2
   \   0000004C   B218               ADDS     R2,R6,R2
   \   0000004E   5118               ADDS     R1,R2,R1
   \   00000050   085E               LDRSH    R0,[R1, R0]
   \   00000052   0A21               MOVS     R1,#+10
   \   00000054   695E               LDRSH    R1,[R5, R1]
   \   00000056   8842               CMP      R0,R1
   \   00000058   14DB               BLT      ??ThermostatsExecute_6
   1011                     {
   1012                       PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 0);  
                                           ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000005A   0022               MOVS     R2,#+0
   \   0000005C   6978               LDRB     R1,[R5, #+1]
   \   0000005E   D723               MOVS     R3,#+215
   \   00000060   9B00               LSLS     R3,R3,#+2        ;; #+860
   \   00000062   9C46               MOV      R12,R3
   \   00000064   2B78               LDRB     R3,[R5, #+0]
   \   00000066   1420               MOVS     R0,#+20
   \   00000068   4343               MULS     R3,R0,R3
   \   0000006A   F018               ADDS     R0,R6,R3
   \   0000006C   6346               MOV      R3,R12
   \   0000006E   C018               ADDS     R0,R0,R3
   \   00000070   ........           BL       PortStageSet
   1013                       Hysteresis[sc]=ThermostatHysteresis; //ustawia histerezê
   \   00000074   2448               LDR      R0,??ThermostatsExecute_3+0x10  ;; ??Hysteresis
   \   00000076   0221               MOVS     R1,#+2
   \   00000078   C155               STRB     R1,[R0, R7]
   1014                       MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   \   0000007A   2448               LDR      R0,??ThermostatsExecute_3+0x14  ;; 0x619
   \   0000007C   2978               LDRB     R1,[R5, #+0]
   \   0000007E   7118               ADDS     R1,R6,R1
   \   00000080   1422               MOVS     R2,#+20
   \   00000082   0A54               STRB     R2,[R1, R0]
   1015                     }
   1016                     
   1017                     //ustawia na 1 stan wyjœcia je¿eli temperatura ni¿sza od za³o¿onej - histereza
   1018                     if (MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg]>0)
   \                     ??ThermostatsExecute_6:
   \   00000084   A020               MOVS     R0,#+160
   \   00000086   2979               LDRB     R1,[R5, #+4]
   \   00000088   4900               LSLS     R1,R1,#+1
   \   0000008A   EA78               LDRB     R2,[R5, #+3]
   \   0000008C   1423               MOVS     R3,#+20
   \   0000008E   5A43               MULS     R2,R3,R2
   \   00000090   B218               ADDS     R2,R6,R2
   \   00000092   5118               ADDS     R1,R2,R1
   \   00000094   085E               LDRSH    R0,[R1, R0]
   \   00000096   0128               CMP      R0,#+1
   \   00000098   24DB               BLT      ??ThermostatsExecute_5
   1019                     if (MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg]<=gProg.Screen[sc].Thermo.SetTemperature-Hysteresis[sc])
   \   0000009A   1B48               LDR      R0,??ThermostatsExecute_3+0x10  ;; ??Hysteresis
   \   0000009C   C019               ADDS     R0,R0,R7
   \   0000009E   0A21               MOVS     R1,#+10
   \   000000A0   695E               LDRSH    R1,[R5, R1]
   \   000000A2   0278               LDRB     R2,[R0, #+0]
   \   000000A4   8B1A               SUBS     R3,R1,R2
   \   000000A6   A027               MOVS     R7,#+160
   \   000000A8   2979               LDRB     R1,[R5, #+4]
   \   000000AA   4A00               LSLS     R2,R1,#+1
   \   000000AC   9446               MOV      R12,R2
   \   000000AE   EA78               LDRB     R2,[R5, #+3]
   \   000000B0   1421               MOVS     R1,#+20
   \   000000B2   4A43               MULS     R2,R1,R2
   \   000000B4   B118               ADDS     R1,R6,R2
   \   000000B6   6246               MOV      R2,R12
   \   000000B8   8918               ADDS     R1,R1,R2
   \   000000BA   C95F               LDRSH    R1,[R1, R7]
   \   000000BC   8B42               CMP      R3,R1
   \   000000BE   11DB               BLT      ??ThermostatsExecute_5
   1020                     {
   1021                       Hysteresis[sc]=0;
   \   000000C0   0021               MOVS     R1,#+0
   \   000000C2   0170               STRB     R1,[R0, #+0]
   1022                       PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 1);   
                                           ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   000000C4   0122               MOVS     R2,#+1
   \   000000C6   6978               LDRB     R1,[R5, #+1]
   \   000000C8   D720               MOVS     R0,#+215
   \   000000CA   8000               LSLS     R0,R0,#+2        ;; #+860
   \   000000CC   2B78               LDRB     R3,[R5, #+0]
   \   000000CE   1427               MOVS     R7,#+20
   \   000000D0   7B43               MULS     R3,R7,R3
   \   000000D2   F318               ADDS     R3,R6,R3
   \   000000D4   1818               ADDS     R0,R3,R0
   \   000000D6   ........           BL       PortStageSet
   1023                       MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   \   000000DA   0C48               LDR      R0,??ThermostatsExecute_3+0x14  ;; 0x619
   \   000000DC   2978               LDRB     R1,[R5, #+0]
   \   000000DE   7118               ADDS     R1,R6,R1
   \   000000E0   3A00               MOVS     R2,R7
   \   000000E2   0A54               STRB     R2,[R1, R0]
   1024                     }
   1025                     
   1026                     
   1027              }
   1028            }
   \                     ??ThermostatsExecute_5:
   \   000000E4   641C               ADDS     R4,R4,#+1
   \   000000E6   2406               LSLS     R4,R4,#+24
   \   000000E8   240E               LSRS     R4,R4,#+24
   \                     ??ThermostatsExecute_0:
   \   000000EA   2000               MOVS     R0,R4
   \   000000EC   0828               CMP      R0,#+8
   \   000000EE   8AD3               BCC      ??ThermostatsExecute_1
   1029          }
   \   000000F0   F8BC               POP      {R3-R7}
   \   000000F2   01BC               POP      {R0}
   \   000000F4   0047               BX       R0               ;; return
   \   000000F6   C046               Nop      
   \                     ??ThermostatsExecute_3:
   \   000000F8   98BB0000           DC32     0xbb98
   \   000000FC   ........           DC32     gProg
   \   00000100   24BC0000           DC32     0xbc24
   \   00000104   ........           DC32     MainStage
   \   00000108   ........           DC32     ??Hysteresis
   \   0000010C   19060000           DC32     0x619

   \                                 In section .bss, align 4
   \                     ??Hysteresis:
   \   00000000                      DS8 8
   1030          
   1031          
   1032          
   1033          char out[10]={1,1,1,1,1,1,1,1,1,1};

   \                                 In section Debug.txt, align 4, keep-with-next
   1034          void AlarmExecute(void)
   1035          {
   \                     AlarmExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0026               MOVS     R6,#+0
   \   00000004   2BE0               B        ??AlarmExecute_0
   1036          
   1037          static long long AlarmOnTime[ScreenNr];  //czas do odliczania dla alarmu
   1038          static long long AlarmOffTime[ScreenNr];
   1039            
   1040            for (char sc=0; sc<ScreenNr; sc++)
   1041            {
   1042              if ((((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenAlarm)) || 
   1043                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenAlarm))))
   1044              {
   1045                if (AlarmScreenAction[sc].Active) 
   1046                {
   1047                           //zeruje stan wyjœcia je¿eli zda¿enie od czujnika             
   1048                      if (PortStageRead(MainStage.StageI[gProg.Screen[sc].Alarm.SensorNode].Port, gProg.Screen[sc].Alarm.SensorPort)==0x1)  
   1049                           {
   1050                             if (AlarmOnTime[sc]==0) {AlarmOnTime[sc]=g_counter;}
   1051                             if ((g_counter>AlarmOnTime[sc]+AlarmTimeToActive*1000) && (out[sc]==0))
   1052                             {
   1053                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 0);
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1054                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1055                                AlarmOn=1; 
   1056                                out[sc]=1;
   1057                                AlarmOffTime[sc]=g_counter;
   1058                             }
   1059                             if ((AlarmOffTime>0) && (g_counter>AlarmOffTime[sc]+AlarmSirenTime*1000) && (out[sc]==1))
   1060                             {
   1061                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1); 
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1062                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1063                                AlarmOn=0; 
   1064                                out[sc]=1;
   1065                                AlarmOffTime[sc]=0;
   1066           
   1067                             }
   1068                             
   1069                            
   1070                             
   1071                           }
   1072                }else{
   1073                  if (out[sc]==1)
   \                     ??AlarmExecute_1:
   \   00000006   7148               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000008   0719               ADDS     R7,R0,R4
   \   0000000A   387C               LDRB     R0,[R7, #+16]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   23D1               BNE      ??AlarmExecute_3
   1074                  {
   1075                      out[sc]=0;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   3874               STRB     R0,[R7, #+16]
   1076                      AlarmOnTime[sc]=0;
   \   00000014   E000               LSLS     R0,R4,#+3
   \   00000016   0A18               ADDS     R2,R1,R0
   \   00000018   2032               ADDS     R2,R2,#+32
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   0100               MOVS     R1,R0
   \   0000001E   03C2               STM      R2!,{R0,R1}
   1077                      AlarmOn=0; 
   \   00000020   6B48               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 20
   \   00000022   0170               STRB     R1,[R0, #+0]
   1078                      PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1);
                                          ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000024   A020               MOVS     R0,#+160
   \   00000026   4443               MULS     R4,R0,R4
   \   00000028   6A48               LDR      R0,??AlarmExecute_2+0x8  ;; gProg
   \   0000002A   0019               ADDS     R0,R0,R4
   \   0000002C   6A49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   0000002E   4518               ADDS     R5,R0,R1
   \   00000030   0122               MOVS     R2,#+1
   \   00000032   6978               LDRB     R1,[R5, #+1]
   \   00000034   D720               MOVS     R0,#+215
   \   00000036   8000               LSLS     R0,R0,#+2        ;; #+860
   \   00000038   0023               MOVS     R3,#+0
   \   0000003A   EB56               LDRSB    R3,[R5, R3]
   \   0000003C   1424               MOVS     R4,#+20
   \   0000003E   6343               MULS     R3,R4,R3
   \   00000040   664C               LDR      R4,??AlarmExecute_2+0x10  ;; MainStage
   \   00000042   E318               ADDS     R3,R4,R3
   \   00000044   1818               ADDS     R0,R3,R0
   \   00000046   ........           BL       PortStageSet
   1079                      MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   \   0000004A   6548               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   6956               LDRSB    R1,[R5, R1]
   \   00000050   624A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   00000052   5118               ADDS     R1,R2,R1
   \   00000054   1422               MOVS     R2,#+20
   \   00000056   0A54               STRB     R2,[R1, R0]
   1080                  }
   1081                }
   \                     ??AlarmExecute_3:
   \   00000058   761C               ADDS     R6,R6,#+1
   \   0000005A   3606               LSLS     R6,R6,#+24
   \   0000005C   360E               LSRS     R6,R6,#+24
   \                     ??AlarmExecute_0:
   \   0000005E   3000               MOVS     R0,R6
   \   00000060   0828               CMP      R0,#+8
   \   00000062   00D3               BCC      .+4
   \   00000064   AFE0               B        ??AlarmExecute_4
   \   00000066   3000               MOVS     R0,R6
   \   00000068   08D1               BNE      ??AlarmExecute_5
   \   0000006A   5E48               LDR      R0,??AlarmExecute_2+0x18  ;; 0xbb98
   \   0000006C   3100               MOVS     R1,R6
   \   0000006E   A022               MOVS     R2,#+160
   \   00000070   5143               MULS     R1,R2,R1
   \   00000072   584A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   00000074   5118               ADDS     R1,R2,R1
   \   00000076   085C               LDRB     R0,[R1, R0]
   \   00000078   0A28               CMP      R0,#+10
   \   0000007A   0AD0               BEQ      ??AlarmExecute_6
   \                     ??AlarmExecute_5:
   \   0000007C   3000               MOVS     R0,R6
   \   0000007E   EBD0               BEQ      ??AlarmExecute_3
   \   00000080   5848               LDR      R0,??AlarmExecute_2+0x18  ;; 0xbb98
   \   00000082   3100               MOVS     R1,R6
   \   00000084   A022               MOVS     R2,#+160
   \   00000086   5143               MULS     R1,R2,R1
   \   00000088   524A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   0000008A   5118               ADDS     R1,R2,R1
   \   0000008C   085C               LDRB     R0,[R1, R0]
   \   0000008E   0728               CMP      R0,#+7
   \   00000090   E2D1               BNE      ??AlarmExecute_3
   \                     ??AlarmExecute_6:
   \   00000092   3400               MOVS     R4,R6
   \   00000094   6000               LSLS     R0,R4,#+1
   \   00000096   4D49               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000098   085C               LDRB     R0,[R1, R0]
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   B3D0               BEQ      ??AlarmExecute_1
   \   0000009E   A020               MOVS     R0,#+160
   \   000000A0   6043               MULS     R0,R4,R0
   \   000000A2   4C49               LDR      R1,??AlarmExecute_2+0x8  ;; gProg
   \   000000A4   0818               ADDS     R0,R1,R0
   \   000000A6   4C49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   000000A8   4518               ADDS     R5,R0,R1
   \   000000AA   E978               LDRB     R1,[R5, #+3]
   \   000000AC   A878               LDRB     R0,[R5, #+2]
   \   000000AE   1422               MOVS     R2,#+20
   \   000000B0   5043               MULS     R0,R2,R0
   \   000000B2   4A4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   000000B4   1018               ADDS     R0,R2,R0
   \   000000B6   A030               ADDS     R0,R0,#+160
   \   000000B8   0088               LDRH     R0,[R0, #+0]
   \   000000BA   0004               LSLS     R0,R0,#+16
   \   000000BC   0014               ASRS     R0,R0,#+16
   \   000000BE   ........           BL       PortStageRead
   \   000000C2   0128               CMP      R0,#+1
   \   000000C4   C8D1               BNE      ??AlarmExecute_3
   \   000000C6   E000               LSLS     R0,R4,#+3
   \   000000C8   4049               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   000000CA   0818               ADDS     R0,R1,R0
   \   000000CC   0090               STR      R0,[SP, #+0]
   \   000000CE   2030               ADDS     R0,R0,#+32
   \   000000D0   03C8               LDM      R0!,{R0,R1}
   \   000000D2   0029               CMP      R1,#+0
   \   000000D4   06D1               BNE      ??AlarmExecute_7
   \   000000D6   0028               CMP      R0,#+0
   \   000000D8   04D1               BNE      ??AlarmExecute_7
   \   000000DA   009A               LDR      R2,[SP, #+0]
   \   000000DC   2032               ADDS     R2,R2,#+32
   \   000000DE   4248               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 64
   \   000000E0   03C8               LDM      R0!,{R0,R1}
   \   000000E2   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_7:
   \   000000E4   0098               LDR      R0,[SP, #+0]
   \   000000E6   2030               ADDS     R0,R0,#+32
   \   000000E8   03C8               LDM      R0!,{R0,R1}
   \   000000EA   0200               MOVS     R2,R0
   \   000000EC   0B00               MOVS     R3,R1
   \   000000EE   3F48               LDR      R0,??AlarmExecute_2+0x20  ;; 0xea60
   \   000000F0   0021               MOVS     R1,#+0
   \   000000F2   8018               ADDS     R0,R0,R2
   \   000000F4   5941               ADCS     R1,R1,R3
   \   000000F6   0200               MOVS     R2,R0
   \   000000F8   0B00               MOVS     R3,R1
   \   000000FA   3B48               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 64
   \   000000FC   03C8               LDM      R0!,{R0,R1}
   \   000000FE   8B42               CMP      R3,R1
   \   00000100   25D8               BHI      ??AlarmExecute_8
   \   00000102   01D3               BCC      ??AlarmExecute_9
   \   00000104   8242               CMP      R2,R0
   \   00000106   22D2               BCS      ??AlarmExecute_8
   \                     ??AlarmExecute_9:
   \   00000108   3048               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   0000010A   0719               ADDS     R7,R0,R4
   \   0000010C   387C               LDRB     R0,[R7, #+16]
   \   0000010E   0028               CMP      R0,#+0
   \   00000110   1DD1               BNE      ??AlarmExecute_8
   \   00000112   0022               MOVS     R2,#+0
   \   00000114   6978               LDRB     R1,[R5, #+1]
   \   00000116   8C46               MOV      R12,R1
   \   00000118   D721               MOVS     R1,#+215
   \   0000011A   8900               LSLS     R1,R1,#+2        ;; #+860
   \   0000011C   2856               LDRSB    R0,[R5, R0]
   \   0000011E   1423               MOVS     R3,#+20
   \   00000120   5843               MULS     R0,R3,R0
   \   00000122   2E4B               LDR      R3,??AlarmExecute_2+0x10  ;; MainStage
   \   00000124   1818               ADDS     R0,R3,R0
   \   00000126   4018               ADDS     R0,R0,R1
   \   00000128   6146               MOV      R1,R12
   \   0000012A   ........           BL       PortStageSet
   \   0000012E   2C48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   00000130   0021               MOVS     R1,#+0
   \   00000132   6956               LDRSB    R1,[R5, R1]
   \   00000134   294A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   00000136   5118               ADDS     R1,R2,R1
   \   00000138   1422               MOVS     R2,#+20
   \   0000013A   0A54               STRB     R2,[R1, R0]
   \   0000013C   0120               MOVS     R0,#+1
   \   0000013E   2449               LDR      R1,??AlarmExecute_2+0x4  ;; DateTime + 20
   \   00000140   0870               STRB     R0,[R1, #+0]
   \   00000142   3874               STRB     R0,[R7, #+16]
   \   00000144   009A               LDR      R2,[SP, #+0]
   \   00000146   6032               ADDS     R2,R2,#+96
   \   00000148   2748               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 64
   \   0000014A   03C8               LDM      R0!,{R0,R1}
   \   0000014C   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_8:
   \   0000014E   2848               LDR      R0,??AlarmExecute_2+0x24  ;; AlarmScreenAction + 96
   \   00000150   0028               CMP      R0,#+0
   \   00000152   00D1               BNE      .+4
   \   00000154   80E7               B        ??AlarmExecute_3
   \   00000156   009A               LDR      R2,[SP, #+0]
   \   00000158   106E               LDR      R0,[R2, #+96]
   \   0000015A   516E               LDR      R1,[R2, #+100]
   \   0000015C   0200               MOVS     R2,R0
   \   0000015E   0B00               MOVS     R3,R1
   \   00000160   2448               LDR      R0,??AlarmExecute_2+0x28  ;; 0x493e0
   \   00000162   0021               MOVS     R1,#+0
   \   00000164   8018               ADDS     R0,R0,R2
   \   00000166   5941               ADCS     R1,R1,R3
   \   00000168   0200               MOVS     R2,R0
   \   0000016A   0B00               MOVS     R3,R1
   \   0000016C   1E48               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 64
   \   0000016E   03C8               LDM      R0!,{R0,R1}
   \   00000170   8B42               CMP      R3,R1
   \   00000172   00D9               BLS      .+4
   \   00000174   70E7               B        ??AlarmExecute_3
   \   00000176   02D3               BCC      ??AlarmExecute_10
   \   00000178   8242               CMP      R2,R0
   \   0000017A   00D3               BCC      .+4
   \   0000017C   6CE7               B        ??AlarmExecute_3
   \                     ??AlarmExecute_10:
   \   0000017E   1348               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000180   0719               ADDS     R7,R0,R4
   \   00000182   387C               LDRB     R0,[R7, #+16]
   \   00000184   0128               CMP      R0,#+1
   \   00000186   00D0               BEQ      .+4
   \   00000188   66E7               B        ??AlarmExecute_3
   \   0000018A   0122               MOVS     R2,#+1
   \   0000018C   6978               LDRB     R1,[R5, #+1]
   \   0000018E   D720               MOVS     R0,#+215
   \   00000190   8000               LSLS     R0,R0,#+2        ;; #+860
   \   00000192   0023               MOVS     R3,#+0
   \   00000194   EB56               LDRSB    R3,[R5, R3]
   \   00000196   1424               MOVS     R4,#+20
   \   00000198   6343               MULS     R3,R4,R3
   \   0000019A   104C               LDR      R4,??AlarmExecute_2+0x10  ;; MainStage
   \   0000019C   E318               ADDS     R3,R4,R3
   \   0000019E   1818               ADDS     R0,R3,R0
   \   000001A0   ........           BL       PortStageSet
   \   000001A4   0E48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   000001A6   0021               MOVS     R1,#+0
   \   000001A8   6956               LDRSB    R1,[R5, R1]
   \   000001AA   0C4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   000001AC   5118               ADDS     R1,R2,R1
   \   000001AE   1422               MOVS     R2,#+20
   \   000001B0   0A54               STRB     R2,[R1, R0]
   \   000001B2   0748               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 20
   \   000001B4   0021               MOVS     R1,#+0
   \   000001B6   0170               STRB     R1,[R0, #+0]
   \   000001B8   0120               MOVS     R0,#+1
   \   000001BA   3874               STRB     R0,[R7, #+16]
   \   000001BC   009A               LDR      R2,[SP, #+0]
   \   000001BE   6032               ADDS     R2,R2,#+96
   \   000001C0   0800               MOVS     R0,R1
   \   000001C2   03C2               STM      R2!,{R0,R1}
   \   000001C4   48E7               B        ??AlarmExecute_3
   1082                     
   1083              }
   1084            }
   1085          }
   \                     ??AlarmExecute_4:
   \   000001C6   F8BC               POP      {R3-R7}
   \   000001C8   01BC               POP      {R0}
   \   000001CA   0047               BX       R0               ;; return
   \                     ??AlarmExecute_2:
   \   000001CC   ........           DC32     AlarmScreenAction
   \   000001D0   ........           DC32     DateTime + 20
   \   000001D4   ........           DC32     gProg
   \   000001D8   24BC0000           DC32     0xbc24
   \   000001DC   ........           DC32     MainStage
   \   000001E0   19060000           DC32     0x619
   \   000001E4   98BB0000           DC32     0xbb98
   \   000001E8   ........           DC32     DateTime + 64
   \   000001EC   60EA0000           DC32     0xea60
   \   000001F0   ........           DC32     AlarmScreenAction + 96
   \   000001F4   E0930400           DC32     0x493e0
   1086          
   1087          
   1088          
   1089          
   1090          
   1091          
   1092          
   1093          //-----------------------------------------------------------------------------
   1094          //! Nazwa funkcji :    Timer_1h  
   1095          //! Okres: 1 godzina
   1096          //-----------------------------------------------------------------------------
   1097          //  
   1098          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1099          void Timer_1h(void)                  
   1100          { 
   \                     Timer_1h:
   \   00000000   01B5               PUSH     {R0,LR}
   1101              ThermostatsTimeChartExecute();
   \   00000002   ........           BL       ThermostatsTimeChartExecute
   1102          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
   1103          
   1104          
   1105          
   1106          //-----------------------------------------------------------------------------
   1107          //! Nazwa funkcji :    Timer_1min  
   1108          //! Okres: 1min
   1109          //-----------------------------------------------------------------------------
   1110          //  
   1111          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1112          void Timer_1min(void)                  
   1113          { 
   \                     Timer_1min:
   \   00000000   01B5               PUSH     {R0,LR}
   1114             TimetableExecute();
   \   00000002   ........           BL       TimetableExecute
   1115             ThermostatsExecute();
   \   00000006   ........           BL       ThermostatsExecute
   1116             
   1117            /*
   1118             //sprawdzenie wy³adowania baterii i wyœwietlenie alarmów
   1119             for (char i=0; i<NumberNeurons; i++)
   1120             {
   1121               if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1122               {        ButtonBipCounter=g_counter+1000000;
   1123                         AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
   1124          
   1125          
   1126                    Message_Paint(2,"Wyladowana","bateria","","Sprawdz","liste wezlow"); 
   1127           
   1128               }
   1129             }
   1130              */
   1131          }//_____________________________________________________________________________
   \   0000000A   08BC               POP      {R3}
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
   1132          
   1133          
   1134          
   1135          
   1136          
   1137          
   1138          //-----------------------------------------------------------------------------
   1139          //! Nazwa funkcji :    Timer_1s  
   1140          //! Okres: 1s
   1141          //! Funkcja obs³ugi przerwania USART 0
   1142          //-----------------------------------------------------------------------------
   1143          //  
   1144          //----------------------------------------------------------------------------- 

   \                                 In section .bss, align 4
   1145          int XY_Tab[11];
   \                     XY_Tab:
   \   00000000                      DS8 44
   1146          int LiczOds = 0;
   1147          #define x_offset 1
   1148          #define y_offset 6

   \                                 In section .bss, align 1
   1149          char display_cykl =0;
   \                     display_cykl:
   \   00000000                      DS8 1
   1150          int X_up_old =-1;
   1151          int Y_up_old =-1;
   1152          int X_down_old =-1;
   1153          int Y_down_old =-1;
   1154          char g_PC_Connected_timeout=5;
   1155          
   1156          
   1157          unsigned int CyklPerSekCount=0; 
   1158          unsigned int TransLoopTime=0;
   1159          unsigned int CyklPerSek=1;
   1160          int MenuLevel_old; //tmp
   1161           char FlagChangeTime=0;
   1162          
   1163          
   1164          

   \                                 In section Debug.txt, align 4, keep-with-next
   1165          void Timer_1s(void)                        //timer isr 
   1166          { 
   \                     Timer_1s:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   1167          
   1168            if ((AlarmOn) || (Speaker[1]==1)) 
   \   00000002   AA4C               LDR      R4,??Timer_1s_1  ;; DateTime
   \   00000004   207D               LDRB     R0,[R4, #+20]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   02D1               BNE      ??Timer_1s_2
   \   0000000A   607A               LDRB     R0,[R4, #+9]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   0CD1               BNE      ??Timer_1s_3
   1169            {
   1170                ButtonBipCounter=g_counter+500;
   \                     ??Timer_1s_2:
   \   00000010   A74A               LDR      R2,??Timer_1s_1+0x4  ;; ButtonBipCounter
   \   00000012   266C               LDR      R6,[R4, #+64]
   \   00000014   676C               LDR      R7,[R4, #+68]
   \   00000016   FA20               MOVS     R0,#+250
   \   00000018   4000               LSLS     R0,R0,#+1        ;; #+500
   \   0000001A   0021               MOVS     R1,#+0
   \   0000001C   8019               ADDS     R0,R0,R6
   \   0000001E   7941               ADCS     R1,R1,R7
   \   00000020   03C2               STM      R2!,{R0,R1}
   1171                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000022   A448               LDR      R0,??Timer_1s_1+0x8  ;; 0xfffff430
   \   00000024   8021               MOVS     R1,#+128
   \   00000026   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000028   0160               STR      R1,[R0, #+0]
   1172            }
   1173          
   1174             g_seconds_counter++;
   \                     ??Timer_1s_3:
   \   0000002A   606D               LDR      R0,[R4, #+84]
   \   0000002C   401C               ADDS     R0,R0,#+1
   \   0000002E   6065               STR      R0,[R4, #+84]
   1175          
   1176            
   1177            if (CyklPerSekCount>0)
   \   00000030   E56E               LDR      R5,[R4, #+108]
   \   00000032   002D               CMP      R5,#+0
   \   00000034   07D0               BEQ      ??Timer_1s_4
   1178            {
   1179             TransLoopTime=(1000/CyklPerSekCount);     //czas obiegu programu w ms
   \   00000036   FA20               MOVS     R0,#+250
   \   00000038   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000003A   2900               MOVS     R1,R5
   \   0000003C   ........           BL       __aeabi_uidivmod
   \   00000040   2067               STR      R0,[R4, #+112]
   1180             CyklPerSek=CyklPerSekCount;               //iloœæ cykli na sekunde
   \   00000042   6567               STR      R5,[R4, #+116]
   \   00000044   01E0               B        ??Timer_1s_5
   1181            }else{
   1182             TransLoopTime=0;
   \                     ??Timer_1s_4:
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   2067               STR      R0,[R4, #+112]
   1183            }
   1184            CyklPerSekCount=0;
   \                     ??Timer_1s_5:
   \   0000004A   0025               MOVS     R5,#+0
   \   0000004C   E566               STR      R5,[R4, #+108]
   1185          
   1186                       
   1187            
   1188            
   1189              //Wy³¹czanie podœwietlenia wyœwietlacza
   1190            
   1191            if (g_LightCouterLCD==0) 
   \   0000004E   A06D               LDR      R0,[R4, #+88]
   \   00000050   0028               CMP      R0,#+0
   \   00000052   01D1               BNE      ??Timer_1s_6
   1192            {
   1193              g_LightLCDEnable=1;
   \   00000054   0121               MOVS     R1,#+1
   \   00000056   6173               STRB     R1,[R4, #+13]
   1194            }
   1195            if ((g_LightCouterLCD < LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_6:
   \   00000058   0A28               CMP      R0,#+10
   \   0000005A   04DA               BGE      ??Timer_1s_7
   \   0000005C   217B               LDRB     R1,[R4, #+12]
   \   0000005E   0029               CMP      R1,#+0
   \   00000060   01D1               BNE      ??Timer_1s_7
   1196            {
   1197                g_LightCouterLCD++;
   \   00000062   401C               ADDS     R0,R0,#+1
   \   00000064   A065               STR      R0,[R4, #+88]
   1198                  
   1199            } 
   1200            
   1201            
   1202            if ((g_LightCouterLCD >= LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_7:
   \   00000066   A06D               LDR      R0,[R4, #+88]
   \   00000068   0A28               CMP      R0,#+10
   \   0000006A   03DB               BLT      ??Timer_1s_8
   \   0000006C   207B               LDRB     R0,[R4, #+12]
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   00D1               BNE      ??Timer_1s_8
   1203              
   1204            {
   1205             g_LightLCDEnable=0; 
   \   00000072   6073               STRB     R0,[R4, #+13]
   1206            }
   1207          
   1208            
   1209            if ((DateTime.DayOfWeek)==0) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_8:
   \   00000074   A079               LDRB     R0,[R4, #+6]
   \   00000076   0028               CMP      R0,#+0
   \   00000078   01D1               BNE      ??Timer_1s_9
   \   0000007A   0120               MOVS     R0,#+1
   \   0000007C   A071               STRB     R0,[R4, #+6]
   1210            
   1211            if (DateTime.Second<59) {DateTime.Second++;} else {DateTime.Second=0; DateTime.Minute++;};
   \                     ??Timer_1s_9:
   \   0000007E   6079               LDRB     R0,[R4, #+5]
   \   00000080   3B28               CMP      R0,#+59
   \   00000082   02D2               BCS      ??Timer_1s_10
   \   00000084   401C               ADDS     R0,R0,#+1
   \   00000086   6071               STRB     R0,[R4, #+5]
   \   00000088   04E0               B        ??Timer_1s_11
   \                     ??Timer_1s_10:
   \   0000008A   2800               MOVS     R0,R5
   \   0000008C   6071               STRB     R0,[R4, #+5]
   \   0000008E   2079               LDRB     R0,[R4, #+4]
   \   00000090   401C               ADDS     R0,R0,#+1
   \   00000092   2071               STRB     R0,[R4, #+4]
   1212            if (DateTime.Minute>59) {
   \                     ??Timer_1s_11:
   \   00000094   2079               LDRB     R0,[R4, #+4]
   \   00000096   3C28               CMP      R0,#+60
   \   00000098   33D3               BCC      ??Timer_1s_12
   1213                DateTime.Minute=0; 
   \   0000009A   2800               MOVS     R0,R5
   \   0000009C   2071               STRB     R0,[R4, #+4]
   1214                DateTime.Hour++;
   \   0000009E   E078               LDRB     R0,[R4, #+3]
   \   000000A0   401C               ADDS     R0,R0,#+1
   \   000000A2   E070               STRB     R0,[R4, #+3]
   1215                   //zmiana czasu z zimowego na letni
   1216                 if ((DateTime.Mounth==3) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==7) && (DateTime.Hour==2) && (DateTime.Second==0))
   \   000000A4   6178               LDRB     R1,[R4, #+1]
   \   000000A6   0329               CMP      R1,#+3
   \   000000A8   10D1               BNE      ??Timer_1s_13
   \   000000AA   A178               LDRB     R1,[R4, #+2]
   \   000000AC   1929               CMP      R1,#+25
   \   000000AE   0DD3               BCC      ??Timer_1s_13
   \   000000B0   A179               LDRB     R1,[R4, #+6]
   \   000000B2   0729               CMP      R1,#+7
   \   000000B4   0AD1               BNE      ??Timer_1s_13
   \   000000B6   0006               LSLS     R0,R0,#+24
   \   000000B8   000E               LSRS     R0,R0,#+24
   \   000000BA   0228               CMP      R0,#+2
   \   000000BC   06D1               BNE      ??Timer_1s_13
   \   000000BE   6079               LDRB     R0,[R4, #+5]
   \   000000C0   0028               CMP      R0,#+0
   \   000000C2   03D1               BNE      ??Timer_1s_13
   1217                 {
   1218                   DateTime.Hour=3;
   \   000000C4   0320               MOVS     R0,#+3
   \   000000C6   E070               STRB     R0,[R4, #+3]
   1219                   SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000C8   ........           BL       SetRTC_DateTime
   1220          
   1221                 }
   1222                 //zmiana czasu z letniego na zimowy
   1223                 if ((DateTime.Mounth==10) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==7) && (DateTime.Hour==3) && (DateTime.Second==0))
   \                     ??Timer_1s_13:
   \   000000CC   6078               LDRB     R0,[R4, #+1]
   \   000000CE   0A28               CMP      R0,#+10
   \   000000D0   17D1               BNE      ??Timer_1s_12
   \   000000D2   A078               LDRB     R0,[R4, #+2]
   \   000000D4   1928               CMP      R0,#+25
   \   000000D6   14D3               BCC      ??Timer_1s_12
   \   000000D8   A079               LDRB     R0,[R4, #+6]
   \   000000DA   0728               CMP      R0,#+7
   \   000000DC   11D1               BNE      ??Timer_1s_12
   \   000000DE   E078               LDRB     R0,[R4, #+3]
   \   000000E0   0328               CMP      R0,#+3
   \   000000E2   0ED1               BNE      ??Timer_1s_12
   \   000000E4   6079               LDRB     R0,[R4, #+5]
   \   000000E6   0028               CMP      R0,#+0
   \   000000E8   0BD1               BNE      ??Timer_1s_12
   1224                 {
   1225                   if (FlagChangeTime==0)
   \   000000EA   207E               LDRB     R0,[R4, #+24]
   \   000000EC   0028               CMP      R0,#+0
   \   000000EE   06D1               BNE      ??Timer_1s_14
   1226                   {
   1227                      FlagChangeTime=1; 
   \   000000F0   0120               MOVS     R0,#+1
   \   000000F2   2076               STRB     R0,[R4, #+24]
   1228                      DateTime.Hour=2;
   \   000000F4   0220               MOVS     R0,#+2
   \   000000F6   E070               STRB     R0,[R4, #+3]
   1229                      SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000F8   ........           BL       SetRTC_DateTime
   \   000000FC   01E0               B        ??Timer_1s_12
   1230                   }else{
   1231                      FlagChangeTime=0; 
   \                     ??Timer_1s_14:
   \   000000FE   2800               MOVS     R0,R5
   \   00000100   2076               STRB     R0,[R4, #+24]
   1232                   }
   1233                 }
   1234            }
   1235            
   1236            if (DateTime.Hour>23)   {
   \                     ??Timer_1s_12:
   \   00000102   E078               LDRB     R0,[R4, #+3]
   \   00000104   1828               CMP      R0,#+24
   \   00000106   07D3               BCC      ??Timer_1s_15
   1237              DateTime.Hour=0;     
   \   00000108   2800               MOVS     R0,R5
   \   0000010A   E070               STRB     R0,[R4, #+3]
   1238              DateTime.DayOfWeek++; DateTime.Day++;
   \   0000010C   A079               LDRB     R0,[R4, #+6]
   \   0000010E   401C               ADDS     R0,R0,#+1
   \   00000110   A071               STRB     R0,[R4, #+6]
   \   00000112   A078               LDRB     R0,[R4, #+2]
   \   00000114   401C               ADDS     R0,R0,#+1
   \   00000116   A070               STRB     R0,[R4, #+2]
   1239          
   1240            }
   1241            
   1242            
   1243            switch (DateTime.Mounth)
   \                     ??Timer_1s_15:
   \   00000118   6678               LDRB     R6,[R4, #+1]
   \   0000011A   3000               MOVS     R0,R6
   \   0000011C   401E               SUBS     R0,R0,#+1
   \   0000011E   0B28               CMP      R0,#+11
   \   00000120   39D8               BHI      ??Timer_1s_16
   \   00000122   01A1               ADR      R1,??Timer_1s_0
   \   00000124   095C               LDRB     R1,[R1, R0]
   \   00000126   8F44               ADD      PC,PC,R1
   \                     ??Timer_1s_0:
   \   00000128   0A1A0A50           DC8      +10,+26,+10,+80
   \   0000012C   0A500A0A           DC8      +10,+80,+10,+10
   \   00000130   500A5058           DC8      +80,+10,+80,+88
   1244                  {
   1245                    case 1  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_17:
   \   00000134   A078               LDRB     R0,[R4, #+2]
   \   00000136   2028               CMP      R0,#+32
   \   00000138   2DD3               BCC      ??Timer_1s_16
   \                     ??Timer_1s_18:
   \   0000013A   0120               MOVS     R0,#+1
   \   0000013C   A070               STRB     R0,[R4, #+2]
   \   0000013E   761C               ADDS     R6,R6,#+1
   \   00000140   6670               STRB     R6,[R4, #+1]
   \   00000142   28E0               B        ??Timer_1s_16
   1246                    case 2  : if ((DateTime.Year%4 == 0) && (DateTime.Year%100 != 0) || (DateTime.Year%400 == 0))  //je¿eli rok przestêpny
   \                     ??Timer_1s_19:
   \   00000144   2778               LDRB     R7,[R4, #+0]
   \   00000146   3800               MOVS     R0,R7
   \   00000148   8008               LSRS     R0,R0,#+2
   \   0000014A   8000               LSLS     R0,R0,#+2
   \   0000014C   381A               SUBS     R0,R7,R0
   \   0000014E   05D1               BNE      ??Timer_1s_20
   \   00000150   3800               MOVS     R0,R7
   \   00000152   6421               MOVS     R1,#+100
   \   00000154   ........           BL       __aeabi_idivmod
   \   00000158   0029               CMP      R1,#+0
   \   0000015A   06D1               BNE      ??Timer_1s_21
   \                     ??Timer_1s_20:
   \   0000015C   3800               MOVS     R0,R7
   \   0000015E   C821               MOVS     R1,#+200
   \   00000160   4900               LSLS     R1,R1,#+1        ;; #+400
   \   00000162   ........           BL       __aeabi_idivmod
   \   00000166   0029               CMP      R1,#+0
   \   00000168   03D1               BNE      ??Timer_1s_22
   1247                                  {if (DateTime.Day>29) {DateTime.Day=1; DateTime.Mounth++;}     
   \                     ??Timer_1s_21:
   \   0000016A   A078               LDRB     R0,[R4, #+2]
   \   0000016C   1E28               CMP      R0,#+30
   \   0000016E   12D3               BCC      ??Timer_1s_16
   \   00000170   E3E7               B        ??Timer_1s_18
   1248                                  }else{if (DateTime.Day>28) {DateTime.Day=1; DateTime.Mounth++;}
   \                     ??Timer_1s_22:
   \   00000172   A078               LDRB     R0,[R4, #+2]
   \   00000174   1D28               CMP      R0,#+29
   \   00000176   0ED3               BCC      ??Timer_1s_16
   \   00000178   DFE7               B        ??Timer_1s_18
   1249                                  }
   1250                    break;
   1251                    case 3  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1252                    case 4  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_23:
   \   0000017A   A078               LDRB     R0,[R4, #+2]
   \   0000017C   1F28               CMP      R0,#+31
   \   0000017E   0AD3               BCC      ??Timer_1s_16
   \   00000180   DBE7               B        ??Timer_1s_18
   1253                    case 5  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1254                    case 6  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1255                    case 7  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1256                    case 8  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1257                    case 9  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1258                    case 10 : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1259                    case 11 : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1260                    case 12 : if (DateTime.Day>31) 
   \                     ??Timer_1s_24:
   \   00000182   A078               LDRB     R0,[R4, #+2]
   \   00000184   2028               CMP      R0,#+32
   \   00000186   06D3               BCC      ??Timer_1s_16
   1261                    {
   1262                      DateTime.Day=1; DateTime.Mounth=1; DateTime.Year++;
   \   00000188   0126               MOVS     R6,#+1
   \   0000018A   3000               MOVS     R0,R6
   \   0000018C   A070               STRB     R0,[R4, #+2]
   \   0000018E   6670               STRB     R6,[R4, #+1]
   \   00000190   2078               LDRB     R0,[R4, #+0]
   \   00000192   401C               ADDS     R0,R0,#+1
   \   00000194   2070               STRB     R0,[R4, #+0]
   1263                    } break;
   1264                    
   1265            
   1266            
   1267            }  
   1268            if (DateTime.DayOfWeek>Sunday) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_16:
   \   00000196   A079               LDRB     R0,[R4, #+6]
   \   00000198   0828               CMP      R0,#+8
   \   0000019A   01D3               BCC      ??Timer_1s_25
   \   0000019C   0120               MOVS     R0,#+1
   \   0000019E   A071               STRB     R0,[R4, #+6]
   1269            
   1270          
   1271            
   1272            
   1273            
   1274          
   1275              
   1276            if (MenuLevel_old!=MenuLevel)
   \                     ??Timer_1s_25:
   \   000001A0   7548               LDR      R0,??Timer_1s_26  ;; MenuLevel
   \   000001A2   0068               LDR      R0,[R0, #+0]
   \   000001A4   A16F               LDR      R1,[R4, #+120]
   \   000001A6   8142               CMP      R1,R0
   \   000001A8   00D0               BEQ      ??Timer_1s_27
   1277            {
   1278              MenuLevel_old=MenuLevel;    //na koniec usun¹c MenuLevel_old
   \   000001AA   A067               STR      R0,[R4, #+120]
   1279            }
   1280            
   1281             char czas_tmp[9];
   1282            
   1283            TimeToStr(DateTime.Hour, DateTime.Minute, DateTime.Second, czas_tmp);
   \                     ??Timer_1s_27:
   \   000001AC   6B46               MOV      R3,SP
   \   000001AE   6279               LDRB     R2,[R4, #+5]
   \   000001B0   2179               LDRB     R1,[R4, #+4]
   \   000001B2   E078               LDRB     R0,[R4, #+3]
   \   000001B4   ........           BL       TimeToStr
   1284            czas_tmp[8]=13;
   \   000001B8   6846               MOV      R0,SP
   \   000001BA   0D21               MOVS     R1,#+13
   \   000001BC   0172               STRB     R1,[R0, #+8]
   1285          
   1286            
   1287            //zeruj wskaŸniki poprawnoœci po³aczeñ
   1288            if (g_US0_Connect_OK) g_US0_Connect_OK--;
   \   000001BE   6F48               LDR      R0,??Timer_1s_26+0x4  ;; g_US0_Connect_OK
   \   000001C0   0178               LDRB     R1,[R0, #+0]
   \   000001C2   0029               CMP      R1,#+0
   \   000001C4   01D0               BEQ      ??Timer_1s_28
   \   000001C6   491E               SUBS     R1,R1,#+1
   \   000001C8   0170               STRB     R1,[R0, #+0]
   1289            if (g_US1_Connect_OK) g_US1_Connect_OK--;
   \                     ??Timer_1s_28:
   \   000001CA   6D48               LDR      R0,??Timer_1s_26+0x8  ;; g_US1_Connect_OK
   \   000001CC   0178               LDRB     R1,[R0, #+0]
   \   000001CE   0029               CMP      R1,#+0
   \   000001D0   01D0               BEQ      ??Timer_1s_29
   \   000001D2   491E               SUBS     R1,R1,#+1
   \   000001D4   0170               STRB     R1,[R0, #+0]
   1290            
   1291          
   1292            //synchronizacja RTC
   1293          if ((DateTime.Hour==2) && (DateTime.Minute>56)&& (DateTime.Minute<58)) GetDateTimeFromRTC(); 
   \                     ??Timer_1s_29:
   \   000001D6   E078               LDRB     R0,[R4, #+3]
   \   000001D8   0228               CMP      R0,#+2
   \   000001DA   06D1               BNE      ??Timer_1s_30
   \   000001DC   2079               LDRB     R0,[R4, #+4]
   \   000001DE   3928               CMP      R0,#+57
   \   000001E0   03D3               BCC      ??Timer_1s_30
   \   000001E2   3A28               CMP      R0,#+58
   \   000001E4   01D2               BCS      ??Timer_1s_30
   \   000001E6   ........           BL       GetDateTimeFromRTC
   1294          
   1295          
   1296            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ 1min
   1297            static char CountMin=0;
   1298            if (CountMin<60)
   \                     ??Timer_1s_30:
   \   000001EA   607E               LDRB     R0,[R4, #+25]
   \   000001EC   3C28               CMP      R0,#+60
   \   000001EE   21D2               BCS      ??Timer_1s_31
   1299            {
   1300              CountMin++; 
   \   000001F0   401C               ADDS     R0,R0,#+1
   \   000001F2   6076               STRB     R0,[R4, #+25]
   1301            }else{
   1302              CountMin=0;
   1303            
   1304              if (TransQuality.SlowMensurIndex<4)
   1305              {
   1306                TransQuality.SlowMensurIndex++; 
   1307                
   1308              }else{
   1309                TransQuality.SlowMensurIndex=0;
   1310          
   1311              }
   1312              for(char NN=1; NN<NumberNeurons; NN++)   TransQuality.SlowMensur[NN] &= ~(1<<TransQuality.SlowMensurIndex);
   1313              
   1314                    //Sprawdzenie wiarygodnoœci wêz³ów na podstawie d³ugotrwa³ego pomiaru jakoœci
   1315                for (char NN=1; NN<NumberNeurons; NN++)
   1316                {
   1317                  if (TransQuality.SlowMensur[NN-1]==0)
   1318                  for (char NR=0; NR<NumberReg; NR++)
   1319                  {
   1320                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   1321                  }
   1322                }
   1323            }
   1324                               
   1325          
   1326            if (DateTime.Second==0) Timer_1min();
   \                     ??Timer_1s_32:
   \   000001F4   6079               LDRB     R0,[R4, #+5]
   \   000001F6   0028               CMP      R0,#+0
   \   000001F8   01D1               BNE      ??Timer_1s_33
   \   000001FA   ........           BL       Timer_1min
   1327            if ((DateTime.Second==0) && (DateTime.Minute==0))  Timer_1h();
   \                     ??Timer_1s_33:
   \   000001FE   6679               LDRB     R6,[R4, #+5]
   \   00000200   002E               CMP      R6,#+0
   \   00000202   04D1               BNE      ??Timer_1s_34
   \   00000204   2079               LDRB     R0,[R4, #+4]
   \   00000206   0028               CMP      R0,#+0
   \   00000208   01D1               BNE      ??Timer_1s_34
   \   0000020A   ........           BL       Timer_1h
   1328            if (DateTime.Second==2) TimetableExecute();
   \                     ??Timer_1s_34:
   \   0000020E   022E               CMP      R6,#+2
   \   00000210   01D1               BNE      ??Timer_1s_35
   \   00000212   ........           BL       TimetableExecute
   1329               AlarmExecute();
   \                     ??Timer_1s_35:
   \   00000216   ........           BL       AlarmExecute
   1330               
   1331               
   1332          
   1333             //sprawdzenie wy³adowania baterii i wyœwietlenie ostrzenia
   1334             if ((DateTime.Second==0) && (DateTime.Minute==0)  && (DateTime.Hour==10) && (DateTime.DayOfWeek==0x20))
   \   0000021A   6079               LDRB     R0,[R4, #+5]
   \   0000021C   0028               CMP      R0,#+0
   \   0000021E   76D1               BNE      ??Timer_1s_36
   \   00000220   2079               LDRB     R0,[R4, #+4]
   \   00000222   0028               CMP      R0,#+0
   \   00000224   73D1               BNE      ??Timer_1s_36
   \   00000226   E078               LDRB     R0,[R4, #+3]
   \   00000228   0A28               CMP      R0,#+10
   \   0000022A   70D1               BNE      ??Timer_1s_36
   \   0000022C   A079               LDRB     R0,[R4, #+6]
   \   0000022E   2028               CMP      R0,#+32
   \   00000230   6DD1               BNE      ??Timer_1s_36
   1335             {
   1336             
   1337                 for (char i=0; i<NumberNeurons; i++)
   \   00000232   69E0               B        ??Timer_1s_37
   \                     ??Timer_1s_31:
   \   00000234   2800               MOVS     R0,R5
   \   00000236   6076               STRB     R0,[R4, #+25]
   \   00000238   5248               LDR      R0,??Timer_1s_26+0xC  ;; TransQuality
   \   0000023A   4178               LDRB     R1,[R0, #+1]
   \   0000023C   0429               CMP      R1,#+4
   \   0000023E   02D2               BCS      ??Timer_1s_38
   \   00000240   491C               ADDS     R1,R1,#+1
   \   00000242   4170               STRB     R1,[R0, #+1]
   \   00000244   01E0               B        ??Timer_1s_39
   \                     ??Timer_1s_38:
   \   00000246   2900               MOVS     R1,R5
   \   00000248   4170               STRB     R1,[R0, #+1]
   \                     ??Timer_1s_39:
   \   0000024A   0126               MOVS     R6,#+1
   \   0000024C   3100               MOVS     R1,R6
   \   0000024E   0BE0               B        ??Timer_1s_40
   \                     ??Timer_1s_41:
   \   00000250   8218               ADDS     R2,R0,R2
   \   00000252   D378               LDRB     R3,[R2, #+3]
   \   00000254   9C46               MOV      R12,R3
   \   00000256   3700               MOVS     R7,R6
   \   00000258   4378               LDRB     R3,[R0, #+1]
   \   0000025A   9F40               LSLS     R7,R7,R3
   \   0000025C   6346               MOV      R3,R12
   \   0000025E   BB43               BICS     R3,R3,R7
   \   00000260   D370               STRB     R3,[R2, #+3]
   \   00000262   491C               ADDS     R1,R1,#+1
   \   00000264   0906               LSLS     R1,R1,#+24
   \   00000266   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_40:
   \   00000268   0A00               MOVS     R2,R1
   \   0000026A   232A               CMP      R2,#+35
   \   0000026C   F0D3               BCC      ??Timer_1s_41
   \   0000026E   3100               MOVS     R1,R6
   \   00000270   13E0               B        ??Timer_1s_42
   \                     ??Timer_1s_43:
   \   00000272   7700               LSLS     R7,R6,#+1
   \   00000274   BC46               MOV      R12,R7
   \   00000276   1427               MOVS     R7,#+20
   \   00000278   5743               MULS     R7,R2,R7
   \   0000027A   434E               LDR      R6,??Timer_1s_26+0x10  ;; MainStage
   \   0000027C   F619               ADDS     R6,R6,R7
   \   0000027E   6746               MOV      R7,R12
   \   00000280   F619               ADDS     R6,R6,R7
   \   00000282   A036               ADDS     R6,R6,#+160
   \   00000284   414F               LDR      R7,??Timer_1s_26+0x14  ;; 0xffff8aaa
   \   00000286   3780               STRH     R7,[R6, #+0]
   \   00000288   5B1C               ADDS     R3,R3,#+1
   \   0000028A   1B06               LSLS     R3,R3,#+24
   \   0000028C   1B0E               LSRS     R3,R3,#+24
   \                     ??Timer_1s_44:
   \   0000028E   1E00               MOVS     R6,R3
   \   00000290   0A2E               CMP      R6,#+10
   \   00000292   EED3               BCC      ??Timer_1s_43
   \                     ??Timer_1s_45:
   \   00000294   491C               ADDS     R1,R1,#+1
   \   00000296   0906               LSLS     R1,R1,#+24
   \   00000298   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_42:
   \   0000029A   0A00               MOVS     R2,R1
   \   0000029C   232A               CMP      R2,#+35
   \   0000029E   A9D2               BCS      ??Timer_1s_32
   \   000002A0   8318               ADDS     R3,R0,R2
   \   000002A2   9B78               LDRB     R3,[R3, #+2]
   \   000002A4   002B               CMP      R3,#+0
   \   000002A6   F5D1               BNE      ??Timer_1s_45
   \   000002A8   F1E7               B        ??Timer_1s_44
   \   000002AA   C046               Nop      
   \                     ??Timer_1s_1:
   \   000002AC   ........           DC32     DateTime
   \   000002B0   ........           DC32     ButtonBipCounter
   \   000002B4   30F4FFFF           DC32     0xfffff430
   \                     ??Timer_1s_46:
   \   000002B8   1421               MOVS     R1,#+20
   \   000002BA   4843               MULS     R0,R1,R0
   \   000002BC   3249               LDR      R1,??Timer_1s_26+0x10  ;; MainStage
   \   000002BE   0818               ADDS     R0,R1,R0
   \   000002C0   A030               ADDS     R0,R0,#+160
   \   000002C2   0088               LDRH     R0,[R0, #+0]
   \   000002C4   0104               LSLS     R1,R0,#+16
   \   000002C6   1CD5               BPL      ??Timer_1s_47
   \   000002C8   3149               LDR      R1,??Timer_1s_26+0x18  ;; 0x8aaa
   \   000002CA   8842               CMP      R0,R1
   \   000002CC   19D0               BEQ      ??Timer_1s_47
   1338                 {
   1339                 
   1340                   if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1341                   {
   1342                      Message_Paint(2,"Wyladowana","bateria","   ","Sprawdz","liste wezlow");         
   \   000002CE   314E               LDR      R6,??Timer_1s_26+0x1C  ;; `?<Constant "Wyladowana">`
   \   000002D0   3100               MOVS     R1,R6
   \   000002D2   1C31               ADDS     R1,R1,#+28
   \   000002D4   3000               MOVS     R0,R6
   \   000002D6   1430               ADDS     R0,R0,#+20
   \   000002D8   03B4               PUSH     {R0,R1}
   \   000002DA   2FA3               ADR      R3,??Timer_1s_26+0x20  ;; "   "
   \   000002DC   3200               MOVS     R2,R6
   \   000002DE   0C32               ADDS     R2,R2,#+12
   \   000002E0   3100               MOVS     R1,R6
   \   000002E2   0220               MOVS     R0,#+2
   \   000002E4   ........           BL       Message_Paint
   \   000002E8   02B0               ADD      SP,SP,#+8
   1343          
   1344                      ButtonBipCounter=g_counter+1000000;
   \   000002EA   2C4E               LDR      R6,??Timer_1s_26+0x24  ;; ButtonBipCounter
   \   000002EC   226C               LDR      R2,[R4, #+64]
   \   000002EE   636C               LDR      R3,[R4, #+68]
   \   000002F0   2B48               LDR      R0,??Timer_1s_26+0x28  ;; 0xf4240
   \   000002F2   0021               MOVS     R1,#+0
   \   000002F4   8018               ADDS     R0,R0,R2
   \   000002F6   5941               ADCS     R1,R1,R3
   \   000002F8   03C6               STM      R6!,{R0,R1}
   1345                         AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                           ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000002FA   2A48               LDR      R0,??Timer_1s_26+0x2C  ;; 0xfffff430
   \   000002FC   8021               MOVS     R1,#+128
   \   000002FE   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000300   0160               STR      R1,[R0, #+0]
   1346                   }
   1347                   
   1348          
   1349                 } 
   \                     ??Timer_1s_47:
   \   00000302   6D1C               ADDS     R5,R5,#+1
   \   00000304   2D06               LSLS     R5,R5,#+24
   \   00000306   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1s_37:
   \   00000308   2800               MOVS     R0,R5
   \   0000030A   2328               CMP      R0,#+35
   \   0000030C   D4D3               BCC      ??Timer_1s_46
   1350                
   1351             }    
   1352              
   1353          
   1354             
   1355             
   1356             //wygaszacz ekranu
   1357             static char LCD_last_fill=100;
   1358             char WypMin;
   1359             if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))  
   \                     ??Timer_1s_36:
   \   0000030E   A07B               LDRB     R0,[R4, #+14]
   \   00000310   0028               CMP      R0,#+0
   \   00000312   07D0               BEQ      ??Timer_1s_48
   \   00000314   08D0               BEQ      ??Timer_1s_49
   \   00000316   E078               LDRB     R0,[R4, #+3]
   \   00000318   E17B               LDRB     R1,[R4, #+15]
   \   0000031A   8842               CMP      R0,R1
   \   0000031C   04D2               BCS      ??Timer_1s_49
   \   0000031E   217C               LDRB     R1,[R4, #+16]
   \   00000320   8842               CMP      R0,R1
   \   00000322   01D3               BCC      ??Timer_1s_49
   1360             {  
   1361                WypMin=14;
   \                     ??Timer_1s_48:
   \   00000324   0E20               MOVS     R0,#+14
   \   00000326   00E0               B        ??Timer_1s_50
   1362             }else{
   1363                WypMin=4;
   \                     ??Timer_1s_49:
   \   00000328   0420               MOVS     R0,#+4
   1364             }
   1365             
   1366               if (g_LightLCDEnable)
   \                     ??Timer_1s_50:
   \   0000032A   A17E               LDRB     R1,[R4, #+26]
   \   0000032C   627B               LDRB     R2,[R4, #+13]
   \   0000032E   002A               CMP      R2,#+0
   \   00000330   0CD0               BEQ      ??Timer_1s_51
   1367               {
   1368                 if (LCD_last_fill!=100)
   \   00000332   6429               CMP      R1,#+100
   \   00000334   1CD0               BEQ      ??Timer_1s_52
   1369                 {
   1370                   AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   00000336   0126               MOVS     R6,#+1
   \   00000338   1B48               LDR      R0,??Timer_1s_26+0x30  ;; 0xfffcc008
   \   0000033A   0660               STR      R6,[R0, #+0]
   1371                    Set_LCD_Light_PWM_Fill(100);  //100% wype³nienia
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   0000033C   6420               MOVS     R0,#+100
   \   0000033E   ........           BL       Set_LCD_Light_PWM_Fill
   1372                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000342   1A48               LDR      R0,??Timer_1s_26+0x34  ;; 0xfffcc004
   \   00000344   0660               STR      R6,[R0, #+0]
   1373                    LCD_last_fill=100;
   \   00000346   6420               MOVS     R0,#+100
   \   00000348   A076               STRB     R0,[R4, #+26]
   \   0000034A   11E0               B        ??Timer_1s_52
   1374                 }
   1375               }else {
   1376                 if (LCD_last_fill>WypMin)
   \                     ??Timer_1s_51:
   \   0000034C   8842               CMP      R0,R1
   \   0000034E   0FD2               BCS      ??Timer_1s_52
   1377                 {
   1378                    if (LCD_last_fill>60) LCD_last_fill=61;
   \   00000350   3D29               CMP      R1,#+61
   \   00000352   01D3               BCC      ??Timer_1s_53
   \   00000354   3D20               MOVS     R0,#+61
   \   00000356   A076               STRB     R0,[R4, #+26]
   1379                    LCD_last_fill-=2;
   \                     ??Timer_1s_53:
   \   00000358   A07E               LDRB     R0,[R4, #+26]
   \   0000035A   801E               SUBS     R0,R0,#+2
   \   0000035C   A076               STRB     R0,[R4, #+26]
   1380                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   0000035E   0126               MOVS     R6,#+1
   \   00000360   1149               LDR      R1,??Timer_1s_26+0x30  ;; 0xfffcc008
   \   00000362   0E60               STR      R6,[R1, #+0]
   1381                    Set_LCD_Light_PWM_Fill(LCD_last_fill);  //10% wype³nienia
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   00000364   0006               LSLS     R0,R0,#+24
   \   00000366   000E               LSRS     R0,R0,#+24
   \   00000368   ........           BL       Set_LCD_Light_PWM_Fill
   1382                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   0000036C   0F48               LDR      R0,??Timer_1s_26+0x34  ;; 0xfffcc004
   \   0000036E   0660               STR      R6,[R0, #+0]
   1383                 }
   1384              }
   1385              
   1386              
   1387              
   1388               
   1389               
   1390           /*  
   1391          #ifdef __WIFI_MODULE    
   1392             //wifi-------------------------------------------------------------------
   1393             if ((g_counter>8000) &&  (DateTime.Second%1==0))
   1394             {
   1395                 GetHTTP_Force(Buff_TX_1 ,AT91C_BASE_US1);
   1396             }
   1397          #endif   
   1398             */
   1399          }
   \                     ??Timer_1s_52:
   \   00000370   FEBC               POP      {R1-R7}
   \   00000372   01BC               POP      {R0}
   \   00000374   0047               BX       R0               ;; return
   \   00000376   C046               Nop      
   \                     ??Timer_1s_26:
   \   00000378   ........           DC32     MenuLevel
   \   0000037C   ........           DC32     g_US0_Connect_OK
   \   00000380   ........           DC32     g_US1_Connect_OK
   \   00000384   ........           DC32     TransQuality
   \   00000388   ........           DC32     MainStage
   \   0000038C   AA8AFFFF           DC32     0xffff8aaa
   \   00000390   AA8A0000           DC32     0x8aaa
   \   00000394   ........           DC32     `?<Constant "Wyladowana">`
   \   00000398   20202000           DC8      "   "
   \   0000039C   ........           DC32     ButtonBipCounter
   \   000003A0   40420F00           DC32     0xf4240
   \   000003A4   30F4FFFF           DC32     0xfffff430
   \   000003A8   08C0FCFF           DC32     0xfffcc008
   \   000003AC   04C0FCFF           DC32     0xfffcc004
   1400          
   1401          
   1402          
   1403          
   1404          //-----------------------------------------------------------------------------
   1405          //! Nazwa funkcji :    Timer_10ms
   1406          //! Okres: 10ms
   1407          //! Timer zale¿ny od Timer_1ms
   1408          //-----------------------------------------------------------------------------
   1409          //  
   1410          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1411          void Timer_10ms(void)                      
   1412          { 
   \                     Timer_10ms:
   \   00000000   10B5               PUSH     {R4,LR}
   1413              
   1414          
   1415            unsigned int dummy = AT91C_BASE_TC0->TC_SR;                                   // Odczyt statusu  
   \   00000002   4848               LDR      R0,??Timer_10ms_0  ;; 0xfffa0020
   \   00000004   0068               LDR      R0,[R0, #+0]
   1416          
   1417          
   1418          
   1419          
   1420             /*
   1421          
   1422            if ((Busy_program==0) && (g_Stop_Program==0))                                  //Dopasowanie cyklu programu do krotnoœci 5 ms
   1423            {  
   1424          
   1425            ///  Program(&gProg); 
   1426              ProgFlag=1;
   1427            }
   1428           }
   1429            */
   1430          
   1431            
   1432            
   1433          
   1434           
   1435          
   1436          
   1437           X_up=-1;
   \   00000006   484C               LDR      R4,??Timer_10ms_0+0x4  ;; DateTime
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   C043               MVNS     R0,R0            ;; #-1
   \   0000000C   6085               STRH     R0,[R4, #+42]
   1438           Y_up=-1;
   \   0000000E   2085               STRH     R0,[R4, #+40]
   1439          
   1440           X_down=-1;
   \   00000010   E084               STRH     R0,[R4, #+38]
   1441           Y_down=-1;
   \   00000012   A084               STRH     R0,[R4, #+36]
   1442          
   1443          
   1444            GetTouchPoint(&X_down, &Y_down, &X_up, &Y_up);
   \   00000014   2300               MOVS     R3,R4
   \   00000016   2833               ADDS     R3,R3,#+40
   \   00000018   2200               MOVS     R2,R4
   \   0000001A   2A32               ADDS     R2,R2,#+42
   \   0000001C   2100               MOVS     R1,R4
   \   0000001E   2431               ADDS     R1,R1,#+36
   \   00000020   2000               MOVS     R0,R4
   \   00000022   2630               ADDS     R0,R0,#+38
   \   00000024   ........           BL       GetTouchPoint
   1445          
   1446           
   1447             //Akcja przycisku up
   1448            if ((X_up>0)&&(Y_up>0)) 
   \   00000028   2A20               MOVS     R0,#+42
   \   0000002A   205E               LDRSH    R0,[R4, R0]
   \   0000002C   0128               CMP      R0,#+1
   \   0000002E   09DB               BLT      ??Timer_10ms_1
   \   00000030   2820               MOVS     R0,#+40
   \   00000032   205E               LDRSH    R0,[R4, R0]
   \   00000034   0128               CMP      R0,#+1
   \   00000036   05DB               BLT      ??Timer_10ms_1
   1449            {
   1450               ScreenEvent();
   \   00000038   ........           BL       ScreenEvent
   1451               g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   A065               STR      R0,[R4, #+88]
   1452               g_LightLCDEnable=1;
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   6073               STRB     R0,[R4, #+13]
   1453            }
   1454            
   1455            if (LiczOds>=5) {
   \                     ??Timer_10ms_1:
   \   00000044   A06E               LDR      R0,[R4, #+104]
   \   00000046   0528               CMP      R0,#+5
   \   00000048   28DB               BLT      ??Timer_10ms_2
   1456            
   1457                      //Akcja przycisku down
   1458                if ((X_down>0)&&(Y_down>0)) 
   \   0000004A   2620               MOVS     R0,#+38
   \   0000004C   205E               LDRSH    R0,[R4, R0]
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   09DB               BLT      ??Timer_10ms_3
   \   00000052   2420               MOVS     R0,#+36
   \   00000054   205E               LDRSH    R0,[R4, R0]
   \   00000056   0128               CMP      R0,#+1
   \   00000058   05DB               BLT      ??Timer_10ms_3
   1459                {
   1460                   ScreenEvent();
   \   0000005A   ........           BL       ScreenEvent
   1461                   g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   A065               STR      R0,[R4, #+88]
   1462                   g_LightLCDEnable=1;
   \   00000062   0120               MOVS     R0,#+1
   \   00000064   6073               STRB     R0,[R4, #+13]
   1463                }  
   1464                
   1465                MenuRefresh(); 
   \                     ??Timer_10ms_3:
   \   00000066   ........           BL       MenuRefresh
   1466          
   1467              
   1468              if ((g_PC_Connected==0) || (g_PC_Connected_timeout>0))
   \   0000006A   207B               LDRB     R0,[R4, #+12]
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   02D0               BEQ      ??Timer_10ms_4
   \   00000070   E07D               LDRB     R0,[R4, #+23]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   03D0               BEQ      ??Timer_10ms_5
   1469              {
   1470              
   1471              RepaintLCD();
   \                     ??Timer_10ms_4:
   \   00000076   ........           BL       RepaintLCD
   1472              RepaintLCD();
   \   0000007A   ........           BL       RepaintLCD
   1473              }
   1474              
   1475              if ((g_PC_Connected==1) && (g_PC_Connected_timeout>0))
   \                     ??Timer_10ms_5:
   \   0000007E   207B               LDRB     R0,[R4, #+12]
   \   00000080   0128               CMP      R0,#+1
   \   00000082   04D1               BNE      ??Timer_10ms_6
   \   00000084   E17D               LDRB     R1,[R4, #+23]
   \   00000086   0029               CMP      R1,#+0
   \   00000088   01D0               BEQ      ??Timer_10ms_6
   1476              {
   1477                g_PC_Connected_timeout--;
   \   0000008A   491E               SUBS     R1,R1,#+1
   \   0000008C   E175               STRB     R1,[R4, #+23]
   1478              }
   1479              
   1480              if (g_PC_Connected==0)
   \                     ??Timer_10ms_6:
   \   0000008E   0028               CMP      R0,#+0
   \   00000090   01D1               BNE      ??Timer_10ms_7
   1481              {
   1482                g_PC_Connected_timeout=5;
   \   00000092   0520               MOVS     R0,#+5
   \   00000094   E075               STRB     R0,[R4, #+23]
   1483              }
   1484              
   1485              
   1486              LiczOds=0;
   \                     ??Timer_10ms_7:
   \   00000096   0020               MOVS     R0,#+0
   \   00000098   A066               STR      R0,[R4, #+104]
   \   0000009A   01E0               B        ??Timer_10ms_8
   1487          
   1488            }
   1489            
   1490            else 
   1491            {
   1492              LiczOds++; 
   \                     ??Timer_10ms_2:
   \   0000009C   401C               ADDS     R0,R0,#+1
   \   0000009E   A066               STR      R0,[R4, #+104]
   1493            }
   1494            
   1495              
   1496            
   1497            static int Spek2_Counter;
   1498            if (Spek2_Counter<202)Spek2_Counter++;
   \                     ??Timer_10ms_8:
   \   000000A0   E06F               LDR      R0,[R4, #+124]
   \   000000A2   CA28               CMP      R0,#+202
   \   000000A4   01DA               BGE      ??Timer_10ms_9
   \   000000A6   401C               ADDS     R0,R0,#+1
   \   000000A8   E067               STR      R0,[R4, #+124]
   1499            if ((Speaker[2]==1) && (Spek2_Counter>150)) 
   \                     ??Timer_10ms_9:
   \   000000AA   A07A               LDRB     R0,[R4, #+10]
   \   000000AC   0128               CMP      R0,#+1
   \   000000AE   0FD1               BNE      ??Timer_10ms_10
   \   000000B0   E06F               LDR      R0,[R4, #+124]
   \   000000B2   9728               CMP      R0,#+151
   \   000000B4   0CDB               BLT      ??Timer_10ms_10
   1500            {
   1501                Spek2_Counter=0;
   \   000000B6   0020               MOVS     R0,#+0
   \   000000B8   E067               STR      R0,[R4, #+124]
   1502                ButtonBipCounter=g_counter+150;
   \   000000BA   1C4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000BC   206C               LDR      R0,[R4, #+64]
   \   000000BE   616C               LDR      R1,[R4, #+68]
   \   000000C0   0023               MOVS     R3,#+0
   \   000000C2   9630               ADDS     R0,R0,#+150
   \   000000C4   5941               ADCS     R1,R1,R3
   \   000000C6   03C2               STM      R2!,{R0,R1}
   1503                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000C8   1948               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000CA   8021               MOVS     R1,#+128
   \   000000CC   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000CE   0160               STR      R1,[R0, #+0]
   1504            }
   1505          
   1506            if ((Speaker[3]==1) && (Spek2_Counter==150)) 
   \                     ??Timer_10ms_10:
   \   000000D0   E07A               LDRB     R0,[R4, #+11]
   \   000000D2   0128               CMP      R0,#+1
   \   000000D4   0DD1               BNE      ??Timer_10ms_11
   \   000000D6   E06F               LDR      R0,[R4, #+124]
   \   000000D8   9628               CMP      R0,#+150
   \   000000DA   0AD1               BNE      ??Timer_10ms_11
   1507            {
   1508                ButtonBipCounter=g_counter+100;
   \   000000DC   134A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000DE   206C               LDR      R0,[R4, #+64]
   \   000000E0   616C               LDR      R1,[R4, #+68]
   \   000000E2   0023               MOVS     R3,#+0
   \   000000E4   6430               ADDS     R0,R0,#+100
   \   000000E6   5941               ADCS     R1,R1,R3
   \   000000E8   03C2               STM      R2!,{R0,R1}
   1509                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000EA   1148               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000EC   8021               MOVS     R1,#+128
   \   000000EE   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000F0   0160               STR      R1,[R0, #+0]
   1510            }  
   1511            if ((Speaker[3]==1) && (Spek2_Counter>200)) 
   \                     ??Timer_10ms_11:
   \   000000F2   E07A               LDRB     R0,[R4, #+11]
   \   000000F4   0128               CMP      R0,#+1
   \   000000F6   0FD1               BNE      ??Timer_10ms_12
   \   000000F8   E06F               LDR      R0,[R4, #+124]
   \   000000FA   C928               CMP      R0,#+201
   \   000000FC   0CDB               BLT      ??Timer_10ms_12
   1512            {
   1513                Spek2_Counter=0;
   \   000000FE   0020               MOVS     R0,#+0
   \   00000100   E067               STR      R0,[R4, #+124]
   1514                ButtonBipCounter=g_counter+100;
   \   00000102   0A4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   00000104   206C               LDR      R0,[R4, #+64]
   \   00000106   616C               LDR      R1,[R4, #+68]
   \   00000108   0023               MOVS     R3,#+0
   \   0000010A   6430               ADDS     R0,R0,#+100
   \   0000010C   5941               ADCS     R1,R1,R3
   \   0000010E   03C2               STM      R2!,{R0,R1}
   1515                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000110   0748               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   00000112   8021               MOVS     R1,#+128
   \   00000114   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000116   0160               STR      R1,[R0, #+0]
   1516            }    
   1517          
   1518           AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Timer_10ms_12:
   \   00000118   0648               LDR      R0,??Timer_10ms_0+0x10  ;; 0xfffffd40
   \   0000011A   ........           BL       AT91F_WDTRestart
   1519          
   1520          }
   \   0000011E   10BC               POP      {R4}
   \   00000120   01BC               POP      {R0}
   \   00000122   0047               BX       R0               ;; return
   \                     ??Timer_10ms_0:
   \   00000124   2000FAFF           DC32     0xfffa0020
   \   00000128   ........           DC32     DateTime
   \   0000012C   ........           DC32     ButtonBipCounter
   \   00000130   30F4FFFF           DC32     0xfffff430
   \   00000134   40FDFFFF           DC32     0xfffffd40
   1521          
   1522          
   1523          
   1524          

   \                                 In section Debug.txt, align 4, keep-with-next
   1525          void Timer_10ms_Setup(void) 
   1526          { 
   1527          
   1528          
   1529           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC0] = (unsigned int)Timer_10ms;  //set AIC             
   \                     Timer_10ms_Setup:
   \   00000000   1248               LDR      R0,??Timer_10ms_Setup_0  ;; 0xfffff0b0
   \   00000002   1349               LDR      R1,??Timer_10ms_Setup_0+0x4  ;; Timer_10ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1530           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC0] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10mS_PRIOR ); 
   \   00000006   1348               LDR      R0,??Timer_10ms_Setup_0+0x8  ;; 0xfffff030
   \   00000008   0321               MOVS     R1,#+3
   \   0000000A   0160               STR      R1,[R0, #+0]
   1531           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC0);      //enable clock 
   \   0000000C   8020               MOVS     R0,#+128
   \   0000000E   4001               LSLS     R0,R0,#+5        ;; #+4096
   \   00000010   1149               LDR      R1,??Timer_10ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000012   0860               STR      R0,[R1, #+0]
   1532           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1149               LDR      R1,??Timer_10ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0A60               STR      R2,[R1, #+0]
   1533           //no external clocks 
   1534           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1149               LDR      R1,??Timer_10ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1522               MOVS     R2,#+21
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1535           AT91C_BASE_TC0->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1049               LDR      R1,??Timer_10ms_Setup_0+0x18  ;; 0xfffa0000
   \   00000022   0522               MOVS     R2,#+5
   \   00000024   0A60               STR      R2,[R1, #+0]
   1536           AT91C_BASE_TC0->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV5_CLOCK;//CPC 
   \   00000026   1049               LDR      R1,??Timer_10ms_Setup_0+0x1C  ;; 0xfffa0004
   \   00000028   104A               LDR      R2,??Timer_10ms_Setup_0+0x20  ;; 0xcc004
   \   0000002A   0A60               STR      R2,[R1, #+0]
   1537            //! DIV5 - 1024
   1538           //! DIV4 - 128
   1539           //! DIV3 - 32
   1540           //! DIV2 - 8
   1541           //clock: MCK/1024  = 48054841/1024  =  46928 Hz 
   1542           //AT91C_BASE_TC0->TC_RC = 46928,55;    => 1 sec 
   1543                                   
   1544           AT91C_BASE_TC0->TC_RC = 469;                  //10ms 
   \   0000002C   1049               LDR      R1,??Timer_10ms_Setup_0+0x24  ;; 0xfffa001c
   \   0000002E   FF22               MOVS     R2,#+255
   \   00000030   D632               ADDS     R2,R2,#+214      ;; #+469
   \   00000032   0A60               STR      R2,[R1, #+0]
   1545           AT91C_BASE_TC0->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000034   0F49               LDR      R1,??Timer_10ms_Setup_0+0x28  ;; 0xfffa0024
   \   00000036   1022               MOVS     R2,#+16
   \   00000038   0A60               STR      R2,[R1, #+0]
   1546           AT91C_BASE_TC0->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   0000003A   0F49               LDR      R1,??Timer_10ms_Setup_0+0x2C  ;; 0xfffa0028
   \   0000003C   D243               MVNS     R2,R2            ;; #-17
   \   0000003E   0A60               STR      R2,[R1, #+0]
   1547           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC0);       //enable int 
   \   00000040   0E49               LDR      R1,??Timer_10ms_Setup_0+0x30  ;; 0xfffff120
   \   00000042   0860               STR      R0,[R1, #+0]
   1548           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC0);       //clear int 
   \   00000044   0E49               LDR      R1,??Timer_10ms_Setup_0+0x34  ;; 0xfffff128
   \   00000046   0860               STR      R0,[R1, #+0]
   1549            
   1550          
   1551          }//_____________________________________________________________________________
   \   00000048   7047               BX       LR               ;; return
   \   0000004A   C046               Nop      
   \                     ??Timer_10ms_Setup_0:
   \   0000004C   B0F0FFFF           DC32     0xfffff0b0
   \   00000050   ........           DC32     Timer_10ms
   \   00000054   30F0FFFF           DC32     0xfffff030
   \   00000058   10FCFFFF           DC32     0xfffffc10
   \   0000005C   C000FAFF           DC32     0xfffa00c0
   \   00000060   C400FAFF           DC32     0xfffa00c4
   \   00000064   0000FAFF           DC32     0xfffa0000
   \   00000068   0400FAFF           DC32     0xfffa0004
   \   0000006C   04C00C00           DC32     0xcc004
   \   00000070   1C00FAFF           DC32     0xfffa001c
   \   00000074   2400FAFF           DC32     0xfffa0024
   \   00000078   2800FAFF           DC32     0xfffa0028
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1552          
   1553          
   1554          
   1555          
   1556          
   1557          //-----------------------------------------------------------------------------
   1558          //! Nazwa funkcji :    Timer_1ms
   1559          //! Okres: 1ms
   1560          //! Funkcje:
   1561          //!         Funkcja obs³ugi przerwania USART 0  Czas 1 ms
   1562          //!         Triger Timer_10ms 
   1563          //-----------------------------------------------------------------------------
   1564          //  
   1565          //----------------------------------------------------------------------------- 
   1566          
   1567          

   \                                 In section .bss, align 4
   1568          int Counter=0;
   \                     Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1569          int US0_Counter=0;
   \                     US0_Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1570          int US1_Counter=0;
   \                     US1_Counter:
   \   00000000                      DS8 4
   1571          extern char SendModbusEnable;

   \                                 In section .bss, align 1
   1572          char CounterForTimer10ms=0;
   \                     CounterForTimer10ms:
   \   00000000                      DS8 1
   1573          short int CurTimeQual=0;
   1574          

   \                                 In section Debug.txt, align 4, keep-with-next
   1575          void Timer_1ms(void)                        //timer isr 
   1576          { 
   \                     Timer_1ms:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1577            unsigned int dummy2 = AT91C_BASE_TC2->TC_SR;  
   \   00000002   6548               LDR      R0,??Timer_1ms_0  ;; 0xfffa00a0
   \   00000004   0068               LDR      R0,[R0, #+0]
   1578            
   1579            g_counter++;
   \   00000006   654C               LDR      R4,??Timer_1ms_0+0x4  ;; DateTime
   \   00000008   226C               LDR      R2,[R4, #+64]
   \   0000000A   636C               LDR      R3,[R4, #+68]
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   521C               ADDS     R2,R2,#+1
   \   00000010   4341               ADCS     R3,R3,R0
   \   00000012   2264               STR      R2,[R4, #+64]
   \   00000014   6364               STR      R3,[R4, #+68]
   1580          
   1581            
   1582          
   1583            
   1584            
   1585            /*
   1586            
   1587          
   1588          
   1589            
   1590            //obs³uga US0
   1591            if (US0_MasterMODBUS_ENABLE)
   1592            {
   1593            if (US0_Counter>g_US0_Comm_MinCykle) 
   1594            {
   1595              
   1596                if (g_Ans_ZD_MODBUS_0 == g_US0_Comm_TIMEOUT)
   1597                {
   1598                    ZD_MODBUS_0[g_Current_ZD_MODBUS_0].Error ++;
   1599                }
   1600              
   1601                
   1602                if (g_Ans_ZD_MODBUS_0 >= g_US0_Comm_TIMEOUT)
   1603                {
   1604          
   1605                    //AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
   1606             
   1607                    g_Ans_ZD_MODBUS_0=0;
   1608                    SendModbusEnable=0;
   1609                  //  ModBus_MASTER_TX(0);
   1610                    
   1611                    US0_Counter=0;
   1612                }
   1613                else
   1614                {
   1615                    g_Ans_ZD_MODBUS_0++;
   1616          
   1617                }
   1618              
   1619            }
   1620            else
   1621            {
   1622              US0_Counter++; 
   1623            }
   1624            }
   1625            
   1626          
   1627          
   1628            if (US1_MasterMODBUS_ENABLE)
   1629            {
   1630            if (US1_Counter>g_US0_Comm_MinCykle) 
   1631            {
   1632              
   1633                if (g_Ans_ZD_MODBUS_1 == g_US1_Comm_TIMEOUT)
   1634                {
   1635                    ZD_MODBUS_1[g_Current_ZD_MODBUS_1].Error ++;
   1636                }
   1637                
   1638                if (g_Ans_ZD_MODBUS_1 >= g_US1_Comm_TIMEOUT)
   1639                {
   1640             
   1641                    g_Ans_ZD_MODBUS_1=0;
   1642                    ModBus_MASTER_TX(1);
   1643                    
   1644                    US0_Counter=1;
   1645                }
   1646                else
   1647                {
   1648                    g_Ans_ZD_MODBUS_1++;
   1649          
   1650                }
   1651              
   1652            }
   1653            else
   1654            {
   1655              US1_Counter++; 
   1656            }
   1657            }
   1658          */
   1659            
   1660            
   1661          
   1662          if (ButtonBipCounter<g_counter) AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                                            ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000016   6248               LDR      R0,??Timer_1ms_0+0x8  ;; ButtonBipCounter
   \   00000018   03C8               LDM      R0!,{R0,R1}
   \   0000001A   9942               CMP      R1,R3
   \   0000001C   06D8               BHI      ??Timer_1ms_1
   \   0000001E   01D3               BCC      ??Timer_1ms_2
   \   00000020   9042               CMP      R0,R2
   \   00000022   03D2               BCS      ??Timer_1ms_1
   \                     ??Timer_1ms_2:
   \   00000024   5F48               LDR      R0,??Timer_1ms_0+0xC  ;; 0xfffff434
   \   00000026   8021               MOVS     R1,#+128
   \   00000028   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000002A   0160               STR      R1,[R0, #+0]
   1663          
   1664            
   1665            
   1666            static int RF_SlaveCounter;
   1667           
   1668            
   1669            
   1670          //TimeOut RF -----
   1671            
   1672          if (RF_Status.AllReady)
   \                     ??Timer_1ms_1:
   \   0000002C   5E4E               LDR      R6,??Timer_1ms_0+0x10  ;; RF_Status
   \   0000002E   B07B               LDRB     R0,[R6, #+14]
   \   00000030   0028               CMP      R0,#+0
   \   00000032   69D0               BEQ      ??Timer_1ms_3
   1673          //{   
   1674            
   1675          //if (RF_Status.Init==0)
   1676          {
   1677            if (RF_Status.MasterMode)
   \   00000034   307B               LDRB     R0,[R6, #+12]
   \   00000036   0028               CMP      R0,#+0
   \   00000038   0FD0               BEQ      ??Timer_1ms_4
   1678            {
   1679              if ((!SlaveMode) && (g_Stop_Program==0))
   \   0000003A   607D               LDRB     R0,[R4, #+21]
   \   0000003C   A17C               LDRB     R1,[R4, #+18]
   \   0000003E   0143               ORRS     R1,R1,R0
   \   00000040   62D1               BNE      ??Timer_1ms_3
   1680              if (g_RF_TimeOutCounter>0)
   \   00000042   5A48               LDR      R0,??Timer_1ms_0+0x14  ;; g_RF_TimeOutCounter
   \   00000044   0178               LDRB     R1,[R0, #+0]
   \   00000046   0029               CMP      R1,#+0
   \   00000048   02D0               BEQ      ??Timer_1ms_5
   1681              {
   1682                g_RF_TimeOutCounter--;
   \   0000004A   491E               SUBS     R1,R1,#+1
   \   0000004C   0170               STRB     R1,[R0, #+0]
   \   0000004E   5BE0               B        ??Timer_1ms_3
   1683           
   1684              }else{
   1685                 g_RF_TimeOutCounter=RF_TimeOut; 
   \                     ??Timer_1ms_5:
   \   00000050   0921               MOVS     R1,#+9
   \   00000052   0170               STRB     R1,[R0, #+0]
   1686                 RF_MasterExecut();
   \   00000054   ........           BL       RF_MasterExecut
   \   00000058   56E0               B        ??Timer_1ms_3
   1687              }
   1688            }else{
   1689                  
   1690                  RF_SlaveCounter++;
   \                     ??Timer_1ms_4:
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   8030               ADDS     R0,R0,#+128
   \   0000005E   0168               LDR      R1,[R0, #+0]
   \   00000060   491C               ADDS     R1,R1,#+1
   \   00000062   0160               STR      R1,[R0, #+0]
   1691               
   1692                  
   1693                    if (RF_Status.ConfResive==2) //je¿eli poprawnie odebrano dane 
   \   00000064   F27A               LDRB     R2,[R6, #+11]
   \   00000066   022A               CMP      R2,#+2
   \   00000068   06D1               BNE      ??Timer_1ms_6
   1694                    {
   1695                      RF_SlaveCounter=0;   //- zeruj licznik
   \   0000006A   0021               MOVS     R1,#+0
   \   0000006C   0160               STR      R1,[R0, #+0]
   1696                      RF_Status.ConfResive=1;
   \   0000006E   0120               MOVS     R0,#+1
   \   00000070   0100               MOVS     R1,R0
   \   00000072   F172               STRB     R1,[R6, #+11]
   1697                      g_SlaveConnect=1;    //ustawia flagê poprawnej transmisji slave
   \   00000074   6074               STRB     R0,[R4, #+17]
   \   00000076   47E0               B        ??Timer_1ms_3
   1698                    }else{
   1699          
   1700                      if (((RF_SlaveCounter==100)  && (RF_Status.ConfResive==0)) //je¿eli nie odebrano danych w czasie 100ms
   1701                      || ((RF_SlaveCounter>=2000) && (RF_Status.ConfResive<2))  //je¿eli nie odebrano danych o w³aœciwym ID w czasie 1000ms
   1702                        )
   \                     ??Timer_1ms_6:
   \   00000078   6429               CMP      R1,#+100
   \   0000007A   01D1               BNE      ??Timer_1ms_7
   \   0000007C   002A               CMP      R2,#+0
   \   0000007E   05D0               BEQ      ??Timer_1ms_8
   \                     ??Timer_1ms_7:
   \   00000080   FA20               MOVS     R0,#+250
   \   00000082   C000               LSLS     R0,R0,#+3        ;; #+2000
   \   00000084   8142               CMP      R1,R0
   \   00000086   3FDB               BLT      ??Timer_1ms_3
   \   00000088   022A               CMP      R2,#+2
   \   0000008A   3DD2               BCS      ??Timer_1ms_3
   1703                      {
   1704                        
   1705                           RF_Status.ConfResive=0;
   \                     ??Timer_1ms_8:
   \   0000008C   0025               MOVS     R5,#+0
   \   0000008E   2800               MOVS     R0,R5
   \   00000090   F072               STRB     R0,[R6, #+11]
   1706                           g_SlaveConnect=0; 
   \   00000092   6074               STRB     R0,[R4, #+17]
   1707                           SPI_SendWord(0x8219,Cs_RF);                          //wy³¹cz odbiornik/nadajnik
                                  ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   00000094   0221               MOVS     R1,#+2
   \   00000096   4648               LDR      R0,??Timer_1ms_0+0x18  ;; 0x8219
   \   00000098   ........           BL       SPI_SendWord
   1708                           if (RF_Status.AllReady) if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=0;}
   \   0000009C   B07B               LDRB     R0,[R6, #+14]
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   06D0               BEQ      ??Timer_1ms_9
   \   000000A2   707B               LDRB     R0,[R6, #+13]
   \   000000A4   2728               CMP      R0,#+39
   \   000000A6   02D2               BCS      ??Timer_1ms_10
   \   000000A8   401C               ADDS     R0,R0,#+1
   \   000000AA   7073               STRB     R0,[R6, #+13]
   \   000000AC   00E0               B        ??Timer_1ms_9
   \                     ??Timer_1ms_10:
   \   000000AE   7573               STRB     R5,[R6, #+13]
   1709                           SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
   \                     ??Timer_1ms_9:
   \   000000B0   0221               MOVS     R1,#+2
   \   000000B2   0D00               MOVS     R5,R1
   \   000000B4   707B               LDRB     R0,[R6, #+13]
   \   000000B6   ........           BL       __aeabi_ui2d
   \   000000BA   0200               MOVS     R2,R0
   \   000000BC   0B00               MOVS     R3,R1
   \   000000BE   3D48               LDR      R0,??Timer_1ms_0+0x1C  ;; 0x33333333
   \   000000C0   3D49               LDR      R1,??Timer_1ms_0+0x20  ;; 0x3fd33333
   \   000000C2   ........           BL       __aeabi_dmul
   \   000000C6   0200               MOVS     R2,R0
   \   000000C8   0B00               MOVS     R3,R1
   \   000000CA   3C48               LDR      R0,??Timer_1ms_0+0x24  ;; 0x5c28f5c3
   \   000000CC   3C49               LDR      R1,??Timer_1ms_0+0x28  ;; 0x408ae28f
   \   000000CE   ........           BL       __aeabi_dadd
   \   000000D2   0200               MOVS     R2,R0
   \   000000D4   0B00               MOVS     R3,R1
   \   000000D6   0020               MOVS     R0,#+0
   \   000000D8   3A49               LDR      R1,??Timer_1ms_0+0x2C  ;; 0x40690000
   \   000000DA   ........           BL       __aeabi_dmul
   \   000000DE   0200               MOVS     R2,R0
   \   000000E0   0B00               MOVS     R3,R1
   \   000000E2   0020               MOVS     R0,#+0
   \   000000E4   3849               LDR      R1,??Timer_1ms_0+0x30  ;; 0xc104ff00
   \   000000E6   ........           BL       __aeabi_dadd
   \   000000EA   ........           BL       __aeabi_d2iz
   \   000000EE   0004               LSLS     R0,R0,#+16
   \   000000F0   0014               ASRS     R0,R0,#+16
   \   000000F2   A021               MOVS     R1,#+160
   \   000000F4   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   000000F6   0143               ORRS     R1,R1,R0
   \   000000F8   0800               MOVS     R0,R1
   \   000000FA   2900               MOVS     R1,R5
   \   000000FC   ........           BL       SPI_SendWord
   1710                           SPI_SendWord(0x8299,Cs_RF);                          //w³¹cz odbiornik
   \   00000100   2900               MOVS     R1,R5
   \   00000102   3248               LDR      R0,??Timer_1ms_0+0x34  ;; 0x8299
   \   00000104   ........           BL       SPI_SendWord
   1711                        
   1712                      }
   1713                      
   1714                    }
   1715                   
   1716                    
   1717            }
   1718          }          
   1719          
   1720            
   1721          
   1722            
   1723                //uruchomienie Timer_1s co 1000 cykli-------------------------------------------
   1724                static short CounterForTimer1s; 
   1725                if (CounterForTimer1s<1000)
   \                     ??Timer_1ms_3:
   \   00000108   2E20               MOVS     R0,#+46
   \   0000010A   205E               LDRSH    R0,[R4, R0]
   \   0000010C   FA21               MOVS     R1,#+250
   \   0000010E   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000110   8842               CMP      R0,R1
   \   00000112   02DA               BGE      ??Timer_1ms_11
   1726                {
   1727                    CounterForTimer1s++;
   \   00000114   401C               ADDS     R0,R0,#+1
   \   00000116   E085               STRH     R0,[R4, #+46]
   \   00000118   03E0               B        ??Timer_1ms_12
   1728                }else{
   1729                    CounterForTimer1s=0;
   \                     ??Timer_1ms_11:
   \   0000011A   0020               MOVS     R0,#+0
   \   0000011C   E085               STRH     R0,[R4, #+46]
   1730                    Timer_1s();
   \   0000011E   ........           BL       Timer_1s
   1731                }
   1732          
   1733          
   1734          
   1735            
   1736            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ TimeUnitQual
   1737            if (++CurTimeQual>=TimeUnitQual)
   \                     ??Timer_1ms_12:
   \   00000122   2C20               MOVS     R0,#+44
   \   00000124   205E               LDRSH    R0,[R4, R0]
   \   00000126   401C               ADDS     R0,R0,#+1
   \   00000128   A085               STRH     R0,[R4, #+44]
   \   0000012A   9621               MOVS     R1,#+150
   \   0000012C   4900               LSLS     R1,R1,#+1        ;; #+300
   \   0000012E   0004               LSLS     R0,R0,#+16
   \   00000130   0014               ASRS     R0,R0,#+16
   \   00000132   8842               CMP      R0,R1
   \   00000134   2CDB               BLT      ??Timer_1ms_13
   1738            {
   1739              CurTimeQual=0;
   \   00000136   0025               MOVS     R5,#+0
   \   00000138   2800               MOVS     R0,R5
   \   0000013A   A085               STRH     R0,[R4, #+44]
   1740              if (TransQuality.MensurIndex<32)
   \   0000013C   2448               LDR      R0,??Timer_1ms_0+0x38  ;; TransQuality
   \   0000013E   0178               LDRB     R1,[R0, #+0]
   \   00000140   2029               CMP      R1,#+32
   \   00000142   02D2               BCS      ??Timer_1ms_14
   1741              {
   1742                TransQuality.MensurIndex++; 
   \   00000144   491C               ADDS     R1,R1,#+1
   \   00000146   0170               STRB     R1,[R0, #+0]
   \   00000148   01E0               B        ??Timer_1ms_15
   1743              }else{
   1744                TransQuality.MensurIndex=0;
   \                     ??Timer_1ms_14:
   \   0000014A   2900               MOVS     R1,R5
   \   0000014C   0170               STRB     R1,[R0, #+0]
   1745              }
   1746              if (TransQuality.QuickMensurIndex<4)
   \                     ??Timer_1ms_15:
   \   0000014E   8178               LDRB     R1,[R0, #+2]
   \   00000150   0429               CMP      R1,#+4
   \   00000152   02D2               BCS      ??Timer_1ms_16
   1747              {
   1748                TransQuality.QuickMensurIndex++; 
   \   00000154   491C               ADDS     R1,R1,#+1
   \   00000156   8170               STRB     R1,[R0, #+2]
   \   00000158   17E0               B        ??Timer_1ms_17
   1749              }else{
   1750                TransQuality.QuickMensurIndex=0;
   \                     ??Timer_1ms_16:
   \   0000015A   2900               MOVS     R1,R5
   \   0000015C   8170               STRB     R1,[R0, #+2]
   1751              }
   1752          
   1753              for (char i=0; i<NumberNeurons; i++) 
   \   0000015E   14E0               B        ??Timer_1ms_17
   1754              {
   1755                TransQuality.Mensur[i] &= ~(0x1 << TransQuality.MensurIndex);
   \                     ??Timer_1ms_18:
   \   00000160   8A00               LSLS     R2,R1,#+2
   \   00000162   8218               ADDS     R2,R0,R2
   \   00000164   D36C               LDR      R3,[R2, #+76]
   \   00000166   0124               MOVS     R4,#+1
   \   00000168   0678               LDRB     R6,[R0, #+0]
   \   0000016A   B440               LSLS     R4,R4,R6
   \   0000016C   A343               BICS     R3,R3,R4
   \   0000016E   D364               STR      R3,[R2, #+76]
   1756                TransQuality.QuickMensur[i] &= ~(0x1 << TransQuality.QuickMensurIndex);
   \   00000170   4118               ADDS     R1,R0,R1
   \   00000172   2622               MOVS     R2,#+38
   \   00000174   0B00               MOVS     R3,R1
   \   00000176   2633               ADDS     R3,R3,#+38
   \   00000178   1B78               LDRB     R3,[R3, #+0]
   \   0000017A   0124               MOVS     R4,#+1
   \   0000017C   8678               LDRB     R6,[R0, #+2]
   \   0000017E   B440               LSLS     R4,R4,R6
   \   00000180   A343               BICS     R3,R3,R4
   \   00000182   8B54               STRB     R3,[R1, R2]
   1757              }                 
   \   00000184   6D1C               ADDS     R5,R5,#+1
   \   00000186   2D06               LSLS     R5,R5,#+24
   \   00000188   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1ms_17:
   \   0000018A   2900               MOVS     R1,R5
   \   0000018C   2329               CMP      R1,#+35
   \   0000018E   E7D3               BCC      ??Timer_1ms_18
   1758            }
   1759          
   1760            
   1761          
   1762                    
   1763                 
   1764          
   1765          
   1766          }//_____________________________________________________________________________
   \                     ??Timer_1ms_13:
   \   00000190   70BC               POP      {R4-R6}
   \   00000192   01BC               POP      {R0}
   \   00000194   0047               BX       R0               ;; return
   \   00000196   C046               Nop      
   \                     ??Timer_1ms_0:
   \   00000198   A000FAFF           DC32     0xfffa00a0
   \   0000019C   ........           DC32     DateTime
   \   000001A0   ........           DC32     ButtonBipCounter
   \   000001A4   34F4FFFF           DC32     0xfffff434
   \   000001A8   ........           DC32     RF_Status
   \   000001AC   ........           DC32     g_RF_TimeOutCounter
   \   000001B0   19820000           DC32     0x8219
   \   000001B4   33333333           DC32     0x33333333
   \   000001B8   3333D33F           DC32     0x3fd33333
   \   000001BC   C3F5285C           DC32     0x5c28f5c3
   \   000001C0   8FE28A40           DC32     0x408ae28f
   \   000001C4   00006940           DC32     0x40690000
   \   000001C8   00FF04C1           DC32     0xc104ff00
   \   000001CC   99820000           DC32     0x8299
   \   000001D0   ........           DC32     TransQuality

   \                                 In section .data, align 8
   \                     DateTime:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     Speaker:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     g_PC_Connected:
   \   0000000C   00                 DC8 0
   \                     g_LightLCDEnable:
   \   0000000D   00                 DC8 0
   \                     g_ScreenSever_On:
   \   0000000E   00                 DC8 0
   \                     g_ScreenSever_Time_On:
   \   0000000F   00                 DC8 0
   \                     g_ScreenSever_Time_Off:
   \   00000010   00                 DC8 0
   \                     g_SlaveConnect:
   \   00000011   00                 DC8 0
   \                     g_Stop_Program:
   \   00000012   00                 DC8 0
   \                     g_NeedPass:
   \   00000013   00                 DC8 0
   \                     AlarmOn:
   \   00000014   00                 DC8 0
   \                     SlaveMode:
   \   00000015   00                 DC8 0
   \                     ForwardUSB2Serialferst:
   \   00000016   00                 DC8 0
   \                     g_PC_Connected_timeout:
   \   00000017   05                 DC8 5
   \                     FlagChangeTime:
   \   00000018   00                 DC8 0
   \   00000019   00                 DC8 0
   \   0000001A   64                 DC8 100
   \   0000001B   00                 DC8 0
   \                     g_Password_1:
   \   0000001C   3131313100         DC8 "1111"
   \   00000021   000000             DC8 0, 0, 0
   \                     Y_down:
   \   00000024   FFFF               DC16 -1
   \                     X_down:
   \   00000026   FFFF               DC16 -1
   \                     Y_up:
   \   00000028   FFFF               DC16 -1
   \                     X_up:
   \   0000002A   FFFF               DC16 -1
   \                     CurTimeQual:
   \   0000002C   0000               DC16 0
   \   0000002E   0000               DC8 0, 0
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     g_counter:
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     g_NextTimeProgram:
   \   00000048   000000000000       DC32 0, 0
   \              0000        
   \                     FlashProgramOfset:
   \   00000050   00010000           DC32 256
   \                     g_seconds_counter:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     g_LightCouterLCD:
   \   00000058   00000000           DC32 0
   \                     pAT91C_IFLASH_MEM:
   \   0000005C   00001300           DC32 130000H
   \                     SourRam:
   \   00000060   00000000           DC8 0, 0, 0, 0
   \                     siz:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \                     LiczOds:
   \   00000068   00000000           DC32 0
   \                     CyklPerSekCount:
   \   0000006C   00000000           DC32 0
   \                     TransLoopTime:
   \   00000070   00000000           DC32 0
   \                     CyklPerSek:
   \   00000074   01000000           DC32 1
   \                     MenuLevel_old:
   \   00000078   00000000           DC8 0, 0, 0, 0
   \   0000007C   00000000           DC8 0, 0, 0, 0
   \   00000080   00000000           DC8 0, 0, 0, 0
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000098   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000108   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000118   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000128   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000138   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000148   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000158   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000168   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000178   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000188   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000198   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000208   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000218   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000228   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000238   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000248   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000258   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000268   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000278   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000288   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000298   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000308   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000318   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000328   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000338   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000348   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000358   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000368   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000378   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000388   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000398   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000408   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000418   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000428   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000438   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000448   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000458   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000468   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000478   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000488   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000498   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F8   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000508   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000518   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000528   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000538   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000548   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000558   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000568   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000578   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .data, align 4
   \                     FlashProgramReserveOfset:
   \   00000000   D8D70000           DC32 55256

   \                                 In section .data, align 4
   \                     g_Password_2:
   \   00000000   3232323200         DC8 "2222"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .data, align 1
   \                     AdressModbus:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 1
   \                     g_Restart_Program:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 8
   \                     AlarmScreenAction:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     out:
   \   00000010   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
   \              010101010000
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In section .data, align 4
   \                     pEndpoints:
   \   00000000   000000000000       DC32 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000020   01000000           DC8 1, 0, 0, 0
   \   00000024   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000048   02000000           DC8 2, 0, 0, 0
   \   0000004C   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000070   02000000           DC8 2, 0, 0, 0
   \   00000074   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000098   01000000           DC8 1, 0, 0, 0
   \   0000009C   00000000           DC32 0

   \                                 In section .data, align 4
   \                     tProgramTabSize:
   \   00000000   70C60000           DC32 50800

   \                                 In section .data, align 4
   \                     stop:
   \   00000000   D0070000           DC32 2000

   \                                 In section .data, align 4
   \                     X_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     X_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_down_old:
   \   00000000   FFFFFFFF           DC32 -1
   1767          
   1768          
   1769          
   1770          
   1771          
   1772          //-----------------------------------------------------------------------------
   1773          //!  Nazwa funkcji :    Timer_1_Setup
   1774          //!  Funkcja inicjalizacji Timer1 - 1ms
   1775          //-----------------------------------------------------------------------------
   1776          //! 
   1777          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1778          void Timer_1ms_Setup(void) 
   1779          { 
   1780            //TRACE_INFO("T2_setup");  
   1781            //TRACE_INFO("\n\r"); 
   1782            
   1783           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
   1784           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
   1785           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC2] = (unsigned int)Timer_1ms;  //set AIC             
   \                     Timer_1ms_Setup:
   \   00000000   1148               LDR      R0,??Timer_1ms_Setup_0  ;; 0xfffff0b8
   \   00000002   1249               LDR      R1,??Timer_1ms_Setup_0+0x4  ;; Timer_1ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1786           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC2] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_1mS_PRIOR ); 
   \   00000006   1248               LDR      R0,??Timer_1ms_Setup_0+0x8  ;; 0xfffff038
   \   00000008   0421               MOVS     R1,#+4
   \   0000000A   0160               STR      R1,[R0, #+0]
   1787           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC2);      //enable clock 
   \   0000000C   0803               LSLS     R0,R1,#+12
   \   0000000E   1149               LDR      R1,??Timer_1ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
   1788           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   1149               LDR      R1,??Timer_1ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
   1789           //no external clocks 
   1790           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   1049               LDR      R1,??Timer_1ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
   1791           AT91C_BASE_TC2->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   1049               LDR      R1,??Timer_1ms_Setup_0+0x18  ;; 0xfffa0080
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
   1792           AT91C_BASE_TC2->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0F49               LDR      R1,??Timer_1ms_Setup_0+0x1C  ;; 0xfffa0084
   \   00000026   104A               LDR      R2,??Timer_1ms_Setup_0+0x20  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
   1793           //clock: MCK/1024  = 48054841/ DIV
   1794           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
   1795           //! DIV5 - 1024
   1796           //! DIV4 - 128
   1797           //! DIV3 - 32
   1798           //! DIV2 - 8
   1799           
   1800           AT91C_BASE_TC2->TC_RC = 6007;                  //1ms  (z wyliczeñ 6007)
   \   0000002A   1049               LDR      R1,??Timer_1ms_Setup_0+0x24  ;; 0xfffa009c
   \   0000002C   104A               LDR      R2,??Timer_1ms_Setup_0+0x28  ;; 0x1777
   \   0000002E   0A60               STR      R2,[R1, #+0]
   1801           AT91C_BASE_TC2->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000030   1049               LDR      R1,??Timer_1ms_Setup_0+0x2C  ;; 0xfffa00a4
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
   1802           AT91C_BASE_TC2->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   1049               LDR      R1,??Timer_1ms_Setup_0+0x30  ;; 0xfffa00a8
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
   1803           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC2);       //enable int 
   \   0000003C   0F49               LDR      R1,??Timer_1ms_Setup_0+0x34  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
   1804           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC2);       //clear int 
   \   00000040   0F49               LDR      R1,??Timer_1ms_Setup_0+0x38  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
   1805          
   1806          
   1807          
   1808          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_1ms_Setup_0:
   \   00000048   B8F0FFFF           DC32     0xfffff0b8
   \   0000004C   ........           DC32     Timer_1ms
   \   00000050   38F0FFFF           DC32     0xfffff038
   \   00000054   10FCFFFF           DC32     0xfffffc10
   \   00000058   C000FAFF           DC32     0xfffa00c0
   \   0000005C   C400FAFF           DC32     0xfffa00c4
   \   00000060   8000FAFF           DC32     0xfffa0080
   \   00000064   8400FAFF           DC32     0xfffa0084
   \   00000068   01C00C00           DC32     0xcc001
   \   0000006C   9C00FAFF           DC32     0xfffa009c
   \   00000070   77170000           DC32     0x1777
   \   00000074   A400FAFF           DC32     0xfffa00a4
   \   00000078   A800FAFF           DC32     0xfffa00a8
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1809          
   1810          
   1811          
   1812          
   1813          
   1814          
   1815          
   1816          
   1817          
   1818          

   \                                 In section Debug.txt, align 4, keep-with-next
   1819          void RamToFlash(void)
   1820          {
   \                     RamToFlash:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1821          
   1822            DispWait=1; 
   \   00000002   2F4C               LDR      R4,??RamToFlash_0  ;; DispWait
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   2070               STRB     R0,[R4, #+0]
   1823            Wait_Paint();
   \   00000008   ........           BL       Wait_Paint
   1824            
   1825                      gProg.Preambu=ProgPreambu;
   \   0000000C   2D4D               LDR      R5,??RamToFlash_0+0x4  ;; gProg
   \   0000000E   AA20               MOVS     R0,#+170
   \   00000010   2870               STRB     R0,[R5, #+0]
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   6870               STRB     R0,[R5, #+1]
   \   00000016   2C48               LDR      R0,??RamToFlash_0+0x8  ;; 0xc670
   \   00000018   6880               STRH     R0,[R5, #+2]
   1826                      gProg.ProgFormatTyp=_ProgFormatTyp;
   1827                      gProg.Size=sizeof(gProg);
   1828                      gProg.ModyfiData[0]='2';gProg.ModyfiData[1]='0';
   \   0000001A   3220               MOVS     R0,#+50
   \   0000001C   2871               STRB     R0,[R5, #+4]
   \   0000001E   3020               MOVS     R0,#+48
   \   00000020   6871               STRB     R0,[R5, #+5]
   1829                      CharToStr(DateTime.Year, &(gProg.ModyfiData[2]), 2); 
   \   00000022   2A4E               LDR      R6,??RamToFlash_0+0xC  ;; DateTime
   \   00000024   0222               MOVS     R2,#+2
   \   00000026   2900               MOVS     R1,R5
   \   00000028   891D               ADDS     R1,R1,#+6
   \   0000002A   3078               LDRB     R0,[R6, #+0]
   \   0000002C   ........           BL       CharToStr
   1830                      gProg.ModyfiData[4]='-';
   \   00000030   2D27               MOVS     R7,#+45
   \   00000032   2F72               STRB     R7,[R5, #+8]
   1831                      CharToStr(DateTime.Mounth, &(gProg.ModyfiData[5]), 2);
   \   00000034   0222               MOVS     R2,#+2
   \   00000036   2900               MOVS     R1,R5
   \   00000038   0931               ADDS     R1,R1,#+9
   \   0000003A   7078               LDRB     R0,[R6, #+1]
   \   0000003C   ........           BL       CharToStr
   1832                      gProg.ModyfiData[7]='-'; 
   \   00000040   EF72               STRB     R7,[R5, #+11]
   1833                      CharToStr(DateTime.Day, &(gProg.ModyfiData[8]), 2); 
   \   00000042   0222               MOVS     R2,#+2
   \   00000044   2900               MOVS     R1,R5
   \   00000046   0C31               ADDS     R1,R1,#+12
   \   00000048   B078               LDRB     R0,[R6, #+2]
   \   0000004A   ........           BL       CharToStr
   1834                      gProg.ModyfiData[10]=' ';
   \   0000004E   2020               MOVS     R0,#+32
   \   00000050   A873               STRB     R0,[R5, #+14]
   1835                      CharToStr(DateTime.Hour, &(gProg.ModyfiData[11]), 2); 
   \   00000052   0222               MOVS     R2,#+2
   \   00000054   2900               MOVS     R1,R5
   \   00000056   0F31               ADDS     R1,R1,#+15
   \   00000058   F078               LDRB     R0,[R6, #+3]
   \   0000005A   ........           BL       CharToStr
   1836                      gProg.ModyfiData[13]=':';
   \   0000005E   3A27               MOVS     R7,#+58
   \   00000060   6F74               STRB     R7,[R5, #+17]
   1837                      CharToStr(DateTime.Minute, &(gProg.ModyfiData[14]), 2); 
   \   00000062   0222               MOVS     R2,#+2
   \   00000064   2900               MOVS     R1,R5
   \   00000066   1231               ADDS     R1,R1,#+18
   \   00000068   3079               LDRB     R0,[R6, #+4]
   \   0000006A   ........           BL       CharToStr
   1838                      gProg.ModyfiData[16]=':';
   \   0000006E   2F75               STRB     R7,[R5, #+20]
   1839                      CharToStr(DateTime.Second, &(gProg.ModyfiData[17]), 2); 
   \   00000070   0222               MOVS     R2,#+2
   \   00000072   2900               MOVS     R1,R5
   \   00000074   1531               ADDS     R1,R1,#+21
   \   00000076   7079               LDRB     R0,[R6, #+5]
   \   00000078   ........           BL       CharToStr
   1840                      for (char i=0; i<19; i++) if (gProg.ModyfiData[i]==0) gProg.ModyfiData[i]='0';
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   08E0               B        ??RamToFlash_1
   \                     ??RamToFlash_2:
   \   00000080   6918               ADDS     R1,R5,R1
   \   00000082   0A79               LDRB     R2,[R1, #+4]
   \   00000084   002A               CMP      R2,#+0
   \   00000086   01D1               BNE      ??RamToFlash_3
   \   00000088   3022               MOVS     R2,#+48
   \   0000008A   0A71               STRB     R2,[R1, #+4]
   \                     ??RamToFlash_3:
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   0006               LSLS     R0,R0,#+24
   \   00000090   000E               LSRS     R0,R0,#+24
   \                     ??RamToFlash_1:
   \   00000092   0100               MOVS     R1,R0
   \   00000094   1329               CMP      R1,#+19
   \   00000096   F3D3               BCC      ??RamToFlash_2
   1841          
   1842                        unsigned int Save = __get_interrupt_state();            
   \   00000098   ........           BL       __iar_get_interrupt_state
   \   0000009C   0700               MOVS     R7,R0
   1843                        __disable_interrupt();
   \   0000009E   ........           BL       __iar_disable_interrupt
   1844                        //CleanFlash(AT91C_IFLASH_MEM->FlashProgram,sizeof(gProg));
   1845                        FlashWrite((char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset), (char*)&gProg,sizeof(gProg)); //(char *ptrMem, char *value, int length)
                               ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   000000A2   094A               LDR      R2,??RamToFlash_0+0x8  ;; 0xc670
   \   000000A4   2900               MOVS     R1,R5
   \   000000A6   306D               LDR      R0,[R6, #+80]
   \   000000A8   094B               LDR      R3,??RamToFlash_0+0x10  ;; 0x130100
   \   000000AA   1818               ADDS     R0,R3,R0
   \   000000AC   ........           BL       FlashWrite
   1846                        //at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,(char*)&gProg,sizeof(gProg));
   1847                        __set_interrupt_state(Save);
   \   000000B0   3800               MOVS     R0,R7
   \   000000B2   ........           BL       __iar_set_interrupt_state
   1848          
   1849           DispWait=2; 
   \   000000B6   0220               MOVS     R0,#+2
   \   000000B8   2070               STRB     R0,[R4, #+0]
   1850          
   1851          }
   \   000000BA   F8BC               POP      {R3-R7}
   \   000000BC   01BC               POP      {R0}
   \   000000BE   0047               BX       R0               ;; return
   \                     ??RamToFlash_0:
   \   000000C0   ........           DC32     DispWait
   \   000000C4   ........           DC32     gProg
   \   000000C8   70C60000           DC32     0xc670
   \   000000CC   ........           DC32     DateTime
   \   000000D0   00011300           DC32     0x130100
   1852          
   1853          
   1854          
   1855          
   1856          

   \                                 In section .bss, align 4
   1857          int testcount=0;
   \                     testcount:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
   1858          void TestHendel(void)
   1859          {
   \                     TestHendel:
   \   00000000   01B5               PUSH     {R0,LR}
   1860            AT91F_PIO_GetInterruptStatus(AT91C_PIO_VBUS);
   \   00000002   0748               LDR      R0,??TestHendel_0  ;; 0xfffff400
   \   00000004   ........           BL       AT91F_PIO_GetInterruptStatus
   1861            if ((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) testcount++;
   \   00000008   0648               LDR      R0,??TestHendel_0+0x4  ;; 0xfffff43c
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8007               LSLS     R0,R0,#+30
   \   0000000E   03D5               BPL      ??TestHendel_1
   \   00000010   0548               LDR      R0,??TestHendel_0+0x8  ;; testcount
   \   00000012   0168               LDR      R1,[R0, #+0]
   \   00000014   491C               ADDS     R1,R1,#+1
   \   00000016   0160               STR      R1,[R0, #+0]
   1862              
   1863          
   1864          }
   \                     ??TestHendel_1:
   \   00000018   08BC               POP      {R3}
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
   \   0000001E   C046               Nop      
   \                     ??TestHendel_0:
   \   00000020   00F4FFFF           DC32     0xfffff400
   \   00000024   3CF4FFFF           DC32     0xfffff43c
   \   00000028   ........           DC32     testcount
   1865          
   1866          

   \                                 In section Debug.txt, align 4, keep-with-next
   1867          void TestInit(void)
   1868          {
   \                     TestInit:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   1869          //#ifndef USB_BUS_POWERED
   1870              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   00000002   154C               LDR      R4,??TestInit_0  ;; 0xfffff400
   \   00000004   0221               MOVS     R1,#+2
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       AT91F_PIO_CfgInput
   1871              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   0000000C   1348               LDR      R0,??TestInit_0+0x4  ;; 0xfffff460
   \   0000000E   0221               MOVS     R1,#+2
   \   00000010   0160               STR      R1,[R0, #+0]
   1872              
   1873              // Configure VBus monitoring
   1874                  AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, 1 << AT91C_ID_VBUS);
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   1248               LDR      R0,??TestInit_0+0x8  ;; 0xfffffc00
   \   00000016   ........           BL       AT91F_PMC_EnablePeriphClock
   1875              AT91F_PIO_CfgPullup(AT91C_PIO_VBUS, ~AT91C_VBUS);
   \   0000001A   0221               MOVS     R1,#+2
   \   0000001C   C943               MVNS     R1,R1            ;; #-3
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       AT91F_PIO_CfgPullup
   1876              AT91F_PIO_CfgInput(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000024   0221               MOVS     R1,#+2
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       AT91F_PIO_CfgInput
   1877          
   1878              // Configure and enable the Vbus detection interrupt
   1879              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
   1880                                    AT91C_ID_VBUS,
   1881                                    5, //AT91C_AIC_PRIOR_LOWEST,
   1882                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
   1883                                    ISR_VBus);
   \   0000002C   0D4D               LDR      R5,??TestInit_0+0xC  ;; 0xfffff000
   \   0000002E   82B0               SUB      SP,SP,#+8
   \   00000030   0D48               LDR      R0,??TestInit_0+0x10  ;; ISR_VBus
   \   00000032   0090               STR      R0,[SP, #+0]
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   0522               MOVS     R2,#+5
   \   00000038   0221               MOVS     R1,#+2
   \   0000003A   2800               MOVS     R0,R5
   \   0000003C   ........           BL       AT91F_AIC_ConfigureIt
   \   00000040   02B0               ADD      SP,SP,#+8
   1884          
   1885              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   2000               MOVS     R0,R4
   \   00000046   ........           BL       AT91F_PIO_InterruptEnable
   1886              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
   \   0000004A   0221               MOVS     R1,#+2
   \   0000004C   2800               MOVS     R0,R5
   \   0000004E   ........           BL       AT91F_AIC_EnableIt
   1887          }
   \   00000052   38BC               POP      {R3-R5}
   \   00000054   01BC               POP      {R0}
   \   00000056   0047               BX       R0               ;; return
   \                     ??TestInit_0:
   \   00000058   00F4FFFF           DC32     0xfffff400
   \   0000005C   60F4FFFF           DC32     0xfffff460
   \   00000060   00FCFFFF           DC32     0xfffffc00
   \   00000064   00F0FFFF           DC32     0xfffff000
   \   00000068   ........           DC32     ISR_VBus
   1888          
   1889          
   1890          
   1891          
   1892          
   1893          
   1894          //------------------------------------------------------------------------------
   1895          //!          Main
   1896          //------------------------------------------------------------------------------
   1897          
   1898          //char ekran_tab[8][128]; 
   1899          

   \                                 In section .bss, align 4
   1900          char string[25];
   \                     string:
   \   00000000                      DS8 28
   1901          

   \                                 In section Debug.txt, align 4, keep-with-next
   1902          void watchdogEnable(int millis)
   1903          {
   \                     watchdogEnable:
   \   00000000   01B5               PUSH     {R0,LR}
   1904            int period = (millis * 256) / 1000;
   \   00000002   0002               LSLS     R0,R0,#+8
   \   00000004   FA21               MOVS     R1,#+250
   \   00000006   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000008   ........           BL       __aeabi_idivmod
   1905            AT91C_BASE_WDTC->WDTC_WDMR =  AT91C_WDTC_WDRSTEN |        // enable reset on timeout
   1906                                          AT91C_WDTC_WDDBGHLT |       // respect debug mode
   1907                                          AT91C_WDTC_WDIDLEHLT |      // respect idle mode
   1908                                          ((period << 16 ) & AT91C_WDTC_WDD) | // delta is as wide as the period, so we can restart anytime
   1909                                          (period & AT91C_WDTC_WDV);  // set the period
   \   0000000C   0649               LDR      R1,??watchdogEnable_0  ;; 0xfffffd44
   \   0000000E   0204               LSLS     R2,R0,#+16
   \   00000010   064B               LDR      R3,??watchdogEnable_0+0x4  ;; 0xfff0000
   \   00000012   1340               ANDS     R3,R3,R2
   \   00000014   0005               LSLS     R0,R0,#+20
   \   00000016   000D               LSRS     R0,R0,#+20
   \   00000018   1843               ORRS     R0,R0,R3
   \   0000001A   054A               LDR      R2,??watchdogEnable_0+0x8  ;; 0x30002000
   \   0000001C   0243               ORRS     R2,R2,R0
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1910          }
   \   00000020   08BC               POP      {R3}
   \   00000022   01BC               POP      {R0}
   \   00000024   0047               BX       R0               ;; return
   \   00000026   C046               Nop      
   \                     ??watchdogEnable_0:
   \   00000028   44FDFFFF           DC32     0xfffffd44
   \   0000002C   0000FF0F           DC32     0xfff0000
   \   00000030   00200030           DC32     0x30002000
   1911          
   1912          
   1913          
   1914          
   1915          
   1916          
   1917          
   1918          
   1919          
   1920          
   1921          #define WATCHDOG_KEY (0xA5 << 24)
   1922          

   \                                 In section .data, align 4
   1923          char TimeCompil[]= __TIME__;
   \                     TimeCompil:
   \   00000000   31363A35333A       DC8 "16:53:25"
   \              323500      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .data, align 4
   1924          char DateCompil[]= __DATE__;
   \                     DateCompil:
   \   00000000   417072203233       DC8 "Apr 23 2012"
   \              203230313200
   1925          
   1926          
   1927          
   1928          
   1929          #ifdef _LIVE_RJESTR 
   1930          int LIVE_TAB_IDX=0;  
   1931          unsigned short LIVE_TAB[LIVE_TAB_SIZE];  //   | A-Odczyt, B-potwierdzenie odczytu, C-Zapis F-flaga priorytetu | Nr wêz³a |  wartoœæ | | 
   1932          #endif
   1933              
   1934          

   \                                 In section Debug.txt, align 4, keep-with-next
   1935          void main()
   1936          {
   \                     main:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1937              LCD_INIT();
   \   00000002   ........           BL       AT91F_LCD_Init
   1938              Init_LCD_TS();           //inicjalizacja Touchpanel`a
   \   00000006   ........           BL       Init_LCD_TS
   1939              CleanCanvas(); 
   \   0000000A   ........           BL       CleanCanvas
   1940              MenuPaint();    
   \   0000000E   ........           BL       MenuPaint
   1941              RepaintLCD();
   \   00000012   ........           BL       RepaintLCD
   1942              RepaintLCD();     
   \   00000016   ........           BL       RepaintLCD
   \   0000001A   9C4C               LDR      R4,??main_0      ;; RF_Status
   \   0000001C   0120               MOVS     R0,#+1
   \   0000001E   2070               STRB     R0,[R4, #+0]
   1943            
   1944              RF_Status.Init=1;
   1945              
   1946              AT91F_PIO_CfgOutput(AT91C_BASE_PIOA, SpeakerPin);
                                                          ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000020   8025               MOVS     R5,#+128
   \   00000022   2D06               LSLS     R5,R5,#+24       ;; #-2147483648
   \   00000024   2900               MOVS     R1,R5
   \   00000026   9A48               LDR      R0,??main_0+0x4  ;; 0xfffff400
   \   00000028   ........           BL       AT91F_PIO_CfgOutput
   1947              AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000002C   9948               LDR      R0,??main_0+0x8  ;; 0xfffff434
   \   0000002E   0560               STR      R5,[R0, #+0]
   1948              //uruchomienie Watchdog`a na 50s 
   1949              //watchdogEnable(50000);  
   1950              //AT91F_WDTRestart(AT91C_BASE_WDTC);
   1951              //AT91C_BASE_WDTC->WDTC_WDMR=(unsigned int) AT91C_WDTC_WDV|AT91C_WDTC_WDRSTEN | AT91C_WDTC_WDD|0x0<<15;
   1952          
   1953              AT91C_BASE_WDTC->WDTC_WDMR=AT91C_WDTC_WDDIS; 
   \   00000030   9948               LDR      R0,??main_0+0xC  ;; 0xfffffd44
   \   00000032   290C               LSRS     R1,R5,#+16
   \   00000034   0160               STR      R1,[R0, #+0]
   1954          
   1955              SpiMaster_Init();
   \   00000036   ........           BL       SpiMaster_Init
   1956              
   1957              __enable_interrupt(); 
   \   0000003A   ........           BL       __iar_enable_interrupt
   1958          
   1959             InitRTC();  
   \   0000003E   ........           BL       InitRTC
   1960              GetDateTimeFromRTC(); 
   \   00000042   ........           BL       GetDateTimeFromRTC
   1961           
   1962              InitFramework();
   \   00000046   ........           BL       InitFramework
   1963          
   1964              SER_Init(&sSer, &sUsb);  // Initialize the serial driver
   \   0000004A   944F               LDR      R7,??main_0+0x10  ;; DateTime
   \   0000004C   944D               LDR      R5,??main_0+0x14  ;; sUsb
   \   0000004E   2900               MOVS     R1,R5
   \   00000050   3800               MOVS     R0,R7
   \   00000052   8430               ADDS     R0,R0,#+132
   \   00000054   ........           BL       SER_Init
   1965          
   1966              InitFlash();  
   \   00000058   ........           BL       InitFlash
   1967            
   1968              
   1969              Init_LCD_Light_PWM();
                     ^
Warning[Pe223]: function "Init_LCD_Light_PWM" declared implicitly
   \   0000005C   ........           BL       Init_LCD_Light_PWM
   1970              
   1971              __enable_interrupt();    
   \   00000060   ........           BL       __iar_enable_interrupt
   \   00000064   8F48               LDR      R0,??main_0+0x18  ;; gProg
   1972           
   1973            
   1974              
   1975              
   1976              //******************************************************************************
   1977              //Ustawienia dla pierwszego uruchomienia starownika ****************************
   1978                if (pAT91C_IFLASH_MEM->Config.FerstRun!=0x0A)
   1979                {
   1980                  char WriteTmp;
                              ^
Warning[Pe177]: variable "WriteTmp" was declared but never referenced
   1981                 //zapis ustawieñ do flasha 
   1982                  /*
   1983                 unsigned int Save = __get_interrupt_state();            
   1984                 __disable_interrupt();
   1985                     //uruchomiono sterownik  
   1986                     WriteTmp=0xA;    FlashWrite((char*)&(AT91C_IFLASH_MEM->Config.FerstRun),&WriteTmp,1);
   1987                 __set_interrupt_state(Save);
   1988                  */
   1989                   //RamToFlash();
   1990                  }
   1991                
   1992          
   1993                
   1994              //Koniec ustawieñ dla pierwszego uruchomienia starownika ***********************
   1995              //******************************************************************************
   1996          
   1997              ProgramChangeExecute(&gProg); 
   \   00000066   ........           BL       ProgramChangeExecute
   1998              ThermostatsTimeChartExecute();
   \   0000006A   ........           BL       ThermostatsTimeChartExecute
   1999              
   2000           //   US0_init();                                                                //inicjalizacja USART0
   2001             
   2002          #ifdef __WIFI_MODULE    
   2003              US1_init();                                                                 //inicjalizacja USART1
   2004          #endif
   2005              
   2006           //   Timer_10us_Setup();
   2007              Timer_1ms_Setup();
   \   0000006E   ........           BL       Timer_1ms_Setup
   2008              Timer_10ms_Setup();
   \   00000072   ........           BL       Timer_10ms_Setup
   \   00000076   0020               MOVS     R0,#+0
   \   00000078   8B49               LDR      R1,??main_0+0x1C  ;; 0xefffff
   \   0000007A   01E0               B        ??main_1
   2009              
   2010              //Timer_1s();   
   2011                
   2012              for (int aaa=0; aaa<0xEFFFFF; aaa++)
   2013                      {
   2014                        asm( "nop" );
   \                     ??main_2:
   \   0000007C   C046               nop              
   2015                      }       
   \   0000007E   401C               ADDS     R0,R0,#+1
   \                     ??main_1:
   \   00000080   8842               CMP      R0,R1
   \   00000082   FBDB               BLT      ??main_2
   2016          
   2017              g_ScreenSever_On=pAT91C_IFLASH_MEM->Config.ScreenSever_On;
   \   00000084   8948               LDR      R0,??main_0+0x20  ;; 0xd7e6
   \   00000086   F96D               LDR      R1,[R7, #+92]
   \   00000088   0818               ADDS     R0,R1,R0
   \   0000008A   0179               LDRB     R1,[R0, #+4]
   \   0000008C   B973               STRB     R1,[R7, #+14]
   2018              g_ScreenSever_Time_On=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_On;
   \   0000008E   4179               LDRB     R1,[R0, #+5]
   \   00000090   F973               STRB     R1,[R7, #+15]
   2019              g_ScreenSever_Time_Off=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_Off;
   \   00000092   8179               LDRB     R1,[R0, #+6]
   \   00000094   3974               STRB     R1,[R7, #+16]
   2020              
   2021          
   2022          
   2023          
   2024              
   2025              
   2026           
   2027          //uruchomienie RF
   2028              
   2029              //odczyt kanalu z flasha ------------------------------ 
   2030              
   2031              SlaveMode=pAT91C_IFLASH_MEM->Config.SlaveMode;
   \   00000096   8178               LDRB     R1,[R0, #+2]
   \   00000098   7975               STRB     R1,[R7, #+21]
   2032              RF_Status.Ch=pAT91C_IFLASH_MEM->Config.RF_channel;
   \   0000009A   0078               LDRB     R0,[R0, #+0]
   \   0000009C   6073               STRB     R0,[R4, #+13]
   2033              if (RF_Status.Ch==0) RF_Status.Ch=1;
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   01D1               BNE      ??main_3
   \   000000A2   0120               MOVS     R0,#+1
   \   000000A4   6073               STRB     R0,[R4, #+13]
   2034              
   2035              
   2036              InitPioInterrupt();
                     ^
Warning[Pe223]: function "InitPioInterrupt" declared implicitly
   \                     ??main_3:
   \   000000A6   ........           BL       InitPioInterrupt
   2037              
   2038              RF_Init();
   \   000000AA   ........           BL       RF_Init
   2039              
   2040              
   2041              char InitRF=1;
   \   000000AE   0126               MOVS     R6,#+1
   \   000000B0   03E0               B        ??main_4
   2042              
   2043              while (InitRF==1)
   2044              { 
   2045                  InitRF=RF_Status.Init;
   \                     ??main_5:
   \   000000B2   2678               LDRB     R6,[R4, #+0]
   2046                  Delay(0x1);
   \   000000B4   0120               MOVS     R0,#+1
   \   000000B6   ........           BL       Delay
   2047              };
   \                     ??main_4:
   \   000000BA   012E               CMP      R6,#+1
   \   000000BC   F9D0               BEQ      ??main_5
   2048          
   2049              
   2050          
   2051              //sprawdzenie kana³u transmisji radiowej
   2052              if (!SlaveMode) //je¿eli master
   \   000000BE   787D               LDRB     R0,[R7, #+21]
   \   000000C0   0028               CMP      R0,#+0
   \   000000C2   48D0               BEQ      ??main_6
   2053              {
   2054                while (RF_CheckChannel())                                                                                            
   2055                {
   2056                  
   2057                  if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   2058                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   2059                }  
   2060                RF_Status.MasterMode=1;
   2061              }else{
   2062               RF_Status.Ch=0;
   \   000000C4   0020               MOVS     R0,#+0
   \   000000C6   6073               STRB     R0,[R4, #+13]
   2063                SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
                       ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   000000C8   0221               MOVS     R1,#+2
   \   000000CA   7948               LDR      R0,??main_0+0x24  ;; 0xa040
   \   000000CC   ........           BL       SPI_SendWord
   2064                RF_Status.MasterMode=0;            
   \   000000D0   0020               MOVS     R0,#+0
   \   000000D2   2073               STRB     R0,[R4, #+12]
   2065              }
   2066          
   2067              RF_Status.AllReady=1;
   \                     ??main_7:
   \   000000D4   0120               MOVS     R0,#+1
   \   000000D6   A073               STRB     R0,[R4, #+14]
   2068              
   2069              
   2070              
   2071          
   2072              
   2073              
   2074              
   2075              //odczyt has³a------------------------------------------    
   2076              if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEC)
   \   000000D8   F86D               LDR      R0,[R7, #+92]
   \   000000DA   7649               LDR      R1,??main_0+0x28  ;; 0xd7dc
   \   000000DC   4118               ADDS     R1,R0,R1
   \   000000DE   0A78               LDRB     R2,[R1, #+0]
   \   000000E0   EC2A               CMP      R2,#+236
   \   000000E2   45D1               BNE      ??main_8
   2077              {//je¿eli nie wymagane has³o
   2078               g_NeedPass=0; 
   \   000000E4   0021               MOVS     R1,#+0
   \   000000E6   F974               STRB     R1,[R7, #+19]
   2079               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   000000E8   734C               LDR      R4,??main_0+0x2C  ;; 0xd7dd
   \                     ??main_9:
   \   000000EA   0A00               MOVS     R2,R1
   \   000000EC   082A               CMP      R2,#+8
   \   000000EE   6AD2               BCS      ??main_10
   \   000000F0   0B00               MOVS     R3,R1
   \   000000F2   FA18               ADDS     R2,R7,R3
   \   000000F4   C318               ADDS     R3,R0,R3
   \   000000F6   1B5D               LDRB     R3,[R3, R4]
   \   000000F8   1377               STRB     R3,[R2, #+28]
   \   000000FA   491C               ADDS     R1,R1,#+1
   \   000000FC   0906               LSLS     R1,R1,#+24
   \   000000FE   090E               LSRS     R1,R1,#+24
   \   00000100   F3E7               B        ??main_9
   2080              }else if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEB)
   \                     ??main_11:
   \   00000102   0120               MOVS     R0,#+1
   \   00000104   6073               STRB     R0,[R4, #+13]
   \                     ??main_12:
   \   00000106   0221               MOVS     R1,#+2
   \   00000108   0E00               MOVS     R6,R1
   \   0000010A   607B               LDRB     R0,[R4, #+13]
   \   0000010C   ........           BL       __aeabi_ui2d
   \   00000110   0200               MOVS     R2,R0
   \   00000112   0B00               MOVS     R3,R1
   \   00000114   6948               LDR      R0,??main_0+0x30  ;; 0x33333333
   \   00000116   6A49               LDR      R1,??main_0+0x34  ;; 0x3fd33333
   \   00000118   ........           BL       __aeabi_dmul
   \   0000011C   0200               MOVS     R2,R0
   \   0000011E   0B00               MOVS     R3,R1
   \   00000120   6848               LDR      R0,??main_0+0x38  ;; 0x5c28f5c3
   \   00000122   6949               LDR      R1,??main_0+0x3C  ;; 0x408ae28f
   \   00000124   ........           BL       __aeabi_dadd
   \   00000128   0200               MOVS     R2,R0
   \   0000012A   0B00               MOVS     R3,R1
   \   0000012C   0020               MOVS     R0,#+0
   \   0000012E   6749               LDR      R1,??main_0+0x40  ;; 0x40690000
   \   00000130   ........           BL       __aeabi_dmul
   \   00000134   0200               MOVS     R2,R0
   \   00000136   0B00               MOVS     R3,R1
   \   00000138   0020               MOVS     R0,#+0
   \   0000013A   6549               LDR      R1,??main_0+0x44  ;; 0xc104ff00
   \   0000013C   ........           BL       __aeabi_dadd
   \   00000140   ........           BL       __aeabi_d2iz
   \   00000144   0100               MOVS     R1,R0
   \   00000146   0904               LSLS     R1,R1,#+16
   \   00000148   0914               ASRS     R1,R1,#+16
   \   0000014A   A020               MOVS     R0,#+160
   \   0000014C   0002               LSLS     R0,R0,#+8        ;; #+40960
   \   0000014E   0843               ORRS     R0,R0,R1
   \   00000150   3100               MOVS     R1,R6
   \   00000152   ........           BL       SPI_SendWord
   \                     ??main_6:
   \   00000156   ........           BL       RF_CheckChannel
   \   0000015A   0028               CMP      R0,#+0
   \   0000015C   05D0               BEQ      ??main_13
   \   0000015E   607B               LDRB     R0,[R4, #+13]
   \   00000160   2728               CMP      R0,#+39
   \   00000162   CED2               BCS      ??main_11
   \   00000164   401C               ADDS     R0,R0,#+1
   \   00000166   6073               STRB     R0,[R4, #+13]
   \   00000168   CDE7               B        ??main_12
   \                     ??main_13:
   \   0000016A   0120               MOVS     R0,#+1
   \   0000016C   2073               STRB     R0,[R4, #+12]
   \   0000016E   B1E7               B        ??main_7
   \                     ??main_8:
   \   00000170   0978               LDRB     R1,[R1, #+0]
   \   00000172   EB29               CMP      R1,#+235
   \   00000174   0FD1               BNE      ??main_14
   2081              {//je¿eli nie wymagane has³o
   2082               g_NeedPass=1; 
   \   00000176   0121               MOVS     R1,#+1
   \   00000178   F974               STRB     R1,[R7, #+19]
   2083               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   0000017A   0021               MOVS     R1,#+0
   \   0000017C   4E4C               LDR      R4,??main_0+0x2C  ;; 0xd7dd
   \                     ??main_15:
   \   0000017E   0A00               MOVS     R2,R1
   \   00000180   082A               CMP      R2,#+8
   \   00000182   20D2               BCS      ??main_10
   \   00000184   0B00               MOVS     R3,R1
   \   00000186   FA18               ADDS     R2,R7,R3
   \   00000188   C318               ADDS     R3,R0,R3
   \   0000018A   1B5D               LDRB     R3,[R3, R4]
   \   0000018C   1377               STRB     R3,[R2, #+28]
   \   0000018E   491C               ADDS     R1,R1,#+1
   \   00000190   0906               LSLS     R1,R1,#+24
   \   00000192   090E               LSRS     R1,R1,#+24
   \   00000194   F3E7               B        ??main_15
   2084              }else
   2085              {//jezeli nie zdefiniowano  - zdefiniuj i zapisz has³o domyœlne i ustaw jako nie wymagane
   2086               
   2087               //zapis has³a do flash
   2088               unsigned int Save = __get_interrupt_state();  
   \                     ??main_14:
   \   00000196   ........           BL       __iar_get_interrupt_state
   \   0000019A   0400               MOVS     R4,R0
   2089               __disable_interrupt();
   \   0000019C   ........           BL       __iar_disable_interrupt
   2090               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])),0,g_Password_1,9);
   2091               
   2092                FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])), g_Password_1, 9);
                       ^
Warning[Pe223]: function "FlashWrite" declared implicitly

  static void CBK_Suspend(const S_usb *pUsb)
              ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 13.03.2012\Framework\main.c",498  Warning[Pe177]: 
          function "CBK_Suspend" was declared but never referenced
   \   000001A0   0922               MOVS     R2,#+9
   \   000001A2   3900               MOVS     R1,R7
   \   000001A4   1C31               ADDS     R1,R1,#+28
   \   000001A6   4B48               LDR      R0,??main_0+0x48  ;; 0x13d7dd
   \   000001A8   ........           BL       FlashWrite
   2093               char NeedPassFlag=0xEC;
   \   000001AC   6846               MOV      R0,SP
   \   000001AE   EC21               MOVS     R1,#+236
   \   000001B0   0170               STRB     R1,[R0, #+0]
   2094               g_NeedPass=0; 
   \   000001B2   0020               MOVS     R0,#+0
   \   000001B4   F874               STRB     R0,[R7, #+19]
   2095               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)),0,&NeedPassFlag,1);
   2096               FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)), &NeedPassFlag, 1);
   \   000001B6   0122               MOVS     R2,#+1
   \   000001B8   6946               MOV      R1,SP
   \   000001BA   4748               LDR      R0,??main_0+0x4C  ;; 0x13d7dc
   \   000001BC   ........           BL       FlashWrite
   2097               __set_interrupt_state(Save);
   \   000001C0   2000               MOVS     R0,R4
   \   000001C2   ........           BL       __iar_set_interrupt_state
   2098               //koniec zapisu do flash
   2099              }
   2100              //koniec odczytu has³a ---------------------------------------- 
   2101          
   2102          
   2103              
   2104              USB_Connect(&sUsb);    
   \                     ??main_10:
   \   000001C6   2800               MOVS     R0,R5
   \   000001C8   ........           BL       USB_Connect
   2105             __enable_interrupt();   
   \   000001CC   ........           BL       __iar_enable_interrupt
   \   000001D0   2CE0               B        ??main_16
   2106             
   2107             
   2108           
   2109          #ifdef __WIFI_MODULE   
   2110             InitWizFi(AT91C_BASE_US1, &NET);
   2111          #endif
   2112          
   2113             
   2114             
   2115              /*
   2116             //ustawienie wys³ania stanów  do wszystkich wêz³ów po restarcie
   2117              for (char i=0; i<NumberNeurons; i++)
   2118              {
   2119                MainStage.SendStageChange[i]=ChangeStageFlag; 
   2120              }
   2121             */
   2122             
   2123             
   2124              while (1) 
   2125              {
   2126                  AT91F_WDTRestart(AT91C_BASE_WDTC);
   2127                  
   2128                  
   2129                  if (ForwardUSB2Serialferst==1)
   2130                  {
   2131                      // Start USB->Serial forward mechanism
   2132                      ForwardUSB2Serial(0, 0, 0, 0);
   2133                      ForwardUSB2Serialferst=2;
   2134                  }
   2135                
   2136                  
   2137                   
   2138                  if ((g_NextTimeProgram<=g_counter) || (g_NextTimeProgram>g_counter+ProgramPeriod))
   2139                   {
   2140                    
   2141                     
   2142                       char WaitingRF_WrTask=0;
   2143                       if (g_NextTimeProgram<g_counter+1000)    //blokowanie wykonania programu jezeli istnieje oczekuj¹ce ¿¹danie wys³ania stanu do któregokolwiek wêz³a. Blokowanie nie mo¿e przekroczyæ 1s. 
   2144                       {
   2145                           char Nd=1;
   2146                           while ((Nd<NumberNeurons) && (WaitingRF_WrTask==0))
   2147                            {
   2148                                if ((MainStage.SendStageChange[Nd]>0))    
   \                     ??main_17:
   \   000001D2   424B               LDR      R3,??main_0+0x50  ;; 0x619
   \   000001D4   1400               MOVS     R4,R2
   \   000001D6   424D               LDR      R5,??main_0+0x54  ;; MainStage
   \   000001D8   2C19               ADDS     R4,R5,R4
   \   000001DA   E35C               LDRB     R3,[R4, R3]
   \   000001DC   002B               CMP      R3,#+0
   \   000001DE   00D0               BEQ      ??main_18
   2149                                {
   2150                                    WaitingRF_WrTask=1;
   \   000001E0   0126               MOVS     R6,#+1
   2151                                }
   2152                                Nd++;  
   \                     ??main_18:
   \   000001E2   521C               ADDS     R2,R2,#+1
   \   000001E4   1206               LSLS     R2,R2,#+24
   \   000001E6   120E               LSRS     R2,R2,#+24
   2153                            } 
   \                     ??main_19:
   \   000001E8   1300               MOVS     R3,R2
   \   000001EA   232B               CMP      R3,#+35
   \   000001EC   01D2               BCS      ??main_20
   \   000001EE   3300               MOVS     R3,R6
   \   000001F0   EFD0               BEQ      ??main_17
   2154                       }
   2155          
   2156                      if (WaitingRF_WrTask==0)
   \                     ??main_20:
   \   000001F2   002E               CMP      R6,#+0
   \   000001F4   09D1               BNE      ??main_21
   2157                      {
   2158                        g_NextTimeProgram=g_counter+ProgramPeriod;
   \   000001F6   AF22               MOVS     R2,#+175
   \   000001F8   5200               LSLS     R2,R2,#+1        ;; #+350
   \   000001FA   0023               MOVS     R3,#+0
   \   000001FC   1218               ADDS     R2,R2,R0
   \   000001FE   4B41               ADCS     R3,R3,R1
   \   00000200   BA64               STR      R2,[R7, #+72]
   \   00000202   FB64               STR      R3,[R7, #+76]
   2159                        Program(&gProg);
   \   00000204   2748               LDR      R0,??main_0+0x18  ;; gProg
   \   00000206   ........           BL       Program
   2160                      }
   2161                      
   2162                      
   2163                      
   2164                      
   2165                   }
   2166                   
   2167                  
   2168                  if ((g_counter>4000) && (MenuLevel==0)) { MenuLevel=1;   MenuPaint();}
   \                     ??main_21:
   \   0000020A   386C               LDR      R0,[R7, #+64]
   \   0000020C   796C               LDR      R1,[R7, #+68]
   \   0000020E   354A               LDR      R2,??main_0+0x58  ;; 0xfa1
   \   00000210   0023               MOVS     R3,#+0
   \   00000212   9942               CMP      R1,R3
   \   00000214   0AD3               BCC      ??main_16
   \   00000216   01D8               BHI      ??main_22
   \   00000218   9042               CMP      R0,R2
   \   0000021A   07D3               BCC      ??main_16
   \                     ??main_22:
   \   0000021C   3248               LDR      R0,??main_0+0x5C  ;; MenuLevel
   \   0000021E   0168               LDR      R1,[R0, #+0]
   \   00000220   0029               CMP      R1,#+0
   \   00000222   03D1               BNE      ??main_16
   \   00000224   0121               MOVS     R1,#+1
   \   00000226   0160               STR      R1,[R0, #+0]
   \   00000228   ........           BL       MenuPaint
   \                     ??main_16:
   \   0000022C   2F48               LDR      R0,??main_0+0x60  ;; 0xfffffd40
   \   0000022E   ........           BL       AT91F_WDTRestart
   \   00000232   B87D               LDRB     R0,[R7, #+22]
   \   00000234   0128               CMP      R0,#+1
   \   00000236   07D1               BNE      ??main_23
   \   00000238   0023               MOVS     R3,#+0
   \   0000023A   1A00               MOVS     R2,R3
   \   0000023C   1100               MOVS     R1,R2
   \   0000023E   0800               MOVS     R0,R1
   \   00000240   ........           BL       ForwardUSB2Serial
   \   00000244   0220               MOVS     R0,#+2
   \   00000246   B875               STRB     R0,[R7, #+22]
   \                     ??main_23:
   \   00000248   BA6C               LDR      R2,[R7, #+72]
   \   0000024A   FB6C               LDR      R3,[R7, #+76]
   \   0000024C   386C               LDR      R0,[R7, #+64]
   \   0000024E   796C               LDR      R1,[R7, #+68]
   \   00000250   9942               CMP      R1,R3
   \   00000252   0CD8               BHI      ??main_24
   \   00000254   01D3               BCC      ??main_25
   \   00000256   9042               CMP      R0,R2
   \   00000258   09D2               BCS      ??main_24
   \                     ??main_25:
   \   0000025A   AF24               MOVS     R4,#+175
   \   0000025C   6400               LSLS     R4,R4,#+1        ;; #+350
   \   0000025E   0025               MOVS     R5,#+0
   \   00000260   2418               ADDS     R4,R4,R0
   \   00000262   4D41               ADCS     R5,R5,R1
   \   00000264   9D42               CMP      R5,R3
   \   00000266   D0D8               BHI      ??main_21
   \   00000268   01D3               BCC      ??main_24
   \   0000026A   9442               CMP      R4,R2
   \   0000026C   CDD2               BCS      ??main_21
   \                     ??main_24:
   \   0000026E   0026               MOVS     R6,#+0
   \   00000270   1400               MOVS     R4,R2
   \   00000272   1D00               MOVS     R5,R3
   \   00000274   FA22               MOVS     R2,#+250
   \   00000276   9200               LSLS     R2,R2,#+2        ;; #+1000
   \   00000278   3300               MOVS     R3,R6
   \   0000027A   1218               ADDS     R2,R2,R0
   \   0000027C   4B41               ADCS     R3,R3,R1
   \   0000027E   9D42               CMP      R5,R3
   \   00000280   B7D8               BHI      ??main_20
   \   00000282   01D3               BCC      ??main_26
   \   00000284   9442               CMP      R4,R2
   \   00000286   B4D2               BCS      ??main_20
   \                     ??main_26:
   \   00000288   0122               MOVS     R2,#+1
   \   0000028A   ADE7               B        ??main_19
   \                     ??main_0:
   \   0000028C   ........           DC32     RF_Status
   \   00000290   00F4FFFF           DC32     0xfffff400
   \   00000294   34F4FFFF           DC32     0xfffff434
   \   00000298   44FDFFFF           DC32     0xfffffd44
   \   0000029C   ........           DC32     DateTime
   \   000002A0   ........           DC32     sUsb
   \   000002A4   ........           DC32     gProg
   \   000002A8   FFFFEF00           DC32     0xefffff
   \   000002AC   E6D70000           DC32     0xd7e6
   \   000002B0   40A00000           DC32     0xa040
   \   000002B4   DCD70000           DC32     0xd7dc
   \   000002B8   DDD70000           DC32     0xd7dd
   \   000002BC   33333333           DC32     0x33333333
   \   000002C0   3333D33F           DC32     0x3fd33333
   \   000002C4   C3F5285C           DC32     0x5c28f5c3
   \   000002C8   8FE28A40           DC32     0x408ae28f
   \   000002CC   00006940           DC32     0x40690000
   \   000002D0   00FF04C1           DC32     0xc104ff00
   \   000002D4   DDD71300           DC32     0x13d7dd
   \   000002D8   DCD71300           DC32     0x13d7dc
   \   000002DC   19060000           DC32     0x619
   \   000002E0   ........           DC32     MainStage
   \   000002E4   A10F0000           DC32     0xfa1
   \   000002E8   ........           DC32     MenuLevel
   \   000002EC   40FDFFFF           DC32     0xfffffd40
   2169                  
   2170          
   2171                    
   2172          #ifdef __WIFI_MODULE    
   2173                      //wifi-------------------------------------------------------------------
   2174                      if ((g_counter>8000) &&  (DateTime.Second%1==0))
   2175                      {
   2176                        CheckVarChangeHTTP(Buff_TX_1 ,AT91C_BASE_US1, &NET);
   2177                        //HTTP_Connect(Buff_TX_1 ,AT91C_BASE_US1);
   2178                        
   2179                      }
   2180                  
   2181                      WiFi(Buff_TX_1 ,AT91C_BASE_US1, &NET);
   2182                  
   2183                  //CheckConnectionStatus();
   2184          #endif  
   2185            
   2186                     
   2187              }
   2188             
   2189              
   2190          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     sUsb

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   3CF4FFFF           DC32     0xfffff43c

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     MenuLevel

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00F0FFFF           DC32     0xfffff000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   00F4FFFF           DC32     0xfffff400

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   60F4FFFF           DC32     0xfffff460

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   40FDFFFF           DC32     0xfffffd40

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     DateTime

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     gProg

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   70C60000           DC32     0xc670

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   00011300           DC32     0x130100

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   26BC0000           DC32     0xbc26

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   30BC0000           DC32     0xbc30

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     MainStage

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   AA8AFFFF           DC32     0xffff8aaa

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   10FCFFFF           DC32     0xfffffc10

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   C000FAFF           DC32     0xfffa00c0

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   C400FAFF           DC32     0xfffa00c4

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   01C00C00           DC32     0xcc001

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   20F1FFFF           DC32     0xfffff120

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   28F1FFFF           DC32     0xfffff128

   \                                 In section .rodata, align 4
   \                     `?<Constant "Wyladowana">`:
   \   00000000   57796C61646F       DC8 "Wyladowana"
   \              77616E6100  
   \   0000000B   00                 DC8 0
   \   0000000C   626174657269       DC8 "bateria"
   \              6100        
   \   00000014   537072617764       DC8 "Sprawdz"
   \              7A00        
   \   0000001C   6C6973746520       DC8 "liste wezlow"
   \              77657A6C6F77
   \              00          
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "
   2191          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     AT91F_AIC_ConfigureIt            24
     AT91F_AIC_EnableIt                0
     AT91F_LCD_Init                    8
     AT91F_PIO_CfgInput                0
     AT91F_PIO_CfgOutput               0
     AT91F_PIO_CfgPullup               0
     AT91F_PIO_GetInterruptStatus      0
     AT91F_PIO_InterruptEnable         0
     AT91F_PMC_EnablePeriphClock       0
     AT91F_WDTRestart                  0
     AlarmExecute                     24
     CBK_Init                         24
     CBK_NewRequest                    8
     CBK_Resume                        8
     Delay                             8
     ForwardUSB2Serial                24
     ISR_Driver                        8
     ISR_VBus                         24
     InitFramework                    24
     RamToFlash                       24
     TestHendel                        8
     TestInit                         24
     ThermostatsExecute               24
     ThermostatsTimeChartExecute      24
     Timer_10ms                        8
     Timer_10ms_Setup                  0
     Timer_10us                        0
     Timer_10us_Setup                  0
     Timer_1h                          8
     Timer_1min                        8
     Timer_1ms                        16
     Timer_1ms_Setup                   0
     Timer_1s                         40
     TimetableExecute                 32
     USB_Attach                        8
     USB_Connect                       8
     USB_Disconnect                    8
     USB_GetDriverID                   0
     USB_GetDriverInterface            0
     USB_GetState                      0
     USB_Handler                       8
     main                             24
     watchdogEnable                    8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     identyfikacja                   8
     system                          8
     AT91F_AIC_ConfigureIt          44
     AT91F_AIC_EnableIt             12
     AT91F_PIO_CfgOutput             6
     AT91F_PIO_CfgInput              6
     AT91F_PIO_CfgPullup             8
     AT91F_PIO_InterruptEnable       4
     AT91F_PIO_GetInterruptStatus    4
     AT91F_PMC_EnablePeriphClock     4
     AT91F_WDTRestart               12
     AT91F_LCD_Init                152
     USB_GetDriverInterface          6
     USB_GetDriverID                 6
     USB_Handler                    18
     USB_Attach                     18
     USB_Connect                    18
     USB_Disconnect                 18
     USB_GetState                   10
     APC                             1
     g_czas_petli                    1
     komunikacja_ok                  4
     rej_prog                       40
     LifeCouter                      4
     LifeCouterMax                   4
     USB_busy                        1
     advY                            4
     advX                            4
     g_leng                          4
     g_level                         1
     g_Message                       4
     g_info                          4
     NET                           296
     LightLCD_OFF_Counter            1
     LightLCD_OFF_Counter2           1
     LightLCD_OFF_Curent             1
     tmp_i                           1
     licznik                         4
     licznik2                        4
     licznik3                        4
     memory                          4
     sss                             4
     int1                            4
     sSetup                          8
     dState                          4
     sCallbacks                     24
     sUsb                           24
     ISR_Driver                     14
     ISR_VBus                      160
     CBK_Init                       80
     CBK_Resume                     12
     CBK_NewRequest                 20
     ForwardUSB2Serial              96
     Delay                          18
     memory_read                     4
     InitFramework                 232
     Timer_10us                     12
     Timer_10us_Setup              104
     TimetableExecute              416
     Out                            32
     ThermostatsTimeChartExecute   212
     ThermostatsExecute            272
     Hysteresis                      8
     AlarmExecute                  504
     Timer_1h                       12
     Timer_1min                     16
     XY_Tab                         44
     display_cykl                    1
     Timer_1s                      944
     Timer_10ms                    312
     Timer_10ms_Setup              132
     Counter                         4
     US0_Counter                     4
     US1_Counter                     4
     CounterForTimer10ms             1
     Timer_1ms                     468
     DateTime                     1408
     FlashProgramReserveOfset        4
     g_Password_2                    8
     AdressModbus                    1
     g_Restart_Program               1
     AlarmScreenAction             160
     pEndpoints                    160
     tProgramTabSize                 4
     stop                            4
     X_up_old                        4
     Y_up_old                        4
     X_down_old                      4
     Y_down_old                      4
     Timer_1ms_Setup               132
     RamToFlash                    212
     testcount                       4
     TestHendel                     44
     TestInit                      108
     string                         28
     watchdogEnable                 52
     TimeCompil                     12
     DateCompil                     12
     main                          752
     ??DataTable1                    4
     ??DataTable2                    4
     ??DataTable4                    4
     ??DataTable6                    4
     ??DataTable7                    4
     ??DataTable8                    4
     ??DataTable11                   4
     ??DataTable12                   4
     ??DataTable13                   4
     ??DataTable14                   4
     ??DataTable15                   4
     ??DataTable16                   4
     ??DataTable17                   4
     ??DataTable18                   4
     ??DataTable19                   4
     ??DataTable20                   4
     ??DataTable21                   4
     ??DataTable22                   4
     ??DataTable23                   4
     ??DataTable24                   4
     ??DataTable25                   4
     ?<Constant "Wyladowana">       44
     ?<Constant "   ">               4
      Others                        66

 
   545 bytes in section .bss
 1 791 bytes in section .data
   112 bytes in section .rodata
 5 832 bytes in section Debug.txt
 
 5 420 bytes of CODE  memory (+ 412 bytes shared)
   112 bytes of CONST memory
 2 336 bytes of DATA  memory

Errors: none
Warnings: 30
