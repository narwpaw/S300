###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           30/Apr/2013  19:49:20 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\Framework\RF_Exe.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\RF_Exe.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -D _ADMINISTRATOR_ -lC "D:\Zeuron\Projekty\S300\S300-pro #
#                    gram v1.3 BETA- 14.03.2013\ADMIN S300i\List\"            #
#                    --diag_suppress Pa082 -o "D:\Zeuron\Projekty\S300\S300-p #
#                    rogram v1.3 BETA- 14.03.2013\ADMIN S300i\Obj\"           #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian little --cpu ARM7TDMI -e --fpu None     #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.3       #
#                    BETA- 14.03.2013\lib\AT91SAM7S256\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\cdc\" -I                           #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\core\" -I "D:\Zeuron\Projekty\S300\S300-progr #
#                    am v1.3 BETA- 14.03.2013\startup\" -I                    #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\" -I "D:\Zeuron\Projekty\S300\S300- #
#                    program v1.3 BETA- 14.03.2013\Framework\Configuration\"  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 5.0\ARM\INC\" --section .text=Debug.txt        #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\ADMIN S300i\List\RF_Exe.lst                   #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\ADMIN S300i\Obj\RF_Exe.o                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\RF_Exe.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                  Microcontroller Software Support                        *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : RF_Exe.c                                 *//
      7          //*  Opis                         : Plik wykonawczy komunikacji radiowej     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 31.06.2010                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #include "RF_Exe.h"
     24          #include "Application_prog.h" 
     25          #include "spi_main.h"  
     26          #include "main_H.h"  

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     27          
     28          //tymczasowe
     29          extern int licznik_cykli;
     30          int poprawnych;
     31          extern int odb[2];
     32          extern char IndWys; 
     33          extern volatile char SlaveMode;
     34          extern long long int g_counter;
     35          unsigned int        RF_Period;                                              //cykl transmisji
     36          
     37          char IndWys=0; 
     38          char IndWysNeg=1; 
     39          int odb[2];
     40          int licznik_cykli=0;
     41          extern unsigned int CyklPerSekCount; 
     42          extern unsigned long long g_NextTimeProgram; 
     43          extern volatile char Busy_program;
     44          extern volatile long long TimeInMasterMode;
     45          extern _NeuronsListUnit NeuronsList[NumberNeurons];
     46          extern AT91_SPI_Buff               SPI_Buff;
     47          //tymczasowo koniec-----------
     48          extern volatile char ReciveFrameToMe;
     49          extern unsigned char ChangeStageFlag;
     50          extern AT91PS_MEM pAT91C_IFLASH_MEM;
     51          
     52          #ifdef _LIVE_RJESTR
     53          extern unsigned short LIVE_TAB[LIVE_TAB_SIZE];
     54          extern char LIVE_TAB_IDX;
     55          
     56          
     57          
     58          
     59          #endif
     60          
     61          
     62           
     63          
     64          //Zmienne globalne -------------------------------------------------------------
     65            

   \                                 In section .bss, align 4
     66            _RF_TaskTab  RF_TaskTab;
   \                     RF_TaskTab:
   \   00000000                      DS8 560
     67            signed char           RF_CurrentTask=-1; 
     68            signed char           RF_SpecialTask=-1; 
     69            char g_RF_TimeOutCounter =0;  //bierz¹cy czas odliczania do timeout`u
     70            
     71           
     72            

   \                                 In section .bss, align 2
     73            unsigned short       ReadNodeSoftVersion;
   \                     ReadNodeSoftVersion:
   \   00000000                      DS8 2
     74            _RF_NodeTest         RF_NodeTest; 
     75             // unsigned  short    TimeToSwithToMaster=MAX_TIME_FOR_SLAVE_ASK;
     76              char               BridgeMode=0;
     77          //__________________________Koniec zmiennych globalnych________________________
     78          
     79          
     80            
     81            
     82          //Zmienne globalne importowane--------------------------------------------------  
     83            extern _RF_Status   RF_Status;
     84            extern _MainStage  MainStage;
     85            extern _TransQuality TransQuality;
     86            //extern volatile char SwitchToMasterBlock;
     87          //___________________________Koniec zmiennych globalnych importowanych_________
     88          
     89            
     90           
     91            
     92          
     93          
     94          //#define IncCurentRfTask  RF_CurrentTask++;  if ((RF_TaskTab[RF_CurrentTask].Node==0) || (RF_CurrentTask>=RF_Tasks))  {RF_CurrentTask=0; CyklPerSekCount++;}
     95             
     96          
     97          

   \                                 In section Debug.txt, align 4, keep-with-next
     98          void SwitchToMaster(void)
     99          {
   \                     SwitchToMaster:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    100              if ((SPI_Buff.WordToSendCount) /*|| (RF_Status.EnTx!=0) || (RF_Status.EnRx==0)*/) return;
   \   00000002   2148               LDR      R0,??SwitchToMaster_0  ;; SPI_Buff + 220
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   3AD1               BNE      ??SwitchToMaster_1
    101             
    102             RF_Status.SlaveModeTimeout=MAX_TIME_FOR_SLAVE_ASK;
                                               ^
Warning[Pe069]: integer conversion resulted in truncation
   \   0000000A   ....               LDR      R4,??DataTable9  ;; RF_Status
   \   0000000C   5E20               MOVS     R0,#+94
   \   0000000E   E074               STRB     R0,[R4, #+19]
    103             RF_Status.TimeInMasterMode=0;
   \   00000010   0025               MOVS     R5,#+0
   \   00000012   6561               STR      R5,[R4, #+20]
    104             RF_Status.TimeInSlaveMode=0;  
    105            
    106            
    107             // AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    108             // ButtonBipCounter=g_counter+10000;
    109          
    110             SPI_SendWord(0x8219,Cs_RF); 
                    ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   00000014   0221               MOVS     R1,#+2
   \   00000016   ....               LDR      R0,??DataTable10  ;; 0x8219
   \   00000018   ........           BL       SPI_SendWord
    111             SlaveMode=0;
   \   0000001C   ....               LDR      R0,??DataTable11  ;; SlaveMode
   \   0000001E   2900               MOVS     R1,R5
   \   00000020   0170               STRB     R1,[R0, #+0]
    112             RF_Status.MasterMode=1;
   \   00000022   0120               MOVS     R0,#+1
   \   00000024   6073               STRB     R0,[R4, #+13]
    113             ReciveFrameToMe=0;
   \   00000026   1948               LDR      R0,??SwitchToMaster_0+0x4  ;; ReciveFrameToMe
   \   00000028   0570               STRB     R5,[R0, #+0]
    114             SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
   \   0000002A   0221               MOVS     R1,#+2
   \   0000002C   0D00               MOVS     R5,R1
   \   0000002E   A07B               LDRB     R0,[R4, #+14]
   \   00000030   ........           BL       __aeabi_ui2d
   \   00000034   0200               MOVS     R2,R0
   \   00000036   0B00               MOVS     R3,R1
   \   00000038   ....               LDR      R0,??DataTable12  ;; 0x33333333
   \   0000003A   ....               LDR      R1,??DataTable13  ;; 0x3fd33333
   \   0000003C   ........           BL       __aeabi_dmul
   \   00000040   0200               MOVS     R2,R0
   \   00000042   0B00               MOVS     R3,R1
   \   00000044   ....               LDR      R0,??DataTable14  ;; 0x5c28f5c3
   \   00000046   ....               LDR      R1,??DataTable15  ;; 0x408ae28f
   \   00000048   ........           BL       __aeabi_dadd
   \   0000004C   0200               MOVS     R2,R0
   \   0000004E   0B00               MOVS     R3,R1
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   ....               LDR      R1,??DataTable16  ;; 0x40690000
   \   00000054   ........           BL       __aeabi_dmul
   \   00000058   0200               MOVS     R2,R0
   \   0000005A   0B00               MOVS     R3,R1
   \   0000005C   0020               MOVS     R0,#+0
   \   0000005E   ....               LDR      R1,??DataTable17  ;; 0xc104ff00
   \   00000060   ........           BL       __aeabi_dadd
   \   00000064   ........           BL       __aeabi_d2iz
   \   00000068   0004               LSLS     R0,R0,#+16
   \   0000006A   0014               ASRS     R0,R0,#+16
   \   0000006C   A021               MOVS     R1,#+160
   \   0000006E   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   00000070   0143               ORRS     R1,R1,R0
   \   00000072   0800               MOVS     R0,R1
   \   00000074   2900               MOVS     R1,R5
   \   00000076   ........           BL       SPI_SendWord
    115             RF_Status.EnableRX();
   \   0000007A   A06A               LDR      R0,[R4, #+40]
   \   0000007C   ........           BL       __iar_via_R0
    116          
    117          }
   \                     ??SwitchToMaster_1:
   \   00000080   38BC               POP      {R3-R5}
   \   00000082   01BC               POP      {R0}
   \   00000084   0047               BX       R0               ;; return
   \   00000086   C046               Nop      
   \                     ??SwitchToMaster_0:
   \   00000088   ........           DC32     SPI_Buff + 220
   \   0000008C   ........           DC32     ReciveFrameToMe
    118          

   \                                 In section Debug.txt, align 4, keep-with-next
    119          void SwitchToSlave(void)
    120          {
   \                     SwitchToSlave:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    121             RF_Status.TimeInSlaveMode=0;
   \   00000002   ....               LDR      R4,??DataTable9  ;; RF_Status
   \   00000004   0025               MOVS     R5,#+0
    122             RF_Status.TimeInMasterMode=0;
   \   00000006   6561               STR      R5,[R4, #+20]
    123             RF_Status.SlaveModeTimeout=MAX_TIME_FOR_SLAVE_ASK;
                                               ^
Warning[Pe069]: integer conversion resulted in truncation
   \   00000008   5E20               MOVS     R0,#+94
   \   0000000A   E074               STRB     R0,[R4, #+19]
    124            
    125             // AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
    126             
    127             SPI_SendWord(0x8219,Cs_RF); 
                    ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   0000000C   0221               MOVS     R1,#+2
   \   0000000E   ....               LDR      R0,??DataTable10  ;; 0x8219
   \   00000010   ........           BL       SPI_SendWord
    128            // Delay(0x4FF);
    129             SPI_SendWord(0x80E7,Cs_RF); 
   \   00000014   0221               MOVS     R1,#+2
   \   00000016   1A48               LDR      R0,??SwitchToSlave_0  ;; 0x80e7
   \   00000018   ........           BL       SPI_SendWord
    130             SlaveMode=1;
   \   0000001C   ....               LDR      R0,??DataTable11  ;; SlaveMode
   \   0000001E   0121               MOVS     R1,#+1
   \   00000020   0170               STRB     R1,[R0, #+0]
    131          
    132             RF_Status.MasterMode=0;
   \   00000022   6573               STRB     R5,[R4, #+13]
    133             SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
   \   00000024   0221               MOVS     R1,#+2
   \   00000026   0D00               MOVS     R5,R1
   \   00000028   E07B               LDRB     R0,[R4, #+15]
   \   0000002A   ........           BL       __aeabi_ui2d
   \   0000002E   0200               MOVS     R2,R0
   \   00000030   0B00               MOVS     R3,R1
   \   00000032   ....               LDR      R0,??DataTable12  ;; 0x33333333
   \   00000034   ....               LDR      R1,??DataTable13  ;; 0x3fd33333
   \   00000036   ........           BL       __aeabi_dmul
   \   0000003A   0200               MOVS     R2,R0
   \   0000003C   0B00               MOVS     R3,R1
   \   0000003E   ....               LDR      R0,??DataTable14  ;; 0x5c28f5c3
   \   00000040   ....               LDR      R1,??DataTable15  ;; 0x408ae28f
   \   00000042   ........           BL       __aeabi_dadd
   \   00000046   0200               MOVS     R2,R0
   \   00000048   0B00               MOVS     R3,R1
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   ....               LDR      R1,??DataTable16  ;; 0x40690000
   \   0000004E   ........           BL       __aeabi_dmul
   \   00000052   0200               MOVS     R2,R0
   \   00000054   0B00               MOVS     R3,R1
   \   00000056   0020               MOVS     R0,#+0
   \   00000058   ....               LDR      R1,??DataTable17  ;; 0xc104ff00
   \   0000005A   ........           BL       __aeabi_dadd
   \   0000005E   ........           BL       __aeabi_d2iz
   \   00000062   0004               LSLS     R0,R0,#+16
   \   00000064   0014               ASRS     R0,R0,#+16
   \   00000066   A021               MOVS     R1,#+160
   \   00000068   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   0000006A   0143               ORRS     R1,R1,R0
   \   0000006C   0800               MOVS     R0,R1
   \   0000006E   2900               MOVS     R1,R5
   \   00000070   ........           BL       SPI_SendWord
    134             RF_Status.EnableRX();
   \   00000074   A06A               LDR      R0,[R4, #+40]
   \   00000076   ........           BL       __iar_via_R0
    135          
    136          }
   \   0000007A   38BC               POP      {R3-R5}
   \   0000007C   01BC               POP      {R0}
   \   0000007E   0047               BX       R0               ;; return
   \                     ??SwitchToSlave_0:
   \   00000080   E7800000           DC32     0x80e7
    137          
    138          
    139          //-----------------------------------------------------------------------------
    140          //!  Nazwa funkcji :    RF_ExecuteOrder
    141          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
    142          //-----------------------------------------------------------------------------
    143          //  Res   - wskanik na bufor danych
    144          //  Size  - wielkoæ bufora danych
    145          //  Buff  - wskanik na ostatni bajt danych 
    146          //-----------------------------------------------------------------------------
    147            _RF_Command  *pRF_Command;

   \                                 In section Debug.txt, align 4, keep-with-next
    148          char RF_ReciveFarm(char *Buff, char Size)
    149          {
   \                     RF_ReciveFarm:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   0090               STR      R0,[SP, #+0]
    150                    char FrameOk=0;
    151                    
    152                    if ((Size==8) && (FrameOk==0))
   \   0000000A   082E               CMP      R6,#+8
   \   0000000C   11D1               BNE      ??RF_ReciveFarm_0
    153                    {
    154                       pRF_Command=(_pRF_Command)(Buff-7); //rzutowanie na strukturê rozkazu
   \   0000000E   8B4C               LDR      R4,??RF_ReciveFarm_1  ;; IndWys
   \   00000010   ED1F               SUBS     R5,R5,#+7
   \   00000012   E562               STR      R5,[R4, #+44]
    155                       if (pRF_Command->B8.CRC == crc16(pRF_Command->Streem, Size-2))  FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000014   0621               MOVS     R1,#+6
   \   00000016   2800               MOVS     R0,R5
   \   00000018   ........           BL       crc16
   \   0000001C   E16A               LDR      R1,[R4, #+44]
   \   0000001E   8B79               LDRB     R3,[R1, #+6]
   \   00000020   CA79               LDRB     R2,[R1, #+7]
   \   00000022   1206               LSLS     R2,R2,#+24
   \   00000024   120C               LSRS     R2,R2,#+16
   \   00000026   1343               ORRS     R3,R3,R2
   \   00000028   8342               CMP      R3,R0
   \   0000002A   3ED1               BNE      ??RF_ReciveFarm_2
   \   0000002C   0120               MOVS     R0,#+1
   \   0000002E   0090               STR      R0,[SP, #+0]
   \   00000030   3BE0               B        ??RF_ReciveFarm_2
    156                    }
    157                    else if (Size==6)
   \                     ??RF_ReciveFarm_0:
   \   00000032   062E               CMP      R6,#+6
   \   00000034   11D1               BNE      ??RF_ReciveFarm_3
    158                    {
    159                       pRF_Command=(_pRF_Command)(Buff-5); //rzutowanie na strukturê rozkazu
   \   00000036   814C               LDR      R4,??RF_ReciveFarm_1  ;; IndWys
   \   00000038   6D1F               SUBS     R5,R5,#+5
   \   0000003A   E562               STR      R5,[R4, #+44]
    160                       if (pRF_Command->B6.CRC == crc16(pRF_Command->Streem, Size-2))  FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000003C   0421               MOVS     R1,#+4
   \   0000003E   2800               MOVS     R0,R5
   \   00000040   ........           BL       crc16
   \   00000044   E16A               LDR      R1,[R4, #+44]
   \   00000046   0B79               LDRB     R3,[R1, #+4]
   \   00000048   4A79               LDRB     R2,[R1, #+5]
   \   0000004A   1206               LSLS     R2,R2,#+24
   \   0000004C   120C               LSRS     R2,R2,#+16
   \   0000004E   1343               ORRS     R3,R3,R2
   \   00000050   8342               CMP      R3,R0
   \   00000052   2AD1               BNE      ??RF_ReciveFarm_2
   \   00000054   0120               MOVS     R0,#+1
   \   00000056   0090               STR      R0,[SP, #+0]
   \   00000058   27E0               B        ??RF_ReciveFarm_2
    161                    }   
    162                    else 
    163                    { 
    164                      if ((Size>8) && (FrameOk==0))
   \                     ??RF_ReciveFarm_3:
   \   0000005A   092E               CMP      R6,#+9
   \   0000005C   0FD3               BCC      ??RF_ReciveFarm_4
    165                      {
    166                        pRF_Command=(_pRF_Command)(Buff-7); //rzutowanie na strukturê rozkazu
   \   0000005E   774C               LDR      R4,??RF_ReciveFarm_1  ;; IndWys
   \   00000060   E81F               SUBS     R0,R5,#+7
   \   00000062   E062               STR      R0,[R4, #+44]
    167                        if (pRF_Command->B8.CRC == crc16(pRF_Command->Streem, 6))  FrameOk=1;
                                                                ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000064   0621               MOVS     R1,#+6
   \   00000066   ........           BL       crc16
   \   0000006A   E16A               LDR      R1,[R4, #+44]
   \   0000006C   8B79               LDRB     R3,[R1, #+6]
   \   0000006E   CA79               LDRB     R2,[R1, #+7]
   \   00000070   1206               LSLS     R2,R2,#+24
   \   00000072   120C               LSRS     R2,R2,#+16
   \   00000074   1343               ORRS     R3,R3,R2
   \   00000076   8342               CMP      R3,R0
   \   00000078   01D1               BNE      ??RF_ReciveFarm_4
   \   0000007A   0120               MOVS     R0,#+1
   \   0000007C   0090               STR      R0,[SP, #+0]
    168                      }
    169                      
    170                      if ((Size>6) && (FrameOk==0))
   \                     ??RF_ReciveFarm_4:
   \   0000007E   072E               CMP      R6,#+7
   \   00000080   13D3               BCC      ??RF_ReciveFarm_2
   \   00000082   0098               LDR      R0,[SP, #+0]
   \   00000084   0006               LSLS     R0,R0,#+24
   \   00000086   10D1               BNE      ??RF_ReciveFarm_2
    171                      {
    172                       pRF_Command=(_pRF_Command)(Buff-5); //rzutowanie na strukturê rozkazu
   \   00000088   6C4C               LDR      R4,??RF_ReciveFarm_1  ;; IndWys
   \   0000008A   6D1F               SUBS     R5,R5,#+5
   \   0000008C   E562               STR      R5,[R4, #+44]
    173                       if (pRF_Command->B6.CRC == crc16(pRF_Command->Streem, 4)) FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000008E   0421               MOVS     R1,#+4
   \   00000090   2800               MOVS     R0,R5
   \   00000092   ........           BL       crc16
   \   00000096   E16A               LDR      R1,[R4, #+44]
   \   00000098   0B79               LDRB     R3,[R1, #+4]
   \   0000009A   4A79               LDRB     R2,[R1, #+5]
   \   0000009C   1206               LSLS     R2,R2,#+24
   \   0000009E   120C               LSRS     R2,R2,#+16
   \   000000A0   1343               ORRS     R3,R3,R2
   \   000000A2   8342               CMP      R3,R0
   \   000000A4   01D1               BNE      ??RF_ReciveFarm_2
   \   000000A6   0120               MOVS     R0,#+1
   \   000000A8   0090               STR      R0,[SP, #+0]
    174                      } 
    175                    
    176                    }
    177                   
    178                    
    179          
    180                    
    181                    //je¿eli ramka poprawna
    182                    if (FrameOk==1)
   \                     ??RF_ReciveFarm_2:
   \   000000AA   0098               LDR      R0,[SP, #+0]
   \   000000AC   0006               LSLS     R0,R0,#+24
   \   000000AE   000E               LSRS     R0,R0,#+24
   \   000000B0   0128               CMP      R0,#+1
   \   000000B2   00D0               BEQ      .+4
   \   000000B4   BBE0               B        ??RF_ReciveFarm_5
    183                    {  
    184                        
    185                            char Odbierz=0;
   \   000000B6   0026               MOVS     R6,#+0
    186                            //Sprawdzenie zgodnoci ID 
    187                            if(((pRF_Command->ID==RF_TaskTab[RF_CurrentTask].Command.ID) && (!SlaveMode)) ||
    188                               ((pRF_Command->ID==RF_Status.RF_ID) && (SlaveMode))
    189                               ) 
   \   000000B8   604C               LDR      R4,??RF_ReciveFarm_1  ;; IndWys
   \   000000BA   E06A               LDR      R0,[R4, #+44]
   \   000000BC   ........           BL       __aeabi_uread4
   \   000000C0   ....               LDR      R7,??DataTable18  ;; RF_TaskTab
   \   000000C2   ....               LDR      R5,??DataTable19  ;; 0xfffff
   \   000000C4   2840               ANDS     R0,R0,R5
   \   000000C6   0121               MOVS     R1,#+1
   \   000000C8   6156               LDRSB    R1,[R4, R1]
   \   000000CA   C900               LSLS     R1,R1,#+3
   \   000000CC   7918               ADDS     R1,R7,R1
   \   000000CE   4968               LDR      R1,[R1, #+4]
   \   000000D0   2940               ANDS     R1,R1,R5
   \   000000D2   8842               CMP      R0,R1
   \   000000D4   03D1               BNE      ??RF_ReciveFarm_6
   \   000000D6   ....               LDR      R0,??DataTable28  ;; SlaveMode
   \   000000D8   0078               LDRB     R0,[R0, #+0]
   \   000000DA   0028               CMP      R0,#+0
   \   000000DC   0BD0               BEQ      ??RF_ReciveFarm_7
   \                     ??RF_ReciveFarm_6:
   \   000000DE   E06A               LDR      R0,[R4, #+44]
   \   000000E0   ........           BL       __aeabi_uread4
   \   000000E4   2840               ANDS     R0,R0,R5
   \   000000E6   ....               LDR      R1,??DataTable21  ;; RF_Status + 24
   \   000000E8   0968               LDR      R1,[R1, #+0]
   \   000000EA   8842               CMP      R0,R1
   \   000000EC   05D1               BNE      ??RF_ReciveFarm_8
   \   000000EE   ....               LDR      R0,??DataTable28  ;; SlaveMode
   \   000000F0   0078               LDRB     R0,[R0, #+0]
   \   000000F2   0028               CMP      R0,#+0
   \   000000F4   01D0               BEQ      ??RF_ReciveFarm_8
    190                            {
    191                               Odbierz=1;
   \                     ??RF_ReciveFarm_7:
   \   000000F6   0126               MOVS     R6,#+1
   \   000000F8   50E0               B        ??RF_ReciveFarm_9
    192                            }
    193                            else if ((pRF_Command->ID==0)  && (SlaveMode)) //ramka rozg³ona 
   \                     ??RF_ReciveFarm_8:
   \   000000FA   E06A               LDR      R0,[R4, #+44]
   \   000000FC   ........           BL       __aeabi_uread4
   \   00000100   2840               ANDS     R0,R0,R5
   \   00000102   05D1               BNE      ??RF_ReciveFarm_10
   \   00000104   ....               LDR      R0,??DataTable28  ;; SlaveMode
   \   00000106   0078               LDRB     R0,[R0, #+0]
   \   00000108   0028               CMP      R0,#+0
   \   0000010A   01D0               BEQ      ??RF_ReciveFarm_10
    194                            {
    195                              Odbierz=1;
   \   0000010C   0126               MOVS     R6,#+1
   \   0000010E   45E0               B        ??RF_ReciveFarm_9
    196                            }
    197                            else if ((AT91C_IFLASH_MEM->Config.SlaveMode) && (SlaveMode) && (BridgeMode)) 
   \                     ??RF_ReciveFarm_10:
   \   00000110   ....               LDR      R0,??DataTable24  ;; 0x13d7e8
   \   00000112   0078               LDRB     R0,[R0, #+0]
   \   00000114   0028               CMP      R0,#+0
   \   00000116   22D0               BEQ      ??RF_ReciveFarm_11
   \   00000118   ....               LDR      R0,??DataTable28  ;; SlaveMode
   \   0000011A   0078               LDRB     R0,[R0, #+0]
   \   0000011C   0028               CMP      R0,#+0
   \   0000011E   1ED0               BEQ      ??RF_ReciveFarm_11
   \   00000120   2079               LDRB     R0,[R4, #+4]
   \   00000122   0028               CMP      R0,#+0
   \   00000124   1BD0               BEQ      ??RF_ReciveFarm_11
    198                            {
    199                              for (char ND=0; ND<NumberNeurons-1; ND++)
   \   00000126   3700               MOVS     R7,R6
   \   00000128   02E0               B        ??RF_ReciveFarm_12
   \                     ??RF_ReciveFarm_13:
   \   0000012A   7F1C               ADDS     R7,R7,#+1
   \   0000012C   3F06               LSLS     R7,R7,#+24
   \   0000012E   3F0E               LSRS     R7,R7,#+24
   \                     ??RF_ReciveFarm_12:
   \   00000130   3800               MOVS     R0,R7
   \   00000132   2228               CMP      R0,#+34
   \   00000134   32D2               BCS      ??RF_ReciveFarm_9
    200                              {
    201                                if ((pRF_Command->ID==NeuronsList[ND].NeuronID) && (TransQuality.QuickMensur[ND]))
   \   00000136   E06A               LDR      R0,[R4, #+44]
   \   00000138   ........           BL       __aeabi_uread4
   \   0000013C   3900               MOVS     R1,R7
   \   0000013E   2840               ANDS     R0,R0,R5
   \   00000140   0C22               MOVS     R2,#+12
   \   00000142   4A43               MULS     R2,R1,R2
   \   00000144   ....               LDR      R3,??DataTable26  ;; NeuronsList
   \   00000146   9A18               ADDS     R2,R3,R2
   \   00000148   5268               LDR      R2,[R2, #+4]
   \   0000014A   9042               CMP      R0,R2
   \   0000014C   EDD1               BNE      ??RF_ReciveFarm_13
   \   0000014E   ....               LDR      R0,??DataTable27  ;; TransQuality
   \   00000150   4018               ADDS     R0,R0,R1
   \   00000152   2630               ADDS     R0,R0,#+38
   \   00000154   0078               LDRB     R0,[R0, #+0]
   \   00000156   0028               CMP      R0,#+0
   \   00000158   E7D0               BEQ      ??RF_ReciveFarm_13
    202                                {
    203                                  Odbierz=1;
   \   0000015A   0126               MOVS     R6,#+1
    204                                  break;
   \   0000015C   1EE0               B        ??RF_ReciveFarm_9
    205                                }
    206                              }
    207                            }else if (((RF_TaskTab[RF_CurrentTask].Command.Order==R_BC_Order) || (RF_TaskTab[RF_CurrentTask].Command.Order==W_BC_Order)) && (pRF_Command->BC_ID2==RF_TaskTab[RF_CurrentTask].Command.ID))
   \                     ??RF_ReciveFarm_11:
   \   0000015E   0120               MOVS     R0,#+1
   \   00000160   2056               LDRSB    R0,[R4, R0]
   \   00000162   C000               LSLS     R0,R0,#+3
   \   00000164   3818               ADDS     R0,R7,R0
   \   00000166   4068               LDR      R0,[R0, #+4]
   \   00000168   F021               MOVS     R1,#+240
   \   0000016A   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   0000016C   0140               ANDS     R1,R1,R0
   \   0000016E   0800               MOVS     R0,R1
   \   00000170   000D               LSRS     R0,R0,#+20
   \   00000172   0728               CMP      R0,#+7
   \   00000174   01D0               BEQ      ??RF_ReciveFarm_14
   \   00000176   0828               CMP      R0,#+8
   \   00000178   10D1               BNE      ??RF_ReciveFarm_9
   \                     ??RF_ReciveFarm_14:
   \   0000017A   E06A               LDR      R0,[R4, #+44]
   \   0000017C   C01C               ADDS     R0,R0,#+3
   \   0000017E   ........           BL       __aeabi_uread8
   \   00000182   2901               LSLS     R1,R5,#+4
   \   00000184   0140               ANDS     R1,R1,R0
   \   00000186   0800               MOVS     R0,R1
   \   00000188   0009               LSRS     R0,R0,#+4
   \   0000018A   0121               MOVS     R1,#+1
   \   0000018C   6156               LDRSB    R1,[R4, R1]
   \   0000018E   C900               LSLS     R1,R1,#+3
   \   00000190   7918               ADDS     R1,R7,R1
   \   00000192   4968               LDR      R1,[R1, #+4]
   \   00000194   2940               ANDS     R1,R1,R5
   \   00000196   8842               CMP      R0,R1
   \   00000198   00D1               BNE      ??RF_ReciveFarm_9
    208                            {
    209                              Odbierz=1;
   \   0000019A   0126               MOVS     R6,#+1
    210                            }
    211                            
    212                            
    213                            
    214                            
    215                            
    216                            if (Odbierz)
   \                     ??RF_ReciveFarm_9:
   \   0000019C   ....               LDR      R7,??DataTable28  ;; SlaveMode
   \   0000019E   002E               CMP      R6,#+0
   \   000001A0   24D0               BEQ      ??RF_ReciveFarm_15
    217                            {
    218                              if ((SlaveMode==0) && (RF_Status.ConfResive==1)) RF_Status.ConfResive=2;  //znacznik odebrania danych (dla kontroli kana³u)
   \   000001A2   3878               LDRB     R0,[R7, #+0]
   \   000001A4   0028               CMP      R0,#+0
   \   000001A6   05D1               BNE      ??RF_ReciveFarm_16
   \   000001A8   ....               LDR      R6,??DataTable32  ;; RF_Status
   \   000001AA   F07A               LDRB     R0,[R6, #+11]
   \   000001AC   0128               CMP      R0,#+1
   \   000001AE   01D1               BNE      ??RF_ReciveFarm_16
   \   000001B0   0220               MOVS     R0,#+2
   \   000001B2   F072               STRB     R0,[R6, #+11]
    219                              if ((SlaveMode==1) && (RF_Status.ConfResiveSlave==1)) RF_Status.ConfResiveSlave=2;  //znacznik odebrania danych (dla kontroli kana³u)
   \                     ??RF_ReciveFarm_16:
   \   000001B4   3878               LDRB     R0,[R7, #+0]
   \   000001B6   0128               CMP      R0,#+1
   \   000001B8   05D1               BNE      ??RF_ReciveFarm_17
   \   000001BA   ....               LDR      R6,??DataTable32  ;; RF_Status
   \   000001BC   307B               LDRB     R0,[R6, #+12]
   \   000001BE   0128               CMP      R0,#+1
   \   000001C0   01D1               BNE      ??RF_ReciveFarm_17
   \   000001C2   0220               MOVS     R0,#+2
   \   000001C4   3073               STRB     R0,[R6, #+12]
    220                               
    221                              RF_ExecuteOrder(pRF_Command);   //realizacja rozkazu   
   \                     ??RF_ReciveFarm_17:
   \   000001C6   E06A               LDR      R0,[R4, #+44]
   \   000001C8   ........           BL       RF_ExecuteOrder
    222                              
    223                              
    224                              if (SlaveMode)
   \   000001CC   3878               LDRB     R0,[R7, #+0]
   \   000001CE   0028               CMP      R0,#+0
   \   000001D0   0CD0               BEQ      ??RF_ReciveFarm_15
    225                              {
    226                                if  (RF_Status.TimeInSlaveMode>MAX_TIME_FOR_SLAVE_ASK)
   \   000001D2   ....               LDR      R6,??DataTable32  ;; RF_Status
   \   000001D4   F08A               LDRH     R0,[R6, #+22]
   \   000001D6   FF21               MOVS     R1,#+255
   \   000001D8   6031               ADDS     R1,R1,#+96       ;; #+351
   \   000001DA   8842               CMP      R0,R1
   \   000001DC   02D3               BCC      ??RF_ReciveFarm_18
    227                                {
    228                                 RF_Status.SlaveModeTimeout=2;
   \   000001DE   0220               MOVS     R0,#+2
   \   000001E0   F074               STRB     R0,[R6, #+19]
   \   000001E2   03E0               B        ??RF_ReciveFarm_15
    229                                }else if  (RF_Status.TimeInSlaveMode>100)
   \                     ??RF_ReciveFarm_18:
   \   000001E4   6528               CMP      R0,#+101
   \   000001E6   01D3               BCC      ??RF_ReciveFarm_15
    230                                {
    231                                 RF_Status.SlaveModeTimeout=SLAVE_MODE_TIMEOUT; 
   \   000001E8   0A20               MOVS     R0,#+10
   \   000001EA   F074               STRB     R0,[R6, #+19]
    232                                }
    233                              }
    234                              
    235                              
    236          
    237                            }
    238                            
    239                            if ((SlaveMode) && (pRF_Command->ID!=RF_Status.RF_ID) && (pRF_Command->ID!=0) && (RF_Status.SlaveModeTimeout>0) && (RF_Status.TimeInSlaveMode>100))
   \                     ??RF_ReciveFarm_15:
   \   000001EC   3878               LDRB     R0,[R7, #+0]
   \   000001EE   0028               CMP      R0,#+0
   \   000001F0   14D0               BEQ      ??RF_ReciveFarm_19
   \   000001F2   E06A               LDR      R0,[R4, #+44]
   \   000001F4   ........           BL       __aeabi_uread4
   \   000001F8   ....               LDR      R6,??DataTable32  ;; RF_Status
   \   000001FA   2840               ANDS     R0,R0,R5
   \   000001FC   B169               LDR      R1,[R6, #+24]
   \   000001FE   8842               CMP      R0,R1
   \   00000200   0CD0               BEQ      ??RF_ReciveFarm_19
   \   00000202   E06A               LDR      R0,[R4, #+44]
   \   00000204   ........           BL       __aeabi_uread4
   \   00000208   0540               ANDS     R5,R5,R0
   \   0000020A   07D0               BEQ      ??RF_ReciveFarm_19
   \   0000020C   F07C               LDRB     R0,[R6, #+19]
   \   0000020E   0028               CMP      R0,#+0
   \   00000210   04D0               BEQ      ??RF_ReciveFarm_19
   \   00000212   F08A               LDRH     R0,[R6, #+22]
   \   00000214   6528               CMP      R0,#+101
   \   00000216   01D3               BCC      ??RF_ReciveFarm_19
    240                            {
    241                              RF_Status.SlaveModeTimeout=0;
   \   00000218   0020               MOVS     R0,#+0
   \   0000021A   F074               STRB     R0,[R6, #+19]
    242                            }
    243          
    244                            poprawnych++;
   \                     ??RF_ReciveFarm_19:
   \   0000021C   A069               LDR      R0,[R4, #+24]
   \   0000021E   401C               ADDS     R0,R0,#+1
   \   00000220   A061               STR      R0,[R4, #+24]
    245                            odb[IndWys]++;
   \   00000222   2078               LDRB     R0,[R4, #+0]
   \   00000224   8000               LSLS     R0,R0,#+2
   \   00000226   2018               ADDS     R0,R4,R0
   \   00000228   016A               LDR      R1,[R0, #+32]
   \   0000022A   491C               ADDS     R1,R1,#+1
   \   0000022C   0162               STR      R1,[R0, #+32]
    246                    }
    247                    return FrameOk;
   \                     ??RF_ReciveFarm_5:
   \   0000022E   0098               LDR      R0,[SP, #+0]
   \   00000230   0006               LSLS     R0,R0,#+24
   \   00000232   000E               LSRS     R0,R0,#+24
   \   00000234   F8BC               POP      {R3-R7}
   \   00000236   02BC               POP      {R1}
   \   00000238   0847               BX       R1               ;; return
   \   0000023A   C046               Nop      
   \                     ??RF_ReciveFarm_1:
   \   0000023C   ........           DC32     IndWys
    248          
    249          }
    250          
    251          
    252          
    253          
    254          
    255          //-----------------------------------------------------------------------------
    256          //!  Nazwa funkcji :    RF_ExecuteOrder
    257          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
    258          //-----------------------------------------------------------------------------
    259          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    260          void RF_ExecuteOrder(_RF_Command *Command)
    261          {
   \                     RF_ExecuteOrder:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   8DB0               SUB      SP,SP,#+52
   \   00000004   0400               MOVS     R4,R0
   \   00000006   D948               LDR      R0,??RF_ExecuteOrder_1  ;; IndWys + 40
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   0160               STR      R1,[R0, #+0]
    262           // TRACE_INFO("Id: %X,  Ord: %X,  Reg: %X,  Val: %X \n\r", Command->ID, Command->Order, Command->Auxi, Command->B8.Val); 
    263             licznik_cykli=0;  
    264             char Nd;
    265             char FoundNode, FoundTask;             
    266             
    267             _RF_Command CMD;
    268             for (char i=0; i<sizeof(_RF_Command); i++) {CMD.Streem[i]=Command->Streem[i];}
   \   0000000C   0800               MOVS     R0,R1
   \   0000000E   06AA               ADD      R2,SP,#+24
   \   00000010   03E0               B        ??RF_ExecuteOrder_2
   \                     ??RF_ExecuteOrder_3:
   \   00000012   0100               MOVS     R1,R0
   \   00000014   635C               LDRB     R3,[R4, R1]
   \   00000016   5354               STRB     R3,[R2, R1]
   \   00000018   401C               ADDS     R0,R0,#+1
   \                     ??RF_ExecuteOrder_2:
   \   0000001A   0828               CMP      R0,#+8
   \   0000001C   F9D3               BCC      ??RF_ExecuteOrder_3
   \   0000001E   06A8               ADD      R0,SP,#+24
   \   00000020   C01C               ADDS     R0,R0,#+3
   \   00000022   ........           BL       __aeabi_uread8
   \   00000026   D249               LDR      R1,??RF_ExecuteOrder_1+0x4  ;; 0xfffff0
   \   00000028   0140               ANDS     R1,R1,R0
   \   0000002A   0800               MOVS     R0,R1
   \   0000002C   0009               LSRS     R0,R0,#+4
   \   0000002E   0490               STR      R0,[SP, #+16]
    269             int BC_ID2=(int)CMD.BC_ID2; 
    270             char BC_REG=(char)CMD.BC_REG;
   \   00000030   06A8               ADD      R0,SP,#+24
   \   00000032   C01C               ADDS     R0,R0,#+3
   \   00000034   ........           BL       __aeabi_uread8
   \   00000038   0007               LSLS     R0,R0,#+28
   \   0000003A   000F               LSRS     R0,R0,#+28
   \   0000003C   0890               STR      R0,[SP, #+32]
   \   0000003E   06A8               ADD      R0,SP,#+24
   \   00000040   801C               ADDS     R0,R0,#+2
   \   00000042   ........           BL       __aeabi_uread4
   \   00000046   F021               MOVS     R1,#+240
   \   00000048   0140               ANDS     R1,R1,R0
   \   0000004A   0D00               MOVS     R5,R1
   \   0000004C   2D09               LSRS     R5,R5,#+4
   \   0000004E   0298               LDR      R0,[SP, #+8]
   \   00000050   000D               LSRS     R0,R0,#+20
   \   00000052   0005               LSLS     R0,R0,#+20
   \   00000054   C749               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   00000056   0968               LDR      R1,[R1, #+0]
   \   00000058   0903               LSLS     R1,R1,#+12
   \   0000005A   090B               LSRS     R1,R1,#+12
   \   0000005C   0143               ORRS     R1,R1,R0
   \   0000005E   0291               STR      R1,[SP, #+8]
    271             char* pNODE_ID=(char*)&NODE_ID;
    272             char Order=CMD.Order;
    273             _RF_Command  CommandToSend;
    274             
    275             //czêæ wspólna wszystkich odpowiedzi
    276             CommandToSend.ID     = RF_Status.RF_ID;
    277             CommandToSend.Auxi   = Command->Auxi;
   \   00000060   02AE               ADD      R6,SP,#+8
   \   00000062   3000               MOVS     R0,R6
   \   00000064   C01C               ADDS     R0,R0,#+3
   \   00000066   ........           BL       __aeabi_uread4
   \   0000006A   0700               MOVS     R7,R0
   \   0000006C   2000               MOVS     R0,R4
   \   0000006E   C01C               ADDS     R0,R0,#+3
   \   00000070   ........           BL       __aeabi_uread4
   \   00000074   3100               MOVS     R1,R6
   \   00000076   C91C               ADDS     R1,R1,#+3
   \   00000078   FF22               MOVS     R2,#+255
   \   0000007A   9743               BICS     R7,R7,R2
   \   0000007C   0006               LSLS     R0,R0,#+24
   \   0000007E   000E               LSRS     R0,R0,#+24
   \   00000080   3843               ORRS     R0,R0,R7
   \   00000082   ........           BL       __aeabi_uwrite4
    278             
    279                 
    280              char ByteToSend=0;          
   \   00000086   6846               MOV      R0,SP
   \   00000088   0021               MOVS     R1,#+0
   \   0000008A   0180               STRH     R1,[R0, #+0]
    281              char NextModule=0;
    282              switch (Order)
   \   0000008C   6D1E               SUBS     R5,R5,#+1
   \   0000008E   0E2D               CMP      R5,#+14
   \   00000090   01D9               BLS      .+6
   \   00000092   00F056FC           BL       ??RF_ExecuteOrder_4
   \   00000096   02A0               ADR      R0,??RF_ExecuteOrder_0
   \   00000098   6D00               LSLS     R5,R5,#+1
   \   0000009A   405B               LDRH     R0,[R0, R5]
   \   0000009C   8744               ADD      PC,PC,R0
   \   0000009E   C046               Nop      
   \                     ??RF_ExecuteOrder_0:
   \   000000A0   1E00D800A208       DC16     +30,+216,+2210,+2210
   \              A208        
   \   000000A8   4806A208EA01       DC16     +1608,+2210,+490,+1068
   \              2C04        
   \   000000B0   BE069407A208       DC16     +1726,+1940,+2210,+2038
   \              F607        
   \   000000B8   4008A2087C08       DC16     +2112,+2210,+2172
    283              {  
    284               
    285                 //Rozkazy dla Slave ------------------------------------------------------------
    286                
    287                      case R_RegOrd :  //Odczyt pojedyñczego rejestru - rozkaz
    288                               //wykonanie ------
    289                               if (Command->ID==RF_Status.RF_ID)  //je¿eli odpytanie bezporednie
   \                     ??RF_ExecuteOrder_5:
   \   000000BE   2000               MOVS     R0,R4
   \   000000C0   ........           BL       __aeabi_uread4
   \   000000C4   0003               LSLS     R0,R0,#+12
   \   000000C6   000B               LSRS     R0,R0,#+12
   \   000000C8   AA49               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   000000CA   0968               LDR      R1,[R1, #+0]
   \   000000CC   8842               CMP      R0,R1
   \   000000CE   0CD1               BNE      ??RF_ExecuteOrder_6
    290                               {
    291                                  CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
   \   000000D0   3000               MOVS     R0,R6
   \   000000D2   C01C               ADDS     R0,R0,#+3
   \   000000D4   ........           BL       __aeabi_uread4
   \   000000D8   A749               LDR      R1,??RF_ExecuteOrder_1+0xC  ;; 0x3a2
   \   000000DA   0006               LSLS     R0,R0,#+24
   \   000000DC   000E               LSRS     R0,R0,#+24
   \   000000DE   4000               LSLS     R0,R0,#+1
   \   000000E0   A64A               LDR      R2,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   000000E2   1018               ADDS     R0,R2,R0
   \   000000E4   405A               LDRH     R0,[R0, R1]
   \   000000E6   B080               STRH     R0,[R6, #+4]
   \   000000E8   30E0               B        ??RF_ExecuteOrder_7
    292                               }else{ 
    293                                  for (char ND=0; ND<NumberNeurons-1; ND++)
   \                     ??RF_ExecuteOrder_6:
   \   000000EA   0025               MOVS     R5,#+0
   \   000000EC   21E0               B        ??RF_ExecuteOrder_8
   \                     ??RF_ExecuteOrder_9:
   \   000000EE   A44F               LDR      R7,??RF_ExecuteOrder_1+0x14  ;; NeuronsList
   \   000000F0   0C21               MOVS     R1,#+12
   \   000000F2   4843               MULS     R0,R1,R0
   \   000000F4   3F18               ADDS     R7,R7,R0
   \   000000F6   387A               LDRB     R0,[R7, #+8]
   \   000000F8   C006               LSLS     R0,R0,#+27
   \   000000FA   17D5               BPL      ??RF_ExecuteOrder_10
   \   000000FC   2000               MOVS     R0,R4
   \   000000FE   ........           BL       __aeabi_uread4
   \   00000102   0003               LSLS     R0,R0,#+12
   \   00000104   000B               LSRS     R0,R0,#+12
   \   00000106   7968               LDR      R1,[R7, #+4]
   \   00000108   8842               CMP      R0,R1
   \   0000010A   0FD1               BNE      ??RF_ExecuteOrder_10
    294                                  {
    295                                    if ((NeuronsList[ND].Bridge) && (Command->ID==NeuronsList[ND].NeuronID))
    296                                    {
    297                                      CommandToSend.B8.Val  =  MainStage.StageI[ND+1].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
   \   0000010C   3000               MOVS     R0,R6
   \   0000010E   C01C               ADDS     R0,R0,#+3
   \   00000110   ........           BL       __aeabi_uread4
   \   00000114   0006               LSLS     R0,R0,#+24
   \   00000116   000E               LSRS     R0,R0,#+24
   \   00000118   4000               LSLS     R0,R0,#+1
   \   0000011A   2900               MOVS     R1,R5
   \   0000011C   1622               MOVS     R2,#+22
   \   0000011E   5143               MULS     R1,R2,R1
   \   00000120   964A               LDR      R2,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   00000122   5118               ADDS     R1,R2,R1
   \   00000124   0818               ADDS     R0,R1,R0
   \   00000126   B630               ADDS     R0,R0,#+182
   \   00000128   0088               LDRH     R0,[R0, #+0]
   \   0000012A   B080               STRH     R0,[R6, #+4]
    298                                    }
    299                                  }
   \                     ??RF_ExecuteOrder_10:
   \   0000012C   6D1C               ADDS     R5,R5,#+1
   \   0000012E   2D06               LSLS     R5,R5,#+24
   \   00000130   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_8:
   \   00000132   2800               MOVS     R0,R5
   \   00000134   2228               CMP      R0,#+34
   \   00000136   DAD3               BCC      ??RF_ExecuteOrder_9
    300          
    301                                  CommandToSend.ID=Command->ID;
   \   00000138   0298               LDR      R0,[SP, #+8]
   \   0000013A   050D               LSRS     R5,R0,#+20
   \   0000013C   2D05               LSLS     R5,R5,#+20
   \   0000013E   2000               MOVS     R0,R4
   \   00000140   ........           BL       __aeabi_uread4
   \   00000144   0003               LSLS     R0,R0,#+12
   \   00000146   000B               LSRS     R0,R0,#+12
   \   00000148   2843               ORRS     R0,R0,R5
   \   0000014A   0290               STR      R0,[SP, #+8]
    302                               }
    303                               //odpowied ------
    304                               CommandToSend.Order  = R_RegRes;
   \                     ??RF_ExecuteOrder_7:
   \   0000014C   3000               MOVS     R0,R6
   \   0000014E   801C               ADDS     R0,R0,#+2
   \   00000150   ........           BL       __aeabi_uread4
   \   00000154   0200               MOVS     R2,R0
   \   00000156   3100               MOVS     R1,R6
   \   00000158   891C               ADDS     R1,R1,#+2
   \   0000015A   F020               MOVS     R0,#+240
   \   0000015C   8243               BICS     R2,R2,R0
   \   0000015E   9020               MOVS     R0,#+144
   \   00000160   1043               ORRS     R0,R0,R2
   \   00000162   ........           BL       __aeabi_uwrite4
    305                               CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000166   0621               MOVS     R1,#+6
   \   00000168   02A8               ADD      R0,SP,#+8
   \   0000016A   ........           BL       crc16
   \   0000016E   F080               STRH     R0,[R6, #+6]
    306                               ByteToSend =8;
   \   00000170   6846               MOV      R0,SP
   \   00000172   0821               MOVS     R1,#+8
   \   00000174   0170               STRB     R1,[R0, #+0]
   \   00000176   E4E3               B        ??RF_ExecuteOrder_4
    307                           break;
    308                           
    309                      case W_RegOrd :  //Zapis pojedyñczego rejestru  -rozkaz
    310                              
    311                              //przypieszenie wykonania programu
    312                              if ((CommandToSend.Auxi==0) && (MainStage.StageQ[0].Value[CommandToSend.Auxi]!=Command->B8.Val) && (Busy_program==0))
   \                     ??RF_ExecuteOrder_11:
   \   00000178   3000               MOVS     R0,R6
   \   0000017A   C01C               ADDS     R0,R0,#+3
   \   0000017C   ........           BL       __aeabi_uread4
   \   00000180   0006               LSLS     R0,R0,#+24
   \   00000182   1CD1               BNE      ??RF_ExecuteOrder_12
   \   00000184   3000               MOVS     R0,R6
   \   00000186   C01C               ADDS     R0,R0,#+3
   \   00000188   ........           BL       __aeabi_uread4
   \   0000018C   2179               LDRB     R1,[R4, #+4]
   \   0000018E   6279               LDRB     R2,[R4, #+5]
   \   00000190   1206               LSLS     R2,R2,#+24
   \   00000192   120C               LSRS     R2,R2,#+16
   \   00000194   1143               ORRS     R1,R1,R2
   \   00000196   784A               LDR      R2,??RF_ExecuteOrder_1+0xC  ;; 0x3a2
   \   00000198   0006               LSLS     R0,R0,#+24
   \   0000019A   000E               LSRS     R0,R0,#+24
   \   0000019C   4000               LSLS     R0,R0,#+1
   \   0000019E   774B               LDR      R3,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   000001A0   1818               ADDS     R0,R3,R0
   \   000001A2   805E               LDRSH    R0,[R0, R2]
   \   000001A4   8842               CMP      R0,R1
   \   000001A6   0AD0               BEQ      ??RF_ExecuteOrder_12
   \   000001A8   7648               LDR      R0,??RF_ExecuteOrder_1+0x18  ;; Busy_program
   \   000001AA   0078               LDRB     R0,[R0, #+0]
   \   000001AC   0028               CMP      R0,#+0
   \   000001AE   06D1               BNE      ??RF_ExecuteOrder_12
    313                              {   
    314                                g_NextTimeProgram=g_counter+1;
   \   000001B0   754A               LDR      R2,??RF_ExecuteOrder_1+0x1C  ;; g_NextTimeProgram
   \   000001B2   7648               LDR      R0,??RF_ExecuteOrder_1+0x20  ;; g_counter
   \   000001B4   03C8               LDM      R0!,{R0,R1}
   \   000001B6   0023               MOVS     R3,#+0
   \   000001B8   401C               ADDS     R0,R0,#+1
   \   000001BA   5941               ADCS     R1,R1,R3
   \   000001BC   03C2               STM      R2!,{R0,R1}
    315                              }
    316                        
    317                              
    318                              
    319                               //wykonanie ------
    320                               if (Command->ID==RF_Status.RF_ID)  //je¿eli wykonanie bezporednie
   \                     ??RF_ExecuteOrder_12:
   \   000001BE   2000               MOVS     R0,R4
   \   000001C0   ........           BL       __aeabi_uread4
   \   000001C4   0003               LSLS     R0,R0,#+12
   \   000001C6   000B               LSRS     R0,R0,#+12
   \   000001C8   6A49               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   000001CA   0968               LDR      R1,[R1, #+0]
   \   000001CC   8842               CMP      R0,R1
   \   000001CE   10D1               BNE      ??RF_ExecuteOrder_13
    321                               {
    322                                 MainStage.StageI[0].Value[CommandToSend.Auxi]=Command->B8.Val;                                    //Ustaw rejestr nr: Command.Auxi 
   \   000001D0   3000               MOVS     R0,R6
   \   000001D2   C01C               ADDS     R0,R0,#+3
   \   000001D4   ........           BL       __aeabi_uread4
   \   000001D8   0006               LSLS     R0,R0,#+24
   \   000001DA   000E               LSRS     R0,R0,#+24
   \   000001DC   4000               LSLS     R0,R0,#+1
   \   000001DE   6749               LDR      R1,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   000001E0   0818               ADDS     R0,R1,R0
   \   000001E2   A030               ADDS     R0,R0,#+160
   \   000001E4   2279               LDRB     R2,[R4, #+4]
   \   000001E6   6179               LDRB     R1,[R4, #+5]
   \   000001E8   0906               LSLS     R1,R1,#+24
   \   000001EA   090C               LSRS     R1,R1,#+16
   \   000001EC   0A43               ORRS     R2,R2,R1
   \   000001EE   0280               STRH     R2,[R0, #+0]
   \   000001F0   35E0               B        ??RF_ExecuteOrder_14
    323                               }else{
    324                                 CommandToSend.ID=Command->ID; 
   \                     ??RF_ExecuteOrder_13:
   \   000001F2   0298               LDR      R0,[SP, #+8]
   \   000001F4   050D               LSRS     R5,R0,#+20
   \   000001F6   2D05               LSLS     R5,R5,#+20
   \   000001F8   2000               MOVS     R0,R4
   \   000001FA   ........           BL       __aeabi_uread4
   \   000001FE   0003               LSLS     R0,R0,#+12
   \   00000200   000B               LSRS     R0,R0,#+12
   \   00000202   2843               ORRS     R0,R0,R5
   \   00000204   0290               STR      R0,[SP, #+8]
    325                                 for (char ND=0; ND<NumberNeurons-1; ND++)
   \   00000206   0025               MOVS     R5,#+0
   \   00000208   26E0               B        ??RF_ExecuteOrder_15
   \                     ??RF_ExecuteOrder_16:
   \   0000020A   5D4F               LDR      R7,??RF_ExecuteOrder_1+0x14  ;; NeuronsList
   \   0000020C   0C21               MOVS     R1,#+12
   \   0000020E   4843               MULS     R0,R1,R0
   \   00000210   3F18               ADDS     R7,R7,R0
   \   00000212   387A               LDRB     R0,[R7, #+8]
   \   00000214   C006               LSLS     R0,R0,#+27
   \   00000216   1CD5               BPL      ??RF_ExecuteOrder_17
   \   00000218   2000               MOVS     R0,R4
   \   0000021A   ........           BL       __aeabi_uread4
   \   0000021E   0003               LSLS     R0,R0,#+12
   \   00000220   000B               LSRS     R0,R0,#+12
   \   00000222   7968               LDR      R1,[R7, #+4]
   \   00000224   8842               CMP      R0,R1
   \   00000226   14D1               BNE      ??RF_ExecuteOrder_17
    326                                  {
    327                                    if ((NeuronsList[ND].Bridge) && (Command->ID==NeuronsList[ND].NeuronID))
    328                                    {
    329                                      MainStage.StageQ[ND+1].Value[CommandToSend.Auxi]=Command->B8.Val;                                    //Ustaw rejestr nr: Command.Auxi 
   \   00000228   3000               MOVS     R0,R6
   \   0000022A   C01C               ADDS     R0,R0,#+3
   \   0000022C   ........           BL       __aeabi_uread4
   \   00000230   EE21               MOVS     R1,#+238
   \   00000232   8900               LSLS     R1,R1,#+2        ;; #+952
   \   00000234   0006               LSLS     R0,R0,#+24
   \   00000236   000E               LSRS     R0,R0,#+24
   \   00000238   4000               LSLS     R0,R0,#+1
   \   0000023A   2A00               MOVS     R2,R5
   \   0000023C   1623               MOVS     R3,#+22
   \   0000023E   5A43               MULS     R2,R3,R2
   \   00000240   4E4B               LDR      R3,??RF_ExecuteOrder_1+0x10  ;; MainStage
   \   00000242   9A18               ADDS     R2,R3,R2
   \   00000244   1018               ADDS     R0,R2,R0
   \   00000246   2379               LDRB     R3,[R4, #+4]
   \   00000248   6279               LDRB     R2,[R4, #+5]
   \   0000024A   1206               LSLS     R2,R2,#+24
   \   0000024C   120C               LSRS     R2,R2,#+16
   \   0000024E   1343               ORRS     R3,R3,R2
   \   00000250   4352               STRH     R3,[R0, R1]
    330                                    }
    331                                  }
   \                     ??RF_ExecuteOrder_17:
   \   00000252   6D1C               ADDS     R5,R5,#+1
   \   00000254   2D06               LSLS     R5,R5,#+24
   \   00000256   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_15:
   \   00000258   2800               MOVS     R0,R5
   \   0000025A   2228               CMP      R0,#+34
   \   0000025C   D5D3               BCC      ??RF_ExecuteOrder_16
    332                               }
    333                              
    334                              
    335                               //odpowied ------
    336                               CommandToSend.Order  = W_RegRes;
   \                     ??RF_ExecuteOrder_14:
   \   0000025E   3000               MOVS     R0,R6
   \   00000260   801C               ADDS     R0,R0,#+2
   \   00000262   ........           BL       __aeabi_uread4
   \   00000266   0200               MOVS     R2,R0
   \   00000268   3100               MOVS     R1,R6
   \   0000026A   891C               ADDS     R1,R1,#+2
   \   0000026C   F020               MOVS     R0,#+240
   \   0000026E   8243               BICS     R2,R2,R0
   \   00000270   A020               MOVS     R0,#+160
   \   00000272   1043               ORRS     R0,R0,R2
   \   00000274   ........           BL       __aeabi_uwrite4
    337                               CommandToSend.B6.CRC = crc16(CommandToSend.Streem,4);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000278   0421               MOVS     R1,#+4
   \   0000027A   02A8               ADD      R0,SP,#+8
   \   0000027C   ........           BL       crc16
   \   00000280   B080               STRH     R0,[R6, #+4]
    338                               ByteToSend =6;
   \   00000282   6846               MOV      R0,SP
   \   00000284   0621               MOVS     R1,#+6
   \   00000286   0170               STRB     R1,[R0, #+0]
   \   00000288   5BE3               B        ??RF_ExecuteOrder_4
    339                           break;
    340                          
    341                           
    342                         
    343                        case R_BC_Order :  //Odpowied na pytanie kto ma wêze³ (+ dodanie zadania odpytania)
    344                               //wykonanie ------
    345                               //CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
    346                              
    347                              // AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    348                              // ButtonBipCounter=g_counter+10000;
    349                           
    350                   
    351                               
    352                               Nd=0;
   \                     ??RF_ExecuteOrder_18:
   \   0000028A   0C00               MOVS     R4,R1
    353                               FoundNode=0xFF;
   \   0000028C   FF25               MOVS     R5,#+255
    354                               FoundTask=0;
   \   0000028E   0800               MOVS     R0,R1
   \   00000290   0190               STR      R0,[SP, #+4]
    355                          
    356                        
    357                               if (BC_ID2==RF_Status.RF_ID) //jezeli zapytanie rozg³one o mnie 
   \   00000292   0498               LDR      R0,[SP, #+16]
   \   00000294   3749               LDR      R1,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   00000296   0968               LDR      R1,[R1, #+0]
   \   00000298   8842               CMP      R0,R1
   \   0000029A   2AD1               BNE      ??RF_ExecuteOrder_19
    358                               {
    359          
    360                                   CommandToSend.Order= RW_BC_Res;
   \   0000029C   3000               MOVS     R0,R6
   \   0000029E   801C               ADDS     R0,R0,#+2
   \   000002A0   ........           BL       __aeabi_uread4
   \   000002A4   0200               MOVS     R2,R0
   \   000002A6   3100               MOVS     R1,R6
   \   000002A8   891C               ADDS     R1,R1,#+2
   \   000002AA   F020               MOVS     R0,#+240
   \   000002AC   1043               ORRS     R0,R0,R2
   \   000002AE   ........           BL       __aeabi_uwrite4
    361                                   CommandToSend.BC_ID1=RF_Status.RF_ID; 
   \   000002B2   02A8               ADD      R0,SP,#+8
   \   000002B4   ........           BL       __aeabi_uread8
   \   000002B8   02AA               ADD      R2,SP,#+8
   \   000002BA   1700               MOVS     R7,R2
   \   000002BC   344C               LDR      R4,??RF_ExecuteOrder_1+0x24  ;; 0xfff00000
   \   000002BE   0025               MOVS     R5,#+0
   \   000002C0   ED43               MVNS     R5,R5            ;; #-1
   \   000002C2   0440               ANDS     R4,R4,R0
   \   000002C4   0D40               ANDS     R5,R5,R1
   \   000002C6   2B48               LDR      R0,??RF_ExecuteOrder_1+0x8  ;; RF_Status + 24
   \   000002C8   0268               LDR      R2,[R0, #+0]
   \   000002CA   3248               LDR      R0,??RF_ExecuteOrder_1+0x28  ;; 0xfffff
   \   000002CC   0021               MOVS     R1,#+0
   \   000002CE   1040               ANDS     R0,R0,R2
   \   000002D0   2043               ORRS     R0,R0,R4
   \   000002D2   2943               ORRS     R1,R1,R5
   \   000002D4   3A00               MOVS     R2,R7
   \   000002D6   ........           BL       __aeabi_uwrite8
    362                                   CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000002DA   0621               MOVS     R1,#+6
   \   000002DC   02A8               ADD      R0,SP,#+8
   \   000002DE   ........           BL       crc16
   \   000002E2   F080               STRH     R0,[R6, #+6]
    363                                   ByteToSend =8;
   \   000002E4   6846               MOV      R0,SP
   \   000002E6   0821               MOVS     R1,#+8
   \   000002E8   0170               STRB     R1,[R0, #+0]
   \   000002EA   2AE3               B        ??RF_ExecuteOrder_4
    364                                
    365                               }else{  //jezeli zapytanie rozg³one o trzeci modu³
    366                               
    367                                       while ((FoundNode==0xFF) && (NeuronsList[Nd].NeuronID!=BC_ID2) && (Nd<(NumberNeurons-1))) Nd++; 
   \                     ??RF_ExecuteOrder_20:
   \   000002EC   641C               ADDS     R4,R4,#+1
   \   000002EE   2406               LSLS     R4,R4,#+24
   \   000002F0   240E               LSRS     R4,R4,#+24
   \                     ??RF_ExecuteOrder_19:
   \   000002F2   234F               LDR      R7,??RF_ExecuteOrder_1+0x14  ;; NeuronsList
   \   000002F4   2000               MOVS     R0,R4
   \   000002F6   0C21               MOVS     R1,#+12
   \   000002F8   4843               MULS     R0,R1,R0
   \   000002FA   3818               ADDS     R0,R7,R0
   \   000002FC   0590               STR      R0,[SP, #+20]
   \   000002FE   4068               LDR      R0,[R0, #+4]
   \   00000300   0499               LDR      R1,[SP, #+16]
   \   00000302   8842               CMP      R0,R1
   \   00000304   02D0               BEQ      ??RF_ExecuteOrder_21
   \   00000306   2000               MOVS     R0,R4
   \   00000308   2228               CMP      R0,#+34
   \   0000030A   EFD3               BCC      ??RF_ExecuteOrder_20
    368                                         
    369                                       if (NeuronsList[Nd].NeuronID==CMD.BC_ID2 ) FoundNode=Nd;     
   \                     ??RF_ExecuteOrder_21:
   \   0000030C   0AAA               ADD      R2,SP,#+40
   \   0000030E   04B5               PUSH     {R2,LR}
   \   00000310   08A8               ADD      R0,SP,#+32
   \   00000312   C01C               ADDS     R0,R0,#+3
   \   00000314   ........           BL       __aeabi_uread8
   \   00000318   009A               LDR      R2,[SP, #0]
   \   0000031A   02B0               ADD      SP,SP,#+8
   \   0000031C   03C2               STM      R2!,{R0,R1}
   \   0000031E   0598               LDR      R0,[SP, #+20]
   \   00000320   4268               LDR      R2,[R0, #+4]
   \   00000322   0AA8               ADD      R0,SP,#+40
   \   00000324   03C8               LDM      R0!,{R0,R1}
   \   00000326   1249               LDR      R1,??RF_ExecuteOrder_1+0x4  ;; 0xfffff0
   \   00000328   0140               ANDS     R1,R1,R0
   \   0000032A   0800               MOVS     R0,R1
   \   0000032C   0009               LSRS     R0,R0,#+4
   \   0000032E   8242               CMP      R2,R0
   \   00000330   00D1               BNE      ??RF_ExecuteOrder_22
   \   00000332   2500               MOVS     R5,R4
    370                              
    371                        
    372                                       if (FoundNode==0xFF)//je¿eli nie znaleziono wêz³a to dodaj
   \                     ??RF_ExecuteOrder_22:
   \   00000334   2800               MOVS     R0,R5
   \   00000336   0006               LSLS     R0,R0,#+24
   \   00000338   000E               LSRS     R0,R0,#+24
   \   0000033A   FF28               CMP      R0,#+255
   \   0000033C   38D1               BNE      ??RF_ExecuteOrder_23
    373                                       {
    374                                           //znalezienie miejsca dla nowego wêz³a ---------------------------
    375                                           //char NewNode=NumberNeurons-1; 
    376                                           //while ((NewNode>0) && (NeuronsList[NewNode].NeuronID!=0)) {NewNode--;}
    377                  
    378                                           FoundNode=0;
   \   0000033E   0025               MOVS     R5,#+0
   \   00000340   02E0               B        ??RF_ExecuteOrder_24
    379                                           while ((NeuronsList[FoundNode].NeuronID!=0) && (FoundNode<NumberNeurons-1)) {FoundNode++;}
   \                     ??RF_ExecuteOrder_25:
   \   00000342   6D1C               ADDS     R5,R5,#+1
   \   00000344   2D06               LSLS     R5,R5,#+24
   \   00000346   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_24:
   \   00000348   2800               MOVS     R0,R5
   \   0000034A   0C21               MOVS     R1,#+12
   \   0000034C   4843               MULS     R0,R1,R0
   \   0000034E   3818               ADDS     R0,R7,R0
   \   00000350   4168               LDR      R1,[R0, #+4]
   \   00000352   0029               CMP      R1,#+0
   \   00000354   02D0               BEQ      ??RF_ExecuteOrder_26
   \   00000356   2A00               MOVS     R2,R5
   \   00000358   222A               CMP      R2,#+34
   \   0000035A   F2D3               BCC      ??RF_ExecuteOrder_25
    380                                           
    381                                           if ((FoundNode>=NumberNeurons-1) || (NeuronsList[FoundNode].NeuronID!=0))  //je¿eli jest miejsce na dodanie nowego wêz³a
   \                     ??RF_ExecuteOrder_26:
   \   0000035C   2A00               MOVS     R2,R5
   \   0000035E   222A               CMP      R2,#+34
   \   00000360   01D2               BCS      ??RF_ExecuteOrder_27
   \   00000362   0029               CMP      R1,#+0
   \   00000364   18D0               BEQ      ??RF_ExecuteOrder_28
    382                                           {
    383                                             FoundNode=0xFF;
   \                     ??RF_ExecuteOrder_27:
   \   00000366   FF25               MOVS     R5,#+255
   \   00000368   87E0               B        ??RF_ExecuteOrder_29
   \   0000036A   C046               Nop      
   \                     ??RF_ExecuteOrder_1:
   \   0000036C   ........           DC32     IndWys + 40
   \   00000370   F0FFFF00           DC32     0xfffff0
   \   00000374   ........           DC32     RF_Status + 24
   \   00000378   A2030000           DC32     0x3a2
   \   0000037C   ........           DC32     MainStage
   \   00000380   ........           DC32     NeuronsList
   \   00000384   ........           DC32     Busy_program
   \   00000388   ........           DC32     g_NextTimeProgram
   \   0000038C   ........           DC32     g_counter
   \   00000390   0000F0FF           DC32     0xfff00000
   \   00000394   FFFF0F00           DC32     0xfffff
    384                                           }else{
    385                                             NeuronsList[FoundNode].NeuronID=BC_ID2;
   \                     ??RF_ExecuteOrder_28:
   \   00000398   0499               LDR      R1,[SP, #+16]
   \   0000039A   4160               STR      R1,[R0, #+4]
    386                                             NeuronsList[FoundNode].Bridge=1;
   \   0000039C   017A               LDRB     R1,[R0, #+8]
   \   0000039E   1022               MOVS     R2,#+16
   \   000003A0   0A43               ORRS     R2,R2,R1
   \   000003A2   0272               STRB     R2,[R0, #+8]
    387                                             NeuronsList[FoundNode].NeuronType=NodeRF_Period;
   \   000003A4   0521               MOVS     R1,#+5
   \   000003A6   0170               STRB     R1,[R0, #+0]
    388                                             BridgeMode=1; 
   \   000003A8   C548               LDR      R0,??RF_ExecuteOrder_30  ;; IndWys + 4
   \   000003AA   0121               MOVS     R1,#+1
   \   000003AC   0170               STRB     R1,[R0, #+0]
   \   000003AE   64E0               B        ??RF_ExecuteOrder_29
    389                                           }
    390                                           FoundTask=0;
    391          
    392                                       }else{ //je¿eli wêze³ znaleziony
    393                     
    394                                          char i=0;
   \                     ??RF_ExecuteOrder_23:
   \   000003B0   0021               MOVS     R1,#+0
   \   000003B2   23E0               B        ??RF_ExecuteOrder_31
    395                                          while ((i<RF_Tasks-1) && (FoundTask==0))
    396                                          {
    397                                             if ((RF_TaskTab[i].Node==FoundNode+1) && 
    398                                                 (RF_TaskTab[i].Command.ID==NeuronsList[FoundNode].NeuronID) &&
    399                                                 (RF_TaskTab[i].Command.Order==R_RegOrd) &&
    400                                                 (RF_TaskTab[i].Command.Auxi==BC_REG))
   \                     ??RF_ExecuteOrder_32:
   \   000003B4   C34A               LDR      R2,??RF_ExecuteOrder_30+0x4  ;; RF_TaskTab
   \   000003B6   0800               MOVS     R0,R1
   \   000003B8   C000               LSLS     R0,R0,#+3
   \   000003BA   1318               ADDS     R3,R2,R0
   \   000003BC   2A00               MOVS     R2,R5
   \   000003BE   1206               LSLS     R2,R2,#+24
   \   000003C0   120E               LSRS     R2,R2,#+24
   \   000003C2   1C78               LDRB     R4,[R3, #+0]
   \   000003C4   1000               MOVS     R0,R2
   \   000003C6   401C               ADDS     R0,R0,#+1
   \   000003C8   8442               CMP      R4,R0
   \   000003CA   14D1               BNE      ??RF_ExecuteOrder_33
   \   000003CC   5868               LDR      R0,[R3, #+4]
   \   000003CE   0303               LSLS     R3,R0,#+12
   \   000003D0   1B0B               LSRS     R3,R3,#+12
   \   000003D2   0C24               MOVS     R4,#+12
   \   000003D4   6243               MULS     R2,R4,R2
   \   000003D6   BA18               ADDS     R2,R7,R2
   \   000003D8   5268               LDR      R2,[R2, #+4]
   \   000003DA   9342               CMP      R3,R2
   \   000003DC   0BD1               BNE      ??RF_ExecuteOrder_33
   \   000003DE   F022               MOVS     R2,#+240
   \   000003E0   1204               LSLS     R2,R2,#+16       ;; #+15728640
   \   000003E2   0240               ANDS     R2,R2,R0
   \   000003E4   120D               LSRS     R2,R2,#+20
   \   000003E6   012A               CMP      R2,#+1
   \   000003E8   05D1               BNE      ??RF_ExecuteOrder_33
   \   000003EA   000E               LSRS     R0,R0,#+24
   \   000003EC   089A               LDR      R2,[SP, #+32]
   \   000003EE   9042               CMP      R0,R2
   \   000003F0   01D1               BNE      ??RF_ExecuteOrder_33
    401                                                {
    402                                                  FoundTask=1;
   \   000003F2   0120               MOVS     R0,#+1
   \   000003F4   0190               STR      R0,[SP, #+4]
    403                                                }
    404                                            
    405                                             i++;
   \                     ??RF_ExecuteOrder_33:
   \   000003F6   491C               ADDS     R1,R1,#+1
   \   000003F8   0906               LSLS     R1,R1,#+24
   \   000003FA   090E               LSRS     R1,R1,#+24
    406                                          }
   \                     ??RF_ExecuteOrder_31:
   \   000003FC   0800               MOVS     R0,R1
   \   000003FE   4528               CMP      R0,#+69
   \   00000400   02D2               BCS      ??RF_ExecuteOrder_34
   \   00000402   0198               LDR      R0,[SP, #+4]
   \   00000404   0006               LSLS     R0,R0,#+24
   \   00000406   D5D0               BEQ      ??RF_ExecuteOrder_32
    407                                          
    408                                          
    409                                          
    410                                          if ((FoundTask) && (TransQuality.Mensur[FoundNode]))
   \                     ??RF_ExecuteOrder_34:
   \   00000408   0198               LDR      R0,[SP, #+4]
   \   0000040A   0006               LSLS     R0,R0,#+24
   \   0000040C   35D0               BEQ      ??RF_ExecuteOrder_29
   \   0000040E   2800               MOVS     R0,R5
   \   00000410   0006               LSLS     R0,R0,#+24
   \   00000412   000E               LSRS     R0,R0,#+24
   \   00000414   8000               LSLS     R0,R0,#+2
   \   00000416   AC49               LDR      R1,??RF_ExecuteOrder_30+0x8  ;; TransQuality
   \   00000418   0818               ADDS     R0,R1,R0
   \   0000041A   C06C               LDR      R0,[R0, #+76]
   \   0000041C   0028               CMP      R0,#+0
   \   0000041E   2CD0               BEQ      ??RF_ExecuteOrder_29
    411                                           {
    412                                            //odpowied ------
    413                                             CommandToSend.Order= RW_BC_Res;
   \   00000420   3000               MOVS     R0,R6
   \   00000422   801C               ADDS     R0,R0,#+2
   \   00000424   ........           BL       __aeabi_uread4
   \   00000428   0200               MOVS     R2,R0
   \   0000042A   3100               MOVS     R1,R6
   \   0000042C   891C               ADDS     R1,R1,#+2
   \   0000042E   F020               MOVS     R0,#+240
   \   00000430   1043               ORRS     R0,R0,R2
   \   00000432   ........           BL       __aeabi_uwrite4
    414                                             CommandToSend.BC_ID2=BC_ID2; 
   \   00000436   3000               MOVS     R0,R6
   \   00000438   C01C               ADDS     R0,R0,#+3
   \   0000043A   ........           BL       __aeabi_uread8
   \   0000043E   3200               MOVS     R2,R6
   \   00000440   D21C               ADDS     R2,R2,#+3
   \   00000442   1400               MOVS     R4,R2
   \   00000444   0200               MOVS     R2,R0
   \   00000446   0B00               MOVS     R3,R1
   \   00000448   A048               LDR      R0,??RF_ExecuteOrder_30+0xC  ;; 0xff00000f
   \   0000044A   0021               MOVS     R1,#+0
   \   0000044C   C943               MVNS     R1,R1            ;; #-1
   \   0000044E   1040               ANDS     R0,R0,R2
   \   00000450   1940               ANDS     R1,R1,R3
   \   00000452   03B4               PUSH     {R0,R1}
   \   00000454   069A               LDR      R2,[SP, #+24]
   \   00000456   1201               LSLS     R2,R2,#+4
   \   00000458   9D48               LDR      R0,??RF_ExecuteOrder_30+0x10  ;; 0xfffff0
   \   0000045A   0021               MOVS     R1,#+0
   \   0000045C   1040               ANDS     R0,R0,R2
   \   0000045E   0CBC               POP      {R2,R3}
   \   00000460   1043               ORRS     R0,R0,R2
   \   00000462   1943               ORRS     R1,R1,R3
   \   00000464   2200               MOVS     R2,R4
   \   00000466   ........           BL       __aeabi_uwrite8
    415                                             CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000046A   0621               MOVS     R1,#+6
   \   0000046C   02A8               ADD      R0,SP,#+8
   \   0000046E   ........           BL       crc16
   \   00000472   F080               STRH     R0,[R6, #+6]
    416                                             ByteToSend =8;
   \   00000474   6846               MOV      R0,SP
   \   00000476   0821               MOVS     R1,#+8
   \   00000478   0170               STRB     R1,[R0, #+0]
    417                                           } 
    418                                         
    419                                        
    420                                       }  
    421                                       
    422                                       
    423                                       if ((FoundTask==0) && (FoundNode!=0xFF))
   \                     ??RF_ExecuteOrder_29:
   \   0000047A   0198               LDR      R0,[SP, #+4]
   \   0000047C   0006               LSLS     R0,R0,#+24
   \   0000047E   00D0               BEQ      .+4
   \   00000480   5FE2               B        ??RF_ExecuteOrder_4
   \   00000482   2800               MOVS     R0,R5
   \   00000484   0006               LSLS     R0,R0,#+24
   \   00000486   000E               LSRS     R0,R0,#+24
   \   00000488   FF28               CMP      R0,#+255
   \   0000048A   00D1               BNE      .+4
   \   0000048C   59E2               B        ??RF_ExecuteOrder_4
    424                                       if (AddRfTask(R_RegOrd, FoundNode+1, BC_REG)==0)  //je¿eli nie uda³o siê dodaæ zadania to usuñ wszystkie lady po tym wêle
                                                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   0000048E   089A               LDR      R2,[SP, #+32]
   \   00000490   1206               LSLS     R2,R2,#+24
   \   00000492   120E               LSRS     R2,R2,#+24
   \   00000494   2900               MOVS     R1,R5
   \   00000496   491C               ADDS     R1,R1,#+1
   \   00000498   0906               LSLS     R1,R1,#+24
   \   0000049A   090E               LSRS     R1,R1,#+24
   \   0000049C   0120               MOVS     R0,#+1
   \   0000049E   ........           BL       AddRfTask
   \   000004A2   0028               CMP      R0,#+0
   \   000004A4   0ED1               BNE      ??RF_ExecuteOrder_35
    425                                           {
    426                                             RemoveRfNodeAllTaska(FoundNode);
                                                    ^
Warning[Pe223]: function "RemoveRfNodeAllTaska" declared implicitly
   \                     ??RF_ExecuteOrder_36:
   \   000004A6   2800               MOVS     R0,R5
   \   000004A8   ........           BL       RemoveRfNodeAllTaska
    427                                             NeuronsList[FoundNode].NeuronID=0;
   \   000004AC   0C20               MOVS     R0,#+12
   \   000004AE   4543               MULS     R5,R0,R5
   \   000004B0   7819               ADDS     R0,R7,R5
   \   000004B2   0021               MOVS     R1,#+0
   \   000004B4   4160               STR      R1,[R0, #+4]
    428                                             NeuronsList[FoundNode].Bridge=0;
   \   000004B6   017A               LDRB     R1,[R0, #+8]
   \   000004B8   EF22               MOVS     R2,#+239
   \   000004BA   0A40               ANDS     R2,R2,R1
   \   000004BC   0272               STRB     R2,[R0, #+8]
    429                                             NeuronsList[FoundNode].NeuronType=0;
                                                                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   000004BE   0021               MOVS     R1,#+0
   \   000004C0   0170               STRB     R1,[R0, #+0]
   \   000004C2   3EE2               B        ??RF_ExecuteOrder_4
    430                                           }else{
    431                                             RF_Status.TimeToRemBridgeNoCom= MAX_TIME_TO_REM_BRIDGE_NO_CON;
   \                     ??RF_ExecuteOrder_35:
   \   000004C4   8348               LDR      R0,??RF_ExecuteOrder_30+0x14  ;; RF_Status + 18
   \   000004C6   1E21               MOVS     R1,#+30
   \   000004C8   0170               STRB     R1,[R0, #+0]
   \   000004CA   3AE2               B        ??RF_ExecuteOrder_4
    432                                           }
    433                                      
    434          
    435                               
    436                              } //koniec zapytania rozg³onego o trzeci modu³
    437                            
    438                         
    439                               //AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
    440          
    441                               
    442                         break;   
    443          
    444                           
    445                        case W_BC_Order :  //Odpowied na pytanie kto ma wêze³ (+ dodanie zadania odpytania)
    446                               //wykonanie ------
    447                               //CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
    448                       
    449                               
    450                              Nd=0;
   \                     ??RF_ExecuteOrder_37:
   \   000004CC   0C00               MOVS     R4,R1
    451                               FoundNode=0xFF;
   \   000004CE   FF25               MOVS     R5,#+255
    452                               FoundTask=0;
   \   000004D0   0800               MOVS     R0,R1
   \   000004D2   0190               STR      R0,[SP, #+4]
    453                          
    454                        
    455                               if (BC_ID2==RF_Status.RF_ID) //jezeli zapytanie rozg³one o mnie 
   \   000004D4   0498               LDR      R0,[SP, #+16]
   \   000004D6   8049               LDR      R1,??RF_ExecuteOrder_30+0x18  ;; RF_Status + 24
   \   000004D8   0968               LDR      R1,[R1, #+0]
   \   000004DA   8842               CMP      R0,R1
   \   000004DC   2AD1               BNE      ??RF_ExecuteOrder_38
    456                               {
    457          
    458                                   CommandToSend.Order= RW_BC_Res;
   \   000004DE   3000               MOVS     R0,R6
   \   000004E0   801C               ADDS     R0,R0,#+2
   \   000004E2   ........           BL       __aeabi_uread4
   \   000004E6   0200               MOVS     R2,R0
   \   000004E8   3100               MOVS     R1,R6
   \   000004EA   891C               ADDS     R1,R1,#+2
   \   000004EC   F020               MOVS     R0,#+240
   \   000004EE   1043               ORRS     R0,R0,R2
   \   000004F0   ........           BL       __aeabi_uwrite4
    459                                   CommandToSend.BC_ID1=RF_Status.RF_ID; 
   \   000004F4   02A8               ADD      R0,SP,#+8
   \   000004F6   ........           BL       __aeabi_uread8
   \   000004FA   02AA               ADD      R2,SP,#+8
   \   000004FC   1700               MOVS     R7,R2
   \   000004FE   774C               LDR      R4,??RF_ExecuteOrder_30+0x1C  ;; 0xfff00000
   \   00000500   0025               MOVS     R5,#+0
   \   00000502   ED43               MVNS     R5,R5            ;; #-1
   \   00000504   0440               ANDS     R4,R4,R0
   \   00000506   0D40               ANDS     R5,R5,R1
   \   00000508   7348               LDR      R0,??RF_ExecuteOrder_30+0x18  ;; RF_Status + 24
   \   0000050A   0268               LDR      R2,[R0, #+0]
   \   0000050C   7448               LDR      R0,??RF_ExecuteOrder_30+0x20  ;; 0xfffff
   \   0000050E   0021               MOVS     R1,#+0
   \   00000510   1040               ANDS     R0,R0,R2
   \   00000512   2043               ORRS     R0,R0,R4
   \   00000514   2943               ORRS     R1,R1,R5
   \   00000516   3A00               MOVS     R2,R7
   \   00000518   ........           BL       __aeabi_uwrite8
    460                                   CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000051C   0621               MOVS     R1,#+6
   \   0000051E   02A8               ADD      R0,SP,#+8
   \   00000520   ........           BL       crc16
   \   00000524   F080               STRH     R0,[R6, #+6]
    461                                   ByteToSend =8;
   \   00000526   6846               MOV      R0,SP
   \   00000528   0821               MOVS     R1,#+8
   \   0000052A   0170               STRB     R1,[R0, #+0]
   \   0000052C   09E2               B        ??RF_ExecuteOrder_4
    462                                
    463                               }else{  //jezeli zapytanie rozg³one o trzeci modu³
    464                               
    465                                       while ((FoundNode==0xFF) && (NeuronsList[Nd].NeuronID!=BC_ID2) && (Nd<(NumberNeurons-1))) Nd++; 
   \                     ??RF_ExecuteOrder_39:
   \   0000052E   641C               ADDS     R4,R4,#+1
   \   00000530   2406               LSLS     R4,R4,#+24
   \   00000532   240E               LSRS     R4,R4,#+24
   \                     ??RF_ExecuteOrder_38:
   \   00000534   6B4F               LDR      R7,??RF_ExecuteOrder_30+0x24  ;; NeuronsList
   \   00000536   2000               MOVS     R0,R4
   \   00000538   0C21               MOVS     R1,#+12
   \   0000053A   4843               MULS     R0,R1,R0
   \   0000053C   3818               ADDS     R0,R7,R0
   \   0000053E   0590               STR      R0,[SP, #+20]
   \   00000540   4068               LDR      R0,[R0, #+4]
   \   00000542   0499               LDR      R1,[SP, #+16]
   \   00000544   8842               CMP      R0,R1
   \   00000546   02D0               BEQ      ??RF_ExecuteOrder_40
   \   00000548   2000               MOVS     R0,R4
   \   0000054A   2228               CMP      R0,#+34
   \   0000054C   EFD3               BCC      ??RF_ExecuteOrder_39
    466                                         
    467                                       if (NeuronsList[Nd].NeuronID==CMD.BC_ID2 ) FoundNode=Nd;     
   \                     ??RF_ExecuteOrder_40:
   \   0000054E   0AAA               ADD      R2,SP,#+40
   \   00000550   04B5               PUSH     {R2,LR}
   \   00000552   08A8               ADD      R0,SP,#+32
   \   00000554   C01C               ADDS     R0,R0,#+3
   \   00000556   ........           BL       __aeabi_uread8
   \   0000055A   009A               LDR      R2,[SP, #0]
   \   0000055C   02B0               ADD      SP,SP,#+8
   \   0000055E   03C2               STM      R2!,{R0,R1}
   \   00000560   0598               LDR      R0,[SP, #+20]
   \   00000562   4268               LDR      R2,[R0, #+4]
   \   00000564   0AA8               ADD      R0,SP,#+40
   \   00000566   03C8               LDM      R0!,{R0,R1}
   \   00000568   5949               LDR      R1,??RF_ExecuteOrder_30+0x10  ;; 0xfffff0
   \   0000056A   0140               ANDS     R1,R1,R0
   \   0000056C   0800               MOVS     R0,R1
   \   0000056E   0009               LSRS     R0,R0,#+4
   \   00000570   8242               CMP      R2,R0
   \   00000572   00D1               BNE      ??RF_ExecuteOrder_41
   \   00000574   2500               MOVS     R5,R4
    468                              
    469                        
    470                                       if (FoundNode==0xFF)//je¿eli nie znaleziono wêz³a to dodaj
   \                     ??RF_ExecuteOrder_41:
   \   00000576   2800               MOVS     R0,R5
   \   00000578   0006               LSLS     R0,R0,#+24
   \   0000057A   000E               LSRS     R0,R0,#+24
   \   0000057C   FF28               CMP      R0,#+255
   \   0000057E   21D1               BNE      ??RF_ExecuteOrder_42
    471                                       {
    472                                           //znalezienie miejsca dla nowego wêz³a ---------------------------
    473                                           //char NewNode=NumberNeurons-1; 
    474                                           //while ((NewNode>0) && (NeuronsList[NewNode].NeuronID!=0)) {NewNode--;}
    475                  
    476                                           FoundNode=0;
   \   00000580   0025               MOVS     R5,#+0
   \   00000582   02E0               B        ??RF_ExecuteOrder_43
    477                                           while ((NeuronsList[FoundNode].NeuronID!=0) && (FoundNode<NumberNeurons-1)) {FoundNode++;}
   \                     ??RF_ExecuteOrder_44:
   \   00000584   6D1C               ADDS     R5,R5,#+1
   \   00000586   2D06               LSLS     R5,R5,#+24
   \   00000588   2D0E               LSRS     R5,R5,#+24
   \                     ??RF_ExecuteOrder_43:
   \   0000058A   2800               MOVS     R0,R5
   \   0000058C   0C21               MOVS     R1,#+12
   \   0000058E   4843               MULS     R0,R1,R0
   \   00000590   3818               ADDS     R0,R7,R0
   \   00000592   4168               LDR      R1,[R0, #+4]
   \   00000594   0029               CMP      R1,#+0
   \   00000596   02D0               BEQ      ??RF_ExecuteOrder_45
   \   00000598   2A00               MOVS     R2,R5
   \   0000059A   222A               CMP      R2,#+34
   \   0000059C   F2D3               BCC      ??RF_ExecuteOrder_44
    478                                           
    479                                           if ((FoundNode>=NumberNeurons-1) || (NeuronsList[FoundNode].NeuronID!=0))  //je¿eli jest miejsce na dodanie nowego wêz³a
   \                     ??RF_ExecuteOrder_45:
   \   0000059E   2A00               MOVS     R2,R5
   \   000005A0   222A               CMP      R2,#+34
   \   000005A2   01D2               BCS      ??RF_ExecuteOrder_46
   \   000005A4   0029               CMP      R1,#+0
   \   000005A6   01D0               BEQ      ??RF_ExecuteOrder_47
    480                                           {
    481                                             FoundNode=0xFF;
   \                     ??RF_ExecuteOrder_46:
   \   000005A8   FF25               MOVS     R5,#+255
   \   000005AA   70E0               B        ??RF_ExecuteOrder_48
    482                                           }else{
    483                                             NeuronsList[FoundNode].NeuronID=BC_ID2;
   \                     ??RF_ExecuteOrder_47:
   \   000005AC   0499               LDR      R1,[SP, #+16]
   \   000005AE   4160               STR      R1,[R0, #+4]
    484                                             NeuronsList[FoundNode].Bridge=1;
   \   000005B0   017A               LDRB     R1,[R0, #+8]
   \   000005B2   1022               MOVS     R2,#+16
   \   000005B4   0A43               ORRS     R2,R2,R1
   \   000005B6   0272               STRB     R2,[R0, #+8]
    485                                             NeuronsList[FoundNode].NeuronType=NodeRF_Period;
   \   000005B8   0521               MOVS     R1,#+5
   \   000005BA   0170               STRB     R1,[R0, #+0]
    486                                             BridgeMode=1; 
   \   000005BC   4048               LDR      R0,??RF_ExecuteOrder_30  ;; IndWys + 4
   \   000005BE   0121               MOVS     R1,#+1
   \   000005C0   0170               STRB     R1,[R0, #+0]
   \   000005C2   64E0               B        ??RF_ExecuteOrder_48
    487                                           }
    488                                           FoundTask=0;
    489          
    490                                       }else{ //je¿eli wêze³ znaleziony
    491                     
    492                                          char i=0;
   \                     ??RF_ExecuteOrder_42:
   \   000005C4   0021               MOVS     R1,#+0
   \   000005C6   23E0               B        ??RF_ExecuteOrder_49
    493                                          while ((i<RF_Tasks-1) && (FoundTask==0))
    494                                          {
    495                                             if ((RF_TaskTab[i].Node==FoundNode+1) && 
    496                                                 (RF_TaskTab[i].Command.ID==NeuronsList[FoundNode].NeuronID) &&
    497                                                 (RF_TaskTab[i].Command.Order==W_RegOrd) &&
    498                                                 (RF_TaskTab[i].Command.Auxi==BC_REG))
   \                     ??RF_ExecuteOrder_50:
   \   000005C8   3E4A               LDR      R2,??RF_ExecuteOrder_30+0x4  ;; RF_TaskTab
   \   000005CA   0800               MOVS     R0,R1
   \   000005CC   C000               LSLS     R0,R0,#+3
   \   000005CE   1318               ADDS     R3,R2,R0
   \   000005D0   2A00               MOVS     R2,R5
   \   000005D2   1206               LSLS     R2,R2,#+24
   \   000005D4   120E               LSRS     R2,R2,#+24
   \   000005D6   1C78               LDRB     R4,[R3, #+0]
   \   000005D8   1000               MOVS     R0,R2
   \   000005DA   401C               ADDS     R0,R0,#+1
   \   000005DC   8442               CMP      R4,R0
   \   000005DE   14D1               BNE      ??RF_ExecuteOrder_51
   \   000005E0   5868               LDR      R0,[R3, #+4]
   \   000005E2   0303               LSLS     R3,R0,#+12
   \   000005E4   1B0B               LSRS     R3,R3,#+12
   \   000005E6   0C24               MOVS     R4,#+12
   \   000005E8   6243               MULS     R2,R4,R2
   \   000005EA   BA18               ADDS     R2,R7,R2
   \   000005EC   5268               LDR      R2,[R2, #+4]
   \   000005EE   9342               CMP      R3,R2
   \   000005F0   0BD1               BNE      ??RF_ExecuteOrder_51
   \   000005F2   F022               MOVS     R2,#+240
   \   000005F4   1204               LSLS     R2,R2,#+16       ;; #+15728640
   \   000005F6   0240               ANDS     R2,R2,R0
   \   000005F8   120D               LSRS     R2,R2,#+20
   \   000005FA   022A               CMP      R2,#+2
   \   000005FC   05D1               BNE      ??RF_ExecuteOrder_51
   \   000005FE   000E               LSRS     R0,R0,#+24
   \   00000600   089A               LDR      R2,[SP, #+32]
   \   00000602   9042               CMP      R0,R2
   \   00000604   01D1               BNE      ??RF_ExecuteOrder_51
    499                                                {
    500                                                  FoundTask=1;
   \   00000606   0120               MOVS     R0,#+1
   \   00000608   0190               STR      R0,[SP, #+4]
    501                                                }
    502                                            
    503                                             i++;
   \                     ??RF_ExecuteOrder_51:
   \   0000060A   491C               ADDS     R1,R1,#+1
   \   0000060C   0906               LSLS     R1,R1,#+24
   \   0000060E   090E               LSRS     R1,R1,#+24
    504                                          }
   \                     ??RF_ExecuteOrder_49:
   \   00000610   0800               MOVS     R0,R1
   \   00000612   4528               CMP      R0,#+69
   \   00000614   02D2               BCS      ??RF_ExecuteOrder_52
   \   00000616   0198               LDR      R0,[SP, #+4]
   \   00000618   0006               LSLS     R0,R0,#+24
   \   0000061A   D5D0               BEQ      ??RF_ExecuteOrder_50
    505                                          
    506                                          
    507                                          
    508                                          if ((FoundTask) && (TransQuality.Mensur[FoundNode]))
   \                     ??RF_ExecuteOrder_52:
   \   0000061C   0198               LDR      R0,[SP, #+4]
   \   0000061E   0006               LSLS     R0,R0,#+24
   \   00000620   35D0               BEQ      ??RF_ExecuteOrder_48
   \   00000622   2800               MOVS     R0,R5
   \   00000624   0006               LSLS     R0,R0,#+24
   \   00000626   000E               LSRS     R0,R0,#+24
   \   00000628   8000               LSLS     R0,R0,#+2
   \   0000062A   2749               LDR      R1,??RF_ExecuteOrder_30+0x8  ;; TransQuality
   \   0000062C   0818               ADDS     R0,R1,R0
   \   0000062E   C06C               LDR      R0,[R0, #+76]
   \   00000630   0028               CMP      R0,#+0
   \   00000632   2CD0               BEQ      ??RF_ExecuteOrder_48
    509                                           {
    510                                            //odpowied ------
    511                                             CommandToSend.Order= RW_BC_Res;
   \   00000634   3000               MOVS     R0,R6
   \   00000636   801C               ADDS     R0,R0,#+2
   \   00000638   ........           BL       __aeabi_uread4
   \   0000063C   0200               MOVS     R2,R0
   \   0000063E   3100               MOVS     R1,R6
   \   00000640   891C               ADDS     R1,R1,#+2
   \   00000642   F020               MOVS     R0,#+240
   \   00000644   1043               ORRS     R0,R0,R2
   \   00000646   ........           BL       __aeabi_uwrite4
    512                                             CommandToSend.BC_ID2=BC_ID2; 
   \   0000064A   3000               MOVS     R0,R6
   \   0000064C   C01C               ADDS     R0,R0,#+3
   \   0000064E   ........           BL       __aeabi_uread8
   \   00000652   3200               MOVS     R2,R6
   \   00000654   D21C               ADDS     R2,R2,#+3
   \   00000656   1400               MOVS     R4,R2
   \   00000658   0200               MOVS     R2,R0
   \   0000065A   0B00               MOVS     R3,R1
   \   0000065C   1B48               LDR      R0,??RF_ExecuteOrder_30+0xC  ;; 0xff00000f
   \   0000065E   0021               MOVS     R1,#+0
   \   00000660   C943               MVNS     R1,R1            ;; #-1
   \   00000662   1040               ANDS     R0,R0,R2
   \   00000664   1940               ANDS     R1,R1,R3
   \   00000666   03B4               PUSH     {R0,R1}
   \   00000668   069A               LDR      R2,[SP, #+24]
   \   0000066A   1201               LSLS     R2,R2,#+4
   \   0000066C   1848               LDR      R0,??RF_ExecuteOrder_30+0x10  ;; 0xfffff0
   \   0000066E   0021               MOVS     R1,#+0
   \   00000670   1040               ANDS     R0,R0,R2
   \   00000672   0CBC               POP      {R2,R3}
   \   00000674   1043               ORRS     R0,R0,R2
   \   00000676   1943               ORRS     R1,R1,R3
   \   00000678   2200               MOVS     R2,R4
   \   0000067A   ........           BL       __aeabi_uwrite8
    513                                             CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000067E   0621               MOVS     R1,#+6
   \   00000680   02A8               ADD      R0,SP,#+8
   \   00000682   ........           BL       crc16
   \   00000686   F080               STRH     R0,[R6, #+6]
    514                                             ByteToSend =8;
   \   00000688   6846               MOV      R0,SP
   \   0000068A   0821               MOVS     R1,#+8
   \   0000068C   0170               STRB     R1,[R0, #+0]
    515                                           } 
    516                                         
    517                                        
    518                                       }  
    519                                       
    520                                       
    521                                       if ((FoundTask==0) && (FoundNode!=0xFF))
   \                     ??RF_ExecuteOrder_48:
   \   0000068E   0198               LDR      R0,[SP, #+4]
   \   00000690   0006               LSLS     R0,R0,#+24
   \   00000692   00D0               BEQ      .+4
   \   00000694   55E1               B        ??RF_ExecuteOrder_4
   \   00000696   2800               MOVS     R0,R5
   \   00000698   0006               LSLS     R0,R0,#+24
   \   0000069A   000E               LSRS     R0,R0,#+24
   \   0000069C   FF28               CMP      R0,#+255
   \   0000069E   00D1               BNE      .+4
   \   000006A0   4FE1               B        ??RF_ExecuteOrder_4
    522                                       if (AddRfTask(W_RegOrd, FoundNode+1, BC_REG)==0)  //je¿eli nie uda³o siê dodaæ zadania to usuñ wszystkie lady po tym wêle
                                                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   000006A2   089A               LDR      R2,[SP, #+32]
   \   000006A4   1206               LSLS     R2,R2,#+24
   \   000006A6   120E               LSRS     R2,R2,#+24
   \   000006A8   2900               MOVS     R1,R5
   \   000006AA   491C               ADDS     R1,R1,#+1
   \   000006AC   0906               LSLS     R1,R1,#+24
   \   000006AE   090E               LSRS     R1,R1,#+24
   \   000006B0   0220               MOVS     R0,#+2
   \   000006B2   ........           BL       AddRfTask
   \   000006B6   0028               CMP      R0,#+0
   \   000006B8   00D0               BEQ      .+4
   \   000006BA   42E1               B        ??RF_ExecuteOrder_4
   \   000006BC   F3E6               B        ??RF_ExecuteOrder_36
   \   000006BE   C046               Nop      
   \                     ??RF_ExecuteOrder_30:
   \   000006C0   ........           DC32     IndWys + 4
   \   000006C4   ........           DC32     RF_TaskTab
   \   000006C8   ........           DC32     TransQuality
   \   000006CC   0F0000FF           DC32     0xff00000f
   \   000006D0   F0FFFF00           DC32     0xfffff0
   \   000006D4   ........           DC32     RF_Status + 18
   \   000006D8   ........           DC32     RF_Status + 24
   \   000006DC   0000F0FF           DC32     0xfff00000
   \   000006E0   FFFF0F00           DC32     0xfffff
   \   000006E4   ........           DC32     NeuronsList
    523                                           {
    524                                             RemoveRfNodeAllTaska(FoundNode);
                                                    ^
Warning[Pe223]: function "RemoveRfNodeAllTaska" declared implicitly
    525                                             NeuronsList[FoundNode].NeuronID=0;
    526                                             NeuronsList[FoundNode].Bridge=0;
    527                                             NeuronsList[FoundNode].NeuronType=0;
                                                                                     ^
Warning[Pe188]: enumerated type mixed with another type
    528                                           }
    529                                      
    530          
    531                               
    532                              } //koniec zapytania rozg³onego o trzeci modu³
    533                            
    534                           
    535                         break;
    536                         
    537          
    538                               
    539                      case W_NewIdOrd :  //zapis noweg ID
    540                               //wykonanie ------
    541                              // NODE_ID=Command->CHID_NEW_ID; 
    542                                 
    543                               //CommandToSend.CHID_CUR_ID=RF_Status.RF_ID;
    544          
    545                               RF_Status.RF_ID=Command->CHID_NEW_ID;//skrócone id
   \                     ??RF_ExecuteOrder_53:
   \   000006E8   A54D               LDR      R5,??RF_ExecuteOrder_54  ;; RF_Status + 24
   \   000006EA   2000               MOVS     R0,R4
   \   000006EC   C01C               ADDS     R0,R0,#+3
   \   000006EE   ........           BL       __aeabi_uread8
   \   000006F2   A449               LDR      R1,??RF_ExecuteOrder_54+0x4  ;; 0xfffff0
   \   000006F4   0140               ANDS     R1,R1,R0
   \   000006F6   0800               MOVS     R0,R1
   \   000006F8   0009               LSRS     R0,R0,#+4
   \   000006FA   2860               STR      R0,[R5, #+0]
    546                               RF_Status.RF_ID_R=3000000+Command->CHID_NEW_ID;//pe³ne id
   \   000006FC   A24D               LDR      R5,??RF_ExecuteOrder_54+0x8  ;; RF_Status + 28
   \   000006FE   E41C               ADDS     R4,R4,#+3
   \   00000700   2000               MOVS     R0,R4
   \   00000702   ........           BL       __aeabi_uread8
   \   00000706   9F49               LDR      R1,??RF_ExecuteOrder_54+0x4  ;; 0xfffff0
   \   00000708   0140               ANDS     R1,R1,R0
   \   0000070A   0800               MOVS     R0,R1
   \   0000070C   0009               LSRS     R0,R0,#+4
   \   0000070E   9F49               LDR      R1,??RF_ExecuteOrder_54+0xC  ;; 0x2dc6c0
   \   00000710   4018               ADDS     R0,R0,R1
   \   00000712   2860               STR      R0,[R5, #+0]
    547          
    548                               
    549                               unsigned int Save = __get_interrupt_state();            
   \   00000714   ........           BL       __iar_get_interrupt_state
   \   00000718   0400               MOVS     R4,R0
    550                               __disable_interrupt();
   \   0000071A   ........           BL       __iar_disable_interrupt
    551                               FlashWrite((char*)(&(AT91C_IFLASH_MEM->NODE_ID)), (char*)&RF_Status.RF_ID_R,sizeof(RF_Status.RF_ID_R)); //(char *ptrMem, char *value, int length)
                                      ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   0000071E   0422               MOVS     R2,#+4
   \   00000720   9949               LDR      R1,??RF_ExecuteOrder_54+0x8  ;; RF_Status + 28
   \   00000722   9B48               LDR      R0,??RF_ExecuteOrder_54+0x10  ;; 0x13d95c
   \   00000724   ........           BL       FlashWrite
    552                               __set_interrupt_state(Save);
   \   00000728   2000               MOVS     R0,R4
   \   0000072A   ........           BL       __iar_set_interrupt_state
    553                               __enable_interrupt();  
   \   0000072E   ........           BL       __iar_enable_interrupt
    554                                 
    555                               
    556                               
    557                               //odpowied ------
    558                               CommandToSend.Order  = W_NewIdRes;
   \   00000732   3000               MOVS     R0,R6
   \   00000734   801C               ADDS     R0,R0,#+2
   \   00000736   ........           BL       __aeabi_uread4
   \   0000073A   0200               MOVS     R2,R0
   \   0000073C   3100               MOVS     R1,R6
   \   0000073E   891C               ADDS     R1,R1,#+2
   \   00000740   F020               MOVS     R0,#+240
   \   00000742   8243               BICS     R2,R2,R0
   \   00000744   D020               MOVS     R0,#+208
   \   00000746   1043               ORRS     R0,R0,R2
   \   00000748   ........           BL       __aeabi_uwrite4
    559                               CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

      switch (Order)
      ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\RF_Exe.c",282  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "Save" (declared at line 549 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-
                      14.03.2013\Framework\RF_Exe.c")
   \   0000074C   0621               MOVS     R1,#+6
   \   0000074E   02A8               ADD      R0,SP,#+8
   \   00000750   ........           BL       crc16
   \   00000754   F080               STRH     R0,[R6, #+6]
    560                               ByteToSend =8;
   \   00000756   6846               MOV      R0,SP
   \   00000758   0821               MOVS     R1,#+8
   \   0000075A   0170               STRB     R1,[R0, #+0]
   \   0000075C   F1E0               B        ??RF_ExecuteOrder_4
    561                       break;
    562                         
    563                         
    564          
    565                         
    566                         
    567                         
    568          //***********************************************************************************************                 
    569           //Odpowiedzi rozkazów od slave do sterownika ------------------------------------------------------------   
    570          //***********************************************************************************************
    571                         
    572                         
    573                         
    574                         
    575                      case R_RegRes :  //Odczyt pojedyñczego rejestru - odp
    576                               //wykonanie ------
    577                               //CommandToSend.B8.Val  =  0xCC;                            // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  0xCC)
    578          
    579          #ifdef _LIVE_RJESTR  
    580                             LIVE_TAB[LIVE_TAB_IDX]=0xB000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((Command->B8.Val)&0xFF);
    581                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    582          #endif              
    583                        
    584                              //przypieszenie wykonania programu
    585                              if ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]!=Command->B8.Val) && (Busy_program==0))
   \                     ??RF_ExecuteOrder_55:
   \   0000075E   8D4B               LDR      R3,??RF_ExecuteOrder_54+0x14  ;; MainStage
   \   00000760   8D4A               LDR      R2,??RF_ExecuteOrder_54+0x18  ;; RF_TaskTab
   \   00000762   0120               MOVS     R0,#+1
   \   00000764   8D49               LDR      R1,??RF_ExecuteOrder_54+0x1C  ;; IndWys
   \   00000766   0856               LDRSB    R0,[R1, R0]
   \   00000768   C000               LSLS     R0,R0,#+3
   \   0000076A   1018               ADDS     R0,R2,R0
   \   0000076C   4068               LDR      R0,[R0, #+4]
   \   0000076E   000E               LSRS     R0,R0,#+24
   \   00000770   20D1               BNE      ??RF_ExecuteOrder_56
   \   00000772   2079               LDRB     R0,[R4, #+4]
   \   00000774   6179               LDRB     R1,[R4, #+5]
   \   00000776   0906               LSLS     R1,R1,#+24
   \   00000778   090C               LSRS     R1,R1,#+16
   \   0000077A   0843               ORRS     R0,R0,R1
   \   0000077C   0121               MOVS     R1,#+1
   \   0000077E   874D               LDR      R5,??RF_ExecuteOrder_54+0x1C  ;; IndWys
   \   00000780   6956               LDRSB    R1,[R5, R1]
   \   00000782   C900               LSLS     R1,R1,#+3
   \   00000784   5118               ADDS     R1,R2,R1
   \   00000786   A025               MOVS     R5,#+160
   \   00000788   4E68               LDR      R6,[R1, #+4]
   \   0000078A   360E               LSRS     R6,R6,#+24
   \   0000078C   7600               LSLS     R6,R6,#+1
   \   0000078E   0978               LDRB     R1,[R1, #+0]
   \   00000790   1627               MOVS     R7,#+22
   \   00000792   7943               MULS     R1,R7,R1
   \   00000794   5918               ADDS     R1,R3,R1
   \   00000796   8919               ADDS     R1,R1,R6
   \   00000798   495F               LDRSH    R1,[R1, R5]
   \   0000079A   8142               CMP      R1,R0
   \   0000079C   0AD0               BEQ      ??RF_ExecuteOrder_56
   \   0000079E   8048               LDR      R0,??RF_ExecuteOrder_54+0x20  ;; Busy_program
   \   000007A0   0078               LDRB     R0,[R0, #+0]
   \   000007A2   0028               CMP      R0,#+0
   \   000007A4   06D1               BNE      ??RF_ExecuteOrder_56
    586                              {   
    587                                g_NextTimeProgram=g_counter+1;
   \   000007A6   7F4D               LDR      R5,??RF_ExecuteOrder_54+0x24  ;; g_NextTimeProgram
   \   000007A8   7F48               LDR      R0,??RF_ExecuteOrder_54+0x28  ;; g_counter
   \   000007AA   03C8               LDM      R0!,{R0,R1}
   \   000007AC   0026               MOVS     R6,#+0
   \   000007AE   401C               ADDS     R0,R0,#+1
   \   000007B0   7141               ADCS     R1,R1,R6
   \   000007B2   03C5               STM      R5!,{R0,R1}
    588                                
    589                           
    590                                //sygna³ dzwiêkowy je¿eli odczytano zmianê stanu na 1
    591                            /*    
    592                                 if ((Command->B8.Val>MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType==NodeRF_Remote) && (!(AT91C_IFLASH_MEM->Config.SoundOff)))
    593                                 {
    594                                    AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    595                                    ButtonBipCounter=g_counter+1;
    596                                 }
    597                             */
    598                                
    599                                
    600                                  #ifdef _LIVE_RJESTR    
    601                                      LIVE_TAB[LIVE_TAB_IDX]=0xFFFF;
    602                                    if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    603                                #endif   
    604                              
    605                              }
    606          
    607                              MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]=Command->B8.Val; 
   \                     ??RF_ExecuteOrder_56:
   \   000007B4   2079               LDRB     R0,[R4, #+4]
   \   000007B6   6179               LDRB     R1,[R4, #+5]
   \   000007B8   0906               LSLS     R1,R1,#+24
   \   000007BA   090C               LSRS     R1,R1,#+16
   \   000007BC   0843               ORRS     R0,R0,R1
   \   000007BE   0121               MOVS     R1,#+1
   \   000007C0   764C               LDR      R4,??RF_ExecuteOrder_54+0x1C  ;; IndWys
   \   000007C2   6156               LDRSB    R1,[R4, R1]
   \   000007C4   C900               LSLS     R1,R1,#+3
   \   000007C6   5118               ADDS     R1,R2,R1
   \   000007C8   4A68               LDR      R2,[R1, #+4]
   \   000007CA   120E               LSRS     R2,R2,#+24
   \   000007CC   5200               LSLS     R2,R2,#+1
   \   000007CE   0C78               LDRB     R4,[R1, #+0]
   \   000007D0   1625               MOVS     R5,#+22
   \   000007D2   6C43               MULS     R4,R5,R4
   \   000007D4   1B19               ADDS     R3,R3,R4
   \   000007D6   9A18               ADDS     R2,R3,R2
   \   000007D8   A032               ADDS     R2,R2,#+160
   \   000007DA   1080               STRH     R0,[R2, #+0]
    608                              
    609                              
    610                              #ifdef  DIRECT_Q_MESURE
    611                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    612                               #endif
    613                              
    614                   
    615                               TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
   \   000007DC   0878               LDRB     R0,[R1, #+0]
   \   000007DE   7349               LDR      R1,??RF_ExecuteOrder_54+0x2C  ;; TransQuality
   \   000007E0   8200               LSLS     R2,R0,#+2
   \   000007E2   8A18               ADDS     R2,R1,R2
   \   000007E4   936C               LDR      R3,[R2, #+72]
   \   000007E6   0124               MOVS     R4,#+1
   \   000007E8   0D78               LDRB     R5,[R1, #+0]
   \   000007EA   AC40               LSLS     R4,R4,R5
   \   000007EC   1C43               ORRS     R4,R4,R3
   \   000007EE   9464               STR      R4,[R2, #+72]
    616                               TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
   \   000007F0   0A18               ADDS     R2,R1,R0
   \   000007F2   2523               MOVS     R3,#+37
   \   000007F4   1C00               MOVS     R4,R3
   \   000007F6   145D               LDRB     R4,[R2, R4]
   \   000007F8   0125               MOVS     R5,#+1
   \   000007FA   8E78               LDRB     R6,[R1, #+2]
   \   000007FC   B540               LSLS     R5,R5,R6
   \   000007FE   2543               ORRS     R5,R5,R4
   \   00000800   D554               STRB     R5,[R2, R3]
    617                               TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
   \   00000802   9378               LDRB     R3,[R2, #+2]
   \   00000804   0124               MOVS     R4,#+1
   \   00000806   4978               LDRB     R1,[R1, #+1]
   \   00000808   8C40               LSLS     R4,R4,R1
   \   0000080A   1C43               ORRS     R4,R4,R3
   \   0000080C   9470               STRB     R4,[R2, #+2]
    618                                
    619                               
    620                               if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
   \   0000080E   6849               LDR      R1,??RF_ExecuteOrder_54+0x30  ;; IndWys + 8
   \   00000810   0978               LDRB     R1,[R1, #+0]
   \   00000812   8142               CMP      R1,R0
   \   00000814   0AD1               BNE      ??RF_ExecuteOrder_57
   \                     ??RF_ExecuteOrder_58:
   \   00000816   6748               LDR      R0,??RF_ExecuteOrder_54+0x34  ;; IndWys + 12
   \   00000818   0068               LDR      R0,[R0, #+0]
   \   0000081A   0028               CMP      R0,#+0
   \   0000081C   06D0               BEQ      ??RF_ExecuteOrder_57
    621                                {
    622                                    RF_NodeTest.Recived++; 
   \   0000081E   6649               LDR      R1,??RF_ExecuteOrder_54+0x38  ;; IndWys + 20
   \   00000820   654A               LDR      R2,??RF_ExecuteOrder_54+0x38  ;; IndWys + 20
   \   00000822   1268               LDR      R2,[R2, #+0]
   \   00000824   521C               ADDS     R2,R2,#+1
   \   00000826   0A60               STR      R2,[R1, #+0]
    623                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
   \   00000828   6449               LDR      R1,??RF_ExecuteOrder_54+0x3C  ;; IndWys + 16
   \   0000082A   0860               STR      R0,[R1, #+0]
    624                                }
    625                               
    626                               NextModule=1;
   \                     ??RF_ExecuteOrder_57:
   \   0000082C   6846               MOV      R0,SP
   \   0000082E   0121               MOVS     R1,#+1
   \   00000830   4170               STRB     R1,[R0, #+1]
   \   00000832   86E0               B        ??RF_ExecuteOrder_4
    627                               
    628                               
    629                              // //Reakcja na rz¹danie linku
    630                              // NeuronsList[RF_TaskTab[RF_CurrentTask].Node].Link
    631                               
    632                               
    633                           break;
    634                           
    635                      case W_RegRes :  //Zapis pojedyñczego rejestru  -odp
    636                               //wykonanie ------
    637                        
    638                             
    639                                 MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]=0;
   \                     ??RF_ExecuteOrder_59:
   \   00000834   584A               LDR      R2,??RF_ExecuteOrder_54+0x18  ;; RF_TaskTab
   \   00000836   0120               MOVS     R0,#+1
   \   00000838   5849               LDR      R1,??RF_ExecuteOrder_54+0x1C  ;; IndWys
   \   0000083A   0856               LDRSB    R0,[R1, R0]
   \   0000083C   C000               LSLS     R0,R0,#+3
   \   0000083E   1018               ADDS     R0,R2,R0
   \   00000840   0078               LDRB     R0,[R0, #+0]
   \   00000842   0200               MOVS     R2,R0
   \   00000844   5E49               LDR      R1,??RF_ExecuteOrder_54+0x40  ;; 0x6eb
   \   00000846   534B               LDR      R3,??RF_ExecuteOrder_54+0x14  ;; MainStage
   \   00000848   9B18               ADDS     R3,R3,R2
   \   0000084A   0024               MOVS     R4,#+0
   \   0000084C   5C54               STRB     R4,[R3, R1]
    640                                 RF_SpecialTask=-1;
   \   0000084E   5D49               LDR      R1,??RF_ExecuteOrder_54+0x44  ;; IndWys + 2
   \   00000850   0023               MOVS     R3,#+0
   \   00000852   DB43               MVNS     R3,R3            ;; #-1
   \   00000854   0B70               STRB     R3,[R1, #+0]
    641                             
    642                                if (RF_TaskTab[RF_CurrentTask].Node-1<=NumberNeurons)
   \   00000856   511E               SUBS     R1,R2,#+1
   \   00000858   2429               CMP      R1,#+36
   \   0000085A   17DA               BGE      ??RF_ExecuteOrder_60
    643                                {
    644                                    TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
   \   0000085C   5349               LDR      R1,??RF_ExecuteOrder_54+0x2C  ;; TransQuality
   \   0000085E   9300               LSLS     R3,R2,#+2
   \   00000860   CB18               ADDS     R3,R1,R3
   \   00000862   9C6C               LDR      R4,[R3, #+72]
   \   00000864   0125               MOVS     R5,#+1
   \   00000866   0E78               LDRB     R6,[R1, #+0]
   \   00000868   B540               LSLS     R5,R5,R6
   \   0000086A   2543               ORRS     R5,R5,R4
   \   0000086C   9D64               STR      R5,[R3, #+72]
    645                                    TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
   \   0000086E   8A18               ADDS     R2,R1,R2
   \   00000870   2523               MOVS     R3,#+37
   \   00000872   1C00               MOVS     R4,R3
   \   00000874   145D               LDRB     R4,[R2, R4]
   \   00000876   0125               MOVS     R5,#+1
   \   00000878   8E78               LDRB     R6,[R1, #+2]
   \   0000087A   B540               LSLS     R5,R5,R6
   \   0000087C   2543               ORRS     R5,R5,R4
   \   0000087E   D554               STRB     R5,[R2, R3]
    646                                    TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
   \   00000880   9378               LDRB     R3,[R2, #+2]
   \   00000882   0124               MOVS     R4,#+1
   \   00000884   4978               LDRB     R1,[R1, #+1]
   \   00000886   8C40               LSLS     R4,R4,R1
   \   00000888   1C43               ORRS     R4,R4,R3
   \   0000088A   9470               STRB     R4,[R2, #+2]
    647                                }
    648                                
    649                                if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
   \                     ??RF_ExecuteOrder_60:
   \   0000088C   4849               LDR      R1,??RF_ExecuteOrder_54+0x30  ;; IndWys + 8
   \   0000088E   0978               LDRB     R1,[R1, #+0]
   \   00000890   8142               CMP      R1,R0
   \   00000892   CBD1               BNE      ??RF_ExecuteOrder_57
   \   00000894   BFE7               B        ??RF_ExecuteOrder_58
    650                                {
    651                                    RF_NodeTest.Recived++;
    652                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
    653                                }
    654                                
    655                                    
    656                            //   g_RF_TimeOutCounter=0;
    657                               
    658                               NextModule=1;
    659                            #ifdef _LIVE_RJESTR            
    660                               LIVE_TAB[LIVE_TAB_IDX]=0xD000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | 0xFF;
    661                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    662                            #endif   
    663                             
    664                             
    665                             #ifdef  DIRECT_Q_MESURE
    666                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    667                               #endif
    668                             /*
    669                             if (RF_TaskTab[RF_CurrentTask].Node==6)
    670                             {
    671                                AT91C_BASE_PIOA->PIO_CODR =SpeakerPin; 
    672                                Delay(0xFFF);
    673                                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    674                             }
    675                             */
    676                         break;
    677                         
    678                         
    679                         
    680                         
    681                         case R_Iam :  //odpowied z ramki rozg³onej 
    682               
    683                              //Uwaga!!! ramka nie jest obs³ugiwana
    684                              
    685                              #ifdef  DIRECT_Q_MESURE
    686                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    687                               #endif
    688                   
    689                               TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
   \                     ??RF_ExecuteOrder_61:
   \   00000896   404A               LDR      R2,??RF_ExecuteOrder_54+0x18  ;; RF_TaskTab
   \   00000898   0120               MOVS     R0,#+1
   \   0000089A   4049               LDR      R1,??RF_ExecuteOrder_54+0x1C  ;; IndWys
   \   0000089C   0856               LDRSB    R0,[R1, R0]
   \   0000089E   C000               LSLS     R0,R0,#+3
   \   000008A0   1018               ADDS     R0,R2,R0
   \   000008A2   0078               LDRB     R0,[R0, #+0]
   \   000008A4   0200               MOVS     R2,R0
   \   000008A6   4149               LDR      R1,??RF_ExecuteOrder_54+0x2C  ;; TransQuality
   \   000008A8   9300               LSLS     R3,R2,#+2
   \   000008AA   CB18               ADDS     R3,R1,R3
   \   000008AC   9C6C               LDR      R4,[R3, #+72]
   \   000008AE   0125               MOVS     R5,#+1
   \   000008B0   0E78               LDRB     R6,[R1, #+0]
   \   000008B2   B540               LSLS     R5,R5,R6
   \   000008B4   2543               ORRS     R5,R5,R4
   \   000008B6   9D64               STR      R5,[R3, #+72]
    690                               TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
   \   000008B8   8A18               ADDS     R2,R1,R2
   \   000008BA   2523               MOVS     R3,#+37
   \   000008BC   1C00               MOVS     R4,R3
   \   000008BE   145D               LDRB     R4,[R2, R4]
   \   000008C0   0125               MOVS     R5,#+1
   \   000008C2   8E78               LDRB     R6,[R1, #+2]
   \   000008C4   B540               LSLS     R5,R5,R6
   \   000008C6   2543               ORRS     R5,R5,R4
   \   000008C8   D554               STRB     R5,[R2, R3]
    691                               TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
   \   000008CA   9378               LDRB     R3,[R2, #+2]
   \   000008CC   0124               MOVS     R4,#+1
   \   000008CE   4978               LDRB     R1,[R1, #+1]
   \   000008D0   8C40               LSLS     R4,R4,R1
   \   000008D2   1C43               ORRS     R4,R4,R3
   \   000008D4   9470               STRB     R4,[R2, #+2]
    692                                
    693                               
    694                               if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
   \   000008D6   3649               LDR      R1,??RF_ExecuteOrder_54+0x30  ;; IndWys + 8
   \   000008D8   0978               LDRB     R1,[R1, #+0]
   \   000008DA   8142               CMP      R1,R0
   \   000008DC   A6D1               BNE      ??RF_ExecuteOrder_57
   \   000008DE   9AE7               B        ??RF_ExecuteOrder_58
    695                                {
    696                                    RF_NodeTest.Recived++; 
    697                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
    698                                }
    699                               
    700                               NextModule=1;
    701                         break;  
    702                         
    703                         
    704                        case W_NewIdRes :  //odpowied/potwierdzenie nadania nowego ID
    705                               
    706                              TransQuality.Mensur[0]=0;
   \                     ??RF_ExecuteOrder_62:
   \   000008E0   3249               LDR      R1,??RF_ExecuteOrder_54+0x2C  ;; TransQuality
   \   000008E2   0020               MOVS     R0,#+0
   \   000008E4   C864               STR      R0,[R1, #+76]
    707                              TransQuality.QuickMensur[0]=0;
   \   000008E6   2620               MOVS     R0,#+38
   \   000008E8   0022               MOVS     R2,#+0
   \   000008EA   0A54               STRB     R2,[R1, R0]
    708                              TransQuality.SlowMensur[0]=0; 
   \   000008EC   1000               MOVS     R0,R2
   \   000008EE   C870               STRB     R0,[R1, #+3]
    709                               //wyczyæ zadania
    710                               for (char i=0; i<RF_Tasks-1; i++) 
   \   000008F0   0400               MOVS     R4,R0
   \                     ??RF_ExecuteOrder_63:
   \   000008F2   2000               MOVS     R0,R4
   \   000008F4   4528               CMP      R0,#+69
   \   000008F6   99D2               BCS      ??RF_ExecuteOrder_57
    711                               {
    712                                  if(RF_TaskTab[i].Command.Order==W_NewIdOrd)
   \   000008F8   C000               LSLS     R0,R0,#+3
   \   000008FA   2749               LDR      R1,??RF_ExecuteOrder_54+0x18  ;; RF_TaskTab
   \   000008FC   0818               ADDS     R0,R1,R0
   \   000008FE   4068               LDR      R0,[R0, #+4]
   \   00000900   F021               MOVS     R1,#+240
   \   00000902   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   00000904   0140               ANDS     R1,R1,R0
   \   00000906   0800               MOVS     R0,R1
   \   00000908   000D               LSRS     R0,R0,#+20
   \   0000090A   0528               CMP      R0,#+5
   \   0000090C   02D1               BNE      ??RF_ExecuteOrder_64
    713                                  {
    714                                   RemoveRfTask(i);  
   \   0000090E   2000               MOVS     R0,R4
   \   00000910   ........           BL       RemoveRfTask
    715                                  }
    716                               }
   \                     ??RF_ExecuteOrder_64:
   \   00000914   641C               ADDS     R4,R4,#+1
   \   00000916   2406               LSLS     R4,R4,#+24
   \   00000918   240E               LSRS     R4,R4,#+24
   \   0000091A   EAE7               B        ??RF_ExecuteOrder_63
    717                         
    718                               
    719                               NextModule=1;
    720                         break;  
    721          
    722                         
    723              
    724                         case RW_BC_Res :  //Odpowied na ramkê rozg³on¹ "Kto ma wêze³"
    725                        
    726                                NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].IndirectCon=1;
   \                     ??RF_ExecuteOrder_65:
   \   0000091C   1E4A               LDR      R2,??RF_ExecuteOrder_54+0x18  ;; RF_TaskTab
   \   0000091E   0120               MOVS     R0,#+1
   \   00000920   1E49               LDR      R1,??RF_ExecuteOrder_54+0x1C  ;; IndWys
   \   00000922   0856               LDRSB    R0,[R1, R0]
   \   00000924   C000               LSLS     R0,R0,#+3
   \   00000926   1018               ADDS     R0,R2,R0
   \   00000928   0078               LDRB     R0,[R0, #+0]
   \   0000092A   0200               MOVS     R2,R0
   \   0000092C   264F               LDR      R7,??RF_ExecuteOrder_54+0x48  ;; NeuronsList
   \   0000092E   0C21               MOVS     R1,#+12
   \   00000930   4A43               MULS     R2,R1,R2
   \   00000932   B918               ADDS     R1,R7,R2
   \   00000934   091F               SUBS     R1,R1,#+4
   \   00000936   0A78               LDRB     R2,[R1, #+0]
   \   00000938   0823               MOVS     R3,#+8
   \   0000093A   1343               ORRS     R3,R3,R2
   \   0000093C   0B70               STRB     R3,[R1, #+0]
    727                                AddRfTask_RemoveSearchNodeTask(RF_TaskTab[RF_CurrentTask].Node);  
   \   0000093E   ........           BL       AddRfTask_RemoveSearchNodeTask
    728                               
    729                                
    730                         break;
    731                         
    732                         
    733                         
    734                         
    735                         
    736                         
    737                
    738              }
    739              
    740                       
    741                      //Wylij odpowied
    742                      if (ByteToSend)
   \                     ??RF_ExecuteOrder_4:
   \   00000942   6846               MOV      R0,SP
   \   00000944   0078               LDRB     R0,[R0, #+0]
   \   00000946   0028               CMP      R0,#+0
   \   00000948   0CD0               BEQ      ??RF_ExecuteOrder_66
    743                      {
    744                          RF_Status.EnableTX();
   \   0000094A   2048               LDR      R0,??RF_ExecuteOrder_54+0x4C  ;; RF_Status + 36
   \   0000094C   0068               LDR      R0,[R0, #+0]
   \   0000094E   ........           BL       __iar_via_R0
    745                           RF_SendData(CommandToSend.Streem, ByteToSend);
                                              ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

     char* pNODE_ID=(char*)&NODE_ID;
           ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\RF_Exe.c",271  Warning[Pe177]: 
          variable "pNODE_ID" was declared but never referenced
   \   00000952   6846               MOV      R0,SP
   \   00000954   0178               LDRB     R1,[R0, #+0]
   \   00000956   02A8               ADD      R0,SP,#+8
   \   00000958   ........           BL       RF_SendData
    746                          RF_Status.EnableRX();
   \   0000095C   1C48               LDR      R0,??RF_ExecuteOrder_54+0x50  ;; RF_Status + 40
   \   0000095E   0068               LDR      R0,[R0, #+0]
   \   00000960   ........           BL       __iar_via_R0
    747                         
    748                      }           
    749             
    750                      //odpytaj kolejny modu³
    751                      if (NextModule)
   \                     ??RF_ExecuteOrder_66:
   \   00000964   6846               MOV      R0,SP
   \   00000966   4078               LDRB     R0,[R0, #+1]
   \   00000968   0028               CMP      R0,#+0
   \   0000096A   04D0               BEQ      ??RF_ExecuteOrder_67
    752                      {
    753                         g_RF_TimeOutCounter=RF_TimeOut; 
   \   0000096C   1948               LDR      R0,??RF_ExecuteOrder_54+0x54  ;; IndWys + 3
   \   0000096E   0921               MOVS     R1,#+9
   \   00000970   0170               STRB     R1,[R0, #+0]
    754                         RF_MasterExecut();
   \   00000972   ........           BL       RF_MasterExecut
    755                        /*
    756                        if (RF_Status.MasterMode)
    757                          {
    758                            //if ((!SlaveMode) && (g_Stop_Program==0))
    759                            if (g_RF_TimeOutCounter>0)
    760                            {
    761                            }else{
    762                               CyklPerSekCount++;
    763                               g_RF_TimeOutCounter=RF_TimeOut; 
    764                               RF_MasterExecut();
    765                        
    766                            }
    767                          }
    768                        */
    769                      }
    770            
    771            
    772          }
   \                     ??RF_ExecuteOrder_67:
   \   00000976   0DB0               ADD      SP,SP,#+52
   \   00000978   F0BC               POP      {R4-R7}
   \   0000097A   01BC               POP      {R0}
   \   0000097C   0047               BX       R0               ;; return
   \   0000097E   C046               Nop      
   \                     ??RF_ExecuteOrder_54:
   \   00000980   ........           DC32     RF_Status + 24
   \   00000984   F0FFFF00           DC32     0xfffff0
   \   00000988   ........           DC32     RF_Status + 28
   \   0000098C   C0C62D00           DC32     0x2dc6c0
   \   00000990   5CD91300           DC32     0x13d95c
   \   00000994   ........           DC32     MainStage
   \   00000998   ........           DC32     RF_TaskTab
   \   0000099C   ........           DC32     IndWys
   \   000009A0   ........           DC32     Busy_program
   \   000009A4   ........           DC32     g_NextTimeProgram
   \   000009A8   ........           DC32     g_counter
   \   000009AC   ........           DC32     TransQuality
   \   000009B0   ........           DC32     IndWys + 8
   \   000009B4   ........           DC32     IndWys + 12
   \   000009B8   ........           DC32     IndWys + 20
   \   000009BC   ........           DC32     IndWys + 16
   \   000009C0   EB060000           DC32     0x6eb
   \   000009C4   ........           DC32     IndWys + 2
   \   000009C8   ........           DC32     NeuronsList
   \   000009CC   ........           DC32     RF_Status + 36
   \   000009D0   ........           DC32     RF_Status + 40
   \   000009D4   ........           DC32     IndWys + 3
    773          //_____________________________________________________________________________
    774          
    775          
    776          
    777          
    778          
    779          
    780          
    781          
    782          
    783          //-----------------------------------------------------------------------------
    784          //!  Nazwa funkcji :    RF_SendData
    785          //!  Funkcja wysy³a dane przez RF12
    786          //-----------------------------------------------------------------------------
    787          //  *data - wska¿nik na pierwszy bajt
    788          //  *size - iloæ bajtów do wys³ania
    789          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    790          void RF_SendData(unsigned char *data, char size)
    791          {
   \                     RF_SendData:
   \   00000000   01B5               PUSH     {R0,LR}
    792              RF_SendFarm(data, size);
   \   00000002   ........           BL       RF_SendFarm
    793          }
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    794          //------------------------------------------------------------------------------
    795          
    796          extern  AT91_SPI_Buff               SPI_Buff;
    797          
    798          
    799          

   \                                 In section Debug.txt, align 4, keep-with-next
    800          char IncCurentRfTask(void)
    801          {
   \                     IncCurentRfTask:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    802              static char Switch=0;
    803              static char WaitToSwithToSlave=0;
    804          
    805              char RF_CurrentTaskTMP=RF_CurrentTask;
   \   00000002   2A48               LDR      R0,??IncCurentRfTask_0  ;; IndWys
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   4156               LDRSB    R1,[R0, R1]
   \   00000008   0906               LSLS     R1,R1,#+24
   \   0000000A   090E               LSRS     R1,R1,#+24
    806            
    807              char Fuss=RF_Tasks+10; 
   \   0000000C   5022               MOVS     R2,#+80
    808              do{ 
    809                      if (Fuss==0) break;
   \                     ??IncCurentRfTask_1:
   \   0000000E   1300               MOVS     R3,R2
   \   00000010   40D0               BEQ      ??IncCurentRfTask_2
    810                      RF_CurrentTaskTMP++;  
   \   00000012   491C               ADDS     R1,R1,#+1
   \   00000014   0906               LSLS     R1,R1,#+24
   \   00000016   090E               LSRS     R1,R1,#+24
    811                      if ((RF_TaskTab[RF_CurrentTaskTMP].Node==0) || (RF_CurrentTaskTMP>=RF_Tasks))  
   \   00000018   254B               LDR      R3,??IncCurentRfTask_0+0x4  ;; RF_TaskTab
   \   0000001A   0C00               MOVS     R4,R1
   \   0000001C   E400               LSLS     R4,R4,#+3
   \   0000001E   1C5D               LDRB     R4,[R3, R4]
   \   00000020   002C               CMP      R4,#+0
   \   00000022   02D0               BEQ      ??IncCurentRfTask_3
   \   00000024   0C00               MOVS     R4,R1
   \   00000026   462C               CMP      R4,#+70
   \   00000028   1BD3               BCC      ??IncCurentRfTask_4
    812                      {
    813                        RF_CurrentTaskTMP=0; 
   \                     ??IncCurentRfTask_3:
   \   0000002A   0024               MOVS     R4,#+0
   \   0000002C   2100               MOVS     R1,R4
    814                        
    815                        if ((AT91C_IFLASH_MEM->Config.SlaveMode) && (Switch) && (RF_Status.TimeInMasterMode>200))  //zagwarantowane minimum 110ms w trybie master
   \   0000002E   214D               LDR      R5,??IncCurentRfTask_0+0x8  ;; 0x13d7e8
   \   00000030   2D78               LDRB     R5,[R5, #+0]
   \   00000032   002D               CMP      R5,#+0
   \   00000034   13D0               BEQ      ??IncCurentRfTask_5
   \   00000036   4579               LDRB     R5,[R0, #+5]
   \   00000038   002D               CMP      R5,#+0
   \   0000003A   10D0               BEQ      ??IncCurentRfTask_5
   \   0000003C   1E4D               LDR      R5,??IncCurentRfTask_0+0xC  ;; RF_Status + 20
   \   0000003E   2D88               LDRH     R5,[R5, #+0]
   \   00000040   C92D               CMP      R5,#+201
   \   00000042   0CD3               BCC      ??IncCurentRfTask_5
    816                        {
    817                          if (WaitToSwithToSlave<2)
   \   00000044   8179               LDRB     R1,[R0, #+6]
   \   00000046   0229               CMP      R1,#+2
   \   00000048   02D2               BCS      ??IncCurentRfTask_6
    818                          {
    819                            WaitToSwithToSlave++; 
   \   0000004A   491C               ADDS     R1,R1,#+1
   \   0000004C   8171               STRB     R1,[R0, #+6]
   \   0000004E   04E0               B        ??IncCurentRfTask_7
    820                          }
    821                          else
    822                          {
    823                            WaitToSwithToSlave=0;
   \                     ??IncCurentRfTask_6:
   \   00000050   2100               MOVS     R1,R4
   \   00000052   8171               STRB     R1,[R0, #+6]
    824                            Switch=0;
   \   00000054   4471               STRB     R4,[R0, #+5]
    825                            SwitchToSlave();
   \   00000056   ........           BL       SwitchToSlave
    826                          }
    827                          return 0;
   \                     ??IncCurentRfTask_7:
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   22E0               B        ??IncCurentRfTask_8
    828                        }else{
    829                          Switch=1;
   \                     ??IncCurentRfTask_5:
   \   0000005E   0124               MOVS     R4,#+1
   \   00000060   4471               STRB     R4,[R0, #+5]
    830                          
    831                        }
    832                        
    833                      }
    834                      Fuss--;
   \                     ??IncCurentRfTask_4:
   \   00000062   521E               SUBS     R2,R2,#+1
   \   00000064   1206               LSLS     R2,R2,#+24
   \   00000066   120E               LSRS     R2,R2,#+24
    835                 }while ((NeuronsList[RF_TaskTab[RF_CurrentTaskTMP].Node-1].ReadSuspend) && ((RF_TaskTab[RF_CurrentTaskTMP].Command.Order!=R_BC_Order) && (RF_TaskTab[RF_CurrentTaskTMP].Command.Order!=W_BC_Order)));
   \   00000068   0C00               MOVS     R4,R1
   \   0000006A   E400               LSLS     R4,R4,#+3
   \   0000006C   1B19               ADDS     R3,R3,R4
   \   0000006E   1C78               LDRB     R4,[R3, #+0]
   \   00000070   0C25               MOVS     R5,#+12
   \   00000072   6C43               MULS     R4,R5,R4
   \   00000074   114D               LDR      R5,??IncCurentRfTask_0+0x10  ;; NeuronsList
   \   00000076   2C19               ADDS     R4,R5,R4
   \   00000078   241F               SUBS     R4,R4,#+4
   \   0000007A   2478               LDRB     R4,[R4, #+0]
   \   0000007C   6407               LSLS     R4,R4,#+29
   \   0000007E   09D5               BPL      ??IncCurentRfTask_2
   \   00000080   5B68               LDR      R3,[R3, #+4]
   \   00000082   F024               MOVS     R4,#+240
   \   00000084   2404               LSLS     R4,R4,#+16       ;; #+15728640
   \   00000086   1C40               ANDS     R4,R4,R3
   \   00000088   2300               MOVS     R3,R4
   \   0000008A   1B0D               LSRS     R3,R3,#+20
   \   0000008C   072B               CMP      R3,#+7
   \   0000008E   01D0               BEQ      ??IncCurentRfTask_2
   \   00000090   082B               CMP      R3,#+8
   \   00000092   BCD1               BNE      ??IncCurentRfTask_1
    836                  
    837              if (RF_CurrentTaskTMP==0) CyklPerSekCount++;
   \                     ??IncCurentRfTask_2:
   \   00000094   0A00               MOVS     R2,R1
   \   00000096   03D1               BNE      ??IncCurentRfTask_9
   \   00000098   094A               LDR      R2,??IncCurentRfTask_0+0x14  ;; CyklPerSekCount
   \   0000009A   1368               LDR      R3,[R2, #+0]
   \   0000009C   5B1C               ADDS     R3,R3,#+1
   \   0000009E   1360               STR      R3,[R2, #+0]
    838              RF_CurrentTask=RF_CurrentTaskTMP;
   \                     ??IncCurentRfTask_9:
   \   000000A0   4170               STRB     R1,[R0, #+1]
    839              return 1;
   \   000000A2   0120               MOVS     R0,#+1
   \                     ??IncCurentRfTask_8:
   \   000000A4   38BC               POP      {R3-R5}
   \   000000A6   02BC               POP      {R1}
   \   000000A8   0847               BX       R1               ;; return
   \   000000AA   C046               Nop      
   \                     ??IncCurentRfTask_0:
   \   000000AC   ........           DC32     IndWys
   \   000000B0   ........           DC32     RF_TaskTab
   \   000000B4   E8D71300           DC32     0x13d7e8
   \   000000B8   ........           DC32     RF_Status + 20
   \   000000BC   ........           DC32     NeuronsList
   \   000000C0   ........           DC32     CyklPerSekCount
    840                
    841          
    842          }
    843          
    844          #define SpeedExePeriods 0
    845          
    846          
    847          //-----------------------------------------------------------------------------
    848          //!  Nazwa funkcji :    RF_MasterExecut
    849          //!  Funkcja wysy³a dane wed³ug tablicy rozkazów RF_TaskTab
    850          //-----------------------------------------------------------------------------
    851          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    852          void RF_MasterExecut(void)
    853          {
   \                     RF_MasterExecut:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   6846               MOV      R0,SP
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0172               STRB     R1,[R0, #+8]
    854          
    855            
    856            char ByteToSend=0;
    857            //char TaskNr;
    858            
    859            unsigned int SendOrder=0;    //flaga wys³ania
   \   00000008   0E00               MOVS     R6,R1
    860           
    861            if (SlaveMode) return;
   \   0000000A   AF48               LDR      R0,??RF_MasterExecut_0  ;; SlaveMode
   \   0000000C   0078               LDRB     R0,[R0, #+0]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   00D0               BEQ      .+4
   \   00000012   0FE2               B        ??RF_MasterExecut_1
    862          
    863          
    864            
    865            //wyszukanie rozkazów priorytetowych
    866            char Nd=0;
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   C043               MVNS     R0,R0            ;; #-1
   \   00000018   27E0               B        ??RF_MasterExecut_2
    867            unsigned char Tn=0;
    868            static signed char  RF_RememberTask=-1;
    869            
    870            
    871            signed char TMP_RF_SpecialTask=-1;
    872            
    873            while ((Nd<NumberNeurons) && (TMP_RF_SpecialTask==-1))
    874            {
    875                if ((MainStage.SendStageChange[Nd]>=ChangeStageFlag-SpeedExePeriods))    
    876                {
    877                  
    878                  Tn=0;
    879                  while (((RF_TaskTab[Tn].Node!=0) && (Tn<RF_Tasks-1) && (TMP_RF_SpecialTask==-1)))
    880                  {
    881                     if ((RF_TaskTab[Tn].Command.Order==W_RegOrd) &&  (RF_TaskTab[Tn].Command.Auxi==0) && (RF_TaskTab[Tn].Node==Nd)) 
   \                     ??RF_MasterExecut_3:
   \   0000001A   5568               LDR      R5,[R2, #+4]
   \   0000001C   F027               MOVS     R7,#+240
   \   0000001E   3F04               LSLS     R7,R7,#+16       ;; #+15728640
   \   00000020   2F40               ANDS     R7,R7,R5
   \   00000022   3F0D               LSRS     R7,R7,#+20
   \   00000024   022F               CMP      R7,#+2
   \   00000026   0CD1               BNE      ??RF_MasterExecut_4
   \   00000028   2D0E               LSRS     R5,R5,#+24
   \   0000002A   0AD1               BNE      ??RF_MasterExecut_4
   \   0000002C   1278               LDRB     R2,[R2, #+0]
   \   0000002E   0D00               MOVS     R5,R1
   \   00000030   AA42               CMP      R2,R5
   \   00000032   06D1               BNE      ??RF_MasterExecut_4
    882                     {
    883                         TMP_RF_SpecialTask=Tn;
   \   00000034   1800               MOVS     R0,R3
   \   00000036   0006               LSLS     R0,R0,#+24
   \   00000038   0016               ASRS     R0,R0,#+24
    884                         SendOrder=1;
   \   0000003A   0126               MOVS     R6,#+1
    885                         MainStage.SendStageChange[Nd]--;
   \   0000003C   2278               LDRB     R2,[R4, #+0]
   \   0000003E   521E               SUBS     R2,R2,#+1
   \   00000040   2270               STRB     R2,[R4, #+0]
    886                     }
    887                     Tn++;
   \                     ??RF_MasterExecut_4:
   \   00000042   5B1C               ADDS     R3,R3,#+1
   \   00000044   1B06               LSLS     R3,R3,#+24
   \   00000046   1B0E               LSRS     R3,R3,#+24
   \                     ??RF_MasterExecut_5:
   \   00000048   1A00               MOVS     R2,R3
   \   0000004A   D200               LSLS     R2,R2,#+3
   \   0000004C   9F4D               LDR      R5,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   0000004E   AA18               ADDS     R2,R5,R2
   \   00000050   1578               LDRB     R5,[R2, #+0]
   \   00000052   002D               CMP      R5,#+0
   \   00000054   06D0               BEQ      ??RF_MasterExecut_6
   \   00000056   1D00               MOVS     R5,R3
   \   00000058   452D               CMP      R5,#+69
   \   0000005A   03D2               BCS      ??RF_MasterExecut_6
   \   0000005C   0025               MOVS     R5,#+0
   \   0000005E   ED43               MVNS     R5,R5            ;; #-1
   \   00000060   A842               CMP      R0,R5
   \   00000062   DAD0               BEQ      ??RF_MasterExecut_3
    888                  }
    889                  
    890                }
    891                
    892                
    893                Nd++;  
   \                     ??RF_MasterExecut_6:
   \   00000064   491C               ADDS     R1,R1,#+1
   \   00000066   0906               LSLS     R1,R1,#+24
   \   00000068   090E               LSRS     R1,R1,#+24
   \                     ??RF_MasterExecut_2:
   \   0000006A   0A00               MOVS     R2,R1
   \   0000006C   232A               CMP      R2,#+35
   \   0000006E   0FD2               BCS      ??RF_MasterExecut_7
   \   00000070   0022               MOVS     R2,#+0
   \   00000072   D243               MVNS     R2,R2            ;; #-1
   \   00000074   9042               CMP      R0,R2
   \   00000076   0BD1               BNE      ??RF_MasterExecut_7
   \   00000078   954A               LDR      R2,??RF_MasterExecut_0+0x8  ;; MainStage
   \   0000007A   964B               LDR      R3,??RF_MasterExecut_0+0xC  ;; 0x6eb
   \   0000007C   0C00               MOVS     R4,R1
   \   0000007E   1219               ADDS     R2,R2,R4
   \   00000080   D418               ADDS     R4,R2,R3
   \   00000082   2278               LDRB     R2,[R4, #+0]
   \   00000084   944B               LDR      R3,??RF_MasterExecut_0+0x10  ;; ChangeStageFlag
   \   00000086   1B78               LDRB     R3,[R3, #+0]
   \   00000088   9A42               CMP      R2,R3
   \   0000008A   EBD3               BCC      ??RF_MasterExecut_6
   \   0000008C   0023               MOVS     R3,#+0
   \   0000008E   DBE7               B        ??RF_MasterExecut_5
    894            }  
    895            
    896            RF_SpecialTask=TMP_RF_SpecialTask;
   \                     ??RF_MasterExecut_7:
   \   00000090   924C               LDR      R4,??RF_MasterExecut_0+0x14  ;; IndWys
   \   00000092   A070               STRB     R0,[R4, #+2]
    897            
    898            if (RF_SpecialTask>=0)
   \   00000094   0220               MOVS     R0,#+2
   \   00000096   2056               LDRSB    R0,[R4, R0]
   \   00000098   0028               CMP      R0,#+0
   \   0000009A   00D5               BPL      .+4
   \   0000009C   AEE0               B        ??RF_MasterExecut_8
    899            {
    900              RF_RememberTask=RF_CurrentTask;
   \   0000009E   6178               LDRB     R1,[R4, #+1]
   \   000000A0   E171               STRB     R1,[R4, #+7]
    901              RF_CurrentTask=RF_SpecialTask;
   \   000000A2   6070               STRB     R0,[R4, #+1]
    902          
    903          
    904                                    
    905                        
    906            }else{
    907              if (RF_RememberTask>=0) 
    908              {
    909               RF_CurrentTask=RF_RememberTask;
    910               RF_RememberTask=-1;  
    911              }
    912              
    913              if (IncCurentRfTask()==0) return;
    914          
    915             
    916          
    917            
    918              
    919              //wykluczenie rozkazów ustawiania stanów oraz odczytu rejestrów je¿eli brak transmisji
    920              while (((RF_TaskTab[RF_CurrentTask].Node!=0) && (RF_CurrentTask<RF_Tasks-1)) && (SendOrder==0))
    921              {
    922                 if (((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]==0) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType!=NodeRF_Period) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType!=NodeRF_Remote) ))  ||
    923                    ((RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi>0) && (TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1]==0)))
    924                 {
    925                       if (IncCurentRfTask()==0) return;   
    926                   
    927                 }else{ 
    928                    if ((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && ((MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]>0)|| (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType==NodeRF_Remote)))  MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]--;
    929                    SendOrder=1;   
    930                 }
    931              }
    932            }
    933            
    934            
    935            if (RF_Status.MasterMode==0) return;
   \                     ??RF_MasterExecut_9:
   \   000000A4   8E48               LDR      R0,??RF_MasterExecut_0+0x18  ;; RF_Status + 13
   \   000000A6   0078               LDRB     R0,[R0, #+0]
   \   000000A8   0028               CMP      R0,#+0
   \   000000AA   00D1               BNE      .+4
   \   000000AC   C2E1               B        ??RF_MasterExecut_1
    936          
    937               
    938            
    939            if (SendOrder)
   \   000000AE   002E               CMP      R6,#+0
   \   000000B0   00D1               BNE      .+4
   \   000000B2   B5E1               B        ??RF_MasterExecut_10
   \   000000B4   0098               LDR      R0,[SP, #+0]
   \   000000B6   000D               LSRS     R0,R0,#+20
   \   000000B8   0005               LSLS     R0,R0,#+20
   \   000000BA   0121               MOVS     R1,#+1
   \   000000BC   6156               LDRSB    R1,[R4, R1]
   \   000000BE   C900               LSLS     R1,R1,#+3
   \   000000C0   824A               LDR      R2,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   000000C2   5118               ADDS     R1,R2,R1
   \   000000C4   4968               LDR      R1,[R1, #+4]
   \   000000C6   0903               LSLS     R1,R1,#+12
   \   000000C8   090B               LSRS     R1,R1,#+12
   \   000000CA   0143               ORRS     R1,R1,R0
   \   000000CC   0091               STR      R1,[SP, #+0]
    940            {
    941              
    942              
    943                _RF_Command  RF_Command;
    944                RF_Command.ID     = RF_TaskTab[RF_CurrentTask].Command.ID;
    945                RF_Command.Order  = RF_TaskTab[RF_CurrentTask].Command.Order;
   \   000000CE   6E46               MOV      R6,SP
   \   000000D0   3000               MOVS     R0,R6
   \   000000D2   801C               ADDS     R0,R0,#+2
   \   000000D4   ........           BL       __aeabi_uread4
   \   000000D8   3100               MOVS     R1,R6
   \   000000DA   891C               ADDS     R1,R1,#+2
   \   000000DC   F022               MOVS     R2,#+240
   \   000000DE   9043               BICS     R0,R0,R2
   \   000000E0   0122               MOVS     R2,#+1
   \   000000E2   A256               LDRSB    R2,[R4, R2]
   \   000000E4   D200               LSLS     R2,R2,#+3
   \   000000E6   794B               LDR      R3,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   000000E8   9A18               ADDS     R2,R3,R2
   \   000000EA   5268               LDR      R2,[R2, #+4]
   \   000000EC   120D               LSRS     R2,R2,#+20
   \   000000EE   1301               LSLS     R3,R2,#+4
   \   000000F0   F022               MOVS     R2,#+240
   \   000000F2   1A40               ANDS     R2,R2,R3
   \   000000F4   0243               ORRS     R2,R2,R0
   \   000000F6   1000               MOVS     R0,R2
   \   000000F8   ........           BL       __aeabi_uwrite4
    946                RF_Command.Auxi   = RF_TaskTab[RF_CurrentTask].Command.Auxi;
   \   000000FC   3000               MOVS     R0,R6
   \   000000FE   C01C               ADDS     R0,R0,#+3
   \   00000100   ........           BL       __aeabi_uread4
   \   00000104   3100               MOVS     R1,R6
   \   00000106   C91C               ADDS     R1,R1,#+3
   \   00000108   FF22               MOVS     R2,#+255
   \   0000010A   9043               BICS     R0,R0,R2
   \   0000010C   0122               MOVS     R2,#+1
   \   0000010E   A256               LDRSB    R2,[R4, R2]
   \   00000110   D200               LSLS     R2,R2,#+3
   \   00000112   6E4B               LDR      R3,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   00000114   9A18               ADDS     R2,R3,R2
   \   00000116   5268               LDR      R2,[R2, #+4]
   \   00000118   120E               LSRS     R2,R2,#+24
   \   0000011A   0243               ORRS     R2,R2,R0
   \   0000011C   1000               MOVS     R0,R2
   \   0000011E   ........           BL       __aeabi_uwrite4
    947                
    948          
    949                if (RF_TaskTab[RF_CurrentTask].Command.Order==W_NewIdOrd)                 //rozkaz specjalny zmiany ID
   \   00000122   0120               MOVS     R0,#+1
   \   00000124   2056               LDRSB    R0,[R4, R0]
   \   00000126   C000               LSLS     R0,R0,#+3
   \   00000128   6849               LDR      R1,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   0000012A   0918               ADDS     R1,R1,R0
   \   0000012C   F020               MOVS     R0,#+240
   \   0000012E   0004               LSLS     R0,R0,#+16       ;; #+15728640
   \   00000130   4A68               LDR      R2,[R1, #+4]
   \   00000132   1040               ANDS     R0,R0,R2
   \   00000134   000D               LSRS     R0,R0,#+20
   \   00000136   0528               CMP      R0,#+5
   \   00000138   00D0               BEQ      .+4
   \   0000013A   D3E0               B        ??RF_MasterExecut_11
    950                {
    951                   ByteToSend=8;
   \   0000013C   6846               MOV      R0,SP
   \   0000013E   0821               MOVS     R1,#+8
   \   00000140   0172               STRB     R1,[R0, #+8]
    952                   RF_Command.CHID_CUR_ID=NeuronsList[0].NeuronID;
   \   00000142   ........           BL       __aeabi_uread8
   \   00000146   BD4D               LDR      R5,??RF_MasterExecut_12  ;; NeuronsList
   \   00000148   6A46               MOV      R2,SP
   \   0000014A   9446               MOV      R12,R2
   \   0000014C   0200               MOVS     R2,R0
   \   0000014E   0B00               MOVS     R3,R1
   \   00000150   BB48               LDR      R0,??RF_MasterExecut_12+0x4  ;; 0xfff00000
   \   00000152   0021               MOVS     R1,#+0
   \   00000154   C943               MVNS     R1,R1            ;; #-1
   \   00000156   1040               ANDS     R0,R0,R2
   \   00000158   1940               ANDS     R1,R1,R3
   \   0000015A   03B4               PUSH     {R0,R1}
   \   0000015C   6A68               LDR      R2,[R5, #+4]
   \   0000015E   B948               LDR      R0,??RF_MasterExecut_12+0x8  ;; 0xfffff
   \   00000160   0021               MOVS     R1,#+0
   \   00000162   1040               ANDS     R0,R0,R2
   \   00000164   0CBC               POP      {R2,R3}
   \   00000166   1043               ORRS     R0,R0,R2
   \   00000168   1943               ORRS     R1,R1,R3
   \   0000016A   6246               MOV      R2,R12
   \   0000016C   ........           BL       __aeabi_uwrite8
    953                   RF_Command.CHID_KODE=0xC;
   \   00000170   3000               MOVS     R0,R6
   \   00000172   C01C               ADDS     R0,R0,#+3
   \   00000174   ........           BL       __aeabi_uread8
   \   00000178   3200               MOVS     R2,R6
   \   0000017A   D21C               ADDS     R2,R2,#+3
   \   0000017C   9446               MOV      R12,R2
   \   0000017E   0F22               MOVS     R2,#+15
   \   00000180   D243               MVNS     R2,R2            ;; #-16
   \   00000182   0023               MOVS     R3,#+0
   \   00000184   DB43               MVNS     R3,R3            ;; #-1
   \   00000186   0240               ANDS     R2,R2,R0
   \   00000188   0B40               ANDS     R3,R3,R1
   \   0000018A   0C20               MOVS     R0,#+12
   \   0000018C   0021               MOVS     R1,#+0
   \   0000018E   1043               ORRS     R0,R0,R2
   \   00000190   1943               ORRS     R1,R1,R3
   \   00000192   6246               MOV      R2,R12
   \   00000194   ........           BL       __aeabi_uwrite8
    954                   RF_Command.CHID_NEW_ID=NeuronsList[1].NeuronID;
   \   00000198   3000               MOVS     R0,R6
   \   0000019A   C01C               ADDS     R0,R0,#+3
   \   0000019C   ........           BL       __aeabi_uread8
   \   000001A0   3200               MOVS     R2,R6
   \   000001A2   D21C               ADDS     R2,R2,#+3
   \   000001A4   9446               MOV      R12,R2
   \   000001A6   0200               MOVS     R2,R0
   \   000001A8   0B00               MOVS     R3,R1
   \   000001AA   A748               LDR      R0,??RF_MasterExecut_12+0xC  ;; 0xff00000f
   \   000001AC   0021               MOVS     R1,#+0
   \   000001AE   C943               MVNS     R1,R1            ;; #-1
   \   000001B0   1040               ANDS     R0,R0,R2
   \   000001B2   1940               ANDS     R1,R1,R3
   \   000001B4   03B4               PUSH     {R0,R1}
   \   000001B6   2A69               LDR      R2,[R5, #+16]
   \   000001B8   1201               LSLS     R2,R2,#+4
   \   000001BA   A448               LDR      R0,??RF_MasterExecut_12+0x10  ;; 0xfffff0
   \   000001BC   0021               MOVS     R1,#+0
   \   000001BE   1040               ANDS     R0,R0,R2
   \   000001C0   0CBC               POP      {R2,R3}
   \   000001C2   1043               ORRS     R0,R0,R2
   \   000001C4   1943               ORRS     R1,R1,R3
   \   000001C6   6246               MOV      R2,R12
   \   000001C8   ........           BL       __aeabi_uwrite8
    955                   RF_Command.CHID_CRC=crc16(RF_Command.Streem,6);
                                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000001CC   0621               MOVS     R1,#+6
   \   000001CE   6846               MOV      R0,SP
   \   000001D0   ........           BL       crc16
   \   000001D4   0500               MOVS     R5,R0
   \   000001D6   3000               MOVS     R0,R6
   \   000001D8   801D               ADDS     R0,R0,#+6
   \   000001DA   ........           BL       __aeabi_uread8
   \   000001DE   B61D               ADDS     R6,R6,#+6
   \   000001E0   0200               MOVS     R2,R0
   \   000001E2   0B00               MOVS     R3,R1
   \   000001E4   9A48               LDR      R0,??RF_MasterExecut_12+0x14  ;; 0xffff0000
   \   000001E6   0021               MOVS     R1,#+0
   \   000001E8   C943               MVNS     R1,R1            ;; #-1
   \   000001EA   1040               ANDS     R0,R0,R2
   \   000001EC   1940               ANDS     R1,R1,R3
   \   000001EE   2A00               MOVS     R2,R5
   \   000001F0   0243               ORRS     R2,R2,R0
   \   000001F2   1000               MOVS     R0,R2
   \   000001F4   3200               MOVS     R2,R6
   \   000001F6   ........           BL       __aeabi_uwrite8
   \   000001FA   02E1               B        ??RF_MasterExecut_13
    956                }
   \                     ??RF_MasterExecut_8:
   \   000001FC   0720               MOVS     R0,#+7
   \   000001FE   2056               LDRSB    R0,[R4, R0]
   \   00000200   0028               CMP      R0,#+0
   \   00000202   03D4               BMI      ??RF_MasterExecut_14
   \   00000204   6070               STRB     R0,[R4, #+1]
   \   00000206   0020               MOVS     R0,#+0
   \   00000208   C043               MVNS     R0,R0            ;; #-1
   \   0000020A   E071               STRB     R0,[R4, #+7]
   \                     ??RF_MasterExecut_14:
   \   0000020C   ........           BL       IncCurentRfTask
   \   00000210   0028               CMP      R0,#+0
   \   00000212   1BD1               BNE      ??RF_MasterExecut_15
   \   00000214   0EE1               B        ??RF_MasterExecut_1
   \                     ??RF_MasterExecut_16:
   \   00000216   4A68               LDR      R2,[R1, #+4]
   \   00000218   1040               ANDS     R0,R0,R2
   \   0000021A   000D               LSRS     R0,R0,#+20
   \   0000021C   0228               CMP      R0,#+2
   \   0000021E   14D1               BNE      ??RF_MasterExecut_17
   \   00000220   1000               MOVS     R0,R2
   \   00000222   000E               LSRS     R0,R0,#+24
   \   00000224   11D1               BNE      ??RF_MasterExecut_17
   \   00000226   0878               LDRB     R0,[R1, #+0]
   \   00000228   294A               LDR      R2,??RF_MasterExecut_0+0x8  ;; MainStage
   \   0000022A   2A49               LDR      R1,??RF_MasterExecut_0+0xC  ;; 0x6eb
   \   0000022C   1218               ADDS     R2,R2,R0
   \   0000022E   5118               ADDS     R1,R2,R1
   \   00000230   0A78               LDRB     R2,[R1, #+0]
   \   00000232   002A               CMP      R2,#+0
   \   00000234   07D1               BNE      ??RF_MasterExecut_18
   \   00000236   0C23               MOVS     R3,#+12
   \   00000238   5843               MULS     R0,R3,R0
   \   0000023A   804B               LDR      R3,??RF_MasterExecut_12  ;; NeuronsList
   \   0000023C   1818               ADDS     R0,R3,R0
   \   0000023E   0C38               SUBS     R0,R0,#+12
   \   00000240   0078               LDRB     R0,[R0, #+0]
   \   00000242   0428               CMP      R0,#+4
   \   00000244   01D1               BNE      ??RF_MasterExecut_17
   \                     ??RF_MasterExecut_18:
   \   00000246   501E               SUBS     R0,R2,#+1
   \   00000248   0870               STRB     R0,[R1, #+0]
   \                     ??RF_MasterExecut_17:
   \   0000024A   0126               MOVS     R6,#+1
   \                     ??RF_MasterExecut_15:
   \   0000024C   0120               MOVS     R0,#+1
   \   0000024E   2056               LDRSB    R0,[R4, R0]
   \   00000250   C100               LSLS     R1,R0,#+3
   \   00000252   1E4A               LDR      R2,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   00000254   5118               ADDS     R1,R2,R1
   \   00000256   0A78               LDRB     R2,[R1, #+0]
   \   00000258   002A               CMP      R2,#+0
   \   0000025A   00D1               BNE      .+4
   \   0000025C   22E7               B        ??RF_MasterExecut_9
   \   0000025E   4528               CMP      R0,#+69
   \   00000260   00DB               BLT      .+4
   \   00000262   1FE7               B        ??RF_MasterExecut_9
   \   00000264   002E               CMP      R6,#+0
   \   00000266   00D0               BEQ      .+4
   \   00000268   1CE7               B        ??RF_MasterExecut_9
   \   0000026A   4A68               LDR      R2,[R1, #+4]
   \   0000026C   F020               MOVS     R0,#+240
   \   0000026E   0004               LSLS     R0,R0,#+16       ;; #+15728640
   \   00000270   0300               MOVS     R3,R0
   \   00000272   1340               ANDS     R3,R3,R2
   \   00000274   1B0D               LSRS     R3,R3,#+20
   \   00000276   022B               CMP      R3,#+2
   \   00000278   12D1               BNE      ??RF_MasterExecut_19
   \   0000027A   120E               LSRS     R2,R2,#+24
   \   0000027C   10D1               BNE      ??RF_MasterExecut_19
   \   0000027E   0A78               LDRB     R2,[R1, #+0]
   \   00000280   144B               LDR      R3,??RF_MasterExecut_0+0xC  ;; 0x6eb
   \   00000282   134D               LDR      R5,??RF_MasterExecut_0+0x8  ;; MainStage
   \   00000284   AD18               ADDS     R5,R5,R2
   \   00000286   EB5C               LDRB     R3,[R5, R3]
   \   00000288   002B               CMP      R3,#+0
   \   0000028A   09D1               BNE      ??RF_MasterExecut_19
   \   0000028C   6B4D               LDR      R5,??RF_MasterExecut_12  ;; NeuronsList
   \   0000028E   0C23               MOVS     R3,#+12
   \   00000290   5A43               MULS     R2,R3,R2
   \   00000292   AA18               ADDS     R2,R5,R2
   \   00000294   0C3A               SUBS     R2,R2,#+12
   \   00000296   1278               LDRB     R2,[R2, #+0]
   \   00000298   052A               CMP      R2,#+5
   \   0000029A   01D0               BEQ      ??RF_MasterExecut_19
   \   0000029C   042A               CMP      R2,#+4
   \   0000029E   0ED1               BNE      ??RF_MasterExecut_20
   \                     ??RF_MasterExecut_19:
   \   000002A0   4A68               LDR      R2,[R1, #+4]
   \   000002A2   0300               MOVS     R3,R0
   \   000002A4   1340               ANDS     R3,R3,R2
   \   000002A6   1B0D               LSRS     R3,R3,#+20
   \   000002A8   012B               CMP      R3,#+1
   \   000002AA   B4D1               BNE      ??RF_MasterExecut_16
   \   000002AC   120E               LSRS     R2,R2,#+24
   \   000002AE   B2D0               BEQ      ??RF_MasterExecut_16
   \   000002B0   0A78               LDRB     R2,[R1, #+0]
   \   000002B2   684B               LDR      R3,??RF_MasterExecut_12+0x18  ;; TransQuality
   \   000002B4   9A18               ADDS     R2,R3,R2
   \   000002B6   2532               ADDS     R2,R2,#+37
   \   000002B8   1278               LDRB     R2,[R2, #+0]
   \   000002BA   002A               CMP      R2,#+0
   \   000002BC   ABD1               BNE      ??RF_MasterExecut_16
   \                     ??RF_MasterExecut_20:
   \   000002BE   ........           BL       IncCurentRfTask
   \   000002C2   0028               CMP      R0,#+0
   \   000002C4   C2D1               BNE      ??RF_MasterExecut_15
   \   000002C6   B5E0               B        ??RF_MasterExecut_1
   \                     ??RF_MasterExecut_0:
   \   000002C8   ........           DC32     SlaveMode
   \   000002CC   ........           DC32     RF_TaskTab
   \   000002D0   ........           DC32     MainStage
   \   000002D4   EB060000           DC32     0x6eb
   \   000002D8   ........           DC32     ChangeStageFlag
   \   000002DC   ........           DC32     IndWys
   \   000002E0   ........           DC32     RF_Status + 13
    957                else if ((RF_TaskTab[RF_CurrentTask].Command.Order==R_BC_Order)   || (RF_TaskTab[RF_CurrentTask].Command.Order==W_BC_Order))           //rozkaz specjalny ramka rozg³ona
   \                     ??RF_MasterExecut_11:
   \   000002E4   0728               CMP      R0,#+7
   \   000002E6   01D0               BEQ      ??RF_MasterExecut_21
   \   000002E8   0828               CMP      R0,#+8
   \   000002EA   6AD1               BNE      ??RF_MasterExecut_22
    958                {
    959                   ByteToSend=8;
   \                     ??RF_MasterExecut_21:
   \   000002EC   6846               MOV      R0,SP
   \   000002EE   0821               MOVS     R1,#+8
   \   000002F0   0172               STRB     R1,[R0, #+8]
    960                   RF_Command.BC_ID1=0;
   \   000002F2   ........           BL       __aeabi_uread8
   \   000002F6   6A46               MOV      R2,SP
   \   000002F8   1500               MOVS     R5,R2
   \   000002FA   0200               MOVS     R2,R0
   \   000002FC   0B00               MOVS     R3,R1
   \   000002FE   5048               LDR      R0,??RF_MasterExecut_12+0x4  ;; 0xfff00000
   \   00000300   0021               MOVS     R1,#+0
   \   00000302   C943               MVNS     R1,R1            ;; #-1
   \   00000304   1040               ANDS     R0,R0,R2
   \   00000306   1940               ANDS     R1,R1,R3
   \   00000308   2A00               MOVS     R2,R5
   \   0000030A   ........           BL       __aeabi_uwrite8
    961                   RF_Command.BC_REG=RF_TaskTab[RF_CurrentTask].Command.Auxi;
   \   0000030E   3000               MOVS     R0,R6
   \   00000310   C01C               ADDS     R0,R0,#+3
   \   00000312   ........           BL       __aeabi_uread8
   \   00000316   3200               MOVS     R2,R6
   \   00000318   D21C               ADDS     R2,R2,#+3
   \   0000031A   1500               MOVS     R5,R2
   \   0000031C   0200               MOVS     R2,R0
   \   0000031E   0B00               MOVS     R3,R1
   \   00000320   0F20               MOVS     R0,#+15
   \   00000322   C043               MVNS     R0,R0            ;; #-16
   \   00000324   0021               MOVS     R1,#+0
   \   00000326   C943               MVNS     R1,R1            ;; #-1
   \   00000328   1040               ANDS     R0,R0,R2
   \   0000032A   1940               ANDS     R1,R1,R3
   \   0000032C   03B4               PUSH     {R0,R1}
   \   0000032E   0120               MOVS     R0,#+1
   \   00000330   2056               LDRSB    R0,[R4, R0]
   \   00000332   C000               LSLS     R0,R0,#+3
   \   00000334   4849               LDR      R1,??RF_MasterExecut_12+0x1C  ;; RF_TaskTab
   \   00000336   0818               ADDS     R0,R1,R0
   \   00000338   4068               LDR      R0,[R0, #+4]
   \   0000033A   0200               MOVS     R2,R0
   \   0000033C   120E               LSRS     R2,R2,#+24
   \   0000033E   0F20               MOVS     R0,#+15
   \   00000340   0021               MOVS     R1,#+0
   \   00000342   1040               ANDS     R0,R0,R2
   \   00000344   0CBC               POP      {R2,R3}
   \   00000346   1043               ORRS     R0,R0,R2
   \   00000348   1943               ORRS     R1,R1,R3
   \   0000034A   2A00               MOVS     R2,R5
   \   0000034C   ........           BL       __aeabi_uwrite8
    962                   RF_Command.BC_ID2=NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronID;
   \   00000350   3000               MOVS     R0,R6
   \   00000352   C01C               ADDS     R0,R0,#+3
   \   00000354   ........           BL       __aeabi_uread8
   \   00000358   0200               MOVS     R2,R0
   \   0000035A   0B00               MOVS     R3,R1
   \   0000035C   3A48               LDR      R0,??RF_MasterExecut_12+0xC  ;; 0xff00000f
   \   0000035E   0021               MOVS     R1,#+0
   \   00000360   C943               MVNS     R1,R1            ;; #-1
   \   00000362   1040               ANDS     R0,R0,R2
   \   00000364   1940               ANDS     R1,R1,R3
   \   00000366   03B4               PUSH     {R0,R1}
   \   00000368   0120               MOVS     R0,#+1
   \   0000036A   2056               LDRSB    R0,[R4, R0]
   \   0000036C   C000               LSLS     R0,R0,#+3
   \   0000036E   3A49               LDR      R1,??RF_MasterExecut_12+0x1C  ;; RF_TaskTab
   \   00000370   085C               LDRB     R0,[R1, R0]
   \   00000372   0C21               MOVS     R1,#+12
   \   00000374   4843               MULS     R0,R1,R0
   \   00000376   3149               LDR      R1,??RF_MasterExecut_12  ;; NeuronsList
   \   00000378   0818               ADDS     R0,R1,R0
   \   0000037A   0838               SUBS     R0,R0,#+8
   \   0000037C   0268               LDR      R2,[R0, #+0]
   \   0000037E   1201               LSLS     R2,R2,#+4
   \   00000380   3248               LDR      R0,??RF_MasterExecut_12+0x10  ;; 0xfffff0
   \   00000382   0021               MOVS     R1,#+0
   \   00000384   1040               ANDS     R0,R0,R2
   \   00000386   0CBC               POP      {R2,R3}
   \   00000388   1043               ORRS     R0,R0,R2
   \   0000038A   1943               ORRS     R1,R1,R3
   \   0000038C   2A00               MOVS     R2,R5
   \   0000038E   ........           BL       __aeabi_uwrite8
    963                   RF_Command.BC_CRC=crc16(RF_Command.Streem,6);
                                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000392   0621               MOVS     R1,#+6
   \   00000394   6846               MOV      R0,SP
   \   00000396   ........           BL       crc16
   \   0000039A   0500               MOVS     R5,R0
   \   0000039C   3000               MOVS     R0,R6
   \   0000039E   801D               ADDS     R0,R0,#+6
   \   000003A0   ........           BL       __aeabi_uread8
   \   000003A4   B61D               ADDS     R6,R6,#+6
   \   000003A6   0200               MOVS     R2,R0
   \   000003A8   0B00               MOVS     R3,R1
   \   000003AA   2948               LDR      R0,??RF_MasterExecut_12+0x14  ;; 0xffff0000
   \   000003AC   0021               MOVS     R1,#+0
   \   000003AE   C943               MVNS     R1,R1            ;; #-1
   \   000003B0   1040               ANDS     R0,R0,R2
   \   000003B2   1940               ANDS     R1,R1,R3
   \   000003B4   2A00               MOVS     R2,R5
   \   000003B6   0243               ORRS     R2,R2,R0
   \   000003B8   1000               MOVS     R0,R2
   \   000003BA   3200               MOVS     R2,R6
   \   000003BC   ........           BL       __aeabi_uwrite8
   \   000003C0   1FE0               B        ??RF_MasterExecut_13
    964                
    965                }
    966                else if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
   \                     ??RF_MasterExecut_22:
   \   000003C2   0128               CMP      R0,#+1
   \   000003C4   07D1               BNE      ??RF_MasterExecut_23
    967                {
    968                    ByteToSend=6;
   \   000003C6   6846               MOV      R0,SP
   \   000003C8   0621               MOVS     R1,#+6
   \   000003CA   0172               STRB     R1,[R0, #+8]
    969                    RF_Command.B6.CRC = crc16(RF_Command.Streem,4);
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000003CC   0421               MOVS     R1,#+4
   \   000003CE   ........           BL       crc16
   \   000003D2   B080               STRH     R0,[R6, #+4]
   \   000003D4   15E0               B        ??RF_MasterExecut_13
    970          
    971                    
    972                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)
   \                     ??RF_MasterExecut_23:
   \   000003D6   0228               CMP      R0,#+2
   \   000003D8   13D1               BNE      ??RF_MasterExecut_13
    973                {  
    974                    ByteToSend=8;
   \   000003DA   6846               MOV      R0,SP
   \   000003DC   0822               MOVS     R2,#+8
   \   000003DE   0272               STRB     R2,[R0, #+8]
    975                    RF_Command.B8.Val = MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi];
   \   000003E0   1E48               LDR      R0,??RF_MasterExecut_12+0x20  ;; 0x3a2
   \   000003E2   4A68               LDR      R2,[R1, #+4]
   \   000003E4   120E               LSRS     R2,R2,#+24
   \   000003E6   5200               LSLS     R2,R2,#+1
   \   000003E8   0978               LDRB     R1,[R1, #+0]
   \   000003EA   1623               MOVS     R3,#+22
   \   000003EC   5943               MULS     R1,R3,R1
   \   000003EE   1C4B               LDR      R3,??RF_MasterExecut_12+0x24  ;; MainStage
   \   000003F0   5918               ADDS     R1,R3,R1
   \   000003F2   8918               ADDS     R1,R1,R2
   \   000003F4   085A               LDRH     R0,[R1, R0]
   \   000003F6   B080               STRH     R0,[R6, #+4]
    976                    RF_Command.B8.CRC = crc16(RF_Command.Streem,6);
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000003F8   0621               MOVS     R1,#+6
   \   000003FA   6846               MOV      R0,SP
   \   000003FC   ........           BL       crc16
   \   00000400   F080               STRH     R0,[R6, #+6]
    977                    
    978                    #ifdef _DEBUG_
    979                       AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    980                       ButtonBipCounter=g_counter+1;       
    981                    #endif
    982              
    983                }
    984              
    985                 #ifdef  DIRECT_Q_MESURE
    986                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]++; 
    987                 #endif
    988                
    989                
    990                if (RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node)
   \                     ??RF_MasterExecut_13:
   \   00000402   207A               LDRB     R0,[R4, #+8]
   \   00000404   0121               MOVS     R1,#+1
   \   00000406   6156               LDRSB    R1,[R4, R1]
   \   00000408   C900               LSLS     R1,R1,#+3
   \   0000040A   134A               LDR      R2,??RF_MasterExecut_12+0x1C  ;; RF_TaskTab
   \   0000040C   515C               LDRB     R1,[R2, R1]
   \   0000040E   8842               CMP      R0,R1
   \   00000410   02D1               BNE      ??RF_MasterExecut_24
    991                {
    992                  RF_NodeTest.Sent++; 
   \   00000412   E068               LDR      R0,[R4, #+12]
   \   00000414   401C               ADDS     R0,R0,#+1
   \   00000416   E060               STR      R0,[R4, #+12]
    993                }
    994                
    995                
    996                
    997                //RF_Status.EnableTX();
    998                RF_SendData(RF_Command.Streem, ByteToSend);
                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??RF_MasterExecut_24:
   \   00000418   6846               MOV      R0,SP
   \   0000041A   017A               LDRB     R1,[R0, #+8]
   \   0000041C   ........           BL       RF_SendData
    999                //RF_Status.EnableRX();
   1000                
   1001          
   1002               
   1003                
   1004          
   1005                
   1006                
   1007              
   1008            }
   1009            
   1010            static int RF_LastPerTime;
   1011              if (RF_CurrentTask==0){
   \                     ??RF_MasterExecut_10:
   \   00000420   0120               MOVS     R0,#+1
   \   00000422   2056               LDRSB    R0,[R4, R0]
   \   00000424   0028               CMP      R0,#+0
   \   00000426   05D1               BNE      ??RF_MasterExecut_1
   1012                RF_Period=g_counter-RF_LastPerTime;
   \   00000428   0E48               LDR      R0,??RF_MasterExecut_12+0x28  ;; g_counter
   \   0000042A   03C8               LDM      R0!,{R0,R1}
   \   0000042C   226B               LDR      R2,[R4, #+48]
   \   0000042E   821A               SUBS     R2,R0,R2
   \   00000430   E261               STR      R2,[R4, #+28]
   1013                RF_LastPerTime=g_counter;
   \   00000432   2063               STR      R0,[R4, #+48]
   \                     ??RF_MasterExecut_1:
   \   00000434   FEBC               POP      {R1-R7}
   \   00000436   01BC               POP      {R0}
   \   00000438   0047               BX       R0               ;; return
   \   0000043A   C046               Nop      
   \                     ??RF_MasterExecut_12:
   \   0000043C   ........           DC32     NeuronsList
   \   00000440   0000F0FF           DC32     0xfff00000
   \   00000444   FFFF0F00           DC32     0xfffff
   \   00000448   0F0000FF           DC32     0xff00000f
   \   0000044C   F0FFFF00           DC32     0xfffff0
   \   00000450   0000FFFF           DC32     0xffff0000
   \   00000454   ........           DC32     TransQuality
   \   00000458   ........           DC32     RF_TaskTab
   \   0000045C   A2030000           DC32     0x3a2
   \   00000460   ........           DC32     MainStage
   \   00000464   ........           DC32     g_counter
   1014              }
   1015            
   1016          
   1017          
   1018                   #ifdef _LIVE_RJESTR  
   1019               if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
   1020                {
   1021                   LIVE_TAB[LIVE_TAB_IDX]=0xA000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
   1022                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
   1023          
   1024                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)  
   1025                {  
   1026                   LIVE_TAB[LIVE_TAB_IDX]=0xC000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
   1027                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
   1028                }
   1029               #endif
   1030          
   1031            
   1032          }

   \                                 In section .data, align 4
   \                     IndWys:
   \   00000000   00                 DC8 0
   \                     RF_CurrentTask:
   \   00000001   FF                 DC8 -1
   \                     RF_SpecialTask:
   \   00000002   FF                 DC8 -1
   \                     g_RF_TimeOutCounter:
   \   00000003   00                 DC8 0
   \                     BridgeMode:
   \   00000004   00                 DC8 0
   \   00000005   00                 DC8 0
   \   00000006   00                 DC8 0
   \   00000007   FF                 DC8 -1
   \                     RF_NodeTest:
   \   00000008   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     poprawnych:
   \   00000018   00000000           DC8 0, 0, 0, 0
   \                     RF_Period:
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \                     odb:
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     licznik_cykli:
   \   00000028   00000000           DC32 0
   \                     pRF_Command:
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \   00000030   00000000           DC8 0, 0, 0, 0

   \                                 In section .data, align 1
   \                     IndWysNeg:
   \   00000000   01                 DC8 1

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     RF_Status

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   19820000           DC32     0x8219

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     SlaveMode

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   33333333           DC32     0x33333333

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   3333D33F           DC32     0x3fd33333

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   C3F5285C           DC32     0x5c28f5c3

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   8FE28A40           DC32     0x408ae28f

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   00006940           DC32     0x40690000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   00FF04C1           DC32     0xc104ff00

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     RF_TaskTab

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   FFFF0F00           DC32     0xfffff

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     RF_Status + 24

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   E8D71300           DC32     0x13d7e8

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   ........           DC32     NeuronsList

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   ........           DC32     TransQuality

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   ........           DC32     SlaveMode

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     RF_Status
   1033          
   1034          

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     IncCurentRfTask     16
     RF_ExecuteOrder     80
     RF_MasterExecut     40
     RF_ReciveFarm       24
     RF_SendData          8
     SwitchToMaster      16
     SwitchToSlave       16


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     RF_TaskTab           560
     ReadNodeSoftVersion    2
     SwitchToMaster       144
     SwitchToSlave        132
     RF_ReciveFarm        576
     RF_ExecuteOrder     2520
     RF_SendData           12
     IncCurentRfTask      196
     RF_MasterExecut     1128
     IndWys                52
     IndWysNeg              1
     ??DataTable9           4
     ??DataTable10          4
     ??DataTable11          4
     ??DataTable12          4
     ??DataTable13          4
     ??DataTable14          4
     ??DataTable15          4
     ??DataTable16          4
     ??DataTable17          4
     ??DataTable18          4
     ??DataTable19          4
     ??DataTable21          4
     ??DataTable24          4
     ??DataTable26          4
     ??DataTable27          4
     ??DataTable28          4
     ??DataTable32          4
      Others               66

 
   562 bytes in section .bss
    53 bytes in section .data
 4 842 bytes in section Debug.txt
 
 4 776 bytes of CODE memory (+ 66 bytes shared)
   615 bytes of DATA memory

Errors: none
Warnings: 31
