###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           23/Oct/2012  20:58:54 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v0.9 -              #
#                    23.10.2012\Framework\WizFiCommand.c                      #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\Framework\WizFiCommand.c" -D AT91SAM7S256 -D  #
#                    AT91SAM7SEK -D iH -D __ALARM -D S300 -lC                 #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\S300\List\" --diag_suppress Pa082 -o          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\S300\Obj\" --no_unroll --no_inline --no_tbaa  #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v0.9 -     #
#                    23.10.2012\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v0.9 - 23.10.2012\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v0.9 - 23.10.2012\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v0.9 - 23.10.2012\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\Framework\Configuration\" -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=Debug.txt --interwork --cpu_mode thumb   #
#                    -Om                                                      #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v0.9 -              #
#                    23.10.2012\S300\List\WizFiCommand.lst                    #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v0.9 -              #
#                    23.10.2012\S300\Obj\WizFiCommand.o                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\WizFiCommand.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 CEURON                                                   *//
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : WizFiCommacd.c                           *//
      7          //*  Opis                         : Obs³uga komend modu³u WizFi              *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 11.04.2012                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*//
     19          //****************************************************************************//
     20          
     21          
     22          
     23          #include "WizFi.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetNextTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetNextTx:
   \   00000000   8161               STR      R1,[R0, #+24]
   \   00000002   C261               STR      R2,[R0, #+28]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetTx:
   \   00000000   8160               STR      R1,[R0, #+8]
   \   00000002   C260               STR      R2,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsTxEmpty:
   \   00000000   C068               LDR      R0,[R0, #+12]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsNextTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsNextTxEmpty:
   \   00000000   C069               LDR      R0,[R0, #+28]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PDC_SendFrame(AT91PS_PDC, char *, unsigned int, char *, unsigned int)
   \                     AT91F_PDC_SendFrame:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   069F               LDR      R7,[SP, #+24]
   \   0000000A   ........           BL       AT91F_PDC_IsTxEmpty
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   0BD0               BEQ      ??AT91F_PDC_SendFrame_0
   \   00000012   3200               MOVS     R2,R6
   \   00000014   2900               MOVS     R1,R5
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       AT91F_PDC_SetTx
   \   0000001C   3A00               MOVS     R2,R7
   \   0000001E   0099               LDR      R1,[SP, #+0]
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       AT91F_PDC_SetNextTx
   \   00000026   0220               MOVS     R0,#+2
   \   00000028   0AE0               B        ??AT91F_PDC_SendFrame_1
   \                     ??AT91F_PDC_SendFrame_0:
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_PDC_IsNextTxEmpty
   \   00000030   0028               CMP      R0,#+0
   \   00000032   05D0               BEQ      ??AT91F_PDC_SendFrame_1
   \   00000034   3200               MOVS     R2,R6
   \   00000036   2900               MOVS     R1,R5
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   ........           BL       AT91F_PDC_SetNextTx
   \   0000003E   0120               MOVS     R0,#+1
   \                     ??AT91F_PDC_SendFrame_1:
   \   00000040   F8BC               POP      {R3-R7}
   \   00000042   02BC               POP      {R1}
   \   00000044   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_US_SendFrame(AT91PS_USART, unsigned char *, unsigned int, unsigned char *, unsigned int)
   \                     AT91F_US_SendFrame:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   029C               LDR      R4,[SP, #+8]
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0094               STR      R4,[SP, #+0]
   \   00000008   8024               MOVS     R4,#+128
   \   0000000A   6400               LSLS     R4,R4,#+1        ;; #+256
   \   0000000C   0019               ADDS     R0,R0,R4
   \   0000000E   ........           BL       AT91F_PDC_SendFrame
   \   00000012   02B0               ADD      SP,SP,#+8
   \   00000014   10BC               POP      {R4}
   \   00000016   02BC               POP      {R1}
   \   00000018   0847               BX       R1               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline

   
   ^
"D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\WizFi.h",147  Warning[Pe001]: 
          last line of file ends without a newline
     24          //#include "Framework.h"
     25          //#include "core/device.h"                                                        //aduje bibliotreki dla odpowiedniego procesora
     26          //#include "main_H.h" 
     27          #include "string.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __intrinsic __code __interwork char *strstr(char const *, char const *)
   \                     strstr:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   ........           BL       __iar_Strstr
   \   00000006   08BC               POP      {R3}
   \   00000008   02BC               POP      {R1}
   \   0000000A   0847               BX       R1               ;; return
     28          
     29          
     30          //Sta³e ------------------------------------------------------------------------

   \                                 In section .rodata, align 4
     31              const char AT[]="AT\r";                                                     //komenda WizFi 
   \                     AT:
   \   00000000   41540D00           DC8 "AT\015"

   \                                 In section .rodata, align 4
     32              const char AT_XDUM0[]="AT+XDUM=0\r";                                                //komenda WizFi 
   \                     AT_XDUM0:
   \   00000000   41542B584455       DC8 "AT+XDUM=0\015"
   \              4D3D300D00  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
     33              const char AT_WD[]="AT+WD\r";                                               //komenda WizFi 
   \                     AT_WD:
   \   00000000   41542B57440D       DC8 "AT+WD\015"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     34              const char AT_NDHCP_0[]="AT+NDHCP=0\r";                                     //komenda WizFi   
   \                     AT_NDHCP_0:
   \   00000000   41542B4E4448       DC8 "AT+NDHCP=0\015"
   \              43503D300D00
     35              const char AT_NDHCP_1[]="AT+NDHCP=1\r";                                     //komenda WizFi 
   \                     AT_NDHCP_1:
   \   0000000C   41542B4E4448       DC8 "AT+NDHCP=1\015"
   \              43503D310D00

   \                                 In section .rodata, align 4
     36              const char AT_NSET[]="AT+NSET=";                                          //komenda WizFi  
   \                     AT_NSET:
   \   00000000   41542B4E5345       DC8 "AT+NSET="
   \              543D00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
     37              const char AT_WWEP1[]="AT+WWEP1=";                                          //komenda WizFi  
   \                     AT_WWEP1:
   \   00000000   41542B575745       DC8 "AT+WWEP1="
   \              50313D00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     38              const char AT_WWPA[]="AT+WWPA=";                                            //komenda WizFi  
   \                     AT_WWPA:
   \   00000000   41542B575750       DC8 "AT+WWPA="
   \              413D00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
     39              const char AT_WA[]="AT+WA=";                                              //komenda WizFi  
   \                     AT_WA:
   \   00000000   41542B57413D       DC8 "AT+WA="
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     40              const char AT_DNSLOOKUP[]="AT+DNSLOOKUP=";                                              //komenda WizFi  
   \                     AT_DNSLOOKUP:
   \   00000000   41542B444E53       DC8 "AT+DNSLOOKUP="
   \              4C4F4F4B5550
   \              3D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     41              const char AT_NCTCP[]="AT+NCTCP=";                                              //komenda WizFi  
   \                     AT_NCTCP:
   \   00000000   41542B4E4354       DC8 "AT+NCTCP="
   \              43503D00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     42              const char AT_NCLOSEALL[]="AT+NCLOSEALL\r";                                              //komenda WizFi  
   \                     AT_NCLOSEALL:
   \   00000000   41542B4E434C       DC8 "AT+NCLOSEALL\015"
   \              4F5345414C4C
   \              0D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     43              const char AT_WS[]="AT+WS\r";
   \                     AT_WS:
   \   00000000   41542B57530D       DC8 "AT+WS\015"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     44              const char AT_CID[]="AT+CID=?\r";
   \                     AT_CID:
   \   00000000   41542B434944       DC8 "AT+CID=?\015"
   \              3D3F0D00    
   \   0000000A   0000               DC8 0, 0
     45           //____________________________Koniec sta³ych ___________________________________
     46           
     47          
     48              extern unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
     49              
     50              
     51              
     52              extern char Variables[];    //zmienne
     53              extern char VariablesNetTmp[];
     54              extern short int VariablesAnal[];    //zmienne
     55              extern _ProgramTab gProg;
     56              extern _MainStage  MainStage; 
     57              extern _DateTime DateTime;    
     58          
     59          
     60          
     61          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     62          void WizFiCommand_AT(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
     63          {
   \                     WizFiCommand_AT:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   1500               MOVS     R5,R2
   \   00000004   1C00               MOVS     R4,R3
     64             if (Net->WiFi.SSID[0]==0)
   \   00000006   A622               MOVS     R2,#+166
   \   00000008   A25C               LDRB     R2,[R4, R2]
   \   0000000A   002A               CMP      R2,#+0
   \   0000000C   12D1               BNE      ??WizFiCommand_AT_0
     65             {
     66               Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000000E   3834               ADDS     R4,R4,#+56
   \   00000010   ....               LDR      R5,??DataTable17  ;; g_counter
   \   00000012   0CCD               LDM      R5!,{R2,R3}
   \   00000014   083D               SUBS     R5,R5,#+8
   \   00000016   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   8018               ADDS     R0,R0,R2
   \   0000001C   5941               ADCS     R1,R1,R3
   \   0000001E   03C4               STM      R4!,{R0,R1}
   \   00000020   083C               SUBS     R4,R4,#+8
     67               Net->Status.FreezTime=g_counter+1000;
   \   00000022   0834               ADDS     R4,R4,#+8
   \   00000024   0CCD               LDM      R5!,{R2,R3}
   \   00000026   FA20               MOVS     R0,#+250
   \   00000028   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   8018               ADDS     R0,R0,R2
   \   0000002E   5941               ADCS     R1,R1,R3
   \   00000030   03C4               STM      R4!,{R0,R1}
   \   00000032   26E0               B        ??WizFiCommand_AT_1
     68             }else{
     69               for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0; 
   \                     ??WizFiCommand_AT_0:
   \   00000034   0022               MOVS     R2,#+0
   \   00000036   1300               MOVS     R3,R2
   \   00000038   04E0               B        ??WizFiCommand_AT_2
   \                     ??WizFiCommand_AT_3:
   \   0000003A   1600               MOVS     R6,R2
   \   0000003C   C654               STRB     R6,[R0, R3]
   \   0000003E   5B1C               ADDS     R3,R3,#+1
   \   00000040   1B04               LSLS     R3,R3,#+16
   \   00000042   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_2:
   \   00000044   9126               MOVS     R6,#+145
   \   00000046   B600               LSLS     R6,R6,#+2        ;; #+580
   \   00000048   B342               CMP      R3,R6
   \   0000004A   F6DB               BLT      ??WizFiCommand_AT_3
     70               Buff_TX[0]='A';
   \   0000004C   4120               MOVS     R0,#+65
   \   0000004E   0870               STRB     R0,[R1, #+0]
     71               Buff_TX[1]='T';
   \   00000050   5420               MOVS     R0,#+84
   \   00000052   4870               STRB     R0,[R1, #+1]
     72               Buff_TX[2]=0x0d;
   \   00000054   0D20               MOVS     R0,#+13
   \   00000056   8870               STRB     R0,[R1, #+2]
     73               Buff_TX[3]=0x0A;
   \   00000058   0A20               MOVS     R0,#+10
   \   0000005A   C870               STRB     R0,[R1, #+3]
     74               
     75               Net->Status.CurrentOrder=WizFi_AT;
   \   0000005C   0120               MOVS     R0,#+1
   \   0000005E   A070               STRB     R0,[R4, #+2]
     76               AT91F_US_SendFrame(USART,Buff_TX,4,0, 0);                        //Wysyla ramke 
                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000060   82B0               SUB      SP,SP,#+8
   \   00000062   1000               MOVS     R0,R2
   \   00000064   0090               STR      R0,[SP, #+0]
   \   00000066   0300               MOVS     R3,R0
   \   00000068   0422               MOVS     R2,#+4
   \   0000006A   2800               MOVS     R0,R5
   \   0000006C   ........           BL       AT91F_US_SendFrame
   \   00000070   02B0               ADD      SP,SP,#+8
     77               Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000072   3834               ADDS     R4,R4,#+56
   \   00000074   ....               LDR      R0,??DataTable17  ;; g_counter
   \   00000076   0CC8               LDM      R0!,{R2,R3}
   \   00000078   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   0000007A   0021               MOVS     R1,#+0
   \   0000007C   8018               ADDS     R0,R0,R2
   \   0000007E   5941               ADCS     R1,R1,R3
   \   00000080   03C4               STM      R4!,{R0,R1}
     78             }
     79          }
   \                     ??WizFiCommand_AT_1:
   \   00000082   70BC               POP      {R4-R6}
   \   00000084   01BC               POP      {R0}
   \   00000086   0047               BX       R0               ;; return
     80          

   \                                 In section Debug.txt, align 4, keep-with-next
     81          char WizFiResponseCommand_AT(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
     82          {
   \                     WizFiResponseCommand_AT:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
     83             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
     84             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_1
     85                  {
     86                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
     87                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_2
   \                     ??WizFiResponseCommand_AT_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_3
     88                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   ....               LDR      R0,??DataTable17  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
     89                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
     90                  }
     91             return odp;
   \                     ??WizFiResponseCommand_AT_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
     92          }
     93          
     94          
     95          
     96          
     97          
     98          
     99          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    100          void WizFiCommand_AT_XDUM0(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    101          {
   \                     WizFiCommand_AT_XDUM0:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    102             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_XDUM0_0
   \                     ??WizFiCommand_AT_XDUM0_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_XDUM0_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_XDUM0_1
    103             Net->Status.CurrentOrder=WizFi_AT_XDUM0;     
   \   00000020   0221               MOVS     R1,#+2
   \   00000022   A170               STRB     R1,[R4, #+2]
    104             AT91F_US_SendFrame(USART,(char*)AT_XDUM0,sizeof(AT_XDUM0)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   1100               MOVS     R1,R2
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0A22               MOVS     R2,#+10
   \   0000002E   0749               LDR      R1,??WizFiCommand_AT_XDUM0_2  ;; AT_XDUM0
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    105             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000036   3834               ADDS     R4,R4,#+56
   \   00000038   ....               LDR      R0,??DataTable17  ;; g_counter
   \   0000003A   0CC8               LDM      R0!,{R2,R3}
   \   0000003C   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   8018               ADDS     R0,R0,R2
   \   00000042   5941               ADCS     R1,R1,R3
   \   00000044   03C4               STM      R4!,{R0,R1}
    106             
    107          }
   \   00000046   38BC               POP      {R3-R5}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_XDUM0_2:
   \   0000004C   ........           DC32     AT_XDUM0
    108          

   \                                 In section Debug.txt, align 4, keep-with-next
    109          char WizFiResponseCommand_AT_XDUM0(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    110          {
   \                     WizFiResponseCommand_AT_XDUM0:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    111             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    112             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_XDUM0_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_XDUM0_1
    113                  {
    114                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    115                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_XDUM0_2
   \                     ??WizFiResponseCommand_AT_XDUM0_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_XDUM0_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_XDUM0_3
    116                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   ....               LDR      R0,??DataTable17  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    117                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    118                  }
    119             return odp;
   \                     ??WizFiResponseCommand_AT_XDUM0_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_XDUM0_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    120          }
    121          
    122          
    123          
    124          
    125          
    126          
    127          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    128          void WizFiCommand_AT_NCLOSEALL(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    129          {
   \                     WizFiCommand_AT_NCLOSEALL:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    130             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0025               MOVS     R5,#+0
   \   0000000A   2A00               MOVS     R2,R5
   \   0000000C   04E0               B        ??WizFiCommand_AT_NCLOSEALL_0
   \                     ??WizFiCommand_AT_NCLOSEALL_1:
   \   0000000E   2B00               MOVS     R3,R5
   \   00000010   8B54               STRB     R3,[R1, R2]
   \   00000012   521C               ADDS     R2,R2,#+1
   \   00000014   1204               LSLS     R2,R2,#+16
   \   00000016   1214               ASRS     R2,R2,#+16
   \                     ??WizFiCommand_AT_NCLOSEALL_0:
   \   00000018   9123               MOVS     R3,#+145
   \   0000001A   9B00               LSLS     R3,R3,#+2        ;; #+580
   \   0000001C   9A42               CMP      R2,R3
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_NCLOSEALL_1
    131             Net->Status.CurrentOrder=WizFi_AT_NCLOSEALL;     
   \   00000020   0B21               MOVS     R1,#+11
   \   00000022   A170               STRB     R1,[R4, #+2]
    132             AT91F_US_SendFrame(USART,(char*)AT_NCLOSEALL,sizeof(AT_NCLOSEALL)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   2900               MOVS     R1,R5
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0D22               MOVS     R2,#+13
   \   0000002E   0849               LDR      R1,??WizFiCommand_AT_NCLOSEALL_2  ;; AT_NCLOSEALL
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    133             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000036   2600               MOVS     R6,R4
   \   00000038   3836               ADDS     R6,R6,#+56
   \   0000003A   ....               LDR      R0,??DataTable17  ;; g_counter
   \   0000003C   0CC8               LDM      R0!,{R2,R3}
   \   0000003E   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   00000040   2900               MOVS     R1,R5
   \   00000042   8018               ADDS     R0,R0,R2
   \   00000044   5941               ADCS     R1,R1,R3
   \   00000046   03C6               STM      R6!,{R0,R1}
    134             Net->Status.HostLink=DISCONNECTED; 
   \   00000048   6570               STRB     R5,[R4, #+1]
    135          }
   \   0000004A   70BC               POP      {R4-R6}
   \   0000004C   01BC               POP      {R0}
   \   0000004E   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_NCLOSEALL_2:
   \   00000050   ........           DC32     AT_NCLOSEALL
    136          

   \                                 In section Debug.txt, align 4, keep-with-next
    137          char WizFiResponseCommand_AT_NCLOSEALL0(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    138          {
   \                     WizFiResponseCommand_AT_NCLOSEALL0:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    139             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    140             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_NCLOSEALL0_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   13D0               BEQ      ??WizFiResponseCommand_AT_NCLOSEALL0_1
    141                  {
    142                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    143                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NCLOSEALL0_2
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NCLOSEALL0_3
    144                    Net->Status.Timeout=g_counter + FREEZ_TIME;    //przed³u¿enie /restart timeoutu
   \   0000002A   2200               MOVS     R2,R4
   \   0000002C   3832               ADDS     R2,R2,#+56
   \   0000002E   ....               LDR      R0,??DataTable17  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0023               MOVS     R3,#+0
   \   00000034   3230               ADDS     R0,R0,#+50
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C2               STM      R2!,{R0,R1}
    145                     Net->Status.HostLink=DISCONNECTED;
   \   0000003A   6570               STRB     R5,[R4, #+1]
    146                  }
    147             return odp;
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_1:
   \   0000003C   3000               MOVS     R0,R6
   \   0000003E   F8BC               POP      {R3-R7}
   \   00000040   02BC               POP      {R1}
   \   00000042   0847               BX       R1               ;; return
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    148          }
    149          
    150          
    151           
    152          
    153          
    154          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    155          void WizFiCommand_AT_WD(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    156          {
   \                     WizFiCommand_AT_WD:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    157             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_WD_0
   \                     ??WizFiCommand_AT_WD_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WD_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_WD_1
    158             Net->Status.CurrentOrder=WizFi_AT_WD;     
   \   00000020   0321               MOVS     R1,#+3
   \   00000022   A170               STRB     R1,[R4, #+2]
    159             AT91F_US_SendFrame(USART,(char*)AT_WD,sizeof(AT_WD)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   1100               MOVS     R1,R2
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0622               MOVS     R2,#+6
   \   0000002E   0749               LDR      R1,??WizFiCommand_AT_WD_2  ;; AT_WD
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    160             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000036   3834               ADDS     R4,R4,#+56
   \   00000038   ....               LDR      R0,??DataTable17  ;; g_counter
   \   0000003A   0CC8               LDM      R0!,{R2,R3}
   \   0000003C   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   8018               ADDS     R0,R0,R2
   \   00000042   5941               ADCS     R1,R1,R3
   \   00000044   03C4               STM      R4!,{R0,R1}
    161          }
   \   00000046   38BC               POP      {R3-R5}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WD_2:
   \   0000004C   ........           DC32     AT_WD
    162          

   \                                 In section Debug.txt, align 4, keep-with-next
    163          char WizFiResponseCommand_AT_WD(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    164          {
   \                     WizFiResponseCommand_AT_WD:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    165             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    166             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_WD_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_WD_1
    167                  {
    168                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    169                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WD_2
   \                     ??WizFiResponseCommand_AT_WD_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WD_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WD_3
    170                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   ....               LDR      R0,??DataTable17  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    171                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    172                  }
    173             return odp;
   \                     ??WizFiResponseCommand_AT_WD_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WD_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    174          }
    175          
    176          
    177          
    178          
    179          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    180          void WizFiCommand_AT_NDHCP(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    181          {      
   \                     WizFiCommand_AT_NDHCP:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    182             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_NDHCP_0
   \                     ??WizFiCommand_AT_NDHCP_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_NDHCP_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_NDHCP_1
    183             Net->Status.CurrentOrder=WizFi_AT_NDHCP;  
   \   00000020   0521               MOVS     R1,#+5
   \   00000022   A170               STRB     R1,[R4, #+2]
    184             if (Net->WiFi.IpNotAuto)
   \   00000024   3834               ADDS     R4,R4,#+56
   \   00000026   617C               LDRB     R1,[R4, #+17]
   \   00000028   0029               CMP      R1,#+0
   \   0000002A   82B0               SUB      SP,SP,#+8
   \   0000002C   08D0               BEQ      ??WizFiCommand_AT_NDHCP_2
    185             {  
    186                 AT91F_US_SendFrame(USART,(char*)AT_NDHCP_0,sizeof(AT_NDHCP_0)-1,0, 0);                        //Wysyla ramke  
                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000002E   1100               MOVS     R1,R2
   \   00000030   0091               STR      R1,[SP, #+0]
   \   00000032   0B00               MOVS     R3,R1
   \   00000034   0B22               MOVS     R2,#+11
   \   00000036   0B49               LDR      R1,??WizFiCommand_AT_NDHCP_3  ;; AT_NDHCP_0
   \   00000038   ........           BL       AT91F_US_SendFrame
   \   0000003C   02B0               ADD      SP,SP,#+8
   \   0000003E   07E0               B        ??WizFiCommand_AT_NDHCP_4
    187             }else{ 
    188                 AT91F_US_SendFrame(USART,(char*)AT_NDHCP_1,sizeof(AT_NDHCP_1)-1,0, 0);                        //Wysyla ramke  
                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??WizFiCommand_AT_NDHCP_2:
   \   00000040   1100               MOVS     R1,R2
   \   00000042   0091               STR      R1,[SP, #+0]
   \   00000044   0B00               MOVS     R3,R1
   \   00000046   0B22               MOVS     R2,#+11
   \   00000048   0749               LDR      R1,??WizFiCommand_AT_NDHCP_3+0x4  ;; AT_NDHCP_0 + 12
   \   0000004A   ........           BL       AT91F_US_SendFrame
   \   0000004E   02B0               ADD      SP,SP,#+8
    189             }
    190             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu 
   \                     ??WizFiCommand_AT_NDHCP_4:
   \   00000050   ....               LDR      R0,??DataTable17  ;; g_counter
   \   00000052   0CC8               LDM      R0!,{R2,R3}
   \   00000054   ....               LDR      R0,??DataTable18  ;; 0x2710
   \   00000056   0021               MOVS     R1,#+0
   \   00000058   8018               ADDS     R0,R0,R2
   \   0000005A   5941               ADCS     R1,R1,R3
   \   0000005C   03C4               STM      R4!,{R0,R1}
    191          }
   \   0000005E   38BC               POP      {R3-R5}
   \   00000060   01BC               POP      {R0}
   \   00000062   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_NDHCP_3:
   \   00000064   ........           DC32     AT_NDHCP_0
   \   00000068   ........           DC32     AT_NDHCP_0 + 12
    192          

   \                                 In section Debug.txt, align 4, keep-with-next
    193          char WizFiResponseCommand_AT_NDHCP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    194          {
   \                     WizFiResponseCommand_AT_NDHCP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    195             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    196             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_NDHCP_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_NDHCP_1
    197                  {
    198                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    199                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NDHCP_2
   \                     ??WizFiResponseCommand_AT_NDHCP_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NDHCP_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NDHCP_3
    200                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_NDHCP_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_NDHCP_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    201                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    202                  }
    203             return odp;
   \                     ??WizFiResponseCommand_AT_NDHCP_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_NDHCP_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    204          }
    205          
    206          
    207          
    208          
    209          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    210          void WizFiCommand_AT_NSET(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    211          {      
   \                     WizFiCommand_AT_NSET:
   \   00000000   F4B5               PUSH     {R2,R4-R7,LR}
   \   00000002   1C00               MOVS     R4,R3
    212                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   1300               MOVS     R3,R2
   \   00000008   04E0               B        ??WizFiCommand_AT_NSET_0
   \                     ??WizFiCommand_AT_NSET_1:
   \   0000000A   1500               MOVS     R5,R2
   \   0000000C   C554               STRB     R5,[R0, R3]
   \   0000000E   5B1C               ADDS     R3,R3,#+1
   \   00000010   1B04               LSLS     R3,R3,#+16
   \   00000012   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_NSET_0:
   \   00000014   9125               MOVS     R5,#+145
   \   00000016   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   00000018   AB42               CMP      R3,R5
   \   0000001A   F6DB               BLT      ??WizFiCommand_AT_NSET_1
    213                     Net->Status.CurrentOrder=WizFi_AT_NSET;
   \   0000001C   0420               MOVS     R0,#+4
   \   0000001E   A070               STRB     R0,[R4, #+2]
    214                     char BTS=0;
   \   00000020   1000               MOVS     R0,R2
    215                     for (char i=0; i<sizeof(AT_NSET); i++)  {Buff_TX[i]=AT_NSET[i];   BTS++;}
   \   00000022   1300               MOVS     R3,R2
   \   00000024   07E0               B        ??WizFiCommand_AT_NSET_2
   \                     ??WizFiCommand_AT_NSET_3:
   \   00000026   1D00               MOVS     R5,R3
   \   00000028   374E               LDR      R6,??WizFiCommand_AT_NSET_4  ;; AT_NSET
   \   0000002A   765D               LDRB     R6,[R6, R5]
   \   0000002C   4E55               STRB     R6,[R1, R5]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   0006               LSLS     R0,R0,#+24
   \   00000032   000E               LSRS     R0,R0,#+24
   \   00000034   5B1C               ADDS     R3,R3,#+1
   \                     ??WizFiCommand_AT_NSET_2:
   \   00000036   092B               CMP      R3,#+9
   \   00000038   F5D3               BCC      ??WizFiCommand_AT_NSET_3
    216                     BTS--;
   \   0000003A   401E               SUBS     R0,R0,#+1
   \   0000003C   0006               LSLS     R0,R0,#+24
   \   0000003E   000E               LSRS     R0,R0,#+24
    217                     char ZN=0;
    218                     ZN=0; while ((Net->WiFi.IP[ZN]>0) && (ZN<=14)) {Buff_TX[BTS+ZN]=Net->WiFi.IP[ZN]; ZN++;}
   \   00000040   1300               MOVS     R3,R2
   \   00000042   07E0               B        ??WizFiCommand_AT_NSET_5
   \                     ??WizFiCommand_AT_NSET_6:
   \   00000044   0700               MOVS     R7,R0
   \   00000046   BE19               ADDS     R6,R7,R6
   \   00000048   4C35               ADDS     R5,R5,#+76
   \   0000004A   2D78               LDRB     R5,[R5, #+0]
   \   0000004C   8D55               STRB     R5,[R1, R6]
   \   0000004E   5B1C               ADDS     R3,R3,#+1
   \   00000050   1B06               LSLS     R3,R3,#+24
   \   00000052   1B0E               LSRS     R3,R3,#+24
   \                     ??WizFiCommand_AT_NSET_5:
   \   00000054   1E00               MOVS     R6,R3
   \   00000056   A519               ADDS     R5,R4,R6
   \   00000058   4C27               MOVS     R7,#+76
   \   0000005A   EF5D               LDRB     R7,[R5, R7]
   \   0000005C   002F               CMP      R7,#+0
   \   0000005E   02D0               BEQ      ??WizFiCommand_AT_NSET_7
   \   00000060   1F00               MOVS     R7,R3
   \   00000062   0F2F               CMP      R7,#+15
   \   00000064   EED3               BCC      ??WizFiCommand_AT_NSET_6
    219                     BTS+=ZN;
   \                     ??WizFiCommand_AT_NSET_7:
   \   00000066   C018               ADDS     R0,R0,R3
   \   00000068   0006               LSLS     R0,R0,#+24
   \   0000006A   000E               LSRS     R0,R0,#+24
   \   0000006C   0300               MOVS     R3,R0
   \   0000006E   2C25               MOVS     R5,#+44
   \   00000070   CD54               STRB     R5,[R1, R3]
   \   00000072   401C               ADDS     R0,R0,#+1
   \   00000074   0006               LSLS     R0,R0,#+24
   \   00000076   000E               LSRS     R0,R0,#+24
    220                     Buff_TX[BTS++]=',';
    221                     ZN=0; while ((Net->WiFi.Mask[ZN]>0) && (ZN<=14)) {Buff_TX[BTS+ZN]=Net->WiFi.Mask[ZN]; ZN++;}
   \   00000078   1300               MOVS     R3,R2
   \   0000007A   07E0               B        ??WizFiCommand_AT_NSET_8
   \                     ??WizFiCommand_AT_NSET_9:
   \   0000007C   0700               MOVS     R7,R0
   \   0000007E   BE19               ADDS     R6,R7,R6
   \   00000080   5B35               ADDS     R5,R5,#+91
   \   00000082   2D78               LDRB     R5,[R5, #+0]
   \   00000084   8D55               STRB     R5,[R1, R6]
   \   00000086   5B1C               ADDS     R3,R3,#+1
   \   00000088   1B06               LSLS     R3,R3,#+24
   \   0000008A   1B0E               LSRS     R3,R3,#+24
   \                     ??WizFiCommand_AT_NSET_8:
   \   0000008C   1E00               MOVS     R6,R3
   \   0000008E   A519               ADDS     R5,R4,R6
   \   00000090   5B27               MOVS     R7,#+91
   \   00000092   EF5D               LDRB     R7,[R5, R7]
   \   00000094   002F               CMP      R7,#+0
   \   00000096   02D0               BEQ      ??WizFiCommand_AT_NSET_10
   \   00000098   1F00               MOVS     R7,R3
   \   0000009A   0F2F               CMP      R7,#+15
   \   0000009C   EED3               BCC      ??WizFiCommand_AT_NSET_9
    222                     BTS+=ZN;
   \                     ??WizFiCommand_AT_NSET_10:
   \   0000009E   C018               ADDS     R0,R0,R3
   \   000000A0   0006               LSLS     R0,R0,#+24
   \   000000A2   000E               LSRS     R0,R0,#+24
    223                     Buff_TX[BTS++]=',';
   \   000000A4   0300               MOVS     R3,R0
   \   000000A6   2C25               MOVS     R5,#+44
   \   000000A8   CD54               STRB     R5,[R1, R3]
   \   000000AA   401C               ADDS     R0,R0,#+1
   \   000000AC   0006               LSLS     R0,R0,#+24
   \   000000AE   000E               LSRS     R0,R0,#+24
    224                     ZN=0; while ((Net->WiFi.Gate[ZN]>0) && (ZN<=14)) {Buff_TX[BTS+ZN]=Net->WiFi.Gate[ZN]; ZN++;}
   \   000000B0   07E0               B        ??WizFiCommand_AT_NSET_11
   \                     ??WizFiCommand_AT_NSET_12:
   \   000000B2   0600               MOVS     R6,R0
   \   000000B4   7519               ADDS     R5,R6,R5
   \   000000B6   6A33               ADDS     R3,R3,#+106
   \   000000B8   1B78               LDRB     R3,[R3, #+0]
   \   000000BA   4B55               STRB     R3,[R1, R5]
   \   000000BC   521C               ADDS     R2,R2,#+1
   \   000000BE   1206               LSLS     R2,R2,#+24
   \   000000C0   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_NSET_11:
   \   000000C2   1500               MOVS     R5,R2
   \   000000C4   6319               ADDS     R3,R4,R5
   \   000000C6   6A26               MOVS     R6,#+106
   \   000000C8   9E5D               LDRB     R6,[R3, R6]
   \   000000CA   002E               CMP      R6,#+0
   \   000000CC   02D0               BEQ      ??WizFiCommand_AT_NSET_13
   \   000000CE   1600               MOVS     R6,R2
   \   000000D0   0F2E               CMP      R6,#+15
   \   000000D2   EED3               BCC      ??WizFiCommand_AT_NSET_12
    225                     
    226                     Buff_TX[BTS+ZN++]=0x0d;
   \                     ??WizFiCommand_AT_NSET_13:
   \   000000D4   4319               ADDS     R3,R0,R5
   \   000000D6   0D25               MOVS     R5,#+13
   \   000000D8   CD54               STRB     R5,[R1, R3]
    227                     AT91F_US_SendFrame(USART,Buff_TX,BTS+ZN,0, 0);                        //Wysyla ramke  
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000000DA   82B0               SUB      SP,SP,#+8
   \   000000DC   0023               MOVS     R3,#+0
   \   000000DE   0093               STR      R3,[SP, #+0]
   \   000000E0   521C               ADDS     R2,R2,#+1
   \   000000E2   1206               LSLS     R2,R2,#+24
   \   000000E4   120E               LSRS     R2,R2,#+24
   \   000000E6   8218               ADDS     R2,R0,R2
   \   000000E8   0298               LDR      R0,[SP, #+8]
   \   000000EA   ........           BL       AT91F_US_SendFrame
   \   000000EE   02B0               ADD      SP,SP,#+8
    228                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   000000F0   3834               ADDS     R4,R4,#+56
   \   000000F2   0648               LDR      R0,??WizFiCommand_AT_NSET_4+0x4  ;; g_counter
   \   000000F4   0CC8               LDM      R0!,{R2,R3}
   \   000000F6   0648               LDR      R0,??WizFiCommand_AT_NSET_4+0x8  ;; 0x2710
   \   000000F8   0021               MOVS     R1,#+0
   \   000000FA   8018               ADDS     R0,R0,R2
   \   000000FC   5941               ADCS     R1,R1,R3
   \   000000FE   03C4               STM      R4!,{R0,R1}
    229          }
   \   00000100   F8BC               POP      {R3-R7}
   \   00000102   01BC               POP      {R0}
   \   00000104   0047               BX       R0               ;; return
   \   00000106   C046               Nop      
   \                     ??WizFiCommand_AT_NSET_4:
   \   00000108   ........           DC32     AT_NSET
   \   0000010C   ........           DC32     g_counter
   \   00000110   10270000           DC32     0x2710
    230          

   \                                 In section Debug.txt, align 4, keep-with-next
    231          char WizFiResponseCommand_AT_NSET(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    232          {
   \                     WizFiResponseCommand_AT_NSET:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    233             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    234             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_NSET_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_NSET_1
    235                  {
    236                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    237                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NSET_2
   \                     ??WizFiResponseCommand_AT_NSET_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NSET_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NSET_3
    238                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_NSET_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_NSET_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    239                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    240                  }
    241             return odp;
   \                     ??WizFiResponseCommand_AT_NSET_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_NSET_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    242          }
    243          
    244          
    245          
    246          
    247          
    248          
    249          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    250          void WizFiCommand_AT_WWEP1(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    251          {
   \                     WizFiCommand_AT_WWEP1:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    252                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_WWEP1_0
   \                     ??WizFiCommand_AT_WWEP1_1:
   \   0000000E   1600               MOVS     R6,R2
   \   00000010   EE54               STRB     R6,[R5, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WWEP1_0:
   \   00000018   9126               MOVS     R6,#+145
   \   0000001A   B600               LSLS     R6,R6,#+2        ;; #+580
   \   0000001C   B342               CMP      R3,R6
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_WWEP1_1
    253                     Net->Status.CurrentOrder=WizFi_AT_WWEP1;
   \   00000020   0623               MOVS     R3,#+6
   \   00000022   A370               STRB     R3,[R4, #+2]
    254                     char BTS=0;
   \   00000024   1300               MOVS     R3,R2
    255                     for (char i=0; i<sizeof(AT_WWEP1); i++)  {Buff_TX[i]=AT_WWEP1[i];   BTS++;}
   \   00000026   1500               MOVS     R5,R2
   \   00000028   07E0               B        ??WizFiCommand_AT_WWEP1_2
   \                     ??WizFiCommand_AT_WWEP1_3:
   \   0000002A   2E00               MOVS     R6,R5
   \   0000002C   1A4F               LDR      R7,??WizFiCommand_AT_WWEP1_4  ;; AT_WWEP1
   \   0000002E   BF5D               LDRB     R7,[R7, R6]
   \   00000030   8F55               STRB     R7,[R1, R6]
   \   00000032   5B1C               ADDS     R3,R3,#+1
   \   00000034   1B06               LSLS     R3,R3,#+24
   \   00000036   1B0E               LSRS     R3,R3,#+24
   \   00000038   6D1C               ADDS     R5,R5,#+1
   \                     ??WizFiCommand_AT_WWEP1_2:
   \   0000003A   0A2D               CMP      R5,#+10
   \   0000003C   F5D3               BCC      ??WizFiCommand_AT_WWEP1_3
    256                     BTS--;
   \   0000003E   5B1E               SUBS     R3,R3,#+1
   \   00000040   1B06               LSLS     R3,R3,#+24
   \   00000042   1B0E               LSRS     R3,R3,#+24
    257                     char PassN=0;
   \   00000044   06E0               B        ??WizFiCommand_AT_WWEP1_5
    258                     while ((Net->WiFi.Key[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Key[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WWEP1_6:
   \   00000046   1F00               MOVS     R7,R3
   \   00000048   BE19               ADDS     R6,R7,R6
   \   0000004A   2D78               LDRB     R5,[R5, #+0]
   \   0000004C   8D55               STRB     R5,[R1, R6]
   \   0000004E   521C               ADDS     R2,R2,#+1
   \   00000050   1206               LSLS     R2,R2,#+24
   \   00000052   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WWEP1_5:
   \   00000054   1600               MOVS     R6,R2
   \   00000056   A519               ADDS     R5,R4,R6
   \   00000058   9735               ADDS     R5,R5,#+151
   \   0000005A   2F78               LDRB     R7,[R5, #+0]
   \   0000005C   002F               CMP      R7,#+0
   \   0000005E   02D0               BEQ      ??WizFiCommand_AT_WWEP1_7
   \   00000060   1700               MOVS     R7,R2
   \   00000062   102F               CMP      R7,#+16
   \   00000064   EFD3               BCC      ??WizFiCommand_AT_WWEP1_6
    259                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WWEP1_7:
   \   00000066   1D00               MOVS     R5,R3
   \   00000068   AB19               ADDS     R3,R5,R6
   \   0000006A   0D26               MOVS     R6,#+13
   \   0000006C   CE54               STRB     R6,[R1, R3]
    260                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke  
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000006E   82B0               SUB      SP,SP,#+8
   \   00000070   0023               MOVS     R3,#+0
   \   00000072   0093               STR      R3,[SP, #+0]
   \   00000074   521C               ADDS     R2,R2,#+1
   \   00000076   1206               LSLS     R2,R2,#+24
   \   00000078   120E               LSRS     R2,R2,#+24
   \   0000007A   AA18               ADDS     R2,R5,R2
   \   0000007C   ........           BL       AT91F_US_SendFrame
   \   00000080   02B0               ADD      SP,SP,#+8
    261                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000082   3834               ADDS     R4,R4,#+56
   \   00000084   0548               LDR      R0,??WizFiCommand_AT_WWEP1_4+0x4  ;; g_counter
   \   00000086   0CC8               LDM      R0!,{R2,R3}
   \   00000088   0548               LDR      R0,??WizFiCommand_AT_WWEP1_4+0x8  ;; 0x2710
   \   0000008A   0021               MOVS     R1,#+0
   \   0000008C   8018               ADDS     R0,R0,R2
   \   0000008E   5941               ADCS     R1,R1,R3
   \   00000090   03C4               STM      R4!,{R0,R1}
    262          }
   \   00000092   F8BC               POP      {R3-R7}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WWEP1_4:
   \   00000098   ........           DC32     AT_WWEP1
   \   0000009C   ........           DC32     g_counter
   \   000000A0   10270000           DC32     0x2710
    263          

   \                                 In section Debug.txt, align 4, keep-with-next
    264          char WizFiResponseCommand_AT_WWEP1(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    265          {
   \                     WizFiResponseCommand_AT_WWEP1:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    266             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    267             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_WWEP1_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_WWEP1_1
    268                  {
    269                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    270                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WWEP1_2
   \                     ??WizFiResponseCommand_AT_WWEP1_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WWEP1_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WWEP1_3
    271                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_WWEP1_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_WWEP1_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    272                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    273                  }
    274             return odp;
   \                     ??WizFiResponseCommand_AT_WWEP1_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WWEP1_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    275          }
    276          
    277          
    278          
    279          
    280          
    281          
    282          
    283          
    284          
    285          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    286          void WizFiCommand_AT_WWPA(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    287          {
   \                     WizFiCommand_AT_WWPA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    288                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_WWPA_0
   \                     ??WizFiCommand_AT_WWPA_1:
   \   0000000E   1600               MOVS     R6,R2
   \   00000010   EE54               STRB     R6,[R5, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WWPA_0:
   \   00000018   9126               MOVS     R6,#+145
   \   0000001A   B600               LSLS     R6,R6,#+2        ;; #+580
   \   0000001C   B342               CMP      R3,R6
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_WWPA_1
    289                     Net->Status.CurrentOrder=WizFi_AT_WWPA;
   \   00000020   0723               MOVS     R3,#+7
   \   00000022   A370               STRB     R3,[R4, #+2]
    290                     char BTS=0;
   \   00000024   1300               MOVS     R3,R2
    291                     for (char i=0; i<sizeof(AT_WWPA); i++)  {Buff_TX[i]=AT_WWPA[i];   BTS++;}
   \   00000026   1500               MOVS     R5,R2
   \   00000028   07E0               B        ??WizFiCommand_AT_WWPA_2
   \                     ??WizFiCommand_AT_WWPA_3:
   \   0000002A   2E00               MOVS     R6,R5
   \   0000002C   1A4F               LDR      R7,??WizFiCommand_AT_WWPA_4  ;; AT_WWPA
   \   0000002E   BF5D               LDRB     R7,[R7, R6]
   \   00000030   8F55               STRB     R7,[R1, R6]
   \   00000032   5B1C               ADDS     R3,R3,#+1
   \   00000034   1B06               LSLS     R3,R3,#+24
   \   00000036   1B0E               LSRS     R3,R3,#+24
   \   00000038   6D1C               ADDS     R5,R5,#+1
   \                     ??WizFiCommand_AT_WWPA_2:
   \   0000003A   092D               CMP      R5,#+9
   \   0000003C   F5D3               BCC      ??WizFiCommand_AT_WWPA_3
    292                     BTS--;
   \   0000003E   5B1E               SUBS     R3,R3,#+1
   \   00000040   1B06               LSLS     R3,R3,#+24
   \   00000042   1B0E               LSRS     R3,R3,#+24
    293                     char PassN=0;
   \   00000044   06E0               B        ??WizFiCommand_AT_WWPA_5
    294                     while ((Net->WiFi.Key[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Key[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WWPA_6:
   \   00000046   1F00               MOVS     R7,R3
   \   00000048   BE19               ADDS     R6,R7,R6
   \   0000004A   2D78               LDRB     R5,[R5, #+0]
   \   0000004C   8D55               STRB     R5,[R1, R6]
   \   0000004E   521C               ADDS     R2,R2,#+1
   \   00000050   1206               LSLS     R2,R2,#+24
   \   00000052   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WWPA_5:
   \   00000054   1600               MOVS     R6,R2
   \   00000056   A519               ADDS     R5,R4,R6
   \   00000058   9735               ADDS     R5,R5,#+151
   \   0000005A   2F78               LDRB     R7,[R5, #+0]
   \   0000005C   002F               CMP      R7,#+0
   \   0000005E   02D0               BEQ      ??WizFiCommand_AT_WWPA_7
   \   00000060   1700               MOVS     R7,R2
   \   00000062   102F               CMP      R7,#+16
   \   00000064   EFD3               BCC      ??WizFiCommand_AT_WWPA_6
    295                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WWPA_7:
   \   00000066   1D00               MOVS     R5,R3
   \   00000068   AB19               ADDS     R3,R5,R6
   \   0000006A   0D26               MOVS     R6,#+13
   \   0000006C   CE54               STRB     R6,[R1, R3]
    296          
    297                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000006E   82B0               SUB      SP,SP,#+8
   \   00000070   0023               MOVS     R3,#+0
   \   00000072   0093               STR      R3,[SP, #+0]
   \   00000074   521C               ADDS     R2,R2,#+1
   \   00000076   1206               LSLS     R2,R2,#+24
   \   00000078   120E               LSRS     R2,R2,#+24
   \   0000007A   AA18               ADDS     R2,R5,R2
   \   0000007C   ........           BL       AT91F_US_SendFrame
   \   00000080   02B0               ADD      SP,SP,#+8
    298                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000082   3834               ADDS     R4,R4,#+56
   \   00000084   0548               LDR      R0,??WizFiCommand_AT_WWPA_4+0x4  ;; g_counter
   \   00000086   0CC8               LDM      R0!,{R2,R3}
   \   00000088   0548               LDR      R0,??WizFiCommand_AT_WWPA_4+0x8  ;; 0x2710
   \   0000008A   0021               MOVS     R1,#+0
   \   0000008C   8018               ADDS     R0,R0,R2
   \   0000008E   5941               ADCS     R1,R1,R3
   \   00000090   03C4               STM      R4!,{R0,R1}
    299          }
   \   00000092   F8BC               POP      {R3-R7}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WWPA_4:
   \   00000098   ........           DC32     AT_WWPA
   \   0000009C   ........           DC32     g_counter
   \   000000A0   10270000           DC32     0x2710
    300          

   \                                 In section Debug.txt, align 4, keep-with-next
    301          char WizFiResponseCommand_AT_WWPA(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    302          {
   \                     WizFiResponseCommand_AT_WWPA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    303             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    304             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_WWPA_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_WWPA_1
    305                  {
    306                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    307                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WWPA_2
   \                     ??WizFiResponseCommand_AT_WWPA_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WWPA_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WWPA_3
    308                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_WWPA_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_WWPA_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    309                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    310                  }
    311             return odp;
   \                     ??WizFiResponseCommand_AT_WWPA_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WWPA_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    312          }
    313          
    314          
    315          
    316          
    317          
    318          
    319          
    320          
    321          //³¹czenie z accespointem ------------------------------------------------------
    322          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    323          void WizFiCommand_AT_WA(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    324          {
   \                     WizFiCommand_AT_WA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    325               if (Net->WiFi.SSID[0]!=0)
   \   00000008   A622               MOVS     R2,#+166
   \   0000000A   A25C               LDRB     R2,[R4, R2]
   \   0000000C   002A               CMP      R2,#+0
   \   0000000E   44D0               BEQ      ??WizFiCommand_AT_WA_0
    326               {
    327                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000010   0022               MOVS     R2,#+0
   \   00000012   1300               MOVS     R3,R2
   \   00000014   04E0               B        ??WizFiCommand_AT_WA_1
   \                     ??WizFiCommand_AT_WA_2:
   \   00000016   1600               MOVS     R6,R2
   \   00000018   EE54               STRB     R6,[R5, R3]
   \   0000001A   5B1C               ADDS     R3,R3,#+1
   \   0000001C   1B04               LSLS     R3,R3,#+16
   \   0000001E   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WA_1:
   \   00000020   9126               MOVS     R6,#+145
   \   00000022   B600               LSLS     R6,R6,#+2        ;; #+580
   \   00000024   B342               CMP      R3,R6
   \   00000026   F6DB               BLT      ??WizFiCommand_AT_WA_2
    328                     Net->Status.CurrentOrder=WizFi_AT_WA;
   \   00000028   0823               MOVS     R3,#+8
   \   0000002A   A370               STRB     R3,[R4, #+2]
    329          
    330                     char BTS=0;
   \   0000002C   1300               MOVS     R3,R2
    331                     for (char i=0; i<sizeof(AT_WA); i++)  {Buff_TX[i]=AT_WA[i];   BTS++;}
   \   0000002E   1500               MOVS     R5,R2
   \   00000030   07E0               B        ??WizFiCommand_AT_WA_3
   \                     ??WizFiCommand_AT_WA_4:
   \   00000032   2E00               MOVS     R6,R5
   \   00000034   1A4F               LDR      R7,??WizFiCommand_AT_WA_5  ;; AT_WA
   \   00000036   BF5D               LDRB     R7,[R7, R6]
   \   00000038   8F55               STRB     R7,[R1, R6]
   \   0000003A   5B1C               ADDS     R3,R3,#+1
   \   0000003C   1B06               LSLS     R3,R3,#+24
   \   0000003E   1B0E               LSRS     R3,R3,#+24
   \   00000040   6D1C               ADDS     R5,R5,#+1
   \                     ??WizFiCommand_AT_WA_3:
   \   00000042   072D               CMP      R5,#+7
   \   00000044   F5D3               BCC      ??WizFiCommand_AT_WA_4
    332                     BTS--;
   \   00000046   5B1E               SUBS     R3,R3,#+1
   \   00000048   1B06               LSLS     R3,R3,#+24
   \   0000004A   1B0E               LSRS     R3,R3,#+24
    333                     char PassN=0;
   \   0000004C   06E0               B        ??WizFiCommand_AT_WA_6
    334                     while ((Net->WiFi.SSID[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.SSID[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WA_7:
   \   0000004E   1F00               MOVS     R7,R3
   \   00000050   BE19               ADDS     R6,R7,R6
   \   00000052   2D78               LDRB     R5,[R5, #+0]
   \   00000054   8D55               STRB     R5,[R1, R6]
   \   00000056   521C               ADDS     R2,R2,#+1
   \   00000058   1206               LSLS     R2,R2,#+24
   \   0000005A   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WA_6:
   \   0000005C   1600               MOVS     R6,R2
   \   0000005E   A519               ADDS     R5,R4,R6
   \   00000060   A635               ADDS     R5,R5,#+166
   \   00000062   2F78               LDRB     R7,[R5, #+0]
   \   00000064   002F               CMP      R7,#+0
   \   00000066   02D0               BEQ      ??WizFiCommand_AT_WA_8
   \   00000068   1700               MOVS     R7,R2
   \   0000006A   102F               CMP      R7,#+16
   \   0000006C   EFD3               BCC      ??WizFiCommand_AT_WA_7
    335                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WA_8:
   \   0000006E   1D00               MOVS     R5,R3
   \   00000070   AB19               ADDS     R3,R5,R6
   \   00000072   0D26               MOVS     R6,#+13
   \   00000074   CE54               STRB     R6,[R1, R3]
    336                     
    337                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000076   82B0               SUB      SP,SP,#+8
   \   00000078   0023               MOVS     R3,#+0
   \   0000007A   0093               STR      R3,[SP, #+0]
   \   0000007C   521C               ADDS     R2,R2,#+1
   \   0000007E   1206               LSLS     R2,R2,#+24
   \   00000080   120E               LSRS     R2,R2,#+24
   \   00000082   AA18               ADDS     R2,R5,R2
   \   00000084   ........           BL       AT91F_US_SendFrame
   \   00000088   02B0               ADD      SP,SP,#+8
    338                     Net->Status.Timeout=g_counter + AP_CONNECT_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000008A   3834               ADDS     R4,R4,#+56
   \   0000008C   0548               LDR      R0,??WizFiCommand_AT_WA_5+0x4  ;; g_counter
   \   0000008E   0CC8               LDM      R0!,{R2,R3}
   \   00000090   0548               LDR      R0,??WizFiCommand_AT_WA_5+0x8  ;; 0x4e20
   \   00000092   0021               MOVS     R1,#+0
   \   00000094   8018               ADDS     R0,R0,R2
   \   00000096   5941               ADCS     R1,R1,R3
   \   00000098   03C4               STM      R4!,{R0,R1}
    339               }
    340          
    341          
    342          }
   \                     ??WizFiCommand_AT_WA_0:
   \   0000009A   F8BC               POP      {R3-R7}
   \   0000009C   01BC               POP      {R0}
   \   0000009E   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WA_5:
   \   000000A0   ........           DC32     AT_WA
   \   000000A4   ........           DC32     g_counter
   \   000000A8   204E0000           DC32     0x4e20
    343          

   \                                 In section Debug.txt, align 4, keep-with-next
    344          char WizFiResponseCommand_AT_WA(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    345          {
   \                     WizFiResponseCommand_AT_WA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    346             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    347             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   11A1               ADR      R1,??WizFiResponseCommand_AT_WA_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   18D0               BEQ      ??WizFiResponseCommand_AT_WA_1
    348                  {
    349                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    350                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WA_2
   \                     ??WizFiResponseCommand_AT_WA_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WA_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WA_3
    351                    
    352                    //Tu mo¿e byæ pobranie otrzymanego IP, Bramy, 
    353          
    354                    //---------------
    355                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0948               LDR      R0,??WizFiResponseCommand_AT_WA_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0848               LDR      R0,??WizFiResponseCommand_AT_WA_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    356                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    357                    
    358                    Net->Status.AccesPointAssociateTest=0xFF;           //dla testów ekranowych
   \   00000042   FF20               MOVS     R0,#+255
   \   00000044   2071               STRB     R0,[R4, #+4]
    359                  }
    360               
    361             return odp;
   \                     ??WizFiResponseCommand_AT_WA_1:
   \   00000046   3000               MOVS     R0,R6
   \   00000048   F8BC               POP      {R3-R7}
   \   0000004A   02BC               POP      {R1}
   \   0000004C   0847               BX       R1               ;; return
   \   0000004E   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WA_0:
   \   00000050   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000054   ........           DC32     g_counter
   \   00000058   10270000           DC32     0x2710
    362          }
    363          
    364          
    365          
    366          
    367          
    368          
    369          //Sprawdzenie czy w WiFi.Domena jest wpisana domena czy IP serwera domeny ------
    370          // odp: 0- domena
    371          // odp: 1 - IP
    372          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    373          char CheckExistDomenaIP(_Net *Net)
    374          {
   \                     CheckExistDomenaIP:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0100               MOVS     R1,R0
    375            char ExistIP=1;
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   1000               MOVS     R0,R2
    376          
    377            if ((Net->WiFi.Domena[0]<'0') && ((Net->WiFi.Domena[0]>'9'))) ExistIP=0;
   \   00000008   0B00               MOVS     R3,R1
   \   0000000A   B533               ADDS     R3,R3,#+181
   \   0000000C   1C78               LDRB     R4,[R3, #+0]
   \   0000000E   302C               CMP      R4,#+48
   \   00000010   0FD2               BCS      ??CheckExistDomenaIP_0
   \   00000012   2300               MOVS     R3,R4
   \   00000014   3A2B               CMP      R3,#+58
   \   00000016   0CD3               BCC      ??CheckExistDomenaIP_0
   \   00000018   0020               MOVS     R0,#+0
    378            
    379            char Size= sizeof(Net->WiFi.Domena);
    380            char Znak=1;
   \   0000001A   0AE0               B        ??CheckExistDomenaIP_0
    381            while ((Znak<Size) && (ExistIP==1)  && (Net->WiFi.Domena[Znak]>0) )  
    382            {
    383               if (((Net->WiFi.Domena[Znak]<'0') || (Net->WiFi.Domena[Znak]>'9')) && (Net->WiFi.Domena[Znak]!='.'))  ExistIP=0;
   \                     ??CheckExistDomenaIP_1:
   \   0000001C   302C               CMP      R4,#+48
   \   0000001E   01D3               BCC      ??CheckExistDomenaIP_2
   \   00000020   3A2C               CMP      R4,#+58
   \   00000022   03D3               BCC      ??CheckExistDomenaIP_3
   \                     ??CheckExistDomenaIP_2:
   \   00000024   2300               MOVS     R3,R4
   \   00000026   2E2B               CMP      R3,#+46
   \   00000028   00D0               BEQ      ??CheckExistDomenaIP_3
   \   0000002A   0020               MOVS     R0,#+0
    384            
    385               Znak++; 
   \                     ??CheckExistDomenaIP_3:
   \   0000002C   521C               ADDS     R2,R2,#+1
   \   0000002E   1206               LSLS     R2,R2,#+24
   \   00000030   120E               LSRS     R2,R2,#+24
    386            }
   \                     ??CheckExistDomenaIP_0:
   \   00000032   1300               MOVS     R3,R2
   \   00000034   0F2B               CMP      R3,#+15
   \   00000036   08D2               BCS      ??CheckExistDomenaIP_4
   \   00000038   0300               MOVS     R3,R0
   \   0000003A   012B               CMP      R3,#+1
   \   0000003C   05D1               BNE      ??CheckExistDomenaIP_4
   \   0000003E   1300               MOVS     R3,R2
   \   00000040   CB18               ADDS     R3,R1,R3
   \   00000042   B533               ADDS     R3,R3,#+181
   \   00000044   1C78               LDRB     R4,[R3, #+0]
   \   00000046   002C               CMP      R4,#+0
   \   00000048   E8D1               BNE      ??CheckExistDomenaIP_1
    387            
    388            //je¿eli w Net->WiFi.Domena wpisany jest IP tp przepisz do  Net->Status.DomenaIP
    389            if (ExistIP==1)
   \                     ??CheckExistDomenaIP_4:
   \   0000004A   0200               MOVS     R2,R0
   \   0000004C   012A               CMP      R2,#+1
   \   0000004E   1ED1               BNE      ??CheckExistDomenaIP_5
    390            {
    391              Znak=0;
   \   00000050   0023               MOVS     R3,#+0
   \   00000052   1A00               MOVS     R2,R3
    392              for (char i=0; i<Size; i++) Net->Status.DomenaIP[i]=0;
   \   00000054   1C00               MOVS     R4,R3
   \   00000056   1E00               MOVS     R6,R3
   \   00000058   04E0               B        ??CheckExistDomenaIP_6
   \                     ??CheckExistDomenaIP_7:
   \   0000005A   4D19               ADDS     R5,R1,R5
   \   0000005C   AE71               STRB     R6,[R5, #+6]
   \   0000005E   641C               ADDS     R4,R4,#+1
   \   00000060   2406               LSLS     R4,R4,#+24
   \   00000062   240E               LSRS     R4,R4,#+24
   \                     ??CheckExistDomenaIP_6:
   \   00000064   2500               MOVS     R5,R4
   \   00000066   0F2D               CMP      R5,#+15
   \   00000068   F7D3               BCC      ??CheckExistDomenaIP_7
    393              while ((Znak<Size) && (ExistIP)  && (Net->WiFi.Domena[Znak]>0))
   \                     ??CheckExistDomenaIP_8:
   \   0000006A   1300               MOVS     R3,R2
   \   0000006C   0F2B               CMP      R3,#+15
   \   0000006E   0ED2               BCS      ??CheckExistDomenaIP_5
   \   00000070   0300               MOVS     R3,R0
   \   00000072   0CD0               BEQ      ??CheckExistDomenaIP_5
   \   00000074   1300               MOVS     R3,R2
   \   00000076   CB18               ADDS     R3,R1,R3
   \   00000078   1C00               MOVS     R4,R3
   \   0000007A   B534               ADDS     R4,R4,#+181
   \   0000007C   2578               LDRB     R5,[R4, #+0]
   \   0000007E   002D               CMP      R5,#+0
   \   00000080   05D0               BEQ      ??CheckExistDomenaIP_5
    394              {
    395                Net->Status.DomenaIP[Znak]=Net->WiFi.Domena[Znak];
   \   00000082   2C00               MOVS     R4,R5
   \   00000084   9C71               STRB     R4,[R3, #+6]
    396                Znak++;
   \   00000086   521C               ADDS     R2,R2,#+1
   \   00000088   1206               LSLS     R2,R2,#+24
   \   0000008A   120E               LSRS     R2,R2,#+24
   \   0000008C   EDE7               B        ??CheckExistDomenaIP_8
    397              }
    398            }
    399            
    400            return ExistIP;
   \                     ??CheckExistDomenaIP_5:
   \   0000008E   70BC               POP      {R4-R6}
   \   00000090   02BC               POP      {R1}
   \   00000092   0847               BX       R1               ;; return
    401            
    402          }
    403          
    404          
    405          
    406          
    407          
    408          
    409          //Pobranie adresu domeny ------------------------------------------------------
    410          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    411          void WizFiCommand_AT_DNSLOOKUP(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    412          {
   \                     WizFiCommand_AT_DNSLOOKUP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0D00               MOVS     R5,R1
   \   00000004   1600               MOVS     R6,R2
   \   00000006   1C00               MOVS     R4,R3
    413                if (Net->WiFi.Domena[0]!=0)
   \   00000008   B521               MOVS     R1,#+181
   \   0000000A   615C               LDRB     R1,[R4, R1]
   \   0000000C   0029               CMP      R1,#+0
   \   0000000E   5AD0               BEQ      ??WizFiCommand_AT_DNSLOOKUP_0
    414                {
    415                    for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000010   0027               MOVS     R7,#+0
   \   00000012   3900               MOVS     R1,R7
   \   00000014   04E0               B        ??WizFiCommand_AT_DNSLOOKUP_1
   \                     ??WizFiCommand_AT_DNSLOOKUP_2:
   \   00000016   3A00               MOVS     R2,R7
   \   00000018   4254               STRB     R2,[R0, R1]
   \   0000001A   491C               ADDS     R1,R1,#+1
   \   0000001C   0904               LSLS     R1,R1,#+16
   \   0000001E   0914               ASRS     R1,R1,#+16
   \                     ??WizFiCommand_AT_DNSLOOKUP_1:
   \   00000020   9122               MOVS     R2,#+145
   \   00000022   9200               LSLS     R2,R2,#+2        ;; #+580
   \   00000024   9142               CMP      R1,R2
   \   00000026   F6DB               BLT      ??WizFiCommand_AT_DNSLOOKUP_2
    416                    if (CheckExistDomenaIP(Net)==0)                                                  //sprawdzenie czy w WiFi.Domena jest wpisana domena czy IP serwera domeny
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   ........           BL       CheckExistDomenaIP
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   3ED1               BNE      ??WizFiCommand_AT_DNSLOOKUP_3
    417                    {                                                                     //w WiFi.Domena jest wpisana domena
    418                       Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
   \   00000032   0920               MOVS     R0,#+9
   \   00000034   A070               STRB     R0,[R4, #+2]
    419            
    420                       char BTS=0;
   \   00000036   3800               MOVS     R0,R7
    421                       for (char i=0; i<sizeof(AT_DNSLOOKUP); i++)  {Buff_TX[i]=AT_DNSLOOKUP[i];   BTS++;}
   \   00000038   3900               MOVS     R1,R7
   \   0000003A   07E0               B        ??WizFiCommand_AT_DNSLOOKUP_4
   \                     ??WizFiCommand_AT_DNSLOOKUP_5:
   \   0000003C   0A00               MOVS     R2,R1
   \   0000003E   234B               LDR      R3,??WizFiCommand_AT_DNSLOOKUP_6  ;; AT_DNSLOOKUP
   \   00000040   9B5C               LDRB     R3,[R3, R2]
   \   00000042   AB54               STRB     R3,[R5, R2]
   \   00000044   401C               ADDS     R0,R0,#+1
   \   00000046   0006               LSLS     R0,R0,#+24
   \   00000048   000E               LSRS     R0,R0,#+24
   \   0000004A   491C               ADDS     R1,R1,#+1
   \                     ??WizFiCommand_AT_DNSLOOKUP_4:
   \   0000004C   0E29               CMP      R1,#+14
   \   0000004E   F5D3               BCC      ??WizFiCommand_AT_DNSLOOKUP_5
    422                       BTS--;
   \   00000050   401E               SUBS     R0,R0,#+1
   \   00000052   0006               LSLS     R0,R0,#+24
   \   00000054   000E               LSRS     R0,R0,#+24
    423                       char PassN=0;
   \   00000056   06E0               B        ??WizFiCommand_AT_DNSLOOKUP_7
    424                       while ((Net->WiFi.Domena[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Domena[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_DNSLOOKUP_8:
   \   00000058   0300               MOVS     R3,R0
   \   0000005A   5918               ADDS     R1,R3,R1
   \   0000005C   1278               LDRB     R2,[R2, #+0]
   \   0000005E   6A54               STRB     R2,[R5, R1]
   \   00000060   7F1C               ADDS     R7,R7,#+1
   \   00000062   3F06               LSLS     R7,R7,#+24
   \   00000064   3F0E               LSRS     R7,R7,#+24
   \                     ??WizFiCommand_AT_DNSLOOKUP_7:
   \   00000066   3900               MOVS     R1,R7
   \   00000068   6218               ADDS     R2,R4,R1
   \   0000006A   B532               ADDS     R2,R2,#+181
   \   0000006C   1378               LDRB     R3,[R2, #+0]
   \   0000006E   002B               CMP      R3,#+0
   \   00000070   02D0               BEQ      ??WizFiCommand_AT_DNSLOOKUP_9
   \   00000072   3B00               MOVS     R3,R7
   \   00000074   102B               CMP      R3,#+16
   \   00000076   EFD3               BCC      ??WizFiCommand_AT_DNSLOOKUP_8
    425                       Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_DNSLOOKUP_9:
   \   00000078   4118               ADDS     R1,R0,R1
   \   0000007A   0D22               MOVS     R2,#+13
   \   0000007C   6A54               STRB     R2,[R5, R1]
    426                   
    427                       AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000007E   82B0               SUB      SP,SP,#+8
   \   00000080   0021               MOVS     R1,#+0
   \   00000082   0091               STR      R1,[SP, #+0]
   \   00000084   0B00               MOVS     R3,R1
   \   00000086   7F1C               ADDS     R7,R7,#+1
   \   00000088   3F06               LSLS     R7,R7,#+24
   \   0000008A   3F0E               LSRS     R7,R7,#+24
   \   0000008C   C219               ADDS     R2,R0,R7
   \   0000008E   2900               MOVS     R1,R5
   \   00000090   3000               MOVS     R0,R6
   \   00000092   ........           BL       AT91F_US_SendFrame
   \   00000096   02B0               ADD      SP,SP,#+8
    428                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000098   2500               MOVS     R5,R4
   \   0000009A   3835               ADDS     R5,R5,#+56
   \   0000009C   0C48               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x4  ;; g_counter
   \   0000009E   0CC8               LDM      R0!,{R2,R3}
   \   000000A0   0C48               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x8  ;; 0x2710
   \   000000A2   0021               MOVS     R1,#+0
   \   000000A4   8018               ADDS     R0,R0,R2
   \   000000A6   5941               ADCS     R1,R1,R3
   \   000000A8   03C5               STM      R5!,{R0,R1}
    429                       Net->Status.NextHttpOrder=HTTP_GET_Config;
   \   000000AA   1020               MOVS     R0,#+16
   \   000000AC   E070               STRB     R0,[R4, #+3]
   \   000000AE   0AE0               B        ??WizFiCommand_AT_DNSLOOKUP_0
    430                    }
    431                    else                                                                  //je¿eli w WiFi.Domena jest wpisany IP serwera domeny
    432                    {
    433                       Net->Status.AccesPointAssociate=CONNECTED;    
   \                     ??WizFiCommand_AT_DNSLOOKUP_3:
   \   000000B0   0320               MOVS     R0,#+3
   \   000000B2   2070               STRB     R0,[R4, #+0]
    434                       Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   000000B4   A770               STRB     R7,[R4, #+2]
    435                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   000000B6   3834               ADDS     R4,R4,#+56
   \   000000B8   0548               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x4  ;; g_counter
   \   000000BA   0CC8               LDM      R0!,{R2,R3}
   \   000000BC   0548               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x8  ;; 0x2710
   \   000000BE   3900               MOVS     R1,R7
   \   000000C0   8018               ADDS     R0,R0,R2
   \   000000C2   5941               ADCS     R1,R1,R3
   \   000000C4   03C4               STM      R4!,{R0,R1}
    436                    }
    437                    
    438                }
    439          }
   \                     ??WizFiCommand_AT_DNSLOOKUP_0:
   \   000000C6   F8BC               POP      {R3-R7}
   \   000000C8   01BC               POP      {R0}
   \   000000CA   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_DNSLOOKUP_6:
   \   000000CC   ........           DC32     AT_DNSLOOKUP
   \   000000D0   ........           DC32     g_counter
   \   000000D4   10270000           DC32     0x2710
    440          
    441          
    442          
    443          /*
    444          //Pobranie adresu domeny ------------------------------------------------------
    445          //------------------------------------------------------------------------------
    446          void WizFiCommand_AT_DNSLOOKUP(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    447          {
    448                       Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
    449            
    450                       char BTS=0;
    451                       for (char i=0; i<sizeof(AT_DNSLOOKUP); i++)  {Buff_TX[i]=AT_DNSLOOKUP[i];   BTS++;}
    452                       BTS--;
    453                       char PassN=0;
    454                       while ((Net->WiFi.Domena[PassN]>0) && (PassN<=25)) {Buff_TX[BTS+PassN]=Net->WiFi.Domena[PassN]; PassN++;}
    455                       Buff_TX[BTS+PassN++]=0x0d;
    456                   
    457                       AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
    458                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
    459                       Net->Status.NextHttpOrder=HTTP_GET_Config;
    460          }
    461          */
    462          
    463          

   \                                 In section Debug.txt, align 4, keep-with-next
    464          char WizFiResponseCommand_AT_DNSLOOKUP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    465          {
   \                     WizFiResponseCommand_AT_DNSLOOKUP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   1C00               MOVS     R4,R3
    466             char odp=0;
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   2E00               MOVS     R6,R5
    467             char *pTxt;
    468             
    469             pTxt=strstr(Buff_RX, "IP:");
   \   00000008   1DA1               ADR      R1,??WizFiResponseCommand_AT_DNSLOOKUP_0  ;; "IP:"
   \   0000000A   ........           BL       strstr
   \   0000000E   0700               MOVS     R7,R0
    470             if((strstr(Buff_RX, "OK")!=NULL) && (pTxt!=NULL))
   \   00000010   1CA1               ADR      R1,??WizFiResponseCommand_AT_DNSLOOKUP_0+0x4  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   ........           BL       strstr
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   2CD0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_1
   \   0000001C   002F               CMP      R7,#+0
   \   0000001E   2AD0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_1
    471                  {
    472                    odp=1;  //ok 
   \   00000020   0126               MOVS     R6,#+1
    473                    
    474                    Net->Status.AccesPointAssociate=CONNECTED;    
   \   00000022   0320               MOVS     R0,#+3
   \   00000024   2070               STRB     R0,[R4, #+0]
    475                    Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   00000026   2800               MOVS     R0,R5
   \   00000028   A070               STRB     R0,[R4, #+2]
    476                      
    477                    pTxt+=3;
   \   0000002A   FF1C               ADDS     R7,R7,#+3
    478                    char p=0;
   \   0000002C   06E0               B        ??WizFiResponseCommand_AT_DNSLOOKUP_2
    479                    while ((*pTxt!=0x0d) && (p<=15))  {Net->Status.DomenaIP[p++]=*pTxt; pTxt++;}
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_3:
   \   0000002E   6118               ADDS     R1,R4,R1
   \   00000030   3A78               LDRB     R2,[R7, #+0]
   \   00000032   8A71               STRB     R2,[R1, #+6]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   0006               LSLS     R0,R0,#+24
   \   00000038   000E               LSRS     R0,R0,#+24
   \   0000003A   7F1C               ADDS     R7,R7,#+1
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_2:
   \   0000003C   3978               LDRB     R1,[R7, #+0]
   \   0000003E   0D29               CMP      R1,#+13
   \   00000040   02D0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_4
   \   00000042   0100               MOVS     R1,R0
   \   00000044   1029               CMP      R1,#+16
   \   00000046   F2D3               BCC      ??WizFiResponseCommand_AT_DNSLOOKUP_3
    480                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_4:
   \   00000048   2700               MOVS     R7,R4
   \   0000004A   3837               ADDS     R7,R7,#+56
   \   0000004C   0E48               LDR      R0,??WizFiResponseCommand_AT_DNSLOOKUP_0+0x8  ;; g_counter
   \   0000004E   03C8               LDM      R0!,{R0,R1}
   \   00000050   0200               MOVS     R2,R0
   \   00000052   0B00               MOVS     R3,R1
   \   00000054   0D48               LDR      R0,??WizFiResponseCommand_AT_DNSLOOKUP_0+0xC  ;; 0x2710
   \   00000056   2900               MOVS     R1,R5
   \   00000058   8018               ADDS     R0,R0,R2
   \   0000005A   5941               ADCS     R1,R1,R3
   \   0000005C   03C7               STM      R7!,{R0,R1}
    481                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   0000005E   2800               MOVS     R0,R5
   \   00000060   2B00               MOVS     R3,R5
   \   00000062   04E0               B        ??WizFiResponseCommand_AT_DNSLOOKUP_5
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_6:
   \   00000064   009A               LDR      R2,[SP, #+0]
   \   00000066   5354               STRB     R3,[R2, R1]
   \   00000068   401C               ADDS     R0,R0,#+1
   \   0000006A   0006               LSLS     R0,R0,#+24
   \   0000006C   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_5:
   \   0000006E   0100               MOVS     R1,R0
   \   00000070   3229               CMP      R1,#+50
   \   00000072   F7D3               BCC      ??WizFiResponseCommand_AT_DNSLOOKUP_6
    482                    Net->Status.Error=0;
   \   00000074   6575               STRB     R5,[R4, #+21]
    483                  }
    484               
    485             return odp;
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_1:
   \   00000076   3000               MOVS     R0,R6
   \   00000078   F8BC               POP      {R3-R7}
   \   0000007A   02BC               POP      {R1}
   \   0000007C   0847               BX       R1               ;; return
   \   0000007E   C046               Nop      
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_0:
   \   00000080   49503A00           DC8      "IP:"
   \   00000084   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000088   ........           DC32     g_counter
   \   0000008C   10270000           DC32     0x2710
    486          }
    487          
    488          
    489          
    490                         
    491          
    492          
    493          
    494          
    495          
    496          //Rozkaz po³¹czenia z hostem----------------------------------------------------
    497          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    498          void WizFiCommand_AT_NCTCP(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    499          {
   \                     WizFiCommand_AT_NCTCP:
   \   00000000   FCB5               PUSH     {R2-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0C00               MOVS     R4,R1
    500               if (Net->WiFi.Domena[0]!=0)
   \   00000006   1900               MOVS     R1,R3
   \   00000008   B531               ADDS     R1,R1,#+181
   \   0000000A   0191               STR      R1,[SP, #+4]
   \   0000000C   0978               LDRB     R1,[R1, #+0]
   \   0000000E   0029               CMP      R1,#+0
   \   00000010   00D1               BNE      .+4
   \   00000012   92E0               B        ??WizFiCommand_AT_NCTCP_0
    501               {
    502                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000014   0025               MOVS     R5,#+0
   \   00000016   2900               MOVS     R1,R5
   \   00000018   04E0               B        ??WizFiCommand_AT_NCTCP_1
   \                     ??WizFiCommand_AT_NCTCP_2:
   \   0000001A   2A00               MOVS     R2,R5
   \   0000001C   4254               STRB     R2,[R0, R1]
   \   0000001E   491C               ADDS     R1,R1,#+1
   \   00000020   0904               LSLS     R1,R1,#+16
   \   00000022   0914               ASRS     R1,R1,#+16
   \                     ??WizFiCommand_AT_NCTCP_1:
   \   00000024   9122               MOVS     R2,#+145
   \   00000026   9200               LSLS     R2,R2,#+2        ;; #+580
   \   00000028   9142               CMP      R1,R2
   \   0000002A   F6DB               BLT      ??WizFiCommand_AT_NCTCP_2
    503                     Net->Status.SendPacketTime=g_counter;
   \   0000002C   0498               LDR      R0,[SP, #+16]
   \   0000002E   2030               ADDS     R0,R0,#+32
   \   00000030   0090               STR      R0,[SP, #+0]
   \   00000032   444F               LDR      R7,??WizFiCommand_AT_NCTCP_3  ;; g_counter
   \   00000034   0200               MOVS     R2,R0
   \   00000036   03CF               LDM      R7!,{R0,R1}
   \   00000038   083F               SUBS     R7,R7,#+8
   \   0000003A   03C2               STM      R2!,{R0,R1}
    504                     Net->Status.HostLink=CONNECTING;
   \   0000003C   049E               LDR      R6,[SP, #+16]
   \   0000003E   761C               ADDS     R6,R6,#+1
   \   00000040   0220               MOVS     R0,#+2
   \   00000042   3070               STRB     R0,[R6, #+0]
    505                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000044   009A               LDR      R2,[SP, #+0]
   \   00000046   1832               ADDS     R2,R2,#+24
   \   00000048   9446               MOV      R12,R2
   \   0000004A   03CF               LDM      R7!,{R0,R1}
   \   0000004C   083F               SUBS     R7,R7,#+8
   \   0000004E   0200               MOVS     R2,R0
   \   00000050   0B00               MOVS     R3,R1
   \   00000052   3D48               LDR      R0,??WizFiCommand_AT_NCTCP_3+0x4  ;; 0x2710
   \   00000054   2900               MOVS     R1,R5
   \   00000056   8018               ADDS     R0,R0,R2
   \   00000058   5941               ADCS     R1,R1,R3
   \   0000005A   6246               MOV      R2,R12
   \   0000005C   03C2               STM      R2!,{R0,R1}
    506                     //Net->Status.HttpNextQueryTime=g_counter+100;   //rezerwa czasu pomiêdzy odpytaniami HTTP.
    507                     Net->Status.FreezTime=g_counter+FREEZ_TIME;
   \   0000005E   009A               LDR      R2,[SP, #+0]
   \   00000060   2032               ADDS     R2,R2,#+32
   \   00000062   03CF               LDM      R7!,{R0,R1}
   \   00000064   0023               MOVS     R3,#+0
   \   00000066   3230               ADDS     R0,R0,#+50
   \   00000068   5941               ADCS     R1,R1,R3
   \   0000006A   03C2               STM      R2!,{R0,R1}
    508                     
    509                     Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
   \   0000006C   0920               MOVS     R0,#+9
   \   0000006E   7070               STRB     R0,[R6, #+1]
    510                     
    511                     char BTS=0;
   \   00000070   2800               MOVS     R0,R5
    512                     for (char i=0; i<sizeof(AT_NCTCP); i++)  {Buff_TX[i]=AT_NCTCP[i];   BTS++;}
   \   00000072   2900               MOVS     R1,R5
   \   00000074   07E0               B        ??WizFiCommand_AT_NCTCP_4
   \                     ??WizFiCommand_AT_NCTCP_5:
   \   00000076   0A00               MOVS     R2,R1
   \   00000078   344B               LDR      R3,??WizFiCommand_AT_NCTCP_3+0x8  ;; AT_NCTCP
   \   0000007A   9B5C               LDRB     R3,[R3, R2]
   \   0000007C   A354               STRB     R3,[R4, R2]
   \   0000007E   401C               ADDS     R0,R0,#+1
   \   00000080   0006               LSLS     R0,R0,#+24
   \   00000082   000E               LSRS     R0,R0,#+24
   \   00000084   491C               ADDS     R1,R1,#+1
   \                     ??WizFiCommand_AT_NCTCP_4:
   \   00000086   0A29               CMP      R1,#+10
   \   00000088   F5D3               BCC      ??WizFiCommand_AT_NCTCP_5
    513                     BTS--;
   \   0000008A   401E               SUBS     R0,R0,#+1
   \   0000008C   0006               LSLS     R0,R0,#+24
   \   0000008E   000E               LSRS     R0,R0,#+24
    514                     char PN=0;
   \   00000090   2900               MOVS     R1,R5
    515                     if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) 
   \   00000092   019A               LDR      R2,[SP, #+4]
   \   00000094   D27B               LDRB     R2,[R2, #+15]
   \   00000096   302A               CMP      R2,#+48
   \   00000098   21D3               BCC      ??WizFiCommand_AT_NCTCP_6
   \   0000009A   019A               LDR      R2,[SP, #+4]
   \   0000009C   D27B               LDRB     R2,[R2, #+15]
   \   0000009E   7B2A               CMP      R2,#+123
   \   000000A0   1DD2               BCS      ??WizFiCommand_AT_NCTCP_6
   \   000000A2   06E0               B        ??WizFiCommand_AT_NCTCP_7
    516                     {
    517                       while ((Net->WiFi.Subdomena[PN]>0) && (PN<=15)) {Buff_TX[BTS+PN]=Net->WiFi.Subdomena[PN]; PN++;}
   \                     ??WizFiCommand_AT_NCTCP_8:
   \   000000A4   0600               MOVS     R6,R0
   \   000000A6   B218               ADDS     R2,R6,R2
   \   000000A8   1B78               LDRB     R3,[R3, #+0]
   \   000000AA   A354               STRB     R3,[R4, R2]
   \   000000AC   491C               ADDS     R1,R1,#+1
   \   000000AE   0906               LSLS     R1,R1,#+24
   \   000000B0   090E               LSRS     R1,R1,#+24
   \                     ??WizFiCommand_AT_NCTCP_7:
   \   000000B2   0A00               MOVS     R2,R1
   \   000000B4   049B               LDR      R3,[SP, #+16]
   \   000000B6   9B18               ADDS     R3,R3,R2
   \   000000B8   C433               ADDS     R3,R3,#+196
   \   000000BA   1E78               LDRB     R6,[R3, #+0]
   \   000000BC   002E               CMP      R6,#+0
   \   000000BE   02D0               BEQ      ??WizFiCommand_AT_NCTCP_9
   \   000000C0   0E00               MOVS     R6,R1
   \   000000C2   102E               CMP      R6,#+16
   \   000000C4   EED3               BCC      ??WizFiCommand_AT_NCTCP_8
    518                       Buff_TX[BTS+PN]='.';
   \                     ??WizFiCommand_AT_NCTCP_9:
   \   000000C6   0100               MOVS     R1,R0
   \   000000C8   8918               ADDS     R1,R1,R2
   \   000000CA   2E22               MOVS     R2,#+46
   \   000000CC   6254               STRB     R2,[R4, R1]
    519                     }
    520                     PN=0;
   \   000000CE   06E0               B        ??WizFiCommand_AT_NCTCP_6
    521                     while ((Net->Status.DomenaIP[PN]>0) && (PN<=15)) {Buff_TX[BTS+PN]=Net->Status.DomenaIP[PN]; PN++;}
   \                     ??WizFiCommand_AT_NCTCP_10:
   \   000000D0   0300               MOVS     R3,R0
   \   000000D2   5918               ADDS     R1,R3,R1
   \   000000D4   9279               LDRB     R2,[R2, #+6]
   \   000000D6   6254               STRB     R2,[R4, R1]
   \   000000D8   6D1C               ADDS     R5,R5,#+1
   \   000000DA   2D06               LSLS     R5,R5,#+24
   \   000000DC   2D0E               LSRS     R5,R5,#+24
   \                     ??WizFiCommand_AT_NCTCP_6:
   \   000000DE   2900               MOVS     R1,R5
   \   000000E0   049A               LDR      R2,[SP, #+16]
   \   000000E2   5218               ADDS     R2,R2,R1
   \   000000E4   9379               LDRB     R3,[R2, #+6]
   \   000000E6   002B               CMP      R3,#+0
   \   000000E8   02D0               BEQ      ??WizFiCommand_AT_NCTCP_11
   \   000000EA   2B00               MOVS     R3,R5
   \   000000EC   102B               CMP      R3,#+16
   \   000000EE   EFD3               BCC      ??WizFiCommand_AT_NCTCP_10
    522                     Buff_TX[BTS+PN++]=',';
   \                     ??WizFiCommand_AT_NCTCP_11:
   \   000000F0   4118               ADDS     R1,R0,R1
   \   000000F2   2C22               MOVS     R2,#+44
   \   000000F4   6254               STRB     R2,[R4, R1]
   \   000000F6   6D1C               ADDS     R5,R5,#+1
   \   000000F8   2D06               LSLS     R5,R5,#+24
   \   000000FA   2D0E               LSRS     R5,R5,#+24
    523                     Buff_TX[BTS+PN++]='8';
   \   000000FC   2900               MOVS     R1,R5
   \   000000FE   4118               ADDS     R1,R0,R1
   \   00000100   3822               MOVS     R2,#+56
   \   00000102   6254               STRB     R2,[R4, R1]
   \   00000104   6D1C               ADDS     R5,R5,#+1
   \   00000106   2D06               LSLS     R5,R5,#+24
   \   00000108   2D0E               LSRS     R5,R5,#+24
    524                     Buff_TX[BTS+PN++]='0';
   \   0000010A   2900               MOVS     R1,R5
   \   0000010C   4118               ADDS     R1,R0,R1
   \   0000010E   3022               MOVS     R2,#+48
   \   00000110   6254               STRB     R2,[R4, R1]
   \   00000112   6D1C               ADDS     R5,R5,#+1
   \   00000114   2D06               LSLS     R5,R5,#+24
   \   00000116   2D0E               LSRS     R5,R5,#+24
    525                     Buff_TX[BTS+PN++]=0x0d;
   \   00000118   2900               MOVS     R1,R5
   \   0000011A   4118               ADDS     R1,R0,R1
   \   0000011C   0D22               MOVS     R2,#+13
   \   0000011E   6254               STRB     R2,[R4, R1]
    526                    
    527                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PN,0, 0);                        //Wysyla ramke  otwieraj¹c¹ po³¹czenie 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000120   82B0               SUB      SP,SP,#+8
   \   00000122   0021               MOVS     R1,#+0
   \   00000124   0091               STR      R1,[SP, #+0]
   \   00000126   0B00               MOVS     R3,R1
   \   00000128   6D1C               ADDS     R5,R5,#+1
   \   0000012A   2D06               LSLS     R5,R5,#+24
   \   0000012C   2D0E               LSRS     R5,R5,#+24
   \   0000012E   4219               ADDS     R2,R0,R5
   \   00000130   2100               MOVS     R1,R4
   \   00000132   0598               LDR      R0,[SP, #+20]
   \   00000134   ........           BL       AT91F_US_SendFrame
   \   00000138   02B0               ADD      SP,SP,#+8
    528               }
    529          }
   \                     ??WizFiCommand_AT_NCTCP_0:
   \   0000013A   05B0               ADD      SP,SP,#+20
   \   0000013C   F0BC               POP      {R4-R7}
   \   0000013E   01BC               POP      {R0}
   \   00000140   0047               BX       R0               ;; return
   \   00000142   C046               Nop      
   \                     ??WizFiCommand_AT_NCTCP_3:
   \   00000144   ........           DC32     g_counter
   \   00000148   10270000           DC32     0x2710
   \   0000014C   ........           DC32     AT_NCTCP
    530          
    531          
    532          

   \                                 In section Debug.txt, align 4, keep-with-next
    533          char WizFiResponseCommand_AT_NCTCP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    534          {
   \                     WizFiResponseCommand_AT_NCTCP:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1C00               MOVS     R4,R3
    535             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   6846               MOV      R0,SP
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   0170               STRB     R1,[R0, #+0]
    536             char *pTxt;
    537             
    538             pTxt=strstr(Buff_RX, "[CONNECT");
   \   0000000E   314F               LDR      R7,??WizFiResponseCommand_AT_NCTCP_0  ;; `?<Constant "[CONNECT">`
   \   00000010   3900               MOVS     R1,R7
   \   00000012   3000               MOVS     R0,R6
   \   00000014   ........           BL       strstr
    539             if (pTxt!=NULL)
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   23D0               BEQ      ??WizFiResponseCommand_AT_NCTCP_1
    540                  {
    541                    odp=1;  //ok 
   \   0000001C   6946               MOV      R1,SP
   \   0000001E   0122               MOVS     R2,#+1
   \   00000020   0A70               STRB     R2,[R1, #+0]
    542                    pTxt+=9;
    543                    Net->Status.HostChannel=*pTxt;
   \   00000022   407A               LDRB     R0,[R0, #+9]
   \   00000024   A075               STRB     R0,[R4, #+22]
    544                    Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   00000026   2800               MOVS     R0,R5
   \   00000028   A070               STRB     R0,[R4, #+2]
    545                    
    546                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   2A48               LDR      R0,??WizFiResponseCommand_AT_NCTCP_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   2948               LDR      R0,??WizFiResponseCommand_AT_NCTCP_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    547                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000040   2800               MOVS     R0,R5
   \   00000042   2A00               MOVS     R2,R5
   \   00000044   03E0               B        ??WizFiResponseCommand_AT_NCTCP_2
   \                     ??WizFiResponseCommand_AT_NCTCP_3:
   \   00000046   7254               STRB     R2,[R6, R1]
   \   00000048   401C               ADDS     R0,R0,#+1
   \   0000004A   0006               LSLS     R0,R0,#+24
   \   0000004C   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCTCP_2:
   \   0000004E   0100               MOVS     R1,R0
   \   00000050   3229               CMP      R1,#+50
   \   00000052   F8D3               BCC      ??WizFiResponseCommand_AT_NCTCP_3
    548                    Net->Status.HostLink=CONNECTED;
   \   00000054   0320               MOVS     R0,#+3
   \   00000056   6070               STRB     R0,[R4, #+1]
    549                    Net->Status.FreezTime=0;
   \   00000058   1000               MOVS     R0,R2
   \   0000005A   0100               MOVS     R1,R0
   \   0000005C   2064               STR      R0,[R4, #+64]
   \   0000005E   6164               STR      R1,[R4, #+68]
    550                    Net->Status.Error=0;
   \   00000060   6575               STRB     R5,[R4, #+21]
   \   00000062   32E0               B        ??WizFiResponseCommand_AT_NCTCP_4
    551                  }else if (strstr(Buff_RX, "[ERROR")!=NULL)
   \                     ??WizFiResponseCommand_AT_NCTCP_1:
   \   00000064   3900               MOVS     R1,R7
   \   00000066   1431               ADDS     R1,R1,#+20
   \   00000068   3000               MOVS     R0,R6
   \   0000006A   ........           BL       strstr
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   2BD0               BEQ      ??WizFiResponseCommand_AT_NCTCP_4
    552                  {
    553                    if (strstr(Buff_RX, "NO CID]")!=NULL)
   \   00000072   0C37               ADDS     R7,R7,#+12
   \   00000074   3900               MOVS     R1,R7
   \   00000076   3000               MOVS     R0,R6
   \   00000078   ........           BL       strstr
   \   0000007C   0028               CMP      R0,#+0
   \   0000007E   13D0               BEQ      ??WizFiResponseCommand_AT_NCTCP_5
    554                    {
    555                      odp=0;
    556                      for (char i=0; i<50; i++) Buff_RX[i]=0;                     
   \   00000080   2800               MOVS     R0,R5
   \   00000082   2A00               MOVS     R2,R5
   \   00000084   03E0               B        ??WizFiResponseCommand_AT_NCTCP_6
   \                     ??WizFiResponseCommand_AT_NCTCP_7:
   \   00000086   7254               STRB     R2,[R6, R1]
   \   00000088   401C               ADDS     R0,R0,#+1
   \   0000008A   0006               LSLS     R0,R0,#+24
   \   0000008C   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCTCP_6:
   \   0000008E   0100               MOVS     R1,R0
   \   00000090   3229               CMP      R1,#+50
   \   00000092   F8D3               BCC      ??WizFiResponseCommand_AT_NCTCP_7
    557                      WizFiCommand_AT_NCLOSEALL(Buff_RX, Buff_TX, USART, Net);
   \   00000094   2300               MOVS     R3,R4
   \   00000096   029A               LDR      R2,[SP, #+8]
   \   00000098   0199               LDR      R1,[SP, #+4]
   \   0000009A   3000               MOVS     R0,R6
   \   0000009C   ........           BL       WizFiCommand_AT_NCLOSEALL
    558                      Net->Status.Error++;
   \   000000A0   607D               LDRB     R0,[R4, #+21]
   \   000000A2   401C               ADDS     R0,R0,#+1
   \   000000A4   6075               STRB     R0,[R4, #+21]
   \   000000A6   10E0               B        ??WizFiResponseCommand_AT_NCTCP_4
    559                    }else{
    560                      odp=0;
    561                      for (char i=0; i<50; i++) Buff_RX[i]=0;                    
   \                     ??WizFiResponseCommand_AT_NCTCP_5:
   \   000000A8   2A00               MOVS     R2,R5
   \   000000AA   03E0               B        ??WizFiResponseCommand_AT_NCTCP_8
   \                     ??WizFiResponseCommand_AT_NCTCP_9:
   \   000000AC   7254               STRB     R2,[R6, R1]
   \   000000AE   401C               ADDS     R0,R0,#+1
   \   000000B0   0006               LSLS     R0,R0,#+24
   \   000000B2   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCTCP_8:
   \   000000B4   0100               MOVS     R1,R0
   \   000000B6   3229               CMP      R1,#+50
   \   000000B8   F8D3               BCC      ??WizFiResponseCommand_AT_NCTCP_9
    562                      Net->Status.HostLink=DISCONNECTED;
   \   000000BA   6570               STRB     R5,[R4, #+1]
    563                      Net->Status.FreezTime=0;
   \   000000BC   1000               MOVS     R0,R2
   \   000000BE   0100               MOVS     R1,R0
   \   000000C0   2064               STR      R0,[R4, #+64]
   \   000000C2   6164               STR      R1,[R4, #+68]
    564                      
    565                      Net->Status.Error++;
   \   000000C4   607D               LDRB     R0,[R4, #+21]
   \   000000C6   401C               ADDS     R0,R0,#+1
   \   000000C8   6075               STRB     R0,[R4, #+21]
    566                    }
    567                    
    568                  }
    569                    
    570          
    571             return odp;
   \                     ??WizFiResponseCommand_AT_NCTCP_4:
   \   000000CA   6846               MOV      R0,SP
   \   000000CC   0078               LDRB     R0,[R0, #+0]
   \   000000CE   FEBC               POP      {R1-R7}
   \   000000D0   02BC               POP      {R1}
   \   000000D2   0847               BX       R1               ;; return
   \                     ??WizFiResponseCommand_AT_NCTCP_0:
   \   000000D4   ........           DC32     `?<Constant "[CONNECT">`
   \   000000D8   ........           DC32     g_counter
   \   000000DC   10270000           DC32     0x2710
    572          }
    573          
    574          
    575          
    576          
    577           
    578          
    579          
    580          
    581          //funkcja konwertuje napis na wartoæ short int --------------------------------
    582          // Txt  -wskanik na ci¹g
    583          // Cyfr -funkcja zwraca iloæ cyfr w ci¹gu
    584          // funkcja zwraca wartoæ short int

   \                                 In section Debug.txt, align 4, keep-with-next
    585          signed short int StrToWord(char *String, char *Cyfr)
    586          {
   \                     StrToWord:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
    587             char *Txt=String;
   \   00000002   0023               MOVS     R3,#+0
    588             char LiczbaTab[5];
    589             char IlCyfr=0;
    590             signed char Min=1;
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   1400               MOVS     R4,R2
   \   00000008   08E0               B        ??StrToWord_0
    591             
    592             while ((((*Txt>='0') && (*Txt<='9')) || (*Txt=='-')) && (IlCyfr<5))
    593             {
    594                if (*Txt=='-')
    595                {
    596                   Min=-1;
    597                }else{
    598                   LiczbaTab[IlCyfr++]=*Txt-48;
   \                     ??StrToWord_1:
   \   0000000A   1F00               MOVS     R7,R3
   \   0000000C   6D46               MOV      R5,SP
   \   0000000E   0678               LDRB     R6,[R0, #+0]
   \   00000010   303E               SUBS     R6,R6,#+48
   \   00000012   EE55               STRB     R6,[R5, R7]
   \   00000014   5B1C               ADDS     R3,R3,#+1
   \   00000016   1B06               LSLS     R3,R3,#+24
   \   00000018   1B0E               LSRS     R3,R3,#+24
    599                }
    600                *Txt++;
   \                     ??StrToWord_2:
   \   0000001A   401C               ADDS     R0,R0,#+1
   \                     ??StrToWord_0:
   \   0000001C   0578               LDRB     R5,[R0, #+0]
   \   0000001E   302D               CMP      R5,#+48
   \   00000020   01D3               BCC      ??StrToWord_3
   \   00000022   3A2D               CMP      R5,#+58
   \   00000024   01D3               BCC      ??StrToWord_4
   \                     ??StrToWord_3:
   \   00000026   2D2D               CMP      R5,#+45
   \   00000028   08D1               BNE      ??StrToWord_5
   \                     ??StrToWord_4:
   \   0000002A   1D00               MOVS     R5,R3
   \   0000002C   052D               CMP      R5,#+5
   \   0000002E   05D2               BCS      ??StrToWord_5
   \   00000030   0578               LDRB     R5,[R0, #+0]
   \   00000032   2D2D               CMP      R5,#+45
   \   00000034   E9D1               BNE      ??StrToWord_1
   \   00000036   0024               MOVS     R4,#+0
   \   00000038   E443               MVNS     R4,R4            ;; #-1
   \   0000003A   EEE7               B        ??StrToWord_2
    601             }
    602             *Cyfr=IlCyfr;
   \                     ??StrToWord_5:
   \   0000003C   1800               MOVS     R0,R3
   \   0000003E   0870               STRB     R0,[R1, #+0]
    603             
    604             int Mnoz=1;
    605             signed short int Wartosc=0; 
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   0CE0               B        ??StrToWord_6
    606             while (IlCyfr>0)
    607             {
    608                 Wartosc+=LiczbaTab[--IlCyfr]*Mnoz;
   \                     ??StrToWord_7:
   \   00000044   5B1E               SUBS     R3,R3,#+1
   \   00000046   1B06               LSLS     R3,R3,#+24
   \   00000048   1B0E               LSRS     R3,R3,#+24
   \   0000004A   1900               MOVS     R1,R3
   \   0000004C   6D46               MOV      R5,SP
   \   0000004E   695C               LDRB     R1,[R5, R1]
   \   00000050   1500               MOVS     R5,R2
   \   00000052   6943               MULS     R1,R5,R1
   \   00000054   4018               ADDS     R0,R0,R1
   \   00000056   0004               LSLS     R0,R0,#+16
   \   00000058   0014               ASRS     R0,R0,#+16
    609                 Mnoz*=10;
   \   0000005A   0A21               MOVS     R1,#+10
   \   0000005C   4A43               MULS     R2,R1,R2
    610             }
   \                     ??StrToWord_6:
   \   0000005E   1900               MOVS     R1,R3
   \   00000060   F0D1               BNE      ??StrToWord_7
    611             Wartosc*=Min;
    612             
    613             return Wartosc;
   \   00000062   6043               MULS     R0,R4,R0
   \   00000064   0004               LSLS     R0,R0,#+16
   \   00000066   0014               ASRS     R0,R0,#+16
   \   00000068   FEBC               POP      {R1-R7}
   \   0000006A   02BC               POP      {R1}
   \   0000006C   0847               BX       R1               ;; return
    614          }//_____________________________________________________________________________
    615          
    616          

   \                                 In section Debug.txt, align 4, keep-with-next
    617          unsigned short GetSpecialAnalogVar(char ZmSp)
    618          {
   \                     GetSpecialAnalogVar:
   \   00000000   01B5               PUSH     {R0,LR}
    619             char sc;
    620             
    621             if (ZmSp<ScreenNr)       //zmienne czujnika termostatu
   \   00000002   0828               CMP      R0,#+8
   \   00000004   1CD2               BCS      ??GetSpecialAnalogVar_0
    622             {
    623                  sc=ZmSp;
   \   00000006   1849               LDR      R1,??GetSpecialAnalogVar_1  ;; 0xbc27
   \   00000008   A022               MOVS     R2,#+160
   \   0000000A   5043               MULS     R0,R2,R0
   \   0000000C   174A               LDR      R2,??GetSpecialAnalogVar_1+0x4  ;; gProg
   \   0000000E   1018               ADDS     R0,R2,R0
   \   00000010   4118               ADDS     R1,R0,R1
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   0A56               LDRSB    R2,[R1, R0]
   \   00000016   002A               CMP      R2,#+0
   \   00000018   06D5               BPL      ??GetSpecialAnalogVar_2
    624                  if (gProg.Screen[sc].Thermo.SensorNode<0) //je¿eli zmienna
    625                     {
    626                       return VariablesAnal[gProg.Screen[sc].Thermo.SensorReg];
   \   0000001A   4878               LDRB     R0,[R1, #+1]
   \   0000001C   4000               LSLS     R0,R0,#+1
   \   0000001E   1449               LDR      R1,??GetSpecialAnalogVar_1+0x8  ;; VariablesAnal
   \   00000020   085E               LDRSH    R0,[R1, R0]
   \   00000022   0004               LSLS     R0,R0,#+16
   \   00000024   000C               LSRS     R0,R0,#+16
   \   00000026   1CE0               B        ??GetSpecialAnalogVar_3
    627                     }else{
    628                       return MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg];
   \                     ??GetSpecialAnalogVar_2:
   \   00000028   A020               MOVS     R0,#+160
   \   0000002A   4978               LDRB     R1,[R1, #+1]
   \   0000002C   4900               LSLS     R1,R1,#+1
   \   0000002E   1423               MOVS     R3,#+20
   \   00000030   5A43               MULS     R2,R3,R2
   \   00000032   104B               LDR      R3,??GetSpecialAnalogVar_1+0xC  ;; MainStage
   \   00000034   9A18               ADDS     R2,R3,R2
   \   00000036   5118               ADDS     R1,R2,R1
   \   00000038   085E               LDRSH    R0,[R1, R0]
   \   0000003A   0004               LSLS     R0,R0,#+16
   \   0000003C   000C               LSRS     R0,R0,#+16
   \   0000003E   10E0               B        ??GetSpecialAnalogVar_3
    629                     }
    630             }
    631             else if ((ZmSp>=10) && (ZmSp<10+ScreenNr))       //zmienne czujnika termostatu
   \                     ??GetSpecialAnalogVar_0:
   \   00000040   0A28               CMP      R0,#+10
   \   00000042   0DD3               BCC      ??GetSpecialAnalogVar_4
   \   00000044   1228               CMP      R0,#+18
   \   00000046   0BD2               BCS      ??GetSpecialAnalogVar_4
    632             {
    633                     sc=ZmSp-10;
    634                     return gProg.Screen[sc].Thermo.SetTemperature;
   \   00000048   0B49               LDR      R1,??GetSpecialAnalogVar_1+0x10  ;; 0xbc2e
   \   0000004A   0A38               SUBS     R0,R0,#+10
   \   0000004C   0006               LSLS     R0,R0,#+24
   \   0000004E   000E               LSRS     R0,R0,#+24
   \   00000050   A022               MOVS     R2,#+160
   \   00000052   5043               MULS     R0,R2,R0
   \   00000054   054A               LDR      R2,??GetSpecialAnalogVar_1+0x4  ;; gProg
   \   00000056   1018               ADDS     R0,R2,R0
   \   00000058   405E               LDRSH    R0,[R0, R1]
   \   0000005A   0004               LSLS     R0,R0,#+16
   \   0000005C   000C               LSRS     R0,R0,#+16
   \   0000005E   00E0               B        ??GetSpecialAnalogVar_3
    635              
    636             }
    637             return 0;
   \                     ??GetSpecialAnalogVar_4:
   \   00000060   0020               MOVS     R0,#+0
   \                     ??GetSpecialAnalogVar_3:
   \   00000062   08BC               POP      {R3}
   \   00000064   02BC               POP      {R1}
   \   00000066   0847               BX       R1               ;; return
   \                     ??GetSpecialAnalogVar_1:
   \   00000068   27BC0000           DC32     0xbc27
   \   0000006C   ........           DC32     gProg
   \   00000070   ........           DC32     VariablesAnal
   \   00000074   ........           DC32     MainStage
   \   00000078   2EBC0000           DC32     0xbc2e
    638            
    639          }
    640          
    641          

   \                                 In section Debug.txt, align 4, keep-with-next
    642          char GetSpecialBinarVar(char ZmSp)
    643          {
   \                     GetSpecialBinarVar:
   \   00000000   01B5               PUSH     {R0,LR}
    644             char sc;
    645            
    646             if (ZmSp<ScreenNr)       //zmienne  termostatu  AutoOn
   \   00000002   0828               CMP      R0,#+8
   \   00000004   06D2               BCS      ??GetSpecialBinarVar_0
    647             {
    648                  return gProg.Screen[ZmSp].Thermo.AutoOn;
   \   00000006   1549               LDR      R1,??GetSpecialBinarVar_1  ;; 0xbc26
   \   00000008   A022               MOVS     R2,#+160
   \   0000000A   5043               MULS     R0,R2,R0
   \   0000000C   144A               LDR      R2,??GetSpecialBinarVar_1+0x4  ;; gProg
   \   0000000E   1018               ADDS     R0,R2,R0
   \   00000010   405C               LDRB     R0,[R0, R1]
   \   00000012   20E0               B        ??GetSpecialBinarVar_2
    649             }
    650             else if ((ZmSp>=10) && (ZmSp<10+ScreenNr))       //zmienne  termostatu Temp. zad w AutoOn
   \                     ??GetSpecialBinarVar_0:
   \   00000014   0A28               CMP      R0,#+10
   \   00000016   1DD3               BCC      ??GetSpecialBinarVar_3
   \   00000018   1228               CMP      R0,#+18
   \   0000001A   1BD2               BCS      ??GetSpecialBinarVar_3
    651             {
    652                 sc=ZmSp-10;
   \   0000001C   0A38               SUBS     R0,R0,#+10
   \   0000001E   0006               LSLS     R0,R0,#+24
   \   00000020   000E               LSRS     R0,R0,#+24
   \   00000022   1049               LDR      R1,??GetSpecialBinarVar_1+0x8  ;; 0xbc2a
   \   00000024   A022               MOVS     R2,#+160
   \   00000026   5043               MULS     R0,R2,R0
   \   00000028   0D4A               LDR      R2,??GetSpecialBinarVar_1+0x4  ;; gProg
   \   0000002A   1018               ADDS     R0,R2,R0
   \   0000002C   4018               ADDS     R0,R0,R1
   \   0000002E   0221               MOVS     R1,#+2
   \   00000030   415E               LDRSH    R1,[R0, R1]
   \   00000032   0022               MOVS     R2,#+0
   \   00000034   825E               LDRSH    R2,[R0, R2]
   \   00000036   9142               CMP      R1,R2
   \   00000038   01DA               BGE      ??GetSpecialBinarVar_4
    653                char MaxTmp;
    654                if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    655                {
    656                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[0]; 
   \   0000003A   0188               LDRH     R1,[R0, #+0]
   \   0000003C   00E0               B        ??GetSpecialBinarVar_5
    657                }else{
    658                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[1];
   \                     ??GetSpecialBinarVar_4:
   \   0000003E   4188               LDRH     R1,[R0, #+2]
    659                }
    660                
    661                if (gProg.Screen[sc].Thermo.SetTemperature==MaxTmp)
   \                     ??GetSpecialBinarVar_5:
   \   00000040   0422               MOVS     R2,#+4
   \   00000042   805E               LDRSH    R0,[R0, R2]
   \   00000044   0906               LSLS     R1,R1,#+24
   \   00000046   090E               LSRS     R1,R1,#+24
   \   00000048   8842               CMP      R0,R1
   \   0000004A   01D1               BNE      ??GetSpecialBinarVar_6
    662                {
    663                 return 1;  
   \   0000004C   0120               MOVS     R0,#+1
   \   0000004E   02E0               B        ??GetSpecialBinarVar_2
    664                }else{
    665                 return 0;      
   \                     ??GetSpecialBinarVar_6:
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   00E0               B        ??GetSpecialBinarVar_2
    666                }     
    667                    
    668                  
    669             }
    670             
    671             return 0;
   \                     ??GetSpecialBinarVar_3:
   \   00000054   0020               MOVS     R0,#+0
   \                     ??GetSpecialBinarVar_2:
   \   00000056   08BC               POP      {R3}
   \   00000058   02BC               POP      {R1}
   \   0000005A   0847               BX       R1               ;; return
   \                     ??GetSpecialBinarVar_1:
   \   0000005C   26BC0000           DC32     0xbc26
   \   00000060   ........           DC32     gProg
   \   00000064   2ABC0000           DC32     0xbc2a
    672          }  
    673            
    674          
    675          
    676          
    677          

   \                                 In section Debug.txt, align 4, keep-with-next
    678          void SetSpecialBinarVar(char ZmSp, char Val, _Net *Net)
    679          {
   \                     SetSpecialBinarVar:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    680             char sc;
    681            
    682             if (ZmSp<ScreenNr)       //zmienne  termostatu  AutoOn
   \   00000002   0828               CMP      R0,#+8
   \   00000004   11D2               BCS      ??SetSpecialBinarVar_0
    683             {
    684                 
    685                 if (Val) gProg.Screen[ZmSp].Thermo.AutoOn=1; else gProg.Screen[ZmSp].Thermo.AutoOn=0;
   \   00000006   2F4B               LDR      R3,??SetSpecialBinarVar_1  ;; 0xbc26
   \   00000008   A024               MOVS     R4,#+160
   \   0000000A   6043               MULS     R0,R4,R0
   \   0000000C   2E4C               LDR      R4,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   0000000E   2018               ADDS     R0,R4,R0
   \   00000010   0C00               MOVS     R4,R1
   \   00000012   641E               SUBS     R4,R4,#+1
   \   00000014   A441               SBCS     R4,R4,R4
   \   00000016   E443               MVNS     R4,R4
   \   00000018   E40F               LSRS     R4,R4,#+31
   \   0000001A   C454               STRB     R4,[R0, R3]
    686                 Net->Status.NextHttpOrder=HTTP_POST;
   \                     ??SetSpecialBinarVar_2:
   \   0000001C   0E20               MOVS     R0,#+14
   \   0000001E   D070               STRB     R0,[R2, #+3]
    687                 MenuPaint();
   \   00000020   ........           BL       MenuPaint
    688                 
    689             }
    690             else if ((ZmSp>=10) && (ZmSp<10+ScreenNr))       //zmienne  termostatu Temp. zad w AutoOn
    691             {
    692                sc=ZmSp-10;
    693                char MaxTmp;
    694                char MinTmp;
    695                if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    696                {
    697                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    698                  MinTmp=gProg.Screen[sc].Thermo.Temperature[1];
    699                }else{
    700                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[1];
    701                  MinTmp=gProg.Screen[sc].Thermo.Temperature[0];
    702                }
    703                
    704                if (Val)
    705                {
    706                    gProg.Screen[sc].Thermo.SetTemperature=MaxTmp;
    707                }else{
    708                    gProg.Screen[sc].Thermo.SetTemperature=MinTmp; 
    709                }
    710                Net->Status.NextHttpOrder=HTTP_POST;
    711                MenuPaint();
    712             }else if ((ZmSp>=20) && (ZmSp<20+ScreenNr))       //zmienne  termostatu temp+ w trybie Auto
    713             {
    714                sc=ZmSp-20;
    715                if ((gProg.Screen[sc].Thermo.SetTemperature)<500) {gProg.Screen[sc].Thermo.SetTemperature++;}
    716                Net->Status.NextHttpOrder=HTTP_POST;
    717                MenuPaint();
    718             }else if ((ZmSp>=30) && (ZmSp<30+ScreenNr))       //zmienne  termostatu temp+ w trybie Auto
    719             {
    720                sc=ZmSp-30;
    721                if ((gProg.Screen[sc].Thermo.SetTemperature)>0) {gProg.Screen[sc].Thermo.SetTemperature--;}
    722                Net->Status.NextHttpOrder=HTTP_POST;
    723                MenuPaint();
    724             }
    725          
    726          }  
   \                     ??SetSpecialBinarVar_3:
   \   00000024   38BC               POP      {R3-R5}
   \   00000026   01BC               POP      {R0}
   \   00000028   0047               BX       R0               ;; return
   \                     ??SetSpecialBinarVar_0:
   \   0000002A   0A28               CMP      R0,#+10
   \   0000002C   1FD3               BCC      ??SetSpecialBinarVar_4
   \   0000002E   1228               CMP      R0,#+18
   \   00000030   1DD2               BCS      ??SetSpecialBinarVar_4
   \   00000032   0A38               SUBS     R0,R0,#+10
   \   00000034   0006               LSLS     R0,R0,#+24
   \   00000036   000E               LSRS     R0,R0,#+24
   \   00000038   234B               LDR      R3,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   0000003A   244C               LDR      R4,??SetSpecialBinarVar_1+0x8  ;; 0xbc2a
   \   0000003C   A025               MOVS     R5,#+160
   \   0000003E   6843               MULS     R0,R5,R0
   \   00000040   1818               ADDS     R0,R3,R0
   \   00000042   0019               ADDS     R0,R0,R4
   \   00000044   0223               MOVS     R3,#+2
   \   00000046   C35E               LDRSH    R3,[R0, R3]
   \   00000048   0024               MOVS     R4,#+0
   \   0000004A   045F               LDRSH    R4,[R0, R4]
   \   0000004C   A342               CMP      R3,R4
   \   0000004E   02DA               BGE      ??SetSpecialBinarVar_5
   \   00000050   0388               LDRH     R3,[R0, #+0]
   \   00000052   4488               LDRH     R4,[R0, #+2]
   \   00000054   01E0               B        ??SetSpecialBinarVar_6
   \                     ??SetSpecialBinarVar_5:
   \   00000056   4388               LDRH     R3,[R0, #+2]
   \   00000058   0488               LDRH     R4,[R0, #+0]
   \                     ??SetSpecialBinarVar_6:
   \   0000005A   0029               CMP      R1,#+0
   \   0000005C   03D0               BEQ      ??SetSpecialBinarVar_7
   \   0000005E   1B06               LSLS     R3,R3,#+24
   \   00000060   1B0E               LSRS     R3,R3,#+24
   \   00000062   8380               STRH     R3,[R0, #+4]
   \   00000064   DAE7               B        ??SetSpecialBinarVar_2
   \                     ??SetSpecialBinarVar_7:
   \   00000066   2406               LSLS     R4,R4,#+24
   \   00000068   240E               LSRS     R4,R4,#+24
   \   0000006A   8480               STRH     R4,[R0, #+4]
   \   0000006C   D6E7               B        ??SetSpecialBinarVar_2
   \                     ??SetSpecialBinarVar_4:
   \   0000006E   1428               CMP      R0,#+20
   \   00000070   13D3               BCC      ??SetSpecialBinarVar_8
   \   00000072   1C28               CMP      R0,#+28
   \   00000074   11D2               BCS      ??SetSpecialBinarVar_8
   \   00000076   1438               SUBS     R0,R0,#+20
   \   00000078   0006               LSLS     R0,R0,#+24
   \   0000007A   000E               LSRS     R0,R0,#+24
   \   0000007C   124B               LDR      R3,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   0000007E   1449               LDR      R1,??SetSpecialBinarVar_1+0xC  ;; 0xbc2e
   \   00000080   A024               MOVS     R4,#+160
   \   00000082   6043               MULS     R0,R4,R0
   \   00000084   1818               ADDS     R0,R3,R0
   \   00000086   4018               ADDS     R0,R0,R1
   \   00000088   0021               MOVS     R1,#+0
   \   0000008A   415E               LDRSH    R1,[R0, R1]
   \   0000008C   FA23               MOVS     R3,#+250
   \   0000008E   5B00               LSLS     R3,R3,#+1        ;; #+500
   \   00000090   9942               CMP      R1,R3
   \   00000092   C3DA               BGE      ??SetSpecialBinarVar_2
   \   00000094   491C               ADDS     R1,R1,#+1
   \   00000096   0180               STRH     R1,[R0, #+0]
   \   00000098   C0E7               B        ??SetSpecialBinarVar_2
   \                     ??SetSpecialBinarVar_8:
   \   0000009A   1E28               CMP      R0,#+30
   \   0000009C   C2D3               BCC      ??SetSpecialBinarVar_3
   \   0000009E   2628               CMP      R0,#+38
   \   000000A0   C0D2               BCS      ??SetSpecialBinarVar_3
   \   000000A2   1E38               SUBS     R0,R0,#+30
   \   000000A4   0006               LSLS     R0,R0,#+24
   \   000000A6   000E               LSRS     R0,R0,#+24
   \   000000A8   074B               LDR      R3,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   000000AA   0949               LDR      R1,??SetSpecialBinarVar_1+0xC  ;; 0xbc2e
   \   000000AC   A024               MOVS     R4,#+160
   \   000000AE   6043               MULS     R0,R4,R0
   \   000000B0   1818               ADDS     R0,R3,R0
   \   000000B2   4018               ADDS     R0,R0,R1
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   415E               LDRSH    R1,[R0, R1]
   \   000000B8   0129               CMP      R1,#+1
   \   000000BA   AFDB               BLT      ??SetSpecialBinarVar_2
   \   000000BC   491E               SUBS     R1,R1,#+1
   \   000000BE   0180               STRH     R1,[R0, #+0]
   \   000000C0   ACE7               B        ??SetSpecialBinarVar_2
   \   000000C2   C046               Nop      
   \                     ??SetSpecialBinarVar_1:
   \   000000C4   26BC0000           DC32     0xbc26
   \   000000C8   ........           DC32     gProg
   \   000000CC   2ABC0000           DC32     0xbc2a
   \   000000D0   2EBC0000           DC32     0xbc2e
    727            
    728          
    729          
    730          //Funkcja wys³ania zadania HTTP

   \                                 In section Debug.txt, align 4, keep-with-next
    731          void HTTP_Query(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    732          {
   \                     HTTP_Query:
   \   00000000   FDB5               PUSH     {R0,R2-R7,LR}
   \   00000002   88B0               SUB      SP,SP,#+32
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   04E0               B        ??HTTP_Query_0
    733          
    734                          
    735                     //wysy³anie danych ------------------------------------
    736                     
    737                     short BTS=0;
    738                     for (short i=0; i<sizeof(Buff_TX); i++) Buff_TX[i]=0;
   \                     ??HTTP_Query_1:
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   2154               STRB     R1,[R4, R0]
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   0004               LSLS     R0,R0,#+16
   \   00000012   0014               ASRS     R0,R0,#+16
   \                     ??HTTP_Query_0:
   \   00000014   0100               MOVS     R1,R0
   \   00000016   0904               LSLS     R1,R1,#+16
   \   00000018   090C               LSRS     R1,R1,#+16
   \   0000001A   0429               CMP      R1,#+4
   \   0000001C   F5D3               BCC      ??HTTP_Query_1
   \   0000001E   1B20               MOVS     R0,#+27
   \   00000020   2070               STRB     R0,[R4, #+0]
    739                     Buff_TX[BTS++]=0x1B;
    740                     Buff_TX[BTS++]='S';
   \   00000022   5320               MOVS     R0,#+83
   \   00000024   6070               STRB     R0,[R4, #+1]
    741                     Buff_TX[BTS++]=Net->Status.HostChannel;     //numer kana³u [przydzielony przez serwer
   \   00000026   0A98               LDR      R0,[SP, #+40]
   \   00000028   401C               ADDS     R0,R0,#+1
   \   0000002A   0290               STR      R0,[SP, #+8]
   \   0000002C   407D               LDRB     R0,[R0, #+21]
   \   0000002E   A070               STRB     R0,[R4, #+2]
   \   00000030   0325               MOVS     R5,#+3
    742                     
    743                                               
    744                     char Send=0; 
   \   00000032   0026               MOVS     R6,#+0
    745                     char txt[16]; 
    746                     //czyszczenie bufora nadawczego
    747                     char *PozIlByte;
    748                     switch (Net->Status.CurrentOrder)     
   \   00000034   0298               LDR      R0,[SP, #+8]
   \   00000036   4078               LDRB     R0,[R0, #+1]
   \   00000038   0E28               CMP      R0,#+14
   \   0000003A   00D1               BNE      .+4
   \   0000003C   9EE0               B        ??HTTP_Query_2
   \   0000003E   0F28               CMP      R0,#+15
   \   00000040   4FD0               BEQ      ??HTTP_Query_3
   \   00000042   1028               CMP      R0,#+16
   \   00000044   00D0               BEQ      .+4
   \   00000046   A2E2               B        ??HTTP_Query_4
    749                     {
    750                        case HTTP_GET_Config:              //proba o podanie konfiguracji zestawu zmiennych
    751                              strcat(Buff_TX,"GET ");
   \   00000048   DA4D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   0000004A   2900               MOVS     R1,R5
   \   0000004C   2000               MOVS     R0,R4
   \   0000004E   ........           BL       strcat
    752                              strcat(Buff_TX,Net->WiFi.Path);
   \   00000052   0A99               LDR      R1,[SP, #+40]
   \   00000054   D331               ADDS     R1,R1,#+211
   \   00000056   2000               MOVS     R0,R4
   \   00000058   ........           BL       strcat
    753                              strcat(Buff_TX,"/dc");
   \   0000005C   D6A1               ADR      R1,??HTTP_Query_5+0x4  ;; "/dc"
   \   0000005E   2000               MOVS     R0,R4
   \   00000060   ........           BL       strcat
    754                              sprintf(txt, "%d",RF_ID_R);
                                     ^
Warning[Pe223]: function "sprintf" declared implicitly
   \   00000064   D54A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x2085b9
   \   00000066   D6A1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   00000068   04A8               ADD      R0,SP,#+16
   \   0000006A   ........           BL       sprintf
    755                              strcat(Buff_TX,txt);
   \   0000006E   04A9               ADD      R1,SP,#+16
   \   00000070   2000               MOVS     R0,R4
   \   00000072   ........           BL       strcat
    756                              strcat(Buff_TX,".csv HTTP/1.1\r\n");
   \   00000076   2900               MOVS     R1,R5
   \   00000078   0831               ADDS     R1,R1,#+8
   \   0000007A   2000               MOVS     R0,R4
   \   0000007C   ........           BL       strcat
    757                              strcat(Buff_TX,"User-Agent: CEURON\r\nHost: ");
   \   00000080   2900               MOVS     R1,R5
   \   00000082   1831               ADDS     R1,R1,#+24
   \   00000084   2000               MOVS     R0,R4
   \   00000086   ........           BL       strcat
    758                              if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) {strcat(Buff_TX,Net->WiFi.Subdomena); strcat(Buff_TX,".");}
   \   0000008A   0A98               LDR      R0,[SP, #+40]
   \   0000008C   C430               ADDS     R0,R0,#+196
   \   0000008E   0178               LDRB     R1,[R0, #+0]
   \   00000090   3029               CMP      R1,#+48
   \   00000092   0BD3               BCC      ??HTTP_Query_6
   \   00000094   0800               MOVS     R0,R1
   \   00000096   7B28               CMP      R0,#+123
   \   00000098   08D2               BCS      ??HTTP_Query_6
   \   0000009A   0A99               LDR      R1,[SP, #+40]
   \   0000009C   C431               ADDS     R1,R1,#+196
   \   0000009E   2000               MOVS     R0,R4
   \   000000A0   ........           BL       strcat
   \   000000A4   C7A1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x2E, 0x00, 0x00, 0x00
   \   000000A6   2000               MOVS     R0,R4
   \   000000A8   ........           BL       strcat
    759                              strcat(Buff_TX,Net->WiFi.Domena);
   \                     ??HTTP_Query_6:
   \   000000AC   0A99               LDR      R1,[SP, #+40]
   \   000000AE   B531               ADDS     R1,R1,#+181
   \   000000B0   2000               MOVS     R0,R4
   \   000000B2   ........           BL       strcat
    760                              strcat(Buff_TX,"\r\n");
   \   000000B6   C4A1               ADR      R1,??HTTP_Query_5+0x14  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000000B8   2000               MOVS     R0,R4
   \   000000BA   ........           BL       strcat
    761                              strcat(Buff_TX,"Connection: keep-alive\r\n");
   \   000000BE   2900               MOVS     R1,R5
   \   000000C0   3431               ADDS     R1,R1,#+52
   \   000000C2   2000               MOVS     R0,R4
   \   000000C4   ........           BL       strcat
    762                              strcat(Buff_TX,"\r\n\r\n");
   \   000000C8   5035               ADDS     R5,R5,#+80
   \   000000CA   2900               MOVS     R1,R5
   \   000000CC   2000               MOVS     R0,R4
   \   000000CE   ........           BL       strcat
    763                              BTS=strlen(Buff_TX);
   \   000000D2   2000               MOVS     R0,R4
   \   000000D4   ........           BL       strlen
   \   000000D8   0500               MOVS     R5,R0
   \   000000DA   2D04               LSLS     R5,R5,#+16
   \   000000DC   2D14               ASRS     R5,R5,#+16
    764                              Send=1;
   \   000000DE   0126               MOVS     R6,#+1
   \   000000E0   55E2               B        ??HTTP_Query_4
    765          
    766                        break; 
    767                        
    768                        case HTTP_GET:              //proba o podanie konfiguracji zestawu zmiennych
    769                              strcat(Buff_TX,"GET ");
   \                     ??HTTP_Query_3:
   \   000000E2   B44D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   000000E4   2900               MOVS     R1,R5
   \   000000E6   2000               MOVS     R0,R4
   \   000000E8   ........           BL       strcat
    770                              strcat(Buff_TX,Net->WiFi.Path);
   \   000000EC   0A99               LDR      R1,[SP, #+40]
   \   000000EE   D331               ADDS     R1,R1,#+211
   \   000000F0   2000               MOVS     R0,R4
   \   000000F2   ........           BL       strcat
    771                              strcat(Buff_TX,"/do");
   \   000000F6   B5A1               ADR      R1,??HTTP_Query_5+0x18  ;; "/do"
   \   000000F8   2000               MOVS     R0,R4
   \   000000FA   ........           BL       strcat
    772                              sprintf(txt, "%d",RF_ID_R);
   \   000000FE   AF4A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x2085b9
   \   00000100   AFA1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   00000102   04A8               ADD      R0,SP,#+16
   \   00000104   ........           BL       sprintf
    773                              strcat(Buff_TX,txt);
   \   00000108   04A9               ADD      R1,SP,#+16
   \   0000010A   2000               MOVS     R0,R4
   \   0000010C   ........           BL       strcat
    774                              strcat(Buff_TX,".csv HTTP/1.1\r\n");
   \   00000110   2900               MOVS     R1,R5
   \   00000112   0831               ADDS     R1,R1,#+8
   \   00000114   2000               MOVS     R0,R4
   \   00000116   ........           BL       strcat
    775                              strcat(Buff_TX,"User-Agent: CEURON\r\nHost: ");
   \   0000011A   2900               MOVS     R1,R5
   \   0000011C   1831               ADDS     R1,R1,#+24
   \   0000011E   2000               MOVS     R0,R4
   \   00000120   ........           BL       strcat
    776                              if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) {strcat(Buff_TX,Net->WiFi.Subdomena); strcat(Buff_TX,".");}
   \   00000124   0A98               LDR      R0,[SP, #+40]
   \   00000126   C430               ADDS     R0,R0,#+196
   \   00000128   0178               LDRB     R1,[R0, #+0]
   \   0000012A   3029               CMP      R1,#+48
   \   0000012C   0BD3               BCC      ??HTTP_Query_7
   \   0000012E   0800               MOVS     R0,R1
   \   00000130   7B28               CMP      R0,#+123
   \   00000132   08D2               BCS      ??HTTP_Query_7
   \   00000134   0A99               LDR      R1,[SP, #+40]
   \   00000136   C431               ADDS     R1,R1,#+196
   \   00000138   2000               MOVS     R0,R4
   \   0000013A   ........           BL       strcat
   \   0000013E   A1A1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x2E, 0x00, 0x00, 0x00
   \   00000140   2000               MOVS     R0,R4
   \   00000142   ........           BL       strcat
    777                              strcat(Buff_TX,Net->WiFi.Domena);
   \                     ??HTTP_Query_7:
   \   00000146   0A99               LDR      R1,[SP, #+40]
   \   00000148   B531               ADDS     R1,R1,#+181
   \   0000014A   2000               MOVS     R0,R4
   \   0000014C   ........           BL       strcat
    778                              strcat(Buff_TX,"\r\n");
   \   00000150   9DA1               ADR      R1,??HTTP_Query_5+0x14  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000152   2000               MOVS     R0,R4
   \   00000154   ........           BL       strcat
    779                              strcat(Buff_TX,"Connection: keep-alive\r\n");
   \   00000158   2900               MOVS     R1,R5
   \   0000015A   3431               ADDS     R1,R1,#+52
   \   0000015C   2000               MOVS     R0,R4
   \   0000015E   ........           BL       strcat
    780                              strcat(Buff_TX,"\r\n\r\n");
   \   00000162   5035               ADDS     R5,R5,#+80
   \   00000164   2900               MOVS     R1,R5
   \   00000166   2000               MOVS     R0,R4
   \   00000168   ........           BL       strcat
    781                              BTS=strlen(Buff_TX);
   \   0000016C   2000               MOVS     R0,R4
   \   0000016E   ........           BL       strlen
   \   00000172   0500               MOVS     R5,R0
   \   00000174   2D04               LSLS     R5,R5,#+16
   \   00000176   2D14               ASRS     R5,R5,#+16
    782                               Send=1;
   \   00000178   0126               MOVS     R6,#+1
   \   0000017A   08E2               B        ??HTTP_Query_4
    783                              
    784                              
    785                        break; 
    786                        
    787                        case HTTP_POST:                   //wys³anie zmiennych
    788                              
    789                              //obliczenie max iloci wysy³anych danych
    790                              //151B(Nag³ówek i stopka) + 45B(Path,Subdomena,Domena) + 40(10B x VAR_SET_AMOUNT lub 7B x VAR_SET_AMOUNT dla dwustanów)  = max 596B. Przy samych dwustanach 476B
    791                              strcat(Buff_TX,"POST ");
   \                     ??HTTP_Query_2:
   \   0000017C   8D4D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   0000017E   2900               MOVS     R1,R5
   \   00000180   5831               ADDS     R1,R1,#+88
   \   00000182   2000               MOVS     R0,R4
   \   00000184   ........           BL       strcat
    792                              strcat(Buff_TX,Net->WiFi.Path);
   \   00000188   0A99               LDR      R1,[SP, #+40]
   \   0000018A   D331               ADDS     R1,R1,#+211
   \   0000018C   2000               MOVS     R0,R4
   \   0000018E   ........           BL       strcat
    793                              strcat(Buff_TX,"/putgate.php HTTP/1.1\r\nUser-Agent: CEURON\r\nHost: ");
   \   00000192   2900               MOVS     R1,R5
   \   00000194   6031               ADDS     R1,R1,#+96
   \   00000196   2000               MOVS     R0,R4
   \   00000198   ........           BL       strcat
    794                              if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) {strcat(Buff_TX,Net->WiFi.Subdomena); strcat(Buff_TX,".");}
   \   0000019C   0A98               LDR      R0,[SP, #+40]
   \   0000019E   C430               ADDS     R0,R0,#+196
   \   000001A0   0178               LDRB     R1,[R0, #+0]
   \   000001A2   3029               CMP      R1,#+48
   \   000001A4   0BD3               BCC      ??HTTP_Query_8
   \   000001A6   0800               MOVS     R0,R1
   \   000001A8   7B28               CMP      R0,#+123
   \   000001AA   08D2               BCS      ??HTTP_Query_8
   \   000001AC   0A99               LDR      R1,[SP, #+40]
   \   000001AE   C431               ADDS     R1,R1,#+196
   \   000001B0   2000               MOVS     R0,R4
   \   000001B2   ........           BL       strcat
   \   000001B6   83A1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x2E, 0x00, 0x00, 0x00
   \   000001B8   2000               MOVS     R0,R4
   \   000001BA   ........           BL       strcat
    795                              strcat(Buff_TX,Net->WiFi.Domena);
   \                     ??HTTP_Query_8:
   \   000001BE   0A99               LDR      R1,[SP, #+40]
   \   000001C0   B531               ADDS     R1,R1,#+181
   \   000001C2   2000               MOVS     R0,R4
   \   000001C4   ........           BL       strcat
    796                              strcat(Buff_TX,"\r\nContent-Length: ");
   \   000001C8   2900               MOVS     R1,R5
   \   000001CA   9431               ADDS     R1,R1,#+148
   \   000001CC   2000               MOVS     R0,R4
   \   000001CE   ........           BL       strcat
    797                              char PozLength=strlen(Buff_TX);
   \   000001D2   2000               MOVS     R0,R4
   \   000001D4   ........           BL       strlen
   \   000001D8   6946               MOV      R1,SP
   \   000001DA   4870               STRB     R0,[R1, #+1]
    798                      
    799                              strcat(Buff_TX,"   ");
   \   000001DC   7CA1               ADR      R1,??HTTP_Query_5+0x1C  ;; "   "
   \   000001DE   2000               MOVS     R0,R4
   \   000001E0   ........           BL       strcat
    800                              strcat(Buff_TX,"\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\nNodeID=");
   \   000001E4   2900               MOVS     R1,R5
   \   000001E6   A831               ADDS     R1,R1,#+168
   \   000001E8   2000               MOVS     R0,R4
   \   000001EA   ........           BL       strcat
    801                              sprintf(txt, "%d",RF_ID_R);
   \   000001EE   734A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x2085b9
   \   000001F0   73A1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   000001F2   04A8               ADD      R0,SP,#+16
   \   000001F4   ........           BL       sprintf
    802                              strcat(Buff_TX,txt);
   \   000001F8   04A9               ADD      R1,SP,#+16
   \   000001FA   2000               MOVS     R0,R4
   \   000001FC   ........           BL       strcat
    803                              strcat(Buff_TX,"&Order=1&Content=;\r\n");
   \   00000200   E835               ADDS     R5,R5,#+232
   \   00000202   2900               MOVS     R1,R5
   \   00000204   2000               MOVS     R0,R4
   \   00000206   ........           BL       strcat
    804                              BTS=strlen(Buff_TX);
   \   0000020A   2000               MOVS     R0,R4
   \   0000020C   ........           BL       strlen
   \   00000210   0500               MOVS     R5,R0
   \   00000212   2D04               LSLS     R5,R5,#+16
   \   00000214   2D14               ASRS     R5,R5,#+16
    805                              //oko³o 179 byte do tej pory
    806                              char ContentLength=34;
   \   00000216   2227               MOVS     R7,#+34
    807                              char ilLit=0;
   \   00000218   6846               MOV      R0,SP
   \   0000021A   3100               MOVS     R1,R6
   \   0000021C   0170               STRB     R1,[R0, #+0]
    808                              for (char VSN=0; VSN<Net->HTTP.VarSetCount; VSN++)
   \   0000021E   0800               MOVS     R0,R1
   \   00000220   0190               STR      R0,[SP, #+4]
   \   00000222   32E0               B        ??HTTP_Query_9
    809                              {
    810                                switch (Net->HTTP.VarSet[VSN].VarType)
    811                                {
    812                                  case 'a':  //jezeli zmienna analogowa
    813                                        
    814                                        Buff_TX[BTS++]='a';
    815                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr/10)+48;
    816                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr%10)+48;
    817                                        Buff_TX[BTS++]=';';
    818                                        
    819                                        if (VariablesAnal[Net->HTTP.VarSet[VSN].VarNr]==(signed short)0x8000)
    820                                        {
    821                                           Buff_TX[BTS++]='B';
    822                                           Buff_TX[BTS++]='A';
    823                                           Buff_TX[BTS++]='T';
    824                                        }else{  
    825                                         
    826                                          if ((VariablesAnal[Net->HTTP.VarSet[VSN].VarNr])>999)
    827                                          {
    828                                            Buff_TX[BTS++]='>';
    829                                            Buff_TX[BTS++]='M';
    830                                            Buff_TX[BTS++]='A';
    831                                            Buff_TX[BTS++]='X';
    832                                          }
    833                                          else if ((VariablesAnal[Net->HTTP.VarSet[VSN].VarNr])<-999)
    834                                          {
    835                                            Buff_TX[BTS++]='-';
    836                                            Buff_TX[BTS++]='M';
    837                                            Buff_TX[BTS++]='I';
    838                                            Buff_TX[BTS++]='N';
    839                                          }else{
    840                                            ilLit=sIntToStr(VariablesAnal[Net->HTTP.VarSet[VSN].VarNr],&Buff_TX[BTS]);
    841                                            BTS+=ilLit;
    842             
    843                                          for (char i=ilLit; i<4; i++) {Buff_TX[BTS++]=' ';}
    844                                          }
    845                                        }
    846                                        
    847                                        Buff_TX[BTS++]=0xd;
    848                                        Buff_TX[BTS++]=0xa;
    849                                        ContentLength+=10;
    850                                          
    851                                  break;
    852                                  
    853                                  case 'b':  //jezeli zmienna dwustanowa
    854                                        Buff_TX[BTS++]='b';
    855                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr/10)+48;
    856                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr%10)+48;
    857                                        Buff_TX[BTS++]=';';
    858                                        Net->HTTP.VarSet[VSN].Value=((Variables[Net->HTTP.VarSet[VSN].VarNr/8]>>(Net->HTTP.VarSet[VSN].VarNr%8))&0x1);
    859                                        Buff_TX[BTS++]=Net->HTTP.VarSet[VSN].Value+48;
    860                                        Buff_TX[BTS++]=0xd;
    861                                        Buff_TX[BTS++]=0xa;
    862                                        ContentLength+=7;
    863                                  break;
    864                                  
    865                                  case 'c':  //jezeli zmienna analogowa specjalna
    866                                        
    867                                        Buff_TX[BTS++]='c';
    868                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr/10)+48;
    869                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr%10)+48;
    870                                        Buff_TX[BTS++]=';';
    871                                        if (Net->HTTP.VarSet[VSN].VarNr==99)   //je¿eli propa o podanie czsu
    872                                        {
    873                                          Buff_TX[BTS++]=(DateTime.Hour/10)+48;
    874                                          Buff_TX[BTS++]=(DateTime.Hour%10)+48;
    875                                          Buff_TX[BTS++]=':';
    876                                          Buff_TX[BTS++]=(DateTime.Minute/10)+48;
    877                                          Buff_TX[BTS++]=(DateTime.Minute%10)+48;
    878                                        }else{
    879                                        ilLit=sIntToStr(GetSpecialAnalogVar(Net->HTTP.VarSet[VSN].VarNr),&Buff_TX[BTS]);
    880                                        BTS+=ilLit;
    881                                        }
    882                                        for (char i=ilLit; i<4; i++) {Buff_TX[BTS++]=' ';}
    883                                        Buff_TX[BTS++]=0xd;
    884                                        Buff_TX[BTS++]=0xa;
    885                                        ContentLength+=10;
    886                                   
    887                                  break;
    888                                  
    889                                   case 'd':  //jezeli zmienna dwustanowa specjalna
    890                                    
    891                                        Buff_TX[BTS++]='d';
   \                     ??HTTP_Query_10:
   \   00000224   6055               STRB     R0,[R4, R5]
   \   00000226   6D1C               ADDS     R5,R5,#+1
   \   00000228   2D04               LSLS     R5,R5,#+16
   \   0000022A   2D14               ASRS     R5,R5,#+16
    892                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr/10)+48;
   \   0000022C   7078               LDRB     R0,[R6, #+1]
   \   0000022E   0A21               MOVS     R1,#+10
   \   00000230   ........           BL       __aeabi_idivmod
   \   00000234   3030               ADDS     R0,R0,#+48
   \   00000236   6055               STRB     R0,[R4, R5]
   \   00000238   6D1C               ADDS     R5,R5,#+1
   \   0000023A   2D04               LSLS     R5,R5,#+16
   \   0000023C   2D14               ASRS     R5,R5,#+16
    893                                        Buff_TX[BTS++]=(Net->HTTP.VarSet[VSN].VarNr%10)+48;
   \   0000023E   7078               LDRB     R0,[R6, #+1]
   \   00000240   0A21               MOVS     R1,#+10
   \   00000242   ........           BL       __aeabi_idivmod
   \   00000246   3031               ADDS     R1,R1,#+48
   \   00000248   6155               STRB     R1,[R4, R5]
   \   0000024A   6D1C               ADDS     R5,R5,#+1
   \   0000024C   2D04               LSLS     R5,R5,#+16
   \   0000024E   2D14               ASRS     R5,R5,#+16
    894                                        Buff_TX[BTS++]=';';
   \   00000250   3B20               MOVS     R0,#+59
   \   00000252   6055               STRB     R0,[R4, R5]
   \   00000254   6D1C               ADDS     R5,R5,#+1
   \   00000256   2D04               LSLS     R5,R5,#+16
   \   00000258   2D14               ASRS     R5,R5,#+16
    895                                        //Net->HTTP.VarSet[VSN].Value=GetSpecialAnalogVar(Net->HTTP.VarSet[VSN].VarNr),&Buff_TX[BTS])
    896                                        Buff_TX[BTS++]=GetSpecialBinarVar(Net->HTTP.VarSet[VSN].VarNr)+48;
   \   0000025A   7078               LDRB     R0,[R6, #+1]
   \   0000025C   ........           BL       GetSpecialBinarVar
   \   00000260   3030               ADDS     R0,R0,#+48
   \   00000262   6055               STRB     R0,[R4, R5]
   \   00000264   6D1C               ADDS     R5,R5,#+1
   \   00000266   2D04               LSLS     R5,R5,#+16
   \   00000268   2D14               ASRS     R5,R5,#+16
    897                                        Buff_TX[BTS++]=0xd;
   \   0000026A   0D20               MOVS     R0,#+13
   \   0000026C   6055               STRB     R0,[R4, R5]
   \   0000026E   6D1C               ADDS     R5,R5,#+1
   \   00000270   2D04               LSLS     R5,R5,#+16
   \   00000272   2D14               ASRS     R5,R5,#+16
    898                                        Buff_TX[BTS++]=0xa;
   \   00000274   0A20               MOVS     R0,#+10
   \   00000276   6055               STRB     R0,[R4, R5]
   \   00000278   6D1C               ADDS     R5,R5,#+1
   \   0000027A   2D04               LSLS     R5,R5,#+16
   \   0000027C   2D14               ASRS     R5,R5,#+16
    899                                   
    900                                        ContentLength+=7;
   \   0000027E   FF1D               ADDS     R7,R7,#+7
   \                     ??HTTP_Query_11:
   \   00000280   0198               LDR      R0,[SP, #+4]
   \   00000282   401C               ADDS     R0,R0,#+1
   \   00000284   0006               LSLS     R0,R0,#+24
   \   00000286   000E               LSRS     R0,R0,#+24
   \   00000288   0190               STR      R0,[SP, #+4]
   \                     ??HTTP_Query_9:
   \   0000028A   0198               LDR      R0,[SP, #+4]
   \   0000028C   0A99               LDR      R1,[SP, #+40]
   \   0000028E   EA31               ADDS     R1,R1,#+234
   \   00000290   0978               LDRB     R1,[R1, #+0]
   \   00000292   0006               LSLS     R0,R0,#+24
   \   00000294   000E               LSRS     R0,R0,#+24
   \   00000296   8842               CMP      R0,R1
   \   00000298   00D3               BCC      .+4
   \   0000029A   56E1               B        ??HTTP_Query_12
   \   0000029C   0198               LDR      R0,[SP, #+4]
   \   0000029E   0006               LSLS     R0,R0,#+24
   \   000002A0   000E               LSRS     R0,R0,#+24
   \   000002A2   8000               LSLS     R0,R0,#+2
   \   000002A4   0A99               LDR      R1,[SP, #+40]
   \   000002A6   0E18               ADDS     R6,R1,R0
   \   000002A8   EE36               ADDS     R6,R6,#+238
   \   000002AA   3078               LDRB     R0,[R6, #+0]
   \   000002AC   6128               CMP      R0,#+97
   \   000002AE   08D0               BEQ      ??HTTP_Query_13
   \   000002B0   6228               CMP      R0,#+98
   \   000002B2   00D1               BNE      .+4
   \   000002B4   A5E0               B        ??HTTP_Query_14
   \   000002B6   6328               CMP      R0,#+99
   \   000002B8   00D1               BNE      .+4
   \   000002BA   DDE0               B        ??HTTP_Query_15
   \   000002BC   6428               CMP      R0,#+100
   \   000002BE   B1D0               BEQ      ??HTTP_Query_10
   \   000002C0   DEE7               B        ??HTTP_Query_11
   \                     ??HTTP_Query_13:
   \   000002C2   6055               STRB     R0,[R4, R5]
   \   000002C4   6D1C               ADDS     R5,R5,#+1
   \   000002C6   2D04               LSLS     R5,R5,#+16
   \   000002C8   2D14               ASRS     R5,R5,#+16
   \   000002CA   7078               LDRB     R0,[R6, #+1]
   \   000002CC   0A21               MOVS     R1,#+10
   \   000002CE   ........           BL       __aeabi_idivmod
   \   000002D2   3030               ADDS     R0,R0,#+48
   \   000002D4   6055               STRB     R0,[R4, R5]
   \   000002D6   6D1C               ADDS     R5,R5,#+1
   \   000002D8   2D04               LSLS     R5,R5,#+16
   \   000002DA   2D14               ASRS     R5,R5,#+16
   \   000002DC   7078               LDRB     R0,[R6, #+1]
   \   000002DE   0A21               MOVS     R1,#+10
   \   000002E0   ........           BL       __aeabi_idivmod
   \   000002E4   3031               ADDS     R1,R1,#+48
   \   000002E6   6155               STRB     R1,[R4, R5]
   \   000002E8   6D1C               ADDS     R5,R5,#+1
   \   000002EA   2D04               LSLS     R5,R5,#+16
   \   000002EC   2D14               ASRS     R5,R5,#+16
   \   000002EE   3B20               MOVS     R0,#+59
   \   000002F0   6055               STRB     R0,[R4, R5]
   \   000002F2   6D1C               ADDS     R5,R5,#+1
   \   000002F4   2D04               LSLS     R5,R5,#+16
   \   000002F6   2D14               ASRS     R5,R5,#+16
   \   000002F8   CB48               LDR      R0,??HTTP_Query_16  ;; VariablesAnal
   \   000002FA   7178               LDRB     R1,[R6, #+1]
   \   000002FC   4900               LSLS     R1,R1,#+1
   \   000002FE   415E               LDRSH    R1,[R0, R1]
   \   00000300   CA4A               LDR      R2,??HTTP_Query_16+0x4  ;; 0xffff8000
   \   00000302   9142               CMP      R1,R2
   \   00000304   0FD1               BNE      ??HTTP_Query_17
   \   00000306   4220               MOVS     R0,#+66
   \   00000308   6055               STRB     R0,[R4, R5]
   \   0000030A   6D1C               ADDS     R5,R5,#+1
   \   0000030C   2D04               LSLS     R5,R5,#+16
   \   0000030E   2D14               ASRS     R5,R5,#+16
   \   00000310   4120               MOVS     R0,#+65
   \   00000312   6055               STRB     R0,[R4, R5]
   \   00000314   6D1C               ADDS     R5,R5,#+1
   \   00000316   2D04               LSLS     R5,R5,#+16
   \   00000318   2D14               ASRS     R5,R5,#+16
   \   0000031A   5420               MOVS     R0,#+84
   \   0000031C   6055               STRB     R0,[R4, R5]
   \   0000031E   6D1C               ADDS     R5,R5,#+1
   \   00000320   2D04               LSLS     R5,R5,#+16
   \   00000322   2D14               ASRS     R5,R5,#+16
   \   00000324   61E0               B        ??HTTP_Query_18
   \                     ??HTTP_Query_17:
   \   00000326   7178               LDRB     R1,[R6, #+1]
   \   00000328   4900               LSLS     R1,R1,#+1
   \   0000032A   415E               LDRSH    R1,[R0, R1]
   \   0000032C   FA22               MOVS     R2,#+250
   \   0000032E   9200               LSLS     R2,R2,#+2        ;; #+1000
   \   00000330   9142               CMP      R1,R2
   \   00000332   14DB               BLT      ??HTTP_Query_19
   \   00000334   3E20               MOVS     R0,#+62
   \   00000336   6055               STRB     R0,[R4, R5]
   \   00000338   6D1C               ADDS     R5,R5,#+1
   \   0000033A   2D04               LSLS     R5,R5,#+16
   \   0000033C   2D14               ASRS     R5,R5,#+16
   \   0000033E   4D20               MOVS     R0,#+77
   \   00000340   6055               STRB     R0,[R4, R5]
   \   00000342   6D1C               ADDS     R5,R5,#+1
   \   00000344   2D04               LSLS     R5,R5,#+16
   \   00000346   2D14               ASRS     R5,R5,#+16
   \   00000348   4120               MOVS     R0,#+65
   \   0000034A   6055               STRB     R0,[R4, R5]
   \   0000034C   6D1C               ADDS     R5,R5,#+1
   \   0000034E   2D04               LSLS     R5,R5,#+16
   \   00000350   2D14               ASRS     R5,R5,#+16
   \   00000352   5820               MOVS     R0,#+88
   \   00000354   6055               STRB     R0,[R4, R5]
   \   00000356   6D1C               ADDS     R5,R5,#+1
   \   00000358   2D04               LSLS     R5,R5,#+16
   \   0000035A   2D14               ASRS     R5,R5,#+16
   \   0000035C   45E0               B        ??HTTP_Query_18
   \                     ??HTTP_Query_19:
   \   0000035E   7178               LDRB     R1,[R6, #+1]
   \   00000360   4900               LSLS     R1,R1,#+1
   \   00000362   415E               LDRSH    R1,[R0, R1]
   \   00000364   B24A               LDR      R2,??HTTP_Query_16+0x8  ;; 0xfffffc19
   \   00000366   9142               CMP      R1,R2
   \   00000368   14DA               BGE      ??HTTP_Query_20
   \   0000036A   2D20               MOVS     R0,#+45
   \   0000036C   6055               STRB     R0,[R4, R5]
   \   0000036E   6D1C               ADDS     R5,R5,#+1
   \   00000370   2D04               LSLS     R5,R5,#+16
   \   00000372   2D14               ASRS     R5,R5,#+16
   \   00000374   4D20               MOVS     R0,#+77
   \   00000376   6055               STRB     R0,[R4, R5]
   \   00000378   6D1C               ADDS     R5,R5,#+1
   \   0000037A   2D04               LSLS     R5,R5,#+16
   \   0000037C   2D14               ASRS     R5,R5,#+16
   \   0000037E   4920               MOVS     R0,#+73
   \   00000380   6055               STRB     R0,[R4, R5]
   \   00000382   6D1C               ADDS     R5,R5,#+1
   \   00000384   2D04               LSLS     R5,R5,#+16
   \   00000386   2D14               ASRS     R5,R5,#+16
   \   00000388   4E20               MOVS     R0,#+78
   \   0000038A   6055               STRB     R0,[R4, R5]
   \   0000038C   6D1C               ADDS     R5,R5,#+1
   \   0000038E   2D04               LSLS     R5,R5,#+16
   \   00000390   2D14               ASRS     R5,R5,#+16
   \   00000392   2AE0               B        ??HTTP_Query_18
   \                     ??HTTP_Query_20:
   \   00000394   6119               ADDS     R1,R4,R5
   \   00000396   7278               LDRB     R2,[R6, #+1]
   \   00000398   5200               LSLS     R2,R2,#+1
   \   0000039A   805E               LDRSH    R0,[R0, R2]
   \   0000039C   ........           BL       sIntToStr
   \   000003A0   6946               MOV      R1,SP
   \   000003A2   0870               STRB     R0,[R1, #+0]
   \   000003A4   6846               MOV      R0,SP
   \   000003A6   0078               LDRB     R0,[R0, #+0]
   \   000003A8   2D18               ADDS     R5,R5,R0
   \   000003AA   2D04               LSLS     R5,R5,#+16
   \   000003AC   2D14               ASRS     R5,R5,#+16
   \   000003AE   6846               MOV      R0,SP
   \   000003B0   0078               LDRB     R0,[R0, #+0]
   \   000003B2   17E0               B        ??HTTP_Query_21
   \                     ??HTTP_Query_5:
   \   000003B4   ........           DC32     `?<Constant "GET ">`
   \   000003B8   2F646300           DC8      "/dc"
   \   000003BC   B9852000           DC32     0x2085b9
   \   000003C0   25640000           DC8      0x25, 0x64, 0x00, 0x00
   \   000003C4   2E000000           DC8      0x2E, 0x00, 0x00, 0x00
   \   000003C8   0D0A0000           DC8      0x0D, 0x0A, 0x00, 0x00
   \   000003CC   2F646F00           DC8      "/do"
   \   000003D0   20202000           DC8      "   "
   \                     ??HTTP_Query_22:
   \   000003D4   2021               MOVS     R1,#+32
   \   000003D6   6155               STRB     R1,[R4, R5]
   \   000003D8   6D1C               ADDS     R5,R5,#+1
   \   000003DA   2D04               LSLS     R5,R5,#+16
   \   000003DC   2D14               ASRS     R5,R5,#+16
   \   000003DE   401C               ADDS     R0,R0,#+1
   \   000003E0   0006               LSLS     R0,R0,#+24
   \   000003E2   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_Query_21:
   \   000003E4   0100               MOVS     R1,R0
   \   000003E6   0429               CMP      R1,#+4
   \   000003E8   F4D3               BCC      ??HTTP_Query_22
   \                     ??HTTP_Query_18:
   \   000003EA   0D20               MOVS     R0,#+13
   \   000003EC   6055               STRB     R0,[R4, R5]
   \   000003EE   6D1C               ADDS     R5,R5,#+1
   \   000003F0   2D04               LSLS     R5,R5,#+16
   \   000003F2   2D14               ASRS     R5,R5,#+16
   \   000003F4   0A20               MOVS     R0,#+10
   \   000003F6   6055               STRB     R0,[R4, R5]
   \   000003F8   6D1C               ADDS     R5,R5,#+1
   \   000003FA   2D04               LSLS     R5,R5,#+16
   \   000003FC   2D14               ASRS     R5,R5,#+16
   \   000003FE   0A37               ADDS     R7,R7,#+10
   \   00000400   3EE7               B        ??HTTP_Query_11
   \                     ??HTTP_Query_14:
   \   00000402   6055               STRB     R0,[R4, R5]
   \   00000404   6D1C               ADDS     R5,R5,#+1
   \   00000406   2D04               LSLS     R5,R5,#+16
   \   00000408   2D14               ASRS     R5,R5,#+16
   \   0000040A   7078               LDRB     R0,[R6, #+1]
   \   0000040C   0A21               MOVS     R1,#+10
   \   0000040E   ........           BL       __aeabi_idivmod
   \   00000412   3030               ADDS     R0,R0,#+48
   \   00000414   6055               STRB     R0,[R4, R5]
   \   00000416   6D1C               ADDS     R5,R5,#+1
   \   00000418   2D04               LSLS     R5,R5,#+16
   \   0000041A   2D14               ASRS     R5,R5,#+16
   \   0000041C   7078               LDRB     R0,[R6, #+1]
   \   0000041E   0A21               MOVS     R1,#+10
   \   00000420   ........           BL       __aeabi_idivmod
   \   00000424   3031               ADDS     R1,R1,#+48
   \   00000426   6155               STRB     R1,[R4, R5]
   \   00000428   6D1C               ADDS     R5,R5,#+1
   \   0000042A   2D04               LSLS     R5,R5,#+16
   \   0000042C   2D14               ASRS     R5,R5,#+16
   \   0000042E   3B20               MOVS     R0,#+59
   \   00000430   6055               STRB     R0,[R4, R5]
   \   00000432   6D1C               ADDS     R5,R5,#+1
   \   00000434   2D04               LSLS     R5,R5,#+16
   \   00000436   2D14               ASRS     R5,R5,#+16
   \   00000438   7078               LDRB     R0,[R6, #+1]
   \   0000043A   C010               ASRS     R0,R0,#+3
   \   0000043C   7D49               LDR      R1,??HTTP_Query_16+0xC  ;; Variables
   \   0000043E   095C               LDRB     R1,[R1, R0]
   \   00000440   7078               LDRB     R0,[R6, #+1]
   \   00000442   0200               MOVS     R2,R0
   \   00000444   D208               LSRS     R2,R2,#+3
   \   00000446   D200               LSLS     R2,R2,#+3
   \   00000448   801A               SUBS     R0,R0,R2
   \   0000044A   0141               ASRS     R1,R1,R0
   \   0000044C   0120               MOVS     R0,#+1
   \   0000044E   0840               ANDS     R0,R0,R1
   \   00000450   7080               STRH     R0,[R6, #+2]
   \   00000452   0220               MOVS     R0,#+2
   \   00000454   305E               LDRSH    R0,[R6, R0]
   \   00000456   3030               ADDS     R0,R0,#+48
   \   00000458   6055               STRB     R0,[R4, R5]
   \   0000045A   6D1C               ADDS     R5,R5,#+1
   \   0000045C   2D04               LSLS     R5,R5,#+16
   \   0000045E   2D14               ASRS     R5,R5,#+16
   \   00000460   0D20               MOVS     R0,#+13
   \   00000462   6055               STRB     R0,[R4, R5]
   \   00000464   6D1C               ADDS     R5,R5,#+1
   \   00000466   2D04               LSLS     R5,R5,#+16
   \   00000468   2D14               ASRS     R5,R5,#+16
   \   0000046A   0A20               MOVS     R0,#+10
   \   0000046C   6055               STRB     R0,[R4, R5]
   \   0000046E   6D1C               ADDS     R5,R5,#+1
   \   00000470   2D04               LSLS     R5,R5,#+16
   \   00000472   2D14               ASRS     R5,R5,#+16
   \   00000474   FF1D               ADDS     R7,R7,#+7
   \   00000476   03E7               B        ??HTTP_Query_11
   \                     ??HTTP_Query_15:
   \   00000478   6055               STRB     R0,[R4, R5]
   \   0000047A   6D1C               ADDS     R5,R5,#+1
   \   0000047C   2D04               LSLS     R5,R5,#+16
   \   0000047E   2D14               ASRS     R5,R5,#+16
   \   00000480   7078               LDRB     R0,[R6, #+1]
   \   00000482   0A21               MOVS     R1,#+10
   \   00000484   ........           BL       __aeabi_idivmod
   \   00000488   3030               ADDS     R0,R0,#+48
   \   0000048A   6055               STRB     R0,[R4, R5]
   \   0000048C   6D1C               ADDS     R5,R5,#+1
   \   0000048E   2D04               LSLS     R5,R5,#+16
   \   00000490   2D14               ASRS     R5,R5,#+16
   \   00000492   7078               LDRB     R0,[R6, #+1]
   \   00000494   0A21               MOVS     R1,#+10
   \   00000496   ........           BL       __aeabi_idivmod
   \   0000049A   3031               ADDS     R1,R1,#+48
   \   0000049C   6155               STRB     R1,[R4, R5]
   \   0000049E   6D1C               ADDS     R5,R5,#+1
   \   000004A0   2D04               LSLS     R5,R5,#+16
   \   000004A2   2D14               ASRS     R5,R5,#+16
   \   000004A4   3B20               MOVS     R0,#+59
   \   000004A6   6055               STRB     R0,[R4, R5]
   \   000004A8   6D1C               ADDS     R5,R5,#+1
   \   000004AA   2D04               LSLS     R5,R5,#+16
   \   000004AC   2D14               ASRS     R5,R5,#+16
   \   000004AE   7078               LDRB     R0,[R6, #+1]
   \   000004B0   6328               CMP      R0,#+99
   \   000004B2   2DD1               BNE      ??HTTP_Query_23
   \   000004B4   6048               LDR      R0,??HTTP_Query_16+0x10  ;; DateTime + 3
   \   000004B6   0078               LDRB     R0,[R0, #+0]
   \   000004B8   0A21               MOVS     R1,#+10
   \   000004BA   ........           BL       __aeabi_idivmod
   \   000004BE   3030               ADDS     R0,R0,#+48
   \   000004C0   6055               STRB     R0,[R4, R5]
   \   000004C2   6D1C               ADDS     R5,R5,#+1
   \   000004C4   2D04               LSLS     R5,R5,#+16
   \   000004C6   2D14               ASRS     R5,R5,#+16
   \   000004C8   5B48               LDR      R0,??HTTP_Query_16+0x10  ;; DateTime + 3
   \   000004CA   0078               LDRB     R0,[R0, #+0]
   \   000004CC   0A21               MOVS     R1,#+10
   \   000004CE   ........           BL       __aeabi_idivmod
   \   000004D2   3031               ADDS     R1,R1,#+48
   \   000004D4   6155               STRB     R1,[R4, R5]
   \   000004D6   6D1C               ADDS     R5,R5,#+1
   \   000004D8   2D04               LSLS     R5,R5,#+16
   \   000004DA   2D14               ASRS     R5,R5,#+16
   \   000004DC   3A20               MOVS     R0,#+58
   \   000004DE   6055               STRB     R0,[R4, R5]
   \   000004E0   6D1C               ADDS     R5,R5,#+1
   \   000004E2   2D04               LSLS     R5,R5,#+16
   \   000004E4   2D14               ASRS     R5,R5,#+16
   \   000004E6   5548               LDR      R0,??HTTP_Query_16+0x14  ;; DateTime + 4
   \   000004E8   0078               LDRB     R0,[R0, #+0]
   \   000004EA   0A21               MOVS     R1,#+10
   \   000004EC   ........           BL       __aeabi_idivmod
   \   000004F0   3030               ADDS     R0,R0,#+48
   \   000004F2   6055               STRB     R0,[R4, R5]
   \   000004F4   6D1C               ADDS     R5,R5,#+1
   \   000004F6   2D04               LSLS     R5,R5,#+16
   \   000004F8   2D14               ASRS     R5,R5,#+16
   \   000004FA   5048               LDR      R0,??HTTP_Query_16+0x14  ;; DateTime + 4
   \   000004FC   0078               LDRB     R0,[R0, #+0]
   \   000004FE   0A21               MOVS     R1,#+10
   \   00000500   ........           BL       __aeabi_idivmod
   \   00000504   3031               ADDS     R1,R1,#+48
   \   00000506   6155               STRB     R1,[R4, R5]
   \   00000508   6D1C               ADDS     R5,R5,#+1
   \   0000050A   2D04               LSLS     R5,R5,#+16
   \   0000050C   2D14               ASRS     R5,R5,#+16
   \   0000050E   0DE0               B        ??HTTP_Query_24
   \                     ??HTTP_Query_23:
   \   00000510   ........           BL       GetSpecialAnalogVar
   \   00000514   6119               ADDS     R1,R4,R5
   \   00000516   0004               LSLS     R0,R0,#+16
   \   00000518   0014               ASRS     R0,R0,#+16
   \   0000051A   ........           BL       sIntToStr
   \   0000051E   6946               MOV      R1,SP
   \   00000520   0870               STRB     R0,[R1, #+0]
   \   00000522   6846               MOV      R0,SP
   \   00000524   0078               LDRB     R0,[R0, #+0]
   \   00000526   2D18               ADDS     R5,R5,R0
   \   00000528   2D04               LSLS     R5,R5,#+16
   \   0000052A   2D14               ASRS     R5,R5,#+16
   \                     ??HTTP_Query_24:
   \   0000052C   6846               MOV      R0,SP
   \   0000052E   0078               LDRB     R0,[R0, #+0]
   \                     ??HTTP_Query_25:
   \   00000530   0100               MOVS     R1,R0
   \   00000532   0429               CMP      R1,#+4
   \   00000534   00D3               BCC      .+4
   \   00000536   58E7               B        ??HTTP_Query_18
   \   00000538   2021               MOVS     R1,#+32
   \   0000053A   6155               STRB     R1,[R4, R5]
   \   0000053C   6D1C               ADDS     R5,R5,#+1
   \   0000053E   2D04               LSLS     R5,R5,#+16
   \   00000540   2D14               ASRS     R5,R5,#+16
   \   00000542   401C               ADDS     R0,R0,#+1
   \   00000544   0006               LSLS     R0,R0,#+24
   \   00000546   000E               LSRS     R0,R0,#+24
   \   00000548   F2E7               B        ??HTTP_Query_25
    901                                  break;
    902          
    903                                  
    904                                }
    905                                
    906                                
    907                              }
    908                              
    909                               Send=1;
   \                     ??HTTP_Query_12:
   \   0000054A   0126               MOVS     R6,#+1
    910                              char LengthTxt[4];
    911                              char IlLiczb=CharToStr(ContentLength,LengthTxt,3);    //(char Value, char *Vstring, char ill) 
   \   0000054C   0322               MOVS     R2,#+3
   \   0000054E   03A9               ADD      R1,SP,#+12
   \   00000550   3800               MOVS     R0,R7
   \   00000552   0006               LSLS     R0,R0,#+24
   \   00000554   000E               LSRS     R0,R0,#+24
   \   00000556   ........           BL       CharToStr
    912                              
    913                              for (char i=0; i<IlLiczb; i++)
   \   0000055A   0021               MOVS     R1,#+0
   \   0000055C   03AF               ADD      R7,SP,#+12
   \   0000055E   07E0               B        ??HTTP_Query_26
    914                              {
    915                                Buff_TX[PozLength+i]=LengthTxt[i];
   \                     ??HTTP_Query_27:
   \   00000560   6B46               MOV      R3,SP
   \   00000562   5B78               LDRB     R3,[R3, #+1]
   \   00000564   9B18               ADDS     R3,R3,R2
   \   00000566   BA5C               LDRB     R2,[R7, R2]
   \   00000568   E254               STRB     R2,[R4, R3]
    916                              }
   \   0000056A   491C               ADDS     R1,R1,#+1
   \   0000056C   0906               LSLS     R1,R1,#+24
   \   0000056E   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_Query_26:
   \   00000570   0A00               MOVS     R2,R1
   \   00000572   8242               CMP      R2,R0
   \   00000574   F4D3               BCC      ??HTTP_Query_27
    917                              
    918                    
    919                            Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000576   0A9F               LDR      R7,[SP, #+40]
   \   00000578   1837               ADDS     R7,R7,#+24
   \   0000057A   2037               ADDS     R7,R7,#+32
   \   0000057C   3048               LDR      R0,??HTTP_Query_16+0x18  ;; g_counter
   \   0000057E   03C8               LDM      R0!,{R0,R1}
   \   00000580   0200               MOVS     R2,R0
   \   00000582   0B00               MOVS     R3,R1
   \   00000584   2F48               LDR      R0,??HTTP_Query_16+0x1C  ;; 0x2710
   \   00000586   0021               MOVS     R1,#+0
   \   00000588   8018               ADDS     R0,R0,R2
   \   0000058A   5941               ADCS     R1,R1,R3
   \   0000058C   03C7               STM      R7!,{R0,R1}
    920                      break;              
    921                    }
    922                     
    923                      if (Send)
   \                     ??HTTP_Query_4:
   \   0000058E   002E               CMP      R6,#+0
   \   00000590   45D0               BEQ      ??HTTP_Query_28
    924                      {
    925                        
    926                        Buff_TX[BTS++]=0x1B;
   \   00000592   1B20               MOVS     R0,#+27
   \   00000594   6055               STRB     R0,[R4, R5]
   \   00000596   6D1C               ADDS     R5,R5,#+1
   \   00000598   2D04               LSLS     R5,R5,#+16
   \   0000059A   2D14               ASRS     R5,R5,#+16
    927                        Buff_TX[BTS++]='E';
   \   0000059C   4520               MOVS     R0,#+69
   \   0000059E   6055               STRB     R0,[R4, R5]
   \   000005A0   6D1C               ADDS     R5,R5,#+1
   \   000005A2   2D04               LSLS     R5,R5,#+16
   \   000005A4   2D14               ASRS     R5,R5,#+16
    928                        for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   000005A6   0020               MOVS     R0,#+0
   \   000005A8   0200               MOVS     R2,R0
   \   000005AA   04E0               B        ??HTTP_Query_29
   \                     ??HTTP_Query_30:
   \   000005AC   0899               LDR      R1,[SP, #+32]
   \   000005AE   0A54               STRB     R2,[R1, R0]
   \   000005B0   401C               ADDS     R0,R0,#+1
   \   000005B2   0004               LSLS     R0,R0,#+16
   \   000005B4   0014               ASRS     R0,R0,#+16
   \                     ??HTTP_Query_29:
   \   000005B6   9121               MOVS     R1,#+145
   \   000005B8   8900               LSLS     R1,R1,#+2        ;; #+580
   \   000005BA   8842               CMP      R0,R1
   \   000005BC   F6DB               BLT      ??HTTP_Query_30
    929                        if (Net->Status.HostLink==CONNECTED)
   \   000005BE   0298               LDR      R0,[SP, #+8]
   \   000005C0   0078               LDRB     R0,[R0, #+0]
   \   000005C2   0328               CMP      R0,#+3
   \   000005C4   2BD1               BNE      ??HTTP_Query_28
    930                        {
    931                            
    932                            Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   000005C6   0A9E               LDR      R6,[SP, #+40]
   \   000005C8   1836               ADDS     R6,R6,#+24
   \   000005CA   1D4F               LDR      R7,??HTTP_Query_16+0x18  ;; g_counter
   \   000005CC   3200               MOVS     R2,R6
   \   000005CE   2032               ADDS     R2,R2,#+32
   \   000005D0   9446               MOV      R12,R2
   \   000005D2   03CF               LDM      R7!,{R0,R1}
   \   000005D4   083F               SUBS     R7,R7,#+8
   \   000005D6   0200               MOVS     R2,R0
   \   000005D8   0B00               MOVS     R3,R1
   \   000005DA   1A48               LDR      R0,??HTTP_Query_16+0x1C  ;; 0x2710
   \   000005DC   0021               MOVS     R1,#+0
   \   000005DE   8018               ADDS     R0,R0,R2
   \   000005E0   5941               ADCS     R1,R1,R3
   \   000005E2   6246               MOV      R2,R12
   \   000005E4   03C2               STM      R2!,{R0,R1}
    933                            Net->Status.HttpNextQueryTime=g_counter+HTTP_QUERY_MAX_TIME;   //restart czasu pomiêdzy odpytaniami HTTP. Ustawienie Maksymalnego czasu na odpowied
   \   000005E6   3200               MOVS     R2,R6
   \   000005E8   1832               ADDS     R2,R2,#+24
   \   000005EA   9446               MOV      R12,R2
   \   000005EC   03CF               LDM      R7!,{R0,R1}
   \   000005EE   083F               SUBS     R7,R7,#+8
   \   000005F0   0200               MOVS     R2,R0
   \   000005F2   0B00               MOVS     R3,R1
   \   000005F4   1448               LDR      R0,??HTTP_Query_16+0x20  ;; 0x1388
   \   000005F6   0021               MOVS     R1,#+0
   \   000005F8   8018               ADDS     R0,R0,R2
   \   000005FA   5941               ADCS     R1,R1,R3
   \   000005FC   6246               MOV      R2,R12
   \   000005FE   03C2               STM      R2!,{R0,R1}
    934                            
    935                            AT91F_US_SendFrame(USART,Buff_TX,BTS,0, 0);                        //Wysyla ramke 
                                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

             char *PozIlByte;
                   ^
"D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\WizFiCommand.c",747  Warning[Pe177]: 
          variable "PozIlByte" was declared but never referenced
   \   00000600   82B0               SUB      SP,SP,#+8
   \   00000602   0020               MOVS     R0,#+0
   \   00000604   0090               STR      R0,[SP, #+0]
   \   00000606   0300               MOVS     R3,R0
   \   00000608   2A00               MOVS     R2,R5
   \   0000060A   2100               MOVS     R1,R4
   \   0000060C   0B98               LDR      R0,[SP, #+44]
   \   0000060E   ........           BL       AT91F_US_SendFrame
   \   00000612   02B0               ADD      SP,SP,#+8
    936                            
    937                            Net->Status.SendPacketTime=g_counter;
   \   00000614   3200               MOVS     R2,R6
   \   00000616   0832               ADDS     R2,R2,#+8
   \   00000618   03CF               LDM      R7!,{R0,R1}
   \   0000061A   03C2               STM      R2!,{R0,R1}
    938                            Net->Status.SendBytes=BTS;
   \   0000061C   3580               STRH     R5,[R6, #+0]
    939                            
    940                        }
    941                      }
    942            
    943          }
   \                     ??HTTP_Query_28:
   \   0000061E   0BB0               ADD      SP,SP,#+44
   \   00000620   F0BC               POP      {R4-R7}
   \   00000622   01BC               POP      {R0}
   \   00000624   0047               BX       R0               ;; return
   \   00000626   C046               Nop      
   \                     ??HTTP_Query_16:
   \   00000628   ........           DC32     VariablesAnal
   \   0000062C   0080FFFF           DC32     0xffff8000
   \   00000630   19FCFFFF           DC32     0xfffffc19
   \   00000634   ........           DC32     Variables
   \   00000638   ........           DC32     DateTime + 3
   \   0000063C   ........           DC32     DateTime + 4
   \   00000640   ........           DC32     g_counter
   \   00000644   10270000           DC32     0x2710
   \   00000648   88130000           DC32     0x1388
    944          
    945          
    946          
    947            
    948          
    949          
    950          
    951          

   \                                 In section Debug.txt, align 4, keep-with-next
    952          char HTTP_QueryResponse(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    953          {
   \                     HTTP_QueryResponse:
   \   00000000   F9B5               PUSH     {R0,R3-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
    954          
    955                   char *pTxt;
    956          
    957                   
    958                   //ButtonBipCounter=g_counter+1;
    959                   //AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    960                   
    961                   if ((Buff_RX[3]=='H') && (Buff_RX[4]=='T')&& (Buff_RX[5]=='T') && (Buff_RX[6]=='P')  ) //(strstr(Buff_RX, "HTTP")!=NULL)
   \   00000004   C078               LDRB     R0,[R0, #+3]
   \   00000006   4828               CMP      R0,#+72
   \   00000008   00D0               BEQ      .+4
   \   0000000A   AAE0               B        ??HTTP_QueryResponse_0
   \   0000000C   0398               LDR      R0,[SP, #+12]
   \   0000000E   0079               LDRB     R0,[R0, #+4]
   \   00000010   5428               CMP      R0,#+84
   \   00000012   00D0               BEQ      .+4
   \   00000014   A5E0               B        ??HTTP_QueryResponse_0
   \   00000016   0398               LDR      R0,[SP, #+12]
   \   00000018   4079               LDRB     R0,[R0, #+5]
   \   0000001A   5428               CMP      R0,#+84
   \   0000001C   00D0               BEQ      .+4
   \   0000001E   A0E0               B        ??HTTP_QueryResponse_0
   \   00000020   0398               LDR      R0,[SP, #+12]
   \   00000022   8079               LDRB     R0,[R0, #+6]
   \   00000024   5028               CMP      R0,#+80
   \   00000026   00D0               BEQ      .+4
   \   00000028   9BE0               B        ??HTTP_QueryResponse_0
    962                   {
    963                         //ButtonBipCounter=g_counter+10;
    964                         //AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    965                  
    966                         Net->Status.ResPacketTime=g_counter;
   \   0000002A   1800               MOVS     R0,R3
   \   0000002C   2830               ADDS     R0,R0,#+40
   \   0000002E   0090               STR      R0,[SP, #+0]
   \   00000030   0200               MOVS     R2,R0
   \   00000032   B048               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   00000034   03C8               LDM      R0!,{R0,R1}
   \   00000036   03C2               STM      R2!,{R0,R1}
    967                        
    968                         Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100); 
   \   00000038   049C               LDR      R4,[SP, #+16]
   \   0000003A   E634               ADDS     R4,R4,#+230
   \   0000003C   009D               LDR      R5,[SP, #+0]
   \   0000003E   0835               ADDS     R5,R5,#+8
   \   00000040   AC48               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   00000042   0CC8               LDM      R0!,{R2,R3}
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   205E               LDRSH    R0,[R4, R0]
   \   00000048   6421               MOVS     R1,#+100
   \   0000004A   4843               MULS     R0,R1,R0
   \   0000004C   C117               ASRS     R1,R0,#+31
   \   0000004E   8018               ADDS     R0,R0,R2
   \   00000050   5941               ADCS     R1,R1,R3
   \   00000052   03C5               STM      R5!,{R0,R1}
   \   00000054   A849               LDR      R1,??HTTP_QueryResponse_1+0x4  ;; `?<Constant "GET ">` + 80
   \   00000056   0398               LDR      R0,[SP, #+12]
    969                         pTxt=strstr(Buff_RX, "\r\n\r\n");
   \   00000058   ........           BL       strstr
   \   0000005C   0500               MOVS     R5,R0
    970                         if ((pTxt!=NULL) && (strstr(Buff_RX, "OK")!=NULL))
   \   0000005E   00D1               BNE      .+4
   \   00000060   7FE0               B        ??HTTP_QueryResponse_0
   \   00000062   A6A1               ADR      R1,??HTTP_QueryResponse_1+0x8  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000064   0398               LDR      R0,[SP, #+12]
   \   00000066   ........           BL       strstr
   \   0000006A   0028               CMP      R0,#+0
   \   0000006C   79D0               BEQ      ??HTTP_QueryResponse_0
    971                         {  
    972                           
    973                           //Net->Status.ResBytes=USART->US_RCR;
    974                           
    975                           pTxt+=4;
   \   0000006E   2D1D               ADDS     R5,R5,#+4
    976                           switch (Net->Status.CurrentOrder)     
   \   00000070   0498               LDR      R0,[SP, #+16]
   \   00000072   401C               ADDS     R0,R0,#+1
   \   00000074   0290               STR      R0,[SP, #+8]
   \   00000076   4078               LDRB     R0,[R0, #+1]
   \   00000078   0E28               CMP      R0,#+14
   \   0000007A   00D1               BNE      .+4
   \   0000007C   2DE1               B        ??HTTP_QueryResponse_2
   \   0000007E   0F28               CMP      R0,#+15
   \   00000080   73D0               BEQ      ??HTTP_QueryResponse_3
   \   00000082   1028               CMP      R0,#+16
   \   00000084   58D1               BNE      ??HTTP_QueryResponse_4
    977                                 {
    978                                    case HTTP_GET_Config:
    979                                         pTxt+=3;
   \   00000086   ED1C               ADDS     R5,R5,#+3
    980                                         Net->HTTP.VarSetCount=0;    
   \   00000088   0020               MOVS     R0,#+0
   \   0000008A   0100               MOVS     R1,R0
   \   0000008C   2171               STRB     R1,[R4, #+4]
    981                                         for (char i=0; i<VAR_SET_AMOUNT; i++) {Net->HTTP.VarSet[i].VarType=NO_Var;}  //wyczyszczenie tablicy 
   \   0000008E   08E0               B        ??HTTP_QueryResponse_5
   \                     ??HTTP_QueryResponse_6:
   \   00000090   9200               LSLS     R2,R2,#+2
   \   00000092   049B               LDR      R3,[SP, #+16]
   \   00000094   9A18               ADDS     R2,R3,R2
   \   00000096   EE32               ADDS     R2,R2,#+238
   \   00000098   0300               MOVS     R3,R0
   \   0000009A   1370               STRB     R3,[R2, #+0]
   \   0000009C   491C               ADDS     R1,R1,#+1
   \   0000009E   0906               LSLS     R1,R1,#+24
   \   000000A0   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_QueryResponse_5:
   \   000000A2   0A00               MOVS     R2,R1
   \   000000A4   282A               CMP      R2,#+40
   \   000000A6   F3D3               BCC      ??HTTP_QueryResponse_6
    982                                         //przepisanie konfiguracji do tabeli VarSet  
    983                                          while (((pTxt[0]=='a') || (pTxt[0]=='b') || (pTxt[0]=='c') || (pTxt[0]=='d')) && (Net->HTTP.VarSetCount<VAR_SET_AMOUNT))
   \                     ??HTTP_QueryResponse_7:
   \   000000A8   2978               LDRB     R1,[R5, #+0]
   \   000000AA   6129               CMP      R1,#+97
   \   000000AC   05D0               BEQ      ??HTTP_QueryResponse_8
   \   000000AE   6229               CMP      R1,#+98
   \   000000B0   03D0               BEQ      ??HTTP_QueryResponse_8
   \   000000B2   6329               CMP      R1,#+99
   \   000000B4   01D0               BEQ      ??HTTP_QueryResponse_8
   \   000000B6   6429               CMP      R1,#+100
   \   000000B8   19D1               BNE      ??HTTP_QueryResponse_9
   \                     ??HTTP_QueryResponse_8:
   \   000000BA   2179               LDRB     R1,[R4, #+4]
   \   000000BC   2829               CMP      R1,#+40
   \   000000BE   16D2               BCS      ??HTTP_QueryResponse_9
    984                                          {
    985                                             Net->HTTP.VarSet[Net->HTTP.VarSetCount].VarType=pTxt[0];
                                                                                                   ^
Warning[Pe188]: enumerated type mixed with another type

                   switch (Net->Status.CurrentOrder)     
                   ^
"D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\WizFiCommand.c",976  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "ZmType" (declared at line 1002 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.9 -
                      23.10.2012\Framework\WizFiCommand.c")
            variable "ZmNr" (declared at line 1003 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.9 -
                      23.10.2012\Framework\WizFiCommand.c")
            variable "NNW" (declared at line 1005 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.9 -
                      23.10.2012\Framework\WizFiCommand.c")
            variable "NW" (declared at line 1006 of
                      "D:\Zeuron\Projekty\S300\S300-program v0.9 -
                      23.10.2012\Framework\WizFiCommand.c")
   \   000000C0   8900               LSLS     R1,R1,#+2
   \   000000C2   049A               LDR      R2,[SP, #+16]
   \   000000C4   5118               ADDS     R1,R2,R1
   \   000000C6   EE31               ADDS     R1,R1,#+238
   \   000000C8   2A78               LDRB     R2,[R5, #+0]
   \   000000CA   0A70               STRB     R2,[R1, #+0]
    986                                             Net->HTTP.VarSet[Net->HTTP.VarSetCount].VarNr=(pTxt[1]-48)*10+(pTxt[2]-48);
   \   000000CC   2179               LDRB     R1,[R4, #+4]
   \   000000CE   8900               LSLS     R1,R1,#+2
   \   000000D0   049A               LDR      R2,[SP, #+16]
   \   000000D2   5118               ADDS     R1,R2,R1
   \   000000D4   EF31               ADDS     R1,R1,#+239
   \   000000D6   6A78               LDRB     R2,[R5, #+1]
   \   000000D8   0A23               MOVS     R3,#+10
   \   000000DA   5A43               MULS     R2,R3,R2
   \   000000DC   AB78               LDRB     R3,[R5, #+2]
   \   000000DE   D218               ADDS     R2,R2,R3
   \   000000E0   103A               SUBS     R2,R2,#+16
   \   000000E2   0A70               STRB     R2,[R1, #+0]
    987                                             Net->HTTP.VarSetCount++;
   \   000000E4   2179               LDRB     R1,[R4, #+4]
   \   000000E6   491C               ADDS     R1,R1,#+1
   \   000000E8   2171               STRB     R1,[R4, #+4]
    988                                             pTxt+=7;
   \   000000EA   ED1D               ADDS     R5,R5,#+7
   \   000000EC   DCE7               B        ??HTTP_QueryResponse_7
    989                                          }
    990                                         
    991                                         for (char i=0; i<20; i++) Buff_RX[i]=0;
   \                     ??HTTP_QueryResponse_9:
   \   000000EE   0100               MOVS     R1,R0
   \   000000F0   0600               MOVS     R6,R0
   \   000000F2   04E0               B        ??HTTP_QueryResponse_10
   \                     ??HTTP_QueryResponse_11:
   \   000000F4   039B               LDR      R3,[SP, #+12]
   \   000000F6   9E54               STRB     R6,[R3, R2]
   \   000000F8   491C               ADDS     R1,R1,#+1
   \   000000FA   0906               LSLS     R1,R1,#+24
   \   000000FC   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_QueryResponse_10:
   \   000000FE   0A00               MOVS     R2,R1
   \   00000100   142A               CMP      R2,#+20
   \   00000102   F7D3               BCC      ??HTTP_QueryResponse_11
    992                                         Net->Status.NextHttpOrder=HTTP_POST;
   \   00000104   0299               LDR      R1,[SP, #+8]
   \   00000106   0E22               MOVS     R2,#+14
   \   00000108   8A70               STRB     R2,[R1, #+2]
    993                                         Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   0000010A   0299               LDR      R1,[SP, #+8]
   \   0000010C   4870               STRB     R0,[R1, #+1]
    994                                         Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000010E   009E               LDR      R6,[SP, #+0]
   \   00000110   1036               ADDS     R6,R6,#+16
   \   00000112   7848               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   00000114   0CC8               LDM      R0!,{R2,R3}
   \   00000116   7A48               LDR      R0,??HTTP_QueryResponse_1+0xC  ;; 0x2710
   \   00000118   0021               MOVS     R1,#+0
   \   0000011A   8018               ADDS     R0,R0,R2
   \   0000011C   5941               ADCS     R1,R1,R3
   \   0000011E   03C6               STM      R6!,{R0,R1}
    995                                         Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100);   //restart czasu pomiêdzy odpytaniami HTTP.
   \   00000120   009E               LDR      R6,[SP, #+0]
   \   00000122   0836               ADDS     R6,R6,#+8
   \   00000124   7348               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   00000126   03C8               LDM      R0!,{R0,R1}
   \   00000128   0022               MOVS     R2,#+0
   \   0000012A   A25E               LDRSH    R2,[R4, R2]
   \   0000012C   6423               MOVS     R3,#+100
   \   0000012E   5A43               MULS     R2,R3,R2
   \   00000130   D317               ASRS     R3,R2,#+31
   \   00000132   1218               ADDS     R2,R2,R0
   \   00000134   4B41               ADCS     R3,R3,R1
   \   00000136   0CC6               STM      R6!,{R2,R3}
    996                                         
    997                                    break; 
    998                                    
    999                                    case HTTP_GET: 
   1000                               
   1001                                          pTxt=pTxt;
   1002                                          char ZmType=0;
   1003                                          char ZmNr=0;
   1004                                          char IlCyfr;
   1005                                          short int NNW=StrToWord(pTxt, &IlCyfr);         //numer najnowszego wpisu
   1006                                          short int NW=NNW;
   1007                                          pTxt+=IlCyfr+1;
   1008                                          ZmType=*pTxt; pTxt++;
   1009                                          ZmNr=(pTxt[0]-48)*10+pTxt[1]-48;
   1010                                          pTxt+=3;
   1011                                          while (((ZmType=='a') || (ZmType=='b') || (ZmType=='c') || (ZmType=='d')) && (NW>Net->HTTP.LastForseOrderNr) && (Net->HTTP.LastForseOrderNr!=0) )
   1012                                          {
   1013                                            switch (ZmType) 
   1014                                            {
   1015                                              case 'a':
   1016                                                  VariablesAnal[ZmNr]=StrToWord(pTxt, &IlCyfr);
   1017                                                  pTxt+=IlCyfr+2;
   1018                                              break;
   1019                                                
   1020                                              case 'b':
   1021                                                   
   1022                                                if ((*pTxt=='1')/* && (((VariablesNetTmp[ZmNr/8]>>(ZmNr%8)) & 0x1)==0)}*/)
   1023                                                 {
   1024                                                   Variables[ZmNr/8] |= 1<<(ZmNr%8);
   1025                                                  // VariablesNetTmp[ZmNr/8]=Variables[ZmNr/8];
   1026                                                 } 
   1027                                                 else /*if (((VariablesNetTmp[ZmNr/8]>>(ZmNr%8)) & 0x1)==1)*/
   1028                                                 { 
   1029                                                   Variables[ZmNr/8]&= ~(1<<(ZmNr%8));
   1030                                                  // VariablesNetTmp[ZmNr/8]=Variables[ZmNr/8];
   1031                                                 }
   1032                                                    
   1033                                                 
   1034                                                   
   1035                                                   pTxt+=3;
   1036                                              break;  
   1037                                              
   1038                                              case 'c':
   1039                       
   1040                                                  pTxt+=IlCyfr+2;
   1041                                              break;
   1042                                                
   1043                                              case 'd':
   1044                                                   if (*pTxt=='0') SetSpecialBinarVar(ZmNr, 0, Net); else SetSpecialBinarVar(ZmNr, 1, Net);   
   1045                                                   pTxt+=3;
   1046                                              break;
   1047                                            }
   1048                                            NW=StrToWord(pTxt, &IlCyfr);
   1049                                            pTxt+=IlCyfr+1;
   1050                                            ZmType=*pTxt; pTxt++;
   1051                                            ZmNr=(pTxt[0]-48)*10+pTxt[1]-48;
   1052                                            pTxt+=3;
   1053                                          
   1054                                        }
   1055                                        
   1056                                        if (NNW>Net->HTTP.LastForseOrderNr) 
   1057                                        {
   1058                                          Net->HTTP.LastForseOrderNr=NNW;
   1059                                        }else if ((NNW==0) && (Net->HTTP.LastForseOrderNr>0))
   1060                                        {
   1061                                          Net->HTTP.LastForseOrderNr=0;
   1062                                          Net->Status.NextHttpOrder=HTTP_GET_Config;
   1063                                        }
   1064                                       
   1065                                        for (char i=0; i<20; i++) Buff_RX[i]=0;
   1066                                        Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   1067                                        Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   1068                                        Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100);   //restart czasu pomiêdzy odpytaniami HTTP.
   1069                                    break; 
   1070                                    
   1071                                    case HTTP_POST:
   1072          
   1073                                        for (char i=0; i<20; i++) Buff_RX[i]=0;
   1074                                        Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   1075                                        Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   1076                                        Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100);   //restart czasu pomiêdzy odpytaniami HTTP.
   1077                                   break;
   1078                                   
   1079                                   
   1080                               } //koniec switch (Net->Status.CurrentOrder)
   1081                           
   1082                            
   1083                              //Zg³oszone zamkniête po³¹czenie
   1084                           
   1085                              if ((strstr(Buff_RX, "Connection: close")!=NULL) /*&& (Net->Status.HostLink==CONNECTED)*/) 
   \                     ??HTTP_QueryResponse_4:
   \   00000138   7249               LDR      R1,??HTTP_QueryResponse_1+0x10  ;; `?<Constant "GET ">` + 256
   \   0000013A   0398               LDR      R0,[SP, #+12]
   \   0000013C   ........           BL       strstr
   \   00000140   0028               CMP      R0,#+0
   \   00000142   0AD0               BEQ      ??HTTP_QueryResponse_12
   1086                              {
   1087                                Net->Status.FreezTime=g_counter+FREEZ_TIME;
   \   00000144   009A               LDR      R2,[SP, #+0]
   \   00000146   1832               ADDS     R2,R2,#+24
   \   00000148   6A48               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   0000014A   03C8               LDM      R0!,{R0,R1}
   \   0000014C   0023               MOVS     R3,#+0
   \   0000014E   3230               ADDS     R0,R0,#+50
   \   00000150   5941               ADCS     R1,R1,R3
   \   00000152   03C2               STM      R2!,{R0,R1}
   1088                                 Net->Status.HostLink=DISCONNECTING;                             //Roz³¹czenie
   \   00000154   0298               LDR      R0,[SP, #+8]
   \   00000156   0121               MOVS     R1,#+1
   \   00000158   0170               STRB     R1,[R0, #+0]
   1089                              }
   1090                          
   1091                           
   1092                           
   1093                           Net->Status.ResBytes=(int)pTxt -(int)Buff_RX;
   \                     ??HTTP_QueryResponse_12:
   \   0000015A   0498               LDR      R0,[SP, #+16]
   \   0000015C   0399               LDR      R1,[SP, #+12]
   \   0000015E   691A               SUBS     R1,R5,R1
   \   00000160   4183               STRH     R1,[R0, #+26]
   1094                         } //koniec if(pTxt!=NULL)
   1095                         
   1096          
   1097                   
   1098                   } 
   1099                   
   1100                
   1101            
   1102          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "HTTP_QueryResponse"
   \                     ??HTTP_QueryResponse_0:
   \   00000162   05B0               ADD      SP,SP,#+20
   \   00000164   F0BC               POP      {R4-R7}
   \   00000166   01BC               POP      {R0}
   \   00000168   0047               BX       R0               ;; return
   \                     ??HTTP_QueryResponse_3:
   \   0000016A   01A9               ADD      R1,SP,#+4
   \   0000016C   2800               MOVS     R0,R5
   \   0000016E   ........           BL       StrToWord
   \   00000172   0600               MOVS     R6,R0
   \   00000174   6946               MOV      R1,SP
   \   00000176   0979               LDRB     R1,[R1, #+4]
   \   00000178   6D18               ADDS     R5,R5,R1
   \   0000017A   6D1C               ADDS     R5,R5,#+1
   \   0000017C   2978               LDRB     R1,[R5, #+0]
   \   0000017E   6D1C               ADDS     R5,R5,#+1
   \   00000180   2A78               LDRB     R2,[R5, #+0]
   \   00000182   0A23               MOVS     R3,#+10
   \   00000184   5A43               MULS     R2,R3,R2
   \   00000186   6B78               LDRB     R3,[R5, #+1]
   \   00000188   D718               ADDS     R7,R2,R3
   \   0000018A   103F               SUBS     R7,R7,#+16
   \   0000018C   ED1C               ADDS     R5,R5,#+3
   \   0000018E   1DE0               B        ??HTTP_QueryResponse_13
   \                     ??HTTP_QueryResponse_14:
   \   00000190   01A9               ADD      R1,SP,#+4
   \   00000192   2800               MOVS     R0,R5
   \   00000194   ........           BL       StrToWord
   \   00000198   3F06               LSLS     R7,R7,#+24
   \   0000019A   3F0E               LSRS     R7,R7,#+24
   \   0000019C   7900               LSLS     R1,R7,#+1
   \   0000019E   5A4A               LDR      R2,??HTTP_QueryResponse_1+0x14  ;; VariablesAnal
   \   000001A0   5052               STRH     R0,[R2, R1]
   \   000001A2   6846               MOV      R0,SP
   \   000001A4   0079               LDRB     R0,[R0, #+4]
   \   000001A6   2D18               ADDS     R5,R5,R0
   \   000001A8   AD1C               ADDS     R5,R5,#+2
   \                     ??HTTP_QueryResponse_15:
   \   000001AA   01A9               ADD      R1,SP,#+4
   \   000001AC   2800               MOVS     R0,R5
   \   000001AE   ........           BL       StrToWord
   \   000001B2   6946               MOV      R1,SP
   \   000001B4   0979               LDRB     R1,[R1, #+4]
   \   000001B6   6D18               ADDS     R5,R5,R1
   \   000001B8   6D1C               ADDS     R5,R5,#+1
   \   000001BA   2978               LDRB     R1,[R5, #+0]
   \   000001BC   6D1C               ADDS     R5,R5,#+1
   \   000001BE   2A78               LDRB     R2,[R5, #+0]
   \   000001C0   0A23               MOVS     R3,#+10
   \   000001C2   5A43               MULS     R2,R3,R2
   \   000001C4   6B78               LDRB     R3,[R5, #+1]
   \   000001C6   D718               ADDS     R7,R2,R3
   \   000001C8   103F               SUBS     R7,R7,#+16
   \   000001CA   ED1C               ADDS     R5,R5,#+3
   \                     ??HTTP_QueryResponse_13:
   \   000001CC   6129               CMP      R1,#+97
   \   000001CE   05D0               BEQ      ??HTTP_QueryResponse_16
   \   000001D0   6229               CMP      R1,#+98
   \   000001D2   03D0               BEQ      ??HTTP_QueryResponse_16
   \   000001D4   6329               CMP      R1,#+99
   \   000001D6   01D0               BEQ      ??HTTP_QueryResponse_16
   \   000001D8   6429               CMP      R1,#+100
   \   000001DA   49D1               BNE      ??HTTP_QueryResponse_17
   \                     ??HTTP_QueryResponse_16:
   \   000001DC   0622               MOVS     R2,#+6
   \   000001DE   A25E               LDRSH    R2,[R4, R2]
   \   000001E0   8242               CMP      R2,R0
   \   000001E2   45DA               BGE      ??HTTP_QueryResponse_17
   \   000001E4   1000               MOVS     R0,R2
   \   000001E6   43D0               BEQ      ??HTTP_QueryResponse_17
   \   000001E8   6129               CMP      R1,#+97
   \   000001EA   D1D0               BEQ      ??HTTP_QueryResponse_14
   \   000001EC   6229               CMP      R1,#+98
   \   000001EE   04D0               BEQ      ??HTTP_QueryResponse_18
   \   000001F0   6329               CMP      R1,#+99
   \   000001F2   26D0               BEQ      ??HTTP_QueryResponse_19
   \   000001F4   6429               CMP      R1,#+100
   \   000001F6   29D0               BEQ      ??HTTP_QueryResponse_20
   \   000001F8   D7E7               B        ??HTTP_QueryResponse_15
   \                     ??HTTP_QueryResponse_18:
   \   000001FA   2878               LDRB     R0,[R5, #+0]
   \   000001FC   3128               CMP      R0,#+49
   \   000001FE   0FD1               BNE      ??HTTP_QueryResponse_21
   \   00000200   3F06               LSLS     R7,R7,#+24
   \   00000202   3F0E               LSRS     R7,R7,#+24
   \   00000204   3800               MOVS     R0,R7
   \   00000206   C010               ASRS     R0,R0,#+3
   \   00000208   4049               LDR      R1,??HTTP_QueryResponse_1+0x18  ;; Variables
   \   0000020A   0818               ADDS     R0,R1,R0
   \   0000020C   0278               LDRB     R2,[R0, #+0]
   \   0000020E   0121               MOVS     R1,#+1
   \   00000210   3B00               MOVS     R3,R7
   \   00000212   DB08               LSRS     R3,R3,#+3
   \   00000214   DB00               LSLS     R3,R3,#+3
   \   00000216   FB1A               SUBS     R3,R7,R3
   \   00000218   9940               LSLS     R1,R1,R3
   \   0000021A   1143               ORRS     R1,R1,R2
   \   0000021C   0170               STRB     R1,[R0, #+0]
   \   0000021E   0EE0               B        ??HTTP_QueryResponse_22
   \                     ??HTTP_QueryResponse_21:
   \   00000220   3F06               LSLS     R7,R7,#+24
   \   00000222   3F0E               LSRS     R7,R7,#+24
   \   00000224   3800               MOVS     R0,R7
   \   00000226   C010               ASRS     R0,R0,#+3
   \   00000228   3849               LDR      R1,??HTTP_QueryResponse_1+0x18  ;; Variables
   \   0000022A   0818               ADDS     R0,R1,R0
   \   0000022C   0278               LDRB     R2,[R0, #+0]
   \   0000022E   0121               MOVS     R1,#+1
   \   00000230   3B00               MOVS     R3,R7
   \   00000232   DB08               LSRS     R3,R3,#+3
   \   00000234   DB00               LSLS     R3,R3,#+3
   \   00000236   FB1A               SUBS     R3,R7,R3
   \   00000238   9940               LSLS     R1,R1,R3
   \   0000023A   8A43               BICS     R2,R2,R1
   \   0000023C   0270               STRB     R2,[R0, #+0]
   \                     ??HTTP_QueryResponse_22:
   \   0000023E   ED1C               ADDS     R5,R5,#+3
   \   00000240   B3E7               B        ??HTTP_QueryResponse_15
   \                     ??HTTP_QueryResponse_19:
   \   00000242   6846               MOV      R0,SP
   \   00000244   0079               LDRB     R0,[R0, #+4]
   \   00000246   2D18               ADDS     R5,R5,R0
   \   00000248   AD1C               ADDS     R5,R5,#+2
   \   0000024A   AEE7               B        ??HTTP_QueryResponse_15
   \                     ??HTTP_QueryResponse_20:
   \   0000024C   2878               LDRB     R0,[R5, #+0]
   \   0000024E   3028               CMP      R0,#+48
   \   00000250   049A               LDR      R2,[SP, #+16]
   \   00000252   06D1               BNE      ??HTTP_QueryResponse_23
   \   00000254   0021               MOVS     R1,#+0
   \   00000256   3800               MOVS     R0,R7
   \   00000258   0006               LSLS     R0,R0,#+24
   \   0000025A   000E               LSRS     R0,R0,#+24
   \   0000025C   ........           BL       SetSpecialBinarVar
   \   00000260   EDE7               B        ??HTTP_QueryResponse_22
   \                     ??HTTP_QueryResponse_23:
   \   00000262   0121               MOVS     R1,#+1
   \   00000264   3800               MOVS     R0,R7
   \   00000266   0006               LSLS     R0,R0,#+24
   \   00000268   000E               LSRS     R0,R0,#+24
   \   0000026A   ........           BL       SetSpecialBinarVar
   \   0000026E   E6E7               B        ??HTTP_QueryResponse_22
   \                     ??HTTP_QueryResponse_17:
   \   00000270   0620               MOVS     R0,#+6
   \   00000272   205E               LDRSH    R0,[R4, R0]
   \   00000274   B042               CMP      R0,R6
   \   00000276   01DA               BGE      ??HTTP_QueryResponse_24
   \   00000278   E680               STRH     R6,[R4, #+6]
   \   0000027A   0AE0               B        ??HTTP_QueryResponse_25
   \                     ??HTTP_QueryResponse_24:
   \   0000027C   002E               CMP      R6,#+0
   \   0000027E   08D1               BNE      ??HTTP_QueryResponse_25
   \   00000280   0620               MOVS     R0,#+6
   \   00000282   205E               LDRSH    R0,[R4, R0]
   \   00000284   0128               CMP      R0,#+1
   \   00000286   04DB               BLT      ??HTTP_QueryResponse_25
   \   00000288   0020               MOVS     R0,#+0
   \   0000028A   E080               STRH     R0,[R4, #+6]
   \   0000028C   0298               LDR      R0,[SP, #+8]
   \   0000028E   1021               MOVS     R1,#+16
   \   00000290   8170               STRB     R1,[R0, #+2]
   \                     ??HTTP_QueryResponse_25:
   \   00000292   0020               MOVS     R0,#+0
   \   00000294   0100               MOVS     R1,R0
   \   00000296   0600               MOVS     R6,R0
   \   00000298   04E0               B        ??HTTP_QueryResponse_26
   \                     ??HTTP_QueryResponse_27:
   \   0000029A   039B               LDR      R3,[SP, #+12]
   \   0000029C   9E54               STRB     R6,[R3, R2]
   \   0000029E   491C               ADDS     R1,R1,#+1
   \   000002A0   0906               LSLS     R1,R1,#+24
   \   000002A2   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_QueryResponse_26:
   \   000002A4   0A00               MOVS     R2,R1
   \   000002A6   142A               CMP      R2,#+20
   \   000002A8   F7D3               BCC      ??HTTP_QueryResponse_27
   \                     ??HTTP_QueryResponse_28:
   \   000002AA   0298               LDR      R0,[SP, #+8]
   \   000002AC   3100               MOVS     R1,R6
   \   000002AE   4170               STRB     R1,[R0, #+1]
   \   000002B0   009E               LDR      R6,[SP, #+0]
   \   000002B2   1036               ADDS     R6,R6,#+16
   \   000002B4   0F48               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   000002B6   0CC8               LDM      R0!,{R2,R3}
   \   000002B8   1148               LDR      R0,??HTTP_QueryResponse_1+0xC  ;; 0x2710
   \   000002BA   8018               ADDS     R0,R0,R2
   \   000002BC   5941               ADCS     R1,R1,R3
   \   000002BE   03C6               STM      R6!,{R0,R1}
   \   000002C0   009E               LDR      R6,[SP, #+0]
   \   000002C2   0836               ADDS     R6,R6,#+8
   \   000002C4   0B48               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   000002C6   03C8               LDM      R0!,{R0,R1}
   \   000002C8   0022               MOVS     R2,#+0
   \   000002CA   A25E               LDRSH    R2,[R4, R2]
   \   000002CC   6423               MOVS     R3,#+100
   \   000002CE   5A43               MULS     R2,R3,R2
   \   000002D0   D317               ASRS     R3,R2,#+31
   \   000002D2   1218               ADDS     R2,R2,R0
   \   000002D4   4B41               ADCS     R3,R3,R1
   \   000002D6   0CC6               STM      R6!,{R2,R3}
   \   000002D8   2EE7               B        ??HTTP_QueryResponse_4
   \                     ??HTTP_QueryResponse_2:
   \   000002DA   0020               MOVS     R0,#+0
   \   000002DC   0100               MOVS     R1,R0
   \   000002DE   0600               MOVS     R6,R0
   \                     ??HTTP_QueryResponse_29:
   \   000002E0   0A00               MOVS     R2,R1
   \   000002E2   142A               CMP      R2,#+20
   \   000002E4   E1D2               BCS      ??HTTP_QueryResponse_28
   \   000002E6   039B               LDR      R3,[SP, #+12]
   \   000002E8   9E54               STRB     R6,[R3, R2]
   \   000002EA   491C               ADDS     R1,R1,#+1
   \   000002EC   0906               LSLS     R1,R1,#+24
   \   000002EE   090E               LSRS     R1,R1,#+24
   \   000002F0   F6E7               B        ??HTTP_QueryResponse_29
   \   000002F2   C046               Nop      
   \                     ??HTTP_QueryResponse_1:
   \   000002F4   ........           DC32     g_counter
   \   000002F8   ........           DC32     `?<Constant "GET ">` + 80
   \   000002FC   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000300   10270000           DC32     0x2710
   \   00000304   ........           DC32     `?<Constant "GET ">` + 256
   \   00000308   ........           DC32     VariablesAnal
   \   0000030C   ........           DC32     Variables
   1103          
   1104          
   1105          

   \                                 In section Debug.txt, align 4, keep-with-next
   1106          void HTTP_CheckConnection(char *Buff_TX, AT91PS_USART USART, _Net *Net)
   1107          {
   \                     HTTP_CheckConnection:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0E00               MOVS     R6,R1
   \   00000004   1400               MOVS     R4,R2
   1108             Net->Status.FreezTime=g_counter+FREEZ_TIME; //rezerwowanie czasu
   \   00000006   0F4D               LDR      R5,??HTTP_CheckConnection_0  ;; g_counter
   \   00000008   03CD               LDM      R5!,{R0,R1}
   \   0000000A   083D               SUBS     R5,R5,#+8
   \   0000000C   0022               MOVS     R2,#+0
   \   0000000E   3230               ADDS     R0,R0,#+50
   \   00000010   5141               ADCS     R1,R1,R2
   \   00000012   2064               STR      R0,[R4, #+64]
   \   00000014   6164               STR      R1,[R4, #+68]
   1109             Net->Status.CurrentOrder=WizFi_AT_CID;     
   \   00000016   0D20               MOVS     R0,#+13
   \   00000018   A070               STRB     R0,[R4, #+2]
   1110             AT91F_US_SendFrame(USART,(char*)AT_CID,sizeof(AT_CID)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000001A   82B0               SUB      SP,SP,#+8
   \   0000001C   1000               MOVS     R0,R2
   \   0000001E   0090               STR      R0,[SP, #+0]
   \   00000020   0300               MOVS     R3,R0
   \   00000022   0922               MOVS     R2,#+9
   \   00000024   0849               LDR      R1,??HTTP_CheckConnection_0+0x4  ;; AT_CID
   \   00000026   3000               MOVS     R0,R6
   \   00000028   ........           BL       AT91F_US_SendFrame
   \   0000002C   02B0               ADD      SP,SP,#+8
   1111             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002E   3834               ADDS     R4,R4,#+56
   \   00000030   0CCD               LDM      R5!,{R2,R3}
   \   00000032   0648               LDR      R0,??HTTP_CheckConnection_0+0x8  ;; 0x2710
   \   00000034   0021               MOVS     R1,#+0
   \   00000036   8018               ADDS     R0,R0,R2
   \   00000038   5941               ADCS     R1,R1,R3
   \   0000003A   03C4               STM      R4!,{R0,R1}
   1112             
   1113          }
   \   0000003C   70BC               POP      {R4-R6}
   \   0000003E   01BC               POP      {R0}
   \   00000040   0047               BX       R0               ;; return
   \   00000042   C046               Nop      
   \                     ??HTTP_CheckConnection_0:
   \   00000044   ........           DC32     g_counter
   \   00000048   ........           DC32     AT_CID
   \   0000004C   10270000           DC32     0x2710
   1114          

   \                                 In section Debug.txt, align 4, keep-with-next
   1115          char HTTP_CheckConnectionResponse(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
   1116          {
   \                     HTTP_CheckConnectionResponse:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1C00               MOVS     R4,R3
   1117             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   6846               MOV      R0,SP
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   0170               STRB     R1,[R0, #+0]
   1118             char *ptr;
                          ^
Warning[Pe177]: variable "ptr" was declared but never referenced
   1119             
   1120          
   1121          
   1122                  if ((strstr(Buff_RX, "[ERROR")!=NULL) || (strstr(Buff_RX, "No valid Cids")!=NULL))    //((Buff_RX, "[ERROR")!=NULL) ||       strstr(Buff_RX, "No valid Cids")!=NULL)
   \   0000000E   2B4F               LDR      R7,??HTTP_CheckConnectionResponse_0  ;; `?<Constant "[CONNECT">`
   \   00000010   3900               MOVS     R1,R7
   \   00000012   1431               ADDS     R1,R1,#+20
   \   00000014   3000               MOVS     R0,R6
   \   00000016   ........           BL       strstr
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   06D1               BNE      ??HTTP_CheckConnectionResponse_1
   \   0000001E   1C37               ADDS     R7,R7,#+28
   \   00000020   3900               MOVS     R1,R7
   \   00000022   3000               MOVS     R0,R6
   \   00000024   ........           BL       strstr
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   19D0               BEQ      ??HTTP_CheckConnectionResponse_2
   1123                  {
   1124                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \                     ??HTTP_CheckConnectionResponse_1:
   \   0000002C   2800               MOVS     R0,R5
   \   0000002E   2A00               MOVS     R2,R5
   \   00000030   03E0               B        ??HTTP_CheckConnectionResponse_3
   \                     ??HTTP_CheckConnectionResponse_4:
   \   00000032   7254               STRB     R2,[R6, R1]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   0006               LSLS     R0,R0,#+24
   \   00000038   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_CheckConnectionResponse_3:
   \   0000003A   0100               MOVS     R1,R0
   \   0000003C   3229               CMP      R1,#+50
   \   0000003E   F8D3               BCC      ??HTTP_CheckConnectionResponse_4
   1125                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000040   2600               MOVS     R6,R4
   \   00000042   3836               ADDS     R6,R6,#+56
   \   00000044   1E48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x4  ;; g_counter
   \   00000046   0CC8               LDM      R0!,{R2,R3}
   \   00000048   1E48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x8  ;; 0x2710
   \   0000004A   2900               MOVS     R1,R5
   \   0000004C   8018               ADDS     R0,R0,R2
   \   0000004E   5941               ADCS     R1,R1,R3
   \   00000050   03C6               STM      R6!,{R0,R1}
   1126                    Net->Status.FreezTime=0;
   \   00000052   2800               MOVS     R0,R5
   \   00000054   0100               MOVS     R1,R0
   \   00000056   2064               STR      R0,[R4, #+64]
   \   00000058   6164               STR      R1,[R4, #+68]
   1127                    Net->Status.HostLink=DISCONNECTED;
   \   0000005A   6070               STRB     R0,[R4, #+1]
   1128                    Net->Status.CurrentOrder=WizFi_NC;
   \   0000005C   A570               STRB     R5,[R4, #+2]
   \   0000005E   28E0               B        ??HTTP_CheckConnectionResponse_5
   1129                  }else if(strstr(Buff_RX, "[OK")!=NULL)
   \                     ??HTTP_CheckConnectionResponse_2:
   \   00000060   19A1               ADR      R1,??HTTP_CheckConnectionResponse_0+0xC  ;; "[OK"
   \   00000062   3000               MOVS     R0,R6
   \   00000064   ........           BL       strstr
   \   00000068   0028               CMP      R0,#+0
   \   0000006A   22D0               BEQ      ??HTTP_CheckConnectionResponse_5
   1130                  {
   1131                    odp=1;  //ok 
   \   0000006C   6846               MOV      R0,SP
   \   0000006E   0121               MOVS     R1,#+1
   \   00000070   0170               STRB     R1,[R0, #+0]
   1132                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000072   2800               MOVS     R0,R5
   \   00000074   2A00               MOVS     R2,R5
   \   00000076   03E0               B        ??HTTP_CheckConnectionResponse_6
   \                     ??HTTP_CheckConnectionResponse_7:
   \   00000078   7254               STRB     R2,[R6, R1]
   \   0000007A   401C               ADDS     R0,R0,#+1
   \   0000007C   0006               LSLS     R0,R0,#+24
   \   0000007E   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_CheckConnectionResponse_6:
   \   00000080   0100               MOVS     R1,R0
   \   00000082   3229               CMP      R1,#+50
   \   00000084   F8D3               BCC      ??HTTP_CheckConnectionResponse_7
   1133                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000086   2700               MOVS     R7,R4
   \   00000088   3837               ADDS     R7,R7,#+56
   \   0000008A   0D48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x4  ;; g_counter
   \   0000008C   03C8               LDM      R0!,{R0,R1}
   \   0000008E   0200               MOVS     R2,R0
   \   00000090   0B00               MOVS     R3,R1
   \   00000092   0C48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x8  ;; 0x2710
   \   00000094   2900               MOVS     R1,R5
   \   00000096   8018               ADDS     R0,R0,R2
   \   00000098   5941               ADCS     R1,R1,R3
   \   0000009A   03C7               STM      R7!,{R0,R1}
   1134                    Net->Status.CurrentOrder=WizFi_NC;
   \   0000009C   A570               STRB     R5,[R4, #+2]
   1135                    HTTP_Task(Buff_RX, Buff_TX,USART, Net);                                //wykonaj kolejne zadanie HTTP
   \   0000009E   2300               MOVS     R3,R4
   \   000000A0   029A               LDR      R2,[SP, #+8]
   \   000000A2   0199               LDR      R1,[SP, #+4]
   \   000000A4   3000               MOVS     R0,R6
   \   000000A6   ........           BL       HTTP_Task
   1136                    Net->Status.FreezTime=0;
   \   000000AA   4034               ADDS     R4,R4,#+64
   \   000000AC   2800               MOVS     R0,R5
   \   000000AE   0100               MOVS     R1,R0
   \   000000B0   03C4               STM      R4!,{R0,R1}
   1137                  }
   1138                    
   1139            
   1140             return odp;
   \                     ??HTTP_CheckConnectionResponse_5:
   \   000000B2   6846               MOV      R0,SP
   \   000000B4   0078               LDRB     R0,[R0, #+0]
   \   000000B6   FEBC               POP      {R1-R7}
   \   000000B8   02BC               POP      {R1}
   \   000000BA   0847               BX       R1               ;; return
   \                     ??HTTP_CheckConnectionResponse_0:
   \   000000BC   ........           DC32     `?<Constant "[CONNECT">`
   \   000000C0   ........           DC32     g_counter
   \   000000C4   10270000           DC32     0x2710
   \   000000C8   5B4F4B00           DC8      "[OK"
   1141          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     g_counter

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   10270000           DC32     0x2710

   \                                 In section .rodata, align 4
   \   00000000   4F4B00             DC8 "OK"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   49503A00           DC8 "IP:"

   \                                 In section .rodata, align 4
   \                     `?<Constant "[CONNECT">`:
   \   00000000   5B434F4E4E45       DC8 "[CONNECT"
   \              435400      
   \   00000009   000000             DC8 0, 0, 0
   \   0000000C   4E4F20434944       DC8 "NO CID]"
   \              5D00        
   \   00000014   5B4552524F52       DC8 "[ERROR"
   \              00          
   \   0000001B   00                 DC8 0
   \   0000001C   4E6F2076616C       DC8 "No valid Cids"
   \              696420436964
   \              7300        
   \   0000002A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "GET ">`:
   \   00000000   4745542000         DC8 "GET "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   2E6373762048       DC8 ".csv HTTP/1.1\015\012"
   \              5454502F312E
   \              310D0A00    
   \   00000018   557365722D41       DC8 "User-Agent: CEURON\015\012Host: "
   \              67656E743A20
   \              434555524F4E
   \              0D0A486F7374
   \              3A2000      
   \   00000033   00                 DC8 0
   \   00000034   436F6E6E6563       DC8 "Connection: keep-alive\015\012"
   \              74696F6E3A20
   \              6B6565702D61
   \              6C6976650D0A
   \              00          
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   0D0A0D0A00         DC8 "\015\012\015\012"
   \   00000055   000000             DC8 0, 0, 0
   \   00000058   504F53542000       DC8 "POST "
   \   0000005E   0000               DC8 0, 0
   \   00000060   2F7075746761       DC8 "/putgate.php HTTP/1.1\015\012User-Agent: CEURON\015\012Host: "
   \              74652E706870
   \              20485454502F
   \              312E310D0A55
   \              7365722D4167
   \              656E743A2043
   \              4555524F4E0D
   \              0A486F73743A
   \              2000        
   \   00000092   0000               DC8 0, 0
   \   00000094   0D0A436F6E74       DC8 "\015\012Content-Length: "
   \              656E742D4C65
   \              6E6774683A20
   \              00          
   \   000000A7   00                 DC8 0
   \   000000A8   0D0A436F6E74       DC8 0DH, 0AH, 43H, 6FH, 6EH, 74H, 65H, 6EH
   \              656E        
   \   000000B0   742D54797065       DC8 74H, 2DH, 54H, 79H, 70H, 65H, 3AH, 20H
   \              3A20        
   \   000000B8   6170706C6963       DC8 61H, 70H, 70H, 6CH, 69H, 63H, 61H, 74H
   \              6174        
   \   000000C0   696F6E2F782D       DC8 69H, 6FH, 6EH, 2FH, 78H, 2DH, 77H, 77H
   \              7777        
   \   000000C8   772D666F726D       DC8 77H, 2DH, 66H, 6FH, 72H, 6DH, 2DH, 75H
   \              2D75        
   \   000000D0   726C656E636F       DC8 72H, 6CH, 65H, 6EH, 63H, 6FH, 64H, 65H
   \              6465        
   \   000000D8   640D0A0D0A4E       DC8 64H, 0DH, 0AH, 0DH, 0AH, 4EH, 6FH, 64H
   \              6F64        
   \   000000E0   6549443D00         DC8 65H, 49H, 44H, 3DH, 0
   \   000000E5   000000             DC8 0, 0, 0
   \   000000E8   264F72646572       DC8 "&Order=1&Content=;\015\012"
   \              3D3126436F6E
   \              74656E743D3B
   \              0D0A00      
   \   000000FD   000000             DC8 0, 0, 0
   \   00000100   436F6E6E6563       DC8 "Connection: close"
   \              74696F6E3A20
   \              636C6F736500
   \   00000112   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   2F646300           DC8 "/dc"

   \                                 In section .rodata, align 4
   \   00000000   256400             DC8 "%d"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   2E00               DC8 "."
   \   00000002   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0D0A00             DC8 "\015\012"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   2F646F00           DC8 "/do"

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "

   \                                 In section .rodata, align 4
   \   00000000   5B4F4B00           DC8 "[OK"

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     AT91F_PDC_IsNextTxEmpty             0
     AT91F_PDC_IsTxEmpty                 0
     AT91F_PDC_SendFrame                24
     AT91F_PDC_SetNextTx                 0
     AT91F_PDC_SetTx                     0
     AT91F_US_SendFrame                 16
     CheckExistDomenaIP                 16
     GetSpecialAnalogVar                 8
     GetSpecialBinarVar                  8
     HTTP_CheckConnection               24
     HTTP_CheckConnectionResponse       32
     HTTP_Query                         72
     HTTP_QueryResponse                 40
     SetSpecialBinarVar                 16
     StrToWord                          32
     WizFiCommand_AT                    24
     WizFiCommand_AT_DNSLOOKUP          32
     WizFiCommand_AT_NCLOSEALL          24
     WizFiCommand_AT_NCTCP              48
     WizFiCommand_AT_NDHCP              24
     WizFiCommand_AT_NSET               32
     WizFiCommand_AT_WA                 32
     WizFiCommand_AT_WD                 24
     WizFiCommand_AT_WWEP1              32
     WizFiCommand_AT_WWPA               32
     WizFiCommand_AT_XDUM0              24
     WizFiResponseCommand_AT            24
     WizFiResponseCommand_AT_DNSLOOKUP
                                        24
     WizFiResponseCommand_AT_NCLOSEALL0
                                        24
     WizFiResponseCommand_AT_NCTCP      32
     WizFiResponseCommand_AT_NDHCP      24
     WizFiResponseCommand_AT_NSET       24
     WizFiResponseCommand_AT_WA         24
     WizFiResponseCommand_AT_WD         24
     WizFiResponseCommand_AT_WWEP1      24
     WizFiResponseCommand_AT_WWPA       24
     WizFiResponseCommand_AT_XDUM0      24
     strstr                              8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     AT91F_PDC_SetNextTx               6
     AT91F_PDC_SetTx                   6
     AT91F_PDC_IsTxEmpty              10
     AT91F_PDC_IsNextTxEmpty          10
     AT91F_PDC_SendFrame              70
     AT91F_US_SendFrame               26
     strstr                           12
     AT                                4
     AT_XDUM0                         12
     AT_WD                             8
     AT_NDHCP_0                       24
     AT_NSET                          12
     AT_WWEP1                         12
     AT_WWPA                          12
     AT_WA                             8
     AT_DNSLOOKUP                     16
     AT_NCTCP                         12
     AT_NCLOSEALL                     16
     AT_WS                             8
     AT_CID                           12
     WizFiCommand_AT                 136
     WizFiResponseCommand_AT          80
     WizFiCommand_AT_XDUM0            80
     WizFiResponseCommand_AT_XDUM0    80
     WizFiCommand_AT_NCLOSEALL        84
     WizFiResponseCommand_AT_NCLOSEALL0
                                      72
     WizFiCommand_AT_WD               80
     WizFiResponseCommand_AT_WD       80
     WizFiCommand_AT_NDHCP           108
     WizFiResponseCommand_AT_NDHCP    88
     WizFiCommand_AT_NSET            276
     WizFiResponseCommand_AT_NSET     88
     WizFiCommand_AT_WWEP1           164
     WizFiResponseCommand_AT_WWEP1    88
     WizFiCommand_AT_WWPA            164
     WizFiResponseCommand_AT_WWPA     88
     WizFiCommand_AT_WA              172
     WizFiResponseCommand_AT_WA       92
     CheckExistDomenaIP              148
     WizFiCommand_AT_DNSLOOKUP       216
     WizFiResponseCommand_AT_DNSLOOKUP
                                     144
     WizFiCommand_AT_NCTCP           336
     WizFiResponseCommand_AT_NCTCP   224
     StrToWord                       110
     GetSpecialAnalogVar             124
     GetSpecialBinarVar              104
     SetSpecialBinarVar              212
     HTTP_Query                     1612
     HTTP_QueryResponse              784
     HTTP_CheckConnection             80
     HTTP_CheckConnectionResponse    204
     ??DataTable17                     4
     ??DataTable18                     4
     ?<Constant "OK">                  4
     ?<Constant "IP:">                 4
     ?<Constant "[CONNECT">           44
     ?<Constant "GET ">              276
     ?<Constant "/dc">                 4
     ?<Constant "%d">                  4
     ?<Constant ".">                   4
     ?<Constant "\r\n">                4
     ?<Constant "/do">                 4
     ?<Constant "   ">                 4
     ?<Constant "[OK">                 4

 
   512 bytes in section .rodata
 6 466 bytes in section Debug.txt
 
 6 326 bytes of CODE  memory (+ 140 bytes shared)
   512 bytes of CONST memory

Errors: none
Warnings: 22
