###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           23/Oct/2012  20:58:08 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v0.9 -              #
#                    23.10.2012\Framework\main.c                              #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\Framework\main.c" -D AT91SAM7S256 -D          #
#                    AT91SAM7SEK -D iH -D __ALARM -D S300 -lC                 #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\S300\List\" --diag_suppress Pa082 -o          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\S300\Obj\" --no_unroll --no_inline --no_tbaa  #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v0.9 -     #
#                    23.10.2012\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v0.9 - 23.10.2012\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v0.9 - 23.10.2012\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v0.9 - 23.10.2012\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.9 -             #
#                    23.10.2012\Framework\Configuration\" -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=Debug.txt --interwork --cpu_mode thumb   #
#                    -Om                                                      #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v0.9 -              #
#                    23.10.2012\S300\List\main.lst                            #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v0.9 -              #
#                    23.10.2012\S300\Obj\main.o                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\main.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//                     
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : main.c                                   *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21            
     22          
     23          
     24          //Sta³e ------------------------------------------------------------------------
     25          #ifdef S300

   \                                 In section .rodata, align 4
     26              const char identyfikacja[]="S300 ";                                          //nazwa urz¹dzeni 
   \                     identyfikacja:
   \   00000000   533330302000       DC8 "S300 "
   \   00000006   0000               DC8 0, 0
     27          #endif
     28          #ifdef S300i
     29              const char identyfikacja[]="S300-i ";                                          //nazwa urz¹dzeni 
     30          #endif
     31          #ifdef S300iMax
     32              const char identyfikacja[]="S300-iMax ";                                          //nazwa urz¹dzeni 
     33          #endif
     34          #ifdef S300iOld
     35              const char identyfikacja[]="S300-i(Old) ";                                          //nazwa urz¹dzeni 
     36          #endif
     37              

   \                                 In section .rodata, align 4
     38              const char system[]="0.9 ";                                                  //nazwa urz¹dzeni 
   \                     system:
   \   00000000   302E392000         DC8 "0.9 "
   \   00000005   000000             DC8 0, 0, 0
     39              
     40          //____________________________Koniec sta³ych ___________________________________
     41          
     42          
     43          
     44          //Konfiguracja -----------------------------------------------------------------
     45              #define LightLCD_Time              10                                     //czas (s sek.) wygaszania podœwietlenia
     46          //___________________________Koniec konfiguracji________________________________
     47          
     48          
     49          
     50          
     51          //Definicje --------------------------------------------------------------------
     52              #define MSG_SIZE 	                1000                                    
     53              #define TAB_SIZE                    1000                                    
     54              #define USB_BUFFER_SIZE             256                                     //bufor odbiorczy USB  
     55             
     56             // #define NOTRACES                                                            //Wy³¹cza debagowania poprzez US1
     57              
     58          //___________________________Koniec definicji___________________________________
     59          
     60          
     61          
     62          // Pliki do³¹czane -------------------------------------------------------------
     63          
     64               #include "main_H.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_AIC_ConfigureIt(AT91PS_AIC, unsigned int, unsigned int, unsigned int, void (*)())
   \                     AT91F_AIC_ConfigureIt:
   \   00000000   F5B4               PUSH     {R0,R2,R4-R7}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   069E               LDR      R6,[SP, #+24]
   \   00000008   A100               LSLS     R1,R4,#+2
   \   0000000A   5718               ADDS     R7,R2,R1
   \   0000000C   8037               ADDS     R7,R7,#+128
   \   0000000E   3868               LDR      R0,[R7, #+0]
   \   00000010   0125               MOVS     R5,#+1
   \   00000012   A540               LSLS     R5,R5,R4
   \   00000014   2C00               MOVS     R4,R5
   \   00000016   9225               MOVS     R5,#+146
   \   00000018   6D00               LSLS     R5,R5,#+1        ;; #+292
   \   0000001A   5519               ADDS     R5,R2,R5
   \   0000001C   2C60               STR      R4,[R5, #+0]
   \   0000001E   3E60               STR      R6,[R7, #+0]
   \   00000020   019E               LDR      R6,[SP, #+4]
   \   00000022   1E43               ORRS     R6,R6,R3
   \   00000024   5650               STR      R6,[R2, R1]
   \   00000026   6C60               STR      R4,[R5, #+4]
   \   00000028   FCBC               POP      {R2-R7}
   \   0000002A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_AIC_EnableIt(AT91PS_AIC, unsigned int)
   \                     AT91F_AIC_EnableIt:
   \   00000000   9022               MOVS     R2,#+144
   \   00000002   5200               LSLS     R2,R2,#+1        ;; #+288
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   8B40               LSLS     R3,R3,R1
   \   00000008   8350               STR      R3,[R0, R2]
   \   0000000A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgOutput:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   0161               STR      R1,[R0, #+16]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgInput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgInput:
   \   00000000   4161               STR      R1,[R0, #+20]
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPullup(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgPullup:
   \   00000000   CA43               MVNS     R2,R1
   \   00000002   0266               STR      R2,[R0, #+96]
   \   00000004   4166               STR      R1,[R0, #+100]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_InterruptEnable(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_InterruptEnable:
   \   00000000   0164               STR      R1,[R0, #+64]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PIO_GetInterruptStatus(AT91PS_PIO)
   \                     AT91F_PIO_GetInterruptStatus:
   \   00000000   C06C               LDR      R0,[R0, #+76]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_WDTRestart(AT91PS_WDTC)
   \                     AT91F_WDTRestart:
   \   00000000   0149               LDR      R1,??AT91F_WDTRestart_0  ;; 0xa5000001
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??AT91F_WDTRestart_0:
   \   00000008   010000A5           DC32     0xa5000001

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_LCD_Init()
   \                     AT91F_LCD_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   2348               LDR      R0,??AT91F_LCD_Init_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   234C               LDR      R4,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000000C   0421               MOVS     R1,#+4
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       AT91F_PIO_CfgOutput
   \   00000014   8021               MOVS     R1,#+128
   \   00000016   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   ........           BL       AT91F_PIO_CfgOutput
   \   0000001E   8021               MOVS     R1,#+128
   \   00000020   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       AT91F_PIO_CfgOutput
   \   00000028   8021               MOVS     R1,#+128
   \   0000002A   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   0000002C   2000               MOVS     R0,R4
   \   0000002E   ........           BL       AT91F_PIO_CfgOutput
   \   00000032   8021               MOVS     R1,#+128
   \   00000034   0905               LSLS     R1,R1,#+20       ;; #+134217728
   \   00000036   2000               MOVS     R0,R4
   \   00000038   ........           BL       AT91F_PIO_CfgOutput
   \   0000003C   1021               MOVS     R1,#+16
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       AT91F_PIO_CfgOutput
   \   00000044   8021               MOVS     R1,#+128
   \   00000046   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       AT91F_PIO_CfgOutput
   \   0000004E   8021               MOVS     R1,#+128
   \   00000050   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   00000052   2000               MOVS     R0,R4
   \   00000054   ........           BL       AT91F_PIO_CfgOutput
   \   00000058   8021               MOVS     R1,#+128
   \   0000005A   8904               LSLS     R1,R1,#+18       ;; #+33554432
   \   0000005C   2000               MOVS     R0,R4
   \   0000005E   ........           BL       AT91F_PIO_CfgOutput
   \   00000062   8021               MOVS     R1,#+128
   \   00000064   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000066   2000               MOVS     R0,R4
   \   00000068   ........           BL       AT91F_PIO_CfgOutput
   \   0000006C   8021               MOVS     R1,#+128
   \   0000006E   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   00000070   2000               MOVS     R0,R4
   \   00000072   ........           BL       AT91F_PIO_CfgOutput
   \   00000076   8021               MOVS     R1,#+128
   \   00000078   0904               LSLS     R1,R1,#+16       ;; #+8388608
   \   0000007A   2000               MOVS     R0,R4
   \   0000007C   ........           BL       AT91F_PIO_CfgOutput
   \   00000080   0121               MOVS     R1,#+1
   \   00000082   2000               MOVS     R0,R4
   \   00000084   ........           BL       AT91F_PIO_CfgOutput
   \   00000088   0448               LDR      R0,??AT91F_LCD_Init_0+0x8  ;; 0xfffff430
   \   0000008A   0549               LDR      R1,??AT91F_LCD_Init_0+0xC  ;; 0x7e00811c
   \   0000008C   0160               STR      R1,[R0, #+0]
   \   0000008E   10BC               POP      {R4}
   \   00000090   01BC               POP      {R0}
   \   00000092   0047               BX       R0               ;; return
   \                     ??AT91F_LCD_Init_0:
   \   00000094   00FCFFFF           DC32     0xfffffc00
   \   00000098   00F4FFFF           DC32     0xfffff400
   \   0000009C   30F4FFFF           DC32     0xfffff430
   \   000000A0   1C81007E           DC32     0x7e00811c

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void *USB_GetDriverInterface(S_usb const *)
   \                     USB_GetDriverInterface:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetDriverID(S_usb const *)
   \                     USB_GetDriverID:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   C068               LDR      R0,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Handler(S_usb const *)
   \                     USB_Handler:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   896A               LDR      R1,[R1, #+40]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork bool USB_Attach(S_usb const *)
   \                     USB_Attach:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C969               LDR      R1,[R1, #+28]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   02BC               POP      {R1}
   \   00000010   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Connect(S_usb const *)
   \                     USB_Connect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C96A               LDR      R1,[R1, #+44]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Disconnect(S_usb const *)
   \                     USB_Disconnect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   096B               LDR      R1,[R1, #+48]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetState(S_usb const *)
   \                     USB_GetState:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0004               LSLS     R0,R0,#+16
   \   00000006   000C               LSRS     R0,R0,#+16
   \   00000008   7047               BX       LR               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     65               #include "WizFi.h"

   
   ^
"D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\WizFi.h",147  Warning[Pe001]: 
          last line of file ends without a newline
     66          
     67          
     68          
     69          //-----------------------Koniec plików do³¹czanych -----------------------------
     70          
     71          
     72          
     73          
     74          
     75          
     76          
     77          
     78          
     79          

   \                                 In section .bss, align 1
     80          char APC;
   \                     APC:
   \   00000000                      DS8 1
     81          
     82          
     83          
     84          
     85          
     86          //Zmienne globalne -------------------------------------------------------------

   \                                 In section .data, align 1
     87              char g_czas_petli = 10;                                                     //  Czas przebiegu pêtli programu w ms
   \                     g_czas_petli:
   \   00000000   0A                 DC8 10

   \                                 In section .bss, align 4
     88              unsigned int komunikacja_ok=0;                                              //1-ok, 0-brak
   \                     komunikacja_ok:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     89              int  rej_prog[10];
   \                     rej_prog:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     90              int LifeCouter = 0, LifeCouterMax = 0;                                      // Zmienne funkcji LifeBlinking
   \                     LifeCouter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     LifeCouterMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     91              byte USB_busy;
   \                     USB_busy:
   \   00000000                      DS8 1
     92              int FlashProgramOfset =  256;                                               //0-wykonywany program A, 
     93              int FlashProgramReserveOfset =  256+UseProgramSize;                         //0-wykonywany program A, 

   \                                 In section .bss, align 4
     94              int  advY =0;                                                                  //chwilowa wspolzedna Y TP
   \                     advY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     95              int  advX =0;                                                                  //chwilowa wspolzedna X TP
   \                     advX:
   \   00000000                      DS8 4
     96               signed short  Y_down  =-1;                                                           //wspolzedna Y TP (naciœniêcie)
     97               signed short  X_down  =-1;                                                           //wspolzedna X TP (naciœniêcie)
     98               signed short  Y_up    =-1;                                                           //wspolzedna Y TP (puszczenie)
     99               signed short  X_up    =-1;                                                           //wspolzedna X TP (puszczenie)

   \                                 In section .bss, align 4
    100              int  g_leng  =0;                                                            //jêzyk 1-polski, 2 angielski
   \                     g_leng:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    101              char g_level =0;                                                            //poziom dostêpu 0-ograniczony, 1- operator, 2-administrator
   \                     g_level:
   \   00000000                      DS8 1
    102              char g_Password_1[8]={"1111"};                                              //haslo poziomu 1  
    103              char g_Password_2[8]={"2222"};                                              //haslo poziomu 1  

   \                                 In section .bss, align 4
    104              long int g_Message =0;                                                             //1-wiadomosc ekranowa
   \                     g_Message:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    105              int g_info=0;                                                                   
   \                     g_info:
   \   00000000                      DS8 4
    106              char g_PC_Connected;                                                       //1-pod³aczony komputer
    107              unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
    108              unsigned long       g_seconds_counter;                                      //globalny licznik sekundowy od w³¹czenia/restartu sterownika
    109              
    110          //    static char US0_Buffer[US_BUFFER_SIZE];                                    //bufor odbiorczy USART 0
    111          //    static char US0_Buffer2[US_BUFFER_SIZE];                                   //zapasowy bufor odbiorczy USART 0
    112              char AdressModbus = 1;                                                      //Adres urz¹dzenia dla protoko³u modbus
    113              int g_LightCouterLCD = 0;                                                   //licznik podœwietlenia lcd
    114              char g_LightLCDEnable = 0;                                                   //podœwietlenia lcd
    115              char g_ScreenSever_On;                                                      //1-Wygaszacz aktywny
    116              char g_ScreenSever_Time_On;                                                 //godzina w³¹czenia wygaszacz
    117              char g_ScreenSever_Time_Off;                                                //godzina wy³¹czenia wygaszacza
    118              char g_SlaveConnect=0;                                                   //
    119              char g_Stop_Program = 0;                                                    //1- zatrzymuje program
    120              char g_Restart_Program = 1;                                                 //1- restartuje program
    121              unsigned long long g_NextTimeProgram = 0;                                                    //
    122              char g_NeedPass=0;  //wymóg has³a
    123              char AlarmOn=0;                                                             //1=alarm dzwiêkowy
    124              char Speaker[SPK_Amount];                                                   //sygna³ dŸwiêkowy
    125              _AlarmScreenActionType AlarmScreenAction;

   \                                 In section .bss, align 8
    126              _Net NET; 
   \                     NET:
   \   00000000                      DS8 400
    127              //___________________________Koniec zmiennych globalnych________________________
    128          
    129          
    130          
    131          
    132          
    133          //Zmienne lokalne -------------------------------------------------------------

   \                                 In section .bss, align 1
    134              char LightLCD_OFF_Counter;                                                  //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    135              char LightLCD_OFF_Counter2;                                                 //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    136              char LightLCD_OFF_Curent;                                                   //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Curent:
   \   00000000                      DS8 1
    137              volatile char SlaveMode=0;
    138          //___________________________Koniec zmiennych lplkalnych________________________
    139          
    140          
    141              
    142               
    143          
    144              
    145          
    146          //Zmienne zewnêtrzne -------------------------------------------------------------    
    147              extern char       LCD_Canvas[8][128];
    148              extern char       Label_move;
    149              extern int        MenuLevel;      //poziom menu
    150              extern int        Suw_poz_analog;  
    151              extern int        ScrollMenu_poz;
    152              extern char       g_US0_Connect_OK;
    153              extern char       g_US1_Connect_OK;
    154              extern char       g_US0_Comm_TIMEOUT;
    155              extern _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];
    156              extern char       g_Ans_ZD_MODBUS_0;
    157              extern char       g_Current_ZD_MODBUS_0;
    158              extern char       g_ERR_ZD_MODBUS_0;
    159              extern int        g_US0_Comm_MinCykle;
    160              extern char       US0_MasterMODBUS_ENABLE;
    161              extern char       g_US1_Comm_TIMEOUT;
    162              extern _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];
    163              extern char       g_Ans_ZD_MODBUS_1;
    164              extern char       g_Current_ZD_MODBUS_1;
    165              extern char       g_ERR_ZD_MODBUS_1;
    166              extern int        g_US1_Comm_MinCykle;
    167              extern char       US1_MasterMODBUS_ENABLE;
    168              extern char       Busy_program;
    169              extern _Trap      Trap;
    170              extern _Correct korekta_Y;
    171              extern _Correct korekta_X;
    172              extern  char Synchronizacja;
    173              extern char         RF_CurrentTask;
    174              //extern unsigned char  SPI_Buffer_Rx[SPI_Read_BUFFER_SIZE];                         //bufor odbiorczy SPI
    175              //extern unsigned char  SPI_Buffer_Tx[SPI_Write_BUFFER_SIZE];                        //bufor odbiorczy SPI
    176              extern void ReadWriteSpi (unsigned char* pReadBuffer, int nReadLen, unsigned char* pWriteBuffer, int nWriteLen, bool bHoldCS);
    177              extern void SPI_init(void) ;
    178              
    179              extern _MainStage  MainStage; 
    180              extern _ProgramTab gProg;
    181              extern void RF_Init(void);
    182              extern _RF_Status RF_Status;
    183              extern char g_RF_TimeOutCounter;
    184              extern   _RF_TaskTab  RF_TaskTab;
    185              extern _TransQuality TransQuality;
    186              extern _DateTime  *pDateTime;
    187              extern char Variables[];
    188              extern unsigned int CyklPerSek;
    189              extern char Buff_TX_1[];
    190              AT91PS_MEM pAT91C_IFLASH_MEM=AT91C_IFLASH_MEM;
    191              extern short int VariablesAnal[];
    192              extern char Variables[];
    193              extern unsigned char  US1_Buffer[];
    194              
    195          //___________________________Koniec zmiennych zewnêtrznych________________________    
    196              
    197              
    198              
    199          //Zmienne tymczasowe -----------------------------------------------------------

   \                                 In section .bss, align 1
    200              char tmp_i =0; 
   \                     tmp_i:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    201              float licznik = 0.0;
   \                     licznik:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    202              int licznik2 = 0;
   \                     licznik2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    203              int licznik3 = 0;
   \                     licznik3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    204              char *memory;
   \                     memory:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    205              unsigned long sss;
   \                     sss:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    206              int int1 =0;
   \                     int1:
   \   00000000                      DS8 4
    207              
    208          
    209              _DateTime DateTime;
    210              
    211               
    212              //___________________________Koniec zmiennych tymczasowych______________________
    213          
    214          
    215              
    216          
    217          //Funkcje zewnêtrzne -----------------------------------------------------------
    218              extern RAM ram;
    219              extern ConversFC Convers_DW_B;
    220              extern void InitFlash(void);
    221              extern void Program (_ProgramTab *ProgTab);
    222              extern void at91flashWriteDW(int sektor, int nr_DW, unsigned long wartDW );
    223              extern void ScreenEvent(void);
    224              extern int Suw_poz;
    225              extern void MenuPaint(void);
    226              extern void at91flashWrite();
    227              extern void ConfigureIrBus(void);
    228              extern void MenuRefresh();
    229              //extern unsigned short crc16(unsigned char* modbusframe,int Length);
    230              //extern unsigned char ModBus_CommS(unsigned char* modbusframe);
    231              //extern void ModBus_CommS_US0();
    232              extern void US0_init(void);
    233              extern void US1_init(void);
    234              extern char ModBus_MASTER_TX(char US_Nr);
    235              extern void ReadTP(_TPoint *Point);
    236              //extern BYTE ModBus_MASTER_Return(BYTE* modbusframe);
    237          //_______________________ Koniec funkcji zewnêtrznych __________________________
    238              
    239          
    240          /*
    241          $Id: serial_example.c,v 1.1.2.1 2006/12/05 08:33:25 danielru Exp $
    242          */
    243          
    244          
    245          
    246          
    247          //------------------------------------------------------------------------------
    248          //      Prototypes
    249          //------------------------------------------------------------------------------
    250          
    251          //! \brief  Initialization callback
    252          static void CBK_Init(const S_usb *pUsb);
    253          
    254          //! \brief  Suspend callback
    255          static void CBK_Suspend(const S_usb *pUsb);
    256          
    257          //! \brief  Resume callback
    258          static void CBK_Resume(const S_usb *pUsb);
    259          
    260          //! \brief  New request callback
    261          static void CBK_NewRequest(const S_usb *pUsb);
    262          
    263          //! \brief  New reset callback
    264          //static void CBK_Reset(const S_usb *pUsb);
    265          
    266          //! \brief  New SOF callback
    267          //static void CBK_SOF(const S_usb *pUsb);
    268          
    269          //------------------------------------------------------------------------------
    270          //      Internal variables
    271          //------------------------------------------------------------------------------
    272          
    273          //! \brief  List of endpoints (including endpoint 0) used by the device.
    274          //! \see    S_usb_endpoint
    275          static S_usb_endpoint pEndpoints[] = {
    276          
    277              USB_ENDPOINT_SINGLEBANK, // Control endpoint 0
    278              USB_ENDPOINT_DUALBANK,   // Data out endpoint
    279              USB_ENDPOINT_DUALBANK,   // Data in endpoint
    280              USB_ENDPOINT_SINGLEBANK, // Notification endpoint
    281          };
    282          
    283          //! \brief  Variable used to store the last received SETUP packet.
    284          //! \see    S_usb_request
    285          //! \see    S_usb

   \                                 In section .bss, align 4
    286          static S_usb_request sSetup;
   \                     sSetup:
   \   00000000                      DS8 8
    287          
    288          //! \brief  Variable used to store the current device state
    289          //! \see    S_usb

   \                                 In section .bss, align 4
    290          static unsigned int dState;
   \                     dState:
   \   00000000                      DS8 4
    291          
    292          //! \brief  List of implemented callbacks
    293          //! \see    S_usb_callbacks
    294          //! \see    S_usb

   \                                 In section .rodata, align 4
    295          static const S_usb_callbacks sCallbacks = {
   \                     sCallbacks:
   \   00000000   ........0000       DC32 CBK_Init, 0H, 0H, CBK_Resume, CBK_NewRequest, 0H
   \              000000000000
   \              ............
   \              ....00000000
    296          
    297              CBK_Init,
    298              0, // CBK_Reset
    299              0, //CBK_Suspend,
    300              CBK_Resume,
    301              CBK_NewRequest,
    302              0  // CBK_SOF
    303          };
    304          
    305          //! \brief  USB driver instance
    306          //! \see    S_usb

   \                                 In section .rodata, align 4
    307          static const S_usb sUsb = {
   \                     sUsb:
   \   00000000   ............       DC32 sDefaultDriver, pEndpoints, 4, sCallbacks, sSetup, dState
   \              ....04000000
   \              ............
   \              ............
    308          
    309              &sDefaultDriver,
    310              pEndpoints,
    311              SER_NUM_ENDPOINTS,
    312              &sCallbacks,
    313              &sSetup,
    314              &dState
    315          };
    316          
    317          //! \brief  CDC serial class driver instance
    318          //! \see    S_ser
    319          static S_ser sSer;
    320          
    321          // Buffer for receiving data from the USB
    322          static unsigned char pUsbBuffer[USB_BUFFER_SIZE];
    323          
    324          
    325          //------------------------------------------------------------------------------
    326          //      Internal Functions
    327          //------------------------------------------------------------------------------
    328          
    329          // Interrupt Service Routines
    330          //------------------------------------------------------------------------------
    331          
    332          //------------------------------------------------------------------------------
    333          //! \brief  Handler for the USB controller interrupt
    334          //!
    335          //!         Defers the call to the USB_Handler function.
    336          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    337          void ISR_Driver(void)
    338          {
   \                     ISR_Driver:
   \   00000000   01B5               PUSH     {R0,LR}
    339              USB_Handler(&sUsb);
   \   00000002   ....               LDR      R0,??DataTable1  ;; sUsb
   \   00000004   ........           BL       USB_Handler
    340          }//_______________________ Koniec funkcji ISR_Driver ____________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    341          
    342          
    343          
    344          
    345          //------------------------------------------------------------------------------
    346          //! \brief  Handler for the VBus state change interrupt
    347          //!
    348          //! This method calls the USB_Attach function to perform the necessary
    349          //! operations.
    350          //------------------------------------------------------------------------------
    351          //#if !defined(USB_BUS_POWERED)
    352          char ForwardUSB2Serialferst=0;
    353          
    354          
    355           
    356          

   \                                 In section Debug.txt, align 4, keep-with-next
    357          void ISR_VBus(void)
    358          {
   \                     ISR_VBus:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    359            
    360            
    361            USB_Attach(&sUsb);
   \   00000002   ....               LDR      R6,??DataTable1  ;; sUsb
   \   00000004   3000               MOVS     R0,R6
   \   00000006   ........           BL       USB_Attach
    362          
    363            if ((( AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)>0)
   \   0000000A   0227               MOVS     R7,#+2
   \   0000000C   ....               LDR      R0,??DataTable2  ;; 0xfffff43c
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   3900               MOVS     R1,R7
   \   00000012   0842               TST      R0,R1
   \   00000014   2CD0               BEQ      ??ISR_VBus_0
    364            {
    365              g_PC_Connected=1;
   \   00000016   0124               MOVS     R4,#+1
   \   00000018   ....               LDR      R5,??DataTable12  ;; DateTime
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   2873               STRB     R0,[R5, #+12]
    366              
    367              if (ISSET(USB_GetState(&sUsb), USB_STATE_POWERED)) 
   \   0000001E   3000               MOVS     R0,R6
   \   00000020   ........           BL       USB_GetState
   \   00000024   3842               TST      R0,R7
   \   00000026   10D0               BEQ      ??ISR_VBus_1
    368              {
    369                MenuLevel=1;
   \   00000028   ....               LDR      R0,??DataTable4  ;; MenuLevel
   \   0000002A   0460               STR      R4,[R0, #+0]
    370                g_PC_Connected=1;
    371                MenuPaint();
   \   0000002C   ........           BL       MenuPaint
    372                RepaintLCD();
   \   00000030   ........           BL       RepaintLCD
    373                RepaintLCD();
   \   00000034   ........           BL       RepaintLCD
    374               
    375                USB_Connect(&sUsb);   
   \   00000038   3000               MOVS     R0,R6
   \   0000003A   ........           BL       USB_Connect
    376                
    377          
    378               // if (ForwardUSB2Serialferst!=1)
    379               // {
    380                  ForwardUSB2Serialferst=1; 
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   A875               STRB     R0,[R5, #+22]
    381               // }
    382                
    383                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000042   0020               MOVS     R0,#+0
   \   00000044   A864               STR      R0,[R5, #+72]
    384                g_LightLCDEnable=1;
   \   00000046   6C73               STRB     R4,[R5, #+13]
   \   00000048   0FE0               B        ??ISR_VBus_2
    385          
    386              }
    387                else
    388              {
    389          
    390                USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_1:
   \   0000004A   3000               MOVS     R0,R6
   \   0000004C   ........           BL       USB_Disconnect
    391                g_PC_Connected=0;
   \   00000050   0026               MOVS     R6,#+0
   \   00000052   3000               MOVS     R0,R6
   \   00000054   2873               STRB     R0,[R5, #+12]
    392                MenuPaint();
   \   00000056   ........           BL       MenuPaint
    393                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000005A   AE64               STR      R6,[R5, #+72]
    394                g_LightLCDEnable=1;
   \   0000005C   6C73               STRB     R4,[R5, #+13]
    395                Trap.Enable=0;
   \   0000005E   0F48               LDR      R0,??ISR_VBus_3  ;; Trap
   \   00000060   3100               MOVS     R1,R6
   \   00000062   0170               STRB     R1,[R0, #+0]
    396                Trap.Row=0;
   \   00000064   4170               STRB     R1,[R0, #+1]
    397                Trap.Col=0;
   \   00000066   8170               STRB     R1,[R0, #+2]
    398                Trap.Activ=0;
   \   00000068   C670               STRB     R6,[R0, #+3]
    399                
    400                
    401          
    402              }
    403              MenuPaint();
   \                     ??ISR_VBus_2:
   \   0000006A   ........           BL       MenuPaint
   \   0000006E   11E0               B        ??ISR_VBus_4
    404            }
    405            else
    406            {
    407              USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_0:
   \   00000070   3000               MOVS     R0,R6
   \   00000072   ........           BL       USB_Disconnect
    408              g_PC_Connected=0;
   \   00000076   0026               MOVS     R6,#+0
   \   00000078   ....               LDR      R5,??DataTable12  ;; DateTime
   \   0000007A   3000               MOVS     R0,R6
   \   0000007C   2873               STRB     R0,[R5, #+12]
    409              MenuPaint();
   \   0000007E   ........           BL       MenuPaint
    410              g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000082   AE64               STR      R6,[R5, #+72]
    411              g_LightLCDEnable=1;
   \   00000084   0120               MOVS     R0,#+1
   \   00000086   6873               STRB     R0,[R5, #+13]
    412              
    413              Trap.Enable=0;
   \   00000088   0448               LDR      R0,??ISR_VBus_3  ;; Trap
   \   0000008A   3100               MOVS     R1,R6
   \   0000008C   0170               STRB     R1,[R0, #+0]
    414              Trap.Row=0;
   \   0000008E   4170               STRB     R1,[R0, #+1]
    415              Trap.Col=0;
   \   00000090   8170               STRB     R1,[R0, #+2]
    416              Trap.Activ=0;
   \   00000092   C670               STRB     R6,[R0, #+3]
    417              
    418          
    419            } 
    420          
    421          }//_____________________________________________________________________________
   \                     ??ISR_VBus_4:
   \   00000094   F8BC               POP      {R3-R7}
   \   00000096   01BC               POP      {R0}
   \   00000098   0047               BX       R0               ;; return
   \   0000009A   C046               Nop      
   \                     ??ISR_VBus_3:
   \   0000009C   ........           DC32     Trap
    422          //#endif // !defined(USB_BUS_POWERED)
    423          
    424          
    425          
    426          
    427          
    428          // Callbacks
    429          //------------------------------------------------------------------------------
    430          //------------------------------------------------------------------------------
    431          //! \brief  Callback invoked during the initialization of the USB driver
    432          //!
    433          //!         Configures and enables USB controller and VBus monitoring interrupts
    434          //! \param  pUsb    Pointer to a S_usb instance
    435          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    436          static void CBK_Init(const S_usb *pUsb)
    437          {
   \                     CBK_Init:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
    438          
    439            TRACE_INFO("\n\rInicjalizacja przerwania VBUS od podlaczenia USB  \n\r" ); 
    440              
    441              // Configure and enable the USB controller interrupt
    442              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    443                                    USB_GetDriverID(pUsb),
    444                                    USB_CON_PRIOR,
    445                                    0, //AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    446                                    ISR_Driver);
   \   00000004   ........           BL       USB_GetDriverID
   \   00000008   ....               LDR      R5,??DataTable6  ;; 0xfffff000
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0F49               LDR      R1,??CBK_Init_0  ;; ISR_Driver
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   0522               MOVS     R2,#+5
   \   00000014   0100               MOVS     R1,R0
   \   00000016   2800               MOVS     R0,R5
   \   00000018   ........           BL       AT91F_AIC_ConfigureIt
   \   0000001C   02B0               ADD      SP,SP,#+8
    447          
    448              AT91F_AIC_EnableIt(AT91C_BASE_AIC, USB_GetDriverID(pUsb));
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       USB_GetDriverID
   \   00000024   0100               MOVS     R1,R0
   \   00000026   2800               MOVS     R0,R5
   \   00000028   ........           BL       AT91F_AIC_EnableIt
    449          
    450          //#ifndef USB_BUS_POWERED
    451             
    452              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   0000002C   0221               MOVS     R1,#+2
   \   0000002E   ....               LDR      R0,??DataTable7  ;; 0xfffff400
   \   00000030   ........           BL       AT91F_PIO_CfgInput
    453              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   00000034   ....               LDR      R0,??DataTable8  ;; 0xfffff460
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   0160               STR      R1,[R0, #+0]
    454             
    455              // Configure VBus monitoring
    456              BRD_ConfigureVBus(USB_GetDriverInterface(pUsb));
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USB_GetDriverInterface
   \   00000040   ........           BL       BRD_ConfigureVBus
    457          
    458              
    459              
    460              
    461              
    462            /*  
    463              // Configure and enable the Vbus detection interrupt
    464              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    465                                    AT91C_ID_VBUS,
    466                                    USB_CON_PRIOR, //AT91C_AIC_PRIOR_LOWEST,
    467                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    468                                    ISR_VBus);
    469          
    470              
    471              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
    472              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
    473            
    474             
    475              
    476              
    477              
    478              
    479              */
    480              
    481              
    482          /*
    483          #else
    484              // Power up the USB controller
    485              USB_Attach(pUsb);
    486            
    487          #endif
    488          */
    489          
    490          }//_____________________________________________________________________________
   \   00000044   38BC               POP      {R3-R5}
   \   00000046   01BC               POP      {R0}
   \   00000048   0047               BX       R0               ;; return
   \   0000004A   C046               Nop      
   \                     ??CBK_Init_0:
   \   0000004C   ........           DC32     ISR_Driver
    491          
    492          
    493          
    494          
    495          
    496          
    497          
    498          
    499          
    500          
    501          
    502          
    503          
    504          
    505          
    506          
    507          
    508          
    509          
    510          
    511          
    512          
    513          
    514          //------------------------------------------------------------------------------
    515          //! \brief  Callback invoked when the device becomes suspended
    516          //!
    517          //!         Disables LEDs (if they are used) and then puts the device into
    518          //!         low-power mode. When traces are used, the device does not enter
    519          //!         low-power mode to avoid losing some outputs.
    520          //! \param  pUsb    Pointer to a S_usb instance
    521          //------------------------------------------------------------------------------
    522          static void CBK_Suspend(const S_usb *pUsb)
    523          {
    524          
    525          #if defined(NOTRACES)
    526              DEV_Suspend();
    527          #endif
    528          }//_____________________________________________________________________________
    529          
    530          
    531          
    532          
    533          
    534          
    535          //------------------------------------------------------------------------------
    536          //! \brief  Callback invoked when the device leaves the suspended state
    537          //!
    538          //!         The device is first returned to a normal operating mode and LEDs are
    539          //!         re-enabled. When traces are used, the device does not enter
    540          //!         low-power mode to avoid losing some outputs.
    541          //! \param  pUsb    Pointer to a S_usb instance
    542          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    543          static void CBK_Resume(const S_usb *pUsb)
    544          {
   \                     CBK_Resume:
   \   00000000   01B5               PUSH     {R0,LR}
    545          #if defined(NOTRACES)
    546              DEV_Resume();
   \   00000002   ........           BL       DEV_Resume
    547          #endif
    548          
    549          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    550          
    551          
    552          
    553          
    554          
    555          
    556          //------------------------------------------------------------------------------
    557          //! \brief  Callback invoked when a new SETUP request is received
    558          //!
    559          //!         The new request if forwarded to the standard request handler,
    560          //!         which performs the enumeration of the device.
    561          //! \param  pUsb   Pointer to a S_usb instance
    562          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    563          static void CBK_NewRequest(const S_usb *pUsb)
    564          {
   \                     CBK_NewRequest:
   \   00000000   01B5               PUSH     {R0,LR}
    565              SER_RequestHandler(&sSer);
   \   00000002   0348               LDR      R0,??CBK_NewRequest_0  ;; DateTime + 120
   \   00000004   ........           BL       SER_RequestHandler
    566          }//_____________________________________________________________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
   \   0000000E   C046               Nop      
   \                     ??CBK_NewRequest_0:
   \   00000010   ........           DC32     DateTime + 120
    567          
    568          
    569          
    570          
    571          
    572          
    573          //------------------------------------------------------------------------------
    574          //! \brief  Callback invoked when a Reset request is received
    575          //!
    576          //! \param  pUsb   Pointer to a S_usb instance
    577          //------------------------------------------------------------------------------
    578          //static void CBK_Reset(const S_usb *pUsb)
    579          //{
    580              // Put your reset handler here
    581          //}//_____________________________________________________________________________
    582          
    583          
    584          
    585          
    586          //------------------------------------------------------------------------------
    587          //! \brief  Callback invoked when a SOF is received
    588          //!
    589          //! \param  pUsb   Pointer to a S_usb instance
    590          //------------------------------------------------------------------------------
    591          //static void CBK_SOF(const S_usb *pUsb)
    592          //{
    593              // Put your SOF handler here
    594          //}//_____________________________________________________________________________
    595          
    596          
    597          
    598          
    599          
    600          // Other functions
    601          //------------------------------------------------------------------------------
    602          //------------------------------------------------------------------------------
    603          //! \brief  Forwards data receiving from the USB host through the USART
    604          //!
    605          //!         This function operates asynchronously.
    606          //! \param  pBuffer           Must be 0 when function is first called
    607          //! \param  bStatus           Same as above
    608          //! \param  dBytesTransferred Same as above
    609          //! \param  dBytesRemaining   Same as above
    610          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    611          static void ForwardUSB2Serial(unsigned char *pBuffer,
    612                                        unsigned char bStatus,
    613                                        unsigned int dBytesTransferred,
    614                                        unsigned int dBytesRemaining)
    615          {
   \                     ForwardUSB2Serial:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    616              //Zmienne lokalne ----------------------------------------------------
    617                      static char buff_tx[1000];                                          //Bufor danych wysy³anych do USB
    618                   
    619                      unsigned int rozmiar_tx=0;                                          //Iloœæ danych do wys³ania przez USB
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0093               STR      R3,[SP, #+0]
    620                    //---------------------koniec zmiennych lokalnych--------------------
    621                  
    622          
    623              if (pBuffer != 0) {                                                                   
   \   00000006   0028               CMP      R0,#+0
   \   00000008   15D0               BEQ      ??ForwardUSB2Serial_0
    624                  if (bStatus != SER_STATUS_SUCCESS) 
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   13D1               BNE      ??ForwardUSB2Serial_0
    625                  {
    626                    
    627                    TRACE_WARNING("\n\r W: ForwardUSB2Serial: B³¹d transmisji USB\n\r");
    628                  }
    629                  else 
    630                  {
    631          
    632                      pBuffer[dBytesTransferred] = 0;
   \   0000000E   8354               STRB     R3,[R0, R2]
    633                     komunikcja_RSwin((char *)pBuffer,buff_tx,&rozmiar_tx);
   \   00000010   ....               LDR      R4,??DataTable12  ;; DateTime
   \   00000012   C621               MOVS     R1,#+198
   \   00000014   4900               LSLS     R1,R1,#+1        ;; #+396
   \   00000016   6518               ADDS     R5,R4,R1
   \   00000018   6A46               MOV      R2,SP
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   ........           BL       komunikcja_RSwin
    634                     SER_Write(&sSer, buff_tx,rozmiar_tx,0, 0);                                                                        
   \   00000020   82B0               SUB      SP,SP,#+8
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   0090               STR      R0,[SP, #+0]
   \   00000026   0300               MOVS     R3,R0
   \   00000028   029A               LDR      R2,[SP, #+8]
   \   0000002A   2900               MOVS     R1,R5
   \   0000002C   7834               ADDS     R4,R4,#+120
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       SER_Write
   \   00000034   02B0               ADD      SP,SP,#+8
    635                  }
    636              }
    637          
    638          
    639              do {
    640          
    641                  bStatus = SER_Read(&sSer,
    642                                     pUsbBuffer,
    643              
    644                                     USB_BUFFER_SIZE,
    645                                     (Callback_f) ForwardUSB2Serial,
    646                                     pUsbBuffer);
    647              }
    648              while (bStatus != SER_STATUS_SUCCESS);
   \                     ??ForwardUSB2Serial_0:
   \   00000036   ....               LDR      R4,??DataTable12  ;; DateTime
   \   00000038   2100               MOVS     R1,R4
   \   0000003A   8C31               ADDS     R1,R1,#+140
   \   0000003C   82B0               SUB      SP,SP,#+8
   \   0000003E   0091               STR      R1,[SP, #+0]
   \   00000040   064B               LDR      R3,??ForwardUSB2Serial_1  ;; ForwardUSB2Serial
   \   00000042   8022               MOVS     R2,#+128
   \   00000044   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000046   7834               ADDS     R4,R4,#+120
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       SER_Read
   \   0000004E   02B0               ADD      SP,SP,#+8
   \   00000050   0028               CMP      R0,#+0
   \   00000052   F0D1               BNE      ??ForwardUSB2Serial_0
    649           
    650          }//_____________________________________________________________________________
   \   00000054   38BC               POP      {R3-R5}
   \   00000056   01BC               POP      {R0}
   \   00000058   0047               BX       R0               ;; return
   \   0000005A   C046               Nop      
   \                     ??ForwardUSB2Serial_1:
   \   0000005C   ........           DC32     ForwardUSB2Serial
    651          
    652          
    653          
    654          
    655          
    656          
    657          //-----------------------------------------------------------------------------
    658          //!  Nazwa funkcji :    Delay
    659          //!  Funkcja opóŸnienia
    660          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    661          void Delay (unsigned long a) 
    662          { 
   \                     Delay:
   \   00000000   01B5               PUSH     {R0,LR}
    663              while (--a!=0);   AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Delay_0:
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   FDD1               BNE      ??Delay_0
   \   00000006   ....               LDR      R0,??DataTable11  ;; 0xfffffd40
   \   00000008   ........           BL       AT91F_WDTRestart
    664          }//_______________________ Koniec funkcji opóŸnienia ____________________________
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return
    665          
    666          
    667          
    668          

   \                                 In section .bss, align 4
    669          char *memory_read;
   \                     memory_read:
   \   00000000                      DS8 4
    670          
    671          //-----------------------------------------------------------------------------
    672          //! Nazwa funkcji :    InitFramework
    673          //! Funkcja ustawieñ wstêpnych systemu
    674          //-----------------------------------------------------------------------------
    675          int tProgramTabSize=ProgramTabSize;
    676          char *SourRam;
    677          unsigned int  stop=2000;
    678          unsigned int  siz;

   \                                 In section Debug.txt, align 4, keep-with-next
    679          void InitFramework (void) 
    680          { 
   \                     InitFramework:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    681             
    682           //  TRACE_INFO("\n\ InitFramework \n\r");
    683              
    684          
    685          
    686                                            FlashProgramOfset=FlashProgram_A_Ofset;
   \   00000002   ....               LDR      R2,??DataTable12  ;; DateTime
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   1064               STR      R0,[R2, #+64]
    687                                 
    688                                            
    689                                          //  TRACE_INFO("\n\r---  Strona flash = A  \n\r" ); 
    690          
    691              
    692              
    693          //    TRACE_INFO(" ---  Przepisuje program z FLASH do RAM     -Ofset : %d\n\r",AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    694              //przepisz program z flash do ram
    695              char *memory_read_prog;
    696              memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
    697          
    698            
    699               SourRam= (char*)&gProg;
   \   00000008   ....               LDR      R1,??DataTable13  ;; gProg
   \   0000000A   1165               STR      R1,[R2, #+80]
    700          
    701             
    702              siz=sizeof(gProg);
   \   0000000C   ....               LDR      R3,??DataTable14  ;; 0xc670
   \   0000000E   5365               STR      R3,[R2, #+84]
    703              for (unsigned int k = 0 ; k <siz; k++) 
   \   00000010   0300               MOVS     R3,R0
   \   00000012   04E0               B        ??InitFramework_0
    704              {      
    705                    SourRam[k]=memory_read_prog[k]; 
   \                     ??InitFramework_1:
   \   00000014   146D               LDR      R4,[R2, #+80]
   \   00000016   ....               LDR      R5,??DataTable15  ;; 0x130100
   \   00000018   ED5C               LDRB     R5,[R5, R3]
   \   0000001A   E554               STRB     R5,[R4, R3]
    706              }
   \   0000001C   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_0:
   \   0000001E   546D               LDR      R4,[R2, #+84]
   \   00000020   A342               CMP      R3,R4
   \   00000022   F7D3               BCC      ??InitFramework_1
    707              
    708             
    709            
    710              for (char i=0; i<ScreenNr; i++) 
   \   00000024   0300               MOVS     R3,R0
   \   00000026   03E0               B        ??InitFramework_2
    711             {
    712               //je¿eli ustawienie automatyczne temperatury
    713               if (gProg.Screen[i].Thermo.AutoOn) 
    714               {
    715                 
    716                   //je¿eli dzieñ typu pierwszego
    717                   if (((gProg.Screen[i].Thermo.Week>>DateTime.DayOfWeek) & 0x1)==1)       
    718                   {
    719                      if (((gProg.Screen[i].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    720                      {                 
    721                        //ustaw wy¿sz¹ temperaturê
    722                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    723                        {
    724                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
    725                        }else{
    726                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    727                        }
    728                      }else{
    729                        //ustaw ni¿sz¹ temperaturê
    730                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    731                        {
    732                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    733                        }else{
    734                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
   \                     ??InitFramework_3:
   \   00000028   2C81               STRH     R4,[R5, #+8]
    735                        }
   \                     ??InitFramework_4:
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \   0000002C   1B06               LSLS     R3,R3,#+24
   \   0000002E   1B0E               LSRS     R3,R3,#+24
   \                     ??InitFramework_2:
   \   00000030   1C00               MOVS     R4,R3
   \   00000032   082C               CMP      R4,#+8
   \   00000034   27D2               BCS      ??InitFramework_5
   \   00000036   A025               MOVS     R5,#+160
   \   00000038   6C43               MULS     R4,R5,R4
   \   0000003A   0C19               ADDS     R4,R1,R4
   \   0000003C   ....               LDR      R5,??DataTable16  ;; 0xbc26
   \   0000003E   6519               ADDS     R5,R4,R5
   \   00000040   2E78               LDRB     R6,[R5, #+0]
   \   00000042   002E               CMP      R6,#+0
   \   00000044   F1D0               BEQ      ??InitFramework_4
   \   00000046   EE78               LDRB     R6,[R5, #+3]
   \   00000048   9779               LDRB     R7,[R2, #+6]
   \   0000004A   3E41               ASRS     R6,R6,R7
   \   0000004C   F607               LSLS     R6,R6,#+31
   \   0000004E   ECD5               BPL      ??InitFramework_4
   \   00000050   ....               LDR      R6,??DataTable17  ;; 0xbc30
   \   00000052   A459               LDR      R4,[R4, R6]
   \   00000054   D678               LDRB     R6,[R2, #+3]
   \   00000056   F440               LSRS     R4,R4,R6
   \   00000058   E407               LSLS     R4,R4,#+31
   \   0000005A   0BD5               BPL      ??InitFramework_6
   \   0000005C   0624               MOVS     R4,#+6
   \   0000005E   2C5F               LDRSH    R4,[R5, R4]
   \   00000060   0426               MOVS     R6,#+4
   \   00000062   AE5F               LDRSH    R6,[R5, R6]
   \   00000064   B442               CMP      R4,R6
   \   00000066   02DA               BGE      ??InitFramework_7
   \   00000068   AC88               LDRH     R4,[R5, #+4]
   \   0000006A   2C81               STRH     R4,[R5, #+8]
   \   0000006C   DDE7               B        ??InitFramework_4
   \                     ??InitFramework_7:
   \   0000006E   EC88               LDRH     R4,[R5, #+6]
   \   00000070   2C81               STRH     R4,[R5, #+8]
   \   00000072   DAE7               B        ??InitFramework_4
   \                     ??InitFramework_6:
   \   00000074   0424               MOVS     R4,#+4
   \   00000076   2C5F               LDRSH    R4,[R5, R4]
   \   00000078   0626               MOVS     R6,#+6
   \   0000007A   AE5F               LDRSH    R6,[R5, R6]
   \   0000007C   A642               CMP      R6,R4
   \   0000007E   D3DA               BGE      ??InitFramework_3
   \   00000080   EC88               LDRH     R4,[R5, #+6]
   \   00000082   2C81               STRH     R4,[R5, #+8]
   \   00000084   D1E7               B        ??InitFramework_4
    736                      }
    737                   }
    738               }
    739             }
    740           
    741              
    742           
    743              //koniec
    744             
    745             
    746             
    747             
    748             //czyszczenie zmiennych programowych
    749                for (int LineNr=0; LineNr<MaxPrcLines; LineNr++)
   \                     ??InitFramework_5:
   \   00000086   0200               MOVS     R2,R0
   \   00000088   0DE0               B        ??InitFramework_8
    750                {
    751                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
    752                  {
    753                    gProg.Line[LineNr].Proc[PrcInLine].LastIn=0;
   \                     ??InitFramework_9:
   \   0000008A   1824               MOVS     R4,#+24
   \   0000008C   5C43               MULS     R4,R3,R4
   \   0000008E   F025               MOVS     R5,#+240
   \   00000090   5543               MULS     R5,R2,R5
   \   00000092   4D19               ADDS     R5,R1,R5
   \   00000094   2C19               ADDS     R4,R5,R4
   \   00000096   2834               ADDS     R4,R4,#+40
   \   00000098   0500               MOVS     R5,R0
   \   0000009A   2570               STRB     R5,[R4, #+0]
    754                    gProg.Line[LineNr].Proc[PrcInLine].Out=0;
   \   0000009C   6580               STRH     R5,[R4, #+2]
    755                  }
   \   0000009E   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_10:
   \   000000A0   0A2B               CMP      R3,#+10
   \   000000A2   F2DB               BLT      ??InitFramework_9
   \   000000A4   521C               ADDS     R2,R2,#+1
   \                     ??InitFramework_8:
   \   000000A6   C82A               CMP      R2,#+200
   \   000000A8   01DA               BGE      ??InitFramework_11
   \   000000AA   0300               MOVS     R3,R0
   \   000000AC   F8E7               B        ??InitFramework_10
    756                }
    757           
    758          
    759                //Ustawienie wartoœci analogowych wêz³ów na niewiarygodne (0x8AAA)
    760                for (char NN=1; NN<NumberNeurons; NN++)
   \                     ??InitFramework_11:
   \   000000AE   0121               MOVS     R1,#+1
   \   000000B0   12E0               B        ??InitFramework_12
    761                {
    762                  for (char NR=0; NR<NumberReg; NR++)
    763                  {
    764                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   \                     ??InitFramework_13:
   \   000000B2   5B00               LSLS     R3,R3,#+1
   \   000000B4   0C00               MOVS     R4,R1
   \   000000B6   1425               MOVS     R5,#+20
   \   000000B8   6C43               MULS     R4,R5,R4
   \   000000BA   ....               LDR      R5,??DataTable18  ;; MainStage
   \   000000BC   2C19               ADDS     R4,R5,R4
   \   000000BE   E318               ADDS     R3,R4,R3
   \   000000C0   A033               ADDS     R3,R3,#+160
   \   000000C2   ....               LDR      R4,??DataTable19  ;; 0xffff8aaa
   \   000000C4   1C80               STRH     R4,[R3, #+0]
    765                  }
   \   000000C6   521C               ADDS     R2,R2,#+1
   \   000000C8   1206               LSLS     R2,R2,#+24
   \   000000CA   120E               LSRS     R2,R2,#+24
   \                     ??InitFramework_14:
   \   000000CC   1300               MOVS     R3,R2
   \   000000CE   0A2B               CMP      R3,#+10
   \   000000D0   EFD3               BCC      ??InitFramework_13
   \   000000D2   491C               ADDS     R1,R1,#+1
   \   000000D4   0906               LSLS     R1,R1,#+24
   \   000000D6   090E               LSRS     R1,R1,#+24
   \                     ??InitFramework_12:
   \   000000D8   0A00               MOVS     R2,R1
   \   000000DA   232A               CMP      R2,#+35
   \   000000DC   01D2               BCS      ??InitFramework_15
   \   000000DE   0200               MOVS     R2,R0
   \   000000E0   F4E7               B        ??InitFramework_14
    766                }
    767               
    768          }//_______________________ Koniec funkcji InitFramework ____________________________
   \                     ??InitFramework_15:
   \   000000E2   F8BC               POP      {R3-R7}
   \   000000E4   01BC               POP      {R0}
   \   000000E6   0047               BX       R0               ;; return
    769          
    770          
    771          
    772          
    773          
    774          
    775          //char gLcdLightDuty=2;

   \                                 In section Debug.txt, align 4, keep-with-next
    776          void Timer_10us(void)                        //timer isr 
    777          { 
    778              unsigned int dummy0 = AT91C_BASE_TC1->TC_SR;      
   \                     Timer_10us:
   \   00000000   0148               LDR      R0,??Timer_10us_0  ;; 0xfffa0060
   \   00000002   0068               LDR      R0,[R0, #+0]
    779            
    780           /*
    781            
    782            //PWM podœwietlenia
    783            static char LcdLightCounterPWM=6;        //licznik podœwietlenia
    784            
    785            
    786          AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD); 
    787            
    788            /*
                   ^
Warning[Pe009]: nested comment is not allowed
    789            static long long ScreenSaverCounter=0;
    790            if (g_LightLCDEnable)
    791            {
    792              AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);    
    793              ScreenSaverCounter=0;
    794            }else{
    795            
    796              if (LcdLightCounterPWM<6)
    797            {
    798              LcdLightCounterPWM++;
    799             
    800            }else{
    801              LcdLightCounterPWM=0; 
    802              
    803              if ((ScreenSaverCounter<500000) && (g_ScreenSever_On) ) 
    804              {
    805                ScreenSaverCounter++;  
    806                AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    807              }
    808              if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))   AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    809            }
    810            if  (LcdLightCounterPWM==gLcdLightDuty) AT91F_PIO_ClearOutput(LCD_PIO,(unsigned int)LightLCD);
    811            }
    812            */
    813            
    814          
    815            //----koniec PWM podœwietlenia ------
    816            
    817          
    818            
    819          }//_____________________________________________________________________________
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??Timer_10us_0:
   \   00000008   6000FAFF           DC32     0xfffa0060
    820          
    821          
    822          
    823          
    824          
    825          
    826          
    827          
    828          //-----------------------------------------------------------------------------
    829          //!  Nazwa funkcji :    Timer_1_Setup
    830          //!  Funkcja inicjalizacji Timer1 - 1ms
    831          //-----------------------------------------------------------------------------
    832          //! 
    833          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    834          void Timer_10us_Setup(void) 
    835          { 
    836          
    837            
    838           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
    839           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
    840           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC1] = (unsigned int)Timer_10us;  //set AIC             
   \                     Timer_10us_Setup:
   \   00000000   1148               LDR      R0,??Timer_10us_Setup_0  ;; 0xfffff0b4
   \   00000002   1249               LDR      R1,??Timer_10us_Setup_0+0x4  ;; Timer_10us
   \   00000004   0160               STR      R1,[R0, #+0]
    841           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC1] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10US_PRIOR); 
   \   00000006   1248               LDR      R0,??Timer_10us_Setup_0+0x8  ;; 0xfffff034
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0160               STR      R1,[R0, #+0]
    842           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC1);      //enable clock 
   \   0000000C   4803               LSLS     R0,R1,#+13
   \   0000000E   ....               LDR      R1,??DataTable20  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
    843           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   ....               LDR      R1,??DataTable21  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
    844           //no external clocks 
    845           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   ....               LDR      R1,??DataTable22  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
    846           AT91C_BASE_TC1->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   0D49               LDR      R1,??Timer_10us_Setup_0+0xC  ;; 0xfffa0040
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
    847           AT91C_BASE_TC1->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0C49               LDR      R1,??Timer_10us_Setup_0+0x10  ;; 0xfffa0044
   \   00000026   ....               LDR      R2,??DataTable23  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
    848           //clock: MCK/1024  = 48054841/ DIV
    849           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
    850           //! DIV5 - 1024
    851           //! DIV4 - 128
    852           //! DIV3 - 32
    853           //! DIV2 - 8
    854           
    855           //AT91C_BASE_TC3->TC_RC = 5090;                  //1ms  (z wyliczeñ 6007)
    856           //AT91C_BASE_TC0->TC_RC = 5286;                    //880us 
    857           AT91C_BASE_TC1->TC_RC = 200;                    //440us  
   \   0000002A   0C49               LDR      R1,??Timer_10us_Setup_0+0x14  ;; 0xfffa005c
   \   0000002C   C822               MOVS     R2,#+200
   \   0000002E   0A60               STR      R2,[R1, #+0]
    858           AT91C_BASE_TC1->TC_IER = AT91C_TC_CPCS;          //enable RC compare int 
   \   00000030   0B49               LDR      R1,??Timer_10us_Setup_0+0x18  ;; 0xfffa0064
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
    859           AT91C_BASE_TC1->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   0B49               LDR      R1,??Timer_10us_Setup_0+0x1C  ;; 0xfffa0068
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
    860           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC1);       //enable int 
   \   0000003C   ....               LDR      R1,??DataTable24  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
    861           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC1);       //clear int 
   \   00000040   ....               LDR      R1,??DataTable25  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
    862           
    863           
    864           //AT91C_BASE_TC1->TC_CMR |= 1<<6;
    865          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_10us_Setup_0:
   \   00000048   B4F0FFFF           DC32     0xfffff0b4
   \   0000004C   ........           DC32     Timer_10us
   \   00000050   34F0FFFF           DC32     0xfffff034
   \   00000054   4000FAFF           DC32     0xfffa0040
   \   00000058   4400FAFF           DC32     0xfffa0044
   \   0000005C   5C00FAFF           DC32     0xfffa005c
   \   00000060   6400FAFF           DC32     0xfffa0064
   \   00000064   6800FAFF           DC32     0xfffa0068
    866          
    867          
    868          
    869          

   \                                 In section Debug.txt, align 4, keep-with-next
    870          void TimetableExecute(void)
    871          {
   \                     TimetableExecute:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   04E0               B        ??TimetableExecute_0
    872          
    873            
    874            volatile static __Timetable *Timetable=AT91C_IFLASH_MEM->Config.Timetable;
    875            
    876            static  char Out[ScreenNr][TimetableTasks];
    877            char Hour;
    878            for (char sc=0; sc<ScreenNr; sc++)
   \                     ??TimetableExecute_1:
   \   00000008   0098               LDR      R0,[SP, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   0006               LSLS     R0,R0,#+24
   \   0000000E   000E               LSRS     R0,R0,#+24
   \   00000010   0090               STR      R0,[SP, #+0]
   \                     ??TimetableExecute_0:
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   0006               LSLS     R0,R0,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0828               CMP      R0,#+8
   \   0000001A   00D3               BCC      .+4
   \   0000001C   AEE0               B        ??TimetableExecute_2
    879            {
    880               for (char tn=0; tn<4; tn++)
   \   0000001E   0024               MOVS     R4,#+0
   \   00000020   56E0               B        ??TimetableExecute_3
    881               {
    882                   
    883          
    884                  
    885                   if (Timetable[sc].Task[tn].Enable==1) 
    886                   {    
    887                     
    888                             if (gProg.Screen[sc].Timetable.Min1h)
    889                             {
    890                               if(Timetable[sc].Task[tn].Hour>0) {
    891                                 Hour=Timetable[sc].Task[tn].Hour-1;
    892                               }else{
    893                                 Hour=23;
   \                     ??TimetableExecute_4:
   \   00000022   1722               MOVS     R2,#+23
   \   00000024   00E0               B        ??TimetableExecute_5
    894                               }
    895                             }else{
    896                               Hour=Timetable[sc].Task[tn].Hour;
   \                     ??TimetableExecute_6:
   \   00000026   C278               LDRB     R2,[R0, #+3]
    897                             }
    898                  
    899                     
    900                       if ((Hour==DateTime.Hour)&& (Timetable[sc].Task[tn].Minute==DateTime.Minute) && ((Timetable[sc].Task[tn].Week) & (1<<DateTime.DayOfWeek-1))  && (DateTime.Second==0))
   \                     ??TimetableExecute_5:
   \   00000028   5649               LDR      R1,??TimetableExecute_7  ;; DateTime
   \   0000002A   CB78               LDRB     R3,[R1, #+3]
   \   0000002C   1206               LSLS     R2,R2,#+24
   \   0000002E   120E               LSRS     R2,R2,#+24
   \   00000030   9A42               CMP      R2,R3
   \   00000032   00D0               BEQ      .+4
   \   00000034   98E0               B        ??TimetableExecute_8
   \   00000036   0279               LDRB     R2,[R0, #+4]
   \   00000038   0B79               LDRB     R3,[R1, #+4]
   \   0000003A   9A42               CMP      R2,R3
   \   0000003C   00D0               BEQ      .+4
   \   0000003E   93E0               B        ??TimetableExecute_8
   \   00000040   8078               LDRB     R0,[R0, #+2]
   \   00000042   0122               MOVS     R2,#+1
   \   00000044   8B79               LDRB     R3,[R1, #+6]
   \   00000046   5B1E               SUBS     R3,R3,#+1
   \   00000048   9A40               LSLS     R2,R2,R3
   \   0000004A   1042               TST      R0,R2
   \   0000004C   00D1               BNE      .+4
   \   0000004E   8BE0               B        ??TimetableExecute_8
   \   00000050   4879               LDRB     R0,[R1, #+5]
   \   00000052   0028               CMP      R0,#+0
   \   00000054   00D0               BEQ      .+4
   \   00000056   87E0               B        ??TimetableExecute_8
    901                       {
    902                         if (gProg.Screen[sc].Timetable.ActionType==2)
   \   00000058   A800               LSLS     R0,R5,#+2
   \   0000005A   4B49               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   0000005C   0818               ADDS     R0,R1,R0
   \   0000005E   8019               ADDS     R0,R0,R6
   \   00000060   0190               STR      R0,[SP, #+4]
   \   00000062   0078               LDRB     R0,[R0, #+0]
   \   00000064   B978               LDRB     R1,[R7, #+2]
   \   00000066   0229               CMP      R1,#+2
   \   00000068   52D1               BNE      ??TimetableExecute_9
    903                         {
    904                           if (Out[sc][tn])
   \   0000006A   0028               CMP      R0,#+0
   \   0000006C   2DD0               BEQ      ??TimetableExecute_10
    905                           {
    906                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \                     ??TimetableExecute_11:
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   3856               LDRSB    R0,[R7, R0]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   0ED5               BPL      ??TimetableExecute_12
    907                             {
    908                                Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
   \   00000076   7878               LDRB     R0,[R7, #+1]
   \   00000078   4449               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000007A   0200               MOVS     R2,R0
   \   0000007C   D210               ASRS     R2,R2,#+3
   \   0000007E   8A18               ADDS     R2,R1,R2
   \   00000080   1378               LDRB     R3,[R2, #+0]
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   0700               MOVS     R7,R0
   \   00000086   FF08               LSRS     R7,R7,#+3
   \   00000088   FF00               LSLS     R7,R7,#+3
   \   0000008A   C01B               SUBS     R0,R0,R7
   \   0000008C   8140               LSLS     R1,R1,R0
   \   0000008E   8B43               BICS     R3,R3,R1
   \   00000090   1370               STRB     R3,[R2, #+0]
   \   00000092   15E0               B        ??TimetableExecute_13
    909                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_12:
   \   00000094   0022               MOVS     R2,#+0
   \   00000096   7978               LDRB     R1,[R7, #+1]
   \   00000098   8C46               MOV      R12,R1
   \   0000009A   D721               MOVS     R1,#+215
   \   0000009C   8900               LSLS     R1,R1,#+2        ;; #+860
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   3856               LDRSB    R0,[R7, R0]
   \   000000A2   1423               MOVS     R3,#+20
   \   000000A4   5843               MULS     R0,R3,R0
   \   000000A6   3A4B               LDR      R3,??TimetableExecute_7+0xC  ;; MainStage
   \   000000A8   1818               ADDS     R0,R3,R0
   \   000000AA   4018               ADDS     R0,R0,R1
   \   000000AC   6146               MOV      R1,R12
    910                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);  
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   000000AE   ........           BL       PortStageSet
    911                                MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
   \   000000B2   3848               LDR      R0,??TimetableExecute_7+0x10  ;; 0x619
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   7956               LDRSB    R1,[R7, R1]
   \   000000B8   354A               LDR      R2,??TimetableExecute_7+0xC  ;; MainStage
   \   000000BA   5118               ADDS     R1,R2,R1
   \   000000BC   1422               MOVS     R2,#+20
   \   000000BE   0A54               STRB     R2,[R1, R0]
    912                             }
    913                             Out[sc][tn]=0;
   \                     ??TimetableExecute_13:
   \   000000C0   A800               LSLS     R0,R5,#+2
   \   000000C2   3149               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   000000C4   0818               ADDS     R0,R1,R0
   \   000000C6   0021               MOVS     R1,#+0
   \   000000C8   8155               STRB     R1,[R0, R6]
    914                           }
    915                         }else{
   \                     ??TimetableExecute_10:
   \   000000CA   641C               ADDS     R4,R4,#+1
   \   000000CC   2406               LSLS     R4,R4,#+24
   \   000000CE   240E               LSRS     R4,R4,#+24
   \                     ??TimetableExecute_3:
   \   000000D0   2000               MOVS     R0,R4
   \   000000D2   0428               CMP      R0,#+4
   \   000000D4   98D2               BCS      ??TimetableExecute_1
   \   000000D6   2600               MOVS     R6,R4
   \   000000D8   009D               LDR      R5,[SP, #+0]
   \   000000DA   2D06               LSLS     R5,R5,#+24
   \   000000DC   2D0E               LSRS     R5,R5,#+24
   \   000000DE   B000               LSLS     R0,R6,#+2
   \   000000E0   1121               MOVS     R1,#+17
   \   000000E2   6943               MULS     R1,R5,R1
   \   000000E4   2C4A               LDR      R2,??TimetableExecute_7+0x14  ;; ??Out + 32
   \   000000E6   1268               LDR      R2,[R2, #+0]
   \   000000E8   5118               ADDS     R1,R2,R1
   \   000000EA   0818               ADDS     R0,R1,R0
   \   000000EC   4178               LDRB     R1,[R0, #+1]
   \   000000EE   0129               CMP      R1,#+1
   \   000000F0   EBD1               BNE      ??TimetableExecute_10
   \   000000F2   2A49               LDR      R1,??TimetableExecute_7+0x18  ;; 0xbc24
   \   000000F4   A022               MOVS     R2,#+160
   \   000000F6   6A43               MULS     R2,R5,R2
   \   000000F8   294B               LDR      R3,??TimetableExecute_7+0x1C  ;; gProg
   \   000000FA   9A18               ADDS     R2,R3,R2
   \   000000FC   5718               ADDS     R7,R2,R1
   \   000000FE   F978               LDRB     R1,[R7, #+3]
   \   00000100   0029               CMP      R1,#+0
   \   00000102   90D0               BEQ      ??TimetableExecute_6
   \   00000104   C178               LDRB     R1,[R0, #+3]
   \   00000106   0029               CMP      R1,#+0
   \   00000108   8BD0               BEQ      ??TimetableExecute_4
   \   0000010A   C178               LDRB     R1,[R0, #+3]
   \   0000010C   4A1E               SUBS     R2,R1,#+1
   \   0000010E   8BE7               B        ??TimetableExecute_5
    916                           
    917                           if (Out[sc][tn]==0) {
   \                     ??TimetableExecute_9:
   \   00000110   0028               CMP      R0,#+0
   \   00000112   25D1               BNE      ??TimetableExecute_14
    918                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \   00000114   3856               LDRSB    R0,[R7, R0]
   \   00000116   0028               CMP      R0,#+0
   \   00000118   0ED5               BPL      ??TimetableExecute_15
    919                             {
    920                                Variables[gProg.Screen[sc].Timetable.ActorPort/8] |= 1<<(gProg.Screen[sc].Timetable.ActorPort%8);
   \   0000011A   7878               LDRB     R0,[R7, #+1]
   \   0000011C   1B49               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000011E   0200               MOVS     R2,R0
   \   00000120   D210               ASRS     R2,R2,#+3
   \   00000122   8918               ADDS     R1,R1,R2
   \   00000124   0A78               LDRB     R2,[R1, #+0]
   \   00000126   0123               MOVS     R3,#+1
   \   00000128   0500               MOVS     R5,R0
   \   0000012A   ED08               LSRS     R5,R5,#+3
   \   0000012C   ED00               LSLS     R5,R5,#+3
   \   0000012E   401B               SUBS     R0,R0,R5
   \   00000130   8340               LSLS     R3,R3,R0
   \   00000132   1343               ORRS     R3,R3,R2
   \   00000134   0B70               STRB     R3,[R1, #+0]
   \   00000136   13E0               B        ??TimetableExecute_14
    921                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_15:
   \   00000138   0122               MOVS     R2,#+1
   \   0000013A   7978               LDRB     R1,[R7, #+1]
   \   0000013C   D720               MOVS     R0,#+215
   \   0000013E   8000               LSLS     R0,R0,#+2        ;; #+860
   \   00000140   0023               MOVS     R3,#+0
   \   00000142   FB56               LDRSB    R3,[R7, R3]
   \   00000144   1425               MOVS     R5,#+20
   \   00000146   6B43               MULS     R3,R5,R3
   \   00000148   114D               LDR      R5,??TimetableExecute_7+0xC  ;; MainStage
   \   0000014A   EB18               ADDS     R3,R5,R3
   \   0000014C   1818               ADDS     R0,R3,R0
    922                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 1);  
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000014E   ........           BL       PortStageSet
    923                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;}
   \   00000152   1048               LDR      R0,??TimetableExecute_7+0x10  ;; 0x619
   \   00000154   0021               MOVS     R1,#+0
   \   00000156   7956               LDRSB    R1,[R7, R1]
   \   00000158   0D4A               LDR      R2,??TimetableExecute_7+0xC  ;; MainStage
   \   0000015A   5118               ADDS     R1,R2,R1
   \   0000015C   1422               MOVS     R2,#+20
   \   0000015E   0A54               STRB     R2,[R1, R0]
    924                             }
    925                           Out[sc][tn]=1;
   \                     ??TimetableExecute_14:
   \   00000160   0198               LDR      R0,[SP, #+4]
   \   00000162   0121               MOVS     R1,#+1
   \   00000164   0170               STRB     R1,[R0, #+0]
   \   00000166   B0E7               B        ??TimetableExecute_10
    926                           
    927                         }
    928                       }else{
    929                         if ((gProg.Screen[sc].Timetable.ActionType==0) && (Out[sc][tn]==1)) 
   \                     ??TimetableExecute_8:
   \   00000168   B878               LDRB     R0,[R7, #+2]
   \   0000016A   0028               CMP      R0,#+0
   \   0000016C   A8D1               BNE      ??TimetableExecute_13
   \   0000016E   A800               LSLS     R0,R5,#+2
   \   00000170   0549               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   00000172   0818               ADDS     R0,R1,R0
   \   00000174   805D               LDRB     R0,[R0, R6]
   \   00000176   0128               CMP      R0,#+1
   \   00000178   A2D1               BNE      ??TimetableExecute_13
   \   0000017A   78E7               B        ??TimetableExecute_11
    930                         {
    931                           if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    932                             {
    933                               Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
    934                             }else{  //je¿eli wêze³
    935                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
    936                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
    937                             }
    938                         }
    939                         Out[sc][tn]=0;
    940                         
    941                       }
    942                   
    943                   }
    944                   
    945                   
    946               }
    947               
    948            }
    949          }
   \                     ??TimetableExecute_2:
   \   0000017C   FEBC               POP      {R1-R7}
   \   0000017E   01BC               POP      {R0}
   \   00000180   0047               BX       R0               ;; return
   \   00000182   C046               Nop      
   \                     ??TimetableExecute_7:
   \   00000184   ........           DC32     DateTime
   \   00000188   ........           DC32     ??Out
   \   0000018C   ........           DC32     Variables
   \   00000190   ........           DC32     MainStage
   \   00000194   19060000           DC32     0x619
   \   00000198   ........           DC32     ??Out + 32
   \   0000019C   24BC0000           DC32     0xbc24
   \   000001A0   ........           DC32     gProg
    950          
    951          
    952          

   \                                 In section Debug.txt, align 4, keep-with-next
    953          void ThermostatsTimeChartExecute(void)
    954          {
   \                     ThermostatsTimeChartExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    955            
    956            signed   short H_Tmp;
    957            signed   short L_Tmp;
    958            signed   short New_Temp;
    959            static  signed short LastTemp[ScreenNr];
    960              
    961            for (signed int sc=0; sc<ScreenNr; )
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   04E0               B        ??ThermostatsTimeChartExecute_0
    962            {
    963              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
    964                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
    965              {
    966                     //je¿eli ustawienie automatyczne temperatury
    967                     if (gProg.Screen[sc].Thermo.AutoOn) 
    968                     {                       
    969                          if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    970                              {
    971                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    972                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[1]; 
    973                              }else{
    974                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[1];
    975                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    976                              }
    977                          
    978                         //je¿eli dzieñ wykresu pierwszego
    979                         if (((gProg.Screen[sc].Thermo.Week>>(DateTime.DayOfWeek-1)) & 0x1)==1)       
    980                         {
    981          
    982                           
    983                              if (((gProg.Screen[sc].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    984                              {                 
    985                                //ustaw wy¿sz¹ temperaturê
    986                                  New_Temp=H_Tmp; 
    987                              }else{
    988                                //ustaw ni¿sz¹ temperaturê
    989                                  New_Temp=L_Tmp;
    990                              }
    991                         }else{
    992          
    993                              if (((gProg.Screen[sc].Thermo.Chart[1]>>DateTime.Hour) & 0x1)==1)
    994                              {                 
    995                                //ustaw wy¿sz¹ temperaturê
    996                                  New_Temp=H_Tmp; 
    997                              }else{
    998                                //ustaw ni¿sz¹ temperaturê
    999                                  New_Temp=L_Tmp;
   1000                              }
   1001                         }
   1002                         if (LastTemp[sc]!=New_Temp)  
   1003                            {
   1004                                gProg.Screen[sc].Thermo.SetTemperature=New_Temp;
   1005                                LastTemp[sc]=gProg.Screen[sc].Thermo.SetTemperature;
   1006                            }
   1007                     }else{
   1008                        LastTemp[sc]=-9999;
   \                     ??ThermostatsTimeChartExecute_1:
   \   00000006   5000               LSLS     R0,R2,#+1
   \   00000008   2749               LDR      R1,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   0000000A   284B               LDR      R3,??ThermostatsTimeChartExecute_2+0x4  ;; 0xffffd8f1
   \   0000000C   0B52               STRH     R3,[R1, R0]
   1009                     }
   1010               }
   1011              sc++;
   \                     ??ThermostatsTimeChartExecute_3:
   \   0000000E   521C               ADDS     R2,R2,#+1
   \                     ??ThermostatsTimeChartExecute_0:
   \   00000010   082A               CMP      R2,#+8
   \   00000012   46DA               BGE      ??ThermostatsTimeChartExecute_4
   \   00000014   002A               CMP      R2,#+0
   \   00000016   03D1               BNE      ??ThermostatsTimeChartExecute_5
   \   00000018   2548               LDR      R0,??ThermostatsTimeChartExecute_2+0x8  ;; gProg + 48024
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0828               CMP      R0,#+8
   \   0000001E   09D0               BEQ      ??ThermostatsTimeChartExecute_6
   \                     ??ThermostatsTimeChartExecute_5:
   \   00000020   002A               CMP      R2,#+0
   \   00000022   F4D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   00000024   2348               LDR      R0,??ThermostatsTimeChartExecute_2+0xC  ;; 0xbb98
   \   00000026   A021               MOVS     R1,#+160
   \   00000028   5143               MULS     R1,R2,R1
   \   0000002A   234B               LDR      R3,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000002C   5918               ADDS     R1,R3,R1
   \   0000002E   085C               LDRB     R0,[R1, R0]
   \   00000030   0528               CMP      R0,#+5
   \   00000032   ECD1               BNE      ??ThermostatsTimeChartExecute_3
   \                     ??ThermostatsTimeChartExecute_6:
   \   00000034   A020               MOVS     R0,#+160
   \   00000036   5043               MULS     R0,R2,R0
   \   00000038   1F49               LDR      R1,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000003A   0C18               ADDS     R4,R1,R0
   \   0000003C   1F48               LDR      R0,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc26
   \   0000003E   2318               ADDS     R3,R4,R0
   \   00000040   1878               LDRB     R0,[R3, #+0]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   DFD0               BEQ      ??ThermostatsTimeChartExecute_1
   \   00000046   0620               MOVS     R0,#+6
   \   00000048   185E               LDRSH    R0,[R3, R0]
   \   0000004A   0421               MOVS     R1,#+4
   \   0000004C   595E               LDRSH    R1,[R3, R1]
   \   0000004E   8842               CMP      R0,R1
   \   00000050   03DA               BGE      ??ThermostatsTimeChartExecute_7
   \   00000052   0800               MOVS     R0,R1
   \   00000054   0621               MOVS     R1,#+6
   \   00000056   595E               LDRSH    R1,[R3, R1]
   \   00000058   03E0               B        ??ThermostatsTimeChartExecute_8
   \                     ??ThermostatsTimeChartExecute_7:
   \   0000005A   0620               MOVS     R0,#+6
   \   0000005C   185E               LDRSH    R0,[R3, R0]
   \   0000005E   0421               MOVS     R1,#+4
   \   00000060   595E               LDRSH    R1,[R3, R1]
   \                     ??ThermostatsTimeChartExecute_8:
   \   00000062   174D               LDR      R5,??ThermostatsTimeChartExecute_2+0x18  ;; 0xbc30
   \   00000064   6419               ADDS     R4,R4,R5
   \   00000066   174E               LDR      R6,??ThermostatsTimeChartExecute_2+0x1C  ;; DateTime
   \   00000068   F578               LDRB     R5,[R6, #+3]
   \   0000006A   DF78               LDRB     R7,[R3, #+3]
   \   0000006C   B679               LDRB     R6,[R6, #+6]
   \   0000006E   761E               SUBS     R6,R6,#+1
   \   00000070   3741               ASRS     R7,R7,R6
   \   00000072   FE07               LSLS     R6,R7,#+31
   \   00000074   05D5               BPL      ??ThermostatsTimeChartExecute_9
   \   00000076   2468               LDR      R4,[R4, #+0]
   \   00000078   EC40               LSRS     R4,R4,R5
   \   0000007A   E407               LSLS     R4,R4,#+31
   \   0000007C   06D4               BMI      ??ThermostatsTimeChartExecute_10
   \   0000007E   0800               MOVS     R0,R1
   \   00000080   04E0               B        ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_9:
   \   00000082   6468               LDR      R4,[R4, #+4]
   \   00000084   EC40               LSRS     R4,R4,R5
   \   00000086   E407               LSLS     R4,R4,#+31
   \   00000088   00D4               BMI      ??ThermostatsTimeChartExecute_10
   \   0000008A   0800               MOVS     R0,R1
   \                     ??ThermostatsTimeChartExecute_10:
   \   0000008C   5100               LSLS     R1,R2,#+1
   \   0000008E   064C               LDR      R4,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   00000090   6118               ADDS     R1,R4,R1
   \   00000092   0024               MOVS     R4,#+0
   \   00000094   0C5F               LDRSH    R4,[R1, R4]
   \   00000096   8442               CMP      R4,R0
   \   00000098   B9D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   0000009A   1881               STRH     R0,[R3, #+8]
   \   0000009C   1889               LDRH     R0,[R3, #+8]
   \   0000009E   0880               STRH     R0,[R1, #+0]
   \   000000A0   B5E7               B        ??ThermostatsTimeChartExecute_3
   1012            }
   1013          }
   \                     ??ThermostatsTimeChartExecute_4:
   \   000000A2   F8BC               POP      {R3-R7}
   \   000000A4   01BC               POP      {R0}
   \   000000A6   0047               BX       R0               ;; return
   \                     ??ThermostatsTimeChartExecute_2:
   \   000000A8   ........           DC32     ??LastTemp
   \   000000AC   F1D8FFFF           DC32     0xffffd8f1
   \   000000B0   ........           DC32     gProg + 48024
   \   000000B4   98BB0000           DC32     0xbb98
   \   000000B8   ........           DC32     gProg
   \   000000BC   26BC0000           DC32     0xbc26
   \   000000C0   30BC0000           DC32     0xbc30
   \   000000C4   ........           DC32     DateTime

   \                                 In section .bss, align 4
   \                     ??LastTemp:
   \   00000000                      DS8 16
   1014          
   1015          
   1016           // int MainScreenTermo=ScreenSetTab_0_Nr;
   1017           // int SubScreenTermo=ScreenSetTab_1_Nr;
   1018            //int MainScreenTimetable=ScreenSetTab_0_Nr+1;
   1019            //int SubScreenTimetable=ScreenSetTab_1_Nr+1;

   \                                 In section Debug.txt, align 4, keep-with-next
   1020          void ThermostatsExecute(void)
   1021          {
   \                     ThermostatsExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   16E0               B        ??ThermostatsExecute_0
   1022            short  SensorNodeValue;
   1023           
   1024            static char Hysteresis[ScreenNr];
   1025            
   1026            for (char sc=0; sc<ScreenNr; sc++)
   1027            {
   1028              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
   1029                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
   1030              {
   1031                     SensorNodeValue=0;
   1032                     if (gProg.Screen[sc].Thermo.SensorNode<0) //je¿eli zmienna
   1033                     {
   1034                       SensorNodeValue=VariablesAnal[gProg.Screen[sc].Thermo.SensorReg];
   1035                     }else{
   1036                       SensorNodeValue=MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg];
   1037                     }
   1038                
   1039                     //zeruje stan wyjœcia je¿eli temperatura wy¿sza od za³o¿onej 
   1040                     if (SensorNodeValue>=gProg.Screen[sc].Thermo.SetTemperature)
   1041                     {
   1042                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   1043                       {
   1044                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] &= ~(1<<(gProg.Screen[sc].Thermo.ActorPort%8));
   1045                       }else{
   1046                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 0);  
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1047                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   1048                       }
   1049                       Hysteresis[sc]=ThermostatHysteresis; //ustawia histerezê
   1050                     }
   1051                     
   1052                     //ustawia na 1 stan wyjœcia je¿eli temperatura ni¿sza od za³o¿onej - histereza
   1053                     if (SensorNodeValue>0)
   1054                     if (SensorNodeValue<=gProg.Screen[sc].Thermo.SetTemperature-Hysteresis[sc])
   1055                     {
   1056                       Hysteresis[sc]=0;
   1057                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   \                     ??ThermostatsExecute_1:
   \   00000006   0122               MOVS     R2,#+1
   \   00000008   7178               LDRB     R1,[R6, #+1]
   \   0000000A   D720               MOVS     R0,#+215
   \   0000000C   8000               LSLS     R0,R0,#+2        ;; #+860
   \   0000000E   0023               MOVS     R3,#+0
   \   00000010   F356               LDRSB    R3,[R6, R3]
   \   00000012   1425               MOVS     R5,#+20
   \   00000014   6B43               MULS     R3,R5,R3
   \   00000016   4B4D               LDR      R5,??ThermostatsExecute_2  ;; MainStage
   \   00000018   EB18               ADDS     R3,R5,R3
   \   0000001A   1818               ADDS     R0,R3,R0
   1058                       {
   1059                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] |= 1<<(gProg.Screen[sc].Thermo.ActorPort%8);
   1060                       }else{
   1061                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 1);   
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000001C   ........           BL       PortStageSet
   1062                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   \   00000020   4948               LDR      R0,??ThermostatsExecute_2+0x4  ;; 0x619
   \   00000022   0021               MOVS     R1,#+0
   \   00000024   7156               LDRSB    R1,[R6, R1]
   \   00000026   474A               LDR      R2,??ThermostatsExecute_2  ;; MainStage
   \   00000028   5118               ADDS     R1,R2,R1
   \   0000002A   1422               MOVS     R2,#+20
   \   0000002C   0A54               STRB     R2,[R1, R0]
   1063                       }
   \                     ??ThermostatsExecute_3:
   \   0000002E   641C               ADDS     R4,R4,#+1
   \   00000030   2406               LSLS     R4,R4,#+24
   \   00000032   240E               LSRS     R4,R4,#+24
   \                     ??ThermostatsExecute_0:
   \   00000034   2000               MOVS     R0,R4
   \   00000036   0828               CMP      R0,#+8
   \   00000038   00D3               BCC      .+4
   \   0000003A   7FE0               B        ??ThermostatsExecute_4
   \   0000003C   2000               MOVS     R0,R4
   \   0000003E   08D1               BNE      ??ThermostatsExecute_5
   \   00000040   4248               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0xbb98
   \   00000042   2100               MOVS     R1,R4
   \   00000044   A022               MOVS     R2,#+160
   \   00000046   5143               MULS     R1,R2,R1
   \   00000048   414A               LDR      R2,??ThermostatsExecute_2+0xC  ;; gProg
   \   0000004A   5118               ADDS     R1,R2,R1
   \   0000004C   085C               LDRB     R0,[R1, R0]
   \   0000004E   0828               CMP      R0,#+8
   \   00000050   0AD0               BEQ      ??ThermostatsExecute_6
   \                     ??ThermostatsExecute_5:
   \   00000052   2000               MOVS     R0,R4
   \   00000054   EBD0               BEQ      ??ThermostatsExecute_3
   \   00000056   3D48               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0xbb98
   \   00000058   2100               MOVS     R1,R4
   \   0000005A   A022               MOVS     R2,#+160
   \   0000005C   5143               MULS     R1,R2,R1
   \   0000005E   3C4A               LDR      R2,??ThermostatsExecute_2+0xC  ;; gProg
   \   00000060   5118               ADDS     R1,R2,R1
   \   00000062   085C               LDRB     R0,[R1, R0]
   \   00000064   0528               CMP      R0,#+5
   \   00000066   E2D1               BNE      ??ThermostatsExecute_3
   \                     ??ThermostatsExecute_6:
   \   00000068   2500               MOVS     R5,R4
   \   0000006A   3A48               LDR      R0,??ThermostatsExecute_2+0x10  ;; 0xbc24
   \   0000006C   A021               MOVS     R1,#+160
   \   0000006E   6943               MULS     R1,R5,R1
   \   00000070   5118               ADDS     R1,R2,R1
   \   00000072   0E18               ADDS     R6,R1,R0
   \   00000074   0320               MOVS     R0,#+3
   \   00000076   3056               LDRSB    R0,[R6, R0]
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   04D5               BPL      ??ThermostatsExecute_7
   \   0000007C   3079               LDRB     R0,[R6, #+4]
   \   0000007E   4000               LSLS     R0,R0,#+1
   \   00000080   3549               LDR      R1,??ThermostatsExecute_2+0x14  ;; VariablesAnal
   \   00000082   0F5E               LDRSH    R7,[R1, R0]
   \   00000084   08E0               B        ??ThermostatsExecute_8
   \                     ??ThermostatsExecute_7:
   \   00000086   A021               MOVS     R1,#+160
   \   00000088   3279               LDRB     R2,[R6, #+4]
   \   0000008A   5200               LSLS     R2,R2,#+1
   \   0000008C   1423               MOVS     R3,#+20
   \   0000008E   5843               MULS     R0,R3,R0
   \   00000090   2C4B               LDR      R3,??ThermostatsExecute_2  ;; MainStage
   \   00000092   1818               ADDS     R0,R3,R0
   \   00000094   8018               ADDS     R0,R0,R2
   \   00000096   475E               LDRSH    R7,[R0, R1]
   \                     ??ThermostatsExecute_8:
   \   00000098   0A20               MOVS     R0,#+10
   \   0000009A   305E               LDRSH    R0,[R6, R0]
   \   0000009C   8742               CMP      R7,R0
   \   0000009E   2DDB               BLT      ??ThermostatsExecute_9
   \   000000A0   0020               MOVS     R0,#+0
   \   000000A2   3056               LDRSB    R0,[R6, R0]
   \   000000A4   0028               CMP      R0,#+0
   \   000000A6   10D5               BPL      ??ThermostatsExecute_10
   \   000000A8   7078               LDRB     R0,[R6, #+1]
   \   000000AA   2C49               LDR      R1,??ThermostatsExecute_2+0x18  ;; Variables
   \   000000AC   0200               MOVS     R2,R0
   \   000000AE   D210               ASRS     R2,R2,#+3
   \   000000B0   8918               ADDS     R1,R1,R2
   \   000000B2   0A78               LDRB     R2,[R1, #+0]
   \   000000B4   9446               MOV      R12,R2
   \   000000B6   0122               MOVS     R2,#+1
   \   000000B8   0300               MOVS     R3,R0
   \   000000BA   DB08               LSRS     R3,R3,#+3
   \   000000BC   DB00               LSLS     R3,R3,#+3
   \   000000BE   C01A               SUBS     R0,R0,R3
   \   000000C0   8240               LSLS     R2,R2,R0
   \   000000C2   6046               MOV      R0,R12
   \   000000C4   9043               BICS     R0,R0,R2
   \   000000C6   0870               STRB     R0,[R1, #+0]
   \   000000C8   15E0               B        ??ThermostatsExecute_11
   \                     ??ThermostatsExecute_10:
   \   000000CA   0022               MOVS     R2,#+0
   \   000000CC   7178               LDRB     R1,[R6, #+1]
   \   000000CE   8C46               MOV      R12,R1
   \   000000D0   D721               MOVS     R1,#+215
   \   000000D2   8900               LSLS     R1,R1,#+2        ;; #+860
   \   000000D4   0020               MOVS     R0,#+0
   \   000000D6   3056               LDRSB    R0,[R6, R0]
   \   000000D8   1423               MOVS     R3,#+20
   \   000000DA   5843               MULS     R0,R3,R0
   \   000000DC   194B               LDR      R3,??ThermostatsExecute_2  ;; MainStage
   \   000000DE   1818               ADDS     R0,R3,R0
   \   000000E0   4018               ADDS     R0,R0,R1
   \   000000E2   6146               MOV      R1,R12
   \   000000E4   ........           BL       PortStageSet
   \   000000E8   1748               LDR      R0,??ThermostatsExecute_2+0x4  ;; 0x619
   \   000000EA   0021               MOVS     R1,#+0
   \   000000EC   7156               LDRSB    R1,[R6, R1]
   \   000000EE   154A               LDR      R2,??ThermostatsExecute_2  ;; MainStage
   \   000000F0   5118               ADDS     R1,R2,R1
   \   000000F2   1422               MOVS     R2,#+20
   \   000000F4   0A54               STRB     R2,[R1, R0]
   \                     ??ThermostatsExecute_11:
   \   000000F6   1A48               LDR      R0,??ThermostatsExecute_2+0x1C  ;; ??Hysteresis
   \   000000F8   0221               MOVS     R1,#+2
   \   000000FA   4155               STRB     R1,[R0, R5]
   \                     ??ThermostatsExecute_9:
   \   000000FC   012F               CMP      R7,#+1
   \   000000FE   96DB               BLT      ??ThermostatsExecute_3
   \   00000100   1748               LDR      R0,??ThermostatsExecute_2+0x1C  ;; ??Hysteresis
   \   00000102   4019               ADDS     R0,R0,R5
   \   00000104   0A21               MOVS     R1,#+10
   \   00000106   715E               LDRSH    R1,[R6, R1]
   \   00000108   0278               LDRB     R2,[R0, #+0]
   \   0000010A   891A               SUBS     R1,R1,R2
   \   0000010C   B942               CMP      R1,R7
   \   0000010E   8EDB               BLT      ??ThermostatsExecute_3
   \   00000110   0021               MOVS     R1,#+0
   \   00000112   0170               STRB     R1,[R0, #+0]
   \   00000114   0020               MOVS     R0,#+0
   \   00000116   3056               LDRSB    R0,[R6, R0]
   \   00000118   0028               CMP      R0,#+0
   \   0000011A   00D4               BMI      .+4
   \   0000011C   73E7               B        ??ThermostatsExecute_1
   \   0000011E   7078               LDRB     R0,[R6, #+1]
   \   00000120   0E49               LDR      R1,??ThermostatsExecute_2+0x18  ;; Variables
   \   00000122   0200               MOVS     R2,R0
   \   00000124   D210               ASRS     R2,R2,#+3
   \   00000126   8918               ADDS     R1,R1,R2
   \   00000128   0A78               LDRB     R2,[R1, #+0]
   \   0000012A   0123               MOVS     R3,#+1
   \   0000012C   0500               MOVS     R5,R0
   \   0000012E   ED08               LSRS     R5,R5,#+3
   \   00000130   ED00               LSLS     R5,R5,#+3
   \   00000132   401B               SUBS     R0,R0,R5
   \   00000134   8340               LSLS     R3,R3,R0
   \   00000136   1343               ORRS     R3,R3,R2
   \   00000138   0B70               STRB     R3,[R1, #+0]
   \   0000013A   78E7               B        ??ThermostatsExecute_3
   1064                     }
   1065                     
   1066                     
   1067              }
   1068            }
   1069          }
   \                     ??ThermostatsExecute_4:
   \   0000013C   F8BC               POP      {R3-R7}
   \   0000013E   01BC               POP      {R0}
   \   00000140   0047               BX       R0               ;; return
   \   00000142   C046               Nop      
   \                     ??ThermostatsExecute_2:
   \   00000144   ........           DC32     MainStage
   \   00000148   19060000           DC32     0x619
   \   0000014C   98BB0000           DC32     0xbb98
   \   00000150   ........           DC32     gProg
   \   00000154   24BC0000           DC32     0xbc24
   \   00000158   ........           DC32     VariablesAnal
   \   0000015C   ........           DC32     Variables
   \   00000160   ........           DC32     ??Hysteresis

   \                                 In section .bss, align 4
   \                     ??Hysteresis:
   \   00000000                      DS8 8
   1070          
   1071          
   1072          
   1073          char out[10]={1,1,1,1,1,1,1,1,1,1};

   \                                 In section Debug.txt, align 4, keep-with-next
   1074          void AlarmExecute(void)
   1075          {
   \                     AlarmExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0026               MOVS     R6,#+0
   \   00000004   2BE0               B        ??AlarmExecute_0
   1076          
   1077          static long long AlarmOnTime[ScreenNr];  //czas do odliczania dla alarmu
   1078          static long long AlarmOffTime[ScreenNr];
   1079            
   1080            for (char sc=0; sc<ScreenNr; sc++)
   1081            {
   1082              if ((((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenAlarm)) || 
   1083                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenAlarm))))
   1084              {
   1085                if (AlarmScreenAction[sc].Active) 
   1086                {
   1087                           //zeruje stan wyjœcia je¿eli zda¿enie od czujnika             
   1088                      if (PortStageRead(MainStage.StageI[gProg.Screen[sc].Alarm.SensorNode].Port, gProg.Screen[sc].Alarm.SensorPort)==0x1)  
   1089                           {
   1090                             if (AlarmOnTime[sc]==0) {AlarmOnTime[sc]=g_counter;}
   1091                             if ((g_counter>AlarmOnTime[sc]+AlarmTimeToActive*1000) && (out[sc]==0))
   1092                             {
   1093                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 0);
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1094                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1095                                AlarmOn=1; 
   1096                                out[sc]=1;
   1097                                AlarmOffTime[sc]=g_counter;
   1098                             }
   1099                             if ((AlarmOffTime>0) && (g_counter>AlarmOffTime[sc]+AlarmSirenTime*1000) && (out[sc]==1))
   1100                             {
   1101                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1); 
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1102                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1103                                AlarmOn=0; 
   1104                                out[sc]=1;
   1105                                AlarmOffTime[sc]=0;
   1106           
   1107                             }
   1108                             
   1109                            
   1110                             
   1111                           }
   1112                }else{
   1113                  if (out[sc]==1)
   \                     ??AlarmExecute_1:
   \   00000006   7248               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000008   0719               ADDS     R7,R0,R4
   \   0000000A   387C               LDRB     R0,[R7, #+16]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   23D1               BNE      ??AlarmExecute_3
   1114                  {
   1115                      out[sc]=0;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   3874               STRB     R0,[R7, #+16]
   1116                      AlarmOnTime[sc]=0;
   \   00000014   E000               LSLS     R0,R4,#+3
   \   00000016   0A18               ADDS     R2,R1,R0
   \   00000018   2032               ADDS     R2,R2,#+32
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   0100               MOVS     R1,R0
   \   0000001E   03C2               STM      R2!,{R0,R1}
   1117                      AlarmOn=0; 
   \   00000020   6C48               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 20
   \   00000022   0170               STRB     R1,[R0, #+0]
   1118                      PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1);
                                          ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000024   A020               MOVS     R0,#+160
   \   00000026   4443               MULS     R4,R0,R4
   \   00000028   6B48               LDR      R0,??AlarmExecute_2+0x8  ;; gProg
   \   0000002A   0019               ADDS     R0,R0,R4
   \   0000002C   6B49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   0000002E   4518               ADDS     R5,R0,R1
   \   00000030   0122               MOVS     R2,#+1
   \   00000032   6978               LDRB     R1,[R5, #+1]
   \   00000034   D720               MOVS     R0,#+215
   \   00000036   8000               LSLS     R0,R0,#+2        ;; #+860
   \   00000038   0023               MOVS     R3,#+0
   \   0000003A   EB56               LDRSB    R3,[R5, R3]
   \   0000003C   1424               MOVS     R4,#+20
   \   0000003E   6343               MULS     R3,R4,R3
   \   00000040   674C               LDR      R4,??AlarmExecute_2+0x10  ;; MainStage
   \   00000042   E318               ADDS     R3,R4,R3
   \   00000044   1818               ADDS     R0,R3,R0
   \   00000046   ........           BL       PortStageSet
   1119                      MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   \   0000004A   6648               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   6956               LDRSB    R1,[R5, R1]
   \   00000050   634A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   00000052   5118               ADDS     R1,R2,R1
   \   00000054   1422               MOVS     R2,#+20
   \   00000056   0A54               STRB     R2,[R1, R0]
   1120                  }
   1121                }
   \                     ??AlarmExecute_3:
   \   00000058   761C               ADDS     R6,R6,#+1
   \   0000005A   3606               LSLS     R6,R6,#+24
   \   0000005C   360E               LSRS     R6,R6,#+24
   \                     ??AlarmExecute_0:
   \   0000005E   3000               MOVS     R0,R6
   \   00000060   0828               CMP      R0,#+8
   \   00000062   00D3               BCC      .+4
   \   00000064   B0E0               B        ??AlarmExecute_4
   \   00000066   3000               MOVS     R0,R6
   \   00000068   08D1               BNE      ??AlarmExecute_5
   \   0000006A   5F48               LDR      R0,??AlarmExecute_2+0x18  ;; 0xbb98
   \   0000006C   3100               MOVS     R1,R6
   \   0000006E   A022               MOVS     R2,#+160
   \   00000070   5143               MULS     R1,R2,R1
   \   00000072   594A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   00000074   5118               ADDS     R1,R2,R1
   \   00000076   085C               LDRB     R0,[R1, R0]
   \   00000078   0A28               CMP      R0,#+10
   \   0000007A   0AD0               BEQ      ??AlarmExecute_6
   \                     ??AlarmExecute_5:
   \   0000007C   3000               MOVS     R0,R6
   \   0000007E   EBD0               BEQ      ??AlarmExecute_3
   \   00000080   5948               LDR      R0,??AlarmExecute_2+0x18  ;; 0xbb98
   \   00000082   3100               MOVS     R1,R6
   \   00000084   A022               MOVS     R2,#+160
   \   00000086   5143               MULS     R1,R2,R1
   \   00000088   534A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   0000008A   5118               ADDS     R1,R2,R1
   \   0000008C   085C               LDRB     R0,[R1, R0]
   \   0000008E   0728               CMP      R0,#+7
   \   00000090   E2D1               BNE      ??AlarmExecute_3
   \                     ??AlarmExecute_6:
   \   00000092   3400               MOVS     R4,R6
   \   00000094   6000               LSLS     R0,R4,#+1
   \   00000096   4E49               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000098   085C               LDRB     R0,[R1, R0]
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   B3D0               BEQ      ??AlarmExecute_1
   \   0000009E   A020               MOVS     R0,#+160
   \   000000A0   6043               MULS     R0,R4,R0
   \   000000A2   4D49               LDR      R1,??AlarmExecute_2+0x8  ;; gProg
   \   000000A4   0818               ADDS     R0,R1,R0
   \   000000A6   4D49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   000000A8   4518               ADDS     R5,R0,R1
   \   000000AA   E978               LDRB     R1,[R5, #+3]
   \   000000AC   0220               MOVS     R0,#+2
   \   000000AE   2856               LDRSB    R0,[R5, R0]
   \   000000B0   1422               MOVS     R2,#+20
   \   000000B2   5043               MULS     R0,R2,R0
   \   000000B4   4A4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   000000B6   1018               ADDS     R0,R2,R0
   \   000000B8   A030               ADDS     R0,R0,#+160
   \   000000BA   0088               LDRH     R0,[R0, #+0]
   \   000000BC   0004               LSLS     R0,R0,#+16
   \   000000BE   0014               ASRS     R0,R0,#+16
   \   000000C0   ........           BL       PortStageRead
   \   000000C4   0128               CMP      R0,#+1
   \   000000C6   C7D1               BNE      ??AlarmExecute_3
   \   000000C8   E000               LSLS     R0,R4,#+3
   \   000000CA   4149               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   000000CC   0818               ADDS     R0,R1,R0
   \   000000CE   0090               STR      R0,[SP, #+0]
   \   000000D0   2030               ADDS     R0,R0,#+32
   \   000000D2   03C8               LDM      R0!,{R0,R1}
   \   000000D4   0029               CMP      R1,#+0
   \   000000D6   06D1               BNE      ??AlarmExecute_7
   \   000000D8   0028               CMP      R0,#+0
   \   000000DA   04D1               BNE      ??AlarmExecute_7
   \   000000DC   009A               LDR      R2,[SP, #+0]
   \   000000DE   2032               ADDS     R2,R2,#+32
   \   000000E0   4248               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 48
   \   000000E2   03C8               LDM      R0!,{R0,R1}
   \   000000E4   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_7:
   \   000000E6   0098               LDR      R0,[SP, #+0]
   \   000000E8   2030               ADDS     R0,R0,#+32
   \   000000EA   03C8               LDM      R0!,{R0,R1}
   \   000000EC   0200               MOVS     R2,R0
   \   000000EE   0B00               MOVS     R3,R1
   \   000000F0   3F48               LDR      R0,??AlarmExecute_2+0x20  ;; 0xea60
   \   000000F2   0021               MOVS     R1,#+0
   \   000000F4   8018               ADDS     R0,R0,R2
   \   000000F6   5941               ADCS     R1,R1,R3
   \   000000F8   0200               MOVS     R2,R0
   \   000000FA   0B00               MOVS     R3,R1
   \   000000FC   3B48               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 48
   \   000000FE   03C8               LDM      R0!,{R0,R1}
   \   00000100   8B42               CMP      R3,R1
   \   00000102   25D8               BHI      ??AlarmExecute_8
   \   00000104   01D3               BCC      ??AlarmExecute_9
   \   00000106   8242               CMP      R2,R0
   \   00000108   22D2               BCS      ??AlarmExecute_8
   \                     ??AlarmExecute_9:
   \   0000010A   3148               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   0000010C   0719               ADDS     R7,R0,R4
   \   0000010E   387C               LDRB     R0,[R7, #+16]
   \   00000110   0028               CMP      R0,#+0
   \   00000112   1DD1               BNE      ??AlarmExecute_8
   \   00000114   0022               MOVS     R2,#+0
   \   00000116   6978               LDRB     R1,[R5, #+1]
   \   00000118   8C46               MOV      R12,R1
   \   0000011A   D721               MOVS     R1,#+215
   \   0000011C   8900               LSLS     R1,R1,#+2        ;; #+860
   \   0000011E   2856               LDRSB    R0,[R5, R0]
   \   00000120   1423               MOVS     R3,#+20
   \   00000122   5843               MULS     R0,R3,R0
   \   00000124   2E4B               LDR      R3,??AlarmExecute_2+0x10  ;; MainStage
   \   00000126   1818               ADDS     R0,R3,R0
   \   00000128   4018               ADDS     R0,R0,R1
   \   0000012A   6146               MOV      R1,R12
   \   0000012C   ........           BL       PortStageSet
   \   00000130   2C48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   00000132   0021               MOVS     R1,#+0
   \   00000134   6956               LDRSB    R1,[R5, R1]
   \   00000136   2A4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   00000138   5118               ADDS     R1,R2,R1
   \   0000013A   1422               MOVS     R2,#+20
   \   0000013C   0A54               STRB     R2,[R1, R0]
   \   0000013E   0120               MOVS     R0,#+1
   \   00000140   2449               LDR      R1,??AlarmExecute_2+0x4  ;; DateTime + 20
   \   00000142   0870               STRB     R0,[R1, #+0]
   \   00000144   3874               STRB     R0,[R7, #+16]
   \   00000146   009A               LDR      R2,[SP, #+0]
   \   00000148   6032               ADDS     R2,R2,#+96
   \   0000014A   2848               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 48
   \   0000014C   03C8               LDM      R0!,{R0,R1}
   \   0000014E   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_8:
   \   00000150   2848               LDR      R0,??AlarmExecute_2+0x24  ;; AlarmScreenAction + 96
   \   00000152   0028               CMP      R0,#+0
   \   00000154   00D1               BNE      .+4
   \   00000156   7FE7               B        ??AlarmExecute_3
   \   00000158   009A               LDR      R2,[SP, #+0]
   \   0000015A   106E               LDR      R0,[R2, #+96]
   \   0000015C   516E               LDR      R1,[R2, #+100]
   \   0000015E   0200               MOVS     R2,R0
   \   00000160   0B00               MOVS     R3,R1
   \   00000162   2548               LDR      R0,??AlarmExecute_2+0x28  ;; 0x493e0
   \   00000164   0021               MOVS     R1,#+0
   \   00000166   8018               ADDS     R0,R0,R2
   \   00000168   5941               ADCS     R1,R1,R3
   \   0000016A   0200               MOVS     R2,R0
   \   0000016C   0B00               MOVS     R3,R1
   \   0000016E   1F48               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 48
   \   00000170   03C8               LDM      R0!,{R0,R1}
   \   00000172   8B42               CMP      R3,R1
   \   00000174   00D9               BLS      .+4
   \   00000176   6FE7               B        ??AlarmExecute_3
   \   00000178   02D3               BCC      ??AlarmExecute_10
   \   0000017A   8242               CMP      R2,R0
   \   0000017C   00D3               BCC      .+4
   \   0000017E   6BE7               B        ??AlarmExecute_3
   \                     ??AlarmExecute_10:
   \   00000180   1348               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000182   0719               ADDS     R7,R0,R4
   \   00000184   387C               LDRB     R0,[R7, #+16]
   \   00000186   0128               CMP      R0,#+1
   \   00000188   00D0               BEQ      .+4
   \   0000018A   65E7               B        ??AlarmExecute_3
   \   0000018C   0122               MOVS     R2,#+1
   \   0000018E   6978               LDRB     R1,[R5, #+1]
   \   00000190   D720               MOVS     R0,#+215
   \   00000192   8000               LSLS     R0,R0,#+2        ;; #+860
   \   00000194   0023               MOVS     R3,#+0
   \   00000196   EB56               LDRSB    R3,[R5, R3]
   \   00000198   1424               MOVS     R4,#+20
   \   0000019A   6343               MULS     R3,R4,R3
   \   0000019C   104C               LDR      R4,??AlarmExecute_2+0x10  ;; MainStage
   \   0000019E   E318               ADDS     R3,R4,R3
   \   000001A0   1818               ADDS     R0,R3,R0
   \   000001A2   ........           BL       PortStageSet
   \   000001A6   0F48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   000001A8   0021               MOVS     R1,#+0
   \   000001AA   6956               LDRSB    R1,[R5, R1]
   \   000001AC   0C4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   000001AE   5118               ADDS     R1,R2,R1
   \   000001B0   1422               MOVS     R2,#+20
   \   000001B2   0A54               STRB     R2,[R1, R0]
   \   000001B4   0748               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 20
   \   000001B6   0021               MOVS     R1,#+0
   \   000001B8   0170               STRB     R1,[R0, #+0]
   \   000001BA   0120               MOVS     R0,#+1
   \   000001BC   3874               STRB     R0,[R7, #+16]
   \   000001BE   009A               LDR      R2,[SP, #+0]
   \   000001C0   6032               ADDS     R2,R2,#+96
   \   000001C2   0800               MOVS     R0,R1
   \   000001C4   03C2               STM      R2!,{R0,R1}
   \   000001C6   47E7               B        ??AlarmExecute_3
   1122                     
   1123              }
   1124            }
   1125          }
   \                     ??AlarmExecute_4:
   \   000001C8   F8BC               POP      {R3-R7}
   \   000001CA   01BC               POP      {R0}
   \   000001CC   0047               BX       R0               ;; return
   \   000001CE   C046               Nop      
   \                     ??AlarmExecute_2:
   \   000001D0   ........           DC32     AlarmScreenAction
   \   000001D4   ........           DC32     DateTime + 20
   \   000001D8   ........           DC32     gProg
   \   000001DC   24BC0000           DC32     0xbc24
   \   000001E0   ........           DC32     MainStage
   \   000001E4   19060000           DC32     0x619
   \   000001E8   98BB0000           DC32     0xbb98
   \   000001EC   ........           DC32     DateTime + 48
   \   000001F0   60EA0000           DC32     0xea60
   \   000001F4   ........           DC32     AlarmScreenAction + 96
   \   000001F8   E0930400           DC32     0x493e0
   1126          
   1127          
   1128          
   1129          
   1130          
   1131          
   1132          
   1133          //-----------------------------------------------------------------------------
   1134          //! Nazwa funkcji :    Timer_1h  
   1135          //! Okres: 1 godzina
   1136          //-----------------------------------------------------------------------------
   1137          //  
   1138          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1139          void Timer_1h(void)                  
   1140          { 
   \                     Timer_1h:
   \   00000000   01B5               PUSH     {R0,LR}
   1141              ThermostatsTimeChartExecute();
   \   00000002   ........           BL       ThermostatsTimeChartExecute
   1142          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
   1143          
   1144          
   1145          
   1146          //-----------------------------------------------------------------------------
   1147          //! Nazwa funkcji :    Timer_1min  
   1148          //! Okres: 1min
   1149          //-----------------------------------------------------------------------------
   1150          //  
   1151          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1152          void Timer_1min(void)                  
   1153          { 
   \                     Timer_1min:
   \   00000000   01B5               PUSH     {R0,LR}
   1154             TimetableExecute();
   \   00000002   ........           BL       TimetableExecute
   1155             ThermostatsExecute();
   \   00000006   ........           BL       ThermostatsExecute
   1156             
   1157          }//_____________________________________________________________________________
   \   0000000A   08BC               POP      {R3}
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
   1158          
   1159          
   1160          
   1161          
   1162          
   1163          
   1164          //-----------------------------------------------------------------------------
   1165          //! Nazwa funkcji :    Timer_1s  
   1166          //! Okres: 1s
   1167          //! Funkcja obs³ugi przerwania USART 0
   1168          //-----------------------------------------------------------------------------
   1169          //  
   1170          //----------------------------------------------------------------------------- 

   \                                 In section .bss, align 4
   1171          int XY_Tab[11];
   \                     XY_Tab:
   \   00000000                      DS8 44
   1172          int LiczOds = 0;
   1173          #define x_offset 1
   1174          #define y_offset 6

   \                                 In section .bss, align 1
   1175          char display_cykl =0;
   \                     display_cykl:
   \   00000000                      DS8 1
   1176          int X_up_old =-1;
   1177          int Y_up_old =-1;
   1178          int X_down_old =-1;
   1179          int Y_down_old =-1;
   1180          char g_PC_Connected_timeout=5;
   1181          
   1182          
   1183          unsigned int CyklPerSekCount=0; 
   1184          unsigned int TransLoopTime=0;
   1185          unsigned int CyklPerSek=1;
   1186          int MenuLevel_old; //tmp
   1187           char FlagChangeTime=0;
   1188          
   1189          
   1190          

   \                                 In section Debug.txt, align 4, keep-with-next
   1191          void Timer_1s(void)                        //timer isr 
   1192          { 
   \                     Timer_1s:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   1193          
   1194            if ((AlarmOn) || (Speaker[1]==1)) 
   \   00000002   AB4C               LDR      R4,??Timer_1s_1  ;; DateTime
   \   00000004   207D               LDRB     R0,[R4, #+20]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   02D1               BNE      ??Timer_1s_2
   \   0000000A   607A               LDRB     R0,[R4, #+9]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   0DD1               BNE      ??Timer_1s_3
   1195            {
   1196                ButtonBipCounter=g_counter+500;
   \                     ??Timer_1s_2:
   \   00000010   A84D               LDR      R5,??Timer_1s_1+0x4  ;; ButtonBipCounter
   \   00000012   2000               MOVS     R0,R4
   \   00000014   3030               ADDS     R0,R0,#+48
   \   00000016   0CC8               LDM      R0!,{R2,R3}
   \   00000018   FA20               MOVS     R0,#+250
   \   0000001A   4000               LSLS     R0,R0,#+1        ;; #+500
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   8018               ADDS     R0,R0,R2
   \   00000020   5941               ADCS     R1,R1,R3
   \   00000022   03C5               STM      R5!,{R0,R1}
   1197                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000024   A448               LDR      R0,??Timer_1s_1+0x8  ;; 0xfffff430
   \   00000026   8021               MOVS     R1,#+128
   \   00000028   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000002A   0160               STR      R1,[R0, #+0]
   1198            }
   1199          
   1200             g_seconds_counter++;
   \                     ??Timer_1s_3:
   \   0000002C   606C               LDR      R0,[R4, #+68]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   6064               STR      R0,[R4, #+68]
   1201          
   1202            
   1203            if (CyklPerSekCount>0)
   \   00000032   E56D               LDR      R5,[R4, #+92]
   \   00000034   002D               CMP      R5,#+0
   \   00000036   07D0               BEQ      ??Timer_1s_4
   1204            {
   1205             TransLoopTime=(1000/CyklPerSekCount);     //czas obiegu programu w ms
   \   00000038   FA20               MOVS     R0,#+250
   \   0000003A   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000003C   2900               MOVS     R1,R5
   \   0000003E   ........           BL       __aeabi_uidivmod
   \   00000042   2066               STR      R0,[R4, #+96]
   1206             CyklPerSek=CyklPerSekCount;               //iloœæ cykli na sekunde
   \   00000044   6566               STR      R5,[R4, #+100]
   \   00000046   01E0               B        ??Timer_1s_5
   1207            }else{
   1208             TransLoopTime=0;
   \                     ??Timer_1s_4:
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   2066               STR      R0,[R4, #+96]
   1209            }
   1210            CyklPerSekCount=0;
   \                     ??Timer_1s_5:
   \   0000004C   0025               MOVS     R5,#+0
   \   0000004E   E565               STR      R5,[R4, #+92]
   1211          
   1212                       
   1213            
   1214            
   1215              //Wy³¹czanie podœwietlenia wyœwietlacza
   1216            
   1217            if (g_LightCouterLCD==0) 
   \   00000050   A06C               LDR      R0,[R4, #+72]
   \   00000052   0028               CMP      R0,#+0
   \   00000054   01D1               BNE      ??Timer_1s_6
   1218            {
   1219              g_LightLCDEnable=1;
   \   00000056   0121               MOVS     R1,#+1
   \   00000058   6173               STRB     R1,[R4, #+13]
   1220            }
   1221            if ((g_LightCouterLCD < LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_6:
   \   0000005A   0A28               CMP      R0,#+10
   \   0000005C   04DA               BGE      ??Timer_1s_7
   \   0000005E   217B               LDRB     R1,[R4, #+12]
   \   00000060   0029               CMP      R1,#+0
   \   00000062   01D1               BNE      ??Timer_1s_7
   1222            {
   1223                g_LightCouterLCD++;
   \   00000064   401C               ADDS     R0,R0,#+1
   \   00000066   A064               STR      R0,[R4, #+72]
   1224                  
   1225            } 
   1226            
   1227            
   1228            if ((g_LightCouterLCD >= LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_7:
   \   00000068   A06C               LDR      R0,[R4, #+72]
   \   0000006A   0A28               CMP      R0,#+10
   \   0000006C   03DB               BLT      ??Timer_1s_8
   \   0000006E   207B               LDRB     R0,[R4, #+12]
   \   00000070   0028               CMP      R0,#+0
   \   00000072   00D1               BNE      ??Timer_1s_8
   1229              
   1230            {
   1231             g_LightLCDEnable=0; 
   \   00000074   6073               STRB     R0,[R4, #+13]
   1232            }
   1233          
   1234            
   1235            if ((DateTime.DayOfWeek)==0) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_8:
   \   00000076   A079               LDRB     R0,[R4, #+6]
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   01D1               BNE      ??Timer_1s_9
   \   0000007C   0120               MOVS     R0,#+1
   \   0000007E   A071               STRB     R0,[R4, #+6]
   1236            
   1237            if (DateTime.Second<59) {DateTime.Second++;} else {DateTime.Second=0; DateTime.Minute++;};
   \                     ??Timer_1s_9:
   \   00000080   6079               LDRB     R0,[R4, #+5]
   \   00000082   3B28               CMP      R0,#+59
   \   00000084   02D2               BCS      ??Timer_1s_10
   \   00000086   401C               ADDS     R0,R0,#+1
   \   00000088   6071               STRB     R0,[R4, #+5]
   \   0000008A   04E0               B        ??Timer_1s_11
   \                     ??Timer_1s_10:
   \   0000008C   2800               MOVS     R0,R5
   \   0000008E   6071               STRB     R0,[R4, #+5]
   \   00000090   2079               LDRB     R0,[R4, #+4]
   \   00000092   401C               ADDS     R0,R0,#+1
   \   00000094   2071               STRB     R0,[R4, #+4]
   1238            if (DateTime.Minute>59) {
   \                     ??Timer_1s_11:
   \   00000096   2079               LDRB     R0,[R4, #+4]
   \   00000098   3C28               CMP      R0,#+60
   \   0000009A   33D3               BCC      ??Timer_1s_12
   1239                DateTime.Minute=0; 
   \   0000009C   2800               MOVS     R0,R5
   \   0000009E   2071               STRB     R0,[R4, #+4]
   1240                DateTime.Hour++;
   \   000000A0   E078               LDRB     R0,[R4, #+3]
   \   000000A2   401C               ADDS     R0,R0,#+1
   \   000000A4   E070               STRB     R0,[R4, #+3]
   1241                   //zmiana czasu z zimowego na letni
   1242                 if ((DateTime.Mounth==3) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==2) && (DateTime.Second==0))
   \   000000A6   6178               LDRB     R1,[R4, #+1]
   \   000000A8   0329               CMP      R1,#+3
   \   000000AA   10D1               BNE      ??Timer_1s_13
   \   000000AC   A178               LDRB     R1,[R4, #+2]
   \   000000AE   1929               CMP      R1,#+25
   \   000000B0   0DD3               BCC      ??Timer_1s_13
   \   000000B2   A179               LDRB     R1,[R4, #+6]
   \   000000B4   0729               CMP      R1,#+7
   \   000000B6   0AD1               BNE      ??Timer_1s_13
   \   000000B8   0006               LSLS     R0,R0,#+24
   \   000000BA   000E               LSRS     R0,R0,#+24
   \   000000BC   0228               CMP      R0,#+2
   \   000000BE   06D1               BNE      ??Timer_1s_13
   \   000000C0   6079               LDRB     R0,[R4, #+5]
   \   000000C2   0028               CMP      R0,#+0
   \   000000C4   03D1               BNE      ??Timer_1s_13
   1243                 {
   1244                   DateTime.Hour=3;
   \   000000C6   0320               MOVS     R0,#+3
   \   000000C8   E070               STRB     R0,[R4, #+3]
   1245                   SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000CA   ........           BL       SetRTC_DateTime
   1246          
   1247                 }
   1248                 //zmiana czasu z letniego na zimowy
   1249                 if ((DateTime.Mounth==10) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==3) && (DateTime.Second==0))
   \                     ??Timer_1s_13:
   \   000000CE   6078               LDRB     R0,[R4, #+1]
   \   000000D0   0A28               CMP      R0,#+10
   \   000000D2   17D1               BNE      ??Timer_1s_12
   \   000000D4   A078               LDRB     R0,[R4, #+2]
   \   000000D6   1928               CMP      R0,#+25
   \   000000D8   14D3               BCC      ??Timer_1s_12
   \   000000DA   A079               LDRB     R0,[R4, #+6]
   \   000000DC   0728               CMP      R0,#+7
   \   000000DE   11D1               BNE      ??Timer_1s_12
   \   000000E0   E078               LDRB     R0,[R4, #+3]
   \   000000E2   0328               CMP      R0,#+3
   \   000000E4   0ED1               BNE      ??Timer_1s_12
   \   000000E6   6079               LDRB     R0,[R4, #+5]
   \   000000E8   0028               CMP      R0,#+0
   \   000000EA   0BD1               BNE      ??Timer_1s_12
   1250                 {
   1251                   if (FlagChangeTime==0)
   \   000000EC   E07D               LDRB     R0,[R4, #+23]
   \   000000EE   0028               CMP      R0,#+0
   \   000000F0   06D1               BNE      ??Timer_1s_14
   1252                   {
   1253                      FlagChangeTime=1; 
   \   000000F2   0120               MOVS     R0,#+1
   \   000000F4   E075               STRB     R0,[R4, #+23]
   1254                      DateTime.Hour=2;
   \   000000F6   0220               MOVS     R0,#+2
   \   000000F8   E070               STRB     R0,[R4, #+3]
   1255                      SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000FA   ........           BL       SetRTC_DateTime
   \   000000FE   01E0               B        ??Timer_1s_12
   1256                   }else{
   1257                      FlagChangeTime=0; 
   \                     ??Timer_1s_14:
   \   00000100   2800               MOVS     R0,R5
   \   00000102   E075               STRB     R0,[R4, #+23]
   1258                   }
   1259                 }
   1260            }
   1261            
   1262            if (DateTime.Hour>23)   {
   \                     ??Timer_1s_12:
   \   00000104   E078               LDRB     R0,[R4, #+3]
   \   00000106   1828               CMP      R0,#+24
   \   00000108   07D3               BCC      ??Timer_1s_15
   1263              DateTime.Hour=0;     
   \   0000010A   2800               MOVS     R0,R5
   \   0000010C   E070               STRB     R0,[R4, #+3]
   1264              DateTime.DayOfWeek++; DateTime.Day++;
   \   0000010E   A079               LDRB     R0,[R4, #+6]
   \   00000110   401C               ADDS     R0,R0,#+1
   \   00000112   A071               STRB     R0,[R4, #+6]
   \   00000114   A078               LDRB     R0,[R4, #+2]
   \   00000116   401C               ADDS     R0,R0,#+1
   \   00000118   A070               STRB     R0,[R4, #+2]
   1265          
   1266            }
   1267            
   1268            
   1269            switch (DateTime.Mounth)
   \                     ??Timer_1s_15:
   \   0000011A   6678               LDRB     R6,[R4, #+1]
   \   0000011C   3000               MOVS     R0,R6
   \   0000011E   401E               SUBS     R0,R0,#+1
   \   00000120   0B28               CMP      R0,#+11
   \   00000122   3AD8               BHI      ??Timer_1s_16
   \   00000124   01A1               ADR      R1,??Timer_1s_0
   \   00000126   095C               LDRB     R1,[R1, R0]
   \   00000128   8F44               ADD      PC,PC,R1
   \   0000012A   C046               Nop      
   \                     ??Timer_1s_0:
   \   0000012C   0C1C0C52           DC8      +12,+28,+12,+82
   \   00000130   0C520C0C           DC8      +12,+82,+12,+12
   \   00000134   520C525A           DC8      +82,+12,+82,+90
   1270                  {
   1271                    case 1  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_17:
   \   00000138   A078               LDRB     R0,[R4, #+2]
   \   0000013A   2028               CMP      R0,#+32
   \   0000013C   2DD3               BCC      ??Timer_1s_16
   \                     ??Timer_1s_18:
   \   0000013E   0120               MOVS     R0,#+1
   \   00000140   A070               STRB     R0,[R4, #+2]
   \   00000142   761C               ADDS     R6,R6,#+1
   \   00000144   6670               STRB     R6,[R4, #+1]
   \   00000146   28E0               B        ??Timer_1s_16
   1272                    case 2  : if ((DateTime.Year%4 == 0) && (DateTime.Year%100 != 0) || (DateTime.Year%400 == 0))  //je¿eli rok przestêpny
   \                     ??Timer_1s_19:
   \   00000148   2778               LDRB     R7,[R4, #+0]
   \   0000014A   3800               MOVS     R0,R7
   \   0000014C   8008               LSRS     R0,R0,#+2
   \   0000014E   8000               LSLS     R0,R0,#+2
   \   00000150   381A               SUBS     R0,R7,R0
   \   00000152   05D1               BNE      ??Timer_1s_20
   \   00000154   3800               MOVS     R0,R7
   \   00000156   6421               MOVS     R1,#+100
   \   00000158   ........           BL       __aeabi_idivmod
   \   0000015C   0029               CMP      R1,#+0
   \   0000015E   06D1               BNE      ??Timer_1s_21
   \                     ??Timer_1s_20:
   \   00000160   3800               MOVS     R0,R7
   \   00000162   C821               MOVS     R1,#+200
   \   00000164   4900               LSLS     R1,R1,#+1        ;; #+400
   \   00000166   ........           BL       __aeabi_idivmod
   \   0000016A   0029               CMP      R1,#+0
   \   0000016C   03D1               BNE      ??Timer_1s_22
   1273                                  {if (DateTime.Day>29) {DateTime.Day=1; DateTime.Mounth++;}     
   \                     ??Timer_1s_21:
   \   0000016E   A078               LDRB     R0,[R4, #+2]
   \   00000170   1E28               CMP      R0,#+30
   \   00000172   12D3               BCC      ??Timer_1s_16
   \   00000174   E3E7               B        ??Timer_1s_18
   1274                                  }else{if (DateTime.Day>28) {DateTime.Day=1; DateTime.Mounth++;}
   \                     ??Timer_1s_22:
   \   00000176   A078               LDRB     R0,[R4, #+2]
   \   00000178   1D28               CMP      R0,#+29
   \   0000017A   0ED3               BCC      ??Timer_1s_16
   \   0000017C   DFE7               B        ??Timer_1s_18
   1275                                  }
   1276                    break;
   1277                    case 3  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1278                    case 4  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_23:
   \   0000017E   A078               LDRB     R0,[R4, #+2]
   \   00000180   1F28               CMP      R0,#+31
   \   00000182   0AD3               BCC      ??Timer_1s_16
   \   00000184   DBE7               B        ??Timer_1s_18
   1279                    case 5  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1280                    case 6  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1281                    case 7  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1282                    case 8  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1283                    case 9  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1284                    case 10 : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1285                    case 11 : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1286                    case 12 : if (DateTime.Day>31) 
   \                     ??Timer_1s_24:
   \   00000186   A078               LDRB     R0,[R4, #+2]
   \   00000188   2028               CMP      R0,#+32
   \   0000018A   06D3               BCC      ??Timer_1s_16
   1287                    {
   1288                      DateTime.Day=1; DateTime.Mounth=1; DateTime.Year++;
   \   0000018C   0126               MOVS     R6,#+1
   \   0000018E   3000               MOVS     R0,R6
   \   00000190   A070               STRB     R0,[R4, #+2]
   \   00000192   6670               STRB     R6,[R4, #+1]
   \   00000194   2078               LDRB     R0,[R4, #+0]
   \   00000196   401C               ADDS     R0,R0,#+1
   \   00000198   2070               STRB     R0,[R4, #+0]
   1289                    } break;
   1290                    
   1291            
   1292            
   1293            }  
   1294            if (DateTime.DayOfWeek>Sunday) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_16:
   \   0000019A   A079               LDRB     R0,[R4, #+6]
   \   0000019C   0828               CMP      R0,#+8
   \   0000019E   01D3               BCC      ??Timer_1s_25
   \   000001A0   0120               MOVS     R0,#+1
   \   000001A2   A071               STRB     R0,[R4, #+6]
   1295            
   1296          
   1297            
   1298            
   1299            
   1300          
   1301              
   1302            if (MenuLevel_old!=MenuLevel)
   \                     ??Timer_1s_25:
   \   000001A4   7948               LDR      R0,??Timer_1s_26  ;; MenuLevel
   \   000001A6   0068               LDR      R0,[R0, #+0]
   \   000001A8   A16E               LDR      R1,[R4, #+104]
   \   000001AA   8142               CMP      R1,R0
   \   000001AC   00D0               BEQ      ??Timer_1s_27
   1303            {
   1304              MenuLevel_old=MenuLevel;    //na koniec usun¹c MenuLevel_old
   \   000001AE   A066               STR      R0,[R4, #+104]
   1305            }
   1306            
   1307             char czas_tmp[9];
   1308            
   1309            TimeToStr(DateTime.Hour, DateTime.Minute, DateTime.Second, czas_tmp);
   \                     ??Timer_1s_27:
   \   000001B0   6B46               MOV      R3,SP
   \   000001B2   6279               LDRB     R2,[R4, #+5]
   \   000001B4   2179               LDRB     R1,[R4, #+4]
   \   000001B6   E078               LDRB     R0,[R4, #+3]
   \   000001B8   ........           BL       TimeToStr
   1310            czas_tmp[8]=13;
   \   000001BC   6846               MOV      R0,SP
   \   000001BE   0D21               MOVS     R1,#+13
   \   000001C0   0172               STRB     R1,[R0, #+8]
   1311          
   1312            
   1313            //zeruj wskaŸniki poprawnoœci po³aczeñ
   1314            if (g_US0_Connect_OK) g_US0_Connect_OK--;
   \   000001C2   7348               LDR      R0,??Timer_1s_26+0x4  ;; g_US0_Connect_OK
   \   000001C4   0178               LDRB     R1,[R0, #+0]
   \   000001C6   0029               CMP      R1,#+0
   \   000001C8   01D0               BEQ      ??Timer_1s_28
   \   000001CA   491E               SUBS     R1,R1,#+1
   \   000001CC   0170               STRB     R1,[R0, #+0]
   1315            if (g_US1_Connect_OK) g_US1_Connect_OK--;
   \                     ??Timer_1s_28:
   \   000001CE   7148               LDR      R0,??Timer_1s_26+0x8  ;; g_US1_Connect_OK
   \   000001D0   0178               LDRB     R1,[R0, #+0]
   \   000001D2   0029               CMP      R1,#+0
   \   000001D4   01D0               BEQ      ??Timer_1s_29
   \   000001D6   491E               SUBS     R1,R1,#+1
   \   000001D8   0170               STRB     R1,[R0, #+0]
   1316            
   1317          
   1318            //synchronizacja RTC
   1319          if ((DateTime.Hour==2) && (DateTime.Minute==57) && (DateTime.Second==0)) GetDateTimeFromRTC(); 
   \                     ??Timer_1s_29:
   \   000001DA   E078               LDRB     R0,[R4, #+3]
   \   000001DC   0228               CMP      R0,#+2
   \   000001DE   07D1               BNE      ??Timer_1s_30
   \   000001E0   2079               LDRB     R0,[R4, #+4]
   \   000001E2   3928               CMP      R0,#+57
   \   000001E4   04D1               BNE      ??Timer_1s_30
   \   000001E6   6079               LDRB     R0,[R4, #+5]
   \   000001E8   0028               CMP      R0,#+0
   \   000001EA   01D1               BNE      ??Timer_1s_30
   \   000001EC   ........           BL       GetDateTimeFromRTC
   1320          //if (DateTime.Second=30) GetDateTimeFromRTC(); 
   1321          
   1322            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ 1min
   1323            static char CountMin=0;
   1324            if (CountMin<60)
   \                     ??Timer_1s_30:
   \   000001F0   207E               LDRB     R0,[R4, #+24]
   \   000001F2   3C28               CMP      R0,#+60
   \   000001F4   21D2               BCS      ??Timer_1s_31
   1325            {
   1326              CountMin++; 
   \   000001F6   401C               ADDS     R0,R0,#+1
   \   000001F8   2076               STRB     R0,[R4, #+24]
   1327            }else{
   1328              CountMin=0;
   1329            
   1330              if (TransQuality.SlowMensurIndex<4)
   1331              {
   1332                TransQuality.SlowMensurIndex++; 
   1333                
   1334              }else{
   1335                TransQuality.SlowMensurIndex=0;
   1336          
   1337              }
   1338              for(char NN=1; NN<NumberNeurons; NN++)   TransQuality.SlowMensur[NN] &= ~(1<<TransQuality.SlowMensurIndex);
   1339              
   1340                    //Sprawdzenie wiarygodnoœci wêz³ów na podstawie d³ugotrwa³ego pomiaru jakoœci
   1341                for (char NN=1; NN<NumberNeurons; NN++)
   1342                {
   1343                  if (TransQuality.SlowMensur[NN-1]==0)
   1344                  for (char NR=0; NR<NumberReg; NR++)
   1345                  {
   1346                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   1347                  }
   1348                }
   1349            }
   1350                               
   1351          
   1352            if (DateTime.Second==0) Timer_1min();
   \                     ??Timer_1s_32:
   \   000001FA   6079               LDRB     R0,[R4, #+5]
   \   000001FC   0028               CMP      R0,#+0
   \   000001FE   01D1               BNE      ??Timer_1s_33
   \   00000200   ........           BL       Timer_1min
   1353            if ((DateTime.Second==0) && (DateTime.Minute==0))  Timer_1h();
   \                     ??Timer_1s_33:
   \   00000204   6679               LDRB     R6,[R4, #+5]
   \   00000206   002E               CMP      R6,#+0
   \   00000208   04D1               BNE      ??Timer_1s_34
   \   0000020A   2079               LDRB     R0,[R4, #+4]
   \   0000020C   0028               CMP      R0,#+0
   \   0000020E   01D1               BNE      ??Timer_1s_34
   \   00000210   ........           BL       Timer_1h
   1354            if (DateTime.Second==0) TimetableExecute();
   \                     ??Timer_1s_34:
   \   00000214   002E               CMP      R6,#+0
   \   00000216   01D1               BNE      ??Timer_1s_35
   \   00000218   ........           BL       TimetableExecute
   1355               AlarmExecute();
   \                     ??Timer_1s_35:
   \   0000021C   ........           BL       AlarmExecute
   1356               
   1357               
   1358          
   1359             //sprawdzenie wy³adowania baterii i wyœwietlenie ostrzenia       
   1360             if ((DateTime.Hour==10) && (DateTime.Minute==0) && (DateTime.Second==0)  && (DateTime.DayOfWeek==Saturday))
   \   00000220   E078               LDRB     R0,[R4, #+3]
   \   00000222   0A28               CMP      R0,#+10
   \   00000224   76D1               BNE      ??Timer_1s_36
   \   00000226   2079               LDRB     R0,[R4, #+4]
   \   00000228   0028               CMP      R0,#+0
   \   0000022A   73D1               BNE      ??Timer_1s_36
   \   0000022C   6079               LDRB     R0,[R4, #+5]
   \   0000022E   0028               CMP      R0,#+0
   \   00000230   70D1               BNE      ??Timer_1s_36
   \   00000232   A079               LDRB     R0,[R4, #+6]
   \   00000234   0628               CMP      R0,#+6
   \   00000236   6DD1               BNE      ??Timer_1s_36
   1361             {
   1362             
   1363                 for (char i=0; i<NumberNeurons; i++)
   \   00000238   69E0               B        ??Timer_1s_37
   \                     ??Timer_1s_31:
   \   0000023A   2800               MOVS     R0,R5
   \   0000023C   2076               STRB     R0,[R4, #+24]
   \   0000023E   5648               LDR      R0,??Timer_1s_26+0xC  ;; TransQuality
   \   00000240   4178               LDRB     R1,[R0, #+1]
   \   00000242   0429               CMP      R1,#+4
   \   00000244   02D2               BCS      ??Timer_1s_38
   \   00000246   491C               ADDS     R1,R1,#+1
   \   00000248   4170               STRB     R1,[R0, #+1]
   \   0000024A   01E0               B        ??Timer_1s_39
   \                     ??Timer_1s_38:
   \   0000024C   2900               MOVS     R1,R5
   \   0000024E   4170               STRB     R1,[R0, #+1]
   \                     ??Timer_1s_39:
   \   00000250   0126               MOVS     R6,#+1
   \   00000252   3100               MOVS     R1,R6
   \   00000254   0BE0               B        ??Timer_1s_40
   \                     ??Timer_1s_41:
   \   00000256   8218               ADDS     R2,R0,R2
   \   00000258   D378               LDRB     R3,[R2, #+3]
   \   0000025A   9C46               MOV      R12,R3
   \   0000025C   3700               MOVS     R7,R6
   \   0000025E   4378               LDRB     R3,[R0, #+1]
   \   00000260   9F40               LSLS     R7,R7,R3
   \   00000262   6346               MOV      R3,R12
   \   00000264   BB43               BICS     R3,R3,R7
   \   00000266   D370               STRB     R3,[R2, #+3]
   \   00000268   491C               ADDS     R1,R1,#+1
   \   0000026A   0906               LSLS     R1,R1,#+24
   \   0000026C   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_40:
   \   0000026E   0A00               MOVS     R2,R1
   \   00000270   232A               CMP      R2,#+35
   \   00000272   F0D3               BCC      ??Timer_1s_41
   \   00000274   3100               MOVS     R1,R6
   \   00000276   13E0               B        ??Timer_1s_42
   \                     ??Timer_1s_43:
   \   00000278   7700               LSLS     R7,R6,#+1
   \   0000027A   BC46               MOV      R12,R7
   \   0000027C   1427               MOVS     R7,#+20
   \   0000027E   5743               MULS     R7,R2,R7
   \   00000280   464E               LDR      R6,??Timer_1s_26+0x10  ;; MainStage
   \   00000282   F619               ADDS     R6,R6,R7
   \   00000284   6746               MOV      R7,R12
   \   00000286   F619               ADDS     R6,R6,R7
   \   00000288   A036               ADDS     R6,R6,#+160
   \   0000028A   454F               LDR      R7,??Timer_1s_26+0x14  ;; 0xffff8aaa
   \   0000028C   3780               STRH     R7,[R6, #+0]
   \   0000028E   5B1C               ADDS     R3,R3,#+1
   \   00000290   1B06               LSLS     R3,R3,#+24
   \   00000292   1B0E               LSRS     R3,R3,#+24
   \                     ??Timer_1s_44:
   \   00000294   1E00               MOVS     R6,R3
   \   00000296   0A2E               CMP      R6,#+10
   \   00000298   EED3               BCC      ??Timer_1s_43
   \                     ??Timer_1s_45:
   \   0000029A   491C               ADDS     R1,R1,#+1
   \   0000029C   0906               LSLS     R1,R1,#+24
   \   0000029E   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_42:
   \   000002A0   0A00               MOVS     R2,R1
   \   000002A2   232A               CMP      R2,#+35
   \   000002A4   A9D2               BCS      ??Timer_1s_32
   \   000002A6   8318               ADDS     R3,R0,R2
   \   000002A8   9B78               LDRB     R3,[R3, #+2]
   \   000002AA   002B               CMP      R3,#+0
   \   000002AC   F5D1               BNE      ??Timer_1s_45
   \   000002AE   F1E7               B        ??Timer_1s_44
   \                     ??Timer_1s_1:
   \   000002B0   ........           DC32     DateTime
   \   000002B4   ........           DC32     ButtonBipCounter
   \   000002B8   30F4FFFF           DC32     0xfffff430
   \                     ??Timer_1s_46:
   \   000002BC   1421               MOVS     R1,#+20
   \   000002BE   4843               MULS     R0,R1,R0
   \   000002C0   3649               LDR      R1,??Timer_1s_26+0x10  ;; MainStage
   \   000002C2   0818               ADDS     R0,R1,R0
   \   000002C4   A030               ADDS     R0,R0,#+160
   \   000002C6   0088               LDRH     R0,[R0, #+0]
   \   000002C8   0104               LSLS     R1,R0,#+16
   \   000002CA   1DD5               BPL      ??Timer_1s_47
   \   000002CC   3549               LDR      R1,??Timer_1s_26+0x18  ;; 0x8aaa
   \   000002CE   8842               CMP      R0,R1
   \   000002D0   1AD0               BEQ      ??Timer_1s_47
   1364                 {
   1365                   if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1366                   {
   1367                      Message_Paint(2,"Wyladowana","bateria","   ","Sprawdz","liste wezlow");         
   \   000002D2   354E               LDR      R6,??Timer_1s_26+0x1C  ;; `?<Constant "Wyladowana">`
   \   000002D4   3100               MOVS     R1,R6
   \   000002D6   1C31               ADDS     R1,R1,#+28
   \   000002D8   3000               MOVS     R0,R6
   \   000002DA   1430               ADDS     R0,R0,#+20
   \   000002DC   03B4               PUSH     {R0,R1}
   \   000002DE   33A3               ADR      R3,??Timer_1s_26+0x20  ;; "   "
   \   000002E0   3200               MOVS     R2,R6
   \   000002E2   0C32               ADDS     R2,R2,#+12
   \   000002E4   3100               MOVS     R1,R6
   \   000002E6   0220               MOVS     R0,#+2
   \   000002E8   ........           BL       Message_Paint
   \   000002EC   02B0               ADD      SP,SP,#+8
   1368          
   1369                      ButtonBipCounter=g_counter+10000;
   \   000002EE   304E               LDR      R6,??Timer_1s_26+0x24  ;; ButtonBipCounter
   \   000002F0   2000               MOVS     R0,R4
   \   000002F2   3030               ADDS     R0,R0,#+48
   \   000002F4   0CC8               LDM      R0!,{R2,R3}
   \   000002F6   2F48               LDR      R0,??Timer_1s_26+0x28  ;; 0x2710
   \   000002F8   0021               MOVS     R1,#+0
   \   000002FA   8018               ADDS     R0,R0,R2
   \   000002FC   5941               ADCS     R1,R1,R3
   \   000002FE   03C6               STM      R6!,{R0,R1}
   1370                      AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                        ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000300   2D48               LDR      R0,??Timer_1s_26+0x2C  ;; 0xfffff430
   \   00000302   8021               MOVS     R1,#+128
   \   00000304   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000306   0160               STR      R1,[R0, #+0]
   1371                   }
   1372                   
   1373          
   1374                 } 
   \                     ??Timer_1s_47:
   \   00000308   6D1C               ADDS     R5,R5,#+1
   \   0000030A   2D06               LSLS     R5,R5,#+24
   \   0000030C   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1s_37:
   \   0000030E   2800               MOVS     R0,R5
   \   00000310   2328               CMP      R0,#+35
   \   00000312   D3D3               BCC      ??Timer_1s_46
   1375                
   1376             }    
   1377              
   1378          
   1379             
   1380             
   1381             //wygaszacz ekranu
   1382             static char LCD_last_fill=100;
   1383             char WypMin;
   1384             if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))  
   \                     ??Timer_1s_36:
   \   00000314   A07B               LDRB     R0,[R4, #+14]
   \   00000316   0028               CMP      R0,#+0
   \   00000318   07D0               BEQ      ??Timer_1s_48
   \   0000031A   08D0               BEQ      ??Timer_1s_49
   \   0000031C   E078               LDRB     R0,[R4, #+3]
   \   0000031E   E17B               LDRB     R1,[R4, #+15]
   \   00000320   8842               CMP      R0,R1
   \   00000322   04D2               BCS      ??Timer_1s_49
   \   00000324   217C               LDRB     R1,[R4, #+16]
   \   00000326   8842               CMP      R0,R1
   \   00000328   01D3               BCC      ??Timer_1s_49
   1385             {  
   1386                WypMin=14;
   \                     ??Timer_1s_48:
   \   0000032A   0E20               MOVS     R0,#+14
   \   0000032C   00E0               B        ??Timer_1s_50
   1387             }else{
   1388                WypMin=4;
   \                     ??Timer_1s_49:
   \   0000032E   0420               MOVS     R0,#+4
   1389             }
   1390             
   1391               if (g_LightLCDEnable)
   \                     ??Timer_1s_50:
   \   00000330   617E               LDRB     R1,[R4, #+25]
   \   00000332   627B               LDRB     R2,[R4, #+13]
   \   00000334   002A               CMP      R2,#+0
   \   00000336   0CD0               BEQ      ??Timer_1s_51
   1392               {
   1393                 if (LCD_last_fill!=100)
   \   00000338   6429               CMP      R1,#+100
   \   0000033A   1CD0               BEQ      ??Timer_1s_52
   1394                 {
   1395                   AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   0000033C   0126               MOVS     R6,#+1
   \   0000033E   1F48               LDR      R0,??Timer_1s_26+0x30  ;; 0xfffcc008
   \   00000340   0660               STR      R6,[R0, #+0]
   1396                    Set_LCD_Light_PWM_Fill(100);  //100% wype³nienia
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   00000342   6420               MOVS     R0,#+100
   \   00000344   ........           BL       Set_LCD_Light_PWM_Fill
   1397                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000348   1D48               LDR      R0,??Timer_1s_26+0x34  ;; 0xfffcc004
   \   0000034A   0660               STR      R6,[R0, #+0]
   1398                    LCD_last_fill=100;
   \   0000034C   6420               MOVS     R0,#+100
   \   0000034E   6076               STRB     R0,[R4, #+25]
   \   00000350   11E0               B        ??Timer_1s_52
   1399                 }
   1400               }else {
   1401                 if (LCD_last_fill>WypMin)
   \                     ??Timer_1s_51:
   \   00000352   8842               CMP      R0,R1
   \   00000354   0FD2               BCS      ??Timer_1s_52
   1402                 {
   1403                    if (LCD_last_fill>60) LCD_last_fill=61;
   \   00000356   3D29               CMP      R1,#+61
   \   00000358   01D3               BCC      ??Timer_1s_53
   \   0000035A   3D20               MOVS     R0,#+61
   \   0000035C   6076               STRB     R0,[R4, #+25]
   1404                    LCD_last_fill-=2;
   \                     ??Timer_1s_53:
   \   0000035E   607E               LDRB     R0,[R4, #+25]
   \   00000360   801E               SUBS     R0,R0,#+2
   \   00000362   6076               STRB     R0,[R4, #+25]
   1405                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   00000364   0126               MOVS     R6,#+1
   \   00000366   1549               LDR      R1,??Timer_1s_26+0x30  ;; 0xfffcc008
   \   00000368   0E60               STR      R6,[R1, #+0]
   1406                    Set_LCD_Light_PWM_Fill(LCD_last_fill);  //10% wype³nienia
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   0000036A   0006               LSLS     R0,R0,#+24
   \   0000036C   000E               LSRS     R0,R0,#+24
   \   0000036E   ........           BL       Set_LCD_Light_PWM_Fill
   1407                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000372   1348               LDR      R0,??Timer_1s_26+0x34  ;; 0xfffcc004
   \   00000374   0660               STR      R6,[R0, #+0]
   1408                 }
   1409              }
   1410              
   1411              
   1412              if ((RF_Status.RfFuse>0) && (RF_Status.RfFuse<100)) RF_Status.RfFuse++;
   \                     ??Timer_1s_52:
   \   00000376   1348               LDR      R0,??Timer_1s_26+0x38  ;; RF_Status
   \   00000378   C17B               LDRB     R1,[R0, #+15]
   \   0000037A   0029               CMP      R1,#+0
   \   0000037C   03D0               BEQ      ??Timer_1s_54
   \   0000037E   6429               CMP      R1,#+100
   \   00000380   01D2               BCS      ??Timer_1s_54
   \   00000382   491C               ADDS     R1,R1,#+1
   \   00000384   C173               STRB     R1,[R0, #+15]
   1413          }
   \                     ??Timer_1s_54:
   \   00000386   FEBC               POP      {R1-R7}
   \   00000388   01BC               POP      {R0}
   \   0000038A   0047               BX       R0               ;; return
   \                     ??Timer_1s_26:
   \   0000038C   ........           DC32     MenuLevel
   \   00000390   ........           DC32     g_US0_Connect_OK
   \   00000394   ........           DC32     g_US1_Connect_OK
   \   00000398   ........           DC32     TransQuality
   \   0000039C   ........           DC32     MainStage
   \   000003A0   AA8AFFFF           DC32     0xffff8aaa
   \   000003A4   AA8A0000           DC32     0x8aaa
   \   000003A8   ........           DC32     `?<Constant "Wyladowana">`
   \   000003AC   20202000           DC8      "   "
   \   000003B0   ........           DC32     ButtonBipCounter
   \   000003B4   10270000           DC32     0x2710
   \   000003B8   30F4FFFF           DC32     0xfffff430
   \   000003BC   08C0FCFF           DC32     0xfffcc008
   \   000003C0   04C0FCFF           DC32     0xfffcc004
   \   000003C4   ........           DC32     RF_Status
   1414          
   1415          
   1416          
   1417          
   1418          //-----------------------------------------------------------------------------
   1419          //! Nazwa funkcji :    Timer_10ms
   1420          //! Okres: 10ms
   1421          //! Timer zale¿ny od Timer_1ms
   1422          //-----------------------------------------------------------------------------
   1423          //  
   1424          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1425          void Timer_10ms(void)                      
   1426          { 
   \                     Timer_10ms:
   \   00000000   10B5               PUSH     {R4,LR}
   1427              
   1428          
   1429            unsigned int dummy = AT91C_BASE_TC0->TC_SR;                                   // Odczyt statusu  
   \   00000002   4048               LDR      R0,??Timer_10ms_0  ;; 0xfffa0020
   \   00000004   0068               LDR      R0,[R0, #+0]
   1430          
   1431          
   1432          
   1433          
   1434             /*
   1435          
   1436            if ((Busy_program==0) && (g_Stop_Program==0))                                  //Dopasowanie cyklu programu do krotnoœci 5 ms
   1437            {  
   1438          
   1439            ///  Program(&gProg); 
   1440              ProgFlag=1;
   1441            }
   1442           }
   1443            */
   1444          
   1445            
   1446            
   1447          
   1448           
   1449          
   1450          
   1451           X_up=-1;
   \   00000006   404C               LDR      R4,??Timer_10ms_0+0x4  ;; DateTime
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   C043               MVNS     R0,R0            ;; #-1
   \   0000000C   6085               STRH     R0,[R4, #+42]
   1452           Y_up=-1;
   \   0000000E   2085               STRH     R0,[R4, #+40]
   1453          
   1454           X_down=-1;
   \   00000010   E084               STRH     R0,[R4, #+38]
   1455           Y_down=-1;
   \   00000012   A084               STRH     R0,[R4, #+36]
   1456          
   1457          
   1458            GetTouchPoint(&X_down, &Y_down, &X_up, &Y_up);
   \   00000014   2300               MOVS     R3,R4
   \   00000016   2833               ADDS     R3,R3,#+40
   \   00000018   2200               MOVS     R2,R4
   \   0000001A   2A32               ADDS     R2,R2,#+42
   \   0000001C   2100               MOVS     R1,R4
   \   0000001E   2431               ADDS     R1,R1,#+36
   \   00000020   2000               MOVS     R0,R4
   \   00000022   2630               ADDS     R0,R0,#+38
   \   00000024   ........           BL       GetTouchPoint
   1459          
   1460           
   1461             //Akcja przycisku up
   1462            if ((X_up>0)&&(Y_up>0)) 
   \   00000028   2A20               MOVS     R0,#+42
   \   0000002A   205E               LDRSH    R0,[R4, R0]
   \   0000002C   0128               CMP      R0,#+1
   \   0000002E   09DB               BLT      ??Timer_10ms_1
   \   00000030   2820               MOVS     R0,#+40
   \   00000032   205E               LDRSH    R0,[R4, R0]
   \   00000034   0128               CMP      R0,#+1
   \   00000036   05DB               BLT      ??Timer_10ms_1
   1463            {
   1464               ScreenEvent();
   \   00000038   ........           BL       ScreenEvent
   1465               g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   A064               STR      R0,[R4, #+72]
   1466               g_LightLCDEnable=1;
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   6073               STRB     R0,[R4, #+13]
   1467            }
   1468            
   1469            if (LiczOds>=5) {
   \                     ??Timer_10ms_1:
   \   00000044   A06D               LDR      R0,[R4, #+88]
   \   00000046   0528               CMP      R0,#+5
   \   00000048   16DB               BLT      ??Timer_10ms_2
   1470            
   1471                      //Akcja przycisku down
   1472                if ((X_down>0)&&(Y_down>0)) 
   \   0000004A   2620               MOVS     R0,#+38
   \   0000004C   205E               LDRSH    R0,[R4, R0]
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   09DB               BLT      ??Timer_10ms_3
   \   00000052   2420               MOVS     R0,#+36
   \   00000054   205E               LDRSH    R0,[R4, R0]
   \   00000056   0128               CMP      R0,#+1
   \   00000058   05DB               BLT      ??Timer_10ms_3
   1473                {
   1474                   ScreenEvent();
   \   0000005A   ........           BL       ScreenEvent
   1475                   g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   A064               STR      R0,[R4, #+72]
   1476                   g_LightLCDEnable=1;
   \   00000062   0120               MOVS     R0,#+1
   \   00000064   6073               STRB     R0,[R4, #+13]
   1477                }  
   1478                
   1479                MenuRefresh(); 
   \                     ??Timer_10ms_3:
   \   00000066   ........           BL       MenuRefresh
   1480          
   1481              
   1482             // if ((g_PC_Connected==0) //|| (g_PC_Connected_timeout>0))
   1483             // {
   1484              
   1485              RepaintLCD();
   \   0000006A   ........           BL       RepaintLCD
   1486              RepaintLCD();
   \   0000006E   ........           BL       RepaintLCD
   1487             // }
   1488              /*
   1489              if ((g_PC_Connected==1) && (g_PC_Connected_timeout>0))
   1490              {
   1491                g_PC_Connected_timeout--;
   1492              }
   1493              
   1494              if (g_PC_Connected==0)
   1495              {
   1496                g_PC_Connected_timeout=5;
   1497              }
   1498              */
   1499              
   1500              LiczOds=0;
   \   00000072   0020               MOVS     R0,#+0
   \   00000074   A065               STR      R0,[R4, #+88]
   \   00000076   01E0               B        ??Timer_10ms_4
   1501          
   1502            }
   1503            
   1504            else 
   1505            {
   1506              LiczOds++; 
   \                     ??Timer_10ms_2:
   \   00000078   401C               ADDS     R0,R0,#+1
   \   0000007A   A065               STR      R0,[R4, #+88]
   1507            }
   1508            
   1509              
   1510            
   1511            static int Spek2_Counter;
   1512            if (Spek2_Counter<202)Spek2_Counter++;
   \                     ??Timer_10ms_4:
   \   0000007C   E06E               LDR      R0,[R4, #+108]
   \   0000007E   CA28               CMP      R0,#+202
   \   00000080   01DA               BGE      ??Timer_10ms_5
   \   00000082   401C               ADDS     R0,R0,#+1
   \   00000084   E066               STR      R0,[R4, #+108]
   1513            if ((Speaker[2]==1) && (Spek2_Counter>150)) 
   \                     ??Timer_10ms_5:
   \   00000086   A07A               LDRB     R0,[R4, #+10]
   \   00000088   0128               CMP      R0,#+1
   \   0000008A   10D1               BNE      ??Timer_10ms_6
   \   0000008C   E06E               LDR      R0,[R4, #+108]
   \   0000008E   9728               CMP      R0,#+151
   \   00000090   0DDB               BLT      ??Timer_10ms_6
   1514            {
   1515                Spek2_Counter=0;
   \   00000092   0020               MOVS     R0,#+0
   \   00000094   E066               STR      R0,[R4, #+108]
   1516                ButtonBipCounter=g_counter+150;
   \   00000096   1D4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   00000098   2000               MOVS     R0,R4
   \   0000009A   3030               ADDS     R0,R0,#+48
   \   0000009C   03C8               LDM      R0!,{R0,R1}
   \   0000009E   0023               MOVS     R3,#+0
   \   000000A0   9630               ADDS     R0,R0,#+150
   \   000000A2   5941               ADCS     R1,R1,R3
   \   000000A4   03C2               STM      R2!,{R0,R1}
   1517                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000A6   1A48               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000A8   8021               MOVS     R1,#+128
   \   000000AA   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000AC   0160               STR      R1,[R0, #+0]
   1518            }
   1519          
   1520            if ((Speaker[3]==1) && (Spek2_Counter==150)) 
   \                     ??Timer_10ms_6:
   \   000000AE   E07A               LDRB     R0,[R4, #+11]
   \   000000B0   0128               CMP      R0,#+1
   \   000000B2   0ED1               BNE      ??Timer_10ms_7
   \   000000B4   E06E               LDR      R0,[R4, #+108]
   \   000000B6   9628               CMP      R0,#+150
   \   000000B8   0BD1               BNE      ??Timer_10ms_7
   1521            {
   1522                ButtonBipCounter=g_counter+100;
   \   000000BA   144A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000BC   2000               MOVS     R0,R4
   \   000000BE   3030               ADDS     R0,R0,#+48
   \   000000C0   03C8               LDM      R0!,{R0,R1}
   \   000000C2   0023               MOVS     R3,#+0
   \   000000C4   6430               ADDS     R0,R0,#+100
   \   000000C6   5941               ADCS     R1,R1,R3
   \   000000C8   03C2               STM      R2!,{R0,R1}
   1523                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000CA   1148               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000CC   8021               MOVS     R1,#+128
   \   000000CE   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000D0   0160               STR      R1,[R0, #+0]
   1524            }  
   1525            if ((Speaker[3]==1) && (Spek2_Counter>200)) 
   \                     ??Timer_10ms_7:
   \   000000D2   E07A               LDRB     R0,[R4, #+11]
   \   000000D4   0128               CMP      R0,#+1
   \   000000D6   0FD1               BNE      ??Timer_10ms_8
   \   000000D8   E06E               LDR      R0,[R4, #+108]
   \   000000DA   C928               CMP      R0,#+201
   \   000000DC   0CDB               BLT      ??Timer_10ms_8
   1526            {
   1527                Spek2_Counter=0;
   \   000000DE   0020               MOVS     R0,#+0
   \   000000E0   E066               STR      R0,[R4, #+108]
   1528                ButtonBipCounter=g_counter+100;
   \   000000E2   0A4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000E4   3034               ADDS     R4,R4,#+48
   \   000000E6   03CC               LDM      R4!,{R0,R1}
   \   000000E8   0023               MOVS     R3,#+0
   \   000000EA   6430               ADDS     R0,R0,#+100
   \   000000EC   5941               ADCS     R1,R1,R3
   \   000000EE   03C2               STM      R2!,{R0,R1}
   1529                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000F0   0748               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000F2   8021               MOVS     R1,#+128
   \   000000F4   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000F6   0160               STR      R1,[R0, #+0]
   1530            }    
   1531          
   1532           AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Timer_10ms_8:
   \   000000F8   0648               LDR      R0,??Timer_10ms_0+0x10  ;; 0xfffffd40
   \   000000FA   ........           BL       AT91F_WDTRestart
   1533          
   1534          }
   \   000000FE   10BC               POP      {R4}
   \   00000100   01BC               POP      {R0}
   \   00000102   0047               BX       R0               ;; return
   \                     ??Timer_10ms_0:
   \   00000104   2000FAFF           DC32     0xfffa0020
   \   00000108   ........           DC32     DateTime
   \   0000010C   ........           DC32     ButtonBipCounter
   \   00000110   30F4FFFF           DC32     0xfffff430
   \   00000114   40FDFFFF           DC32     0xfffffd40
   1535          
   1536          
   1537          
   1538          

   \                                 In section Debug.txt, align 4, keep-with-next
   1539          void Timer_10ms_Setup(void) 
   1540          { 
   1541          
   1542          
   1543           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC0] = (unsigned int)Timer_10ms;  //set AIC             
   \                     Timer_10ms_Setup:
   \   00000000   1248               LDR      R0,??Timer_10ms_Setup_0  ;; 0xfffff0b0
   \   00000002   1349               LDR      R1,??Timer_10ms_Setup_0+0x4  ;; Timer_10ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1544           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC0] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10mS_PRIOR ); 
   \   00000006   1348               LDR      R0,??Timer_10ms_Setup_0+0x8  ;; 0xfffff030
   \   00000008   0321               MOVS     R1,#+3
   \   0000000A   0160               STR      R1,[R0, #+0]
   1545           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC0);      //enable clock 
   \   0000000C   8020               MOVS     R0,#+128
   \   0000000E   4001               LSLS     R0,R0,#+5        ;; #+4096
   \   00000010   1149               LDR      R1,??Timer_10ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000012   0860               STR      R0,[R1, #+0]
   1546           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1149               LDR      R1,??Timer_10ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0A60               STR      R2,[R1, #+0]
   1547           //no external clocks 
   1548           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1149               LDR      R1,??Timer_10ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1522               MOVS     R2,#+21
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1549           AT91C_BASE_TC0->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1049               LDR      R1,??Timer_10ms_Setup_0+0x18  ;; 0xfffa0000
   \   00000022   0522               MOVS     R2,#+5
   \   00000024   0A60               STR      R2,[R1, #+0]
   1550           AT91C_BASE_TC0->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV5_CLOCK;//CPC 
   \   00000026   1049               LDR      R1,??Timer_10ms_Setup_0+0x1C  ;; 0xfffa0004
   \   00000028   104A               LDR      R2,??Timer_10ms_Setup_0+0x20  ;; 0xcc004
   \   0000002A   0A60               STR      R2,[R1, #+0]
   1551            //! DIV5 - 1024
   1552           //! DIV4 - 128
   1553           //! DIV3 - 32
   1554           //! DIV2 - 8
   1555           //clock: MCK/1024  = 48054841/1024  =  46928 Hz 
   1556           //AT91C_BASE_TC0->TC_RC = 46928,55;    => 1 sec 
   1557                                   
   1558           AT91C_BASE_TC0->TC_RC = 469;                  //10ms 
   \   0000002C   1049               LDR      R1,??Timer_10ms_Setup_0+0x24  ;; 0xfffa001c
   \   0000002E   FF22               MOVS     R2,#+255
   \   00000030   D632               ADDS     R2,R2,#+214      ;; #+469
   \   00000032   0A60               STR      R2,[R1, #+0]
   1559           AT91C_BASE_TC0->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000034   0F49               LDR      R1,??Timer_10ms_Setup_0+0x28  ;; 0xfffa0024
   \   00000036   1022               MOVS     R2,#+16
   \   00000038   0A60               STR      R2,[R1, #+0]
   1560           AT91C_BASE_TC0->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   0000003A   0F49               LDR      R1,??Timer_10ms_Setup_0+0x2C  ;; 0xfffa0028
   \   0000003C   D243               MVNS     R2,R2            ;; #-17
   \   0000003E   0A60               STR      R2,[R1, #+0]
   1561           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC0);       //enable int 
   \   00000040   0E49               LDR      R1,??Timer_10ms_Setup_0+0x30  ;; 0xfffff120
   \   00000042   0860               STR      R0,[R1, #+0]
   1562           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC0);       //clear int 
   \   00000044   0E49               LDR      R1,??Timer_10ms_Setup_0+0x34  ;; 0xfffff128
   \   00000046   0860               STR      R0,[R1, #+0]
   1563            
   1564          
   1565          }//_____________________________________________________________________________
   \   00000048   7047               BX       LR               ;; return
   \   0000004A   C046               Nop      
   \                     ??Timer_10ms_Setup_0:
   \   0000004C   B0F0FFFF           DC32     0xfffff0b0
   \   00000050   ........           DC32     Timer_10ms
   \   00000054   30F0FFFF           DC32     0xfffff030
   \   00000058   10FCFFFF           DC32     0xfffffc10
   \   0000005C   C000FAFF           DC32     0xfffa00c0
   \   00000060   C400FAFF           DC32     0xfffa00c4
   \   00000064   0000FAFF           DC32     0xfffa0000
   \   00000068   0400FAFF           DC32     0xfffa0004
   \   0000006C   04C00C00           DC32     0xcc004
   \   00000070   1C00FAFF           DC32     0xfffa001c
   \   00000074   2400FAFF           DC32     0xfffa0024
   \   00000078   2800FAFF           DC32     0xfffa0028
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1566          
   1567          
   1568          
   1569          
   1570          
   1571          //-----------------------------------------------------------------------------
   1572          //! Nazwa funkcji :    Timer_1ms
   1573          //! Okres: 1ms
   1574          //! Funkcje:
   1575          //!         Funkcja obs³ugi przerwania USART 0  Czas 1 ms
   1576          //!         Triger Timer_10ms 
   1577          //-----------------------------------------------------------------------------
   1578          //  
   1579          //----------------------------------------------------------------------------- 
   1580          
   1581          

   \                                 In section .bss, align 4
   1582          int Counter=0;
   \                     Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1583          int US0_Counter=0;
   \                     US0_Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1584          int US1_Counter=0;
   \                     US1_Counter:
   \   00000000                      DS8 4
   1585          extern char SendModbusEnable;

   \                                 In section .bss, align 1
   1586          char CounterForTimer10ms=0;
   \                     CounterForTimer10ms:
   \   00000000                      DS8 1
   1587          short int CurTimeQual=0;
   1588          

   \                                 In section Debug.txt, align 4, keep-with-next
   1589          void Timer_1ms(void)                        //timer isr 
   1590          { 
   \                     Timer_1ms:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1591            unsigned int dummy2 = AT91C_BASE_TC2->TC_SR;  
   \   00000002   6548               LDR      R0,??Timer_1ms_0  ;; 0xfffa00a0
   \   00000004   0068               LDR      R0,[R0, #+0]
   1592            
   1593            g_counter++;
   \   00000006   654C               LDR      R4,??Timer_1ms_0+0x4  ;; DateTime
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   3030               ADDS     R0,R0,#+48
   \   0000000C   03C8               LDM      R0!,{R0,R1}
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   5141               ADCS     R1,R1,R2
   \   00000014   2200               MOVS     R2,R4
   \   00000016   3032               ADDS     R2,R2,#+48
   \   00000018   03C2               STM      R2!,{R0,R1}
   1594          
   1595            
   1596          
   1597            
   1598            
   1599            /*
   1600            
   1601          
   1602          
   1603            
   1604            //obs³uga US0
   1605            if (US0_MasterMODBUS_ENABLE)
   1606            {
   1607            if (US0_Counter>g_US0_Comm_MinCykle) 
   1608            {
   1609              
   1610                if (g_Ans_ZD_MODBUS_0 == g_US0_Comm_TIMEOUT)
   1611                {
   1612                    ZD_MODBUS_0[g_Current_ZD_MODBUS_0].Error ++;
   1613                }
   1614              
   1615                
   1616                if (g_Ans_ZD_MODBUS_0 >= g_US0_Comm_TIMEOUT)
   1617                {
   1618          
   1619                    //AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
   1620             
   1621                    g_Ans_ZD_MODBUS_0=0;
   1622                    SendModbusEnable=0;
   1623                  //  ModBus_MASTER_TX(0);
   1624                    
   1625                    US0_Counter=0;
   1626                }
   1627                else
   1628                {
   1629                    g_Ans_ZD_MODBUS_0++;
   1630          
   1631                }
   1632              
   1633            }
   1634            else
   1635            {
   1636              US0_Counter++; 
   1637            }
   1638            }
   1639            
   1640          
   1641          
   1642            if (US1_MasterMODBUS_ENABLE)
   1643            {
   1644            if (US1_Counter>g_US0_Comm_MinCykle) 
   1645            {
   1646              
   1647                if (g_Ans_ZD_MODBUS_1 == g_US1_Comm_TIMEOUT)
   1648                {
   1649                    ZD_MODBUS_1[g_Current_ZD_MODBUS_1].Error ++;
   1650                }
   1651                
   1652                if (g_Ans_ZD_MODBUS_1 >= g_US1_Comm_TIMEOUT)
   1653                {
   1654             
   1655                    g_Ans_ZD_MODBUS_1=0;
   1656                    ModBus_MASTER_TX(1);
   1657                    
   1658                    US0_Counter=1;
   1659                }
   1660                else
   1661                {
   1662                    g_Ans_ZD_MODBUS_1++;
   1663          
   1664                }
   1665              
   1666            }
   1667            else
   1668            {
   1669              US1_Counter++; 
   1670            }
   1671            }
   1672          */
   1673            
   1674            
   1675          
   1676          if (ButtonBipCounter<g_counter) AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                                            ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000001A   614A               LDR      R2,??Timer_1ms_0+0x8  ;; ButtonBipCounter
   \   0000001C   0CCA               LDM      R2!,{R2,R3}
   \   0000001E   8B42               CMP      R3,R1
   \   00000020   06D8               BHI      ??Timer_1ms_1
   \   00000022   01D3               BCC      ??Timer_1ms_2
   \   00000024   8242               CMP      R2,R0
   \   00000026   03D2               BCS      ??Timer_1ms_1
   \                     ??Timer_1ms_2:
   \   00000028   5E48               LDR      R0,??Timer_1ms_0+0xC  ;; 0xfffff434
   \   0000002A   8021               MOVS     R1,#+128
   \   0000002C   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000002E   0160               STR      R1,[R0, #+0]
   1677          
   1678            
   1679            
   1680            static int RF_SlaveCounter;
   1681           
   1682            
   1683            
   1684          //TimeOut RF -----
   1685            
   1686          if (RF_Status.AllReady)
   \                     ??Timer_1ms_1:
   \   00000030   5D4E               LDR      R6,??Timer_1ms_0+0x10  ;; RF_Status
   \   00000032   B07B               LDRB     R0,[R6, #+14]
   \   00000034   0028               CMP      R0,#+0
   \   00000036   67D0               BEQ      ??Timer_1ms_3
   1687          //{   
   1688            
   1689          //if (RF_Status.Init==0)
   1690          {
   1691            if (RF_Status.MasterMode)
   \   00000038   307B               LDRB     R0,[R6, #+12]
   \   0000003A   0028               CMP      R0,#+0
   \   0000003C   0FD0               BEQ      ??Timer_1ms_4
   1692            {
   1693              if ((!SlaveMode) && (g_Stop_Program==0))
   \   0000003E   607D               LDRB     R0,[R4, #+21]
   \   00000040   A17C               LDRB     R1,[R4, #+18]
   \   00000042   0143               ORRS     R1,R1,R0
   \   00000044   60D1               BNE      ??Timer_1ms_3
   1694              if (g_RF_TimeOutCounter>0)
   \   00000046   5948               LDR      R0,??Timer_1ms_0+0x14  ;; g_RF_TimeOutCounter
   \   00000048   0178               LDRB     R1,[R0, #+0]
   \   0000004A   0029               CMP      R1,#+0
   \   0000004C   02D0               BEQ      ??Timer_1ms_5
   1695              {
   1696                g_RF_TimeOutCounter--;
   \   0000004E   491E               SUBS     R1,R1,#+1
   \   00000050   0170               STRB     R1,[R0, #+0]
   \   00000052   59E0               B        ??Timer_1ms_3
   1697           
   1698              }else{
   1699                 g_RF_TimeOutCounter=RF_TimeOut; 
   \                     ??Timer_1ms_5:
   \   00000054   0921               MOVS     R1,#+9
   \   00000056   0170               STRB     R1,[R0, #+0]
   1700                 RF_MasterExecut();
   \   00000058   ........           BL       RF_MasterExecut
   \   0000005C   54E0               B        ??Timer_1ms_3
   1701              }
   1702            }else{
   1703                  
   1704                  RF_SlaveCounter++;
   \                     ??Timer_1ms_4:
   \   0000005E   206F               LDR      R0,[R4, #+112]
   \   00000060   401C               ADDS     R0,R0,#+1
   \   00000062   2067               STR      R0,[R4, #+112]
   1705               
   1706                  
   1707                    if (RF_Status.ConfResive==2) //je¿eli poprawnie odebrano dane 
   \   00000064   F17A               LDRB     R1,[R6, #+11]
   \   00000066   0229               CMP      R1,#+2
   \   00000068   06D1               BNE      ??Timer_1ms_6
   1708                    {
   1709                      RF_SlaveCounter=0;   //- zeruj licznik
   \   0000006A   0020               MOVS     R0,#+0
   \   0000006C   2067               STR      R0,[R4, #+112]
   1710                      RF_Status.ConfResive=1;
   \   0000006E   0120               MOVS     R0,#+1
   \   00000070   0100               MOVS     R1,R0
   \   00000072   F172               STRB     R1,[R6, #+11]
   1711                      g_SlaveConnect=1;    //ustawia flagê poprawnej transmisji slave
   \   00000074   6074               STRB     R0,[R4, #+17]
   \   00000076   47E0               B        ??Timer_1ms_3
   1712                    }else{
   1713          
   1714                      if (((RF_SlaveCounter==100)  && (RF_Status.ConfResive==0)) //je¿eli nie odebrano danych w czasie 100ms
   1715                      || ((RF_SlaveCounter>=2000) && (RF_Status.ConfResive<2))  //je¿eli nie odebrano danych o w³aœciwym ID w czasie 1000ms
   1716                        )
   \                     ??Timer_1ms_6:
   \   00000078   6428               CMP      R0,#+100
   \   0000007A   01D1               BNE      ??Timer_1ms_7
   \   0000007C   0029               CMP      R1,#+0
   \   0000007E   05D0               BEQ      ??Timer_1ms_8
   \                     ??Timer_1ms_7:
   \   00000080   FA22               MOVS     R2,#+250
   \   00000082   D200               LSLS     R2,R2,#+3        ;; #+2000
   \   00000084   9042               CMP      R0,R2
   \   00000086   3FDB               BLT      ??Timer_1ms_3
   \   00000088   0229               CMP      R1,#+2
   \   0000008A   3DD2               BCS      ??Timer_1ms_3
   1717                      {
   1718                        
   1719                           RF_Status.ConfResive=0;
   \                     ??Timer_1ms_8:
   \   0000008C   0025               MOVS     R5,#+0
   \   0000008E   2800               MOVS     R0,R5
   \   00000090   F072               STRB     R0,[R6, #+11]
   1720                           g_SlaveConnect=0; 
   \   00000092   6074               STRB     R0,[R4, #+17]
   1721                           SPI_SendWord(0x8219,Cs_RF);                          //wy³¹cz odbiornik/nadajnik
                                  ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   00000094   0221               MOVS     R1,#+2
   \   00000096   4648               LDR      R0,??Timer_1ms_0+0x18  ;; 0x8219
   \   00000098   ........           BL       SPI_SendWord
   1722                           if (RF_Status.AllReady) if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=0;}
   \   0000009C   B07B               LDRB     R0,[R6, #+14]
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   06D0               BEQ      ??Timer_1ms_9
   \   000000A2   707B               LDRB     R0,[R6, #+13]
   \   000000A4   2728               CMP      R0,#+39
   \   000000A6   02D2               BCS      ??Timer_1ms_10
   \   000000A8   401C               ADDS     R0,R0,#+1
   \   000000AA   7073               STRB     R0,[R6, #+13]
   \   000000AC   00E0               B        ??Timer_1ms_9
   \                     ??Timer_1ms_10:
   \   000000AE   7573               STRB     R5,[R6, #+13]
   1723                           SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
   \                     ??Timer_1ms_9:
   \   000000B0   0221               MOVS     R1,#+2
   \   000000B2   0D00               MOVS     R5,R1
   \   000000B4   707B               LDRB     R0,[R6, #+13]
   \   000000B6   ........           BL       __aeabi_ui2d
   \   000000BA   0200               MOVS     R2,R0
   \   000000BC   0B00               MOVS     R3,R1
   \   000000BE   3D48               LDR      R0,??Timer_1ms_0+0x1C  ;; 0x33333333
   \   000000C0   3D49               LDR      R1,??Timer_1ms_0+0x20  ;; 0x3fd33333
   \   000000C2   ........           BL       __aeabi_dmul
   \   000000C6   0200               MOVS     R2,R0
   \   000000C8   0B00               MOVS     R3,R1
   \   000000CA   3C48               LDR      R0,??Timer_1ms_0+0x24  ;; 0x5c28f5c3
   \   000000CC   3C49               LDR      R1,??Timer_1ms_0+0x28  ;; 0x408ae28f
   \   000000CE   ........           BL       __aeabi_dadd
   \   000000D2   0200               MOVS     R2,R0
   \   000000D4   0B00               MOVS     R3,R1
   \   000000D6   0020               MOVS     R0,#+0
   \   000000D8   3A49               LDR      R1,??Timer_1ms_0+0x2C  ;; 0x40690000
   \   000000DA   ........           BL       __aeabi_dmul
   \   000000DE   0200               MOVS     R2,R0
   \   000000E0   0B00               MOVS     R3,R1
   \   000000E2   0020               MOVS     R0,#+0
   \   000000E4   3849               LDR      R1,??Timer_1ms_0+0x30  ;; 0xc104ff00
   \   000000E6   ........           BL       __aeabi_dadd
   \   000000EA   ........           BL       __aeabi_d2iz
   \   000000EE   0004               LSLS     R0,R0,#+16
   \   000000F0   0014               ASRS     R0,R0,#+16
   \   000000F2   A021               MOVS     R1,#+160
   \   000000F4   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   000000F6   0143               ORRS     R1,R1,R0
   \   000000F8   0800               MOVS     R0,R1
   \   000000FA   2900               MOVS     R1,R5
   \   000000FC   ........           BL       SPI_SendWord
   1724                           SPI_SendWord(0x8299,Cs_RF);                          //w³¹cz odbiornik
   \   00000100   2900               MOVS     R1,R5
   \   00000102   3248               LDR      R0,??Timer_1ms_0+0x34  ;; 0x8299
   \   00000104   ........           BL       SPI_SendWord
   1725                        
   1726                      }
   1727                      
   1728                    }
   1729                   
   1730                    
   1731            }
   1732          }          
   1733          
   1734            
   1735          
   1736            
   1737                //uruchomienie Timer_1s co 1000 cykli-------------------------------------------
   1738                static short CounterForTimer1s; 
   1739                if (CounterForTimer1s<1000)
   \                     ??Timer_1ms_3:
   \   00000108   2E20               MOVS     R0,#+46
   \   0000010A   205E               LDRSH    R0,[R4, R0]
   \   0000010C   FA21               MOVS     R1,#+250
   \   0000010E   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000110   8842               CMP      R0,R1
   \   00000112   02DA               BGE      ??Timer_1ms_11
   1740                {
   1741                    CounterForTimer1s++;
   \   00000114   401C               ADDS     R0,R0,#+1
   \   00000116   E085               STRH     R0,[R4, #+46]
   \   00000118   03E0               B        ??Timer_1ms_12
   1742                }else{
   1743                    CounterForTimer1s=0;
   \                     ??Timer_1ms_11:
   \   0000011A   0020               MOVS     R0,#+0
   \   0000011C   E085               STRH     R0,[R4, #+46]
   1744                    Timer_1s();
   \   0000011E   ........           BL       Timer_1s
   1745                }
   1746          
   1747          
   1748          
   1749            
   1750            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ TimeUnitQual
   1751            if (++CurTimeQual>=TimeUnitQual)
   \                     ??Timer_1ms_12:
   \   00000122   2C20               MOVS     R0,#+44
   \   00000124   205E               LDRSH    R0,[R4, R0]
   \   00000126   401C               ADDS     R0,R0,#+1
   \   00000128   A085               STRH     R0,[R4, #+44]
   \   0000012A   9621               MOVS     R1,#+150
   \   0000012C   4900               LSLS     R1,R1,#+1        ;; #+300
   \   0000012E   0004               LSLS     R0,R0,#+16
   \   00000130   0014               ASRS     R0,R0,#+16
   \   00000132   8842               CMP      R0,R1
   \   00000134   2CDB               BLT      ??Timer_1ms_13
   1752            {
   1753              CurTimeQual=0;
   \   00000136   0025               MOVS     R5,#+0
   \   00000138   2800               MOVS     R0,R5
   \   0000013A   A085               STRH     R0,[R4, #+44]
   1754              if (TransQuality.MensurIndex<32)
   \   0000013C   2448               LDR      R0,??Timer_1ms_0+0x38  ;; TransQuality
   \   0000013E   0178               LDRB     R1,[R0, #+0]
   \   00000140   2029               CMP      R1,#+32
   \   00000142   02D2               BCS      ??Timer_1ms_14
   1755              {
   1756                TransQuality.MensurIndex++; 
   \   00000144   491C               ADDS     R1,R1,#+1
   \   00000146   0170               STRB     R1,[R0, #+0]
   \   00000148   01E0               B        ??Timer_1ms_15
   1757              }else{
   1758                TransQuality.MensurIndex=0;
   \                     ??Timer_1ms_14:
   \   0000014A   2900               MOVS     R1,R5
   \   0000014C   0170               STRB     R1,[R0, #+0]
   1759              }
   1760              if (TransQuality.QuickMensurIndex<4)
   \                     ??Timer_1ms_15:
   \   0000014E   8178               LDRB     R1,[R0, #+2]
   \   00000150   0429               CMP      R1,#+4
   \   00000152   02D2               BCS      ??Timer_1ms_16
   1761              {
   1762                TransQuality.QuickMensurIndex++; 
   \   00000154   491C               ADDS     R1,R1,#+1
   \   00000156   8170               STRB     R1,[R0, #+2]
   \   00000158   17E0               B        ??Timer_1ms_17
   1763              }else{
   1764                TransQuality.QuickMensurIndex=0;
   \                     ??Timer_1ms_16:
   \   0000015A   2900               MOVS     R1,R5
   \   0000015C   8170               STRB     R1,[R0, #+2]
   1765              }
   1766          
   1767              for (char i=0; i<NumberNeurons; i++) 
   \   0000015E   14E0               B        ??Timer_1ms_17
   1768              {
   1769                TransQuality.Mensur[i] &= ~(0x1 << TransQuality.MensurIndex);
   \                     ??Timer_1ms_18:
   \   00000160   8A00               LSLS     R2,R1,#+2
   \   00000162   8218               ADDS     R2,R0,R2
   \   00000164   D36C               LDR      R3,[R2, #+76]
   \   00000166   0124               MOVS     R4,#+1
   \   00000168   0678               LDRB     R6,[R0, #+0]
   \   0000016A   B440               LSLS     R4,R4,R6
   \   0000016C   A343               BICS     R3,R3,R4
   \   0000016E   D364               STR      R3,[R2, #+76]
   1770                TransQuality.QuickMensur[i] &= ~(0x1 << TransQuality.QuickMensurIndex);
   \   00000170   4118               ADDS     R1,R0,R1
   \   00000172   2622               MOVS     R2,#+38
   \   00000174   0B00               MOVS     R3,R1
   \   00000176   2633               ADDS     R3,R3,#+38
   \   00000178   1B78               LDRB     R3,[R3, #+0]
   \   0000017A   0124               MOVS     R4,#+1
   \   0000017C   8678               LDRB     R6,[R0, #+2]
   \   0000017E   B440               LSLS     R4,R4,R6
   \   00000180   A343               BICS     R3,R3,R4
   \   00000182   8B54               STRB     R3,[R1, R2]
   1771              }                 
   \   00000184   6D1C               ADDS     R5,R5,#+1
   \   00000186   2D06               LSLS     R5,R5,#+24
   \   00000188   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1ms_17:
   \   0000018A   2900               MOVS     R1,R5
   \   0000018C   2329               CMP      R1,#+35
   \   0000018E   E7D3               BCC      ??Timer_1ms_18
   1772            }
   1773          
   1774            
   1775          
   1776                    
   1777                 
   1778          
   1779          
   1780          }//_____________________________________________________________________________
   \                     ??Timer_1ms_13:
   \   00000190   70BC               POP      {R4-R6}
   \   00000192   01BC               POP      {R0}
   \   00000194   0047               BX       R0               ;; return
   \   00000196   C046               Nop      
   \                     ??Timer_1ms_0:
   \   00000198   A000FAFF           DC32     0xfffa00a0
   \   0000019C   ........           DC32     DateTime
   \   000001A0   ........           DC32     ButtonBipCounter
   \   000001A4   34F4FFFF           DC32     0xfffff434
   \   000001A8   ........           DC32     RF_Status
   \   000001AC   ........           DC32     g_RF_TimeOutCounter
   \   000001B0   19820000           DC32     0x8219
   \   000001B4   33333333           DC32     0x33333333
   \   000001B8   3333D33F           DC32     0x3fd33333
   \   000001BC   C3F5285C           DC32     0x5c28f5c3
   \   000001C0   8FE28A40           DC32     0x408ae28f
   \   000001C4   00006940           DC32     0x40690000
   \   000001C8   00FF04C1           DC32     0xc104ff00
   \   000001CC   99820000           DC32     0x8299
   \   000001D0   ........           DC32     TransQuality
   1781          
   1782          
   1783          
   1784          
   1785          
   1786          //-----------------------------------------------------------------------------
   1787          //!  Nazwa funkcji :    Timer_1_Setup
   1788          //!  Funkcja inicjalizacji Timer1 - 1ms
   1789          //-----------------------------------------------------------------------------
   1790          //! 
   1791          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1792          void Timer_1ms_Setup(void) 
   1793          { 
   1794            //TRACE_INFO("T2_setup");  
   1795            //TRACE_INFO("\n\r"); 
   1796            
   1797           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
   1798           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
   1799           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC2] = (unsigned int)Timer_1ms;  //set AIC             
   \                     Timer_1ms_Setup:
   \   00000000   1148               LDR      R0,??Timer_1ms_Setup_0  ;; 0xfffff0b8
   \   00000002   1249               LDR      R1,??Timer_1ms_Setup_0+0x4  ;; Timer_1ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1800           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC2] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_1mS_PRIOR ); 
   \   00000006   1248               LDR      R0,??Timer_1ms_Setup_0+0x8  ;; 0xfffff038
   \   00000008   0421               MOVS     R1,#+4
   \   0000000A   0160               STR      R1,[R0, #+0]
   1801           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC2);      //enable clock 
   \   0000000C   0803               LSLS     R0,R1,#+12
   \   0000000E   1149               LDR      R1,??Timer_1ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
   1802           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   1149               LDR      R1,??Timer_1ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
   1803           //no external clocks 
   1804           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   1049               LDR      R1,??Timer_1ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
   1805           AT91C_BASE_TC2->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   1049               LDR      R1,??Timer_1ms_Setup_0+0x18  ;; 0xfffa0080
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
   1806           AT91C_BASE_TC2->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0F49               LDR      R1,??Timer_1ms_Setup_0+0x1C  ;; 0xfffa0084
   \   00000026   104A               LDR      R2,??Timer_1ms_Setup_0+0x20  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
   1807           //clock: MCK/1024  = 48054841/ DIV
   1808           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
   1809           //! DIV5 - 1024
   1810           //! DIV4 - 128
   1811           //! DIV3 - 32
   1812           //! DIV2 - 8
   1813           
   1814           AT91C_BASE_TC2->TC_RC = 6007;                  //1ms  (z wyliczeñ 6007)
   \   0000002A   1049               LDR      R1,??Timer_1ms_Setup_0+0x24  ;; 0xfffa009c
   \   0000002C   104A               LDR      R2,??Timer_1ms_Setup_0+0x28  ;; 0x1777
   \   0000002E   0A60               STR      R2,[R1, #+0]
   1815           AT91C_BASE_TC2->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000030   1049               LDR      R1,??Timer_1ms_Setup_0+0x2C  ;; 0xfffa00a4
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
   1816           AT91C_BASE_TC2->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   1049               LDR      R1,??Timer_1ms_Setup_0+0x30  ;; 0xfffa00a8
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
   1817           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC2);       //enable int 
   \   0000003C   0F49               LDR      R1,??Timer_1ms_Setup_0+0x34  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
   1818           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC2);       //clear int 
   \   00000040   0F49               LDR      R1,??Timer_1ms_Setup_0+0x38  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
   1819          
   1820          
   1821          
   1822          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_1ms_Setup_0:
   \   00000048   B8F0FFFF           DC32     0xfffff0b8
   \   0000004C   ........           DC32     Timer_1ms
   \   00000050   38F0FFFF           DC32     0xfffff038
   \   00000054   10FCFFFF           DC32     0xfffffc10
   \   00000058   C000FAFF           DC32     0xfffa00c0
   \   0000005C   C400FAFF           DC32     0xfffa00c4
   \   00000060   8000FAFF           DC32     0xfffa0080
   \   00000064   8400FAFF           DC32     0xfffa0084
   \   00000068   01C00C00           DC32     0xcc001
   \   0000006C   9C00FAFF           DC32     0xfffa009c
   \   00000070   77170000           DC32     0x1777
   \   00000074   A400FAFF           DC32     0xfffa00a4
   \   00000078   A800FAFF           DC32     0xfffa00a8
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1823          
   1824          
   1825          
   1826          
   1827          
   1828          
   1829          
   1830          
   1831          
   1832          

   \                                 In section Debug.txt, align 4, keep-with-next
   1833          void RamToFlash(void)
   1834          {
   \                     RamToFlash:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1835                    //if (g_PC_Connected==0)
   1836                    //{
   1837                      DispWait=DispWaitOn; 
   \   00000002   2F4C               LDR      R4,??RamToFlash_0  ;; DispWait
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   2070               STRB     R0,[R4, #+0]
   1838                      Wait_Paint();
   \   00000008   ........           BL       Wait_Paint
   1839                    //} 
   1840                      gProg.Preambu=ProgPreambu;
   \   0000000C   2D4D               LDR      R5,??RamToFlash_0+0x4  ;; gProg
   \   0000000E   AA20               MOVS     R0,#+170
   \   00000010   2870               STRB     R0,[R5, #+0]
   1841                      gProg.ProgFormatTyp=_ProgFormatTyp;
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   6870               STRB     R0,[R5, #+1]
   \   00000016   2C48               LDR      R0,??RamToFlash_0+0x8  ;; 0xc670
   \   00000018   6880               STRH     R0,[R5, #+2]
   1842                      gProg.Size=sizeof(gProg);
   1843                      gProg.ModyfiData[0]='2';gProg.ModyfiData[1]='0';
   \   0000001A   3220               MOVS     R0,#+50
   \   0000001C   2871               STRB     R0,[R5, #+4]
   \   0000001E   3020               MOVS     R0,#+48
   \   00000020   6871               STRB     R0,[R5, #+5]
   1844                      CharToStr(DateTime.Year, &(gProg.ModyfiData[2]), 2); 
   \   00000022   2A4E               LDR      R6,??RamToFlash_0+0xC  ;; DateTime
   \   00000024   0222               MOVS     R2,#+2
   \   00000026   2900               MOVS     R1,R5
   \   00000028   891D               ADDS     R1,R1,#+6
   \   0000002A   3078               LDRB     R0,[R6, #+0]
   \   0000002C   ........           BL       CharToStr
   1845                      gProg.ModyfiData[4]='-';
   \   00000030   2D27               MOVS     R7,#+45
   \   00000032   2F72               STRB     R7,[R5, #+8]
   1846                      CharToStr(DateTime.Mounth, &(gProg.ModyfiData[5]), 2);
   \   00000034   0222               MOVS     R2,#+2
   \   00000036   2900               MOVS     R1,R5
   \   00000038   0931               ADDS     R1,R1,#+9
   \   0000003A   7078               LDRB     R0,[R6, #+1]
   \   0000003C   ........           BL       CharToStr
   1847                      gProg.ModyfiData[7]='-'; 
   \   00000040   EF72               STRB     R7,[R5, #+11]
   1848                      CharToStr(DateTime.Day, &(gProg.ModyfiData[8]), 2); 
   \   00000042   0222               MOVS     R2,#+2
   \   00000044   2900               MOVS     R1,R5
   \   00000046   0C31               ADDS     R1,R1,#+12
   \   00000048   B078               LDRB     R0,[R6, #+2]
   \   0000004A   ........           BL       CharToStr
   1849                      gProg.ModyfiData[10]=' ';
   \   0000004E   2020               MOVS     R0,#+32
   \   00000050   A873               STRB     R0,[R5, #+14]
   1850                      CharToStr(DateTime.Hour, &(gProg.ModyfiData[11]), 2); 
   \   00000052   0222               MOVS     R2,#+2
   \   00000054   2900               MOVS     R1,R5
   \   00000056   0F31               ADDS     R1,R1,#+15
   \   00000058   F078               LDRB     R0,[R6, #+3]
   \   0000005A   ........           BL       CharToStr
   1851                      gProg.ModyfiData[13]=':';
   \   0000005E   3A27               MOVS     R7,#+58
   \   00000060   6F74               STRB     R7,[R5, #+17]
   1852                      CharToStr(DateTime.Minute, &(gProg.ModyfiData[14]), 2); 
   \   00000062   0222               MOVS     R2,#+2
   \   00000064   2900               MOVS     R1,R5
   \   00000066   1231               ADDS     R1,R1,#+18
   \   00000068   3079               LDRB     R0,[R6, #+4]
   \   0000006A   ........           BL       CharToStr
   1853                      gProg.ModyfiData[16]=':';
   \   0000006E   2F75               STRB     R7,[R5, #+20]
   1854                      CharToStr(DateTime.Second, &(gProg.ModyfiData[17]), 2); 
   \   00000070   0222               MOVS     R2,#+2
   \   00000072   2900               MOVS     R1,R5
   \   00000074   1531               ADDS     R1,R1,#+21
   \   00000076   7079               LDRB     R0,[R6, #+5]
   \   00000078   ........           BL       CharToStr
   1855                      for (char i=0; i<19; i++) if (gProg.ModyfiData[i]==0) gProg.ModyfiData[i]='0';
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   08E0               B        ??RamToFlash_1
   \                     ??RamToFlash_2:
   \   00000080   6918               ADDS     R1,R5,R1
   \   00000082   0A79               LDRB     R2,[R1, #+4]
   \   00000084   002A               CMP      R2,#+0
   \   00000086   01D1               BNE      ??RamToFlash_3
   \   00000088   3022               MOVS     R2,#+48
   \   0000008A   0A71               STRB     R2,[R1, #+4]
   \                     ??RamToFlash_3:
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   0006               LSLS     R0,R0,#+24
   \   00000090   000E               LSRS     R0,R0,#+24
   \                     ??RamToFlash_1:
   \   00000092   0100               MOVS     R1,R0
   \   00000094   1329               CMP      R1,#+19
   \   00000096   F3D3               BCC      ??RamToFlash_2
   1856          
   1857                        unsigned int Save = __get_interrupt_state();            
   \   00000098   ........           BL       __iar_get_interrupt_state
   \   0000009C   0700               MOVS     R7,R0
   1858                        __disable_interrupt();
   \   0000009E   ........           BL       __iar_disable_interrupt
   1859                        //CleanFlash(AT91C_IFLASH_MEM->FlashProgram,sizeof(gProg));
   1860                        FlashWrite((char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset), (char*)&gProg,sizeof(gProg)); //(char *ptrMem, char *value, int length)
                               ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   000000A2   094A               LDR      R2,??RamToFlash_0+0x8  ;; 0xc670
   \   000000A4   2900               MOVS     R1,R5
   \   000000A6   306C               LDR      R0,[R6, #+64]
   \   000000A8   094B               LDR      R3,??RamToFlash_0+0x10  ;; 0x130100
   \   000000AA   1818               ADDS     R0,R3,R0
   \   000000AC   ........           BL       FlashWrite
   1861                        //at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,(char*)&gProg,sizeof(gProg));
   1862                        __set_interrupt_state(Save);
   \   000000B0   3800               MOVS     R0,R7
   \   000000B2   ........           BL       __iar_set_interrupt_state
   1863          
   1864           DispWait=DispWaitOff; 
   \   000000B6   0420               MOVS     R0,#+4
   \   000000B8   2070               STRB     R0,[R4, #+0]
   1865          
   1866          
   1867          
   1868          }
   \   000000BA   F8BC               POP      {R3-R7}
   \   000000BC   01BC               POP      {R0}
   \   000000BE   0047               BX       R0               ;; return
   \                     ??RamToFlash_0:
   \   000000C0   ........           DC32     DispWait
   \   000000C4   ........           DC32     gProg
   \   000000C8   70C60000           DC32     0xc670
   \   000000CC   ........           DC32     DateTime
   \   000000D0   00011300           DC32     0x130100
   1869          
   1870          
   1871          
   1872          
   1873          

   \                                 In section .bss, align 4
   1874          int testcount=0;
   \                     testcount:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
   1875          void TestHendel(void)
   1876          {
   \                     TestHendel:
   \   00000000   01B5               PUSH     {R0,LR}
   1877            AT91F_PIO_GetInterruptStatus(AT91C_PIO_VBUS);
   \   00000002   0748               LDR      R0,??TestHendel_0  ;; 0xfffff400
   \   00000004   ........           BL       AT91F_PIO_GetInterruptStatus
   1878            if ((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) testcount++;
   \   00000008   0648               LDR      R0,??TestHendel_0+0x4  ;; 0xfffff43c
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8007               LSLS     R0,R0,#+30
   \   0000000E   03D5               BPL      ??TestHendel_1
   \   00000010   0548               LDR      R0,??TestHendel_0+0x8  ;; testcount
   \   00000012   0168               LDR      R1,[R0, #+0]
   \   00000014   491C               ADDS     R1,R1,#+1
   \   00000016   0160               STR      R1,[R0, #+0]
   1879              
   1880          
   1881          }
   \                     ??TestHendel_1:
   \   00000018   08BC               POP      {R3}
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
   \   0000001E   C046               Nop      
   \                     ??TestHendel_0:
   \   00000020   00F4FFFF           DC32     0xfffff400
   \   00000024   3CF4FFFF           DC32     0xfffff43c
   \   00000028   ........           DC32     testcount
   1882          
   1883          

   \                                 In section Debug.txt, align 4, keep-with-next
   1884          void TestInit(void)
   1885          {
   \                     TestInit:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   1886          //#ifndef USB_BUS_POWERED
   1887              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   00000002   154C               LDR      R4,??TestInit_0  ;; 0xfffff400
   \   00000004   0221               MOVS     R1,#+2
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       AT91F_PIO_CfgInput
   1888              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   0000000C   1348               LDR      R0,??TestInit_0+0x4  ;; 0xfffff460
   \   0000000E   0221               MOVS     R1,#+2
   \   00000010   0160               STR      R1,[R0, #+0]
   1889              
   1890              // Configure VBus monitoring
   1891                  AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, 1 << AT91C_ID_VBUS);
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   1248               LDR      R0,??TestInit_0+0x8  ;; 0xfffffc00
   \   00000016   ........           BL       AT91F_PMC_EnablePeriphClock
   1892              AT91F_PIO_CfgPullup(AT91C_PIO_VBUS, ~AT91C_VBUS);
   \   0000001A   0221               MOVS     R1,#+2
   \   0000001C   C943               MVNS     R1,R1            ;; #-3
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       AT91F_PIO_CfgPullup
   1893              AT91F_PIO_CfgInput(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000024   0221               MOVS     R1,#+2
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       AT91F_PIO_CfgInput
   1894          
   1895              // Configure and enable the Vbus detection interrupt
   1896              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
   1897                                    AT91C_ID_VBUS,
   1898                                    5, //AT91C_AIC_PRIOR_LOWEST,
   1899                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
   1900                                    ISR_VBus);
   \   0000002C   0D4D               LDR      R5,??TestInit_0+0xC  ;; 0xfffff000
   \   0000002E   82B0               SUB      SP,SP,#+8
   \   00000030   0D48               LDR      R0,??TestInit_0+0x10  ;; ISR_VBus
   \   00000032   0090               STR      R0,[SP, #+0]
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   0522               MOVS     R2,#+5
   \   00000038   0221               MOVS     R1,#+2
   \   0000003A   2800               MOVS     R0,R5
   \   0000003C   ........           BL       AT91F_AIC_ConfigureIt
   \   00000040   02B0               ADD      SP,SP,#+8
   1901          
   1902              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   2000               MOVS     R0,R4
   \   00000046   ........           BL       AT91F_PIO_InterruptEnable
   1903              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
   \   0000004A   0221               MOVS     R1,#+2
   \   0000004C   2800               MOVS     R0,R5
   \   0000004E   ........           BL       AT91F_AIC_EnableIt
   1904          }
   \   00000052   38BC               POP      {R3-R5}
   \   00000054   01BC               POP      {R0}
   \   00000056   0047               BX       R0               ;; return
   \                     ??TestInit_0:
   \   00000058   00F4FFFF           DC32     0xfffff400
   \   0000005C   60F4FFFF           DC32     0xfffff460
   \   00000060   00FCFFFF           DC32     0xfffffc00
   \   00000064   00F0FFFF           DC32     0xfffff000
   \   00000068   ........           DC32     ISR_VBus
   1905          
   1906          
   1907          
   1908          
   1909          
   1910          
   1911          //------------------------------------------------------------------------------
   1912          //!          Main
   1913          //------------------------------------------------------------------------------
   1914          
   1915          //char ekran_tab[8][128]; 
   1916          

   \                                 In section .bss, align 4
   1917          char string[25];
   \                     string:
   \   00000000                      DS8 28
   1918          

   \                                 In section Debug.txt, align 4, keep-with-next
   1919          void watchdogEnable(int millis)
   1920          {
   \                     watchdogEnable:
   \   00000000   01B5               PUSH     {R0,LR}
   1921            int period = (millis * 256) / 1000;
   \   00000002   0002               LSLS     R0,R0,#+8
   \   00000004   FA21               MOVS     R1,#+250
   \   00000006   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000008   ........           BL       __aeabi_idivmod
   1922            AT91C_BASE_WDTC->WDTC_WDMR =  AT91C_WDTC_WDRSTEN |        // enable reset on timeout
   1923                                          AT91C_WDTC_WDDBGHLT |       // respect debug mode
   1924                                          AT91C_WDTC_WDIDLEHLT |      // respect idle mode
   1925                                          ((period << 16 ) & AT91C_WDTC_WDD) | // delta is as wide as the period, so we can restart anytime
   1926                                          (period & AT91C_WDTC_WDV);  // set the period
   \   0000000C   0649               LDR      R1,??watchdogEnable_0  ;; 0xfffffd44
   \   0000000E   0204               LSLS     R2,R0,#+16
   \   00000010   064B               LDR      R3,??watchdogEnable_0+0x4  ;; 0xfff0000
   \   00000012   1340               ANDS     R3,R3,R2
   \   00000014   0005               LSLS     R0,R0,#+20
   \   00000016   000D               LSRS     R0,R0,#+20
   \   00000018   1843               ORRS     R0,R0,R3
   \   0000001A   054A               LDR      R2,??watchdogEnable_0+0x8  ;; 0x30002000
   \   0000001C   0243               ORRS     R2,R2,R0
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1927          }
   \   00000020   08BC               POP      {R3}
   \   00000022   01BC               POP      {R0}
   \   00000024   0047               BX       R0               ;; return
   \   00000026   C046               Nop      
   \                     ??watchdogEnable_0:
   \   00000028   44FDFFFF           DC32     0xfffffd44
   \   0000002C   0000FF0F           DC32     0xfff0000
   \   00000030   00200030           DC32     0x30002000

   \                                 In section .data, align 8
   \                     DateTime:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     Speaker:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     g_PC_Connected:
   \   0000000C   00                 DC8 0
   \                     g_LightLCDEnable:
   \   0000000D   00                 DC8 0
   \                     g_ScreenSever_On:
   \   0000000E   00                 DC8 0
   \                     g_ScreenSever_Time_On:
   \   0000000F   00                 DC8 0
   \                     g_ScreenSever_Time_Off:
   \   00000010   00                 DC8 0
   \                     g_SlaveConnect:
   \   00000011   00                 DC8 0
   \                     g_Stop_Program:
   \   00000012   00                 DC8 0
   \                     g_NeedPass:
   \   00000013   00                 DC8 0
   \                     AlarmOn:
   \   00000014   00                 DC8 0
   \                     SlaveMode:
   \   00000015   00                 DC8 0
   \                     ForwardUSB2Serialferst:
   \   00000016   00                 DC8 0
   \                     FlagChangeTime:
   \   00000017   00                 DC8 0
   \   00000018   00                 DC8 0
   \   00000019   64                 DC8 100
   \   0000001A   0000               DC8 0, 0
   \                     g_Password_1:
   \   0000001C   3131313100         DC8 "1111"
   \   00000021   000000             DC8 0, 0, 0
   \                     Y_down:
   \   00000024   FFFF               DC16 -1
   \                     X_down:
   \   00000026   FFFF               DC16 -1
   \                     Y_up:
   \   00000028   FFFF               DC16 -1
   \                     X_up:
   \   0000002A   FFFF               DC16 -1
   \                     CurTimeQual:
   \   0000002C   0000               DC16 0
   \   0000002E   0000               DC8 0, 0
   \                     g_counter:
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     g_NextTimeProgram:
   \   00000038   000000000000       DC32 0, 0
   \              0000        
   \                     FlashProgramOfset:
   \   00000040   00010000           DC32 256
   \                     g_seconds_counter:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     g_LightCouterLCD:
   \   00000048   00000000           DC32 0
   \                     pAT91C_IFLASH_MEM:
   \   0000004C   00001300           DC32 130000H
   \                     SourRam:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     siz:
   \   00000054   00000000           DC8 0, 0, 0, 0
   \                     LiczOds:
   \   00000058   00000000           DC32 0
   \                     CyklPerSekCount:
   \   0000005C   00000000           DC32 0
   \                     TransLoopTime:
   \   00000060   00000000           DC32 0
   \                     CyklPerSek:
   \   00000064   01000000           DC32 1
   \                     MenuLevel_old:
   \   00000068   00000000           DC8 0, 0, 0, 0
   \   0000006C   00000000           DC8 0, 0, 0, 0
   \   00000070   00000000           DC8 0, 0, 0, 0
   1928          
   1929          
   1930          
   1931          
   1932          
   1933          
   1934          
   1935          
   1936          
   1937          
   1938          #define WATCHDOG_KEY (0xA5 << 24)
   1939          
   1940          char TimeCompil[]= __TIME__;
   1941          char DateCompil[]= __DATE__;
   1942          
   1943          extern  char VBUS_old;
   1944          
   1945          
   1946          #ifdef _LIVE_RJESTR 
   1947          int LIVE_TAB_IDX=0;  
   1948          unsigned short LIVE_TAB[LIVE_TAB_SIZE];  //   | A-Odczyt, B-potwierdzenie odczytu, C-Zapis F-flaga priorytetu | Nr wêz³a |  wartoœæ | | 
   1949          #endif
   1950             
   1951          
   1952          AT91PS_MEM FLASH;  
   \                     FLASH:
   \   00000074   00000000           DC8 0, 0, 0, 0
   \   00000078   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   0000008C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000009C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000010C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000011C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000012C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000013C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000014C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000015C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000016C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000017C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000018C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000019C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000020C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000021C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000022C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000023C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000053C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000054C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000055C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000056C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .data, align 4
   \                     FlashProgramReserveOfset:
   \   00000000   D8D70000           DC32 55256

   \                                 In section .data, align 4
   \                     g_Password_2:
   \   00000000   3232323200         DC8 "2222"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .data, align 1
   \                     AdressModbus:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 1
   \                     g_Restart_Program:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 8
   \                     AlarmScreenAction:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     out:
   \   00000010   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
   \              010101010000
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In section .data, align 4
   \                     pEndpoints:
   \   00000000   000000000000       DC32 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000020   01000000           DC8 1, 0, 0, 0
   \   00000024   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000048   02000000           DC8 2, 0, 0, 0
   \   0000004C   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000070   02000000           DC8 2, 0, 0, 0
   \   00000074   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000098   01000000           DC8 1, 0, 0, 0
   \   0000009C   00000000           DC32 0

   \                                 In section .data, align 4
   \                     tProgramTabSize:
   \   00000000   70C60000           DC32 50800

   \                                 In section .data, align 4
   \                     stop:
   \   00000000   D0070000           DC32 2000

   \                                 In section .data, align 4
   \                     ??Out:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   30D81300           DC32 13D830H

   \                                 In section .data, align 4
   \                     X_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     X_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 1
   \                     g_PC_Connected_timeout:
   \   00000000   05                 DC8 5

   \                                 In section .data, align 4
   \                     TimeCompil:
   \   00000000   32303A35383A       DC8 "20:58:06"
   \              303600      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .data, align 4
   \                     DateCompil:
   \   00000000   4F6374203233       DC8 "Oct 23 2012"
   \              203230313200
   1953          

   \                                 In section Debug.txt, align 4, keep-with-next
   1954          void main()
   1955          {
   \                     main:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1956              FLASH=AT91C_IFLASH_MEM;  
   \   00000002   CA4C               LDR      R4,??main_0      ;; DateTime
   \   00000004   9820               MOVS     R0,#+152
   \   00000006   4003               LSLS     R0,R0,#+13       ;; #+1245184
   \   00000008   6067               STR      R0,[R4, #+116]
   1957            
   1958              LCD_INIT();
   \   0000000A   ........           BL       AT91F_LCD_Init
   1959              Init_LCD_TS();           //inicjalizacja Touchpanel`a
   \   0000000E   ........           BL       Init_LCD_TS
   1960              CheckLCD();
   \   00000012   ........           BL       CheckLCD
   1961              
   1962              CleanCanvas(); 
   \   00000016   ........           BL       CleanCanvas
   1963              MenuPaint();    
   \   0000001A   ........           BL       MenuPaint
   1964              RepaintLCD();
   \   0000001E   ........           BL       RepaintLCD
   1965              RepaintLCD();     
   \   00000022   ........           BL       RepaintLCD
   \   00000026   C248               LDR      R0,??main_0+0x4  ;; RF_Status
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   0170               STRB     R1,[R0, #+0]
   1966            
   1967              RF_Status.Init=1;
   1968              
   1969              
   1970              AT91F_PIO_CfgOutput(AT91C_BASE_PIOA, SpeakerPin);
                                                          ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000002C   8025               MOVS     R5,#+128
   \   0000002E   2D06               LSLS     R5,R5,#+24       ;; #-2147483648
   \   00000030   2900               MOVS     R1,R5
   \   00000032   C048               LDR      R0,??main_0+0x8  ;; 0xfffff400
   \   00000034   ........           BL       AT91F_PIO_CfgOutput
   1971              AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000038   BF48               LDR      R0,??main_0+0xC  ;; 0xfffff434
   \   0000003A   0560               STR      R5,[R0, #+0]
   1972              //uruchomienie Watchdog`a na 50s 
   1973              //watchdogEnable(50000);  
   1974              //AT91F_WDTRestart(AT91C_BASE_WDTC);
   1975              //AT91C_BASE_WDTC->WDTC_WDMR=(unsigned int) AT91C_WDTC_WDV|AT91C_WDTC_WDRSTEN | AT91C_WDTC_WDD|0x0<<15;
   1976          
   1977              AT91C_BASE_WDTC->WDTC_WDMR=AT91C_WDTC_WDDIS; 
   \   0000003C   BF48               LDR      R0,??main_0+0x10  ;; 0xfffffd44
   \   0000003E   290C               LSRS     R1,R5,#+16
   \   00000040   0160               STR      R1,[R0, #+0]
   1978          
   1979             
   1980              
   1981              SpiMaster_Init();
   \   00000042   ........           BL       SpiMaster_Init
   1982              
   1983              __enable_interrupt(); 
   \   00000046   ........           BL       __iar_enable_interrupt
   1984          
   1985             InitRTC();  
   \   0000004A   ........           BL       InitRTC
   1986              GetDateTimeFromRTC(); 
   \   0000004E   ........           BL       GetDateTimeFromRTC
   1987           
   1988              InitFramework();
   \   00000052   ........           BL       InitFramework
   1989          
   1990              SER_Init(&sSer, &sUsb);  // Initialize the serial driver
   \   00000056   BA4F               LDR      R7,??main_0+0x14  ;; sUsb
   \   00000058   3900               MOVS     R1,R7
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   7830               ADDS     R0,R0,#+120
   \   0000005E   ........           BL       SER_Init
   1991          
   1992              InitFlash();  
   \   00000062   ........           BL       InitFlash
   1993            
   1994              
   1995              Init_LCD_Light_PWM();
                     ^
Warning[Pe223]: function "Init_LCD_Light_PWM" declared implicitly
   \   00000066   ........           BL       Init_LCD_Light_PWM
   1996              
   1997              __enable_interrupt();    
   \   0000006A   ........           BL       __iar_enable_interrupt
   \   0000006E   B548               LDR      R0,??main_0+0x18  ;; gProg
   1998           
   1999            
   2000                
   2001              
   2002              //******************************************************************************
   2003              //Ustawienia dla pierwszego uruchomienia starownika ****************************
   2004                if (pAT91C_IFLASH_MEM->Config.FerstRun!=0x0A)
   2005                {
   2006                  char WriteTmp;
                              ^
Warning[Pe177]: variable "WriteTmp" was declared but never referenced
   2007                 //zapis ustawieñ do flasha 
   2008                  /*
   2009                 unsigned int Save = __get_interrupt_state();            
   2010                 __disable_interrupt();
   2011                     //uruchomiono sterownik  
   2012                     WriteTmp=0xA;    FlashWrite((char*)&(AT91C_IFLASH_MEM->Config.FerstRun),&WriteTmp,1);
   2013                 __set_interrupt_state(Save);
   2014                  */
   2015                   //RamToFlash();
   2016                  }
   2017                
   2018               
   2019                
   2020              //Koniec ustawieñ dla pierwszego uruchomienia starownika ***********************
   2021              //******************************************************************************
   2022          
   2023              ProgramChangeExecute(&gProg); 
   \   00000070   ........           BL       ProgramChangeExecute
   2024              ThermostatsTimeChartExecute();
   \   00000074   ........           BL       ThermostatsTimeChartExecute
   2025              
   2026              
   2027           //   US0_init();                                                                //inicjalizacja USART0
   2028             
   2029          #ifdef __WIFI_MODULE    
   2030              US1_init();                                                                 //inicjalizacja USART1
   2031          #endif
   2032              
   2033           //   Timer_10us_Setup();
   2034              Timer_1ms_Setup();
   \   00000078   ........           BL       Timer_1ms_Setup
   2035              Timer_10ms_Setup();
   \   0000007C   ........           BL       Timer_10ms_Setup
   \   00000080   0020               MOVS     R0,#+0
   \   00000082   B149               LDR      R1,??main_0+0x1C  ;; 0xefffff
   \   00000084   01E0               B        ??main_1
   2036              
   2037              //Timer_1s();   
   2038                
   2039              for (int aaa=0; aaa<0xEFFFFF; aaa++)
   2040                      {
   2041                        asm( "nop" );
   \                     ??main_2:
   \   00000086   C046               nop              
   2042                      }       
   \   00000088   401C               ADDS     R0,R0,#+1
   \                     ??main_1:
   \   0000008A   8842               CMP      R0,R1
   \   0000008C   FBDB               BLT      ??main_2
   2043          
   2044              g_ScreenSever_On=pAT91C_IFLASH_MEM->Config.ScreenSever_On;
   \   0000008E   AF48               LDR      R0,??main_0+0x20  ;; 0xd7e6
   \   00000090   E16C               LDR      R1,[R4, #+76]
   \   00000092   0818               ADDS     R0,R1,R0
   \   00000094   0179               LDRB     R1,[R0, #+4]
   \   00000096   A173               STRB     R1,[R4, #+14]
   2045              g_ScreenSever_Time_On=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_On;
   \   00000098   4179               LDRB     R1,[R0, #+5]
   \   0000009A   E173               STRB     R1,[R4, #+15]
   2046              g_ScreenSever_Time_Off=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_Off;
   \   0000009C   8179               LDRB     R1,[R0, #+6]
   \   0000009E   2174               STRB     R1,[R4, #+16]
   2047              
   2048          
   2049          
   2050          
   2051              
   2052              
   2053           
   2054          //uruchomienie RF
   2055              
   2056              //odczyt kanalu z flasha ------------------------------ 
   2057              
   2058              SlaveMode=pAT91C_IFLASH_MEM->Config.SlaveMode;
   \   000000A0   8178               LDRB     R1,[R0, #+2]
   \   000000A2   6175               STRB     R1,[R4, #+21]
   2059              RF_Status.Ch=pAT91C_IFLASH_MEM->Config.RF_channel;
   \   000000A4   0078               LDRB     R0,[R0, #+0]
   \   000000A6   AA49               LDR      R1,??main_0+0x24  ;; RF_Status + 13
   \   000000A8   0870               STRB     R0,[R1, #+0]
   2060              if (RF_Status.Ch==0) RF_Status.Ch=1;
   \   000000AA   0028               CMP      R0,#+0
   \   000000AC   02D1               BNE      ??main_3
   \   000000AE   A848               LDR      R0,??main_0+0x24  ;; RF_Status + 13
   \   000000B0   0121               MOVS     R1,#+1
   \   000000B2   0170               STRB     R1,[R0, #+0]
   2061              
   2062              
   2063              InitPioInterrupt();
                     ^
Warning[Pe223]: function "InitPioInterrupt" declared implicitly
   \                     ??main_3:
   \   000000B4   ........           BL       InitPioInterrupt
   2064              
   2065              RF_Init();
   \   000000B8   ........           BL       RF_Init
   2066              
   2067              
   2068              char InitRF=1;
   \   000000BC   0125               MOVS     R5,#+1
   \   000000BE   04E0               B        ??main_4
   2069              
   2070              while (InitRF==1)
   2071              { 
   2072                  InitRF=RF_Status.Init;
   \                     ??main_5:
   \   000000C0   9B48               LDR      R0,??main_0+0x4  ;; RF_Status
   \   000000C2   0578               LDRB     R5,[R0, #+0]
   2073                  Delay(0x1);
   \   000000C4   0120               MOVS     R0,#+1
   \   000000C6   ........           BL       Delay
   2074              };
   \                     ??main_4:
   \   000000CA   012D               CMP      R5,#+1
   \   000000CC   F8D0               BEQ      ??main_5
   2075          
   2076              
   2077          
   2078              //sprawdzenie kana³u transmisji radiowej
   2079              if (!SlaveMode) //je¿eli master
   \   000000CE   607D               LDRB     R0,[R4, #+21]
   \   000000D0   0028               CMP      R0,#+0
   \   000000D2   66D1               BNE      ??main_6
   2080              {
   2081                SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
                       ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   000000D4   A026               MOVS     R6,#+160
   \   000000D6   3602               LSLS     R6,R6,#+8        ;; #+40960
   \   000000D8   0221               MOVS     R1,#+2
   \   000000DA   0D00               MOVS     R5,R1
   \   000000DC   9C48               LDR      R0,??main_0+0x24  ;; RF_Status + 13
   \   000000DE   0078               LDRB     R0,[R0, #+0]
   \   000000E0   ........           BL       __aeabi_ui2d
   \   000000E4   0200               MOVS     R2,R0
   \   000000E6   0B00               MOVS     R3,R1
   \   000000E8   9A48               LDR      R0,??main_0+0x28  ;; 0x33333333
   \   000000EA   9B49               LDR      R1,??main_0+0x2C  ;; 0x3fd33333
   \   000000EC   ........           BL       __aeabi_dmul
   \   000000F0   0200               MOVS     R2,R0
   \   000000F2   0B00               MOVS     R3,R1
   \   000000F4   9948               LDR      R0,??main_0+0x30  ;; 0x5c28f5c3
   \   000000F6   9A49               LDR      R1,??main_0+0x34  ;; 0x408ae28f
   \   000000F8   ........           BL       __aeabi_dadd
   \   000000FC   0200               MOVS     R2,R0
   \   000000FE   0B00               MOVS     R3,R1
   \   00000100   0020               MOVS     R0,#+0
   \   00000102   9849               LDR      R1,??main_0+0x38  ;; 0x40690000
   \   00000104   ........           BL       __aeabi_dmul
   \   00000108   0200               MOVS     R2,R0
   \   0000010A   0B00               MOVS     R3,R1
   \   0000010C   0020               MOVS     R0,#+0
   \   0000010E   9649               LDR      R1,??main_0+0x3C  ;; 0xc104ff00
   \   00000110   ........           BL       __aeabi_dadd
   \   00000114   ........           BL       __aeabi_d2iz
   \   00000118   0004               LSLS     R0,R0,#+16
   \   0000011A   0014               ASRS     R0,R0,#+16
   \   0000011C   3043               ORRS     R0,R0,R6
   \   0000011E   2900               MOVS     R1,R5
   \   00000120   ........           BL       SPI_SendWord
   2082                RF_Status.EnableRX();
   \   00000124   9148               LDR      R0,??main_0+0x40  ;; RF_Status + 28
   \   00000126   0068               LDR      R0,[R0, #+0]
   \   00000128   ........           BL       __iar_via_R0
   2083                Delay(0x100000);
   \   0000012C   E804               LSLS     R0,R5,#+19
   \   0000012E   ........           BL       Delay
   \   00000132   26E0               B        ??main_7
   2084                while (RF_CheckChannel())                                                                                            
   2085                {
   2086                  
   2087                  if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   \                     ??main_8:
   \   00000134   8648               LDR      R0,??main_0+0x24  ;; RF_Status + 13
   \   00000136   0121               MOVS     R1,#+1
   \   00000138   0170               STRB     R1,[R0, #+0]
   2088                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   \                     ??main_9:
   \   0000013A   8548               LDR      R0,??main_0+0x24  ;; RF_Status + 13
   \   0000013C   0078               LDRB     R0,[R0, #+0]
   \   0000013E   ........           BL       __aeabi_ui2d
   \   00000142   0200               MOVS     R2,R0
   \   00000144   0B00               MOVS     R3,R1
   \   00000146   8348               LDR      R0,??main_0+0x28  ;; 0x33333333
   \   00000148   8349               LDR      R1,??main_0+0x2C  ;; 0x3fd33333
   \   0000014A   ........           BL       __aeabi_dmul
   \   0000014E   0200               MOVS     R2,R0
   \   00000150   0B00               MOVS     R3,R1
   \   00000152   8248               LDR      R0,??main_0+0x30  ;; 0x5c28f5c3
   \   00000154   8249               LDR      R1,??main_0+0x34  ;; 0x408ae28f
   \   00000156   ........           BL       __aeabi_dadd
   \   0000015A   0200               MOVS     R2,R0
   \   0000015C   0B00               MOVS     R3,R1
   \   0000015E   0020               MOVS     R0,#+0
   \   00000160   8049               LDR      R1,??main_0+0x38  ;; 0x40690000
   \   00000162   ........           BL       __aeabi_dmul
   \   00000166   0200               MOVS     R2,R0
   \   00000168   0B00               MOVS     R3,R1
   \   0000016A   0020               MOVS     R0,#+0
   \   0000016C   7E49               LDR      R1,??main_0+0x3C  ;; 0xc104ff00
   \   0000016E   ........           BL       __aeabi_dadd
   \   00000172   ........           BL       __aeabi_d2iz
   \   00000176   0004               LSLS     R0,R0,#+16
   \   00000178   0014               ASRS     R0,R0,#+16
   \   0000017A   3043               ORRS     R0,R0,R6
   \   0000017C   2900               MOVS     R1,R5
   \   0000017E   ........           BL       SPI_SendWord
   \                     ??main_7:
   \   00000182   ........           BL       RF_CheckChannel
   \   00000186   0028               CMP      R0,#+0
   \   00000188   07D0               BEQ      ??main_10
   \   0000018A   7148               LDR      R0,??main_0+0x24  ;; RF_Status + 13
   \   0000018C   0078               LDRB     R0,[R0, #+0]
   \   0000018E   2728               CMP      R0,#+39
   \   00000190   D0D2               BCS      ??main_8
   \   00000192   6F49               LDR      R1,??main_0+0x24  ;; RF_Status + 13
   \   00000194   401C               ADDS     R0,R0,#+1
   \   00000196   0870               STRB     R0,[R1, #+0]
   \   00000198   CFE7               B        ??main_9
   2089                }  
   2090                RF_Status.MasterMode=1;
   \                     ??main_10:
   \   0000019A   7548               LDR      R0,??main_0+0x44  ;; RF_Status + 12
   \   0000019C   0121               MOVS     R1,#+1
   \   0000019E   0170               STRB     R1,[R0, #+0]
   \   000001A0   09E0               B        ??main_11
   2091              }else{
   2092               RF_Status.Ch=0;
   \                     ??main_6:
   \   000001A2   6B48               LDR      R0,??main_0+0x24  ;; RF_Status + 13
   \   000001A4   0021               MOVS     R1,#+0
   \   000001A6   0170               STRB     R1,[R0, #+0]
   2093                SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
                       ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   000001A8   0221               MOVS     R1,#+2
   \   000001AA   7248               LDR      R0,??main_0+0x48  ;; 0xa040
   \   000001AC   ........           BL       SPI_SendWord
   2094                RF_Status.MasterMode=0;            
   \   000001B0   6F48               LDR      R0,??main_0+0x44  ;; RF_Status + 12
   \   000001B2   0021               MOVS     R1,#+0
   \   000001B4   0170               STRB     R1,[R0, #+0]
   2095              }
   2096          
   2097              RF_Status.AllReady=1;
   \                     ??main_11:
   \   000001B6   7048               LDR      R0,??main_0+0x4C  ;; RF_Status + 14
   \   000001B8   0121               MOVS     R1,#+1
   \   000001BA   0170               STRB     R1,[R0, #+0]
   2098              
   2099              
   2100              
   2101          
   2102              
   2103              
   2104              
   2105              //odczyt has³a------------------------------------------    
   2106              if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEC)
   \   000001BC   E06C               LDR      R0,[R4, #+76]
   \   000001BE   6F49               LDR      R1,??main_0+0x50  ;; 0xd7dc
   \   000001C0   4118               ADDS     R1,R0,R1
   \   000001C2   0A78               LDRB     R2,[R1, #+0]
   \   000001C4   EC2A               CMP      R2,#+236
   \   000001C6   0ED1               BNE      ??main_12
   2107              {//je¿eli nie wymagane has³o
   2108               g_NeedPass=0; 
   \   000001C8   0021               MOVS     R1,#+0
   \   000001CA   E174               STRB     R1,[R4, #+19]
   2109               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   000001CC   6C4D               LDR      R5,??main_0+0x54  ;; 0xd7dd
   \                     ??main_13:
   \   000001CE   0A00               MOVS     R2,R1
   \   000001D0   082A               CMP      R2,#+8
   \   000001D2   33D2               BCS      ??main_14
   \   000001D4   0B00               MOVS     R3,R1
   \   000001D6   E218               ADDS     R2,R4,R3
   \   000001D8   C318               ADDS     R3,R0,R3
   \   000001DA   5B5D               LDRB     R3,[R3, R5]
   \   000001DC   1377               STRB     R3,[R2, #+28]
   \   000001DE   491C               ADDS     R1,R1,#+1
   \   000001E0   0906               LSLS     R1,R1,#+24
   \   000001E2   090E               LSRS     R1,R1,#+24
   \   000001E4   F3E7               B        ??main_13
   2110              }else if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEB)
   \                     ??main_12:
   \   000001E6   0978               LDRB     R1,[R1, #+0]
   \   000001E8   EB29               CMP      R1,#+235
   \   000001EA   0FD1               BNE      ??main_15
   2111              {//je¿eli nie wymagane has³o
   2112               g_NeedPass=1; 
   \   000001EC   0121               MOVS     R1,#+1
   \   000001EE   E174               STRB     R1,[R4, #+19]
   2113               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   000001F0   0021               MOVS     R1,#+0
   \   000001F2   634D               LDR      R5,??main_0+0x54  ;; 0xd7dd
   \                     ??main_16:
   \   000001F4   0A00               MOVS     R2,R1
   \   000001F6   082A               CMP      R2,#+8
   \   000001F8   20D2               BCS      ??main_14
   \   000001FA   0B00               MOVS     R3,R1
   \   000001FC   E218               ADDS     R2,R4,R3
   \   000001FE   C318               ADDS     R3,R0,R3
   \   00000200   5B5D               LDRB     R3,[R3, R5]
   \   00000202   1377               STRB     R3,[R2, #+28]
   \   00000204   491C               ADDS     R1,R1,#+1
   \   00000206   0906               LSLS     R1,R1,#+24
   \   00000208   090E               LSRS     R1,R1,#+24
   \   0000020A   F3E7               B        ??main_16
   2114              }else
   2115              {//jezeli nie zdefiniowano  - zdefiniuj i zapisz has³o domyœlne i ustaw jako nie wymagane
   2116               
   2117               //zapis has³a do flash
   2118               unsigned int Save = __get_interrupt_state();  
   \                     ??main_15:
   \   0000020C   ........           BL       __iar_get_interrupt_state
   \   00000210   0500               MOVS     R5,R0
   2119               __disable_interrupt();
   \   00000212   ........           BL       __iar_disable_interrupt
   2120               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])),0,g_Password_1,9);
   2121               
   2122                FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])), g_Password_1, 9);
                       ^
Warning[Pe223]: function "FlashWrite" declared implicitly

  static void CBK_Suspend(const S_usb *pUsb)
              ^
"D:\Zeuron\Projekty\S300\S300-program v0.9 - 23.10.2012\Framework\main.c",522  Warning[Pe177]: 
          function "CBK_Suspend" was declared but never referenced
   \   00000216   0922               MOVS     R2,#+9
   \   00000218   2100               MOVS     R1,R4
   \   0000021A   1C31               ADDS     R1,R1,#+28
   \   0000021C   5948               LDR      R0,??main_0+0x58  ;; 0x13d7dd
   \   0000021E   ........           BL       FlashWrite
   2123               char NeedPassFlag=0xEC;
   \   00000222   6846               MOV      R0,SP
   \   00000224   EC21               MOVS     R1,#+236
   \   00000226   0170               STRB     R1,[R0, #+0]
   2124               g_NeedPass=0; 
   \   00000228   0020               MOVS     R0,#+0
   \   0000022A   E074               STRB     R0,[R4, #+19]
   2125               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)),0,&NeedPassFlag,1);
   2126               FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)), &NeedPassFlag, 1);
   \   0000022C   0122               MOVS     R2,#+1
   \   0000022E   6946               MOV      R1,SP
   \   00000230   5548               LDR      R0,??main_0+0x5C  ;; 0x13d7dc
   \   00000232   ........           BL       FlashWrite
   2127               __set_interrupt_state(Save);
   \   00000236   2800               MOVS     R0,R5
   \   00000238   ........           BL       __iar_set_interrupt_state
   2128               //koniec zapisu do flash
   2129              }
   2130              //koniec odczytu has³a ---------------------------------------- 
   2131          
   2132          
   2133              
   2134              USB_Connect(&sUsb);    
   \                     ??main_14:
   \   0000023C   3800               MOVS     R0,R7
   \   0000023E   ........           BL       USB_Connect
   2135             __enable_interrupt();   
   \   00000242   ........           BL       __iar_enable_interrupt
   \   00000246   34E0               B        ??main_17
   2136             
   2137             
   2138           
   2139          #ifdef __WIFI_MODULE   
   2140             InitWizFi(AT91C_BASE_US1, &NET);
   2141          #endif
   2142          
   2143             
   2144             
   2145              /*
   2146             //ustawienie wys³ania stanów  do wszystkich wêz³ów po restarcie
   2147              for (char i=0; i<NumberNeurons; i++)
   2148              {
   2149                MainStage.SendStageChange[i]=ChangeStageFlag; 
   2150              }
   2151             */
   2152             
   2153             
   2154              while (1) 
   2155              {
   2156                  AT91F_WDTRestart(AT91C_BASE_WDTC);
   2157                  
   2158                  
   2159                  if (ForwardUSB2Serialferst==1)
   2160                  {
   2161                      // Start USB->Serial forward mechanism
   2162                      ForwardUSB2Serial(0, 0, 0, 0);
   2163                      ForwardUSB2Serialferst=2;
   2164                  }
   2165                
   2166                 
   2167                  
   2168                 
   2169                 if ((!((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)) && (VBUS_old==1))
   2170                 {
   2171                   VBUS_old=0;
   2172                   ISR_VBus();
   2173                 }
   2174                 /*
   2175                 if (((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) && (VBUS_old==0))
   2176                 {
   2177                   VBUS_old=1;
   2178                   ISR_VBus();
   2179                 } 
   2180                 */
   2181                 
   2182                  
   2183                  
   2184                   
   2185                  if ((g_NextTimeProgram<=g_counter) || (g_NextTimeProgram>g_counter+ProgramPeriod))
   2186                   {
   2187                    
   2188                     
   2189                       char WaitingRF_WrTask=0;
   2190                       if (g_NextTimeProgram<g_counter+1000)    //blokowanie wykonania programu jezeli istnieje oczekuj¹ce ¿¹danie wys³ania stanu do któregokolwiek wêz³a. Blokowanie nie mo¿e przekroczyæ 1s. 
   2191                       {
   2192                           char Nd=1;
   2193                           while ((Nd<NumberNeurons) && (WaitingRF_WrTask==0))
   2194                            {
   2195                                if ((MainStage.SendStageChange[Nd]>0))    
   \                     ??main_18:
   \   00000248   5049               LDR      R1,??main_0+0x60  ;; 0x619
   \   0000024A   0200               MOVS     R2,R0
   \   0000024C   504B               LDR      R3,??main_0+0x64  ;; MainStage
   \   0000024E   9A18               ADDS     R2,R3,R2
   \   00000250   515C               LDRB     R1,[R2, R1]
   \   00000252   0029               CMP      R1,#+0
   \   00000254   00D0               BEQ      ??main_19
   2196                                {
   2197                                    WaitingRF_WrTask=1;
   \   00000256   0125               MOVS     R5,#+1
   2198                                }
   2199                                Nd++;  
   \                     ??main_19:
   \   00000258   401C               ADDS     R0,R0,#+1
   \   0000025A   0006               LSLS     R0,R0,#+24
   \   0000025C   000E               LSRS     R0,R0,#+24
   2200                            } 
   \                     ??main_20:
   \   0000025E   0100               MOVS     R1,R0
   \   00000260   2329               CMP      R1,#+35
   \   00000262   01D2               BCS      ??main_21
   \   00000264   2900               MOVS     R1,R5
   \   00000266   EFD0               BEQ      ??main_18
   2201                       }
   2202          
   2203                      if (WaitingRF_WrTask==0)
   \                     ??main_21:
   \   00000268   002D               CMP      R5,#+0
   \   0000026A   0AD1               BNE      ??main_22
   2204                      {
   2205                        g_NextTimeProgram=g_counter+ProgramPeriod;
   \   0000026C   2200               MOVS     R2,R4
   \   0000026E   3832               ADDS     R2,R2,#+56
   \   00000270   AF20               MOVS     R0,#+175
   \   00000272   4000               LSLS     R0,R0,#+1        ;; #+350
   \   00000274   0021               MOVS     R1,#+0
   \   00000276   8019               ADDS     R0,R0,R6
   \   00000278   7941               ADCS     R1,R1,R7
   \   0000027A   03C2               STM      R2!,{R0,R1}
   2206                        Program(&gProg);
   \   0000027C   3148               LDR      R0,??main_0+0x18  ;; gProg
   \   0000027E   ........           BL       Program
   2207                      }
   2208                      
   2209                      
   2210                      
   2211                      
   2212                   }
   2213                   
   2214                  
   2215                  if ((g_counter>4000) && (MenuLevel==0)) { MenuLevel=1;   MenuPaint();}
   \                     ??main_22:
   \   00000282   2000               MOVS     R0,R4
   \   00000284   3030               ADDS     R0,R0,#+48
   \   00000286   03C8               LDM      R0!,{R0,R1}
   \   00000288   424A               LDR      R2,??main_0+0x68  ;; 0xfa1
   \   0000028A   0023               MOVS     R3,#+0
   \   0000028C   9942               CMP      R1,R3
   \   0000028E   0AD3               BCC      ??main_23
   \   00000290   01D8               BHI      ??main_24
   \   00000292   9042               CMP      R0,R2
   \   00000294   07D3               BCC      ??main_23
   \                     ??main_24:
   \   00000296   4048               LDR      R0,??main_0+0x6C  ;; MenuLevel
   \   00000298   0168               LDR      R1,[R0, #+0]
   \   0000029A   0029               CMP      R1,#+0
   \   0000029C   03D1               BNE      ??main_23
   \   0000029E   0121               MOVS     R1,#+1
   \   000002A0   0160               STR      R1,[R0, #+0]
   \   000002A2   ........           BL       MenuPaint
   2216                  
   2217          
   2218                    
   2219          #ifdef __WIFI_MODULE     
   2220                  if (NET.WiFi.On)
   2221                  {
   2222                      //wifi-------------------------------------------------------------------
   2223                      if ((g_counter>6000) /*&&  (g_counter%200==0)*/)
   2224                      {
   2225                        CheckVarChangeHTTP(Buff_TX_1 ,AT91C_BASE_US1, &NET);
   2226                      }
   2227                  
   2228                      WiFi(US1_Buffer, Buff_TX_1 ,AT91C_BASE_US1, &NET);
   2229                  }
   2230                  //CheckConnectionStatus();
   2231          #endif  
   2232            
   2233                  
   2234                  
   2235                  //bezpiecznik RF zabezpiecza przed zablokowaniem RFa
   2236                  if (RF_Status.RfFuse>=60) 
   \                     ??main_23:
   \   000002A6   3D48               LDR      R0,??main_0+0x70  ;; RF_Status + 15
   \   000002A8   0078               LDRB     R0,[R0, #+0]
   \   000002AA   3C28               CMP      R0,#+60
   \   000002AC   01D3               BCC      ??main_17
   2237                  {
   2238                      #ifdef _DEBUG_
   2239                               MESSAGE("Bezpiecznik RF"); 
   2240                      #endif
   2241                                
   2242                      RF_Init();          
   \   000002AE   ........           BL       RF_Init
   2243                  }   
   \                     ??main_17:
   \   000002B2   3B48               LDR      R0,??main_0+0x74  ;; 0xfffffd40
   \   000002B4   ........           BL       AT91F_WDTRestart
   \   000002B8   A07D               LDRB     R0,[R4, #+22]
   \   000002BA   0128               CMP      R0,#+1
   \   000002BC   07D1               BNE      ??main_25
   \   000002BE   0023               MOVS     R3,#+0
   \   000002C0   1A00               MOVS     R2,R3
   \   000002C2   1100               MOVS     R1,R2
   \   000002C4   0800               MOVS     R0,R1
   \   000002C6   ........           BL       ForwardUSB2Serial
   \   000002CA   0220               MOVS     R0,#+2
   \   000002CC   A075               STRB     R0,[R4, #+22]
   \                     ??main_25:
   \   000002CE   3548               LDR      R0,??main_0+0x78  ;; 0xfffff43c
   \   000002D0   0068               LDR      R0,[R0, #+0]
   \   000002D2   0221               MOVS     R1,#+2
   \   000002D4   0842               TST      R0,R1
   \   000002D6   07D1               BNE      ??main_26
   \   000002D8   3348               LDR      R0,??main_0+0x7C  ;; VBUS_old
   \   000002DA   0178               LDRB     R1,[R0, #+0]
   \   000002DC   0129               CMP      R1,#+1
   \   000002DE   03D1               BNE      ??main_26
   \   000002E0   0021               MOVS     R1,#+0
   \   000002E2   0170               STRB     R1,[R0, #+0]
   \   000002E4   ........           BL       ISR_VBus
   \                     ??main_26:
   \   000002E8   2000               MOVS     R0,R4
   \   000002EA   3830               ADDS     R0,R0,#+56
   \   000002EC   0CC8               LDM      R0!,{R2,R3}
   \   000002EE   2000               MOVS     R0,R4
   \   000002F0   3030               ADDS     R0,R0,#+48
   \   000002F2   C0C8               LDM      R0!,{R6,R7}
   \   000002F4   9F42               CMP      R7,R3
   \   000002F6   0CD8               BHI      ??main_27
   \   000002F8   01D3               BCC      ??main_28
   \   000002FA   9642               CMP      R6,R2
   \   000002FC   09D2               BCS      ??main_27
   \                     ??main_28:
   \   000002FE   AF20               MOVS     R0,#+175
   \   00000300   4000               LSLS     R0,R0,#+1        ;; #+350
   \   00000302   0021               MOVS     R1,#+0
   \   00000304   8019               ADDS     R0,R0,R6
   \   00000306   7941               ADCS     R1,R1,R7
   \   00000308   9942               CMP      R1,R3
   \   0000030A   BAD8               BHI      ??main_22
   \   0000030C   01D3               BCC      ??main_27
   \   0000030E   9042               CMP      R0,R2
   \   00000310   B7D2               BCS      ??main_22
   \                     ??main_27:
   \   00000312   0025               MOVS     R5,#+0
   \   00000314   FA20               MOVS     R0,#+250
   \   00000316   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   00000318   2900               MOVS     R1,R5
   \   0000031A   8019               ADDS     R0,R0,R6
   \   0000031C   7941               ADCS     R1,R1,R7
   \   0000031E   8B42               CMP      R3,R1
   \   00000320   A2D8               BHI      ??main_21
   \   00000322   01D3               BCC      ??main_29
   \   00000324   8242               CMP      R2,R0
   \   00000326   9FD2               BCS      ??main_21
   \                     ??main_29:
   \   00000328   0120               MOVS     R0,#+1
   \   0000032A   98E7               B        ??main_20
   \                     ??main_0:
   \   0000032C   ........           DC32     DateTime
   \   00000330   ........           DC32     RF_Status
   \   00000334   00F4FFFF           DC32     0xfffff400
   \   00000338   34F4FFFF           DC32     0xfffff434
   \   0000033C   44FDFFFF           DC32     0xfffffd44
   \   00000340   ........           DC32     sUsb
   \   00000344   ........           DC32     gProg
   \   00000348   FFFFEF00           DC32     0xefffff
   \   0000034C   E6D70000           DC32     0xd7e6
   \   00000350   ........           DC32     RF_Status + 13
   \   00000354   33333333           DC32     0x33333333
   \   00000358   3333D33F           DC32     0x3fd33333
   \   0000035C   C3F5285C           DC32     0x5c28f5c3
   \   00000360   8FE28A40           DC32     0x408ae28f
   \   00000364   00006940           DC32     0x40690000
   \   00000368   00FF04C1           DC32     0xc104ff00
   \   0000036C   ........           DC32     RF_Status + 28
   \   00000370   ........           DC32     RF_Status + 12
   \   00000374   40A00000           DC32     0xa040
   \   00000378   ........           DC32     RF_Status + 14
   \   0000037C   DCD70000           DC32     0xd7dc
   \   00000380   DDD70000           DC32     0xd7dd
   \   00000384   DDD71300           DC32     0x13d7dd
   \   00000388   DCD71300           DC32     0x13d7dc
   \   0000038C   19060000           DC32     0x619
   \   00000390   ........           DC32     MainStage
   \   00000394   A10F0000           DC32     0xfa1
   \   00000398   ........           DC32     MenuLevel
   \   0000039C   ........           DC32     RF_Status + 15
   \   000003A0   40FDFFFF           DC32     0xfffffd40
   \   000003A4   3CF4FFFF           DC32     0xfffff43c
   \   000003A8   ........           DC32     VBUS_old
   2244              }
   2245             
   2246              
   2247          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     sUsb

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   3CF4FFFF           DC32     0xfffff43c

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     MenuLevel

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00F0FFFF           DC32     0xfffff000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   00F4FFFF           DC32     0xfffff400

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   60F4FFFF           DC32     0xfffff460

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   40FDFFFF           DC32     0xfffffd40

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     DateTime

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     gProg

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   70C60000           DC32     0xc670

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   00011300           DC32     0x130100

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   26BC0000           DC32     0xbc26

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   30BC0000           DC32     0xbc30

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     MainStage

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   AA8AFFFF           DC32     0xffff8aaa

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   10FCFFFF           DC32     0xfffffc10

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   C000FAFF           DC32     0xfffa00c0

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   C400FAFF           DC32     0xfffa00c4

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   01C00C00           DC32     0xcc001

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   20F1FFFF           DC32     0xfffff120

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   28F1FFFF           DC32     0xfffff128

   \                                 In section .rodata, align 4
   \                     `?<Constant "Wyladowana">`:
   \   00000000   57796C61646F       DC8 "Wyladowana"
   \              77616E6100  
   \   0000000B   00                 DC8 0
   \   0000000C   626174657269       DC8 "bateria"
   \              6100        
   \   00000014   537072617764       DC8 "Sprawdz"
   \              7A00        
   \   0000001C   6C6973746520       DC8 "liste wezlow"
   \              77657A6C6F77
   \              00          
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "
   2248          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     AT91F_AIC_ConfigureIt            24
     AT91F_AIC_EnableIt                0
     AT91F_LCD_Init                    8
     AT91F_PIO_CfgInput                0
     AT91F_PIO_CfgOutput               0
     AT91F_PIO_CfgPullup               0
     AT91F_PIO_GetInterruptStatus      0
     AT91F_PIO_InterruptEnable         0
     AT91F_PMC_EnablePeriphClock       0
     AT91F_WDTRestart                  0
     AlarmExecute                     24
     CBK_Init                         24
     CBK_NewRequest                    8
     CBK_Resume                        8
     Delay                             8
     ForwardUSB2Serial                24
     ISR_Driver                        8
     ISR_VBus                         24
     InitFramework                    24
     RamToFlash                       24
     TestHendel                        8
     TestInit                         24
     ThermostatsExecute               24
     ThermostatsTimeChartExecute      24
     Timer_10ms                        8
     Timer_10ms_Setup                  0
     Timer_10us                        0
     Timer_10us_Setup                  0
     Timer_1h                          8
     Timer_1min                        8
     Timer_1ms                        16
     Timer_1ms_Setup                   0
     Timer_1s                         40
     TimetableExecute                 32
     USB_Attach                        8
     USB_Connect                       8
     USB_Disconnect                    8
     USB_GetDriverID                   0
     USB_GetDriverInterface            0
     USB_GetState                      0
     USB_Handler                       8
     main                             24
     watchdogEnable                    8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     identyfikacja                   8
     system                          8
     AT91F_AIC_ConfigureIt          44
     AT91F_AIC_EnableIt             12
     AT91F_PIO_CfgOutput             6
     AT91F_PIO_CfgInput              6
     AT91F_PIO_CfgPullup             8
     AT91F_PIO_InterruptEnable       4
     AT91F_PIO_GetInterruptStatus    4
     AT91F_PMC_EnablePeriphClock     4
     AT91F_WDTRestart               12
     AT91F_LCD_Init                164
     USB_GetDriverInterface          6
     USB_GetDriverID                 6
     USB_Handler                    18
     USB_Attach                     18
     USB_Connect                    18
     USB_Disconnect                 18
     USB_GetState                   10
     APC                             1
     g_czas_petli                    1
     komunikacja_ok                  4
     rej_prog                       40
     LifeCouter                      4
     LifeCouterMax                   4
     USB_busy                        1
     advY                            4
     advX                            4
     g_leng                          4
     g_level                         1
     g_Message                       4
     g_info                          4
     NET                           400
     LightLCD_OFF_Counter            1
     LightLCD_OFF_Counter2           1
     LightLCD_OFF_Curent             1
     tmp_i                           1
     licznik                         4
     licznik2                        4
     licznik3                        4
     memory                          4
     sss                             4
     int1                            4
     sSetup                          8
     dState                          4
     sCallbacks                     24
     sUsb                           24
     ISR_Driver                     14
     ISR_VBus                      160
     CBK_Init                       80
     CBK_Resume                     12
     CBK_NewRequest                 20
     ForwardUSB2Serial              96
     Delay                          18
     memory_read                     4
     InitFramework                 232
     Timer_10us                     12
     Timer_10us_Setup              104
     TimetableExecute              420
     ThermostatsTimeChartExecute   200
     LastTemp                       16
     ThermostatsExecute            356
     Hysteresis                      8
     AlarmExecute                  508
     Timer_1h                       12
     Timer_1min                     16
     XY_Tab                         44
     display_cykl                    1
     Timer_1s                      968
     Timer_10ms                    280
     Timer_10ms_Setup              132
     Counter                         4
     US0_Counter                     4
     US1_Counter                     4
     CounterForTimer10ms             1
     Timer_1ms                     468
     Timer_1ms_Setup               132
     RamToFlash                    212
     testcount                       4
     TestHendel                     44
     TestInit                      108
     string                         28
     watchdogEnable                 52
     DateTime                     1396
     FlashProgramReserveOfset        4
     g_Password_2                    8
     AdressModbus                    1
     g_Restart_Program               1
     AlarmScreenAction             160
     pEndpoints                    160
     tProgramTabSize                 4
     stop                            4
     Out                            36
     X_up_old                        4
     Y_up_old                        4
     X_down_old                      4
     Y_down_old                      4
     g_PC_Connected_timeout          1
     TimeCompil                     12
     DateCompil                     12
     main                          940
     ??DataTable1                    4
     ??DataTable2                    4
     ??DataTable4                    4
     ??DataTable6                    4
     ??DataTable7                    4
     ??DataTable8                    4
     ??DataTable11                   4
     ??DataTable12                   4
     ??DataTable13                   4
     ??DataTable14                   4
     ??DataTable15                   4
     ??DataTable16                   4
     ??DataTable17                   4
     ??DataTable18                   4
     ??DataTable19                   4
     ??DataTable20                   4
     ??DataTable21                   4
     ??DataTable22                   4
     ??DataTable23                   4
     ??DataTable24                   4
     ??DataTable25                   4
     ?<Constant "Wyladowana">       44
     ?<Constant "   ">               4
      Others                        68

 
   633 bytes in section .bss
 1 816 bytes in section .data
   112 bytes in section .rodata
 6 106 bytes in section Debug.txt
 
 5 680 bytes of CODE  memory (+ 426 bytes shared)
   112 bytes of CONST memory
 2 449 bytes of DATA  memory

Errors: none
Warnings: 30
