###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           20/Mar/2013  07:53:41 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\Framework\WizFiCommand.c                      #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\WizFiCommand.c" -D AT91SAM7S256 -D  #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -D _TESTER_ -lC "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\TESTER S300i\List\"                #
#                    --diag_suppress Pa082 -o "D:\Zeuron\Projekty\S300\S300-p #
#                    rogram v1.3 BETA- 14.03.2013\TESTER S300i\Obj\"          #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian little --cpu ARM7TDMI -e --fpu None     #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.3       #
#                    BETA- 14.03.2013\lib\AT91SAM7S256\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\cdc\" -I                           #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\core\" -I "D:\Zeuron\Projekty\S300\S300-progr #
#                    am v1.3 BETA- 14.03.2013\startup\" -I                    #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\" -I "D:\Zeuron\Projekty\S300\S300- #
#                    program v1.3 BETA- 14.03.2013\Framework\Configuration\"  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 5.0\ARM\INC\" --section .text=Debug.txt        #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\List\WizFiCommand.lst            #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\Obj\WizFiCommand.o               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\WizFiCommand.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 CEURON                                                   *//
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : WizFiCommacd.c                           *//
      7          //*  Opis                         : Obs³uga komend modu³u WizFi              *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 11.04.2012                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*//
     19          //****************************************************************************//
     20          
     21          
     22          
     23          #include "WizFi.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetNextTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetNextTx:
   \   00000000   8161               STR      R1,[R0, #+24]
   \   00000002   C261               STR      R2,[R0, #+28]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetTx:
   \   00000000   8160               STR      R1,[R0, #+8]
   \   00000002   C260               STR      R2,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsTxEmpty:
   \   00000000   C068               LDR      R0,[R0, #+12]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsNextTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsNextTxEmpty:
   \   00000000   C069               LDR      R0,[R0, #+28]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PDC_SendFrame(AT91PS_PDC, char *, unsigned int, char *, unsigned int)
   \                     AT91F_PDC_SendFrame:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   069F               LDR      R7,[SP, #+24]
   \   0000000A   ........           BL       AT91F_PDC_IsTxEmpty
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   0BD0               BEQ      ??AT91F_PDC_SendFrame_0
   \   00000012   3200               MOVS     R2,R6
   \   00000014   2900               MOVS     R1,R5
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       AT91F_PDC_SetTx
   \   0000001C   3A00               MOVS     R2,R7
   \   0000001E   0099               LDR      R1,[SP, #+0]
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       AT91F_PDC_SetNextTx
   \   00000026   0220               MOVS     R0,#+2
   \   00000028   0AE0               B        ??AT91F_PDC_SendFrame_1
   \                     ??AT91F_PDC_SendFrame_0:
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_PDC_IsNextTxEmpty
   \   00000030   0028               CMP      R0,#+0
   \   00000032   05D0               BEQ      ??AT91F_PDC_SendFrame_1
   \   00000034   3200               MOVS     R2,R6
   \   00000036   2900               MOVS     R1,R5
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   ........           BL       AT91F_PDC_SetNextTx
   \   0000003E   0120               MOVS     R0,#+1
   \                     ??AT91F_PDC_SendFrame_1:
   \   00000040   F8BC               POP      {R3-R7}
   \   00000042   02BC               POP      {R1}
   \   00000044   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_US_SendFrame(AT91PS_USART, unsigned char *, unsigned int, unsigned char *, unsigned int)
   \                     AT91F_US_SendFrame:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   029C               LDR      R4,[SP, #+8]
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0094               STR      R4,[SP, #+0]
   \   00000008   8024               MOVS     R4,#+128
   \   0000000A   6400               LSLS     R4,R4,#+1        ;; #+256
   \   0000000C   0019               ADDS     R0,R0,R4
   \   0000000E   ........           BL       AT91F_PDC_SendFrame
   \   00000012   02B0               ADD      SP,SP,#+8
   \   00000014   10BC               POP      {R4}
   \   00000016   02BC               POP      {R1}
   \   00000018   0847               BX       R1               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline

   
   ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\WizFi.h",171  Warning[Pe001]: 
          last line of file ends without a newline
     24          //#include "Framework.h"
     25          //#include "core/device.h"                                                        //aduje bibliotreki dla odpowiedniego procesora
     26          //#include "main_H.h" 
     27          #include "string.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __intrinsic __code __interwork char *strstr(char const *, char const *)
   \                     strstr:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   ........           BL       __iar_Strstr
   \   00000006   08BC               POP      {R3}
   \   00000008   02BC               POP      {R1}
   \   0000000A   0847               BX       R1               ;; return
     28          
     29          
     30          //Sta³e ------------------------------------------------------------------------

   \                                 In section .rodata, align 4
     31              const char AT[]="AT\r";                                                     //komenda WizFi 
   \                     AT:
   \   00000000   41540D00           DC8 "AT\015"

   \                                 In section .rodata, align 4
     32              const char ATI2[]="ATI2\r";                                                     //komenda WizFi 
   \                     ATI2:
   \   00000000   415449320D00       DC8 "ATI2\015"
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     33              const char AT_VER[]="AT+VER=?\r";
   \                     AT_VER:
   \   00000000   41542B564552       DC8 "AT+VER=?\015"
   \              3D3F0D00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     34              const char AT_XDUM0[]="AT+XDUM=0\r";                                                //komenda WizFi 
   \                     AT_XDUM0:
   \   00000000   41542B584455       DC8 "AT+XDUM=0\015"
   \              4D3D300D00  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
     35              const char AT_WD[]="AT+WD\r";                                               //komenda WizFi 
   \                     AT_WD:
   \   00000000   41542B57440D       DC8 "AT+WD\015"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     36              const char AT_NDHCP_0[]="AT+NDHCP=0\r";                                     //komenda WizFi   
   \                     AT_NDHCP_0:
   \   00000000   41542B4E4448       DC8 "AT+NDHCP=0\015"
   \              43503D300D00
     37              const char AT_NDHCP_1[]="AT+NDHCP=1\r";                                     //komenda WizFi 
   \                     AT_NDHCP_1:
   \   0000000C   41542B4E4448       DC8 "AT+NDHCP=1\015"
   \              43503D310D00

   \                                 In section .rodata, align 4
     38              const char AT_NSET[]="AT+NSET=";                                          //komenda WizFi  
   \                     AT_NSET:
   \   00000000   41542B4E5345       DC8 "AT+NSET="
   \              543D00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
     39              const char AT_WWEP1[]="AT+WWEP1=";                                          //komenda WizFi  
   \                     AT_WWEP1:
   \   00000000   41542B575745       DC8 "AT+WWEP1="
   \              50313D00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     40              const char AT_WWPA[]="AT+WWPA=";                                            //komenda WizFi  
   \                     AT_WWPA:
   \   00000000   41542B575750       DC8 "AT+WWPA="
   \              413D00      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
     41              const char AT_WA[]="AT+WA=";                                              //komenda WizFi  
   \                     AT_WA:
   \   00000000   41542B57413D       DC8 "AT+WA="
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     42              const char AT_DNSLOOKUP[]="AT+DNSLOOKUP=";                                              //komenda WizFi  
   \                     AT_DNSLOOKUP:
   \   00000000   41542B444E53       DC8 "AT+DNSLOOKUP="
   \              4C4F4F4B5550
   \              3D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     43              const char AT_NCTCP[]="AT+NCTCP=";                                              //komenda WizFi  
   \                     AT_NCTCP:
   \   00000000   41542B4E4354       DC8 "AT+NCTCP="
   \              43503D00    
   \   0000000A   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     44              const char AT_NCLOSE[]="AT+NCLOSE=";                                              //komenda WizFi  
   \                     AT_NCLOSE:
   \   00000000   41542B4E434C       DC8 "AT+NCLOSE="
   \              4F53453D00  
   \   0000000B   00                 DC8 0
   \   0000000C   5B434F4E4E45       DC8 "[CONNECT"
   \              435400      
   \   00000015   000000             DC8 0, 0, 0
   \   00000018   4E4F20434944       DC8 "NO CID]"
   \              5D00        
   \   00000020   5B4552524F52       DC8 "[ERROR"
   \              00          
   \   00000027   00                 DC8 0
   \   00000028   4E6F2076616C       DC8 "No valid Cids"
   \              696420436964
   \              7300        
   \   00000036   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     45              const char AT_NCLOSEALL[]="AT+NCLOSEALL\r";                                              //komenda WizFi  
   \                     AT_NCLOSEALL:
   \   00000000   41542B4E434C       DC8 "AT+NCLOSEALL\015"
   \              4F5345414C4C
   \              0D00        
   \   0000000E   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     46              const char AT_WS[]="AT+WS\r";
   \                     AT_WS:
   \   00000000   41542B57530D       DC8 "AT+WS\015"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
     47              const char AT_CID[]="AT+CID=?\r";
   \                     AT_CID:
   \   00000000   41542B434944       DC8 "AT+CID=?\015"
   \              3D3F0D00    
   \   0000000A   0000               DC8 0, 0
     48           //____________________________Koniec sta³ych ___________________________________
     49           
     50          
     51              extern unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
     52              
     53              
     54              
     55              extern char Variables[];    //zmienne
     56              extern char VariablesImpulse[];
     57              extern char VariablesNetTmp[];
     58              extern short int VariablesAnal[];    //zmienne
     59              extern _ProgramTab gProg;
     60              extern _MainStage  MainStage; 
     61              extern _DateTime DateTime;    
     62              extern _TransQuality TransQuality;
     63          
     64          
     65          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     66          void WizFiCommand_AT(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
     67          {
   \                     WizFiCommand_AT:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   1500               MOVS     R5,R2
   \   00000004   1C00               MOVS     R4,R3
     68             if (Net->WiFi.SSID[0]==0)
   \   00000006   AE22               MOVS     R2,#+174
   \   00000008   A25C               LDRB     R2,[R4, R2]
   \   0000000A   002A               CMP      R2,#+0
   \   0000000C   12D1               BNE      ??WizFiCommand_AT_0
     69             {
     70               Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000000E   3834               ADDS     R4,R4,#+56
   \   00000010   ....               LDR      R5,??DataTable16  ;; g_counter
   \   00000012   0CCD               LDM      R5!,{R2,R3}
   \   00000014   083D               SUBS     R5,R5,#+8
   \   00000016   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   8018               ADDS     R0,R0,R2
   \   0000001C   5941               ADCS     R1,R1,R3
   \   0000001E   03C4               STM      R4!,{R0,R1}
   \   00000020   083C               SUBS     R4,R4,#+8
     71               Net->Status.FreezTime=g_counter+1000;
   \   00000022   0834               ADDS     R4,R4,#+8
   \   00000024   0CCD               LDM      R5!,{R2,R3}
   \   00000026   FA20               MOVS     R0,#+250
   \   00000028   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   8018               ADDS     R0,R0,R2
   \   0000002E   5941               ADCS     R1,R1,R3
   \   00000030   03C4               STM      R4!,{R0,R1}
   \   00000032   26E0               B        ??WizFiCommand_AT_1
     72             }else{
     73               for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0; 
   \                     ??WizFiCommand_AT_0:
   \   00000034   0022               MOVS     R2,#+0
   \   00000036   1300               MOVS     R3,R2
   \   00000038   04E0               B        ??WizFiCommand_AT_2
   \                     ??WizFiCommand_AT_3:
   \   0000003A   1600               MOVS     R6,R2
   \   0000003C   C654               STRB     R6,[R0, R3]
   \   0000003E   5B1C               ADDS     R3,R3,#+1
   \   00000040   1B04               LSLS     R3,R3,#+16
   \   00000042   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_2:
   \   00000044   9126               MOVS     R6,#+145
   \   00000046   B600               LSLS     R6,R6,#+2        ;; #+580
   \   00000048   B342               CMP      R3,R6
   \   0000004A   F6DB               BLT      ??WizFiCommand_AT_3
     74               Buff_TX[0]='A';
   \   0000004C   4120               MOVS     R0,#+65
   \   0000004E   0870               STRB     R0,[R1, #+0]
     75               Buff_TX[1]='T';
   \   00000050   5420               MOVS     R0,#+84
   \   00000052   4870               STRB     R0,[R1, #+1]
     76               Buff_TX[2]=0x0d;
   \   00000054   0D20               MOVS     R0,#+13
   \   00000056   8870               STRB     R0,[R1, #+2]
     77               Buff_TX[3]=0x0A;
   \   00000058   0A20               MOVS     R0,#+10
   \   0000005A   C870               STRB     R0,[R1, #+3]
     78               
     79               Net->Status.CurrentOrder=WizFi_AT;
   \   0000005C   0120               MOVS     R0,#+1
   \   0000005E   A070               STRB     R0,[R4, #+2]
     80          
     81               AT91F_US_SendFrame(USART,Buff_TX,4,0, 0);                        //Wysyla ramke 
                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000060   82B0               SUB      SP,SP,#+8
   \   00000062   1000               MOVS     R0,R2
   \   00000064   0090               STR      R0,[SP, #+0]
   \   00000066   0300               MOVS     R3,R0
   \   00000068   0422               MOVS     R2,#+4
   \   0000006A   2800               MOVS     R0,R5
   \   0000006C   ........           BL       AT91F_US_SendFrame
   \   00000070   02B0               ADD      SP,SP,#+8
     82               Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000072   3834               ADDS     R4,R4,#+56
   \   00000074   ....               LDR      R0,??DataTable16  ;; g_counter
   \   00000076   0CC8               LDM      R0!,{R2,R3}
   \   00000078   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   0000007A   0021               MOVS     R1,#+0
   \   0000007C   8018               ADDS     R0,R0,R2
   \   0000007E   5941               ADCS     R1,R1,R3
   \   00000080   03C4               STM      R4!,{R0,R1}
     83             }
     84          }
   \                     ??WizFiCommand_AT_1:
   \   00000082   70BC               POP      {R4-R6}
   \   00000084   01BC               POP      {R0}
   \   00000086   0047               BX       R0               ;; return
     85          
     86          
     87          
     88          

   \                                 In section Debug.txt, align 4, keep-with-next
     89          char WizFiResponseCommand_AT(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
     90          {
   \                     WizFiResponseCommand_AT:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
     91             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
     92             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_1
     93                  {
     94                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
     95                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_2
   \                     ??WizFiResponseCommand_AT_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_3
     96                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   ....               LDR      R0,??DataTable16  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
     97                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
     98                  }
     99             return odp;
   \                     ??WizFiResponseCommand_AT_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    100          }
    101          
    102          
    103          
    104          
    105          
    106          
    107          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    108          void WizFiCommand_AT_VER(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    109          {
   \                     WizFiCommand_AT_VER:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    110             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_VER_0
   \                     ??WizFiCommand_AT_VER_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_VER_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_VER_1
    111             Net->Status.CurrentOrder=WizFi_AT_VER;     
   \   00000020   0221               MOVS     R1,#+2
   \   00000022   A170               STRB     R1,[R4, #+2]
    112             AT91F_US_SendFrame(USART,(char*)AT_VER,sizeof(AT_VER)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   1100               MOVS     R1,R2
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0922               MOVS     R2,#+9
   \   0000002E   0749               LDR      R1,??WizFiCommand_AT_VER_2  ;; AT_VER
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    113             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000036   3834               ADDS     R4,R4,#+56
   \   00000038   ....               LDR      R0,??DataTable16  ;; g_counter
   \   0000003A   0CC8               LDM      R0!,{R2,R3}
   \   0000003C   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   8018               ADDS     R0,R0,R2
   \   00000042   5941               ADCS     R1,R1,R3
   \   00000044   03C4               STM      R4!,{R0,R1}
    114          }
   \   00000046   38BC               POP      {R3-R5}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_VER_2:
   \   0000004C   ........           DC32     AT_VER
    115          
    116          
    117          
    118          

   \                                 In section Debug.txt, align 4, keep-with-next
    119          char WizFiResponseCommand_AT_VER(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    120          {
   \                     WizFiResponseCommand_AT_VER:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    121             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    122             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_VER_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_VER_1
    123                  {
    124                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    125                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_VER_2
   \                     ??WizFiResponseCommand_AT_VER_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_VER_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_VER_3
    126                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   ....               LDR      R0,??DataTable16  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    127                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    128                  }
    129             return odp;
   \                     ??WizFiResponseCommand_AT_VER_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_VER_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    130          }
    131          
    132          
    133          
    134          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    135          void WizFiCommand_ATI2(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    136          {
   \                     WizFiCommand_ATI2:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    137             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_ATI2_0
   \                     ??WizFiCommand_ATI2_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_ATI2_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_ATI2_1
    138             Net->Status.CurrentOrder=WizFi_ATI2;     
   \   00000020   0321               MOVS     R1,#+3
   \   00000022   A170               STRB     R1,[R4, #+2]
    139             AT91F_US_SendFrame(USART,(char*)ATI2,sizeof(ATI2)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   1100               MOVS     R1,R2
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0522               MOVS     R2,#+5
   \   0000002E   0749               LDR      R1,??WizFiCommand_ATI2_2  ;; ATI2
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    140             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000036   3834               ADDS     R4,R4,#+56
   \   00000038   ....               LDR      R0,??DataTable16  ;; g_counter
   \   0000003A   0CC8               LDM      R0!,{R2,R3}
   \   0000003C   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   8018               ADDS     R0,R0,R2
   \   00000042   5941               ADCS     R1,R1,R3
   \   00000044   03C4               STM      R4!,{R0,R1}
    141          }
   \   00000046   38BC               POP      {R3-R5}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
   \                     ??WizFiCommand_ATI2_2:
   \   0000004C   ........           DC32     ATI2
    142          
    143          
    144          
    145          

   \                                 In section Debug.txt, align 4, keep-with-next
    146          char WizFiResponseCommand_ATI2(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    147          {
   \                     WizFiResponseCommand_ATI2:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    148             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    149             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_ATI2_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_ATI2_1
    150                  {
    151                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    152                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_ATI2_2
   \                     ??WizFiResponseCommand_ATI2_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_ATI2_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_ATI2_3
    153                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   ....               LDR      R0,??DataTable16  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    154                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    155                  }
    156             return odp;
   \                     ??WizFiResponseCommand_ATI2_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_ATI2_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    157          }
    158          
    159          
    160          
    161          
    162          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    163          void WizFiCommand_AT_XDUM0(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    164          {
   \                     WizFiCommand_AT_XDUM0:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    165             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_XDUM0_0
   \                     ??WizFiCommand_AT_XDUM0_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_XDUM0_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_XDUM0_1
    166             Net->Status.CurrentOrder=WizFi_AT_XDUM0;     
   \   00000020   0421               MOVS     R1,#+4
   \   00000022   A170               STRB     R1,[R4, #+2]
    167             AT91F_US_SendFrame(USART,(char*)AT_XDUM0,sizeof(AT_XDUM0)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   1100               MOVS     R1,R2
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0A22               MOVS     R2,#+10
   \   0000002E   0749               LDR      R1,??WizFiCommand_AT_XDUM0_2  ;; AT_XDUM0
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    168             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000036   3834               ADDS     R4,R4,#+56
   \   00000038   ....               LDR      R0,??DataTable16  ;; g_counter
   \   0000003A   0CC8               LDM      R0!,{R2,R3}
   \   0000003C   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   8018               ADDS     R0,R0,R2
   \   00000042   5941               ADCS     R1,R1,R3
   \   00000044   03C4               STM      R4!,{R0,R1}
    169             
    170          }
   \   00000046   38BC               POP      {R3-R5}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_XDUM0_2:
   \   0000004C   ........           DC32     AT_XDUM0
    171          

   \                                 In section Debug.txt, align 4, keep-with-next
    172          char WizFiResponseCommand_AT_XDUM0(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    173          {
   \                     WizFiResponseCommand_AT_XDUM0:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    174             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    175             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_XDUM0_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_XDUM0_1
    176                  {
    177                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    178                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_XDUM0_2
   \                     ??WizFiResponseCommand_AT_XDUM0_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_XDUM0_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_XDUM0_3
    179                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   ....               LDR      R0,??DataTable16  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   ....               LDR      R0,??DataTable17  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    180                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    181                  }
    182             return odp;
   \                     ??WizFiResponseCommand_AT_XDUM0_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_XDUM0_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    183          }
    184          
    185          
    186          
    187          
    188          
    189          
    190          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    191          void WizFiCommand_AT_NCLOSEALL(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    192          {
   \                     WizFiCommand_AT_NCLOSEALL:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    193             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0025               MOVS     R5,#+0
   \   0000000A   2A00               MOVS     R2,R5
   \   0000000C   04E0               B        ??WizFiCommand_AT_NCLOSEALL_0
   \                     ??WizFiCommand_AT_NCLOSEALL_1:
   \   0000000E   2B00               MOVS     R3,R5
   \   00000010   8B54               STRB     R3,[R1, R2]
   \   00000012   521C               ADDS     R2,R2,#+1
   \   00000014   1204               LSLS     R2,R2,#+16
   \   00000016   1214               ASRS     R2,R2,#+16
   \                     ??WizFiCommand_AT_NCLOSEALL_0:
   \   00000018   9123               MOVS     R3,#+145
   \   0000001A   9B00               LSLS     R3,R3,#+2        ;; #+580
   \   0000001C   9A42               CMP      R2,R3
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_NCLOSEALL_1
    194             Net->Status.CurrentOrder=WizFi_AT_NCLOSEALL;     
   \   00000020   0E21               MOVS     R1,#+14
   \   00000022   A170               STRB     R1,[R4, #+2]
    195             AT91F_US_SendFrame(USART,(char*)AT_NCLOSEALL,sizeof(AT_NCLOSEALL)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   2900               MOVS     R1,R5
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0D22               MOVS     R2,#+13
   \   0000002E   0449               LDR      R1,??WizFiCommand_AT_NCLOSEALL_2  ;; AT_NCLOSEALL
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    196             //Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
    197             Net->Status.HostLink=DISCONNECTED; 
   \   00000036   6570               STRB     R5,[R4, #+1]
    198          }
   \   00000038   38BC               POP      {R3-R5}
   \   0000003A   01BC               POP      {R0}
   \   0000003C   0047               BX       R0               ;; return
   \   0000003E   C046               Nop      
   \                     ??WizFiCommand_AT_NCLOSEALL_2:
   \   00000040   ........           DC32     AT_NCLOSEALL
    199          

   \                                 In section Debug.txt, align 4, keep-with-next
    200          char WizFiResponseCommand_AT_NCLOSEALL0(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    201          {
   \                     WizFiResponseCommand_AT_NCLOSEALL0:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    202             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    203             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   0EA1               ADR      R1,??WizFiResponseCommand_AT_NCLOSEALL0_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   13D0               BEQ      ??WizFiResponseCommand_AT_NCLOSEALL0_1
    204                  {
    205                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    206                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NCLOSEALL0_2
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NCLOSEALL0_3
    207                    Net->Status.Timeout=g_counter + FREEZ_TIME;    //przed³u¿enie /restart timeoutu
   \   0000002A   2200               MOVS     R2,R4
   \   0000002C   3832               ADDS     R2,R2,#+56
   \   0000002E   ....               LDR      R0,??DataTable18  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0023               MOVS     R3,#+0
   \   00000034   3230               ADDS     R0,R0,#+50
   \   00000036   5941               ADCS     R1,R1,R3
   \   00000038   03C2               STM      R2!,{R0,R1}
    208                     Net->Status.HostLink=DISCONNECTED;
   \   0000003A   6570               STRB     R5,[R4, #+1]
    209                  }
    210             return odp;
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_1:
   \   0000003C   3000               MOVS     R0,R6
   \   0000003E   F8BC               POP      {R3-R7}
   \   00000040   02BC               POP      {R1}
   \   00000042   0847               BX       R1               ;; return
   \                     ??WizFiResponseCommand_AT_NCLOSEALL0_0:
   \   00000044   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
    211          }
    212          
    213          
    214           
    215          
    216          
    217          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    218          void WizFiCommand_AT_WD(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    219          {
   \                     WizFiCommand_AT_WD:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    220             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_WD_0
   \                     ??WizFiCommand_AT_WD_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WD_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_WD_1
    221             Net->Status.CurrentOrder=WizFi_AT_WD;     
   \   00000020   0521               MOVS     R1,#+5
   \   00000022   A170               STRB     R1,[R4, #+2]
    222             AT91F_US_SendFrame(USART,(char*)AT_WD,sizeof(AT_WD)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000024   82B0               SUB      SP,SP,#+8
   \   00000026   1100               MOVS     R1,R2
   \   00000028   0091               STR      R1,[SP, #+0]
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   0622               MOVS     R2,#+6
   \   0000002E   0749               LDR      R1,??WizFiCommand_AT_WD_2  ;; AT_WD
   \   00000030   ........           BL       AT91F_US_SendFrame
   \   00000034   02B0               ADD      SP,SP,#+8
    223             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000036   3834               ADDS     R4,R4,#+56
   \   00000038   0548               LDR      R0,??WizFiCommand_AT_WD_2+0x4  ;; g_counter
   \   0000003A   0CC8               LDM      R0!,{R2,R3}
   \   0000003C   0548               LDR      R0,??WizFiCommand_AT_WD_2+0x8  ;; 0x2710
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   8018               ADDS     R0,R0,R2
   \   00000042   5941               ADCS     R1,R1,R3
   \   00000044   03C4               STM      R4!,{R0,R1}
    224          }
   \   00000046   38BC               POP      {R3-R5}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WD_2:
   \   0000004C   ........           DC32     AT_WD
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    225          

   \                                 In section Debug.txt, align 4, keep-with-next
    226          char WizFiResponseCommand_AT_WD(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    227          {
   \                     WizFiResponseCommand_AT_WD:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    228             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    229             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_WD_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_WD_1
    230                  {
    231                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    232                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WD_2
   \                     ??WizFiResponseCommand_AT_WD_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WD_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WD_3
    233                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_WD_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_WD_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    234                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    235                  }
    236             return odp;
   \                     ??WizFiResponseCommand_AT_WD_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WD_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    237          }
    238          
    239          
    240          
    241          
    242          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    243          void WizFiCommand_AT_NDHCP(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    244          {      
   \                     WizFiCommand_AT_NDHCP:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0100               MOVS     R1,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    245             for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_NDHCP_0
   \                     ??WizFiCommand_AT_NDHCP_1:
   \   0000000E   1500               MOVS     R5,R2
   \   00000010   CD54               STRB     R5,[R1, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_NDHCP_0:
   \   00000018   9125               MOVS     R5,#+145
   \   0000001A   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   0000001C   AB42               CMP      R3,R5
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_NDHCP_1
    246             Net->Status.CurrentOrder=WizFi_AT_NDHCP;  
   \   00000020   0721               MOVS     R1,#+7
   \   00000022   A170               STRB     R1,[R4, #+2]
    247             if (Net->WiFi.IpNotAuto)
   \   00000024   3834               ADDS     R4,R4,#+56
   \   00000026   617E               LDRB     R1,[R4, #+25]
   \   00000028   0029               CMP      R1,#+0
   \   0000002A   82B0               SUB      SP,SP,#+8
   \   0000002C   08D0               BEQ      ??WizFiCommand_AT_NDHCP_2
    248             {  
    249                 AT91F_US_SendFrame(USART,(char*)AT_NDHCP_0,sizeof(AT_NDHCP_0)-1,0, 0);                        //Wysyla ramke  
                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000002E   1100               MOVS     R1,R2
   \   00000030   0091               STR      R1,[SP, #+0]
   \   00000032   0B00               MOVS     R3,R1
   \   00000034   0B22               MOVS     R2,#+11
   \   00000036   0B49               LDR      R1,??WizFiCommand_AT_NDHCP_3  ;; AT_NDHCP_0
   \   00000038   ........           BL       AT91F_US_SendFrame
   \   0000003C   02B0               ADD      SP,SP,#+8
   \   0000003E   07E0               B        ??WizFiCommand_AT_NDHCP_4
    250             }else{ 
    251                 AT91F_US_SendFrame(USART,(char*)AT_NDHCP_1,sizeof(AT_NDHCP_1)-1,0, 0);                        //Wysyla ramke  
                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??WizFiCommand_AT_NDHCP_2:
   \   00000040   1100               MOVS     R1,R2
   \   00000042   0091               STR      R1,[SP, #+0]
   \   00000044   0B00               MOVS     R3,R1
   \   00000046   0B22               MOVS     R2,#+11
   \   00000048   0749               LDR      R1,??WizFiCommand_AT_NDHCP_3+0x4  ;; AT_NDHCP_0 + 12
   \   0000004A   ........           BL       AT91F_US_SendFrame
   \   0000004E   02B0               ADD      SP,SP,#+8
    252             }
    253             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu 
   \                     ??WizFiCommand_AT_NDHCP_4:
   \   00000050   0648               LDR      R0,??WizFiCommand_AT_NDHCP_3+0x8  ;; g_counter
   \   00000052   0CC8               LDM      R0!,{R2,R3}
   \   00000054   0648               LDR      R0,??WizFiCommand_AT_NDHCP_3+0xC  ;; 0x2710
   \   00000056   0021               MOVS     R1,#+0
   \   00000058   8018               ADDS     R0,R0,R2
   \   0000005A   5941               ADCS     R1,R1,R3
   \   0000005C   03C4               STM      R4!,{R0,R1}
    254          }
   \   0000005E   38BC               POP      {R3-R5}
   \   00000060   01BC               POP      {R0}
   \   00000062   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_NDHCP_3:
   \   00000064   ........           DC32     AT_NDHCP_0
   \   00000068   ........           DC32     AT_NDHCP_0 + 12
   \   0000006C   ........           DC32     g_counter
   \   00000070   10270000           DC32     0x2710
    255          

   \                                 In section Debug.txt, align 4, keep-with-next
    256          char WizFiResponseCommand_AT_NDHCP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    257          {
   \                     WizFiResponseCommand_AT_NDHCP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    258             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    259             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_NDHCP_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_NDHCP_1
    260                  {
    261                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    262                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NDHCP_2
   \                     ??WizFiResponseCommand_AT_NDHCP_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NDHCP_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NDHCP_3
    263                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_NDHCP_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_NDHCP_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    264                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    265                  }
    266             return odp;
   \                     ??WizFiResponseCommand_AT_NDHCP_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_NDHCP_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    267          }
    268          
    269          
    270          
    271          
    272          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    273          void WizFiCommand_AT_NSET(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    274          {      
   \                     WizFiCommand_AT_NSET:
   \   00000000   F4B5               PUSH     {R2,R4-R7,LR}
   \   00000002   1C00               MOVS     R4,R3
    275                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   1300               MOVS     R3,R2
   \   00000008   04E0               B        ??WizFiCommand_AT_NSET_0
   \                     ??WizFiCommand_AT_NSET_1:
   \   0000000A   1500               MOVS     R5,R2
   \   0000000C   C554               STRB     R5,[R0, R3]
   \   0000000E   5B1C               ADDS     R3,R3,#+1
   \   00000010   1B04               LSLS     R3,R3,#+16
   \   00000012   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_NSET_0:
   \   00000014   9125               MOVS     R5,#+145
   \   00000016   AD00               LSLS     R5,R5,#+2        ;; #+580
   \   00000018   AB42               CMP      R3,R5
   \   0000001A   F6DB               BLT      ??WizFiCommand_AT_NSET_1
    276                     Net->Status.CurrentOrder=WizFi_AT_NSET;
   \   0000001C   0620               MOVS     R0,#+6
   \   0000001E   A070               STRB     R0,[R4, #+2]
    277                     char BTS=0;
   \   00000020   1000               MOVS     R0,R2
    278                     for (char i=0; i<sizeof(AT_NSET); i++)  {Buff_TX[i]=AT_NSET[i];   BTS++;}
   \   00000022   1300               MOVS     R3,R2
   \   00000024   07E0               B        ??WizFiCommand_AT_NSET_2
   \                     ??WizFiCommand_AT_NSET_3:
   \   00000026   1D00               MOVS     R5,R3
   \   00000028   374E               LDR      R6,??WizFiCommand_AT_NSET_4  ;; AT_NSET
   \   0000002A   765D               LDRB     R6,[R6, R5]
   \   0000002C   4E55               STRB     R6,[R1, R5]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   0006               LSLS     R0,R0,#+24
   \   00000032   000E               LSRS     R0,R0,#+24
   \   00000034   5B1C               ADDS     R3,R3,#+1
   \                     ??WizFiCommand_AT_NSET_2:
   \   00000036   092B               CMP      R3,#+9
   \   00000038   F5D3               BCC      ??WizFiCommand_AT_NSET_3
    279                     BTS--;
   \   0000003A   401E               SUBS     R0,R0,#+1
   \   0000003C   0006               LSLS     R0,R0,#+24
   \   0000003E   000E               LSRS     R0,R0,#+24
    280                     char ZN=0;
    281                     ZN=0; while ((Net->WiFi.IP[ZN]>0) && (ZN<=14)) {Buff_TX[BTS+ZN]=Net->WiFi.IP[ZN]; ZN++;}
   \   00000040   1300               MOVS     R3,R2
   \   00000042   07E0               B        ??WizFiCommand_AT_NSET_5
   \                     ??WizFiCommand_AT_NSET_6:
   \   00000044   0700               MOVS     R7,R0
   \   00000046   BE19               ADDS     R6,R7,R6
   \   00000048   5435               ADDS     R5,R5,#+84
   \   0000004A   2D78               LDRB     R5,[R5, #+0]
   \   0000004C   8D55               STRB     R5,[R1, R6]
   \   0000004E   5B1C               ADDS     R3,R3,#+1
   \   00000050   1B06               LSLS     R3,R3,#+24
   \   00000052   1B0E               LSRS     R3,R3,#+24
   \                     ??WizFiCommand_AT_NSET_5:
   \   00000054   1E00               MOVS     R6,R3
   \   00000056   A519               ADDS     R5,R4,R6
   \   00000058   5427               MOVS     R7,#+84
   \   0000005A   EF5D               LDRB     R7,[R5, R7]
   \   0000005C   002F               CMP      R7,#+0
   \   0000005E   02D0               BEQ      ??WizFiCommand_AT_NSET_7
   \   00000060   1F00               MOVS     R7,R3
   \   00000062   0F2F               CMP      R7,#+15
   \   00000064   EED3               BCC      ??WizFiCommand_AT_NSET_6
    282                     BTS+=ZN;
   \                     ??WizFiCommand_AT_NSET_7:
   \   00000066   C018               ADDS     R0,R0,R3
   \   00000068   0006               LSLS     R0,R0,#+24
   \   0000006A   000E               LSRS     R0,R0,#+24
   \   0000006C   0300               MOVS     R3,R0
   \   0000006E   2C25               MOVS     R5,#+44
   \   00000070   CD54               STRB     R5,[R1, R3]
   \   00000072   401C               ADDS     R0,R0,#+1
   \   00000074   0006               LSLS     R0,R0,#+24
   \   00000076   000E               LSRS     R0,R0,#+24
    283                     Buff_TX[BTS++]=',';
    284                     ZN=0; while ((Net->WiFi.Mask[ZN]>0) && (ZN<=14)) {Buff_TX[BTS+ZN]=Net->WiFi.Mask[ZN]; ZN++;}
   \   00000078   1300               MOVS     R3,R2
   \   0000007A   07E0               B        ??WizFiCommand_AT_NSET_8
   \                     ??WizFiCommand_AT_NSET_9:
   \   0000007C   0700               MOVS     R7,R0
   \   0000007E   BE19               ADDS     R6,R7,R6
   \   00000080   6335               ADDS     R5,R5,#+99
   \   00000082   2D78               LDRB     R5,[R5, #+0]
   \   00000084   8D55               STRB     R5,[R1, R6]
   \   00000086   5B1C               ADDS     R3,R3,#+1
   \   00000088   1B06               LSLS     R3,R3,#+24
   \   0000008A   1B0E               LSRS     R3,R3,#+24
   \                     ??WizFiCommand_AT_NSET_8:
   \   0000008C   1E00               MOVS     R6,R3
   \   0000008E   A519               ADDS     R5,R4,R6
   \   00000090   6327               MOVS     R7,#+99
   \   00000092   EF5D               LDRB     R7,[R5, R7]
   \   00000094   002F               CMP      R7,#+0
   \   00000096   02D0               BEQ      ??WizFiCommand_AT_NSET_10
   \   00000098   1F00               MOVS     R7,R3
   \   0000009A   0F2F               CMP      R7,#+15
   \   0000009C   EED3               BCC      ??WizFiCommand_AT_NSET_9
    285                     BTS+=ZN;
   \                     ??WizFiCommand_AT_NSET_10:
   \   0000009E   C018               ADDS     R0,R0,R3
   \   000000A0   0006               LSLS     R0,R0,#+24
   \   000000A2   000E               LSRS     R0,R0,#+24
    286                     Buff_TX[BTS++]=',';
   \   000000A4   0300               MOVS     R3,R0
   \   000000A6   2C25               MOVS     R5,#+44
   \   000000A8   CD54               STRB     R5,[R1, R3]
   \   000000AA   401C               ADDS     R0,R0,#+1
   \   000000AC   0006               LSLS     R0,R0,#+24
   \   000000AE   000E               LSRS     R0,R0,#+24
    287                     ZN=0; while ((Net->WiFi.Gate[ZN]>0) && (ZN<=14)) {Buff_TX[BTS+ZN]=Net->WiFi.Gate[ZN]; ZN++;}
   \   000000B0   07E0               B        ??WizFiCommand_AT_NSET_11
   \                     ??WizFiCommand_AT_NSET_12:
   \   000000B2   0600               MOVS     R6,R0
   \   000000B4   7519               ADDS     R5,R6,R5
   \   000000B6   7233               ADDS     R3,R3,#+114
   \   000000B8   1B78               LDRB     R3,[R3, #+0]
   \   000000BA   4B55               STRB     R3,[R1, R5]
   \   000000BC   521C               ADDS     R2,R2,#+1
   \   000000BE   1206               LSLS     R2,R2,#+24
   \   000000C0   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_NSET_11:
   \   000000C2   1500               MOVS     R5,R2
   \   000000C4   6319               ADDS     R3,R4,R5
   \   000000C6   7226               MOVS     R6,#+114
   \   000000C8   9E5D               LDRB     R6,[R3, R6]
   \   000000CA   002E               CMP      R6,#+0
   \   000000CC   02D0               BEQ      ??WizFiCommand_AT_NSET_13
   \   000000CE   1600               MOVS     R6,R2
   \   000000D0   0F2E               CMP      R6,#+15
   \   000000D2   EED3               BCC      ??WizFiCommand_AT_NSET_12
    288                     
    289                     Buff_TX[BTS+ZN++]=0x0d;
   \                     ??WizFiCommand_AT_NSET_13:
   \   000000D4   4319               ADDS     R3,R0,R5
   \   000000D6   0D25               MOVS     R5,#+13
   \   000000D8   CD54               STRB     R5,[R1, R3]
    290                     AT91F_US_SendFrame(USART,Buff_TX,BTS+ZN,0, 0);                        //Wysyla ramke  
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000000DA   82B0               SUB      SP,SP,#+8
   \   000000DC   0023               MOVS     R3,#+0
   \   000000DE   0093               STR      R3,[SP, #+0]
   \   000000E0   521C               ADDS     R2,R2,#+1
   \   000000E2   1206               LSLS     R2,R2,#+24
   \   000000E4   120E               LSRS     R2,R2,#+24
   \   000000E6   8218               ADDS     R2,R0,R2
   \   000000E8   0298               LDR      R0,[SP, #+8]
   \   000000EA   ........           BL       AT91F_US_SendFrame
   \   000000EE   02B0               ADD      SP,SP,#+8
    291                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   000000F0   3834               ADDS     R4,R4,#+56
   \   000000F2   0648               LDR      R0,??WizFiCommand_AT_NSET_4+0x4  ;; g_counter
   \   000000F4   0CC8               LDM      R0!,{R2,R3}
   \   000000F6   0648               LDR      R0,??WizFiCommand_AT_NSET_4+0x8  ;; 0x2710
   \   000000F8   0021               MOVS     R1,#+0
   \   000000FA   8018               ADDS     R0,R0,R2
   \   000000FC   5941               ADCS     R1,R1,R3
   \   000000FE   03C4               STM      R4!,{R0,R1}
    292          }
   \   00000100   F8BC               POP      {R3-R7}
   \   00000102   01BC               POP      {R0}
   \   00000104   0047               BX       R0               ;; return
   \   00000106   C046               Nop      
   \                     ??WizFiCommand_AT_NSET_4:
   \   00000108   ........           DC32     AT_NSET
   \   0000010C   ........           DC32     g_counter
   \   00000110   10270000           DC32     0x2710
    293          

   \                                 In section Debug.txt, align 4, keep-with-next
    294          char WizFiResponseCommand_AT_NSET(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    295          {
   \                     WizFiResponseCommand_AT_NSET:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    296             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    297             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_NSET_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_NSET_1
    298                  {
    299                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    300                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_NSET_2
   \                     ??WizFiResponseCommand_AT_NSET_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NSET_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_NSET_3
    301                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_NSET_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_NSET_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    302                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    303                  }
    304             return odp;
   \                     ??WizFiResponseCommand_AT_NSET_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_NSET_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    305          }
    306          
    307          
    308          
    309          
    310          
    311          
    312          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    313          void WizFiCommand_AT_WWEP1(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    314          {
   \                     WizFiCommand_AT_WWEP1:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    315                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_WWEP1_0
   \                     ??WizFiCommand_AT_WWEP1_1:
   \   0000000E   1600               MOVS     R6,R2
   \   00000010   EE54               STRB     R6,[R5, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WWEP1_0:
   \   00000018   9126               MOVS     R6,#+145
   \   0000001A   B600               LSLS     R6,R6,#+2        ;; #+580
   \   0000001C   B342               CMP      R3,R6
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_WWEP1_1
    316                     Net->Status.CurrentOrder=WizFi_AT_WWEP1;
   \   00000020   0823               MOVS     R3,#+8
   \   00000022   A370               STRB     R3,[R4, #+2]
    317                     char BTS=0;
   \   00000024   1300               MOVS     R3,R2
    318                     for (char i=0; i<sizeof(AT_WWEP1); i++)  {Buff_TX[i]=AT_WWEP1[i];   BTS++;}
   \   00000026   1500               MOVS     R5,R2
   \   00000028   07E0               B        ??WizFiCommand_AT_WWEP1_2
   \                     ??WizFiCommand_AT_WWEP1_3:
   \   0000002A   2E00               MOVS     R6,R5
   \   0000002C   1A4F               LDR      R7,??WizFiCommand_AT_WWEP1_4  ;; AT_WWEP1
   \   0000002E   BF5D               LDRB     R7,[R7, R6]
   \   00000030   8F55               STRB     R7,[R1, R6]
   \   00000032   5B1C               ADDS     R3,R3,#+1
   \   00000034   1B06               LSLS     R3,R3,#+24
   \   00000036   1B0E               LSRS     R3,R3,#+24
   \   00000038   6D1C               ADDS     R5,R5,#+1
   \                     ??WizFiCommand_AT_WWEP1_2:
   \   0000003A   0A2D               CMP      R5,#+10
   \   0000003C   F5D3               BCC      ??WizFiCommand_AT_WWEP1_3
    319                     BTS--;
   \   0000003E   5B1E               SUBS     R3,R3,#+1
   \   00000040   1B06               LSLS     R3,R3,#+24
   \   00000042   1B0E               LSRS     R3,R3,#+24
    320                     char PassN=0;
   \   00000044   06E0               B        ??WizFiCommand_AT_WWEP1_5
    321                     while ((Net->WiFi.Key[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Key[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WWEP1_6:
   \   00000046   1F00               MOVS     R7,R3
   \   00000048   BE19               ADDS     R6,R7,R6
   \   0000004A   2D78               LDRB     R5,[R5, #+0]
   \   0000004C   8D55               STRB     R5,[R1, R6]
   \   0000004E   521C               ADDS     R2,R2,#+1
   \   00000050   1206               LSLS     R2,R2,#+24
   \   00000052   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WWEP1_5:
   \   00000054   1600               MOVS     R6,R2
   \   00000056   A519               ADDS     R5,R4,R6
   \   00000058   9F35               ADDS     R5,R5,#+159
   \   0000005A   2F78               LDRB     R7,[R5, #+0]
   \   0000005C   002F               CMP      R7,#+0
   \   0000005E   02D0               BEQ      ??WizFiCommand_AT_WWEP1_7
   \   00000060   1700               MOVS     R7,R2
   \   00000062   102F               CMP      R7,#+16
   \   00000064   EFD3               BCC      ??WizFiCommand_AT_WWEP1_6
    322                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WWEP1_7:
   \   00000066   1D00               MOVS     R5,R3
   \   00000068   AB19               ADDS     R3,R5,R6
   \   0000006A   0D26               MOVS     R6,#+13
   \   0000006C   CE54               STRB     R6,[R1, R3]
    323                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke  
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000006E   82B0               SUB      SP,SP,#+8
   \   00000070   0023               MOVS     R3,#+0
   \   00000072   0093               STR      R3,[SP, #+0]
   \   00000074   521C               ADDS     R2,R2,#+1
   \   00000076   1206               LSLS     R2,R2,#+24
   \   00000078   120E               LSRS     R2,R2,#+24
   \   0000007A   AA18               ADDS     R2,R5,R2
   \   0000007C   ........           BL       AT91F_US_SendFrame
   \   00000080   02B0               ADD      SP,SP,#+8
    324                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000082   3834               ADDS     R4,R4,#+56
   \   00000084   0548               LDR      R0,??WizFiCommand_AT_WWEP1_4+0x4  ;; g_counter
   \   00000086   0CC8               LDM      R0!,{R2,R3}
   \   00000088   0548               LDR      R0,??WizFiCommand_AT_WWEP1_4+0x8  ;; 0x2710
   \   0000008A   0021               MOVS     R1,#+0
   \   0000008C   8018               ADDS     R0,R0,R2
   \   0000008E   5941               ADCS     R1,R1,R3
   \   00000090   03C4               STM      R4!,{R0,R1}
    325          }
   \   00000092   F8BC               POP      {R3-R7}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WWEP1_4:
   \   00000098   ........           DC32     AT_WWEP1
   \   0000009C   ........           DC32     g_counter
   \   000000A0   10270000           DC32     0x2710
    326          

   \                                 In section Debug.txt, align 4, keep-with-next
    327          char WizFiResponseCommand_AT_WWEP1(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    328          {
   \                     WizFiResponseCommand_AT_WWEP1:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    329             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    330             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_WWEP1_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_WWEP1_1
    331                  {
    332                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    333                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WWEP1_2
   \                     ??WizFiResponseCommand_AT_WWEP1_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WWEP1_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WWEP1_3
    334                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_WWEP1_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_WWEP1_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    335                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    336                  }
    337             return odp;
   \                     ??WizFiResponseCommand_AT_WWEP1_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WWEP1_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    338          }
    339          
    340          
    341          
    342          
    343          
    344          
    345          
    346          
    347          
    348          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    349          void WizFiCommand_AT_WWPA(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    350          {
   \                     WizFiCommand_AT_WWPA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    351                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   1300               MOVS     R3,R2
   \   0000000C   04E0               B        ??WizFiCommand_AT_WWPA_0
   \                     ??WizFiCommand_AT_WWPA_1:
   \   0000000E   1600               MOVS     R6,R2
   \   00000010   EE54               STRB     R6,[R5, R3]
   \   00000012   5B1C               ADDS     R3,R3,#+1
   \   00000014   1B04               LSLS     R3,R3,#+16
   \   00000016   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WWPA_0:
   \   00000018   9126               MOVS     R6,#+145
   \   0000001A   B600               LSLS     R6,R6,#+2        ;; #+580
   \   0000001C   B342               CMP      R3,R6
   \   0000001E   F6DB               BLT      ??WizFiCommand_AT_WWPA_1
    352                     Net->Status.CurrentOrder=WizFi_AT_WWPA;
   \   00000020   0923               MOVS     R3,#+9
   \   00000022   A370               STRB     R3,[R4, #+2]
    353                     char BTS=0;
   \   00000024   1300               MOVS     R3,R2
    354                     for (char i=0; i<sizeof(AT_WWPA); i++)  {Buff_TX[i]=AT_WWPA[i];   BTS++;}
   \   00000026   1500               MOVS     R5,R2
   \   00000028   07E0               B        ??WizFiCommand_AT_WWPA_2
   \                     ??WizFiCommand_AT_WWPA_3:
   \   0000002A   2E00               MOVS     R6,R5
   \   0000002C   1A4F               LDR      R7,??WizFiCommand_AT_WWPA_4  ;; AT_WWPA
   \   0000002E   BF5D               LDRB     R7,[R7, R6]
   \   00000030   8F55               STRB     R7,[R1, R6]
   \   00000032   5B1C               ADDS     R3,R3,#+1
   \   00000034   1B06               LSLS     R3,R3,#+24
   \   00000036   1B0E               LSRS     R3,R3,#+24
   \   00000038   6D1C               ADDS     R5,R5,#+1
   \                     ??WizFiCommand_AT_WWPA_2:
   \   0000003A   092D               CMP      R5,#+9
   \   0000003C   F5D3               BCC      ??WizFiCommand_AT_WWPA_3
    355                     BTS--;
   \   0000003E   5B1E               SUBS     R3,R3,#+1
   \   00000040   1B06               LSLS     R3,R3,#+24
   \   00000042   1B0E               LSRS     R3,R3,#+24
    356                     char PassN=0;
   \   00000044   06E0               B        ??WizFiCommand_AT_WWPA_5
    357                     while ((Net->WiFi.Key[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Key[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WWPA_6:
   \   00000046   1F00               MOVS     R7,R3
   \   00000048   BE19               ADDS     R6,R7,R6
   \   0000004A   2D78               LDRB     R5,[R5, #+0]
   \   0000004C   8D55               STRB     R5,[R1, R6]
   \   0000004E   521C               ADDS     R2,R2,#+1
   \   00000050   1206               LSLS     R2,R2,#+24
   \   00000052   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WWPA_5:
   \   00000054   1600               MOVS     R6,R2
   \   00000056   A519               ADDS     R5,R4,R6
   \   00000058   9F35               ADDS     R5,R5,#+159
   \   0000005A   2F78               LDRB     R7,[R5, #+0]
   \   0000005C   002F               CMP      R7,#+0
   \   0000005E   02D0               BEQ      ??WizFiCommand_AT_WWPA_7
   \   00000060   1700               MOVS     R7,R2
   \   00000062   102F               CMP      R7,#+16
   \   00000064   EFD3               BCC      ??WizFiCommand_AT_WWPA_6
    358                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WWPA_7:
   \   00000066   1D00               MOVS     R5,R3
   \   00000068   AB19               ADDS     R3,R5,R6
   \   0000006A   0D26               MOVS     R6,#+13
   \   0000006C   CE54               STRB     R6,[R1, R3]
    359          
    360                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000006E   82B0               SUB      SP,SP,#+8
   \   00000070   0023               MOVS     R3,#+0
   \   00000072   0093               STR      R3,[SP, #+0]
   \   00000074   521C               ADDS     R2,R2,#+1
   \   00000076   1206               LSLS     R2,R2,#+24
   \   00000078   120E               LSRS     R2,R2,#+24
   \   0000007A   AA18               ADDS     R2,R5,R2
   \   0000007C   ........           BL       AT91F_US_SendFrame
   \   00000080   02B0               ADD      SP,SP,#+8
    361                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000082   3834               ADDS     R4,R4,#+56
   \   00000084   0548               LDR      R0,??WizFiCommand_AT_WWPA_4+0x4  ;; g_counter
   \   00000086   0CC8               LDM      R0!,{R2,R3}
   \   00000088   0548               LDR      R0,??WizFiCommand_AT_WWPA_4+0x8  ;; 0x2710
   \   0000008A   0021               MOVS     R1,#+0
   \   0000008C   8018               ADDS     R0,R0,R2
   \   0000008E   5941               ADCS     R1,R1,R3
   \   00000090   03C4               STM      R4!,{R0,R1}
    362          }
   \   00000092   F8BC               POP      {R3-R7}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WWPA_4:
   \   00000098   ........           DC32     AT_WWPA
   \   0000009C   ........           DC32     g_counter
   \   000000A0   10270000           DC32     0x2710
    363          

   \                                 In section Debug.txt, align 4, keep-with-next
    364          char WizFiResponseCommand_AT_WWPA(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    365          {
   \                     WizFiResponseCommand_AT_WWPA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    366             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    367             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   10A1               ADR      R1,??WizFiResponseCommand_AT_WWPA_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   16D0               BEQ      ??WizFiResponseCommand_AT_WWPA_1
    368                  {
    369                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    370                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WWPA_2
   \                     ??WizFiResponseCommand_AT_WWPA_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WWPA_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WWPA_3
    371                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0848               LDR      R0,??WizFiResponseCommand_AT_WWPA_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0748               LDR      R0,??WizFiResponseCommand_AT_WWPA_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    372                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    373                  }
    374             return odp;
   \                     ??WizFiResponseCommand_AT_WWPA_1:
   \   00000042   3000               MOVS     R0,R6
   \   00000044   F8BC               POP      {R3-R7}
   \   00000046   02BC               POP      {R1}
   \   00000048   0847               BX       R1               ;; return
   \   0000004A   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WWPA_0:
   \   0000004C   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000050   ........           DC32     g_counter
   \   00000054   10270000           DC32     0x2710
    375          }
    376          
    377          
    378          
    379          
    380          
    381          
    382          
    383          
    384          //³¹czenie z accespointem ------------------------------------------------------
    385          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    386          void WizFiCommand_AT_WA(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    387          {
   \                     WizFiCommand_AT_WA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   1000               MOVS     R0,R2
   \   00000006   1C00               MOVS     R4,R3
    388               if (Net->WiFi.SSID[0]!=0)
   \   00000008   AE22               MOVS     R2,#+174
   \   0000000A   A25C               LDRB     R2,[R4, R2]
   \   0000000C   002A               CMP      R2,#+0
   \   0000000E   44D0               BEQ      ??WizFiCommand_AT_WA_0
    389               {
    390                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000010   0022               MOVS     R2,#+0
   \   00000012   1300               MOVS     R3,R2
   \   00000014   04E0               B        ??WizFiCommand_AT_WA_1
   \                     ??WizFiCommand_AT_WA_2:
   \   00000016   1600               MOVS     R6,R2
   \   00000018   EE54               STRB     R6,[R5, R3]
   \   0000001A   5B1C               ADDS     R3,R3,#+1
   \   0000001C   1B04               LSLS     R3,R3,#+16
   \   0000001E   1B14               ASRS     R3,R3,#+16
   \                     ??WizFiCommand_AT_WA_1:
   \   00000020   9126               MOVS     R6,#+145
   \   00000022   B600               LSLS     R6,R6,#+2        ;; #+580
   \   00000024   B342               CMP      R3,R6
   \   00000026   F6DB               BLT      ??WizFiCommand_AT_WA_2
    391                     Net->Status.CurrentOrder=WizFi_AT_WA;
   \   00000028   0A23               MOVS     R3,#+10
   \   0000002A   A370               STRB     R3,[R4, #+2]
    392          
    393                     char BTS=0;
   \   0000002C   1300               MOVS     R3,R2
    394                     for (char i=0; i<sizeof(AT_WA); i++)  {Buff_TX[i]=AT_WA[i];   BTS++;}
   \   0000002E   1500               MOVS     R5,R2
   \   00000030   07E0               B        ??WizFiCommand_AT_WA_3
   \                     ??WizFiCommand_AT_WA_4:
   \   00000032   2E00               MOVS     R6,R5
   \   00000034   1A4F               LDR      R7,??WizFiCommand_AT_WA_5  ;; AT_WA
   \   00000036   BF5D               LDRB     R7,[R7, R6]
   \   00000038   8F55               STRB     R7,[R1, R6]
   \   0000003A   5B1C               ADDS     R3,R3,#+1
   \   0000003C   1B06               LSLS     R3,R3,#+24
   \   0000003E   1B0E               LSRS     R3,R3,#+24
   \   00000040   6D1C               ADDS     R5,R5,#+1
   \                     ??WizFiCommand_AT_WA_3:
   \   00000042   072D               CMP      R5,#+7
   \   00000044   F5D3               BCC      ??WizFiCommand_AT_WA_4
    395                     BTS--;
   \   00000046   5B1E               SUBS     R3,R3,#+1
   \   00000048   1B06               LSLS     R3,R3,#+24
   \   0000004A   1B0E               LSRS     R3,R3,#+24
    396                     char PassN=0;
   \   0000004C   06E0               B        ??WizFiCommand_AT_WA_6
    397                     while ((Net->WiFi.SSID[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.SSID[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_WA_7:
   \   0000004E   1F00               MOVS     R7,R3
   \   00000050   BE19               ADDS     R6,R7,R6
   \   00000052   2D78               LDRB     R5,[R5, #+0]
   \   00000054   8D55               STRB     R5,[R1, R6]
   \   00000056   521C               ADDS     R2,R2,#+1
   \   00000058   1206               LSLS     R2,R2,#+24
   \   0000005A   120E               LSRS     R2,R2,#+24
   \                     ??WizFiCommand_AT_WA_6:
   \   0000005C   1600               MOVS     R6,R2
   \   0000005E   A519               ADDS     R5,R4,R6
   \   00000060   AE35               ADDS     R5,R5,#+174
   \   00000062   2F78               LDRB     R7,[R5, #+0]
   \   00000064   002F               CMP      R7,#+0
   \   00000066   02D0               BEQ      ??WizFiCommand_AT_WA_8
   \   00000068   1700               MOVS     R7,R2
   \   0000006A   102F               CMP      R7,#+16
   \   0000006C   EFD3               BCC      ??WizFiCommand_AT_WA_7
    398                     Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_WA_8:
   \   0000006E   1D00               MOVS     R5,R3
   \   00000070   AB19               ADDS     R3,R5,R6
   \   00000072   0D26               MOVS     R6,#+13
   \   00000074   CE54               STRB     R6,[R1, R3]
    399                     
    400                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000076   82B0               SUB      SP,SP,#+8
   \   00000078   0023               MOVS     R3,#+0
   \   0000007A   0093               STR      R3,[SP, #+0]
   \   0000007C   521C               ADDS     R2,R2,#+1
   \   0000007E   1206               LSLS     R2,R2,#+24
   \   00000080   120E               LSRS     R2,R2,#+24
   \   00000082   AA18               ADDS     R2,R5,R2
   \   00000084   ........           BL       AT91F_US_SendFrame
   \   00000088   02B0               ADD      SP,SP,#+8
    401                     Net->Status.Timeout=g_counter + AP_CONNECT_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000008A   3834               ADDS     R4,R4,#+56
   \   0000008C   0548               LDR      R0,??WizFiCommand_AT_WA_5+0x4  ;; g_counter
   \   0000008E   0CC8               LDM      R0!,{R2,R3}
   \   00000090   0548               LDR      R0,??WizFiCommand_AT_WA_5+0x8  ;; 0x4e20
   \   00000092   0021               MOVS     R1,#+0
   \   00000094   8018               ADDS     R0,R0,R2
   \   00000096   5941               ADCS     R1,R1,R3
   \   00000098   03C4               STM      R4!,{R0,R1}
    402               }
    403          
    404          
    405          }
   \                     ??WizFiCommand_AT_WA_0:
   \   0000009A   F8BC               POP      {R3-R7}
   \   0000009C   01BC               POP      {R0}
   \   0000009E   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_WA_5:
   \   000000A0   ........           DC32     AT_WA
   \   000000A4   ........           DC32     g_counter
   \   000000A8   204E0000           DC32     0x4e20
    406          

   \                                 In section Debug.txt, align 4, keep-with-next
    407          char WizFiResponseCommand_AT_WA(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    408          {
   \                     WizFiResponseCommand_AT_WA:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0700               MOVS     R7,R0
   \   00000004   1C00               MOVS     R4,R3
    409             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   2E00               MOVS     R6,R5
    410             if(strstr(Buff_RX, "OK")!=NULL)
   \   0000000A   11A1               ADR      R1,??WizFiResponseCommand_AT_WA_0  ;; 0x4F, 0x4B, 0x00, 0x00
   \   0000000C   ........           BL       strstr
   \   00000010   0028               CMP      R0,#+0
   \   00000012   18D0               BEQ      ??WizFiResponseCommand_AT_WA_1
    411                  {
    412                    odp=1;  //ok 
   \   00000014   0126               MOVS     R6,#+1
    413                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000016   2800               MOVS     R0,R5
   \   00000018   2A00               MOVS     R2,R5
   \   0000001A   03E0               B        ??WizFiResponseCommand_AT_WA_2
   \                     ??WizFiResponseCommand_AT_WA_3:
   \   0000001C   7A54               STRB     R2,[R7, R1]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \   00000020   0006               LSLS     R0,R0,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_WA_2:
   \   00000024   0100               MOVS     R1,R0
   \   00000026   3229               CMP      R1,#+50
   \   00000028   F8D3               BCC      ??WizFiResponseCommand_AT_WA_3
    414                    
    415                    //Tu mo¿e byæ pobranie otrzymanego IP, Bramy, 
    416          
    417                    //---------------
    418                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002A   2700               MOVS     R7,R4
   \   0000002C   3837               ADDS     R7,R7,#+56
   \   0000002E   0948               LDR      R0,??WizFiResponseCommand_AT_WA_0+0x4  ;; g_counter
   \   00000030   03C8               LDM      R0!,{R0,R1}
   \   00000032   0200               MOVS     R2,R0
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   0848               LDR      R0,??WizFiResponseCommand_AT_WA_0+0x8  ;; 0x2710
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   8018               ADDS     R0,R0,R2
   \   0000003C   5941               ADCS     R1,R1,R3
   \   0000003E   03C7               STM      R7!,{R0,R1}
    419                    Net->Status.Error=0;
   \   00000040   6575               STRB     R5,[R4, #+21]
    420                    
    421                    Net->Status.AccesPointAssociateTest=0xFF;           //dla testów ekranowych
   \   00000042   FF20               MOVS     R0,#+255
   \   00000044   2071               STRB     R0,[R4, #+4]
    422                  }
    423               
    424             return odp;
   \                     ??WizFiResponseCommand_AT_WA_1:
   \   00000046   3000               MOVS     R0,R6
   \   00000048   F8BC               POP      {R3-R7}
   \   0000004A   02BC               POP      {R1}
   \   0000004C   0847               BX       R1               ;; return
   \   0000004E   C046               Nop      
   \                     ??WizFiResponseCommand_AT_WA_0:
   \   00000050   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000054   ........           DC32     g_counter
   \   00000058   10270000           DC32     0x2710
    425          }
    426          
    427          
    428          
    429          
    430          
    431          
    432          //Sprawdzenie czy w WiFi.Domena jest wpisana domena czy IP serwera domeny ------
    433          // odp: 0- domena
    434          // odp: 1 - IP
    435          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    436          char CheckExistDomenaIP(_Net *Net)
    437          {
   \                     CheckExistDomenaIP:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0100               MOVS     R1,R0
    438            char ExistIP=1;
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   1000               MOVS     R0,R2
    439          
    440            if ((Net->WiFi.Domena[0]<'0') && ((Net->WiFi.Domena[0]>'9'))) ExistIP=0;
   \   00000008   0B00               MOVS     R3,R1
   \   0000000A   BD33               ADDS     R3,R3,#+189
   \   0000000C   1C78               LDRB     R4,[R3, #+0]
   \   0000000E   302C               CMP      R4,#+48
   \   00000010   0FD2               BCS      ??CheckExistDomenaIP_0
   \   00000012   2300               MOVS     R3,R4
   \   00000014   3A2B               CMP      R3,#+58
   \   00000016   0CD3               BCC      ??CheckExistDomenaIP_0
   \   00000018   0020               MOVS     R0,#+0
    441            
    442            char Size= sizeof(Net->WiFi.Domena);
    443            char Znak=1;
   \   0000001A   0AE0               B        ??CheckExistDomenaIP_0
    444            while ((Znak<Size) && (ExistIP==1)  && (Net->WiFi.Domena[Znak]>0) )  
    445            {
    446               if (((Net->WiFi.Domena[Znak]<'0') || (Net->WiFi.Domena[Znak]>'9')) && (Net->WiFi.Domena[Znak]!='.'))  ExistIP=0;
   \                     ??CheckExistDomenaIP_1:
   \   0000001C   302C               CMP      R4,#+48
   \   0000001E   01D3               BCC      ??CheckExistDomenaIP_2
   \   00000020   3A2C               CMP      R4,#+58
   \   00000022   03D3               BCC      ??CheckExistDomenaIP_3
   \                     ??CheckExistDomenaIP_2:
   \   00000024   2300               MOVS     R3,R4
   \   00000026   2E2B               CMP      R3,#+46
   \   00000028   00D0               BEQ      ??CheckExistDomenaIP_3
   \   0000002A   0020               MOVS     R0,#+0
    447            
    448               Znak++; 
   \                     ??CheckExistDomenaIP_3:
   \   0000002C   521C               ADDS     R2,R2,#+1
   \   0000002E   1206               LSLS     R2,R2,#+24
   \   00000030   120E               LSRS     R2,R2,#+24
    449            }
   \                     ??CheckExistDomenaIP_0:
   \   00000032   1300               MOVS     R3,R2
   \   00000034   0F2B               CMP      R3,#+15
   \   00000036   08D2               BCS      ??CheckExistDomenaIP_4
   \   00000038   0300               MOVS     R3,R0
   \   0000003A   012B               CMP      R3,#+1
   \   0000003C   05D1               BNE      ??CheckExistDomenaIP_4
   \   0000003E   1300               MOVS     R3,R2
   \   00000040   CB18               ADDS     R3,R1,R3
   \   00000042   BD33               ADDS     R3,R3,#+189
   \   00000044   1C78               LDRB     R4,[R3, #+0]
   \   00000046   002C               CMP      R4,#+0
   \   00000048   E8D1               BNE      ??CheckExistDomenaIP_1
    450            
    451            //je¿eli w Net->WiFi.Domena wpisany jest IP tp przepisz do  Net->Status.DomenaIP
    452            if (ExistIP==1)
   \                     ??CheckExistDomenaIP_4:
   \   0000004A   0200               MOVS     R2,R0
   \   0000004C   012A               CMP      R2,#+1
   \   0000004E   1ED1               BNE      ??CheckExistDomenaIP_5
    453            {
    454              Znak=0;
   \   00000050   0023               MOVS     R3,#+0
   \   00000052   1A00               MOVS     R2,R3
    455              for (char i=0; i<Size; i++) Net->Status.DomenaIP[i]=0;
   \   00000054   1C00               MOVS     R4,R3
   \   00000056   1E00               MOVS     R6,R3
   \   00000058   04E0               B        ??CheckExistDomenaIP_6
   \                     ??CheckExistDomenaIP_7:
   \   0000005A   4D19               ADDS     R5,R1,R5
   \   0000005C   AE71               STRB     R6,[R5, #+6]
   \   0000005E   641C               ADDS     R4,R4,#+1
   \   00000060   2406               LSLS     R4,R4,#+24
   \   00000062   240E               LSRS     R4,R4,#+24
   \                     ??CheckExistDomenaIP_6:
   \   00000064   2500               MOVS     R5,R4
   \   00000066   0F2D               CMP      R5,#+15
   \   00000068   F7D3               BCC      ??CheckExistDomenaIP_7
    456              while ((Znak<Size) && (ExistIP)  && (Net->WiFi.Domena[Znak]>0))
   \                     ??CheckExistDomenaIP_8:
   \   0000006A   1300               MOVS     R3,R2
   \   0000006C   0F2B               CMP      R3,#+15
   \   0000006E   0ED2               BCS      ??CheckExistDomenaIP_5
   \   00000070   0300               MOVS     R3,R0
   \   00000072   0CD0               BEQ      ??CheckExistDomenaIP_5
   \   00000074   1300               MOVS     R3,R2
   \   00000076   CB18               ADDS     R3,R1,R3
   \   00000078   1C00               MOVS     R4,R3
   \   0000007A   BD34               ADDS     R4,R4,#+189
   \   0000007C   2578               LDRB     R5,[R4, #+0]
   \   0000007E   002D               CMP      R5,#+0
   \   00000080   05D0               BEQ      ??CheckExistDomenaIP_5
    457              {
    458                Net->Status.DomenaIP[Znak]=Net->WiFi.Domena[Znak];
   \   00000082   2C00               MOVS     R4,R5
   \   00000084   9C71               STRB     R4,[R3, #+6]
    459                Znak++;
   \   00000086   521C               ADDS     R2,R2,#+1
   \   00000088   1206               LSLS     R2,R2,#+24
   \   0000008A   120E               LSRS     R2,R2,#+24
   \   0000008C   EDE7               B        ??CheckExistDomenaIP_8
    460              }
    461            }
    462            
    463            return ExistIP;
   \                     ??CheckExistDomenaIP_5:
   \   0000008E   70BC               POP      {R4-R6}
   \   00000090   02BC               POP      {R1}
   \   00000092   0847               BX       R1               ;; return
    464            
    465          }
    466          
    467          
    468          
    469          
    470          
    471          
    472          //Pobranie adresu domeny ------------------------------------------------------
    473          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    474          void WizFiCommand_AT_DNSLOOKUP(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    475          {
   \                     WizFiCommand_AT_DNSLOOKUP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0D00               MOVS     R5,R1
   \   00000004   1600               MOVS     R6,R2
   \   00000006   1C00               MOVS     R4,R3
    476                if (Net->WiFi.Domena[0]!=0)
   \   00000008   BD21               MOVS     R1,#+189
   \   0000000A   615C               LDRB     R1,[R4, R1]
   \   0000000C   0029               CMP      R1,#+0
   \   0000000E   5AD0               BEQ      ??WizFiCommand_AT_DNSLOOKUP_0
    477                {
    478                    for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000010   0027               MOVS     R7,#+0
   \   00000012   3900               MOVS     R1,R7
   \   00000014   04E0               B        ??WizFiCommand_AT_DNSLOOKUP_1
   \                     ??WizFiCommand_AT_DNSLOOKUP_2:
   \   00000016   3A00               MOVS     R2,R7
   \   00000018   4254               STRB     R2,[R0, R1]
   \   0000001A   491C               ADDS     R1,R1,#+1
   \   0000001C   0904               LSLS     R1,R1,#+16
   \   0000001E   0914               ASRS     R1,R1,#+16
   \                     ??WizFiCommand_AT_DNSLOOKUP_1:
   \   00000020   9122               MOVS     R2,#+145
   \   00000022   9200               LSLS     R2,R2,#+2        ;; #+580
   \   00000024   9142               CMP      R1,R2
   \   00000026   F6DB               BLT      ??WizFiCommand_AT_DNSLOOKUP_2
    479                    if (CheckExistDomenaIP(Net)==0)                                                  //sprawdzenie czy w WiFi.Domena jest wpisana domena czy IP serwera domeny
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   ........           BL       CheckExistDomenaIP
   \   0000002E   0028               CMP      R0,#+0
   \   00000030   3ED1               BNE      ??WizFiCommand_AT_DNSLOOKUP_3
    480                    {                                                                     //w WiFi.Domena jest wpisana domena
    481                       Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
   \   00000032   0B20               MOVS     R0,#+11
   \   00000034   A070               STRB     R0,[R4, #+2]
    482            
    483                       char BTS=0;
   \   00000036   3800               MOVS     R0,R7
    484                       for (char i=0; i<sizeof(AT_DNSLOOKUP); i++)  {Buff_TX[i]=AT_DNSLOOKUP[i];   BTS++;}
   \   00000038   3900               MOVS     R1,R7
   \   0000003A   07E0               B        ??WizFiCommand_AT_DNSLOOKUP_4
   \                     ??WizFiCommand_AT_DNSLOOKUP_5:
   \   0000003C   0A00               MOVS     R2,R1
   \   0000003E   234B               LDR      R3,??WizFiCommand_AT_DNSLOOKUP_6  ;; AT_DNSLOOKUP
   \   00000040   9B5C               LDRB     R3,[R3, R2]
   \   00000042   AB54               STRB     R3,[R5, R2]
   \   00000044   401C               ADDS     R0,R0,#+1
   \   00000046   0006               LSLS     R0,R0,#+24
   \   00000048   000E               LSRS     R0,R0,#+24
   \   0000004A   491C               ADDS     R1,R1,#+1
   \                     ??WizFiCommand_AT_DNSLOOKUP_4:
   \   0000004C   0E29               CMP      R1,#+14
   \   0000004E   F5D3               BCC      ??WizFiCommand_AT_DNSLOOKUP_5
    485                       BTS--;
   \   00000050   401E               SUBS     R0,R0,#+1
   \   00000052   0006               LSLS     R0,R0,#+24
   \   00000054   000E               LSRS     R0,R0,#+24
    486                       char PassN=0;
   \   00000056   06E0               B        ??WizFiCommand_AT_DNSLOOKUP_7
    487                       while ((Net->WiFi.Domena[PassN]>0) && (PassN<=15)) {Buff_TX[BTS+PassN]=Net->WiFi.Domena[PassN]; PassN++;}
   \                     ??WizFiCommand_AT_DNSLOOKUP_8:
   \   00000058   0300               MOVS     R3,R0
   \   0000005A   5918               ADDS     R1,R3,R1
   \   0000005C   1278               LDRB     R2,[R2, #+0]
   \   0000005E   6A54               STRB     R2,[R5, R1]
   \   00000060   7F1C               ADDS     R7,R7,#+1
   \   00000062   3F06               LSLS     R7,R7,#+24
   \   00000064   3F0E               LSRS     R7,R7,#+24
   \                     ??WizFiCommand_AT_DNSLOOKUP_7:
   \   00000066   3900               MOVS     R1,R7
   \   00000068   6218               ADDS     R2,R4,R1
   \   0000006A   BD32               ADDS     R2,R2,#+189
   \   0000006C   1378               LDRB     R3,[R2, #+0]
   \   0000006E   002B               CMP      R3,#+0
   \   00000070   02D0               BEQ      ??WizFiCommand_AT_DNSLOOKUP_9
   \   00000072   3B00               MOVS     R3,R7
   \   00000074   102B               CMP      R3,#+16
   \   00000076   EFD3               BCC      ??WizFiCommand_AT_DNSLOOKUP_8
    488                       Buff_TX[BTS+PassN++]=0x0d;
   \                     ??WizFiCommand_AT_DNSLOOKUP_9:
   \   00000078   4118               ADDS     R1,R0,R1
   \   0000007A   0D22               MOVS     R2,#+13
   \   0000007C   6A54               STRB     R2,[R5, R1]
    489                   
    490                       AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000007E   82B0               SUB      SP,SP,#+8
   \   00000080   0021               MOVS     R1,#+0
   \   00000082   0091               STR      R1,[SP, #+0]
   \   00000084   0B00               MOVS     R3,R1
   \   00000086   7F1C               ADDS     R7,R7,#+1
   \   00000088   3F06               LSLS     R7,R7,#+24
   \   0000008A   3F0E               LSRS     R7,R7,#+24
   \   0000008C   C219               ADDS     R2,R0,R7
   \   0000008E   2900               MOVS     R1,R5
   \   00000090   3000               MOVS     R0,R6
   \   00000092   ........           BL       AT91F_US_SendFrame
   \   00000096   02B0               ADD      SP,SP,#+8
    491                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000098   2500               MOVS     R5,R4
   \   0000009A   3835               ADDS     R5,R5,#+56
   \   0000009C   0C48               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x4  ;; g_counter
   \   0000009E   0CC8               LDM      R0!,{R2,R3}
   \   000000A0   0C48               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x8  ;; 0x2710
   \   000000A2   0021               MOVS     R1,#+0
   \   000000A4   8018               ADDS     R0,R0,R2
   \   000000A6   5941               ADCS     R1,R1,R3
   \   000000A8   03C5               STM      R5!,{R0,R1}
    492                       Net->Status.NextHttpOrder=HTTP_GET_Config;
   \   000000AA   1320               MOVS     R0,#+19
   \   000000AC   E070               STRB     R0,[R4, #+3]
   \   000000AE   0AE0               B        ??WizFiCommand_AT_DNSLOOKUP_0
    493                    }
    494                    else                                                                  //je¿eli w WiFi.Domena jest wpisany IP serwera domeny
    495                    {
    496                       Net->Status.AccesPointAssociate=CONNECTED;    
   \                     ??WizFiCommand_AT_DNSLOOKUP_3:
   \   000000B0   0320               MOVS     R0,#+3
   \   000000B2   2070               STRB     R0,[R4, #+0]
    497                       Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   000000B4   A770               STRB     R7,[R4, #+2]
    498                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   000000B6   3834               ADDS     R4,R4,#+56
   \   000000B8   0548               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x4  ;; g_counter
   \   000000BA   0CC8               LDM      R0!,{R2,R3}
   \   000000BC   0548               LDR      R0,??WizFiCommand_AT_DNSLOOKUP_6+0x8  ;; 0x2710
   \   000000BE   3900               MOVS     R1,R7
   \   000000C0   8018               ADDS     R0,R0,R2
   \   000000C2   5941               ADCS     R1,R1,R3
   \   000000C4   03C4               STM      R4!,{R0,R1}
    499                    }
    500                    
    501                }
    502          }
   \                     ??WizFiCommand_AT_DNSLOOKUP_0:
   \   000000C6   F8BC               POP      {R3-R7}
   \   000000C8   01BC               POP      {R0}
   \   000000CA   0047               BX       R0               ;; return
   \                     ??WizFiCommand_AT_DNSLOOKUP_6:
   \   000000CC   ........           DC32     AT_DNSLOOKUP
   \   000000D0   ........           DC32     g_counter
   \   000000D4   10270000           DC32     0x2710
    503          
    504          
    505          
    506          /*
    507          //Pobranie adresu domeny ------------------------------------------------------
    508          //------------------------------------------------------------------------------
    509          void WizFiCommand_AT_DNSLOOKUP(char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    510          {
    511                       Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
    512            
    513                       char BTS=0;
    514                       for (char i=0; i<sizeof(AT_DNSLOOKUP); i++)  {Buff_TX[i]=AT_DNSLOOKUP[i];   BTS++;}
    515                       BTS--;
    516                       char PassN=0;
    517                       while ((Net->WiFi.Domena[PassN]>0) && (PassN<=25)) {Buff_TX[BTS+PassN]=Net->WiFi.Domena[PassN]; PassN++;}
    518                       Buff_TX[BTS+PassN++]=0x0d;
    519                   
    520                       AT91F_US_SendFrame(USART,Buff_TX,BTS+PassN,0, 0);                        //Wysyla ramke 
    521                       Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
    522                       Net->Status.NextHttpOrder=HTTP_GET_Config;
    523          }
    524          */
    525          
    526          

   \                                 In section Debug.txt, align 4, keep-with-next
    527          char WizFiResponseCommand_AT_DNSLOOKUP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    528          {
   \                     WizFiResponseCommand_AT_DNSLOOKUP:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   1C00               MOVS     R4,R3
    529             char odp=0;
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   2E00               MOVS     R6,R5
    530             char *pTxt;
    531             
    532             pTxt=strstr(Buff_RX, "IP:");
   \   00000008   1DA1               ADR      R1,??WizFiResponseCommand_AT_DNSLOOKUP_0  ;; "IP:"
   \   0000000A   ........           BL       strstr
   \   0000000E   0700               MOVS     R7,R0
    533             if((strstr(Buff_RX, "OK")!=NULL) && (pTxt!=NULL))
   \   00000010   1CA1               ADR      R1,??WizFiResponseCommand_AT_DNSLOOKUP_0+0x4  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   ........           BL       strstr
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   2CD0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_1
   \   0000001C   002F               CMP      R7,#+0
   \   0000001E   2AD0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_1
    534                  {
    535                    odp=1;  //ok 
   \   00000020   0126               MOVS     R6,#+1
    536                    
    537                    Net->Status.AccesPointAssociate=CONNECTED;    
   \   00000022   0320               MOVS     R0,#+3
   \   00000024   2070               STRB     R0,[R4, #+0]
    538                    Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   00000026   2800               MOVS     R0,R5
   \   00000028   A070               STRB     R0,[R4, #+2]
    539                      
    540                    pTxt+=3;
   \   0000002A   FF1C               ADDS     R7,R7,#+3
    541                    char p=0;
   \   0000002C   06E0               B        ??WizFiResponseCommand_AT_DNSLOOKUP_2
    542                    while ((*pTxt!=0x0d) && (p<=15))  {Net->Status.DomenaIP[p++]=*pTxt; pTxt++;}
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_3:
   \   0000002E   6118               ADDS     R1,R4,R1
   \   00000030   3A78               LDRB     R2,[R7, #+0]
   \   00000032   8A71               STRB     R2,[R1, #+6]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   0006               LSLS     R0,R0,#+24
   \   00000038   000E               LSRS     R0,R0,#+24
   \   0000003A   7F1C               ADDS     R7,R7,#+1
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_2:
   \   0000003C   3978               LDRB     R1,[R7, #+0]
   \   0000003E   0D29               CMP      R1,#+13
   \   00000040   02D0               BEQ      ??WizFiResponseCommand_AT_DNSLOOKUP_4
   \   00000042   0100               MOVS     R1,R0
   \   00000044   1029               CMP      R1,#+16
   \   00000046   F2D3               BCC      ??WizFiResponseCommand_AT_DNSLOOKUP_3
    543                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_4:
   \   00000048   2700               MOVS     R7,R4
   \   0000004A   3837               ADDS     R7,R7,#+56
   \   0000004C   0E48               LDR      R0,??WizFiResponseCommand_AT_DNSLOOKUP_0+0x8  ;; g_counter
   \   0000004E   03C8               LDM      R0!,{R0,R1}
   \   00000050   0200               MOVS     R2,R0
   \   00000052   0B00               MOVS     R3,R1
   \   00000054   0D48               LDR      R0,??WizFiResponseCommand_AT_DNSLOOKUP_0+0xC  ;; 0x2710
   \   00000056   2900               MOVS     R1,R5
   \   00000058   8018               ADDS     R0,R0,R2
   \   0000005A   5941               ADCS     R1,R1,R3
   \   0000005C   03C7               STM      R7!,{R0,R1}
    544                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   0000005E   2800               MOVS     R0,R5
   \   00000060   2B00               MOVS     R3,R5
   \   00000062   04E0               B        ??WizFiResponseCommand_AT_DNSLOOKUP_5
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_6:
   \   00000064   009A               LDR      R2,[SP, #+0]
   \   00000066   5354               STRB     R3,[R2, R1]
   \   00000068   401C               ADDS     R0,R0,#+1
   \   0000006A   0006               LSLS     R0,R0,#+24
   \   0000006C   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_5:
   \   0000006E   0100               MOVS     R1,R0
   \   00000070   3229               CMP      R1,#+50
   \   00000072   F7D3               BCC      ??WizFiResponseCommand_AT_DNSLOOKUP_6
    545                    Net->Status.Error=0;
   \   00000074   6575               STRB     R5,[R4, #+21]
    546                  }
    547               
    548             return odp;
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_1:
   \   00000076   3000               MOVS     R0,R6
   \   00000078   F8BC               POP      {R3-R7}
   \   0000007A   02BC               POP      {R1}
   \   0000007C   0847               BX       R1               ;; return
   \   0000007E   C046               Nop      
   \                     ??WizFiResponseCommand_AT_DNSLOOKUP_0:
   \   00000080   49503A00           DC8      "IP:"
   \   00000084   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \   00000088   ........           DC32     g_counter
   \   0000008C   10270000           DC32     0x2710
    549          }
    550          
    551          
    552          
    553                         
    554          
    555          
    556          
    557          
    558          
    559          //Rozkaz po³¹czenia z hostem----------------------------------------------------
    560          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    561          void WizFiCommand_AT_NCTCP(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    562          {
   \                     WizFiCommand_AT_NCTCP:
   \   00000000   FCB5               PUSH     {R2-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   \   00000004   0C00               MOVS     R4,R1
    563               if (Net->WiFi.Domena[0]!=0)
   \   00000006   1900               MOVS     R1,R3
   \   00000008   BD31               ADDS     R1,R1,#+189
   \   0000000A   0191               STR      R1,[SP, #+4]
   \   0000000C   0978               LDRB     R1,[R1, #+0]
   \   0000000E   0029               CMP      R1,#+0
   \   00000010   00D1               BNE      .+4
   \   00000012   92E0               B        ??WizFiCommand_AT_NCTCP_0
    564               {
    565                     for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000014   0025               MOVS     R5,#+0
   \   00000016   2900               MOVS     R1,R5
   \   00000018   04E0               B        ??WizFiCommand_AT_NCTCP_1
   \                     ??WizFiCommand_AT_NCTCP_2:
   \   0000001A   2A00               MOVS     R2,R5
   \   0000001C   4254               STRB     R2,[R0, R1]
   \   0000001E   491C               ADDS     R1,R1,#+1
   \   00000020   0904               LSLS     R1,R1,#+16
   \   00000022   0914               ASRS     R1,R1,#+16
   \                     ??WizFiCommand_AT_NCTCP_1:
   \   00000024   9122               MOVS     R2,#+145
   \   00000026   9200               LSLS     R2,R2,#+2        ;; #+580
   \   00000028   9142               CMP      R1,R2
   \   0000002A   F6DB               BLT      ??WizFiCommand_AT_NCTCP_2
    566                     Net->Status.SendPacketTime=g_counter;
   \   0000002C   0498               LDR      R0,[SP, #+16]
   \   0000002E   2030               ADDS     R0,R0,#+32
   \   00000030   0090               STR      R0,[SP, #+0]
   \   00000032   444F               LDR      R7,??WizFiCommand_AT_NCTCP_3  ;; g_counter
   \   00000034   0200               MOVS     R2,R0
   \   00000036   03CF               LDM      R7!,{R0,R1}
   \   00000038   083F               SUBS     R7,R7,#+8
   \   0000003A   03C2               STM      R2!,{R0,R1}
    567                     Net->Status.HostLink=CONNECTING;
   \   0000003C   049E               LDR      R6,[SP, #+16]
   \   0000003E   761C               ADDS     R6,R6,#+1
   \   00000040   0220               MOVS     R0,#+2
   \   00000042   3070               STRB     R0,[R6, #+0]
    568                     Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000044   009A               LDR      R2,[SP, #+0]
   \   00000046   1832               ADDS     R2,R2,#+24
   \   00000048   9446               MOV      R12,R2
   \   0000004A   03CF               LDM      R7!,{R0,R1}
   \   0000004C   083F               SUBS     R7,R7,#+8
   \   0000004E   0200               MOVS     R2,R0
   \   00000050   0B00               MOVS     R3,R1
   \   00000052   3D48               LDR      R0,??WizFiCommand_AT_NCTCP_3+0x4  ;; 0x2710
   \   00000054   2900               MOVS     R1,R5
   \   00000056   8018               ADDS     R0,R0,R2
   \   00000058   5941               ADCS     R1,R1,R3
   \   0000005A   6246               MOV      R2,R12
   \   0000005C   03C2               STM      R2!,{R0,R1}
    569                     //Net->Status.HttpNextQueryTime=g_counter+100;   //rezerwa czasu pomiêdzy odpytaniami HTTP.
    570                     Net->Status.FreezTime=g_counter+FREEZ_TIME;
   \   0000005E   009A               LDR      R2,[SP, #+0]
   \   00000060   2032               ADDS     R2,R2,#+32
   \   00000062   03CF               LDM      R7!,{R0,R1}
   \   00000064   0023               MOVS     R3,#+0
   \   00000066   3230               ADDS     R0,R0,#+50
   \   00000068   5941               ADCS     R1,R1,R3
   \   0000006A   03C2               STM      R2!,{R0,R1}
    571                     
    572                     Net->Status.CurrentOrder=WizFi_AT_DNSLOOKUP;
   \   0000006C   0B20               MOVS     R0,#+11
   \   0000006E   7070               STRB     R0,[R6, #+1]
    573                     
    574                     char BTS=0;
   \   00000070   2800               MOVS     R0,R5
    575                     for (char i=0; i<sizeof(AT_NCTCP); i++)  {Buff_TX[i]=AT_NCTCP[i];   BTS++;}
   \   00000072   2900               MOVS     R1,R5
   \   00000074   07E0               B        ??WizFiCommand_AT_NCTCP_4
   \                     ??WizFiCommand_AT_NCTCP_5:
   \   00000076   0A00               MOVS     R2,R1
   \   00000078   344B               LDR      R3,??WizFiCommand_AT_NCTCP_3+0x8  ;; AT_NCTCP
   \   0000007A   9B5C               LDRB     R3,[R3, R2]
   \   0000007C   A354               STRB     R3,[R4, R2]
   \   0000007E   401C               ADDS     R0,R0,#+1
   \   00000080   0006               LSLS     R0,R0,#+24
   \   00000082   000E               LSRS     R0,R0,#+24
   \   00000084   491C               ADDS     R1,R1,#+1
   \                     ??WizFiCommand_AT_NCTCP_4:
   \   00000086   0A29               CMP      R1,#+10
   \   00000088   F5D3               BCC      ??WizFiCommand_AT_NCTCP_5
    576                     BTS--;
   \   0000008A   401E               SUBS     R0,R0,#+1
   \   0000008C   0006               LSLS     R0,R0,#+24
   \   0000008E   000E               LSRS     R0,R0,#+24
    577                     char PN=0;
   \   00000090   2900               MOVS     R1,R5
    578                     if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) 
   \   00000092   019A               LDR      R2,[SP, #+4]
   \   00000094   D27B               LDRB     R2,[R2, #+15]
   \   00000096   302A               CMP      R2,#+48
   \   00000098   21D3               BCC      ??WizFiCommand_AT_NCTCP_6
   \   0000009A   019A               LDR      R2,[SP, #+4]
   \   0000009C   D27B               LDRB     R2,[R2, #+15]
   \   0000009E   7B2A               CMP      R2,#+123
   \   000000A0   1DD2               BCS      ??WizFiCommand_AT_NCTCP_6
   \   000000A2   06E0               B        ??WizFiCommand_AT_NCTCP_7
    579                     {
    580                       while ((Net->WiFi.Subdomena[PN]>0) && (PN<=15)) {Buff_TX[BTS+PN]=Net->WiFi.Subdomena[PN]; PN++;}
   \                     ??WizFiCommand_AT_NCTCP_8:
   \   000000A4   0600               MOVS     R6,R0
   \   000000A6   B218               ADDS     R2,R6,R2
   \   000000A8   1B78               LDRB     R3,[R3, #+0]
   \   000000AA   A354               STRB     R3,[R4, R2]
   \   000000AC   491C               ADDS     R1,R1,#+1
   \   000000AE   0906               LSLS     R1,R1,#+24
   \   000000B0   090E               LSRS     R1,R1,#+24
   \                     ??WizFiCommand_AT_NCTCP_7:
   \   000000B2   0A00               MOVS     R2,R1
   \   000000B4   049B               LDR      R3,[SP, #+16]
   \   000000B6   9B18               ADDS     R3,R3,R2
   \   000000B8   CC33               ADDS     R3,R3,#+204
   \   000000BA   1E78               LDRB     R6,[R3, #+0]
   \   000000BC   002E               CMP      R6,#+0
   \   000000BE   02D0               BEQ      ??WizFiCommand_AT_NCTCP_9
   \   000000C0   0E00               MOVS     R6,R1
   \   000000C2   102E               CMP      R6,#+16
   \   000000C4   EED3               BCC      ??WizFiCommand_AT_NCTCP_8
    581                       Buff_TX[BTS+PN]='.';
   \                     ??WizFiCommand_AT_NCTCP_9:
   \   000000C6   0100               MOVS     R1,R0
   \   000000C8   8918               ADDS     R1,R1,R2
   \   000000CA   2E22               MOVS     R2,#+46
   \   000000CC   6254               STRB     R2,[R4, R1]
    582                     }
    583                     PN=0;
   \   000000CE   06E0               B        ??WizFiCommand_AT_NCTCP_6
    584                     while ((Net->Status.DomenaIP[PN]>0) && (PN<=15)) {Buff_TX[BTS+PN]=Net->Status.DomenaIP[PN]; PN++;}
   \                     ??WizFiCommand_AT_NCTCP_10:
   \   000000D0   0300               MOVS     R3,R0
   \   000000D2   5918               ADDS     R1,R3,R1
   \   000000D4   9279               LDRB     R2,[R2, #+6]
   \   000000D6   6254               STRB     R2,[R4, R1]
   \   000000D8   6D1C               ADDS     R5,R5,#+1
   \   000000DA   2D06               LSLS     R5,R5,#+24
   \   000000DC   2D0E               LSRS     R5,R5,#+24
   \                     ??WizFiCommand_AT_NCTCP_6:
   \   000000DE   2900               MOVS     R1,R5
   \   000000E0   049A               LDR      R2,[SP, #+16]
   \   000000E2   5218               ADDS     R2,R2,R1
   \   000000E4   9379               LDRB     R3,[R2, #+6]
   \   000000E6   002B               CMP      R3,#+0
   \   000000E8   02D0               BEQ      ??WizFiCommand_AT_NCTCP_11
   \   000000EA   2B00               MOVS     R3,R5
   \   000000EC   102B               CMP      R3,#+16
   \   000000EE   EFD3               BCC      ??WizFiCommand_AT_NCTCP_10
    585                     Buff_TX[BTS+PN++]=',';
   \                     ??WizFiCommand_AT_NCTCP_11:
   \   000000F0   4118               ADDS     R1,R0,R1
   \   000000F2   2C22               MOVS     R2,#+44
   \   000000F4   6254               STRB     R2,[R4, R1]
   \   000000F6   6D1C               ADDS     R5,R5,#+1
   \   000000F8   2D06               LSLS     R5,R5,#+24
   \   000000FA   2D0E               LSRS     R5,R5,#+24
    586                     Buff_TX[BTS+PN++]='8';
   \   000000FC   2900               MOVS     R1,R5
   \   000000FE   4118               ADDS     R1,R0,R1
   \   00000100   3822               MOVS     R2,#+56
   \   00000102   6254               STRB     R2,[R4, R1]
   \   00000104   6D1C               ADDS     R5,R5,#+1
   \   00000106   2D06               LSLS     R5,R5,#+24
   \   00000108   2D0E               LSRS     R5,R5,#+24
    587                     Buff_TX[BTS+PN++]='0';
   \   0000010A   2900               MOVS     R1,R5
   \   0000010C   4118               ADDS     R1,R0,R1
   \   0000010E   3022               MOVS     R2,#+48
   \   00000110   6254               STRB     R2,[R4, R1]
   \   00000112   6D1C               ADDS     R5,R5,#+1
   \   00000114   2D06               LSLS     R5,R5,#+24
   \   00000116   2D0E               LSRS     R5,R5,#+24
    588                     Buff_TX[BTS+PN++]=0x0d;
   \   00000118   2900               MOVS     R1,R5
   \   0000011A   4118               ADDS     R1,R0,R1
   \   0000011C   0D22               MOVS     R2,#+13
   \   0000011E   6254               STRB     R2,[R4, R1]
    589                    
    590                     
    591          
    592                      
    593                      
    594                     AT91F_US_SendFrame(USART,Buff_TX,BTS+PN,0, 0);                        //Wysyla ramke  otwieraj¹c¹ po³¹czenie 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000120   82B0               SUB      SP,SP,#+8
   \   00000122   0021               MOVS     R1,#+0
   \   00000124   0091               STR      R1,[SP, #+0]
   \   00000126   0B00               MOVS     R3,R1
   \   00000128   6D1C               ADDS     R5,R5,#+1
   \   0000012A   2D06               LSLS     R5,R5,#+24
   \   0000012C   2D0E               LSRS     R5,R5,#+24
   \   0000012E   4219               ADDS     R2,R0,R5
   \   00000130   2100               MOVS     R1,R4
   \   00000132   0598               LDR      R0,[SP, #+20]
   \   00000134   ........           BL       AT91F_US_SendFrame
   \   00000138   02B0               ADD      SP,SP,#+8
    595               }
    596          }
   \                     ??WizFiCommand_AT_NCTCP_0:
   \   0000013A   05B0               ADD      SP,SP,#+20
   \   0000013C   F0BC               POP      {R4-R7}
   \   0000013E   01BC               POP      {R0}
   \   00000140   0047               BX       R0               ;; return
   \   00000142   C046               Nop      
   \                     ??WizFiCommand_AT_NCTCP_3:
   \   00000144   ........           DC32     g_counter
   \   00000148   10270000           DC32     0x2710
   \   0000014C   ........           DC32     AT_NCTCP
    597          
    598          
    599          

   \                                 In section Debug.txt, align 4, keep-with-next
    600          char WizFiResponseCommand_AT_NCTCP(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
    601          {
   \                     WizFiResponseCommand_AT_NCTCP:
   \   00000000   F5B5               PUSH     {R0,R2,R4-R7,LR}
   \   00000002   81B0               SUB      SP,SP,#+4
   \   00000004   0F00               MOVS     R7,R1
   \   00000006   1C00               MOVS     R4,R3
    602             char odp=0;
   \   00000008   0026               MOVS     R6,#+0
   \   0000000A   6846               MOV      R0,SP
   \   0000000C   3100               MOVS     R1,R6
   \   0000000E   0170               STRB     R1,[R0, #+0]
   \   00000010   5649               LDR      R1,??WizFiResponseCommand_AT_NCTCP_0  ;; AT_NCLOSE + 12
   \   00000012   0198               LDR      R0,[SP, #+4]
    603             char *pTxt;
    604             
    605             pTxt=strstr(Buff_RX, "[CONNECT");
   \   00000014   ........           BL       strstr
   \   00000018   0500               MOVS     R5,R0
    606             if ((pTxt!=NULL) && (pTxt[9]!='9')&& (pTxt[9]!='A'))
   \   0000001A   00D1               BNE      .+4
   \   0000001C   7FE0               B        ??WizFiResponseCommand_AT_NCTCP_1
   \   0000001E   687A               LDRB     R0,[R5, #+9]
   \   00000020   3928               CMP      R0,#+57
   \   00000022   7CD0               BEQ      ??WizFiResponseCommand_AT_NCTCP_1
   \   00000024   4128               CMP      R0,#+65
   \   00000026   7AD0               BEQ      ??WizFiResponseCommand_AT_NCTCP_1
    607                  {
    608                    odp=1;  //ok 
   \   00000028   6846               MOV      R0,SP
   \   0000002A   0121               MOVS     R1,#+1
   \   0000002C   0170               STRB     R1,[R0, #+0]
    609                    pTxt+=9;
   \   0000002E   0935               ADDS     R5,R5,#+9
    610                    Net->Status.HostChannel=*pTxt;
   \   00000030   2878               LDRB     R0,[R5, #+0]
   \   00000032   A075               STRB     R0,[R4, #+22]
    611                    Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   00000034   3000               MOVS     R0,R6
   \   00000036   A070               STRB     R0,[R4, #+2]
    612                    
    613                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000038   2200               MOVS     R2,R4
   \   0000003A   3832               ADDS     R2,R2,#+56
   \   0000003C   9446               MOV      R12,R2
   \   0000003E   4C48               LDR      R0,??WizFiResponseCommand_AT_NCTCP_0+0x4  ;; g_counter
   \   00000040   03C8               LDM      R0!,{R0,R1}
   \   00000042   0200               MOVS     R2,R0
   \   00000044   0B00               MOVS     R3,R1
   \   00000046   4B48               LDR      R0,??WizFiResponseCommand_AT_NCTCP_0+0x8  ;; 0x2710
   \   00000048   3100               MOVS     R1,R6
   \   0000004A   8018               ADDS     R0,R0,R2
   \   0000004C   5941               ADCS     R1,R1,R3
   \   0000004E   6246               MOV      R2,R12
   \   00000050   03C2               STM      R2!,{R0,R1}
    614                    
    615                    
    616                    
    617                    if ((pTxt[0]-48)==6)
   \   00000052   2878               LDRB     R0,[R5, #+0]
   \   00000054   3038               SUBS     R0,R0,#+48
   \   00000056   0628               CMP      R0,#+6
   \   00000058   24D1               BNE      ??WizFiResponseCommand_AT_NCTCP_2
    618                    {
    619                     char BTS=0;
   \   0000005A   3000               MOVS     R0,R6
    620                     for (char i=0; i<sizeof(AT_NCLOSE); i++)  {Buff_TX[i]=AT_NCLOSE[i];   BTS++;}
   \   0000005C   3100               MOVS     R1,R6
   \   0000005E   07E0               B        ??WizFiResponseCommand_AT_NCTCP_3
   \                     ??WizFiResponseCommand_AT_NCTCP_4:
   \   00000060   0A00               MOVS     R2,R1
   \   00000062   454B               LDR      R3,??WizFiResponseCommand_AT_NCTCP_0+0xC  ;; AT_NCLOSE
   \   00000064   9B5C               LDRB     R3,[R3, R2]
   \   00000066   BB54               STRB     R3,[R7, R2]
   \   00000068   401C               ADDS     R0,R0,#+1
   \   0000006A   0006               LSLS     R0,R0,#+24
   \   0000006C   000E               LSRS     R0,R0,#+24
   \   0000006E   491C               ADDS     R1,R1,#+1
   \                     ??WizFiResponseCommand_AT_NCTCP_3:
   \   00000070   0B29               CMP      R1,#+11
   \   00000072   F5D3               BCC      ??WizFiResponseCommand_AT_NCTCP_4
    621                     BTS--;
   \   00000074   421E               SUBS     R2,R0,#+1
   \   00000076   1206               LSLS     R2,R2,#+24
   \   00000078   120E               LSRS     R2,R2,#+24
    622                     Buff_TX[BTS++]='0';
   \   0000007A   1000               MOVS     R0,R2
   \   0000007C   3021               MOVS     R1,#+48
   \   0000007E   3954               STRB     R1,[R7, R0]
   \   00000080   521C               ADDS     R2,R2,#+1
   \   00000082   1206               LSLS     R2,R2,#+24
   \   00000084   120E               LSRS     R2,R2,#+24
    623                     Buff_TX[BTS++]=0x0d; 
   \   00000086   1000               MOVS     R0,R2
   \   00000088   0D21               MOVS     R1,#+13
   \   0000008A   3954               STRB     R1,[R7, R0]
    624                     AT91F_US_SendFrame(USART,Buff_TX,BTS,0, 0);                        //Wysyla ramke  otwieraj¹c¹ po³¹czenie 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000008C   82B0               SUB      SP,SP,#+8
   \   0000008E   3000               MOVS     R0,R6
   \   00000090   0090               STR      R0,[SP, #+0]
   \   00000092   0300               MOVS     R3,R0
   \   00000094   521C               ADDS     R2,R2,#+1
   \   00000096   1206               LSLS     R2,R2,#+24
   \   00000098   120E               LSRS     R2,R2,#+24
   \   0000009A   3900               MOVS     R1,R7
   \   0000009C   0498               LDR      R0,[SP, #+16]
   \   0000009E   ........           BL       AT91F_US_SendFrame
   \   000000A2   02B0               ADD      SP,SP,#+8
    625                      
    626                    }
    627                    if ((pTxt[0]-48)>6)
   \                     ??WizFiResponseCommand_AT_NCTCP_2:
   \   000000A4   2878               LDRB     R0,[R5, #+0]
   \   000000A6   3038               SUBS     R0,R0,#+48
   \   000000A8   0728               CMP      R0,#+7
   \   000000AA   25DB               BLT      ??WizFiResponseCommand_AT_NCTCP_5
    628                    {
    629                     char BTS=0;
   \   000000AC   3000               MOVS     R0,R6
    630                     for (char i=0; i<sizeof(AT_NCLOSE); i++)  {Buff_TX[i]=AT_NCLOSE[i];   BTS++;}
   \   000000AE   3100               MOVS     R1,R6
   \   000000B0   07E0               B        ??WizFiResponseCommand_AT_NCTCP_6
   \                     ??WizFiResponseCommand_AT_NCTCP_7:
   \   000000B2   0A00               MOVS     R2,R1
   \   000000B4   304B               LDR      R3,??WizFiResponseCommand_AT_NCTCP_0+0xC  ;; AT_NCLOSE
   \   000000B6   9B5C               LDRB     R3,[R3, R2]
   \   000000B8   BB54               STRB     R3,[R7, R2]
   \   000000BA   401C               ADDS     R0,R0,#+1
   \   000000BC   0006               LSLS     R0,R0,#+24
   \   000000BE   000E               LSRS     R0,R0,#+24
   \   000000C0   491C               ADDS     R1,R1,#+1
   \                     ??WizFiResponseCommand_AT_NCTCP_6:
   \   000000C2   0B29               CMP      R1,#+11
   \   000000C4   F5D3               BCC      ??WizFiResponseCommand_AT_NCTCP_7
    631                     BTS--;
   \   000000C6   421E               SUBS     R2,R0,#+1
   \   000000C8   1206               LSLS     R2,R2,#+24
   \   000000CA   120E               LSRS     R2,R2,#+24
    632                     Buff_TX[BTS++]=pTxt[0]-1;
   \   000000CC   1000               MOVS     R0,R2
   \   000000CE   2978               LDRB     R1,[R5, #+0]
   \   000000D0   491E               SUBS     R1,R1,#+1
   \   000000D2   3954               STRB     R1,[R7, R0]
   \   000000D4   521C               ADDS     R2,R2,#+1
   \   000000D6   1206               LSLS     R2,R2,#+24
   \   000000D8   120E               LSRS     R2,R2,#+24
    633                     Buff_TX[BTS++]=0x0d; 
   \   000000DA   1000               MOVS     R0,R2
   \   000000DC   0D21               MOVS     R1,#+13
   \   000000DE   3954               STRB     R1,[R7, R0]
    634                     AT91F_US_SendFrame(USART,Buff_TX,BTS,0, 0);                        //Wysyla ramke  otwieraj¹c¹ po³¹czenie 
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000000E0   82B0               SUB      SP,SP,#+8
   \   000000E2   3000               MOVS     R0,R6
   \   000000E4   0090               STR      R0,[SP, #+0]
   \   000000E6   0300               MOVS     R3,R0
   \   000000E8   521C               ADDS     R2,R2,#+1
   \   000000EA   1206               LSLS     R2,R2,#+24
   \   000000EC   120E               LSRS     R2,R2,#+24
   \   000000EE   3900               MOVS     R1,R7
   \   000000F0   0498               LDR      R0,[SP, #+16]
   \   000000F2   ........           BL       AT91F_US_SendFrame
   \   000000F6   02B0               ADD      SP,SP,#+8
    635                      
    636                    }
    637                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \                     ??WizFiResponseCommand_AT_NCTCP_5:
   \   000000F8   3000               MOVS     R0,R6
   \   000000FA   3300               MOVS     R3,R6
   \   000000FC   04E0               B        ??WizFiResponseCommand_AT_NCTCP_8
   \                     ??WizFiResponseCommand_AT_NCTCP_9:
   \   000000FE   019A               LDR      R2,[SP, #+4]
   \   00000100   5354               STRB     R3,[R2, R1]
   \   00000102   401C               ADDS     R0,R0,#+1
   \   00000104   0006               LSLS     R0,R0,#+24
   \   00000106   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCTCP_8:
   \   00000108   0100               MOVS     R1,R0
   \   0000010A   3229               CMP      R1,#+50
   \   0000010C   F7D3               BCC      ??WizFiResponseCommand_AT_NCTCP_9
    638                    
    639                    
    640                    Net->Status.HostLink=CONNECTED;
   \   0000010E   0320               MOVS     R0,#+3
   \   00000110   6070               STRB     R0,[R4, #+1]
    641                    Net->Status.FreezTime=0;
   \   00000112   1800               MOVS     R0,R3
   \   00000114   0100               MOVS     R1,R0
   \   00000116   2064               STR      R0,[R4, #+64]
   \   00000118   6164               STR      R1,[R4, #+68]
    642                    Net->Status.Error=0;
   \   0000011A   6675               STRB     R6,[R4, #+21]
   \   0000011C   21E0               B        ??WizFiResponseCommand_AT_NCTCP_10
    643                    
    644                  
    645                    
    646                  }else if (strstr(Buff_RX, "[ERROR")!=NULL)
   \                     ??WizFiResponseCommand_AT_NCTCP_1:
   \   0000011E   1749               LDR      R1,??WizFiResponseCommand_AT_NCTCP_0+0x10  ;; AT_NCLOSE + 32
   \   00000120   0198               LDR      R0,[SP, #+4]
   \   00000122   ........           BL       strstr
   \   00000126   0028               CMP      R0,#+0
   \   00000128   1BD0               BEQ      ??WizFiResponseCommand_AT_NCTCP_10
    647                  {
    648                    if (strstr(Buff_RX, "NO CID]")!=NULL)
   \   0000012A   1549               LDR      R1,??WizFiResponseCommand_AT_NCTCP_0+0x14  ;; AT_NCLOSE + 24
   \   0000012C   0198               LDR      R0,[SP, #+4]
   \   0000012E   ........           BL       strstr
   \   00000132   0028               CMP      R0,#+0
   \   00000134   03D0               BEQ      ??WizFiResponseCommand_AT_NCTCP_11
    649                    {
    650                      
    651                      odp=0;
    652                      /*
    653                      for (char i=0; i<50; i++) Buff_RX[i]=0;                     
    654                      WizFiCommand_AT_NCLOSEALL(Buff_RX, Buff_TX, USART, Net);
    655                      Net->Status.Error++;
    656                      */
    657                      
    658                      //radykalne zabezpieczenie - tymczasowe(prawdopodobnie :-)  )
    659                      AT91C_BASE_RSTC->RSTC_RCR = AT91C_RSTC_PROCRST | AT91C_RSTC_PERRST | AT91C_RSTC_KEY;   //restart sterownika    
   \   00000136   1348               LDR      R0,??WizFiResponseCommand_AT_NCTCP_0+0x18  ;; 0xfffffd00
   \   00000138   1349               LDR      R1,??WizFiResponseCommand_AT_NCTCP_0+0x1C  ;; 0xa5000005
   \   0000013A   0160               STR      R1,[R0, #+0]
   \   0000013C   11E0               B        ??WizFiResponseCommand_AT_NCTCP_10
    660                      
    661                      
    662                    }else{
    663                      odp=0;
    664                      for (char i=0; i<50; i++) Buff_RX[i]=0;                    
   \                     ??WizFiResponseCommand_AT_NCTCP_11:
   \   0000013E   3300               MOVS     R3,R6
   \   00000140   04E0               B        ??WizFiResponseCommand_AT_NCTCP_12
   \                     ??WizFiResponseCommand_AT_NCTCP_13:
   \   00000142   019A               LDR      R2,[SP, #+4]
   \   00000144   5354               STRB     R3,[R2, R1]
   \   00000146   401C               ADDS     R0,R0,#+1
   \   00000148   0006               LSLS     R0,R0,#+24
   \   0000014A   000E               LSRS     R0,R0,#+24
   \                     ??WizFiResponseCommand_AT_NCTCP_12:
   \   0000014C   0100               MOVS     R1,R0
   \   0000014E   3229               CMP      R1,#+50
   \   00000150   F7D3               BCC      ??WizFiResponseCommand_AT_NCTCP_13
    665                      Net->Status.HostLink=DISCONNECTED;
   \   00000152   6670               STRB     R6,[R4, #+1]
    666                      Net->Status.FreezTime=0;
   \   00000154   1800               MOVS     R0,R3
   \   00000156   0100               MOVS     R1,R0
   \   00000158   2064               STR      R0,[R4, #+64]
   \   0000015A   6164               STR      R1,[R4, #+68]
    667                      
    668                      Net->Status.Error++;
   \   0000015C   607D               LDRB     R0,[R4, #+21]
   \   0000015E   401C               ADDS     R0,R0,#+1
   \   00000160   6075               STRB     R0,[R4, #+21]
    669                    }
    670                    
    671                  }
    672                    
    673          
    674             return odp;
   \                     ??WizFiResponseCommand_AT_NCTCP_10:
   \   00000162   6846               MOV      R0,SP
   \   00000164   0078               LDRB     R0,[R0, #+0]
   \   00000166   FEBC               POP      {R1-R7}
   \   00000168   02BC               POP      {R1}
   \   0000016A   0847               BX       R1               ;; return
   \                     ??WizFiResponseCommand_AT_NCTCP_0:
   \   0000016C   ........           DC32     AT_NCLOSE + 12
   \   00000170   ........           DC32     g_counter
   \   00000174   10270000           DC32     0x2710
   \   00000178   ........           DC32     AT_NCLOSE
   \   0000017C   ........           DC32     AT_NCLOSE + 32
   \   00000180   ........           DC32     AT_NCLOSE + 24
   \   00000184   00FDFFFF           DC32     0xfffffd00
   \   00000188   050000A5           DC32     0xa5000005
    675          }
    676          
    677          
    678          
    679          
    680           
    681          
    682          
    683          
    684          //funkcja konwertuje napis na wartoæ short int --------------------------------
    685          // Txt  -wskanik na ci¹g
    686          // Cyfr -funkcja zwraca iloæ cyfr w ci¹gu
    687          // funkcja zwraca wartoæ short int

   \                                 In section Debug.txt, align 4, keep-with-next
    688          signed short int StrToWord(char *String, char *Cyfr)
    689          {
   \                     StrToWord:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
    690             char *Txt=String;
   \   00000002   0023               MOVS     R3,#+0
    691             char LiczbaTab[5];
    692             char IlCyfr=0;
    693             signed char Min=1;
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   1400               MOVS     R4,R2
   \   00000008   08E0               B        ??StrToWord_0
    694             
    695             while ((((*Txt>='0') && (*Txt<='9')) || (*Txt=='-')) && (IlCyfr<5))
    696             {
    697                if (*Txt=='-')
    698                {
    699                   Min=-1;
    700                }else{
    701                   LiczbaTab[IlCyfr++]=*Txt-48;
   \                     ??StrToWord_1:
   \   0000000A   1F00               MOVS     R7,R3
   \   0000000C   6D46               MOV      R5,SP
   \   0000000E   0678               LDRB     R6,[R0, #+0]
   \   00000010   303E               SUBS     R6,R6,#+48
   \   00000012   EE55               STRB     R6,[R5, R7]
   \   00000014   5B1C               ADDS     R3,R3,#+1
   \   00000016   1B06               LSLS     R3,R3,#+24
   \   00000018   1B0E               LSRS     R3,R3,#+24
    702                }
    703                *Txt++;
   \                     ??StrToWord_2:
   \   0000001A   401C               ADDS     R0,R0,#+1
   \                     ??StrToWord_0:
   \   0000001C   0578               LDRB     R5,[R0, #+0]
   \   0000001E   302D               CMP      R5,#+48
   \   00000020   01D3               BCC      ??StrToWord_3
   \   00000022   3A2D               CMP      R5,#+58
   \   00000024   01D3               BCC      ??StrToWord_4
   \                     ??StrToWord_3:
   \   00000026   2D2D               CMP      R5,#+45
   \   00000028   08D1               BNE      ??StrToWord_5
   \                     ??StrToWord_4:
   \   0000002A   1D00               MOVS     R5,R3
   \   0000002C   052D               CMP      R5,#+5
   \   0000002E   05D2               BCS      ??StrToWord_5
   \   00000030   0578               LDRB     R5,[R0, #+0]
   \   00000032   2D2D               CMP      R5,#+45
   \   00000034   E9D1               BNE      ??StrToWord_1
   \   00000036   0024               MOVS     R4,#+0
   \   00000038   E443               MVNS     R4,R4            ;; #-1
   \   0000003A   EEE7               B        ??StrToWord_2
    704             }
    705             *Cyfr=IlCyfr;
   \                     ??StrToWord_5:
   \   0000003C   1800               MOVS     R0,R3
   \   0000003E   0870               STRB     R0,[R1, #+0]
    706             
    707             int Mnoz=1;
    708             signed short int Wartosc=0; 
   \   00000040   0020               MOVS     R0,#+0
   \   00000042   0CE0               B        ??StrToWord_6
    709             while (IlCyfr>0)
    710             {
    711                 Wartosc+=LiczbaTab[--IlCyfr]*Mnoz;
   \                     ??StrToWord_7:
   \   00000044   5B1E               SUBS     R3,R3,#+1
   \   00000046   1B06               LSLS     R3,R3,#+24
   \   00000048   1B0E               LSRS     R3,R3,#+24
   \   0000004A   1900               MOVS     R1,R3
   \   0000004C   6D46               MOV      R5,SP
   \   0000004E   695C               LDRB     R1,[R5, R1]
   \   00000050   1500               MOVS     R5,R2
   \   00000052   6943               MULS     R1,R5,R1
   \   00000054   4018               ADDS     R0,R0,R1
   \   00000056   0004               LSLS     R0,R0,#+16
   \   00000058   0014               ASRS     R0,R0,#+16
    712                 Mnoz*=10;
   \   0000005A   0A21               MOVS     R1,#+10
   \   0000005C   4A43               MULS     R2,R1,R2
    713             }
   \                     ??StrToWord_6:
   \   0000005E   1900               MOVS     R1,R3
   \   00000060   F0D1               BNE      ??StrToWord_7
    714             Wartosc*=Min;
    715             
    716             return Wartosc;
   \   00000062   6043               MULS     R0,R4,R0
   \   00000064   0004               LSLS     R0,R0,#+16
   \   00000066   0014               ASRS     R0,R0,#+16
   \   00000068   FEBC               POP      {R1-R7}
   \   0000006A   02BC               POP      {R1}
   \   0000006C   0847               BX       R1               ;; return
    717          }//_____________________________________________________________________________
    718          
    719          

   \                                 In section Debug.txt, align 4, keep-with-next
    720          unsigned short GetSpecialAnalogVar(char ZmSp)
    721          {
   \                     GetSpecialAnalogVar:
   \   00000000   01B5               PUSH     {R0,LR}
    722             char sc;
    723             
    724             if (ZmSp<ScreenNr)       //zmienne czujnika termostatu
   \   00000002   0828               CMP      R0,#+8
   \   00000004   1CD2               BCS      ??GetSpecialAnalogVar_0
    725             {
    726                  sc=ZmSp;
   \   00000006   1849               LDR      R1,??GetSpecialAnalogVar_1  ;; 0xbc27
   \   00000008   A022               MOVS     R2,#+160
   \   0000000A   5043               MULS     R0,R2,R0
   \   0000000C   174A               LDR      R2,??GetSpecialAnalogVar_1+0x4  ;; gProg
   \   0000000E   1018               ADDS     R0,R2,R0
   \   00000010   4118               ADDS     R1,R0,R1
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   0A56               LDRSB    R2,[R1, R0]
   \   00000016   002A               CMP      R2,#+0
   \   00000018   06D5               BPL      ??GetSpecialAnalogVar_2
    727                  if (gProg.Screen[sc].Thermo.SensorNode<0) //je¿eli zmienna
    728                     {
    729                       return VariablesAnal[gProg.Screen[sc].Thermo.SensorReg];
   \   0000001A   4878               LDRB     R0,[R1, #+1]
   \   0000001C   4000               LSLS     R0,R0,#+1
   \   0000001E   1449               LDR      R1,??GetSpecialAnalogVar_1+0x8  ;; VariablesAnal
   \   00000020   085E               LDRSH    R0,[R1, R0]
   \   00000022   0004               LSLS     R0,R0,#+16
   \   00000024   000C               LSRS     R0,R0,#+16
   \   00000026   1CE0               B        ??GetSpecialAnalogVar_3
    730                     }else{
    731                       return MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg];
   \                     ??GetSpecialAnalogVar_2:
   \   00000028   A020               MOVS     R0,#+160
   \   0000002A   4978               LDRB     R1,[R1, #+1]
   \   0000002C   4900               LSLS     R1,R1,#+1
   \   0000002E   1623               MOVS     R3,#+22
   \   00000030   5A43               MULS     R2,R3,R2
   \   00000032   104B               LDR      R3,??GetSpecialAnalogVar_1+0xC  ;; MainStage
   \   00000034   9A18               ADDS     R2,R3,R2
   \   00000036   5118               ADDS     R1,R2,R1
   \   00000038   085E               LDRSH    R0,[R1, R0]
   \   0000003A   0004               LSLS     R0,R0,#+16
   \   0000003C   000C               LSRS     R0,R0,#+16
   \   0000003E   10E0               B        ??GetSpecialAnalogVar_3
    732                     }
    733             }
    734             else if ((ZmSp>=10) && (ZmSp<10+ScreenNr))       //zmienne czujnika termostatu
   \                     ??GetSpecialAnalogVar_0:
   \   00000040   0A28               CMP      R0,#+10
   \   00000042   0DD3               BCC      ??GetSpecialAnalogVar_4
   \   00000044   1228               CMP      R0,#+18
   \   00000046   0BD2               BCS      ??GetSpecialAnalogVar_4
    735             {
    736                     sc=ZmSp-10;
    737                     return gProg.Screen[sc].Thermo.SetTemperature;
   \   00000048   0B49               LDR      R1,??GetSpecialAnalogVar_1+0x10  ;; 0xbc2e
   \   0000004A   0A38               SUBS     R0,R0,#+10
   \   0000004C   0006               LSLS     R0,R0,#+24
   \   0000004E   000E               LSRS     R0,R0,#+24
   \   00000050   A022               MOVS     R2,#+160
   \   00000052   5043               MULS     R0,R2,R0
   \   00000054   054A               LDR      R2,??GetSpecialAnalogVar_1+0x4  ;; gProg
   \   00000056   1018               ADDS     R0,R2,R0
   \   00000058   405E               LDRSH    R0,[R0, R1]
   \   0000005A   0004               LSLS     R0,R0,#+16
   \   0000005C   000C               LSRS     R0,R0,#+16
   \   0000005E   00E0               B        ??GetSpecialAnalogVar_3
    738              
    739             }
    740             return 0;
   \                     ??GetSpecialAnalogVar_4:
   \   00000060   0020               MOVS     R0,#+0
   \                     ??GetSpecialAnalogVar_3:
   \   00000062   08BC               POP      {R3}
   \   00000064   02BC               POP      {R1}
   \   00000066   0847               BX       R1               ;; return
   \                     ??GetSpecialAnalogVar_1:
   \   00000068   27BC0000           DC32     0xbc27
   \   0000006C   ........           DC32     gProg
   \   00000070   ........           DC32     VariablesAnal
   \   00000074   ........           DC32     MainStage
   \   00000078   2EBC0000           DC32     0xbc2e
    741            
    742          }
    743          
    744          

   \                                 In section Debug.txt, align 4, keep-with-next
    745          char GetSpecialBinarVar(char ZmSp)
    746          {
   \                     GetSpecialBinarVar:
   \   00000000   01B5               PUSH     {R0,LR}
    747             char sc;
    748            
    749             if (ZmSp<ScreenNr)       //zmienne  termostatu  AutoOn
   \   00000002   0828               CMP      R0,#+8
   \   00000004   06D2               BCS      ??GetSpecialBinarVar_0
    750             {
    751                  return gProg.Screen[ZmSp].Thermo.AutoOn;
   \   00000006   2349               LDR      R1,??GetSpecialBinarVar_1  ;; 0xbc26
   \   00000008   A022               MOVS     R2,#+160
   \   0000000A   5043               MULS     R0,R2,R0
   \   0000000C   224A               LDR      R2,??GetSpecialBinarVar_1+0x4  ;; gProg
   \   0000000E   1018               ADDS     R0,R2,R0
   \   00000010   405C               LDRB     R0,[R0, R1]
   \   00000012   3BE0               B        ??GetSpecialBinarVar_2
    752             }
    753             else if ((ZmSp>=10) && (ZmSp<10+ScreenNr))       //zmienne  termostatu Temp. zad w AutoOn
   \                     ??GetSpecialBinarVar_0:
   \   00000014   0A28               CMP      R0,#+10
   \   00000016   1DD3               BCC      ??GetSpecialBinarVar_3
   \   00000018   1228               CMP      R0,#+18
   \   0000001A   1BD2               BCS      ??GetSpecialBinarVar_3
    754             {
    755                 sc=ZmSp-10;
   \   0000001C   0A38               SUBS     R0,R0,#+10
   \   0000001E   0006               LSLS     R0,R0,#+24
   \   00000020   000E               LSRS     R0,R0,#+24
    756                char MaxTmp;
    757                if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
   \   00000022   1D49               LDR      R1,??GetSpecialBinarVar_1+0x4  ;; gProg
   \   00000024   1D4A               LDR      R2,??GetSpecialBinarVar_1+0x8  ;; 0xbc2a
   \   00000026   A023               MOVS     R3,#+160
   \   00000028   5843               MULS     R0,R3,R0
   \   0000002A   0818               ADDS     R0,R1,R0
   \   0000002C   8018               ADDS     R0,R0,R2
   \   0000002E   0221               MOVS     R1,#+2
   \   00000030   415E               LDRSH    R1,[R0, R1]
   \   00000032   0022               MOVS     R2,#+0
   \   00000034   825E               LDRSH    R2,[R0, R2]
   \   00000036   9142               CMP      R1,R2
   \   00000038   01DA               BGE      ??GetSpecialBinarVar_4
    758                {
    759                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[0]; 
   \   0000003A   0188               LDRH     R1,[R0, #+0]
   \   0000003C   00E0               B        ??GetSpecialBinarVar_5
    760                }else{
    761                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[1];
   \                     ??GetSpecialBinarVar_4:
   \   0000003E   4188               LDRH     R1,[R0, #+2]
    762                }
    763                
    764                if (gProg.Screen[sc].Thermo.SetTemperature==MaxTmp)
   \                     ??GetSpecialBinarVar_5:
   \   00000040   0422               MOVS     R2,#+4
   \   00000042   805E               LDRSH    R0,[R0, R2]
   \   00000044   0906               LSLS     R1,R1,#+24
   \   00000046   090E               LSRS     R1,R1,#+24
   \   00000048   8842               CMP      R0,R1
   \   0000004A   01D1               BNE      ??GetSpecialBinarVar_6
    765                {
    766                 return 1;  
   \   0000004C   0120               MOVS     R0,#+1
   \   0000004E   1DE0               B        ??GetSpecialBinarVar_2
    767                }else{
    768                 return 0;      
   \                     ??GetSpecialBinarVar_6:
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   1BE0               B        ??GetSpecialBinarVar_2
    769                }     
    770                    
    771                  
    772             }
    773             else if ((ZmSp>=40) && (ZmSp<40+ScreenNr))       //zmienne  termostatu Temp. zad w AutoOn
   \                     ??GetSpecialBinarVar_3:
   \   00000054   2828               CMP      R0,#+40
   \   00000056   18D3               BCC      ??GetSpecialBinarVar_7
   \   00000058   3028               CMP      R0,#+48
   \   0000005A   16D2               BCS      ??GetSpecialBinarVar_7
    774             {
    775                sc=ZmSp-40;
   \   0000005C   2838               SUBS     R0,R0,#+40
   \   0000005E   0006               LSLS     R0,R0,#+24
   \   00000060   000E               LSRS     R0,R0,#+24
    776                
    777                return PortStageRead(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port , gProg.Screen[sc].Thermo.ActorPort);
   \   00000062   0D49               LDR      R1,??GetSpecialBinarVar_1+0x4  ;; gProg
   \   00000064   0E4A               LDR      R2,??GetSpecialBinarVar_1+0xC  ;; 0xbc24
   \   00000066   A023               MOVS     R3,#+160
   \   00000068   5843               MULS     R0,R3,R0
   \   0000006A   0818               ADDS     R0,R1,R0
   \   0000006C   8018               ADDS     R0,R0,R2
   \   0000006E   4178               LDRB     R1,[R0, #+1]
   \   00000070   0C4A               LDR      R2,??GetSpecialBinarVar_1+0x10  ;; 0x3a2
   \   00000072   0023               MOVS     R3,#+0
   \   00000074   C056               LDRSB    R0,[R0, R3]
   \   00000076   1623               MOVS     R3,#+22
   \   00000078   5843               MULS     R0,R3,R0
   \   0000007A   0B4B               LDR      R3,??GetSpecialBinarVar_1+0x14  ;; MainStage
   \   0000007C   1818               ADDS     R0,R3,R0
   \   0000007E   805A               LDRH     R0,[R0, R2]
   \   00000080   0004               LSLS     R0,R0,#+16
   \   00000082   0014               ASRS     R0,R0,#+16
   \   00000084   ........           BL       PortStageRead
   \   00000088   00E0               B        ??GetSpecialBinarVar_2
    778             }
    779             
    780             return 0;
   \                     ??GetSpecialBinarVar_7:
   \   0000008A   0020               MOVS     R0,#+0
   \                     ??GetSpecialBinarVar_2:
   \   0000008C   08BC               POP      {R3}
   \   0000008E   02BC               POP      {R1}
   \   00000090   0847               BX       R1               ;; return
   \   00000092   C046               Nop      
   \                     ??GetSpecialBinarVar_1:
   \   00000094   26BC0000           DC32     0xbc26
   \   00000098   ........           DC32     gProg
   \   0000009C   2ABC0000           DC32     0xbc2a
   \   000000A0   24BC0000           DC32     0xbc24
   \   000000A4   A2030000           DC32     0x3a2
   \   000000A8   ........           DC32     MainStage
    781          }  
    782            
    783          
    784          
    785          
    786          

   \                                 In section Debug.txt, align 4, keep-with-next
    787          void SetSpecialBinarVar(char ZmSp, char Val, _Net *Net)
    788          {
   \                     SetSpecialBinarVar:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    789             char sc;
    790            
    791             if (ZmSp<ScreenNr)       //zmienne  termostatu  AutoOn
   \   00000002   0828               CMP      R0,#+8
   \   00000004   17D2               BCS      ??SetSpecialBinarVar_0
    792             {
    793                 
    794                if (Val) gProg.Screen[ZmSp].Thermo.AutoOn=1; else gProg.Screen[ZmSp].Thermo.AutoOn=0;
   \   00000006   324B               LDR      R3,??SetSpecialBinarVar_1  ;; 0xbc26
   \   00000008   A024               MOVS     R4,#+160
   \   0000000A   6043               MULS     R0,R4,R0
   \   0000000C   314C               LDR      R4,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   0000000E   2018               ADDS     R0,R4,R0
   \   00000010   0C00               MOVS     R4,R1
   \   00000012   641E               SUBS     R4,R4,#+1
   \   00000014   A441               SBCS     R4,R4,R4
   \   00000016   E443               MVNS     R4,R4
   \   00000018   E40F               LSRS     R4,R4,#+31
   \   0000001A   C454               STRB     R4,[R0, R3]
    795                Net->Status.NextHttpOrder=HTTP_POST;
   \                     ??SetSpecialBinarVar_2:
   \   0000001C   1120               MOVS     R0,#+17
   \   0000001E   D070               STRB     R0,[R2, #+3]
    796                ThermostatsTimeChartExecute(); 
   \   00000020   ........           BL       ThermostatsTimeChartExecute
    797                ThermostatsExecute();
   \   00000024   ........           BL       ThermostatsExecute
    798                MenuPaint();
   \   00000028   ........           BL       MenuPaint
    799                ExecuteSpecialThermVar();
                       ^
Warning[Pe223]: function "ExecuteSpecialThermVar" declared implicitly
   \   0000002C   ........           BL       ExecuteSpecialThermVar
    800                 
    801             }
    802             else if ((ZmSp>=10) && (ZmSp<10+ScreenNr))       //zmienne  termostatu Temp. zad w AutoOn
    803             {
    804                sc=ZmSp-10;
    805                char MaxTmp;
    806                char MinTmp;
    807                if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    808                {
    809                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    810                  MinTmp=gProg.Screen[sc].Thermo.Temperature[1];
    811                }else{
    812                  MaxTmp=gProg.Screen[sc].Thermo.Temperature[1];
    813                  MinTmp=gProg.Screen[sc].Thermo.Temperature[0];
    814                }
    815                
    816                if (Val)
    817                {
    818                    gProg.Screen[sc].Thermo.SetTemperature=MaxTmp;
    819                }else{
    820                    gProg.Screen[sc].Thermo.SetTemperature=MinTmp; 
    821                }
    822                Net->Status.NextHttpOrder=HTTP_POST;
    823                ThermostatsTimeChartExecute(); 
    824                ThermostatsExecute();
    825                MenuPaint();
    826                ExecuteSpecialThermVar();
                       ^
Warning[Pe223]: function "ExecuteSpecialThermVar" declared implicitly
    827             }else if ((ZmSp>=20) && (ZmSp<20+ScreenNr))       //zmienne  termostatu temp+ w trybie Auto
    828             {
    829                sc=ZmSp-20;
    830                if ((gProg.Screen[sc].Thermo.SetTemperature)<500) {gProg.Screen[sc].Thermo.SetTemperature++;}
    831                Net->Status.NextHttpOrder=HTTP_POST;
    832                ThermostatsTimeChartExecute(); 
    833                ThermostatsExecute();
    834                MenuPaint();
    835                ExecuteSpecialThermVar();
                       ^
Warning[Pe223]: function "ExecuteSpecialThermVar" declared implicitly
    836             }else if ((ZmSp>=30) && (ZmSp<30+ScreenNr))       //zmienne  termostatu temp+ w trybie Auto
    837             {
    838                sc=ZmSp-30;
    839                if ((gProg.Screen[sc].Thermo.SetTemperature)>0) {gProg.Screen[sc].Thermo.SetTemperature--;}
    840                Net->Status.NextHttpOrder=HTTP_POST;
    841                ThermostatsTimeChartExecute(); 
    842                ThermostatsExecute();
    843                MenuPaint();
    844                ExecuteSpecialThermVar();
                       ^
Warning[Pe223]: function "ExecuteSpecialThermVar" declared implicitly
    845             }
    846          
    847          }  
   \                     ??SetSpecialBinarVar_3:
   \   00000030   38BC               POP      {R3-R5}
   \   00000032   01BC               POP      {R0}
   \   00000034   0047               BX       R0               ;; return
   \                     ??SetSpecialBinarVar_0:
   \   00000036   0A28               CMP      R0,#+10
   \   00000038   1FD3               BCC      ??SetSpecialBinarVar_4
   \   0000003A   1228               CMP      R0,#+18
   \   0000003C   1DD2               BCS      ??SetSpecialBinarVar_4
   \   0000003E   0A38               SUBS     R0,R0,#+10
   \   00000040   0006               LSLS     R0,R0,#+24
   \   00000042   000E               LSRS     R0,R0,#+24
   \   00000044   234B               LDR      R3,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   00000046   244C               LDR      R4,??SetSpecialBinarVar_1+0x8  ;; 0xbc2a
   \   00000048   A025               MOVS     R5,#+160
   \   0000004A   6843               MULS     R0,R5,R0
   \   0000004C   1818               ADDS     R0,R3,R0
   \   0000004E   0019               ADDS     R0,R0,R4
   \   00000050   0223               MOVS     R3,#+2
   \   00000052   C35E               LDRSH    R3,[R0, R3]
   \   00000054   0024               MOVS     R4,#+0
   \   00000056   045F               LDRSH    R4,[R0, R4]
   \   00000058   A342               CMP      R3,R4
   \   0000005A   02DA               BGE      ??SetSpecialBinarVar_5
   \   0000005C   0388               LDRH     R3,[R0, #+0]
   \   0000005E   4488               LDRH     R4,[R0, #+2]
   \   00000060   01E0               B        ??SetSpecialBinarVar_6
   \                     ??SetSpecialBinarVar_5:
   \   00000062   4388               LDRH     R3,[R0, #+2]
   \   00000064   0488               LDRH     R4,[R0, #+0]
   \                     ??SetSpecialBinarVar_6:
   \   00000066   0029               CMP      R1,#+0
   \   00000068   03D0               BEQ      ??SetSpecialBinarVar_7
   \   0000006A   1B06               LSLS     R3,R3,#+24
   \   0000006C   1B0E               LSRS     R3,R3,#+24
   \   0000006E   8380               STRH     R3,[R0, #+4]
   \   00000070   D4E7               B        ??SetSpecialBinarVar_2
   \                     ??SetSpecialBinarVar_7:
   \   00000072   2406               LSLS     R4,R4,#+24
   \   00000074   240E               LSRS     R4,R4,#+24
   \   00000076   8480               STRH     R4,[R0, #+4]
   \   00000078   D0E7               B        ??SetSpecialBinarVar_2
   \                     ??SetSpecialBinarVar_4:
   \   0000007A   1428               CMP      R0,#+20
   \   0000007C   13D3               BCC      ??SetSpecialBinarVar_8
   \   0000007E   1C28               CMP      R0,#+28
   \   00000080   11D2               BCS      ??SetSpecialBinarVar_8
   \   00000082   1438               SUBS     R0,R0,#+20
   \   00000084   0006               LSLS     R0,R0,#+24
   \   00000086   000E               LSRS     R0,R0,#+24
   \   00000088   124B               LDR      R3,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   0000008A   1449               LDR      R1,??SetSpecialBinarVar_1+0xC  ;; 0xbc2e
   \   0000008C   A024               MOVS     R4,#+160
   \   0000008E   6043               MULS     R0,R4,R0
   \   00000090   1818               ADDS     R0,R3,R0
   \   00000092   4018               ADDS     R0,R0,R1
   \   00000094   0021               MOVS     R1,#+0
   \   00000096   415E               LDRSH    R1,[R0, R1]
   \   00000098   FA23               MOVS     R3,#+250
   \   0000009A   5B00               LSLS     R3,R3,#+1        ;; #+500
   \   0000009C   9942               CMP      R1,R3
   \   0000009E   BDDA               BGE      ??SetSpecialBinarVar_2
   \   000000A0   491C               ADDS     R1,R1,#+1
   \   000000A2   0180               STRH     R1,[R0, #+0]
   \   000000A4   BAE7               B        ??SetSpecialBinarVar_2
   \                     ??SetSpecialBinarVar_8:
   \   000000A6   1E28               CMP      R0,#+30
   \   000000A8   C2D3               BCC      ??SetSpecialBinarVar_3
   \   000000AA   2628               CMP      R0,#+38
   \   000000AC   C0D2               BCS      ??SetSpecialBinarVar_3
   \   000000AE   1E38               SUBS     R0,R0,#+30
   \   000000B0   0006               LSLS     R0,R0,#+24
   \   000000B2   000E               LSRS     R0,R0,#+24
   \   000000B4   074B               LDR      R3,??SetSpecialBinarVar_1+0x4  ;; gProg
   \   000000B6   0949               LDR      R1,??SetSpecialBinarVar_1+0xC  ;; 0xbc2e
   \   000000B8   A024               MOVS     R4,#+160
   \   000000BA   6043               MULS     R0,R4,R0
   \   000000BC   1818               ADDS     R0,R3,R0
   \   000000BE   4018               ADDS     R0,R0,R1
   \   000000C0   0021               MOVS     R1,#+0
   \   000000C2   415E               LDRSH    R1,[R0, R1]
   \   000000C4   0129               CMP      R1,#+1
   \   000000C6   A9DB               BLT      ??SetSpecialBinarVar_2
   \   000000C8   491E               SUBS     R1,R1,#+1
   \   000000CA   0180               STRH     R1,[R0, #+0]
   \   000000CC   A6E7               B        ??SetSpecialBinarVar_2
   \   000000CE   C046               Nop      
   \                     ??SetSpecialBinarVar_1:
   \   000000D0   26BC0000           DC32     0xbc26
   \   000000D4   ........           DC32     gProg
   \   000000D8   2ABC0000           DC32     0xbc2a
   \   000000DC   2EBC0000           DC32     0xbc2e
    848            
    849          
    850          
    851          //Funkcja wys³ania zadania HTTP

   \                                 In section Debug.txt, align 4, keep-with-next
    852          void HTTP_Query(char *Buff_RX, char *Buff_TX,  AT91PS_USART USART, _Net *Net)
    853          {
   \                     HTTP_Query:
   \   00000000   FDB5               PUSH     {R0,R2-R7,LR}
   \   00000002   8AB0               SUB      SP,SP,#+40
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   04E0               B        ??HTTP_Query_0
    854          
    855                          
    856                     //wysy³anie danych ------------------------------------
    857                     
    858                     short BTS=0;
    859                     for (short i=0; i<sizeof(Buff_TX); i++) Buff_TX[i]=0;
   \                     ??HTTP_Query_1:
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   2154               STRB     R1,[R4, R0]
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   0004               LSLS     R0,R0,#+16
   \   00000012   0014               ASRS     R0,R0,#+16
   \                     ??HTTP_Query_0:
   \   00000014   0100               MOVS     R1,R0
   \   00000016   0904               LSLS     R1,R1,#+16
   \   00000018   090C               LSRS     R1,R1,#+16
   \   0000001A   0429               CMP      R1,#+4
   \   0000001C   F5D3               BCC      ??HTTP_Query_1
   \   0000001E   1B20               MOVS     R0,#+27
   \   00000020   2070               STRB     R0,[R4, #+0]
    860                     Buff_TX[BTS++]=0x1B;
    861                     Buff_TX[BTS++]='S';
   \   00000022   5320               MOVS     R0,#+83
   \   00000024   6070               STRB     R0,[R4, #+1]
    862                     Buff_TX[BTS++]=Net->Status.HostChannel;     //numer kana³u [przydzielony przez serwer
   \   00000026   0C98               LDR      R0,[SP, #+48]
   \   00000028   401C               ADDS     R0,R0,#+1
   \   0000002A   0290               STR      R0,[SP, #+8]
   \   0000002C   407D               LDRB     R0,[R0, #+21]
   \   0000002E   A070               STRB     R0,[R4, #+2]
   \   00000030   0325               MOVS     R5,#+3
    863                     
    864                                               
    865                     char Send=0; 
   \   00000032   0026               MOVS     R6,#+0
    866                     char txt[16]; 
    867                     //czyszczenie bufora nadawczego
    868                     char *PozIlByte;
    869                     switch (Net->Status.CurrentOrder)     
   \   00000034   0298               LDR      R0,[SP, #+8]
   \   00000036   4078               LDRB     R0,[R0, #+1]
   \   00000038   1128               CMP      R0,#+17
   \   0000003A   00D1               BNE      .+4
   \   0000003C   9FE0               B        ??HTTP_Query_2
   \   0000003E   1228               CMP      R0,#+18
   \   00000040   50D0               BEQ      ??HTTP_Query_3
   \   00000042   1328               CMP      R0,#+19
   \   00000044   01D0               BEQ      .+6
   \   00000046   00F012FC           BL       ??HTTP_Query_4
    870                     {
    871                        case HTTP_GET_Config:              //proba o podanie konfiguracji zestawu zmiennych
    872                              strcat(Buff_TX,"GET ");
   \   0000004A   DC4D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   0000004C   2900               MOVS     R1,R5
   \   0000004E   2000               MOVS     R0,R4
   \   00000050   ........           BL       strcat
    873                              strcat(Buff_TX,Net->WiFi.Path);
   \   00000054   0C99               LDR      R1,[SP, #+48]
   \   00000056   DB31               ADDS     R1,R1,#+219
   \   00000058   2000               MOVS     R0,R4
   \   0000005A   ........           BL       strcat
    874                              strcat(Buff_TX,"/dc");
   \   0000005E   D8A1               ADR      R1,??HTTP_Query_5+0x4  ;; "/dc"
   \   00000060   2000               MOVS     R0,R4
   \   00000062   ........           BL       strcat
    875                              sprintf(txt, "%d",RF_ID_R);
                                     ^
Warning[Pe223]: function "sprintf" declared implicitly
   \   00000066   D74A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x2f4ded
   \   00000068   D7A1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   0000006A   05A8               ADD      R0,SP,#+20
   \   0000006C   ........           BL       sprintf
    876                              strcat(Buff_TX,txt);
   \   00000070   05A9               ADD      R1,SP,#+20
   \   00000072   2000               MOVS     R0,R4
   \   00000074   ........           BL       strcat
    877                              strcat(Buff_TX,".csv HTTP/1.1\r\n");
   \   00000078   2900               MOVS     R1,R5
   \   0000007A   0831               ADDS     R1,R1,#+8
   \   0000007C   2000               MOVS     R0,R4
   \   0000007E   ........           BL       strcat
    878                              strcat(Buff_TX,"User-Agent: CEURON\r\nHost: ");
   \   00000082   2900               MOVS     R1,R5
   \   00000084   1831               ADDS     R1,R1,#+24
   \   00000086   2000               MOVS     R0,R4
   \   00000088   ........           BL       strcat
    879                              if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) {strcat(Buff_TX,Net->WiFi.Subdomena); strcat(Buff_TX,".");}
   \   0000008C   0C98               LDR      R0,[SP, #+48]
   \   0000008E   CC30               ADDS     R0,R0,#+204
   \   00000090   0178               LDRB     R1,[R0, #+0]
   \   00000092   3029               CMP      R1,#+48
   \   00000094   0BD3               BCC      ??HTTP_Query_6
   \   00000096   0800               MOVS     R0,R1
   \   00000098   7B28               CMP      R0,#+123
   \   0000009A   08D2               BCS      ??HTTP_Query_6
   \   0000009C   0C99               LDR      R1,[SP, #+48]
   \   0000009E   CC31               ADDS     R1,R1,#+204
   \   000000A0   2000               MOVS     R0,R4
   \   000000A2   ........           BL       strcat
   \   000000A6   C9A1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x2E, 0x00, 0x00, 0x00
   \   000000A8   2000               MOVS     R0,R4
   \   000000AA   ........           BL       strcat
    880                              strcat(Buff_TX,Net->WiFi.Domena);
   \                     ??HTTP_Query_6:
   \   000000AE   0C99               LDR      R1,[SP, #+48]
   \   000000B0   BD31               ADDS     R1,R1,#+189
   \   000000B2   2000               MOVS     R0,R4
   \   000000B4   ........           BL       strcat
    881                              strcat(Buff_TX,"\r\n");
   \   000000B8   C5A1               ADR      R1,??HTTP_Query_5+0x14  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000000BA   2000               MOVS     R0,R4
   \   000000BC   ........           BL       strcat
    882                              strcat(Buff_TX,"Connection: keep-alive\r\n");
   \   000000C0   2900               MOVS     R1,R5
   \   000000C2   3431               ADDS     R1,R1,#+52
   \   000000C4   2000               MOVS     R0,R4
   \   000000C6   ........           BL       strcat
    883                              strcat(Buff_TX,"\r\n\r\n");
   \   000000CA   5035               ADDS     R5,R5,#+80
   \   000000CC   2900               MOVS     R1,R5
   \   000000CE   2000               MOVS     R0,R4
   \   000000D0   ........           BL       strcat
    884                              BTS=strlen(Buff_TX);
   \   000000D4   2000               MOVS     R0,R4
   \   000000D6   ........           BL       strlen
   \   000000DA   0500               MOVS     R5,R0
   \   000000DC   2D04               LSLS     R5,R5,#+16
   \   000000DE   2D14               ASRS     R5,R5,#+16
    885                              Send=1;
   \   000000E0   0126               MOVS     R6,#+1
   \   000000E2   C4E3               B        ??HTTP_Query_4
    886          
    887                        break; 
    888                        
    889                        case HTTP_GET:              //proba o podanie konfiguracji zestawu zmiennych
    890                              strcat(Buff_TX,"GET ");
   \                     ??HTTP_Query_3:
   \   000000E4   B54D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   000000E6   2900               MOVS     R1,R5
   \   000000E8   2000               MOVS     R0,R4
   \   000000EA   ........           BL       strcat
    891                              strcat(Buff_TX,Net->WiFi.Path);
   \   000000EE   0C99               LDR      R1,[SP, #+48]
   \   000000F0   DB31               ADDS     R1,R1,#+219
   \   000000F2   2000               MOVS     R0,R4
   \   000000F4   ........           BL       strcat
    892                              strcat(Buff_TX,"/do");
   \   000000F8   B6A1               ADR      R1,??HTTP_Query_5+0x18  ;; "/do"
   \   000000FA   2000               MOVS     R0,R4
   \   000000FC   ........           BL       strcat
    893                              sprintf(txt, "%d",RF_ID_R);
   \   00000100   B04A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x2f4ded
   \   00000102   B1A1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   00000104   05A8               ADD      R0,SP,#+20
   \   00000106   ........           BL       sprintf
    894                              strcat(Buff_TX,txt);
   \   0000010A   05A9               ADD      R1,SP,#+20
   \   0000010C   2000               MOVS     R0,R4
   \   0000010E   ........           BL       strcat
    895                              strcat(Buff_TX,".csv HTTP/1.1\r\n");
   \   00000112   2900               MOVS     R1,R5
   \   00000114   0831               ADDS     R1,R1,#+8
   \   00000116   2000               MOVS     R0,R4
   \   00000118   ........           BL       strcat
    896                              strcat(Buff_TX,"User-Agent: CEURON\r\nHost: ");
   \   0000011C   2900               MOVS     R1,R5
   \   0000011E   1831               ADDS     R1,R1,#+24
   \   00000120   2000               MOVS     R0,R4
   \   00000122   ........           BL       strcat
    897                              if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) {strcat(Buff_TX,Net->WiFi.Subdomena); strcat(Buff_TX,".");}
   \   00000126   0C98               LDR      R0,[SP, #+48]
   \   00000128   CC30               ADDS     R0,R0,#+204
   \   0000012A   0178               LDRB     R1,[R0, #+0]
   \   0000012C   3029               CMP      R1,#+48
   \   0000012E   0BD3               BCC      ??HTTP_Query_7
   \   00000130   0800               MOVS     R0,R1
   \   00000132   7B28               CMP      R0,#+123
   \   00000134   08D2               BCS      ??HTTP_Query_7
   \   00000136   0C99               LDR      R1,[SP, #+48]
   \   00000138   CC31               ADDS     R1,R1,#+204
   \   0000013A   2000               MOVS     R0,R4
   \   0000013C   ........           BL       strcat
   \   00000140   A2A1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x2E, 0x00, 0x00, 0x00
   \   00000142   2000               MOVS     R0,R4
   \   00000144   ........           BL       strcat
    898                              strcat(Buff_TX,Net->WiFi.Domena);
   \                     ??HTTP_Query_7:
   \   00000148   0C99               LDR      R1,[SP, #+48]
   \   0000014A   BD31               ADDS     R1,R1,#+189
   \   0000014C   2000               MOVS     R0,R4
   \   0000014E   ........           BL       strcat
    899                              strcat(Buff_TX,"\r\n");
   \   00000152   9FA1               ADR      R1,??HTTP_Query_5+0x14  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000154   2000               MOVS     R0,R4
   \   00000156   ........           BL       strcat
    900                              strcat(Buff_TX,"Connection: keep-alive\r\n");
   \   0000015A   2900               MOVS     R1,R5
   \   0000015C   3431               ADDS     R1,R1,#+52
   \   0000015E   2000               MOVS     R0,R4
   \   00000160   ........           BL       strcat
    901                              strcat(Buff_TX,"\r\n\r\n");
   \   00000164   5035               ADDS     R5,R5,#+80
   \   00000166   2900               MOVS     R1,R5
   \   00000168   2000               MOVS     R0,R4
   \   0000016A   ........           BL       strcat
    902                              BTS=strlen(Buff_TX);
   \   0000016E   2000               MOVS     R0,R4
   \   00000170   ........           BL       strlen
   \   00000174   0500               MOVS     R5,R0
   \   00000176   2D04               LSLS     R5,R5,#+16
   \   00000178   2D14               ASRS     R5,R5,#+16
    903                               Send=1;
   \   0000017A   0126               MOVS     R6,#+1
   \   0000017C   77E3               B        ??HTTP_Query_4
    904                              
    905                              
    906                        break; 
    907                        
    908                        case HTTP_POST:                   //wys³anie zmiennych
    909                              
    910                              //obliczenie max iloci wysy³anych danych
    911                              //151B(Nag³ówek i stopka) + 45B(Path,Subdomena,Domena) + 40(10B x VAR_SET_AMOUNT lub 7B x VAR_SET_AMOUNT dla dwustanów)  = max 596B. Przy samych dwustanach 476B
    912                              strcat(Buff_TX,"POST ");
   \                     ??HTTP_Query_2:
   \   0000017E   8F4D               LDR      R5,??HTTP_Query_5  ;; `?<Constant "GET ">`
   \   00000180   2900               MOVS     R1,R5
   \   00000182   5831               ADDS     R1,R1,#+88
   \   00000184   2000               MOVS     R0,R4
   \   00000186   ........           BL       strcat
    913                              strcat(Buff_TX,Net->WiFi.Path);
   \   0000018A   0C99               LDR      R1,[SP, #+48]
   \   0000018C   DB31               ADDS     R1,R1,#+219
   \   0000018E   2000               MOVS     R0,R4
   \   00000190   ........           BL       strcat
    914                              strcat(Buff_TX,"/putgate.php HTTP/1.1\r\nUser-Agent: CEURON\r\nHost: ");
   \   00000194   2900               MOVS     R1,R5
   \   00000196   6031               ADDS     R1,R1,#+96
   \   00000198   2000               MOVS     R0,R4
   \   0000019A   ........           BL       strcat
    915                              if ((Net->WiFi.Subdomena[0]>47)&&(Net->WiFi.Subdomena[0]<123)) {strcat(Buff_TX,Net->WiFi.Subdomena); strcat(Buff_TX,".");}
   \   0000019E   0C98               LDR      R0,[SP, #+48]
   \   000001A0   CC30               ADDS     R0,R0,#+204
   \   000001A2   0178               LDRB     R1,[R0, #+0]
   \   000001A4   3029               CMP      R1,#+48
   \   000001A6   0BD3               BCC      ??HTTP_Query_8
   \   000001A8   0800               MOVS     R0,R1
   \   000001AA   7B28               CMP      R0,#+123
   \   000001AC   08D2               BCS      ??HTTP_Query_8
   \   000001AE   0C99               LDR      R1,[SP, #+48]
   \   000001B0   CC31               ADDS     R1,R1,#+204
   \   000001B2   2000               MOVS     R0,R4
   \   000001B4   ........           BL       strcat
   \   000001B8   84A1               ADR      R1,??HTTP_Query_5+0x10  ;; 0x2E, 0x00, 0x00, 0x00
   \   000001BA   2000               MOVS     R0,R4
   \   000001BC   ........           BL       strcat
    916                              strcat(Buff_TX,Net->WiFi.Domena);
   \                     ??HTTP_Query_8:
   \   000001C0   0C99               LDR      R1,[SP, #+48]
   \   000001C2   BD31               ADDS     R1,R1,#+189
   \   000001C4   2000               MOVS     R0,R4
   \   000001C6   ........           BL       strcat
    917                              strcat(Buff_TX,"\r\nContent-Length: ");
   \   000001CA   2900               MOVS     R1,R5
   \   000001CC   9431               ADDS     R1,R1,#+148
   \   000001CE   2000               MOVS     R0,R4
   \   000001D0   ........           BL       strcat
    918                              char PozLength=strlen(Buff_TX);
   \   000001D4   2000               MOVS     R0,R4
   \   000001D6   ........           BL       strlen
   \   000001DA   6946               MOV      R1,SP
   \   000001DC   0873               STRB     R0,[R1, #+12]
    919                      
    920                              strcat(Buff_TX,"   ");
   \   000001DE   7EA1               ADR      R1,??HTTP_Query_5+0x1C  ;; "   "
   \   000001E0   2000               MOVS     R0,R4
   \   000001E2   ........           BL       strcat
    921                              strcat(Buff_TX,"\r\nContent-Type: application/x-www-form-urlencoded\r\n\r\nNodeID=");
   \   000001E6   2900               MOVS     R1,R5
   \   000001E8   A831               ADDS     R1,R1,#+168
   \   000001EA   2000               MOVS     R0,R4
   \   000001EC   ........           BL       strcat
    922                              sprintf(txt, "%d",RF_ID_R);
   \   000001F0   744A               LDR      R2,??HTTP_Query_5+0x8  ;; 0x2f4ded
   \   000001F2   75A1               ADR      R1,??HTTP_Query_5+0xC  ;; 0x25, 0x64, 0x00, 0x00
   \   000001F4   05A8               ADD      R0,SP,#+20
   \   000001F6   ........           BL       sprintf
    923                              strcat(Buff_TX,txt);
   \   000001FA   05A9               ADD      R1,SP,#+20
   \   000001FC   2000               MOVS     R0,R4
   \   000001FE   ........           BL       strcat
    924                              strcat(Buff_TX,"&Order=1&Content=;\r\n");
   \   00000202   E835               ADDS     R5,R5,#+232
   \   00000204   2900               MOVS     R1,R5
   \   00000206   2000               MOVS     R0,R4
   \   00000208   ........           BL       strcat
    925                              BTS=strlen(Buff_TX);
   \   0000020C   2000               MOVS     R0,R4
   \   0000020E   ........           BL       strlen
   \   00000212   0500               MOVS     R5,R0
   \   00000214   2D04               LSLS     R5,R5,#+16
   \   00000216   2D14               ASRS     R5,R5,#+16
    926                              //oko³o 179 byte do tej pory
    927                              char ContentLength=34;
   \   00000218   2227               MOVS     R7,#+34
    928                              char ilLit=0;
    929                              for (char VSN=0; VSN<Net->HTTP.VarSetCount; VSN++)
   \   0000021A   3000               MOVS     R0,R6
   \   0000021C   0190               STR      R0,[SP, #+4]
   \   0000021E   1AE0               B        ??HTTP_Query_9
    930                              {
    931                                switch (Net->HTTP.NetNodeSet[VSN].NetDataType)
    932                                {
    933                                  case 'a':  //jezeli zmienna analogowa
    934                                        
    935                                        Buff_TX[BTS++]='a';
    936                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr/10)+48;
    937                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr%10)+48;
    938                                        Buff_TX[BTS++]=';';
    939                                        
    940                                        if (VariablesAnal[Net->HTTP.NetNodeSet[VSN].VarNr]==(signed short)0x8000)
    941                                        {
    942                                           Buff_TX[BTS++]='B';
    943                                           Buff_TX[BTS++]='A';
    944                                           Buff_TX[BTS++]='T';
    945                                        }else{  
    946                                         
    947                                          if ((VariablesAnal[Net->HTTP.NetNodeSet[VSN].VarNr])>999)
    948                                          {
    949                                            Buff_TX[BTS++]='>';
    950                                            Buff_TX[BTS++]='M';
    951                                            Buff_TX[BTS++]='A';
    952                                            Buff_TX[BTS++]='X';
    953                                          }
    954                                          else if ((VariablesAnal[Net->HTTP.NetNodeSet[VSN].VarNr])<-999)
    955                                          {
    956                                            Buff_TX[BTS++]='-';
    957                                            Buff_TX[BTS++]='M';
    958                                            Buff_TX[BTS++]='I';
    959                                            Buff_TX[BTS++]='N';
    960                                          }else{
    961                                            ilLit=sIntToStr(VariablesAnal[Net->HTTP.NetNodeSet[VSN].VarNr],&Buff_TX[BTS]);
    962                                            BTS+=ilLit;
    963             
    964                                          for (char i=ilLit; i<4; i++) {Buff_TX[BTS++]=' ';}
    965                                          }
    966                                        }
    967                                        
    968                                        Buff_TX[BTS++]=0xd;
    969                                        Buff_TX[BTS++]=0xa;
    970                                        ContentLength+=10;
    971                                          
    972                                  break;
    973                                  
    974                                  case 'b':  //jezeli zmienna dwustanowa
    975                                        Buff_TX[BTS++]='b';
    976                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr/10)+48;
    977                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr%10)+48;
    978                                        Buff_TX[BTS++]=';';
    979                                        Net->HTTP.NetNodeSet[VSN].Value=((Variables[Net->HTTP.NetNodeSet[VSN].VarNr/8]>>(Net->HTTP.NetNodeSet[VSN].VarNr%8))&0x1);
    980                                        Buff_TX[BTS++]=Net->HTTP.NetNodeSet[VSN].Value+48;
    981                                        Buff_TX[BTS++]=0xd;
    982                                        Buff_TX[BTS++]=0xa;
    983                                        ContentLength+=7;
    984                                  break;
    985                                  
    986                                  case 'c':  //jezeli zmienna analogowa specjalna
    987                                        
    988                                        Buff_TX[BTS++]='c';
    989                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr/10)+48;
    990                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr%10)+48;
    991                                        Buff_TX[BTS++]=';';
    992                                        if (Net->HTTP.NetNodeSet[VSN].VarNr==99)   //je¿eli propa o podanie czsu
    993                                        {
    994                                          Buff_TX[BTS++]=(DateTime.Hour/10)+48;
    995                                          Buff_TX[BTS++]=(DateTime.Hour%10)+48;
    996                                          Buff_TX[BTS++]=':';
    997                                          Buff_TX[BTS++]=(DateTime.Minute/10)+48;
    998                                          Buff_TX[BTS++]=(DateTime.Minute%10)+48;
    999                                          //for (char i=ilLit; i<4; i++) {Buff_TX[BTS++]=' ';}
   1000                                          Buff_TX[BTS++]=0xd;
   1001                                          Buff_TX[BTS++]=0xa;
   1002                                          ContentLength+=11;
   1003                                        }else{
   1004                                          ilLit=sIntToStr(GetSpecialAnalogVar(Net->HTTP.NetNodeSet[VSN].VarNr),&Buff_TX[BTS]);
   1005                                          BTS+=ilLit;
   1006                                          for (char i=ilLit; i<4; i++) {Buff_TX[BTS++]=' ';}
   1007                                          Buff_TX[BTS++]=0xd;
   1008                                          Buff_TX[BTS++]=0xa;
   1009                                          ContentLength+=10;
   1010                                        }
   1011                                  break;
   1012                                  
   1013                                   case 'd':  //jezeli zmienna dwustanowa specjalna
   1014                                    
   1015                                        Buff_TX[BTS++]='d';
   1016                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr/10)+48;
   1017                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].VarNr%10)+48;
   1018                                        Buff_TX[BTS++]=';';
   1019                                        Buff_TX[BTS++]=GetSpecialBinarVar(Net->HTTP.NetNodeSet[VSN].VarNr)+48;
   1020                                        Buff_TX[BTS++]=0xd;
   1021                                        Buff_TX[BTS++]=0xa;
   1022                                        Net->HTTP.NetNodeSet[VSN].Value=GetSpecialBinarVar(Net->HTTP.NetNodeSet[VSN].VarNr);
   1023                                          
   1024                                   
   1025                                        ContentLength+=7;
   1026                                  break;
   1027                                  
   1028                                  
   1029                                  case 'i':  //jezeli wejcie dwustanowe
   1030                                        Buff_TX[BTS++]='i';
   1031                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].NodeNr/10)+48;
   1032                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].NodeNr%10)+48;
   1033                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].PortNr/10)+48;
   1034                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].PortNr%10)+48;
   1035                                        Buff_TX[BTS++]=';';
   1036                                        Net->HTTP.NetNodeSet[VSN].Value=PortStageRead(MainStage.StageI[Net->HTTP.NetNodeSet[VSN].NodeNr].Port, Net->HTTP.NetNodeSet[VSN].PortNr); 
   1037                                        Buff_TX[BTS++]=Net->HTTP.NetNodeSet[VSN].Value+48;
   1038                                        Buff_TX[BTS++]=0xd;
   1039                                        Buff_TX[BTS++]=0xa;
   1040                                        ContentLength+=9;
   1041                                  break;
   1042                                  
   1043                                  case 'q':  //jezeli wejcie dwustanowe
   1044                                        Buff_TX[BTS++]='q';
   1045                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].NodeNr/10)+48;
   1046                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].NodeNr%10)+48;
   1047                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].PortNr/10)+48;
   1048                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].PortNr%10)+48;
   1049                                        Buff_TX[BTS++]=';';
   1050                                        Net->HTTP.NetNodeSet[VSN].Value=PortStageRead(MainStage.StageQ[Net->HTTP.NetNodeSet[VSN].NodeNr].Port, Net->HTTP.NetNodeSet[VSN].PortNr); 
   1051                                        Buff_TX[BTS++]=Net->HTTP.NetNodeSet[VSN].Value+48;
   1052                                        Buff_TX[BTS++]=0xd;
   1053                                        Buff_TX[BTS++]=0xa;
   1054                                        ContentLength+=9;
   1055                                  break;
   1056                                  
   1057                                  case 'r':  //jezeli rejestr wejciowy wêz³a
   1058                                        
   1059                                        Buff_TX[BTS++]='r';
   1060                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].NodeNr/10)+48;
   1061                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].NodeNr%10)+48;
   1062                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].RegNr/10)+48;
   1063                                        Buff_TX[BTS++]=(Net->HTTP.NetNodeSet[VSN].RegNr%10)+48;
   1064                                        Buff_TX[BTS++]=';';
   1065                                        
   1066                                        
   1067                                        if ((MainStage.StageI[Net->HTTP.NetNodeSet[VSN].NodeNr].Value[Net->HTTP.NetNodeSet[VSN].RegNr]==(signed short)0x8000) && (Net->HTTP.NetNodeSet[VSN].RegNr>0))
   1068                                        {
   1069                                           Buff_TX[BTS++]='B';
   1070                                           Buff_TX[BTS++]='A';
   1071                                           Buff_TX[BTS++]='T';
   1072                                        }else{  
   1073                                         
   1074                                          if ((VariablesAnal[Net->HTTP.NetNodeSet[VSN].VarNr])>999)
   1075                                          {
   1076                                            Buff_TX[BTS++]='>';
   1077                                            Buff_TX[BTS++]='M';
   1078                                            Buff_TX[BTS++]='A';
   1079                                            Buff_TX[BTS++]='X';
   1080                                          }
   1081                                          else if ((VariablesAnal[Net->HTTP.NetNodeSet[VSN].VarNr])<-999)
   1082                                          {
   1083                                            Buff_TX[BTS++]='-';
   1084                                            Buff_TX[BTS++]='M';
   1085                                            Buff_TX[BTS++]='I';
   1086                                            Buff_TX[BTS++]='N';
   1087                                          }else{
   1088                                            ilLit=sIntToStr(MainStage.StageI[Net->HTTP.NetNodeSet[VSN].NodeNr].Value[Net->HTTP.NetNodeSet[VSN].RegNr],&Buff_TX[BTS]);
   1089                                            BTS+=ilLit;
   1090             
   1091                                          for (char i=ilLit; i<4; i++) {Buff_TX[BTS++]=' ';}
   \                     ??HTTP_Query_10:
   \   00000220   2021               MOVS     R1,#+32
   \   00000222   6155               STRB     R1,[R4, R5]
   \   00000224   6D1C               ADDS     R5,R5,#+1
   \   00000226   2D04               LSLS     R5,R5,#+16
   \   00000228   2D14               ASRS     R5,R5,#+16
   \   0000022A   401C               ADDS     R0,R0,#+1
   \   0000022C   0006               LSLS     R0,R0,#+24
   \   0000022E   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_Query_11:
   \   00000230   0100               MOVS     R1,R0
   \   00000232   0429               CMP      R1,#+4
   \   00000234   F4D3               BCC      ??HTTP_Query_10
   1092                                          }
   1093                                        }
   1094                                        
   1095                                        Buff_TX[BTS++]=0xd;
   \                     ??HTTP_Query_12:
   \   00000236   0D20               MOVS     R0,#+13
   \   00000238   6055               STRB     R0,[R4, R5]
   \   0000023A   6D1C               ADDS     R5,R5,#+1
   \   0000023C   2D04               LSLS     R5,R5,#+16
   \   0000023E   2D14               ASRS     R5,R5,#+16
   1096                                        Buff_TX[BTS++]=0xa;
   \   00000240   0A20               MOVS     R0,#+10
   \   00000242   6055               STRB     R0,[R4, R5]
   \   00000244   6D1C               ADDS     R5,R5,#+1
   \   00000246   2D04               LSLS     R5,R5,#+16
   \   00000248   2D14               ASRS     R5,R5,#+16
   1097                                        ContentLength+=12;
   \   0000024A   0C37               ADDS     R7,R7,#+12
   \                     ??HTTP_Query_13:
   \   0000024C   0198               LDR      R0,[SP, #+4]
   \   0000024E   401C               ADDS     R0,R0,#+1
   \   00000250   0006               LSLS     R0,R0,#+24
   \   00000252   000E               LSRS     R0,R0,#+24
   \   00000254   0190               STR      R0,[SP, #+4]
   \                     ??HTTP_Query_9:
   \   00000256   0198               LDR      R0,[SP, #+4]
   \   00000258   0C99               LDR      R1,[SP, #+48]
   \   0000025A   F231               ADDS     R1,R1,#+242
   \   0000025C   0978               LDRB     R1,[R1, #+0]
   \   0000025E   0006               LSLS     R0,R0,#+24
   \   00000260   000E               LSRS     R0,R0,#+24
   \   00000262   8842               CMP      R0,R1
   \   00000264   00D3               BCC      .+4
   \   00000266   E0E2               B        ??HTTP_Query_14
   \   00000268   0198               LDR      R0,[SP, #+4]
   \   0000026A   0006               LSLS     R0,R0,#+24
   \   0000026C   000E               LSRS     R0,R0,#+24
   \   0000026E   0521               MOVS     R1,#+5
   \   00000270   4843               MULS     R0,R1,R0
   \   00000272   0C99               LDR      R1,[SP, #+48]
   \   00000274   0818               ADDS     R0,R1,R0
   \   00000276   0090               STR      R0,[SP, #+0]
   \   00000278   0600               MOVS     R6,R0
   \   0000027A   F636               ADDS     R6,R6,#+246
   \   0000027C   3078               LDRB     R0,[R6, #+0]
   \   0000027E   6128               CMP      R0,#+97
   \   00000280   12D0               BEQ      ??HTTP_Query_15
   \   00000282   6228               CMP      R0,#+98
   \   00000284   00D1               BNE      .+4
   \   00000286   AFE0               B        ??HTTP_Query_16
   \   00000288   6328               CMP      R0,#+99
   \   0000028A   00D1               BNE      .+4
   \   0000028C   EEE0               B        ??HTTP_Query_17
   \   0000028E   6428               CMP      R0,#+100
   \   00000290   00D1               BNE      .+4
   \   00000292   56E1               B        ??HTTP_Query_18
   \   00000294   6928               CMP      R0,#+105
   \   00000296   00D1               BNE      .+4
   \   00000298   8AE1               B        ??HTTP_Query_19
   \   0000029A   7128               CMP      R0,#+113
   \   0000029C   00D1               BNE      .+4
   \   0000029E   D7E1               B        ??HTTP_Query_20
   \   000002A0   7228               CMP      R0,#+114
   \   000002A2   00D1               BNE      .+4
   \   000002A4   24E2               B        ??HTTP_Query_21
   \   000002A6   D1E7               B        ??HTTP_Query_13
   \                     ??HTTP_Query_15:
   \   000002A8   6055               STRB     R0,[R4, R5]
   \   000002AA   6D1C               ADDS     R5,R5,#+1
   \   000002AC   2D04               LSLS     R5,R5,#+16
   \   000002AE   2D14               ASRS     R5,R5,#+16
   \   000002B0   7078               LDRB     R0,[R6, #+1]
   \   000002B2   0A21               MOVS     R1,#+10
   \   000002B4   ........           BL       __aeabi_idivmod
   \   000002B8   3030               ADDS     R0,R0,#+48
   \   000002BA   6055               STRB     R0,[R4, R5]
   \   000002BC   6D1C               ADDS     R5,R5,#+1
   \   000002BE   2D04               LSLS     R5,R5,#+16
   \   000002C0   2D14               ASRS     R5,R5,#+16
   \   000002C2   7078               LDRB     R0,[R6, #+1]
   \   000002C4   0A21               MOVS     R1,#+10
   \   000002C6   ........           BL       __aeabi_idivmod
   \   000002CA   3031               ADDS     R1,R1,#+48
   \   000002CC   6155               STRB     R1,[R4, R5]
   \   000002CE   6D1C               ADDS     R5,R5,#+1
   \   000002D0   2D04               LSLS     R5,R5,#+16
   \   000002D2   2D14               ASRS     R5,R5,#+16
   \   000002D4   3B20               MOVS     R0,#+59
   \   000002D6   6055               STRB     R0,[R4, R5]
   \   000002D8   6D1C               ADDS     R5,R5,#+1
   \   000002DA   2D04               LSLS     R5,R5,#+16
   \   000002DC   2D14               ASRS     R5,R5,#+16
   \   000002DE   3F4A               LDR      R2,??HTTP_Query_5+0x20  ;; VariablesAnal
   \   000002E0   7078               LDRB     R0,[R6, #+1]
   \   000002E2   4000               LSLS     R0,R0,#+1
   \   000002E4   105E               LDRSH    R0,[R2, R0]
   \   000002E6   3E49               LDR      R1,??HTTP_Query_5+0x24  ;; 0xffff8000
   \   000002E8   8842               CMP      R0,R1
   \   000002EA   0FD1               BNE      ??HTTP_Query_22
   \   000002EC   4220               MOVS     R0,#+66
   \   000002EE   6055               STRB     R0,[R4, R5]
   \   000002F0   6D1C               ADDS     R5,R5,#+1
   \   000002F2   2D04               LSLS     R5,R5,#+16
   \   000002F4   2D14               ASRS     R5,R5,#+16
   \   000002F6   4120               MOVS     R0,#+65
   \   000002F8   6055               STRB     R0,[R4, R5]
   \   000002FA   6D1C               ADDS     R5,R5,#+1
   \   000002FC   2D04               LSLS     R5,R5,#+16
   \   000002FE   2D14               ASRS     R5,R5,#+16
   \   00000300   5420               MOVS     R0,#+84
   \   00000302   6055               STRB     R0,[R4, R5]
   \   00000304   6D1C               ADDS     R5,R5,#+1
   \   00000306   2D04               LSLS     R5,R5,#+16
   \   00000308   2D14               ASRS     R5,R5,#+16
   \   0000030A   4BE0               B        ??HTTP_Query_23
   \                     ??HTTP_Query_22:
   \   0000030C   7078               LDRB     R0,[R6, #+1]
   \   0000030E   4000               LSLS     R0,R0,#+1
   \   00000310   105E               LDRSH    R0,[R2, R0]
   \   00000312   FA21               MOVS     R1,#+250
   \   00000314   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000316   8842               CMP      R0,R1
   \   00000318   14DB               BLT      ??HTTP_Query_24
   \   0000031A   3E20               MOVS     R0,#+62
   \   0000031C   6055               STRB     R0,[R4, R5]
   \   0000031E   6D1C               ADDS     R5,R5,#+1
   \   00000320   2D04               LSLS     R5,R5,#+16
   \   00000322   2D14               ASRS     R5,R5,#+16
   \   00000324   4D20               MOVS     R0,#+77
   \   00000326   6055               STRB     R0,[R4, R5]
   \   00000328   6D1C               ADDS     R5,R5,#+1
   \   0000032A   2D04               LSLS     R5,R5,#+16
   \   0000032C   2D14               ASRS     R5,R5,#+16
   \   0000032E   4120               MOVS     R0,#+65
   \   00000330   6055               STRB     R0,[R4, R5]
   \   00000332   6D1C               ADDS     R5,R5,#+1
   \   00000334   2D04               LSLS     R5,R5,#+16
   \   00000336   2D14               ASRS     R5,R5,#+16
   \   00000338   5820               MOVS     R0,#+88
   \   0000033A   6055               STRB     R0,[R4, R5]
   \   0000033C   6D1C               ADDS     R5,R5,#+1
   \   0000033E   2D04               LSLS     R5,R5,#+16
   \   00000340   2D14               ASRS     R5,R5,#+16
   \   00000342   2FE0               B        ??HTTP_Query_23
   \                     ??HTTP_Query_24:
   \   00000344   7078               LDRB     R0,[R6, #+1]
   \   00000346   4000               LSLS     R0,R0,#+1
   \   00000348   105E               LDRSH    R0,[R2, R0]
   \   0000034A   2649               LDR      R1,??HTTP_Query_5+0x28  ;; 0xfffffc19
   \   0000034C   8842               CMP      R0,R1
   \   0000034E   14DA               BGE      ??HTTP_Query_25
   \   00000350   2D20               MOVS     R0,#+45
   \   00000352   6055               STRB     R0,[R4, R5]
   \   00000354   6D1C               ADDS     R5,R5,#+1
   \   00000356   2D04               LSLS     R5,R5,#+16
   \   00000358   2D14               ASRS     R5,R5,#+16
   \   0000035A   4D20               MOVS     R0,#+77
   \   0000035C   6055               STRB     R0,[R4, R5]
   \   0000035E   6D1C               ADDS     R5,R5,#+1
   \   00000360   2D04               LSLS     R5,R5,#+16
   \   00000362   2D14               ASRS     R5,R5,#+16
   \   00000364   4920               MOVS     R0,#+73
   \   00000366   6055               STRB     R0,[R4, R5]
   \   00000368   6D1C               ADDS     R5,R5,#+1
   \   0000036A   2D04               LSLS     R5,R5,#+16
   \   0000036C   2D14               ASRS     R5,R5,#+16
   \   0000036E   4E20               MOVS     R0,#+78
   \   00000370   6055               STRB     R0,[R4, R5]
   \   00000372   6D1C               ADDS     R5,R5,#+1
   \   00000374   2D04               LSLS     R5,R5,#+16
   \   00000376   2D14               ASRS     R5,R5,#+16
   \   00000378   14E0               B        ??HTTP_Query_23
   \                     ??HTTP_Query_25:
   \   0000037A   6119               ADDS     R1,R4,R5
   \   0000037C   7078               LDRB     R0,[R6, #+1]
   \   0000037E   4000               LSLS     R0,R0,#+1
   \   00000380   105E               LDRSH    R0,[R2, R0]
   \   00000382   ........           BL       sIntToStr
   \   00000386   2D18               ADDS     R5,R5,R0
   \   00000388   2D04               LSLS     R5,R5,#+16
   \   0000038A   2D14               ASRS     R5,R5,#+16
   \   0000038C   07E0               B        ??HTTP_Query_26
   \                     ??HTTP_Query_27:
   \   0000038E   2021               MOVS     R1,#+32
   \   00000390   6155               STRB     R1,[R4, R5]
   \   00000392   6D1C               ADDS     R5,R5,#+1
   \   00000394   2D04               LSLS     R5,R5,#+16
   \   00000396   2D14               ASRS     R5,R5,#+16
   \   00000398   401C               ADDS     R0,R0,#+1
   \   0000039A   0006               LSLS     R0,R0,#+24
   \   0000039C   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_Query_26:
   \   0000039E   0100               MOVS     R1,R0
   \   000003A0   0429               CMP      R1,#+4
   \   000003A2   F4D3               BCC      ??HTTP_Query_27
   \                     ??HTTP_Query_23:
   \   000003A4   0D20               MOVS     R0,#+13
   \   000003A6   6055               STRB     R0,[R4, R5]
   \   000003A8   6D1C               ADDS     R5,R5,#+1
   \   000003AA   2D04               LSLS     R5,R5,#+16
   \   000003AC   2D14               ASRS     R5,R5,#+16
   \   000003AE   0A20               MOVS     R0,#+10
   \   000003B0   6055               STRB     R0,[R4, R5]
   \   000003B2   6D1C               ADDS     R5,R5,#+1
   \   000003B4   2D04               LSLS     R5,R5,#+16
   \   000003B6   2D14               ASRS     R5,R5,#+16
   \   000003B8   0A37               ADDS     R7,R7,#+10
   \   000003BA   47E7               B        ??HTTP_Query_13
   \                     ??HTTP_Query_5:
   \   000003BC   ........           DC32     `?<Constant "GET ">`
   \   000003C0   2F646300           DC8      "/dc"
   \   000003C4   ED4D2F00           DC32     0x2f4ded
   \   000003C8   25640000           DC8      0x25, 0x64, 0x00, 0x00
   \   000003CC   2E000000           DC8      0x2E, 0x00, 0x00, 0x00
   \   000003D0   0D0A0000           DC8      0x0D, 0x0A, 0x00, 0x00
   \   000003D4   2F646F00           DC8      "/do"
   \   000003D8   20202000           DC8      "   "
   \   000003DC   ........           DC32     VariablesAnal
   \   000003E0   0080FFFF           DC32     0xffff8000
   \   000003E4   19FCFFFF           DC32     0xfffffc19
   \                     ??HTTP_Query_16:
   \   000003E8   6055               STRB     R0,[R4, R5]
   \   000003EA   6D1C               ADDS     R5,R5,#+1
   \   000003EC   2D04               LSLS     R5,R5,#+16
   \   000003EE   2D14               ASRS     R5,R5,#+16
   \   000003F0   7078               LDRB     R0,[R6, #+1]
   \   000003F2   0A21               MOVS     R1,#+10
   \   000003F4   ........           BL       __aeabi_idivmod
   \   000003F8   3030               ADDS     R0,R0,#+48
   \   000003FA   6055               STRB     R0,[R4, R5]
   \   000003FC   6D1C               ADDS     R5,R5,#+1
   \   000003FE   2D04               LSLS     R5,R5,#+16
   \   00000400   2D14               ASRS     R5,R5,#+16
   \   00000402   7078               LDRB     R0,[R6, #+1]
   \   00000404   0A21               MOVS     R1,#+10
   \   00000406   ........           BL       __aeabi_idivmod
   \   0000040A   3031               ADDS     R1,R1,#+48
   \   0000040C   6155               STRB     R1,[R4, R5]
   \   0000040E   6D1C               ADDS     R5,R5,#+1
   \   00000410   2D04               LSLS     R5,R5,#+16
   \   00000412   2D14               ASRS     R5,R5,#+16
   \   00000414   3B20               MOVS     R0,#+59
   \   00000416   6055               STRB     R0,[R4, R5]
   \   00000418   6D1C               ADDS     R5,R5,#+1
   \   0000041A   2D04               LSLS     R5,R5,#+16
   \   0000041C   2D14               ASRS     R5,R5,#+16
   \   0000041E   0099               LDR      R1,[SP, #+0]
   \   00000420   F931               ADDS     R1,R1,#+249
   \   00000422   7078               LDRB     R0,[R6, #+1]
   \   00000424   C010               ASRS     R0,R0,#+3
   \   00000426   E84A               LDR      R2,??HTTP_Query_28  ;; Variables
   \   00000428   105C               LDRB     R0,[R2, R0]
   \   0000042A   7278               LDRB     R2,[R6, #+1]
   \   0000042C   1300               MOVS     R3,R2
   \   0000042E   DB08               LSRS     R3,R3,#+3
   \   00000430   DB00               LSLS     R3,R3,#+3
   \   00000432   D21A               SUBS     R2,R2,R3
   \   00000434   1041               ASRS     R0,R0,R2
   \   00000436   0122               MOVS     R2,#+1
   \   00000438   0240               ANDS     R2,R2,R0
   \   0000043A   0A70               STRB     R2,[R1, #+0]
   \   0000043C   120A               LSRS     R2,R2,#+8
   \   0000043E   4A70               STRB     R2,[R1, #+1]
   \   00000440   0A78               LDRB     R2,[R1, #+0]
   \   00000442   4878               LDRB     R0,[R1, #+1]
   \   00000444   0006               LSLS     R0,R0,#+24
   \   00000446   0014               ASRS     R0,R0,#+16
   \   00000448   0243               ORRS     R2,R2,R0
   \   0000044A   3032               ADDS     R2,R2,#+48
   \   0000044C   6255               STRB     R2,[R4, R5]
   \   0000044E   6D1C               ADDS     R5,R5,#+1
   \   00000450   2D04               LSLS     R5,R5,#+16
   \   00000452   2D14               ASRS     R5,R5,#+16
   \   00000454   0D20               MOVS     R0,#+13
   \   00000456   6055               STRB     R0,[R4, R5]
   \   00000458   6D1C               ADDS     R5,R5,#+1
   \   0000045A   2D04               LSLS     R5,R5,#+16
   \   0000045C   2D14               ASRS     R5,R5,#+16
   \   0000045E   0A20               MOVS     R0,#+10
   \   00000460   6055               STRB     R0,[R4, R5]
   \   00000462   6D1C               ADDS     R5,R5,#+1
   \   00000464   2D04               LSLS     R5,R5,#+16
   \   00000466   2D14               ASRS     R5,R5,#+16
   \   00000468   FF1D               ADDS     R7,R7,#+7
   \   0000046A   EFE6               B        ??HTTP_Query_13
   \                     ??HTTP_Query_17:
   \   0000046C   6055               STRB     R0,[R4, R5]
   \   0000046E   6D1C               ADDS     R5,R5,#+1
   \   00000470   2D04               LSLS     R5,R5,#+16
   \   00000472   2D14               ASRS     R5,R5,#+16
   \   00000474   7078               LDRB     R0,[R6, #+1]
   \   00000476   0A21               MOVS     R1,#+10
   \   00000478   ........           BL       __aeabi_idivmod
   \   0000047C   3030               ADDS     R0,R0,#+48
   \   0000047E   6055               STRB     R0,[R4, R5]
   \   00000480   6D1C               ADDS     R5,R5,#+1
   \   00000482   2D04               LSLS     R5,R5,#+16
   \   00000484   2D14               ASRS     R5,R5,#+16
   \   00000486   7078               LDRB     R0,[R6, #+1]
   \   00000488   0A21               MOVS     R1,#+10
   \   0000048A   ........           BL       __aeabi_idivmod
   \   0000048E   3031               ADDS     R1,R1,#+48
   \   00000490   6155               STRB     R1,[R4, R5]
   \   00000492   6D1C               ADDS     R5,R5,#+1
   \   00000494   2D04               LSLS     R5,R5,#+16
   \   00000496   2D14               ASRS     R5,R5,#+16
   \   00000498   3B20               MOVS     R0,#+59
   \   0000049A   6055               STRB     R0,[R4, R5]
   \   0000049C   6D1C               ADDS     R5,R5,#+1
   \   0000049E   2D04               LSLS     R5,R5,#+16
   \   000004A0   2D14               ASRS     R5,R5,#+16
   \   000004A2   7078               LDRB     R0,[R6, #+1]
   \   000004A4   6328               CMP      R0,#+99
   \   000004A6   35D1               BNE      ??HTTP_Query_29
   \   000004A8   C84E               LDR      R6,??HTTP_Query_28+0x4  ;; DateTime
   \   000004AA   F078               LDRB     R0,[R6, #+3]
   \   000004AC   0A21               MOVS     R1,#+10
   \   000004AE   ........           BL       __aeabi_idivmod
   \   000004B2   3030               ADDS     R0,R0,#+48
   \   000004B4   6055               STRB     R0,[R4, R5]
   \   000004B6   6D1C               ADDS     R5,R5,#+1
   \   000004B8   2D04               LSLS     R5,R5,#+16
   \   000004BA   2D14               ASRS     R5,R5,#+16
   \   000004BC   F078               LDRB     R0,[R6, #+3]
   \   000004BE   0A21               MOVS     R1,#+10
   \   000004C0   ........           BL       __aeabi_idivmod
   \   000004C4   3031               ADDS     R1,R1,#+48
   \   000004C6   6155               STRB     R1,[R4, R5]
   \   000004C8   6D1C               ADDS     R5,R5,#+1
   \   000004CA   2D04               LSLS     R5,R5,#+16
   \   000004CC   2D14               ASRS     R5,R5,#+16
   \   000004CE   3A20               MOVS     R0,#+58
   \   000004D0   6055               STRB     R0,[R4, R5]
   \   000004D2   6D1C               ADDS     R5,R5,#+1
   \   000004D4   2D04               LSLS     R5,R5,#+16
   \   000004D6   2D14               ASRS     R5,R5,#+16
   \   000004D8   3079               LDRB     R0,[R6, #+4]
   \   000004DA   0A21               MOVS     R1,#+10
   \   000004DC   ........           BL       __aeabi_idivmod
   \   000004E0   3030               ADDS     R0,R0,#+48
   \   000004E2   6055               STRB     R0,[R4, R5]
   \   000004E4   6D1C               ADDS     R5,R5,#+1
   \   000004E6   2D04               LSLS     R5,R5,#+16
   \   000004E8   2D14               ASRS     R5,R5,#+16
   \   000004EA   3079               LDRB     R0,[R6, #+4]
   \   000004EC   0A21               MOVS     R1,#+10
   \   000004EE   ........           BL       __aeabi_idivmod
   \   000004F2   3031               ADDS     R1,R1,#+48
   \   000004F4   6155               STRB     R1,[R4, R5]
   \   000004F6   6D1C               ADDS     R5,R5,#+1
   \   000004F8   2D04               LSLS     R5,R5,#+16
   \   000004FA   2D14               ASRS     R5,R5,#+16
   \   000004FC   0D20               MOVS     R0,#+13
   \   000004FE   6055               STRB     R0,[R4, R5]
   \   00000500   6D1C               ADDS     R5,R5,#+1
   \   00000502   2D04               LSLS     R5,R5,#+16
   \   00000504   2D14               ASRS     R5,R5,#+16
   \   00000506   0A20               MOVS     R0,#+10
   \   00000508   6055               STRB     R0,[R4, R5]
   \   0000050A   6D1C               ADDS     R5,R5,#+1
   \   0000050C   2D04               LSLS     R5,R5,#+16
   \   0000050E   2D14               ASRS     R5,R5,#+16
   \   00000510   0B37               ADDS     R7,R7,#+11
   \   00000512   9BE6               B        ??HTTP_Query_13
   \                     ??HTTP_Query_29:
   \   00000514   ........           BL       GetSpecialAnalogVar
   \   00000518   6119               ADDS     R1,R4,R5
   \   0000051A   0004               LSLS     R0,R0,#+16
   \   0000051C   0014               ASRS     R0,R0,#+16
   \   0000051E   ........           BL       sIntToStr
   \   00000522   2D18               ADDS     R5,R5,R0
   \   00000524   2D04               LSLS     R5,R5,#+16
   \   00000526   2D14               ASRS     R5,R5,#+16
   \                     ??HTTP_Query_30:
   \   00000528   0100               MOVS     R1,R0
   \   0000052A   0429               CMP      R1,#+4
   \   0000052C   00D3               BCC      .+4
   \   0000052E   39E7               B        ??HTTP_Query_23
   \   00000530   2021               MOVS     R1,#+32
   \   00000532   6155               STRB     R1,[R4, R5]
   \   00000534   6D1C               ADDS     R5,R5,#+1
   \   00000536   2D04               LSLS     R5,R5,#+16
   \   00000538   2D14               ASRS     R5,R5,#+16
   \   0000053A   401C               ADDS     R0,R0,#+1
   \   0000053C   0006               LSLS     R0,R0,#+24
   \   0000053E   000E               LSRS     R0,R0,#+24
   \   00000540   F2E7               B        ??HTTP_Query_30
   \                     ??HTTP_Query_18:
   \   00000542   6055               STRB     R0,[R4, R5]
   \   00000544   6D1C               ADDS     R5,R5,#+1
   \   00000546   2D04               LSLS     R5,R5,#+16
   \   00000548   2D14               ASRS     R5,R5,#+16
   \   0000054A   7078               LDRB     R0,[R6, #+1]
   \   0000054C   0A21               MOVS     R1,#+10
   \   0000054E   ........           BL       __aeabi_idivmod
   \   00000552   3030               ADDS     R0,R0,#+48
   \   00000554   6055               STRB     R0,[R4, R5]
   \   00000556   6D1C               ADDS     R5,R5,#+1
   \   00000558   2D04               LSLS     R5,R5,#+16
   \   0000055A   2D14               ASRS     R5,R5,#+16
   \   0000055C   7078               LDRB     R0,[R6, #+1]
   \   0000055E   0A21               MOVS     R1,#+10
   \   00000560   ........           BL       __aeabi_idivmod
   \   00000564   3031               ADDS     R1,R1,#+48
   \   00000566   6155               STRB     R1,[R4, R5]
   \   00000568   6D1C               ADDS     R5,R5,#+1
   \   0000056A   2D04               LSLS     R5,R5,#+16
   \   0000056C   2D14               ASRS     R5,R5,#+16
   \   0000056E   3B20               MOVS     R0,#+59
   \   00000570   6055               STRB     R0,[R4, R5]
   \   00000572   6D1C               ADDS     R5,R5,#+1
   \   00000574   2D04               LSLS     R5,R5,#+16
   \   00000576   2D14               ASRS     R5,R5,#+16
   \   00000578   7078               LDRB     R0,[R6, #+1]
   \   0000057A   ........           BL       GetSpecialBinarVar
   \   0000057E   3030               ADDS     R0,R0,#+48
   \   00000580   6055               STRB     R0,[R4, R5]
   \   00000582   6D1C               ADDS     R5,R5,#+1
   \   00000584   2D04               LSLS     R5,R5,#+16
   \   00000586   2D14               ASRS     R5,R5,#+16
   \   00000588   0D20               MOVS     R0,#+13
   \   0000058A   6055               STRB     R0,[R4, R5]
   \   0000058C   6D1C               ADDS     R5,R5,#+1
   \   0000058E   2D04               LSLS     R5,R5,#+16
   \   00000590   2D14               ASRS     R5,R5,#+16
   \   00000592   0A20               MOVS     R0,#+10
   \   00000594   6055               STRB     R0,[R4, R5]
   \   00000596   6D1C               ADDS     R5,R5,#+1
   \   00000598   2D04               LSLS     R5,R5,#+16
   \   0000059A   2D14               ASRS     R5,R5,#+16
   \   0000059C   7078               LDRB     R0,[R6, #+1]
   \   0000059E   ........           BL       GetSpecialBinarVar
   \   000005A2   0099               LDR      R1,[SP, #+0]
   \   000005A4   F931               ADDS     R1,R1,#+249
   \   000005A6   0870               STRB     R0,[R1, #+0]
   \   000005A8   000A               LSRS     R0,R0,#+8
   \   000005AA   4870               STRB     R0,[R1, #+1]
   \   000005AC   FF1D               ADDS     R7,R7,#+7
   \   000005AE   4DE6               B        ??HTTP_Query_13
   \                     ??HTTP_Query_19:
   \   000005B0   6055               STRB     R0,[R4, R5]
   \   000005B2   6D1C               ADDS     R5,R5,#+1
   \   000005B4   2D04               LSLS     R5,R5,#+16
   \   000005B6   2D14               ASRS     R5,R5,#+16
   \   000005B8   7078               LDRB     R0,[R6, #+1]
   \   000005BA   0A21               MOVS     R1,#+10
   \   000005BC   ........           BL       __aeabi_idivmod
   \   000005C0   3030               ADDS     R0,R0,#+48
   \   000005C2   6055               STRB     R0,[R4, R5]
   \   000005C4   6D1C               ADDS     R5,R5,#+1
   \   000005C6   2D04               LSLS     R5,R5,#+16
   \   000005C8   2D14               ASRS     R5,R5,#+16
   \   000005CA   7078               LDRB     R0,[R6, #+1]
   \   000005CC   0A21               MOVS     R1,#+10
   \   000005CE   ........           BL       __aeabi_idivmod
   \   000005D2   3031               ADDS     R1,R1,#+48
   \   000005D4   6155               STRB     R1,[R4, R5]
   \   000005D6   6D1C               ADDS     R5,R5,#+1
   \   000005D8   2D04               LSLS     R5,R5,#+16
   \   000005DA   2D14               ASRS     R5,R5,#+16
   \   000005DC   B078               LDRB     R0,[R6, #+2]
   \   000005DE   0A21               MOVS     R1,#+10
   \   000005E0   ........           BL       __aeabi_idivmod
   \   000005E4   3030               ADDS     R0,R0,#+48
   \   000005E6   6055               STRB     R0,[R4, R5]
   \   000005E8   6D1C               ADDS     R5,R5,#+1
   \   000005EA   2D04               LSLS     R5,R5,#+16
   \   000005EC   2D14               ASRS     R5,R5,#+16
   \   000005EE   B078               LDRB     R0,[R6, #+2]
   \   000005F0   0A21               MOVS     R1,#+10
   \   000005F2   ........           BL       __aeabi_idivmod
   \   000005F6   3031               ADDS     R1,R1,#+48
   \   000005F8   6155               STRB     R1,[R4, R5]
   \   000005FA   6D1C               ADDS     R5,R5,#+1
   \   000005FC   2D04               LSLS     R5,R5,#+16
   \   000005FE   2D14               ASRS     R5,R5,#+16
   \   00000600   3B20               MOVS     R0,#+59
   \   00000602   6055               STRB     R0,[R4, R5]
   \   00000604   6D1C               ADDS     R5,R5,#+1
   \   00000606   2D04               LSLS     R5,R5,#+16
   \   00000608   2D14               ASRS     R5,R5,#+16
   \   0000060A   B178               LDRB     R1,[R6, #+2]
   \   0000060C   7078               LDRB     R0,[R6, #+1]
   \   0000060E   1622               MOVS     R2,#+22
   \   00000610   5043               MULS     R0,R2,R0
   \   00000612   BD4A               LDR      R2,??HTTP_Query_31  ;; MainStage
   \   00000614   1018               ADDS     R0,R2,R0
   \   00000616   A030               ADDS     R0,R0,#+160
   \   00000618   0088               LDRH     R0,[R0, #+0]
   \   0000061A   0004               LSLS     R0,R0,#+16
   \   0000061C   0014               ASRS     R0,R0,#+16
   \   0000061E   ........           BL       PortStageRead
   \   00000622   0099               LDR      R1,[SP, #+0]
   \   00000624   F931               ADDS     R1,R1,#+249
   \   00000626   0870               STRB     R0,[R1, #+0]
   \   00000628   000A               LSRS     R0,R0,#+8
   \   0000062A   4870               STRB     R0,[R1, #+1]
   \   0000062C   0A78               LDRB     R2,[R1, #+0]
   \   0000062E   3032               ADDS     R2,R2,#+48
   \   00000630   6255               STRB     R2,[R4, R5]
   \   00000632   6D1C               ADDS     R5,R5,#+1
   \   00000634   2D04               LSLS     R5,R5,#+16
   \   00000636   2D14               ASRS     R5,R5,#+16
   \   00000638   0D20               MOVS     R0,#+13
   \   0000063A   6055               STRB     R0,[R4, R5]
   \   0000063C   6D1C               ADDS     R5,R5,#+1
   \   0000063E   2D04               LSLS     R5,R5,#+16
   \   00000640   2D14               ASRS     R5,R5,#+16
   \   00000642   0A20               MOVS     R0,#+10
   \   00000644   6055               STRB     R0,[R4, R5]
   \   00000646   6D1C               ADDS     R5,R5,#+1
   \   00000648   2D04               LSLS     R5,R5,#+16
   \   0000064A   2D14               ASRS     R5,R5,#+16
   \   0000064C   0937               ADDS     R7,R7,#+9
   \   0000064E   FDE5               B        ??HTTP_Query_13
   \                     ??HTTP_Query_20:
   \   00000650   6055               STRB     R0,[R4, R5]
   \   00000652   6D1C               ADDS     R5,R5,#+1
   \   00000654   2D04               LSLS     R5,R5,#+16
   \   00000656   2D14               ASRS     R5,R5,#+16
   \   00000658   7078               LDRB     R0,[R6, #+1]
   \   0000065A   0A21               MOVS     R1,#+10
   \   0000065C   ........           BL       __aeabi_idivmod
   \   00000660   3030               ADDS     R0,R0,#+48
   \   00000662   6055               STRB     R0,[R4, R5]
   \   00000664   6D1C               ADDS     R5,R5,#+1
   \   00000666   2D04               LSLS     R5,R5,#+16
   \   00000668   2D14               ASRS     R5,R5,#+16
   \   0000066A   7078               LDRB     R0,[R6, #+1]
   \   0000066C   0A21               MOVS     R1,#+10
   \   0000066E   ........           BL       __aeabi_idivmod
   \   00000672   3031               ADDS     R1,R1,#+48
   \   00000674   6155               STRB     R1,[R4, R5]
   \   00000676   6D1C               ADDS     R5,R5,#+1
   \   00000678   2D04               LSLS     R5,R5,#+16
   \   0000067A   2D14               ASRS     R5,R5,#+16
   \   0000067C   B078               LDRB     R0,[R6, #+2]
   \   0000067E   0A21               MOVS     R1,#+10
   \   00000680   ........           BL       __aeabi_idivmod
   \   00000684   3030               ADDS     R0,R0,#+48
   \   00000686   6055               STRB     R0,[R4, R5]
   \   00000688   6D1C               ADDS     R5,R5,#+1
   \   0000068A   2D04               LSLS     R5,R5,#+16
   \   0000068C   2D14               ASRS     R5,R5,#+16
   \   0000068E   B078               LDRB     R0,[R6, #+2]
   \   00000690   0A21               MOVS     R1,#+10
   \   00000692   ........           BL       __aeabi_idivmod
   \   00000696   3031               ADDS     R1,R1,#+48
   \   00000698   6155               STRB     R1,[R4, R5]
   \   0000069A   6D1C               ADDS     R5,R5,#+1
   \   0000069C   2D04               LSLS     R5,R5,#+16
   \   0000069E   2D14               ASRS     R5,R5,#+16
   \   000006A0   3B20               MOVS     R0,#+59
   \   000006A2   6055               STRB     R0,[R4, R5]
   \   000006A4   6D1C               ADDS     R5,R5,#+1
   \   000006A6   2D04               LSLS     R5,R5,#+16
   \   000006A8   2D14               ASRS     R5,R5,#+16
   \   000006AA   B178               LDRB     R1,[R6, #+2]
   \   000006AC   9748               LDR      R0,??HTTP_Query_31+0x4  ;; 0x3a2
   \   000006AE   7278               LDRB     R2,[R6, #+1]
   \   000006B0   1623               MOVS     R3,#+22
   \   000006B2   5A43               MULS     R2,R3,R2
   \   000006B4   944B               LDR      R3,??HTTP_Query_31  ;; MainStage
   \   000006B6   9A18               ADDS     R2,R3,R2
   \   000006B8   105A               LDRH     R0,[R2, R0]
   \   000006BA   0004               LSLS     R0,R0,#+16
   \   000006BC   0014               ASRS     R0,R0,#+16
   \   000006BE   ........           BL       PortStageRead
   \   000006C2   0099               LDR      R1,[SP, #+0]
   \   000006C4   F931               ADDS     R1,R1,#+249
   \   000006C6   0870               STRB     R0,[R1, #+0]
   \   000006C8   000A               LSRS     R0,R0,#+8
   \   000006CA   4870               STRB     R0,[R1, #+1]
   \   000006CC   0A78               LDRB     R2,[R1, #+0]
   \   000006CE   3032               ADDS     R2,R2,#+48
   \   000006D0   6255               STRB     R2,[R4, R5]
   \   000006D2   6D1C               ADDS     R5,R5,#+1
   \   000006D4   2D04               LSLS     R5,R5,#+16
   \   000006D6   2D14               ASRS     R5,R5,#+16
   \   000006D8   0D20               MOVS     R0,#+13
   \   000006DA   6055               STRB     R0,[R4, R5]
   \   000006DC   6D1C               ADDS     R5,R5,#+1
   \   000006DE   2D04               LSLS     R5,R5,#+16
   \   000006E0   2D14               ASRS     R5,R5,#+16
   \   000006E2   0A20               MOVS     R0,#+10
   \   000006E4   6055               STRB     R0,[R4, R5]
   \   000006E6   6D1C               ADDS     R5,R5,#+1
   \   000006E8   2D04               LSLS     R5,R5,#+16
   \   000006EA   2D14               ASRS     R5,R5,#+16
   \   000006EC   0937               ADDS     R7,R7,#+9
   \   000006EE   ADE5               B        ??HTTP_Query_13
   \                     ??HTTP_Query_21:
   \   000006F0   6055               STRB     R0,[R4, R5]
   \   000006F2   6D1C               ADDS     R5,R5,#+1
   \   000006F4   2D04               LSLS     R5,R5,#+16
   \   000006F6   2D14               ASRS     R5,R5,#+16
   \   000006F8   7078               LDRB     R0,[R6, #+1]
   \   000006FA   0A21               MOVS     R1,#+10
   \   000006FC   ........           BL       __aeabi_idivmod
   \   00000700   3030               ADDS     R0,R0,#+48
   \   00000702   6055               STRB     R0,[R4, R5]
   \   00000704   6D1C               ADDS     R5,R5,#+1
   \   00000706   2D04               LSLS     R5,R5,#+16
   \   00000708   2D14               ASRS     R5,R5,#+16
   \   0000070A   7078               LDRB     R0,[R6, #+1]
   \   0000070C   0A21               MOVS     R1,#+10
   \   0000070E   ........           BL       __aeabi_idivmod
   \   00000712   3031               ADDS     R1,R1,#+48
   \   00000714   6155               STRB     R1,[R4, R5]
   \   00000716   6D1C               ADDS     R5,R5,#+1
   \   00000718   2D04               LSLS     R5,R5,#+16
   \   0000071A   2D14               ASRS     R5,R5,#+16
   \   0000071C   B078               LDRB     R0,[R6, #+2]
   \   0000071E   0A21               MOVS     R1,#+10
   \   00000720   ........           BL       __aeabi_idivmod
   \   00000724   3030               ADDS     R0,R0,#+48
   \   00000726   6055               STRB     R0,[R4, R5]
   \   00000728   6D1C               ADDS     R5,R5,#+1
   \   0000072A   2D04               LSLS     R5,R5,#+16
   \   0000072C   2D14               ASRS     R5,R5,#+16
   \   0000072E   B078               LDRB     R0,[R6, #+2]
   \   00000730   0A21               MOVS     R1,#+10
   \   00000732   ........           BL       __aeabi_idivmod
   \   00000736   3031               ADDS     R1,R1,#+48
   \   00000738   6155               STRB     R1,[R4, R5]
   \   0000073A   6D1C               ADDS     R5,R5,#+1
   \   0000073C   2D04               LSLS     R5,R5,#+16
   \   0000073E   2D14               ASRS     R5,R5,#+16
   \   00000740   3B20               MOVS     R0,#+59
   \   00000742   6055               STRB     R0,[R4, R5]
   \   00000744   6D1C               ADDS     R5,R5,#+1
   \   00000746   2D04               LSLS     R5,R5,#+16
   \   00000748   2D14               ASRS     R5,R5,#+16
   \   0000074A   6F48               LDR      R0,??HTTP_Query_31  ;; MainStage
   \   0000074C   A023               MOVS     R3,#+160
   \   0000074E   B178               LDRB     R1,[R6, #+2]
   \   00000750   4A00               LSLS     R2,R1,#+1
   \   00000752   9446               MOV      R12,R2
   \   00000754   7278               LDRB     R2,[R6, #+1]
   \   00000756   1621               MOVS     R1,#+22
   \   00000758   4A43               MULS     R2,R1,R2
   \   0000075A   8118               ADDS     R1,R0,R2
   \   0000075C   6246               MOV      R2,R12
   \   0000075E   8918               ADDS     R1,R1,R2
   \   00000760   C95E               LDRSH    R1,[R1, R3]
   \   00000762   6B4A               LDR      R2,??HTTP_Query_31+0x8  ;; 0xffff8000
   \   00000764   9142               CMP      R1,R2
   \   00000766   12D1               BNE      ??HTTP_Query_32
   \   00000768   B178               LDRB     R1,[R6, #+2]
   \   0000076A   0029               CMP      R1,#+0
   \   0000076C   0FD0               BEQ      ??HTTP_Query_32
   \   0000076E   4220               MOVS     R0,#+66
   \   00000770   6055               STRB     R0,[R4, R5]
   \   00000772   6D1C               ADDS     R5,R5,#+1
   \   00000774   2D04               LSLS     R5,R5,#+16
   \   00000776   2D14               ASRS     R5,R5,#+16
   \   00000778   4120               MOVS     R0,#+65
   \   0000077A   6055               STRB     R0,[R4, R5]
   \   0000077C   6D1C               ADDS     R5,R5,#+1
   \   0000077E   2D04               LSLS     R5,R5,#+16
   \   00000780   2D14               ASRS     R5,R5,#+16
   \   00000782   5420               MOVS     R0,#+84
   \   00000784   6055               STRB     R0,[R4, R5]
   \   00000786   6D1C               ADDS     R5,R5,#+1
   \   00000788   2D04               LSLS     R5,R5,#+16
   \   0000078A   2D14               ASRS     R5,R5,#+16
   \   0000078C   53E5               B        ??HTTP_Query_12
   \                     ??HTTP_Query_32:
   \   0000078E   614A               LDR      R2,??HTTP_Query_31+0xC  ;; VariablesAnal
   \   00000790   7178               LDRB     R1,[R6, #+1]
   \   00000792   4900               LSLS     R1,R1,#+1
   \   00000794   515E               LDRSH    R1,[R2, R1]
   \   00000796   FA23               MOVS     R3,#+250
   \   00000798   9B00               LSLS     R3,R3,#+2        ;; #+1000
   \   0000079A   9942               CMP      R1,R3
   \   0000079C   18DB               BLT      ??HTTP_Query_33
   \   0000079E   3E20               MOVS     R0,#+62
   \   000007A0   6055               STRB     R0,[R4, R5]
   \   000007A2   6D1C               ADDS     R5,R5,#+1
   \   000007A4   2D04               LSLS     R5,R5,#+16
   \   000007A6   2D14               ASRS     R5,R5,#+16
   \   000007A8   4D20               MOVS     R0,#+77
   \   000007AA   6055               STRB     R0,[R4, R5]
   \   000007AC   6D1C               ADDS     R5,R5,#+1
   \   000007AE   2D04               LSLS     R5,R5,#+16
   \   000007B0   2D14               ASRS     R5,R5,#+16
   \   000007B2   4120               MOVS     R0,#+65
   \   000007B4   6055               STRB     R0,[R4, R5]
   \   000007B6   6D1C               ADDS     R5,R5,#+1
   \   000007B8   2D04               LSLS     R5,R5,#+16
   \   000007BA   2D14               ASRS     R5,R5,#+16
   \   000007BC   5820               MOVS     R0,#+88
   \   000007BE   6055               STRB     R0,[R4, R5]
   \   000007C0   6D1C               ADDS     R5,R5,#+1
   \   000007C2   2D04               LSLS     R5,R5,#+16
   \   000007C4   2D14               ASRS     R5,R5,#+16
   \   000007C6   36E5               B        ??HTTP_Query_12
   \                     ??HTTP_Query_28:
   \   000007C8   ........           DC32     Variables
   \   000007CC   ........           DC32     DateTime
   \                     ??HTTP_Query_33:
   \   000007D0   7178               LDRB     R1,[R6, #+1]
   \   000007D2   4900               LSLS     R1,R1,#+1
   \   000007D4   515E               LDRSH    R1,[R2, R1]
   \   000007D6   504A               LDR      R2,??HTTP_Query_31+0x10  ;; 0xfffffc19
   \   000007D8   9142               CMP      R1,R2
   \   000007DA   14DA               BGE      ??HTTP_Query_34
   \   000007DC   2D20               MOVS     R0,#+45
   \   000007DE   6055               STRB     R0,[R4, R5]
   \   000007E0   6D1C               ADDS     R5,R5,#+1
   \   000007E2   2D04               LSLS     R5,R5,#+16
   \   000007E4   2D14               ASRS     R5,R5,#+16
   \   000007E6   4D20               MOVS     R0,#+77
   \   000007E8   6055               STRB     R0,[R4, R5]
   \   000007EA   6D1C               ADDS     R5,R5,#+1
   \   000007EC   2D04               LSLS     R5,R5,#+16
   \   000007EE   2D14               ASRS     R5,R5,#+16
   \   000007F0   4920               MOVS     R0,#+73
   \   000007F2   6055               STRB     R0,[R4, R5]
   \   000007F4   6D1C               ADDS     R5,R5,#+1
   \   000007F6   2D04               LSLS     R5,R5,#+16
   \   000007F8   2D14               ASRS     R5,R5,#+16
   \   000007FA   4E20               MOVS     R0,#+78
   \   000007FC   6055               STRB     R0,[R4, R5]
   \   000007FE   6D1C               ADDS     R5,R5,#+1
   \   00000800   2D04               LSLS     R5,R5,#+16
   \   00000802   2D14               ASRS     R5,R5,#+16
   \   00000804   17E5               B        ??HTTP_Query_12
   \                     ??HTTP_Query_34:
   \   00000806   6119               ADDS     R1,R4,R5
   \   00000808   8C46               MOV      R12,R1
   \   0000080A   A021               MOVS     R1,#+160
   \   0000080C   B278               LDRB     R2,[R6, #+2]
   \   0000080E   5200               LSLS     R2,R2,#+1
   \   00000810   7678               LDRB     R6,[R6, #+1]
   \   00000812   1623               MOVS     R3,#+22
   \   00000814   5E43               MULS     R6,R3,R6
   \   00000816   8019               ADDS     R0,R0,R6
   \   00000818   8018               ADDS     R0,R0,R2
   \   0000081A   405E               LDRSH    R0,[R0, R1]
   \   0000081C   6146               MOV      R1,R12
   \   0000081E   ........           BL       sIntToStr
   \   00000822   2D18               ADDS     R5,R5,R0
   \   00000824   2D04               LSLS     R5,R5,#+16
   \   00000826   2D14               ASRS     R5,R5,#+16
   \   00000828   02E5               B        ??HTTP_Query_11
   1098                                          
   1099                                  break;
   1100                                  
   1101                                }
   1102                              }
   1103                              
   1104                               Send=1;
   \                     ??HTTP_Query_14:
   \   0000082A   0126               MOVS     R6,#+1
   1105                              char LengthTxt[4];
   1106                              char IlLiczb=CharToStr(ContentLength,LengthTxt,3);    //(char Value, char *Vstring, char ill) 
   \   0000082C   0322               MOVS     R2,#+3
   \   0000082E   04A9               ADD      R1,SP,#+16
   \   00000830   3800               MOVS     R0,R7
   \   00000832   0006               LSLS     R0,R0,#+24
   \   00000834   000E               LSRS     R0,R0,#+24
   \   00000836   ........           BL       CharToStr
   1107                              
   1108                              for (char i=0; i<IlLiczb; i++)
   \   0000083A   0021               MOVS     R1,#+0
   \   0000083C   04AF               ADD      R7,SP,#+16
   \   0000083E   07E0               B        ??HTTP_Query_35
   1109                              {
   1110                                Buff_TX[PozLength+i]=LengthTxt[i];
   \                     ??HTTP_Query_36:
   \   00000840   6B46               MOV      R3,SP
   \   00000842   1B7B               LDRB     R3,[R3, #+12]
   \   00000844   9B18               ADDS     R3,R3,R2
   \   00000846   BA5C               LDRB     R2,[R7, R2]
   \   00000848   E254               STRB     R2,[R4, R3]
   1111                              }
   \   0000084A   491C               ADDS     R1,R1,#+1
   \   0000084C   0906               LSLS     R1,R1,#+24
   \   0000084E   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_Query_35:
   \   00000850   0A00               MOVS     R2,R1
   \   00000852   8242               CMP      R2,R0
   \   00000854   F4D3               BCC      ??HTTP_Query_36
   1112                              
   1113                    
   1114                            Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000856   0C9F               LDR      R7,[SP, #+48]
   \   00000858   1837               ADDS     R7,R7,#+24
   \   0000085A   2037               ADDS     R7,R7,#+32
   \   0000085C   2F48               LDR      R0,??HTTP_Query_31+0x14  ;; g_counter
   \   0000085E   03C8               LDM      R0!,{R0,R1}
   \   00000860   0200               MOVS     R2,R0
   \   00000862   0B00               MOVS     R3,R1
   \   00000864   2E48               LDR      R0,??HTTP_Query_31+0x18  ;; 0x2710
   \   00000866   0021               MOVS     R1,#+0
   \   00000868   8018               ADDS     R0,R0,R2
   \   0000086A   5941               ADCS     R1,R1,R3
   \   0000086C   03C7               STM      R7!,{R0,R1}
   1115                      break;              
   1116                    }
   1117                     
   1118                      if (Send)
   \                     ??HTTP_Query_4:
   \   0000086E   002E               CMP      R6,#+0
   \   00000870   45D0               BEQ      ??HTTP_Query_37
   1119                      {
   1120                        
   1121                        Buff_TX[BTS++]=0x1B;
   \   00000872   1B20               MOVS     R0,#+27
   \   00000874   6055               STRB     R0,[R4, R5]
   \   00000876   6D1C               ADDS     R5,R5,#+1
   \   00000878   2D04               LSLS     R5,R5,#+16
   \   0000087A   2D14               ASRS     R5,R5,#+16
   1122                        Buff_TX[BTS++]='E';
   \   0000087C   4520               MOVS     R0,#+69
   \   0000087E   6055               STRB     R0,[R4, R5]
   \   00000880   6D1C               ADDS     R5,R5,#+1
   \   00000882   2D04               LSLS     R5,R5,#+16
   \   00000884   2D14               ASRS     R5,R5,#+16
   1123                        for (short i=0; i<US1_BUFFER_Rx_SIZE; i++) Buff_RX[i]=0;
   \   00000886   0020               MOVS     R0,#+0
   \   00000888   0200               MOVS     R2,R0
   \   0000088A   04E0               B        ??HTTP_Query_38
   \                     ??HTTP_Query_39:
   \   0000088C   0A99               LDR      R1,[SP, #+40]
   \   0000088E   0A54               STRB     R2,[R1, R0]
   \   00000890   401C               ADDS     R0,R0,#+1
   \   00000892   0004               LSLS     R0,R0,#+16
   \   00000894   0014               ASRS     R0,R0,#+16
   \                     ??HTTP_Query_38:
   \   00000896   9121               MOVS     R1,#+145
   \   00000898   8900               LSLS     R1,R1,#+2        ;; #+580
   \   0000089A   8842               CMP      R0,R1
   \   0000089C   F6DB               BLT      ??HTTP_Query_39
   1124                        if (Net->Status.HostLink==CONNECTED)
   \   0000089E   0298               LDR      R0,[SP, #+8]
   \   000008A0   0078               LDRB     R0,[R0, #+0]
   \   000008A2   0328               CMP      R0,#+3
   \   000008A4   2BD1               BNE      ??HTTP_Query_37
   1125                        {
   1126                            
   1127                            Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   000008A6   0C9E               LDR      R6,[SP, #+48]
   \   000008A8   1836               ADDS     R6,R6,#+24
   \   000008AA   1C4F               LDR      R7,??HTTP_Query_31+0x14  ;; g_counter
   \   000008AC   3200               MOVS     R2,R6
   \   000008AE   2032               ADDS     R2,R2,#+32
   \   000008B0   9446               MOV      R12,R2
   \   000008B2   03CF               LDM      R7!,{R0,R1}
   \   000008B4   083F               SUBS     R7,R7,#+8
   \   000008B6   0200               MOVS     R2,R0
   \   000008B8   0B00               MOVS     R3,R1
   \   000008BA   1948               LDR      R0,??HTTP_Query_31+0x18  ;; 0x2710
   \   000008BC   0021               MOVS     R1,#+0
   \   000008BE   8018               ADDS     R0,R0,R2
   \   000008C0   5941               ADCS     R1,R1,R3
   \   000008C2   6246               MOV      R2,R12
   \   000008C4   03C2               STM      R2!,{R0,R1}
   1128                            Net->Status.HttpNextQueryTime=g_counter+HTTP_QUERY_MAX_TIME;   //restart czasu pomiêdzy odpytaniami HTTP. Ustawienie Maksymalnego czasu na odpowied
   \   000008C6   3200               MOVS     R2,R6
   \   000008C8   1832               ADDS     R2,R2,#+24
   \   000008CA   9446               MOV      R12,R2
   \   000008CC   03CF               LDM      R7!,{R0,R1}
   \   000008CE   083F               SUBS     R7,R7,#+8
   \   000008D0   0200               MOVS     R2,R0
   \   000008D2   0B00               MOVS     R3,R1
   \   000008D4   1348               LDR      R0,??HTTP_Query_31+0x1C  ;; 0x1388
   \   000008D6   0021               MOVS     R1,#+0
   \   000008D8   8018               ADDS     R0,R0,R2
   \   000008DA   5941               ADCS     R1,R1,R3
   \   000008DC   6246               MOV      R2,R12
   \   000008DE   03C2               STM      R2!,{R0,R1}
   1129                            
   1130                            
   1131                            AT91F_US_SendFrame(USART,Buff_TX,BTS,0, 0);                        //Wysyla ramke 
                                                            ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

             char *PozIlByte;
                   ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\WizFiCommand.c",868  Warning[Pe177]: 
          variable "PozIlByte" was declared but never referenced
   \   000008E0   82B0               SUB      SP,SP,#+8
   \   000008E2   0020               MOVS     R0,#+0
   \   000008E4   0090               STR      R0,[SP, #+0]
   \   000008E6   0300               MOVS     R3,R0
   \   000008E8   2A00               MOVS     R2,R5
   \   000008EA   2100               MOVS     R1,R4
   \   000008EC   0D98               LDR      R0,[SP, #+52]
   \   000008EE   ........           BL       AT91F_US_SendFrame
   \   000008F2   02B0               ADD      SP,SP,#+8
   1132                            
   1133                            Net->Status.SendPacketTime=g_counter;
   \   000008F4   3200               MOVS     R2,R6
   \   000008F6   0832               ADDS     R2,R2,#+8
   \   000008F8   03CF               LDM      R7!,{R0,R1}
   \   000008FA   03C2               STM      R2!,{R0,R1}
   1134                            Net->Status.SendBytes=BTS;
   \   000008FC   3580               STRH     R5,[R6, #+0]
   1135                            
   1136                        }
   1137                      }
   1138            
   1139          }
   \                     ??HTTP_Query_37:
   \   000008FE   0DB0               ADD      SP,SP,#+52
   \   00000900   F0BC               POP      {R4-R7}
   \   00000902   01BC               POP      {R0}
   \   00000904   0047               BX       R0               ;; return
   \   00000906   C046               Nop      
   \                     ??HTTP_Query_31:
   \   00000908   ........           DC32     MainStage
   \   0000090C   A2030000           DC32     0x3a2
   \   00000910   0080FFFF           DC32     0xffff8000
   \   00000914   ........           DC32     VariablesAnal
   \   00000918   19FCFFFF           DC32     0xfffffc19
   \   0000091C   ........           DC32     g_counter
   \   00000920   10270000           DC32     0x2710
   \   00000924   88130000           DC32     0x1388
   1140          
   1141          
   1142          
   1143            
   1144          
   1145          
   1146          
   1147          

   \                                 In section Debug.txt, align 4, keep-with-next
   1148          char HTTP_QueryResponse(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
   1149          {
   \                     HTTP_QueryResponse:
   \   00000000   F9B5               PUSH     {R0,R3-R7,LR}
   \   00000002   83B0               SUB      SP,SP,#+12
   1150          
   1151                   char *pTxt;
   1152          
   1153                   
   1154                   if ((Buff_RX[3]=='H') && (Buff_RX[4]=='T')&& (Buff_RX[5]=='T') && (Buff_RX[6]=='P')  ) //(strstr(Buff_RX, "HTTP")!=NULL)
   \   00000004   C078               LDRB     R0,[R0, #+3]
   \   00000006   4828               CMP      R0,#+72
   \   00000008   00D0               BEQ      .+4
   \   0000000A   E5E0               B        ??HTTP_QueryResponse_0
   \   0000000C   0398               LDR      R0,[SP, #+12]
   \   0000000E   0079               LDRB     R0,[R0, #+4]
   \   00000010   5428               CMP      R0,#+84
   \   00000012   00D0               BEQ      .+4
   \   00000014   E0E0               B        ??HTTP_QueryResponse_0
   \   00000016   0398               LDR      R0,[SP, #+12]
   \   00000018   4079               LDRB     R0,[R0, #+5]
   \   0000001A   5428               CMP      R0,#+84
   \   0000001C   00D0               BEQ      .+4
   \   0000001E   DBE0               B        ??HTTP_QueryResponse_0
   \   00000020   0398               LDR      R0,[SP, #+12]
   \   00000022   8079               LDRB     R0,[R0, #+6]
   \   00000024   5028               CMP      R0,#+80
   \   00000026   00D0               BEQ      .+4
   \   00000028   D6E0               B        ??HTTP_QueryResponse_0
   1155                   {
   1156          
   1157                         Net->Status.ResPacketTime=g_counter;
   \   0000002A   1800               MOVS     R0,R3
   \   0000002C   2830               ADDS     R0,R0,#+40
   \   0000002E   0190               STR      R0,[SP, #+4]
   \   00000030   0200               MOVS     R2,R0
   \   00000032   CA48               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   00000034   03C8               LDM      R0!,{R0,R1}
   \   00000036   03C2               STM      R2!,{R0,R1}
   1158                        
   1159                         Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100); 
   \   00000038   049C               LDR      R4,[SP, #+16]
   \   0000003A   EE34               ADDS     R4,R4,#+238
   \   0000003C   019D               LDR      R5,[SP, #+4]
   \   0000003E   0835               ADDS     R5,R5,#+8
   \   00000040   C648               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   00000042   0CC8               LDM      R0!,{R2,R3}
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   205E               LDRSH    R0,[R4, R0]
   \   00000048   6421               MOVS     R1,#+100
   \   0000004A   4843               MULS     R0,R1,R0
   \   0000004C   C117               ASRS     R1,R0,#+31
   \   0000004E   8018               ADDS     R0,R0,R2
   \   00000050   5941               ADCS     R1,R1,R3
   \   00000052   03C5               STM      R5!,{R0,R1}
   \   00000054   C249               LDR      R1,??HTTP_QueryResponse_1+0x4  ;; `?<Constant "GET ">` + 80
   \   00000056   0398               LDR      R0,[SP, #+12]
   1160                         pTxt=strstr(Buff_RX, "\r\n\r\n");
   \   00000058   ........           BL       strstr
   \   0000005C   0500               MOVS     R5,R0
   1161                         if ((pTxt!=NULL) && (strstr(Buff_RX, "OK")!=NULL))
   \   0000005E   00D1               BNE      .+4
   \   00000060   BAE0               B        ??HTTP_QueryResponse_0
   \   00000062   C0A1               ADR      R1,??HTTP_QueryResponse_1+0x8  ;; 0x4F, 0x4B, 0x00, 0x00
   \   00000064   0398               LDR      R0,[SP, #+12]
   \   00000066   ........           BL       strstr
   \   0000006A   0028               CMP      R0,#+0
   \   0000006C   00D1               BNE      .+4
   \   0000006E   B3E0               B        ??HTTP_QueryResponse_0
   1162                         {  
   1163                           pTxt+=4;
   \   00000070   2D1D               ADDS     R5,R5,#+4
   1164                           switch (Net->Status.CurrentOrder)     
   \   00000072   0498               LDR      R0,[SP, #+16]
   \   00000074   401C               ADDS     R0,R0,#+1
   \   00000076   0290               STR      R0,[SP, #+8]
   \   00000078   4078               LDRB     R0,[R0, #+1]
   \   0000007A   1128               CMP      R0,#+17
   \   0000007C   00D1               BNE      .+4
   \   0000007E   F9E1               B        ??HTTP_QueryResponse_2
   \   00000080   1228               CMP      R0,#+18
   \   00000082   00D1               BNE      .+4
   \   00000084   ACE0               B        ??HTTP_QueryResponse_3
   \   00000086   1328               CMP      R0,#+19
   \   00000088   00D0               BEQ      .+4
   \   0000008A   90E0               B        ??HTTP_QueryResponse_4
   1165                                 {
   1166                                    case HTTP_GET_Config:
   1167                                         pTxt+=3;
   \   0000008C   ED1C               ADDS     R5,R5,#+3
   1168                                         Net->HTTP.VarSetCount=0;    
   \   0000008E   0020               MOVS     R0,#+0
   \   00000090   0100               MOVS     R1,R0
   \   00000092   2171               STRB     R1,[R4, #+4]
   1169                                         for (char i=0; i<VAR_SET_AMOUNT; i++) {Net->HTTP.NetNodeSet[i].NetDataType=NO_Var;}  //wyczyszczenie tablicy 
   \   00000094   09E0               B        ??HTTP_QueryResponse_5
   \                     ??HTTP_QueryResponse_6:
   \   00000096   0523               MOVS     R3,#+5
   \   00000098   5A43               MULS     R2,R3,R2
   \   0000009A   049B               LDR      R3,[SP, #+16]
   \   0000009C   9A18               ADDS     R2,R3,R2
   \   0000009E   F632               ADDS     R2,R2,#+246
   \   000000A0   0300               MOVS     R3,R0
   \   000000A2   1370               STRB     R3,[R2, #+0]
   \   000000A4   491C               ADDS     R1,R1,#+1
   \   000000A6   0906               LSLS     R1,R1,#+24
   \   000000A8   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_QueryResponse_5:
   \   000000AA   0A00               MOVS     R2,R1
   \   000000AC   282A               CMP      R2,#+40
   \   000000AE   F2D3               BCC      ??HTTP_QueryResponse_6
   1170                                         //przepisanie konfiguracji do tabeli VarSet  
   1171                                          while (((pTxt[0]=='a') || (pTxt[0]=='b') || (pTxt[0]=='c') || (pTxt[0]=='d') || (pTxt[0]=='i') || (pTxt[0]=='q') || (pTxt[0]=='r')) && (Net->HTTP.VarSetCount<VAR_SET_AMOUNT))
   \                     ??HTTP_QueryResponse_7:
   \   000000B0   2978               LDRB     R1,[R5, #+0]
   \   000000B2   6129               CMP      R1,#+97
   \   000000B4   0BD0               BEQ      ??HTTP_QueryResponse_8
   \   000000B6   6229               CMP      R1,#+98
   \   000000B8   09D0               BEQ      ??HTTP_QueryResponse_8
   \   000000BA   6329               CMP      R1,#+99
   \   000000BC   07D0               BEQ      ??HTTP_QueryResponse_8
   \   000000BE   6429               CMP      R1,#+100
   \   000000C0   05D0               BEQ      ??HTTP_QueryResponse_8
   \   000000C2   6929               CMP      R1,#+105
   \   000000C4   03D0               BEQ      ??HTTP_QueryResponse_8
   \   000000C6   7129               CMP      R1,#+113
   \   000000C8   01D0               BEQ      ??HTTP_QueryResponse_8
   \   000000CA   7229               CMP      R1,#+114
   \   000000CC   4AD1               BNE      ??HTTP_QueryResponse_9
   \                     ??HTTP_QueryResponse_8:
   \   000000CE   2179               LDRB     R1,[R4, #+4]
   \   000000D0   2829               CMP      R1,#+40
   \   000000D2   47D2               BCS      ??HTTP_QueryResponse_9
   1172                                          {
   1173                                             if ((pTxt[0]=='i') || (pTxt[0]=='q') || (pTxt[0]=='r'))  //je¿eli wejcie lub wyjcie wêz³a lub sensor
   \   000000D4   2978               LDRB     R1,[R5, #+0]
   \   000000D6   6929               CMP      R1,#+105
   \   000000D8   03D0               BEQ      ??HTTP_QueryResponse_10
   \   000000DA   7129               CMP      R1,#+113
   \   000000DC   01D0               BEQ      ??HTTP_QueryResponse_10
   \   000000DE   7229               CMP      R1,#+114
   \   000000E0   26D1               BNE      ??HTTP_QueryResponse_11
   1174                                             {
   1175                                               Net->HTTP.NetNodeSet[Net->HTTP.VarSetCount].NetDataType=pTxt[0];
                                                                                                             ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??HTTP_QueryResponse_10:
   \   000000E2   2179               LDRB     R1,[R4, #+4]
   \   000000E4   0522               MOVS     R2,#+5
   \   000000E6   5143               MULS     R1,R2,R1
   \   000000E8   049A               LDR      R2,[SP, #+16]
   \   000000EA   5118               ADDS     R1,R2,R1
   \   000000EC   F631               ADDS     R1,R1,#+246
   \   000000EE   2A78               LDRB     R2,[R5, #+0]
   \   000000F0   0A70               STRB     R2,[R1, #+0]
   1176                                               Net->HTTP.NetNodeSet[Net->HTTP.VarSetCount].NodeNr=(pTxt[1]-48)*10+(pTxt[2]-48);
   \   000000F2   2179               LDRB     R1,[R4, #+4]
   \   000000F4   0522               MOVS     R2,#+5
   \   000000F6   5143               MULS     R1,R2,R1
   \   000000F8   049A               LDR      R2,[SP, #+16]
   \   000000FA   5118               ADDS     R1,R2,R1
   \   000000FC   F731               ADDS     R1,R1,#+247
   \   000000FE   6A78               LDRB     R2,[R5, #+1]
   \   00000100   0A23               MOVS     R3,#+10
   \   00000102   5A43               MULS     R2,R3,R2
   \   00000104   AB78               LDRB     R3,[R5, #+2]
   \   00000106   D218               ADDS     R2,R2,R3
   \   00000108   103A               SUBS     R2,R2,#+16
   \   0000010A   0A70               STRB     R2,[R1, #+0]
   1177                                               Net->HTTP.NetNodeSet[Net->HTTP.VarSetCount].PortNr=(pTxt[3]-48)*10+(pTxt[4]-48);
   \   0000010C   2179               LDRB     R1,[R4, #+4]
   \   0000010E   0522               MOVS     R2,#+5
   \   00000110   5143               MULS     R1,R2,R1
   \   00000112   049A               LDR      R2,[SP, #+16]
   \   00000114   5118               ADDS     R1,R2,R1
   \   00000116   F831               ADDS     R1,R1,#+248
   \   00000118   EA78               LDRB     R2,[R5, #+3]
   \   0000011A   0A23               MOVS     R3,#+10
   \   0000011C   5A43               MULS     R2,R3,R2
   \   0000011E   2B79               LDRB     R3,[R5, #+4]
   \   00000120   D218               ADDS     R2,R2,R3
   \   00000122   103A               SUBS     R2,R2,#+16
   \   00000124   0A70               STRB     R2,[R1, #+0]
   1178                                               Net->HTTP.VarSetCount++;
   \   00000126   2179               LDRB     R1,[R4, #+4]
   \   00000128   491C               ADDS     R1,R1,#+1
   \   0000012A   2171               STRB     R1,[R4, #+4]
   1179                                               pTxt+=9;
   \   0000012C   0935               ADDS     R5,R5,#+9
   \   0000012E   BFE7               B        ??HTTP_QueryResponse_7
   1180                                             }else{
   1181                                               Net->HTTP.NetNodeSet[Net->HTTP.VarSetCount].NetDataType=pTxt[0];
                                                                                                             ^
Warning[Pe188]: enumerated type mixed with another type
   \                     ??HTTP_QueryResponse_11:
   \   00000130   2179               LDRB     R1,[R4, #+4]
   \   00000132   0522               MOVS     R2,#+5
   \   00000134   5143               MULS     R1,R2,R1
   \   00000136   049A               LDR      R2,[SP, #+16]
   \   00000138   5118               ADDS     R1,R2,R1
   \   0000013A   F631               ADDS     R1,R1,#+246
   \   0000013C   2A78               LDRB     R2,[R5, #+0]
   \   0000013E   0A70               STRB     R2,[R1, #+0]
   1182                                               Net->HTTP.NetNodeSet[Net->HTTP.VarSetCount].VarNr=(pTxt[1]-48)*10+(pTxt[2]-48);
   \   00000140   2179               LDRB     R1,[R4, #+4]
   \   00000142   0522               MOVS     R2,#+5
   \   00000144   5143               MULS     R1,R2,R1
   \   00000146   049A               LDR      R2,[SP, #+16]
   \   00000148   5118               ADDS     R1,R2,R1
   \   0000014A   F731               ADDS     R1,R1,#+247
   \   0000014C   6A78               LDRB     R2,[R5, #+1]
   \   0000014E   0A23               MOVS     R3,#+10
   \   00000150   5A43               MULS     R2,R3,R2
   \   00000152   AB78               LDRB     R3,[R5, #+2]
   \   00000154   D218               ADDS     R2,R2,R3
   \   00000156   103A               SUBS     R2,R2,#+16
   \   00000158   0A70               STRB     R2,[R1, #+0]
   1183                                               Net->HTTP.VarSetCount++;
   \   0000015A   2179               LDRB     R1,[R4, #+4]
   \   0000015C   491C               ADDS     R1,R1,#+1
   \   0000015E   2171               STRB     R1,[R4, #+4]
   1184                                               pTxt+=7;
   \   00000160   ED1D               ADDS     R5,R5,#+7
   \   00000162   A5E7               B        ??HTTP_QueryResponse_7
   1185                                             }
   1186                                          }
   1187          
   1188                                         for (char i=0; i<20; i++) Buff_RX[i]=0;
   \                     ??HTTP_QueryResponse_9:
   \   00000164   0100               MOVS     R1,R0
   \   00000166   0600               MOVS     R6,R0
   \   00000168   04E0               B        ??HTTP_QueryResponse_12
   \                     ??HTTP_QueryResponse_13:
   \   0000016A   039B               LDR      R3,[SP, #+12]
   \   0000016C   9E54               STRB     R6,[R3, R2]
   \   0000016E   491C               ADDS     R1,R1,#+1
   \   00000170   0906               LSLS     R1,R1,#+24
   \   00000172   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_QueryResponse_12:
   \   00000174   0A00               MOVS     R2,R1
   \   00000176   142A               CMP      R2,#+20
   \   00000178   F7D3               BCC      ??HTTP_QueryResponse_13
   1189                                         Net->Status.NextHttpOrder=HTTP_POST;
   \   0000017A   0299               LDR      R1,[SP, #+8]
   \   0000017C   1122               MOVS     R2,#+17
   \   0000017E   8A70               STRB     R2,[R1, #+2]
   1190                                         Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   \   00000180   0299               LDR      R1,[SP, #+8]
   \   00000182   4870               STRB     R0,[R1, #+1]
   1191                                         Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000184   019E               LDR      R6,[SP, #+4]
   \   00000186   1036               ADDS     R6,R6,#+16
   \   00000188   7448               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   0000018A   0CC8               LDM      R0!,{R2,R3}
   \   0000018C   BF48               LDR      R0,??HTTP_QueryResponse_14  ;; 0x2710
   \   0000018E   0021               MOVS     R1,#+0
   \   00000190   8018               ADDS     R0,R0,R2
   \   00000192   5941               ADCS     R1,R1,R3
   \   00000194   03C6               STM      R6!,{R0,R1}
   1192                                         Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100);   //restart czasu pomiêdzy odpytaniami HTTP.
   \   00000196   019E               LDR      R6,[SP, #+4]
   \   00000198   0836               ADDS     R6,R6,#+8
   \   0000019A   7048               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   0000019C   03C8               LDM      R0!,{R0,R1}
   \   0000019E   0022               MOVS     R2,#+0
   \   000001A0   A25E               LDRSH    R2,[R4, R2]
   \   000001A2   6423               MOVS     R3,#+100
   \   000001A4   5A43               MULS     R2,R3,R2
   \   000001A6   D317               ASRS     R3,R2,#+31
   \   000001A8   1218               ADDS     R2,R2,R0
   \   000001AA   4B41               ADCS     R3,R3,R1
   \   000001AC   0CC6               STM      R6!,{R2,R3}
   1193                                         
   1194                                    break; 
   1195                                    
   1196                                    case HTTP_GET: 
   1197                               
   1198                                          pTxt=pTxt;
   1199                                          char ZmType=0;
   1200                                          char ZmNr=0;      //numer zmiennej lub wêz³a
   1201                                          char PortNr=0;
   1202                                          char IlCyfr;
   1203                                          short int NNW=StrToWord(pTxt, &IlCyfr);         //numer najnowszego wpisu
   1204                                          short int NW=NNW;
   1205                                          pTxt+=IlCyfr+1;
   1206                                          ZmType=*pTxt; pTxt++;
   1207                                          ZmNr=(pTxt[0]-48)*10+pTxt[1]-48;
   1208                                          PortNr=(pTxt[2]-48)*10+pTxt[3]-48;
   1209                                          pTxt+=3;
   1210                                          while (((ZmType=='a') || (ZmType=='b') || (ZmType=='c') || (ZmType=='d') || (ZmType=='e') || (ZmType=='q')) && (NW>Net->HTTP.LastForseOrderNr) && (Net->HTTP.LastForseOrderNr!=0) )
   1211                                          {
   1212                                            switch (ZmType) 
   1213                                            {
   1214                                              case 'a': ////zmienne analogowe
   1215                                                  VariablesAnal[ZmNr]=StrToWord(pTxt, &IlCyfr);
   1216                                                  pTxt+=IlCyfr+2;
   1217                                              break;
   1218                                                
   1219                                              case 'b':  //zmienne dwustanowe 
   1220                                                   
   1221                                                if ((*pTxt=='1'))
   1222                                                 {
   1223                                                   Variables[ZmNr/8] |= 1<<(ZmNr%8);
   1224                                                 }
   1225                                                else if ((*pTxt=='2'))
   1226                                                 {
   1227                                                   Variables[ZmNr/8] |= 1<<(ZmNr%8);
   1228                                                   VariablesImpulse[ZmNr/8] |= 1<<(ZmNr%8);
   1229                                                 }
   1230                                                 else
   1231                                                 { 
   1232                                                   Variables[ZmNr/8]&= ~(1<<(ZmNr%8));
   1233                                                 }
   1234                                                   pTxt+=3;
   1235                                              break;  
   1236                                              
   1237                                              case 'c': //zmienne specjalne analogowe
   1238                       
   1239                                                  pTxt+=IlCyfr+2;
   1240                                              break;
   1241                                                
   1242                                              case 'd': //zmienne specjalne dwustanowe
   1243                                                   if (*pTxt=='0') SetSpecialBinarVar(ZmNr, 0, Net); else SetSpecialBinarVar(ZmNr, 1, Net);   
   1244                                                   pTxt+=3;
   1245                                              break;
   1246                                              
   1247                                              case 'e': //konfiguracja
   1248                                                if (ZmNr==1)    //serwer ¿¹da pobrania nowej konfiguracji 
   1249                                                  {
   1250                                                    if (*pTxt=='0') Net->Status.NextHttpOrder=HTTP_GET_Config;
   1251                                                  }                               
   1252                                                   pTxt+=3;
   1253                                              break;
   1254                                              
   1255                                              case 'q':  //zmienne dwustanowe 
   1256                                                pTxt+=2;   
   1257                                                if ((*pTxt=='1'))
   1258                                                 {
   1259                                                    PortStageSet((&(MainStage.StageQ[ZmNr].Port)),PortNr,1);
                                                                        ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1260                                                 } 
   1261                                                else if ((*pTxt=='2'))
   1262                                                 {
   1263                                                    PortStageSet((&(MainStage.StageQ[ZmNr].Port)),PortNr,1);
                                                                        ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1264                                                    PortStageSet((&(MainStage.StageQImpulse[ZmNr])),PortNr,1);   //ustawienie flagi impuls
                                                                        ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1265                                                 }
   1266                                                 else
   1267                                                 { 
   1268                                                    PortStageSet((&(MainStage.StageQ[ZmNr].Port)),PortNr,0);
                                                                        ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"

                   switch (Net->Status.CurrentOrder)     
                   ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\WizFiCommand.c",1164  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "ZmType" (declared at line 1199 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-
                      14.03.2013\Framework\WizFiCommand.c")
            variable "ZmNr" (declared at line 1200 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-
                      14.03.2013\Framework\WizFiCommand.c")
            variable "PortNr" (declared at line 1201 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-
                      14.03.2013\Framework\WizFiCommand.c")
            variable "NNW" (declared at line 1203 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-
                      14.03.2013\Framework\WizFiCommand.c")
            variable "NW" (declared at line 1204 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-
                      14.03.2013\Framework\WizFiCommand.c")
   1269                                                 }
   1270                                                 if (TransQuality.Mensur[ZmNr-1]>0)  MainStage.SendStageChange[ZmNr]=ChangeStageFlag;
   1271                                                 pTxt+=3;
   1272                                              break;  
   1273                                            }
   1274                                            
   1275                                            
   1276                                            NW=StrToWord(pTxt, &IlCyfr);
   1277                                            pTxt+=IlCyfr+1;
   1278                                            ZmType=*pTxt; pTxt++;
   1279                                            ZmNr=(pTxt[0]-48)*10+pTxt[1]-48;
   1280                                            PortNr=(pTxt[2]-48)*10+pTxt[2]-48;
   1281                                            pTxt+=3;
   1282                                          
   1283                                        }
   1284                                        
   1285                                        if (NNW>Net->HTTP.LastForseOrderNr) 
   1286                                        {
   1287                                          Net->HTTP.LastForseOrderNr=NNW;
   1288                                        }else if ((NNW==0) && (Net->HTTP.LastForseOrderNr>0))
   1289                                        {
   1290                                          Net->HTTP.LastForseOrderNr=0;
   1291                                          Net->Status.NextHttpOrder=HTTP_GET_Config;
   1292                                        }
   1293                                       
   1294                                        for (char i=0; i<20; i++) Buff_RX[i]=0;
   1295                                        Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   1296                                        Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   1297                                        Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100);   //restart czasu pomiêdzy odpytaniami HTTP.
   1298                                    break; 
   1299                                    
   1300                                    case HTTP_POST:
   1301          
   1302                                        for (char i=0; i<20; i++) Buff_RX[i]=0;
   1303                                        Net->Status.CurrentOrder=WizFi_NC;     //wyczyszczenie rozkazów
   1304                                        Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   1305                                        Net->Status.HttpNextQueryTime=g_counter+(Net->WiFi.HttpQueryPeriod*100);   //restart czasu pomiêdzy odpytaniami HTTP.
   1306                                   break;
   1307                                   
   1308                                   
   1309                               } //koniec switch (Net->Status.CurrentOrder)
   1310                           
   1311                            
   1312                              //Zg³oszone zamkniête po³¹czenie
   1313                           
   1314                              if ((strstr(Buff_RX, "Connection: close")!=NULL) /*&& (Net->Status.HostLink==CONNECTED)*/) 
   \                     ??HTTP_QueryResponse_4:
   \   000001AE   B849               LDR      R1,??HTTP_QueryResponse_14+0x4  ;; `?<Constant "GET ">` + 256
   \   000001B0   0398               LDR      R0,[SP, #+12]
   \   000001B2   ........           BL       strstr
   \   000001B6   0028               CMP      R0,#+0
   \   000001B8   0AD0               BEQ      ??HTTP_QueryResponse_15
   1315                              {
   1316                                Net->Status.FreezTime=g_counter+FREEZ_TIME;
   \   000001BA   019A               LDR      R2,[SP, #+4]
   \   000001BC   1832               ADDS     R2,R2,#+24
   \   000001BE   6748               LDR      R0,??HTTP_QueryResponse_1  ;; g_counter
   \   000001C0   03C8               LDM      R0!,{R0,R1}
   \   000001C2   0023               MOVS     R3,#+0
   \   000001C4   3230               ADDS     R0,R0,#+50
   \   000001C6   5941               ADCS     R1,R1,R3
   \   000001C8   03C2               STM      R2!,{R0,R1}
   1317                                 Net->Status.HostLink=DISCONNECTING;                             //Roz³¹czenie
   \   000001CA   0298               LDR      R0,[SP, #+8]
   \   000001CC   0121               MOVS     R1,#+1
   \   000001CE   0170               STRB     R1,[R0, #+0]
   1318                              }
   1319                          
   1320                           
   1321                           
   1322                           Net->Status.ResBytes=(int)pTxt -(int)Buff_RX;
   \                     ??HTTP_QueryResponse_15:
   \   000001D0   0498               LDR      R0,[SP, #+16]
   \   000001D2   0399               LDR      R1,[SP, #+12]
   \   000001D4   691A               SUBS     R1,R5,R1
   \   000001D6   4183               STRH     R1,[R0, #+26]
   1323                         } //koniec if(pTxt!=NULL)
   1324                         
   1325          
   1326                   
   1327                   } 
   1328                   
   1329                
   1330            
   1331          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "HTTP_QueryResponse"
   \                     ??HTTP_QueryResponse_0:
   \   000001D8   05B0               ADD      SP,SP,#+20
   \   000001DA   F0BC               POP      {R4-R7}
   \   000001DC   01BC               POP      {R0}
   \   000001DE   0047               BX       R0               ;; return
   \                     ??HTTP_QueryResponse_3:
   \   000001E0   6946               MOV      R1,SP
   \   000001E2   2800               MOVS     R0,R5
   \   000001E4   ........           BL       StrToWord
   \   000001E8   6946               MOV      R1,SP
   \   000001EA   4880               STRH     R0,[R1, #+2]
   \   000001EC   0220               MOVS     R0,#+2
   \   000001EE   085E               LDRSH    R0,[R1, R0]
   \   000001F0   0978               LDRB     R1,[R1, #+0]
   \   000001F2   6D18               ADDS     R5,R5,R1
   \   000001F4   6D1C               ADDS     R5,R5,#+1
   \   000001F6   2978               LDRB     R1,[R5, #+0]
   \   000001F8   6D1C               ADDS     R5,R5,#+1
   \   000001FA   2A78               LDRB     R2,[R5, #+0]
   \   000001FC   0A23               MOVS     R3,#+10
   \   000001FE   5A43               MULS     R2,R3,R2
   \   00000200   6B78               LDRB     R3,[R5, #+1]
   \   00000202   D718               ADDS     R7,R2,R3
   \   00000204   103F               SUBS     R7,R7,#+16
   \   00000206   AA78               LDRB     R2,[R5, #+2]
   \   00000208   0A23               MOVS     R3,#+10
   \   0000020A   5A43               MULS     R2,R3,R2
   \   0000020C   EB78               LDRB     R3,[R5, #+3]
   \   0000020E   D618               ADDS     R6,R2,R3
   \   00000210   103E               SUBS     R6,R6,#+16
   \   00000212   ED1C               ADDS     R5,R5,#+3
   \   00000214   23E0               B        ??HTTP_QueryResponse_16
   \                     ??HTTP_QueryResponse_17:
   \   00000216   6946               MOV      R1,SP
   \   00000218   2800               MOVS     R0,R5
   \   0000021A   ........           BL       StrToWord
   \   0000021E   3F06               LSLS     R7,R7,#+24
   \   00000220   3F0E               LSRS     R7,R7,#+24
   \   00000222   7900               LSLS     R1,R7,#+1
   \   00000224   9B4A               LDR      R2,??HTTP_QueryResponse_14+0x8  ;; VariablesAnal
   \   00000226   5052               STRH     R0,[R2, R1]
   \   00000228   6846               MOV      R0,SP
   \   0000022A   0078               LDRB     R0,[R0, #+0]
   \   0000022C   2D18               ADDS     R5,R5,R0
   \   0000022E   AD1C               ADDS     R5,R5,#+2
   \                     ??HTTP_QueryResponse_18:
   \   00000230   6946               MOV      R1,SP
   \   00000232   2800               MOVS     R0,R5
   \   00000234   ........           BL       StrToWord
   \   00000238   6946               MOV      R1,SP
   \   0000023A   0978               LDRB     R1,[R1, #+0]
   \   0000023C   6D18               ADDS     R5,R5,R1
   \   0000023E   6D1C               ADDS     R5,R5,#+1
   \   00000240   2978               LDRB     R1,[R5, #+0]
   \   00000242   6D1C               ADDS     R5,R5,#+1
   \   00000244   2A78               LDRB     R2,[R5, #+0]
   \   00000246   0A23               MOVS     R3,#+10
   \   00000248   5A43               MULS     R2,R3,R2
   \   0000024A   6B78               LDRB     R3,[R5, #+1]
   \   0000024C   D718               ADDS     R7,R2,R3
   \   0000024E   103F               SUBS     R7,R7,#+16
   \   00000250   AA78               LDRB     R2,[R5, #+2]
   \   00000252   0A23               MOVS     R3,#+10
   \   00000254   5A43               MULS     R2,R3,R2
   \   00000256   AB78               LDRB     R3,[R5, #+2]
   \   00000258   D618               ADDS     R6,R2,R3
   \   0000025A   103E               SUBS     R6,R6,#+16
   \   0000025C   ED1C               ADDS     R5,R5,#+3
   \                     ??HTTP_QueryResponse_16:
   \   0000025E   6129               CMP      R1,#+97
   \   00000260   0AD0               BEQ      ??HTTP_QueryResponse_19
   \   00000262   6229               CMP      R1,#+98
   \   00000264   08D0               BEQ      ??HTTP_QueryResponse_19
   \   00000266   6329               CMP      R1,#+99
   \   00000268   06D0               BEQ      ??HTTP_QueryResponse_19
   \   0000026A   6429               CMP      R1,#+100
   \   0000026C   04D0               BEQ      ??HTTP_QueryResponse_19
   \   0000026E   6529               CMP      R1,#+101
   \   00000270   02D0               BEQ      ??HTTP_QueryResponse_19
   \   00000272   7129               CMP      R1,#+113
   \   00000274   00D0               BEQ      .+4
   \   00000276   C0E0               B        ??HTTP_QueryResponse_20
   \                     ??HTTP_QueryResponse_19:
   \   00000278   0622               MOVS     R2,#+6
   \   0000027A   A25E               LDRSH    R2,[R4, R2]
   \   0000027C   8242               CMP      R2,R0
   \   0000027E   00DB               BLT      .+4
   \   00000280   BBE0               B        ??HTTP_QueryResponse_20
   \   00000282   1000               MOVS     R0,R2
   \   00000284   00D1               BNE      .+4
   \   00000286   B8E0               B        ??HTTP_QueryResponse_20
   \   00000288   6129               CMP      R1,#+97
   \   0000028A   C4D0               BEQ      ??HTTP_QueryResponse_17
   \   0000028C   6229               CMP      R1,#+98
   \   0000028E   08D0               BEQ      ??HTTP_QueryResponse_21
   \   00000290   6329               CMP      R1,#+99
   \   00000292   41D0               BEQ      ??HTTP_QueryResponse_22
   \   00000294   6429               CMP      R1,#+100
   \   00000296   44D0               BEQ      ??HTTP_QueryResponse_23
   \   00000298   6529               CMP      R1,#+101
   \   0000029A   54D0               BEQ      ??HTTP_QueryResponse_24
   \   0000029C   7129               CMP      R1,#+113
   \   0000029E   63D0               BEQ      ??HTTP_QueryResponse_25
   \   000002A0   C6E7               B        ??HTTP_QueryResponse_18
   \                     ??HTTP_QueryResponse_21:
   \   000002A2   2878               LDRB     R0,[R5, #+0]
   \   000002A4   3128               CMP      R0,#+49
   \   000002A6   0FD1               BNE      ??HTTP_QueryResponse_26
   \   000002A8   3F06               LSLS     R7,R7,#+24
   \   000002AA   3F0E               LSRS     R7,R7,#+24
   \   000002AC   3A00               MOVS     R2,R7
   \   000002AE   D210               ASRS     R2,R2,#+3
   \   000002B0   7948               LDR      R0,??HTTP_QueryResponse_14+0xC  ;; Variables
   \   000002B2   8018               ADDS     R0,R0,R2
   \   000002B4   0178               LDRB     R1,[R0, #+0]
   \   000002B6   0122               MOVS     R2,#+1
   \   000002B8   3B00               MOVS     R3,R7
   \   000002BA   DB08               LSRS     R3,R3,#+3
   \   000002BC   DB00               LSLS     R3,R3,#+3
   \   000002BE   FB1A               SUBS     R3,R7,R3
   \   000002C0   9A40               LSLS     R2,R2,R3
   \   000002C2   0A43               ORRS     R2,R2,R1
   \   000002C4   0270               STRB     R2,[R0, #+0]
   \   000002C6   25E0               B        ??HTTP_QueryResponse_27
   \                     ??HTTP_QueryResponse_26:
   \   000002C8   3228               CMP      R0,#+50
   \   000002CA   14D1               BNE      ??HTTP_QueryResponse_28
   \   000002CC   3F06               LSLS     R7,R7,#+24
   \   000002CE   3F0E               LSRS     R7,R7,#+24
   \   000002D0   0121               MOVS     R1,#+1
   \   000002D2   3800               MOVS     R0,R7
   \   000002D4   C008               LSRS     R0,R0,#+3
   \   000002D6   C000               LSLS     R0,R0,#+3
   \   000002D8   381A               SUBS     R0,R7,R0
   \   000002DA   8140               LSLS     R1,R1,R0
   \   000002DC   3A00               MOVS     R2,R7
   \   000002DE   D210               ASRS     R2,R2,#+3
   \   000002E0   6D48               LDR      R0,??HTTP_QueryResponse_14+0xC  ;; Variables
   \   000002E2   8018               ADDS     R0,R0,R2
   \   000002E4   0378               LDRB     R3,[R0, #+0]
   \   000002E6   0B43               ORRS     R3,R3,R1
   \   000002E8   0370               STRB     R3,[R0, #+0]
   \   000002EA   6C48               LDR      R0,??HTTP_QueryResponse_14+0x10  ;; VariablesImpulse
   \   000002EC   8018               ADDS     R0,R0,R2
   \   000002EE   0278               LDRB     R2,[R0, #+0]
   \   000002F0   1143               ORRS     R1,R1,R2
   \   000002F2   0170               STRB     R1,[R0, #+0]
   \   000002F4   0EE0               B        ??HTTP_QueryResponse_27
   \                     ??HTTP_QueryResponse_28:
   \   000002F6   3F06               LSLS     R7,R7,#+24
   \   000002F8   3F0E               LSRS     R7,R7,#+24
   \   000002FA   3A00               MOVS     R2,R7
   \   000002FC   D210               ASRS     R2,R2,#+3
   \   000002FE   6648               LDR      R0,??HTTP_QueryResponse_14+0xC  ;; Variables
   \   00000300   8018               ADDS     R0,R0,R2
   \   00000302   0178               LDRB     R1,[R0, #+0]
   \   00000304   0122               MOVS     R2,#+1
   \   00000306   3B00               MOVS     R3,R7
   \   00000308   DB08               LSRS     R3,R3,#+3
   \   0000030A   DB00               LSLS     R3,R3,#+3
   \   0000030C   FB1A               SUBS     R3,R7,R3
   \   0000030E   9A40               LSLS     R2,R2,R3
   \   00000310   9143               BICS     R1,R1,R2
   \   00000312   0170               STRB     R1,[R0, #+0]
   \                     ??HTTP_QueryResponse_27:
   \   00000314   ED1C               ADDS     R5,R5,#+3
   \   00000316   8BE7               B        ??HTTP_QueryResponse_18
   \                     ??HTTP_QueryResponse_22:
   \   00000318   6846               MOV      R0,SP
   \   0000031A   0078               LDRB     R0,[R0, #+0]
   \   0000031C   2D18               ADDS     R5,R5,R0
   \   0000031E   AD1C               ADDS     R5,R5,#+2
   \   00000320   86E7               B        ??HTTP_QueryResponse_18
   \                     ??HTTP_QueryResponse_23:
   \   00000322   2878               LDRB     R0,[R5, #+0]
   \   00000324   3028               CMP      R0,#+48
   \   00000326   049A               LDR      R2,[SP, #+16]
   \   00000328   06D1               BNE      ??HTTP_QueryResponse_29
   \   0000032A   0021               MOVS     R1,#+0
   \   0000032C   3800               MOVS     R0,R7
   \   0000032E   0006               LSLS     R0,R0,#+24
   \   00000330   000E               LSRS     R0,R0,#+24
   \   00000332   ........           BL       SetSpecialBinarVar
   \   00000336   EDE7               B        ??HTTP_QueryResponse_27
   \                     ??HTTP_QueryResponse_29:
   \   00000338   0121               MOVS     R1,#+1
   \   0000033A   3800               MOVS     R0,R7
   \   0000033C   0006               LSLS     R0,R0,#+24
   \   0000033E   000E               LSRS     R0,R0,#+24
   \   00000340   ........           BL       SetSpecialBinarVar
   \   00000344   E6E7               B        ??HTTP_QueryResponse_27
   \                     ??HTTP_QueryResponse_24:
   \   00000346   3F06               LSLS     R7,R7,#+24
   \   00000348   3F0E               LSRS     R7,R7,#+24
   \   0000034A   012F               CMP      R7,#+1
   \   0000034C   E2D1               BNE      ??HTTP_QueryResponse_27
   \   0000034E   2878               LDRB     R0,[R5, #+0]
   \   00000350   3028               CMP      R0,#+48
   \   00000352   DFD1               BNE      ??HTTP_QueryResponse_27
   \   00000354   0298               LDR      R0,[SP, #+8]
   \   00000356   1321               MOVS     R1,#+19
   \   00000358   8170               STRB     R1,[R0, #+2]
   \   0000035A   DBE7               B        ??HTTP_QueryResponse_27
   \                     ??HTTP_QueryResponse_1:
   \   0000035C   ........           DC32     g_counter
   \   00000360   ........           DC32     `?<Constant "GET ">` + 80
   \   00000364   4F4B0000           DC8      0x4F, 0x4B, 0x00, 0x00
   \                     ??HTTP_QueryResponse_25:
   \   00000368   AD1C               ADDS     R5,R5,#+2
   \   0000036A   2878               LDRB     R0,[R5, #+0]
   \   0000036C   3128               CMP      R0,#+49
   \   0000036E   0ED1               BNE      ??HTTP_QueryResponse_30
   \   00000370   0122               MOVS     R2,#+1
   \   00000372   3100               MOVS     R1,R6
   \   00000374   0906               LSLS     R1,R1,#+24
   \   00000376   090E               LSRS     R1,R1,#+24
   \   00000378   4948               LDR      R0,??HTTP_QueryResponse_14+0x14  ;; 0x3a2
   \   0000037A   3F06               LSLS     R7,R7,#+24
   \   0000037C   3F0E               LSRS     R7,R7,#+24
   \   0000037E   1623               MOVS     R3,#+22
   \   00000380   7B43               MULS     R3,R7,R3
   \   00000382   484E               LDR      R6,??HTTP_QueryResponse_14+0x18  ;; MainStage
   \   00000384   F318               ADDS     R3,R6,R3
   \   00000386   1818               ADDS     R0,R3,R0
   \   00000388   ........           BL       PortStageSet
   \   0000038C   29E0               B        ??HTTP_QueryResponse_31
   \                     ??HTTP_QueryResponse_30:
   \   0000038E   3228               CMP      R0,#+50
   \   00000390   19D1               BNE      ??HTTP_QueryResponse_32
   \   00000392   3F06               LSLS     R7,R7,#+24
   \   00000394   3F0E               LSRS     R7,R7,#+24
   \   00000396   0122               MOVS     R2,#+1
   \   00000398   3100               MOVS     R1,R6
   \   0000039A   0906               LSLS     R1,R1,#+24
   \   0000039C   090E               LSRS     R1,R1,#+24
   \   0000039E   0E00               MOVS     R6,R1
   \   000003A0   3F4B               LDR      R3,??HTTP_QueryResponse_14+0x14  ;; 0x3a2
   \   000003A2   1621               MOVS     R1,#+22
   \   000003A4   7943               MULS     R1,R7,R1
   \   000003A6   3F48               LDR      R0,??HTTP_QueryResponse_14+0x18  ;; MainStage
   \   000003A8   4018               ADDS     R0,R0,R1
   \   000003AA   C018               ADDS     R0,R0,R3
   \   000003AC   3100               MOVS     R1,R6
   \   000003AE   ........           BL       PortStageSet
   \   000003B2   0122               MOVS     R2,#+1
   \   000003B4   3100               MOVS     R1,R6
   \   000003B6   3C48               LDR      R0,??HTTP_QueryResponse_14+0x1C  ;; 0x6a4
   \   000003B8   7B00               LSLS     R3,R7,#+1
   \   000003BA   3A4E               LDR      R6,??HTTP_QueryResponse_14+0x18  ;; MainStage
   \   000003BC   F318               ADDS     R3,R6,R3
   \   000003BE   1818               ADDS     R0,R3,R0
   \   000003C0   ........           BL       PortStageSet
   \   000003C4   0DE0               B        ??HTTP_QueryResponse_31
   \                     ??HTTP_QueryResponse_32:
   \   000003C6   0022               MOVS     R2,#+0
   \   000003C8   3100               MOVS     R1,R6
   \   000003CA   0906               LSLS     R1,R1,#+24
   \   000003CC   090E               LSRS     R1,R1,#+24
   \   000003CE   3448               LDR      R0,??HTTP_QueryResponse_14+0x14  ;; 0x3a2
   \   000003D0   3F06               LSLS     R7,R7,#+24
   \   000003D2   3F0E               LSRS     R7,R7,#+24
   \   000003D4   1623               MOVS     R3,#+22
   \   000003D6   7B43               MULS     R3,R7,R3
   \   000003D8   324E               LDR      R6,??HTTP_QueryResponse_14+0x18  ;; MainStage
   \   000003DA   F318               ADDS     R3,R6,R3
   \   000003DC   1818               ADDS     R0,R3,R0
   \   000003DE   ........           BL       PortStageSet
   \                     ??HTTP_QueryResponse_31:
   \   000003E2   B800               LSLS     R0,R7,#+2
   \   000003E4   3149               LDR      R1,??HTTP_QueryResponse_14+0x20  ;; TransQuality
   \   000003E6   0818               ADDS     R0,R1,R0
   \   000003E8   806C               LDR      R0,[R0, #+72]
   \   000003EA   0028               CMP      R0,#+0
   \   000003EC   92D0               BEQ      ??HTTP_QueryResponse_27
   \   000003EE   3048               LDR      R0,??HTTP_QueryResponse_14+0x24  ;; 0x6eb
   \   000003F0   2C49               LDR      R1,??HTTP_QueryResponse_14+0x18  ;; MainStage
   \   000003F2   C919               ADDS     R1,R1,R7
   \   000003F4   0A22               MOVS     R2,#+10
   \   000003F6   0A54               STRB     R2,[R1, R0]
   \   000003F8   8CE7               B        ??HTTP_QueryResponse_27
   \                     ??HTTP_QueryResponse_20:
   \   000003FA   0620               MOVS     R0,#+6
   \   000003FC   205E               LDRSH    R0,[R4, R0]
   \   000003FE   6A46               MOV      R2,SP
   \   00000400   0221               MOVS     R1,#+2
   \   00000402   515E               LDRSH    R1,[R2, R1]
   \   00000404   8842               CMP      R0,R1
   \   00000406   03DA               BGE      ??HTTP_QueryResponse_33
   \   00000408   6846               MOV      R0,SP
   \   0000040A   4088               LDRH     R0,[R0, #+2]
   \   0000040C   E080               STRH     R0,[R4, #+6]
   \   0000040E   0DE0               B        ??HTTP_QueryResponse_34
   \                     ??HTTP_QueryResponse_33:
   \   00000410   6946               MOV      R1,SP
   \   00000412   0220               MOVS     R0,#+2
   \   00000414   085E               LDRSH    R0,[R1, R0]
   \   00000416   0028               CMP      R0,#+0
   \   00000418   08D1               BNE      ??HTTP_QueryResponse_34
   \   0000041A   0620               MOVS     R0,#+6
   \   0000041C   205E               LDRSH    R0,[R4, R0]
   \   0000041E   0128               CMP      R0,#+1
   \   00000420   04DB               BLT      ??HTTP_QueryResponse_34
   \   00000422   0020               MOVS     R0,#+0
   \   00000424   E080               STRH     R0,[R4, #+6]
   \   00000426   0298               LDR      R0,[SP, #+8]
   \   00000428   1321               MOVS     R1,#+19
   \   0000042A   8170               STRB     R1,[R0, #+2]
   \                     ??HTTP_QueryResponse_34:
   \   0000042C   0020               MOVS     R0,#+0
   \   0000042E   0100               MOVS     R1,R0
   \   00000430   0600               MOVS     R6,R0
   \   00000432   04E0               B        ??HTTP_QueryResponse_35
   \                     ??HTTP_QueryResponse_36:
   \   00000434   039B               LDR      R3,[SP, #+12]
   \   00000436   9E54               STRB     R6,[R3, R2]
   \   00000438   491C               ADDS     R1,R1,#+1
   \   0000043A   0906               LSLS     R1,R1,#+24
   \   0000043C   090E               LSRS     R1,R1,#+24
   \                     ??HTTP_QueryResponse_35:
   \   0000043E   0A00               MOVS     R2,R1
   \   00000440   142A               CMP      R2,#+20
   \   00000442   F7D3               BCC      ??HTTP_QueryResponse_36
   \                     ??HTTP_QueryResponse_37:
   \   00000444   0298               LDR      R0,[SP, #+8]
   \   00000446   3100               MOVS     R1,R6
   \   00000448   4170               STRB     R1,[R0, #+1]
   \   0000044A   019E               LDR      R6,[SP, #+4]
   \   0000044C   1036               ADDS     R6,R6,#+16
   \   0000044E   1948               LDR      R0,??HTTP_QueryResponse_14+0x28  ;; g_counter
   \   00000450   0CC8               LDM      R0!,{R2,R3}
   \   00000452   0E48               LDR      R0,??HTTP_QueryResponse_14  ;; 0x2710
   \   00000454   8018               ADDS     R0,R0,R2
   \   00000456   5941               ADCS     R1,R1,R3
   \   00000458   03C6               STM      R6!,{R0,R1}
   \   0000045A   019E               LDR      R6,[SP, #+4]
   \   0000045C   0836               ADDS     R6,R6,#+8
   \   0000045E   1548               LDR      R0,??HTTP_QueryResponse_14+0x28  ;; g_counter
   \   00000460   03C8               LDM      R0!,{R0,R1}
   \   00000462   0022               MOVS     R2,#+0
   \   00000464   A25E               LDRSH    R2,[R4, R2]
   \   00000466   6423               MOVS     R3,#+100
   \   00000468   5A43               MULS     R2,R3,R2
   \   0000046A   D317               ASRS     R3,R2,#+31
   \   0000046C   1218               ADDS     R2,R2,R0
   \   0000046E   4B41               ADCS     R3,R3,R1
   \   00000470   0CC6               STM      R6!,{R2,R3}
   \   00000472   9CE6               B        ??HTTP_QueryResponse_4
   \                     ??HTTP_QueryResponse_2:
   \   00000474   0020               MOVS     R0,#+0
   \   00000476   0100               MOVS     R1,R0
   \   00000478   0600               MOVS     R6,R0
   \                     ??HTTP_QueryResponse_38:
   \   0000047A   0A00               MOVS     R2,R1
   \   0000047C   142A               CMP      R2,#+20
   \   0000047E   E1D2               BCS      ??HTTP_QueryResponse_37
   \   00000480   039B               LDR      R3,[SP, #+12]
   \   00000482   9E54               STRB     R6,[R3, R2]
   \   00000484   491C               ADDS     R1,R1,#+1
   \   00000486   0906               LSLS     R1,R1,#+24
   \   00000488   090E               LSRS     R1,R1,#+24
   \   0000048A   F6E7               B        ??HTTP_QueryResponse_38
   \                     ??HTTP_QueryResponse_14:
   \   0000048C   10270000           DC32     0x2710
   \   00000490   ........           DC32     `?<Constant "GET ">` + 256
   \   00000494   ........           DC32     VariablesAnal
   \   00000498   ........           DC32     Variables
   \   0000049C   ........           DC32     VariablesImpulse
   \   000004A0   A2030000           DC32     0x3a2
   \   000004A4   ........           DC32     MainStage
   \   000004A8   A4060000           DC32     0x6a4
   \   000004AC   ........           DC32     TransQuality
   \   000004B0   EB060000           DC32     0x6eb
   \   000004B4   ........           DC32     g_counter
   1332          
   1333          
   1334          

   \                                 In section Debug.txt, align 4, keep-with-next
   1335          void HTTP_CheckConnection(char *Buff_TX, AT91PS_USART USART, _Net *Net)
   1336          {
   \                     HTTP_CheckConnection:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0E00               MOVS     R6,R1
   \   00000004   1400               MOVS     R4,R2
   1337             Net->Status.FreezTime=g_counter+FREEZ_TIME; //rezerwowanie czasu
   \   00000006   0F4D               LDR      R5,??HTTP_CheckConnection_0  ;; g_counter
   \   00000008   03CD               LDM      R5!,{R0,R1}
   \   0000000A   083D               SUBS     R5,R5,#+8
   \   0000000C   0022               MOVS     R2,#+0
   \   0000000E   3230               ADDS     R0,R0,#+50
   \   00000010   5141               ADCS     R1,R1,R2
   \   00000012   2064               STR      R0,[R4, #+64]
   \   00000014   6164               STR      R1,[R4, #+68]
   1338             Net->Status.CurrentOrder=WizFi_AT_CID;     
   \   00000016   1020               MOVS     R0,#+16
   \   00000018   A070               STRB     R0,[R4, #+2]
   1339             AT91F_US_SendFrame(USART,(char*)AT_CID,sizeof(AT_CID)-1,0, 0);                        //Wysyla ramke  
                                             ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000001A   82B0               SUB      SP,SP,#+8
   \   0000001C   1000               MOVS     R0,R2
   \   0000001E   0090               STR      R0,[SP, #+0]
   \   00000020   0300               MOVS     R3,R0
   \   00000022   0922               MOVS     R2,#+9
   \   00000024   0849               LDR      R1,??HTTP_CheckConnection_0+0x4  ;; AT_CID
   \   00000026   3000               MOVS     R0,R6
   \   00000028   ........           BL       AT91F_US_SendFrame
   \   0000002C   02B0               ADD      SP,SP,#+8
   1340             Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   0000002E   3834               ADDS     R4,R4,#+56
   \   00000030   0CCD               LDM      R5!,{R2,R3}
   \   00000032   0648               LDR      R0,??HTTP_CheckConnection_0+0x8  ;; 0x2710
   \   00000034   0021               MOVS     R1,#+0
   \   00000036   8018               ADDS     R0,R0,R2
   \   00000038   5941               ADCS     R1,R1,R3
   \   0000003A   03C4               STM      R4!,{R0,R1}
   1341             
   1342          }
   \   0000003C   70BC               POP      {R4-R6}
   \   0000003E   01BC               POP      {R0}
   \   00000040   0047               BX       R0               ;; return
   \   00000042   C046               Nop      
   \                     ??HTTP_CheckConnection_0:
   \   00000044   ........           DC32     g_counter
   \   00000048   ........           DC32     AT_CID
   \   0000004C   10270000           DC32     0x2710
   1343          

   \                                 In section Debug.txt, align 4, keep-with-next
   1344          char HTTP_CheckConnectionResponse(char *Buff_RX, char *Buff_TX, AT91PS_USART USART, _Net *Net)
   1345          {
   \                     HTTP_CheckConnectionResponse:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0600               MOVS     R6,R0
   \   00000004   1C00               MOVS     R4,R3
   1346             char odp=0;
   \   00000006   0025               MOVS     R5,#+0
   \   00000008   6846               MOV      R0,SP
   \   0000000A   2900               MOVS     R1,R5
   \   0000000C   0170               STRB     R1,[R0, #+0]
   1347          
   1348          
   1349                  if ((strstr(Buff_RX, "[ERROR")!=NULL) || (strstr(Buff_RX, "No valid Cids")!=NULL))    //((Buff_RX, "[ERROR")!=NULL) ||       strstr(Buff_RX, "No valid Cids")!=NULL)
   \   0000000E   2B4F               LDR      R7,??HTTP_CheckConnectionResponse_0  ;; AT_NCLOSE
   \   00000010   3900               MOVS     R1,R7
   \   00000012   2031               ADDS     R1,R1,#+32
   \   00000014   3000               MOVS     R0,R6
   \   00000016   ........           BL       strstr
   \   0000001A   0028               CMP      R0,#+0
   \   0000001C   06D1               BNE      ??HTTP_CheckConnectionResponse_1
   \   0000001E   2837               ADDS     R7,R7,#+40
   \   00000020   3900               MOVS     R1,R7
   \   00000022   3000               MOVS     R0,R6
   \   00000024   ........           BL       strstr
   \   00000028   0028               CMP      R0,#+0
   \   0000002A   19D0               BEQ      ??HTTP_CheckConnectionResponse_2
   1350                  {
   1351                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \                     ??HTTP_CheckConnectionResponse_1:
   \   0000002C   2800               MOVS     R0,R5
   \   0000002E   2A00               MOVS     R2,R5
   \   00000030   03E0               B        ??HTTP_CheckConnectionResponse_3
   \                     ??HTTP_CheckConnectionResponse_4:
   \   00000032   7254               STRB     R2,[R6, R1]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   0006               LSLS     R0,R0,#+24
   \   00000038   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_CheckConnectionResponse_3:
   \   0000003A   0100               MOVS     R1,R0
   \   0000003C   3229               CMP      R1,#+50
   \   0000003E   F8D3               BCC      ??HTTP_CheckConnectionResponse_4
   1352                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000040   2600               MOVS     R6,R4
   \   00000042   3836               ADDS     R6,R6,#+56
   \   00000044   1E48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x4  ;; g_counter
   \   00000046   0CC8               LDM      R0!,{R2,R3}
   \   00000048   1E48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x8  ;; 0x2710
   \   0000004A   2900               MOVS     R1,R5
   \   0000004C   8018               ADDS     R0,R0,R2
   \   0000004E   5941               ADCS     R1,R1,R3
   \   00000050   03C6               STM      R6!,{R0,R1}
   1353                    Net->Status.FreezTime=0;
   \   00000052   2800               MOVS     R0,R5
   \   00000054   0100               MOVS     R1,R0
   \   00000056   2064               STR      R0,[R4, #+64]
   \   00000058   6164               STR      R1,[R4, #+68]
   1354                    Net->Status.HostLink=DISCONNECTED;
   \   0000005A   6070               STRB     R0,[R4, #+1]
   1355                    Net->Status.CurrentOrder=WizFi_NC;
   \   0000005C   A570               STRB     R5,[R4, #+2]
   \   0000005E   28E0               B        ??HTTP_CheckConnectionResponse_5
   1356                  }else if(strstr(Buff_RX, "[OK")!=NULL)
   \                     ??HTTP_CheckConnectionResponse_2:
   \   00000060   19A1               ADR      R1,??HTTP_CheckConnectionResponse_0+0xC  ;; "[OK"
   \   00000062   3000               MOVS     R0,R6
   \   00000064   ........           BL       strstr
   \   00000068   0028               CMP      R0,#+0
   \   0000006A   22D0               BEQ      ??HTTP_CheckConnectionResponse_5
   1357                  {
   1358                    odp=1;  //ok 
   \   0000006C   6846               MOV      R0,SP
   \   0000006E   0121               MOVS     R1,#+1
   \   00000070   0170               STRB     R1,[R0, #+0]
   1359                    for (char i=0; i<50; i++) Buff_RX[i]=0;
   \   00000072   2800               MOVS     R0,R5
   \   00000074   2A00               MOVS     R2,R5
   \   00000076   03E0               B        ??HTTP_CheckConnectionResponse_6
   \                     ??HTTP_CheckConnectionResponse_7:
   \   00000078   7254               STRB     R2,[R6, R1]
   \   0000007A   401C               ADDS     R0,R0,#+1
   \   0000007C   0006               LSLS     R0,R0,#+24
   \   0000007E   000E               LSRS     R0,R0,#+24
   \                     ??HTTP_CheckConnectionResponse_6:
   \   00000080   0100               MOVS     R1,R0
   \   00000082   3229               CMP      R1,#+50
   \   00000084   F8D3               BCC      ??HTTP_CheckConnectionResponse_7
   1360                    Net->Status.Timeout=g_counter + CRYTICAL_TIMEOUT;    //przed³u¿enie /restart timeoutu
   \   00000086   2700               MOVS     R7,R4
   \   00000088   3837               ADDS     R7,R7,#+56
   \   0000008A   0D48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x4  ;; g_counter
   \   0000008C   03C8               LDM      R0!,{R0,R1}
   \   0000008E   0200               MOVS     R2,R0
   \   00000090   0B00               MOVS     R3,R1
   \   00000092   0C48               LDR      R0,??HTTP_CheckConnectionResponse_0+0x8  ;; 0x2710
   \   00000094   2900               MOVS     R1,R5
   \   00000096   8018               ADDS     R0,R0,R2
   \   00000098   5941               ADCS     R1,R1,R3
   \   0000009A   03C7               STM      R7!,{R0,R1}
   1361                    Net->Status.CurrentOrder=WizFi_NC;
   \   0000009C   A570               STRB     R5,[R4, #+2]
   1362                    HTTP_Task(Buff_RX, Buff_TX,USART, Net);                                //wykonaj kolejne zadanie HTTP
   \   0000009E   2300               MOVS     R3,R4
   \   000000A0   029A               LDR      R2,[SP, #+8]
   \   000000A2   0199               LDR      R1,[SP, #+4]
   \   000000A4   3000               MOVS     R0,R6
   \   000000A6   ........           BL       HTTP_Task
   1363                    Net->Status.FreezTime=0;
   \   000000AA   4034               ADDS     R4,R4,#+64
   \   000000AC   2800               MOVS     R0,R5
   \   000000AE   0100               MOVS     R1,R0
   \   000000B0   03C4               STM      R4!,{R0,R1}
   1364                  }
   1365                    
   1366            
   1367             return odp;
   \                     ??HTTP_CheckConnectionResponse_5:
   \   000000B2   6846               MOV      R0,SP
   \   000000B4   0078               LDRB     R0,[R0, #+0]
   \   000000B6   FEBC               POP      {R1-R7}
   \   000000B8   02BC               POP      {R1}
   \   000000BA   0847               BX       R1               ;; return
   \                     ??HTTP_CheckConnectionResponse_0:
   \   000000BC   ........           DC32     AT_NCLOSE
   \   000000C0   ........           DC32     g_counter
   \   000000C4   10270000           DC32     0x2710
   \   000000C8   5B4F4B00           DC8      "[OK"
   1368          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   ........           DC32     g_counter

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   10270000           DC32     0x2710

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     g_counter

   \                                 In section .rodata, align 4
   \   00000000   4F4B00             DC8 "OK"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   49503A00           DC8 "IP:"

   \                                 In section .rodata, align 4
   \                     `?<Constant "GET ">`:
   \   00000000   4745542000         DC8 "GET "
   \   00000005   000000             DC8 0, 0, 0
   \   00000008   2E6373762048       DC8 ".csv HTTP/1.1\015\012"
   \              5454502F312E
   \              310D0A00    
   \   00000018   557365722D41       DC8 "User-Agent: CEURON\015\012Host: "
   \              67656E743A20
   \              434555524F4E
   \              0D0A486F7374
   \              3A2000      
   \   00000033   00                 DC8 0
   \   00000034   436F6E6E6563       DC8 "Connection: keep-alive\015\012"
   \              74696F6E3A20
   \              6B6565702D61
   \              6C6976650D0A
   \              00          
   \   0000004D   000000             DC8 0, 0, 0
   \   00000050   0D0A0D0A00         DC8 "\015\012\015\012"
   \   00000055   000000             DC8 0, 0, 0
   \   00000058   504F53542000       DC8 "POST "
   \   0000005E   0000               DC8 0, 0
   \   00000060   2F7075746761       DC8 "/putgate.php HTTP/1.1\015\012User-Agent: CEURON\015\012Host: "
   \              74652E706870
   \              20485454502F
   \              312E310D0A55
   \              7365722D4167
   \              656E743A2043
   \              4555524F4E0D
   \              0A486F73743A
   \              2000        
   \   00000092   0000               DC8 0, 0
   \   00000094   0D0A436F6E74       DC8 "\015\012Content-Length: "
   \              656E742D4C65
   \              6E6774683A20
   \              00          
   \   000000A7   00                 DC8 0
   \   000000A8   0D0A436F6E74       DC8 0DH, 0AH, 43H, 6FH, 6EH, 74H, 65H, 6EH
   \              656E        
   \   000000B0   742D54797065       DC8 74H, 2DH, 54H, 79H, 70H, 65H, 3AH, 20H
   \              3A20        
   \   000000B8   6170706C6963       DC8 61H, 70H, 70H, 6CH, 69H, 63H, 61H, 74H
   \              6174        
   \   000000C0   696F6E2F782D       DC8 69H, 6FH, 6EH, 2FH, 78H, 2DH, 77H, 77H
   \              7777        
   \   000000C8   772D666F726D       DC8 77H, 2DH, 66H, 6FH, 72H, 6DH, 2DH, 75H
   \              2D75        
   \   000000D0   726C656E636F       DC8 72H, 6CH, 65H, 6EH, 63H, 6FH, 64H, 65H
   \              6465        
   \   000000D8   640D0A0D0A4E       DC8 64H, 0DH, 0AH, 0DH, 0AH, 4EH, 6FH, 64H
   \              6F64        
   \   000000E0   6549443D00         DC8 65H, 49H, 44H, 3DH, 0
   \   000000E5   000000             DC8 0, 0, 0
   \   000000E8   264F72646572       DC8 "&Order=1&Content=;\015\012"
   \              3D3126436F6E
   \              74656E743D3B
   \              0D0A00      
   \   000000FD   000000             DC8 0, 0, 0
   \   00000100   436F6E6E6563       DC8 "Connection: close"
   \              74696F6E3A20
   \              636C6F736500
   \   00000112   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   2F646300           DC8 "/dc"

   \                                 In section .rodata, align 4
   \   00000000   256400             DC8 "%d"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   2E00               DC8 "."
   \   00000002   0000               DC8 0, 0

   \                                 In section .rodata, align 4
   \   00000000   0D0A00             DC8 "\015\012"
   \   00000003   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   2F646F00           DC8 "/do"

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "

   \                                 In section .rodata, align 4
   \   00000000   5B4F4B00           DC8 "[OK"

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     AT91F_PDC_IsNextTxEmpty             0
     AT91F_PDC_IsTxEmpty                 0
     AT91F_PDC_SendFrame                24
     AT91F_PDC_SetNextTx                 0
     AT91F_PDC_SetTx                     0
     AT91F_US_SendFrame                 16
     CheckExistDomenaIP                 16
     GetSpecialAnalogVar                 8
     GetSpecialBinarVar                  8
     HTTP_CheckConnection               24
     HTTP_CheckConnectionResponse       32
     HTTP_Query                         80
     HTTP_QueryResponse                 40
     SetSpecialBinarVar                 16
     StrToWord                          32
     WizFiCommand_AT                    24
     WizFiCommand_ATI2                  24
     WizFiCommand_AT_DNSLOOKUP          32
     WizFiCommand_AT_NCLOSEALL          24
     WizFiCommand_AT_NCTCP              48
     WizFiCommand_AT_NDHCP              24
     WizFiCommand_AT_NSET               32
     WizFiCommand_AT_VER                24
     WizFiCommand_AT_WA                 32
     WizFiCommand_AT_WD                 24
     WizFiCommand_AT_WWEP1              32
     WizFiCommand_AT_WWPA               32
     WizFiCommand_AT_XDUM0              24
     WizFiResponseCommand_AT            24
     WizFiResponseCommand_ATI2          24
     WizFiResponseCommand_AT_DNSLOOKUP
                                        24
     WizFiResponseCommand_AT_NCLOSEALL0
                                        24
     WizFiResponseCommand_AT_NCTCP      40
     WizFiResponseCommand_AT_NDHCP      24
     WizFiResponseCommand_AT_NSET       24
     WizFiResponseCommand_AT_VER        24
     WizFiResponseCommand_AT_WA         24
     WizFiResponseCommand_AT_WD         24
     WizFiResponseCommand_AT_WWEP1      24
     WizFiResponseCommand_AT_WWPA       24
     WizFiResponseCommand_AT_XDUM0      24
     strstr                              8


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     AT91F_PDC_SetNextTx               6
     AT91F_PDC_SetTx                   6
     AT91F_PDC_IsTxEmpty              10
     AT91F_PDC_IsNextTxEmpty          10
     AT91F_PDC_SendFrame              70
     AT91F_US_SendFrame               26
     strstr                           12
     AT                                4
     ATI2                              8
     AT_VER                           12
     AT_XDUM0                         12
     AT_WD                             8
     AT_NDHCP_0                       24
     AT_NSET                          12
     AT_WWEP1                         12
     AT_WWPA                          12
     AT_WA                             8
     AT_DNSLOOKUP                     16
     AT_NCTCP                         12
     AT_NCLOSE                        56
     AT_NCLOSEALL                     16
     AT_WS                             8
     AT_CID                           12
     WizFiCommand_AT                 136
     WizFiResponseCommand_AT          80
     WizFiCommand_AT_VER              80
     WizFiResponseCommand_AT_VER      80
     WizFiCommand_ATI2                80
     WizFiResponseCommand_ATI2        80
     WizFiCommand_AT_XDUM0            80
     WizFiResponseCommand_AT_XDUM0    80
     WizFiCommand_AT_NCLOSEALL        68
     WizFiResponseCommand_AT_NCLOSEALL0
                                      72
     WizFiCommand_AT_WD               88
     WizFiResponseCommand_AT_WD       88
     WizFiCommand_AT_NDHCP           116
     WizFiResponseCommand_AT_NDHCP    88
     WizFiCommand_AT_NSET            276
     WizFiResponseCommand_AT_NSET     88
     WizFiCommand_AT_WWEP1           164
     WizFiResponseCommand_AT_WWEP1    88
     WizFiCommand_AT_WWPA            164
     WizFiResponseCommand_AT_WWPA     88
     WizFiCommand_AT_WA              172
     WizFiResponseCommand_AT_WA       92
     CheckExistDomenaIP              148
     WizFiCommand_AT_DNSLOOKUP       216
     WizFiResponseCommand_AT_DNSLOOKUP
                                     144
     WizFiCommand_AT_NCTCP           336
     WizFiResponseCommand_AT_NCTCP   396
     StrToWord                       110
     GetSpecialAnalogVar             124
     GetSpecialBinarVar              172
     SetSpecialBinarVar              224
     HTTP_Query                     2344
     HTTP_QueryResponse             1208
     HTTP_CheckConnection             80
     HTTP_CheckConnectionResponse    204
     ??DataTable16                     4
     ??DataTable17                     4
     ??DataTable18                     4
     ?<Constant "OK">                  4
     ?<Constant "IP:">                 4
     ?<Constant "GET ">              276
     ?<Constant "/dc">                 4
     ?<Constant "%d">                  4
     ?<Constant ".">                   4
     ?<Constant "\r\n">                4
     ?<Constant "/do">                 4
     ?<Constant "   ">                 4
     ?<Constant "[OK">                 4

 
   544 bytes in section .rodata
 8 206 bytes in section Debug.txt
 
 8 066 bytes of CODE  memory (+ 140 bytes shared)
   544 bytes of CONST memory

Errors: none
Warnings: 34
