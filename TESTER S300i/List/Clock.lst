###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           20/Mar/2013  07:53:30 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\Framework\Clock.c                             #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\Clock.c" -D AT91SAM7S256 -D         #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -D _TESTER_ -lC "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\TESTER S300i\List\"                #
#                    --diag_suppress Pa082 -o "D:\Zeuron\Projekty\S300\S300-p #
#                    rogram v1.3 BETA- 14.03.2013\TESTER S300i\Obj\"          #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian little --cpu ARM7TDMI -e --fpu None     #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.3       #
#                    BETA- 14.03.2013\lib\AT91SAM7S256\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\cdc\" -I                           #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\core\" -I "D:\Zeuron\Projekty\S300\S300-progr #
#                    am v1.3 BETA- 14.03.2013\startup\" -I                    #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\" -I "D:\Zeuron\Projekty\S300\S300- #
#                    program v1.3 BETA- 14.03.2013\Framework\Configuration\"  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 5.0\ARM\INC\" --section .text=Debug.txt        #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\List\Clock.lst                   #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\Obj\Clock.o                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\Clock.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : Clock.c                                  *//
      7          //*  Opis                         : Plik obs³ugi zegara czasu rzeczywistego  *//
      8          //*                                 DS1306                                   *//
      9          //*  Autor                        : Pawe³ Narwojsz                           *//
     10          //*  Data utrzorzenia             : 15.01.2009                               *//
     11          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     12          //*--------------------------------------------------------------------------*//
     13          //*                                                                          *//
     14          //*--------------------------------------------------------------------------*//
     15          //* Rejestr zmian  (data - opis):                                            *//
     16          //*                                                                          *//
     17          //*                               Brak zmian                                 *//
     18          //*                                                                          *//
     19          //*__________________________________________________________________________*// 
     20          //****************************************************************************//
     21          //****************************************************************************//
     22          
     23          
     24          
     25          //Konfiguracja -----------------------------------------------------------------
     26            
     27          //___________________________Koniec konfiguracji________________________________
     28          
     29          
     30          
     31          
     32          //Definicje --------------------------------------------------------------------
     33          
     34          //___________________________Koniec definicji___________________________________
     35          
     36          
     37          
     38          // Pliki do³¹czane -------------------------------------------------------------
     39               #include <intrinsics.h>
     40               #include "Framework.h"
     41               #include "core/device.h"                                                   //do³¹cza bibliotreki do odpowiedniego procesora
     42               #include "USART.h"

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     43               #include "core/common.h"
     44               #include "core/board.h"
     45               #include "core/trace.h"
     46               #include "core/usb.h"
     47               #include "core/standard.h"
     48               #include "cdc.h"
     49               #include "serial_driver.h"
     50               #include "modbus.h"
     51               #include "main_H.h"
     52          
     53          
     54             #include "Clock.h"
     55             #include "spi_main.h"
     56          #include "Application_prog.h"
     57          //-----------------------Koniec plików do³¹czanych -----------------------------
     58          
     59          
     60          
     61          
     62          //Sta³e ------------------------------------------------------------------------
     63          
     64          //____________________________Koniec sta³ych ___________________________________
     65          
     66          
     67          
     68          
     69          
     70          //Zmienne globalne -------------------------------------------------------------
     71            extern _DateTime DateTime;                                                       //zienna daty i czasu

   \                                 In section .data, align 4
     72            _DateTime  *pDateTime    = &DateTime;
   \                     pDateTime:
   \   00000000   ........           DC32 DateTime
     73          //___________________________Koniec zmiennych globalnych________________________
     74          
     75          
     76          
     77          
     78          
     79          //Zmienne lokalne -------------------------------------------------------------
     80          
     81          //___________________________Koniec zmiennych lplkalnych________________________
     82          
     83          
     84          //Definicje --------------------------------------------------------------------
     85            #define order_read_sec      0x00
     86            #define order_read_min      0x01
     87            #define order_read_hour     0x02
     88            #define order_read_DayOfW   0x03
     89            #define order_read_day      0x04
     90            #define order_read_month    0x05
     91            #define order_read_year     0x06 
     92            #define order_set_sec       0x80
     93            #define order_set_min       0x81
     94            #define order_set_hour      0x82
     95            #define order_set_DayOfW    0x83
     96            #define order_set_day       0x84
     97            #define order_set_month     0x85
     98            #define order_set_year      0x86
     99            #define order_set_ChargerReg    0x91
    100            #define order_read_ChargerReg   0x11
    101            #define order_set_ComandReg     0x8F
    102          //___________________________Koniec definicji___________________________________
    103            
    104          
    105          //-----------------------------------------------------------------------------
    106          //! Nazwa funkcji :  InitRTC  
    107          //! Funkcja ustawieñ startowych RTC
    108          //-----------------------------------------------------------------------------
    109           

   \                                 In section Debug.txt, align 4, keep-with-next
    110          void InitRTC(void)  //ustawienia startowe RTC
    111          {
   \                     InitRTC:
   \   00000000   01B5               PUSH     {R0,LR}
    112          
    113            
    114             char command[] = {order_set_ComandReg,0x0,0};  //0x8F ustawienie rejestru CR
   \   00000002   6846               MOV      R0,SP
   \   00000004   0449               LDR      R1,??InitRTC_0   ;; `?<Constant {143, 0, 0}>`
   \   00000006   0A68               LDR      R2,[R1, #0]
   \   00000008   0260               STR      R2,[R0, #0]
    115             SPI_SendB_Buff(command,2,Cs_Clock);
   \   0000000A   0122               MOVS     R2,#+1
   \   0000000C   0221               MOVS     R1,#+2
   \   0000000E   ........           BL       SPI_SendB_Buff
    116          
    117          }//_____________________________________________________________________________
   \   00000012   08BC               POP      {R3}
   \   00000014   01BC               POP      {R0}
   \   00000016   0047               BX       R0               ;; return
   \                     ??InitRTC_0:
   \   00000018   ........           DC32     `?<Constant {143, 0, 0}>`
    118          
    119              
    120              
    121          
    122          //-----------------------------------------------------------------------------
    123          //! Nazwa funkcji :  GetDateTime  
    124          //! Funkcja pobierania daty i czasu
    125          //-----------------------------------------------------------------------------
    126           

   \                                 In section Debug.txt, align 4, keep-with-next
    127          void GetDateTimeFromRTC(void)  //pobiera czas z zegara czasu rzeczywistego i wrzuca do zmiennej DateTime
    128          {
   \                     GetDateTimeFromRTC:
   \   00000000   07B5               PUSH     {R0-R2,LR}
    129          
    130            
    131             char command[] = {0x00,0x01,0x2,0x3, 0x4,0x5,0x6,0};
   \   00000002   6846               MOV      R0,SP
   \   00000004   0549               LDR      R1,??GetDateTimeFromRTC_0  ;; `?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>`
   \   00000006   0CC9               LDM      R1!,{R2,R3}
   \   00000008   0CC0               STM      R0!,{R2,R3}
    132             SPI_SendB_Buff(command,8,Cs_Clock);
   \   0000000A   0122               MOVS     R2,#+1
   \   0000000C   0821               MOVS     R1,#+8
   \   0000000E   6846               MOV      R0,SP
   \   00000010   ........           BL       SPI_SendB_Buff
    133              
    134              
    135          }//_____________________________________________________________________________
   \   00000014   0EBC               POP      {R1-R3}
   \   00000016   01BC               POP      {R0}
   \   00000018   0047               BX       R0               ;; return
   \   0000001A   C046               Nop      
   \                     ??GetDateTimeFromRTC_0:
   \   0000001C   ........           DC32     `?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>`
    136          
    137          
    138          
    139          
    140          //-----------------------------------------------------------------------------
    141          //! Nazwa funkcji :  SetTime  
    142          //! Funkcja ustawiania czasu
    143          //-----------------------------------------------------------------------------

   \                                 In section .bss, align 4
    144          static  char ComandCLK[10];
   \                     ComandCLK:
   \   00000000                      DS8 12

   \                                 In section Debug.txt, align 4, keep-with-next
    145          void SetRTC_DateTime(void)               //Ustawinie: sekundy, minuty, godziny, dnia, miesi¹ca, roku
    146          {
   \                     SetRTC_DateTime:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
    147          
    148          
    149            
    150          char Sec        = ((DateTime.Second/10)<<4)       |  ((DateTime.Second%10) &0xF);
   \   00000004   434F               LDR      R7,??SetRTC_DateTime_0  ;; DateTime
   \   00000006   7C79               LDRB     R4,[R7, #+5]
   \   00000008   0F26               MOVS     R6,#+15
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   0A21               MOVS     R1,#+10
   \   0000000E   ........           BL       __aeabi_idivmod
   \   00000012   0501               LSLS     R5,R0,#+4
   \   00000014   2000               MOVS     R0,R4
   \   00000016   0A21               MOVS     R1,#+10
   \   00000018   ........           BL       __aeabi_idivmod
   \   0000001C   3140               ANDS     R1,R1,R6
   \   0000001E   2943               ORRS     R1,R1,R5
   \   00000020   0906               LSLS     R1,R1,#+24
   \   00000022   090E               LSRS     R1,R1,#+24
   \   00000024   0091               STR      R1,[SP, #+0]
   \   00000026   3C79               LDRB     R4,[R7, #+4]
   \   00000028   2000               MOVS     R0,R4
   \   0000002A   0A21               MOVS     R1,#+10
   \   0000002C   ........           BL       __aeabi_idivmod
   \   00000030   0501               LSLS     R5,R0,#+4
   \   00000032   2000               MOVS     R0,R4
   \   00000034   0A21               MOVS     R1,#+10
   \   00000036   ........           BL       __aeabi_idivmod
   \   0000003A   3140               ANDS     R1,R1,R6
   \   0000003C   2943               ORRS     R1,R1,R5
   \   0000003E   0906               LSLS     R1,R1,#+24
   \   00000040   090E               LSRS     R1,R1,#+24
   \   00000042   0191               STR      R1,[SP, #+4]
   \   00000044   FC78               LDRB     R4,[R7, #+3]
   \   00000046   2000               MOVS     R0,R4
   \   00000048   0A21               MOVS     R1,#+10
   \   0000004A   ........           BL       __aeabi_idivmod
   \   0000004E   0501               LSLS     R5,R0,#+4
   \   00000050   2000               MOVS     R0,R4
   \   00000052   0A21               MOVS     R1,#+10
   \   00000054   ........           BL       __aeabi_idivmod
   \   00000058   3140               ANDS     R1,R1,R6
   \   0000005A   2943               ORRS     R1,R1,R5
   \   0000005C   0906               LSLS     R1,R1,#+24
   \   0000005E   090E               LSRS     R1,R1,#+24
   \   00000060   0291               STR      R1,[SP, #+8]
   \   00000062   BC78               LDRB     R4,[R7, #+2]
   \   00000064   2000               MOVS     R0,R4
   \   00000066   0A21               MOVS     R1,#+10
   \   00000068   ........           BL       __aeabi_idivmod
   \   0000006C   0501               LSLS     R5,R0,#+4
   \   0000006E   2000               MOVS     R0,R4
   \   00000070   0A21               MOVS     R1,#+10
   \   00000072   ........           BL       __aeabi_idivmod
   \   00000076   3140               ANDS     R1,R1,R6
   \   00000078   2943               ORRS     R1,R1,R5
   \   0000007A   0906               LSLS     R1,R1,#+24
   \   0000007C   090E               LSRS     R1,R1,#+24
   \   0000007E   0391               STR      R1,[SP, #+12]
   \   00000080   7C78               LDRB     R4,[R7, #+1]
   \   00000082   2000               MOVS     R0,R4
   \   00000084   0A21               MOVS     R1,#+10
   \   00000086   ........           BL       __aeabi_idivmod
   \   0000008A   0501               LSLS     R5,R0,#+4
   \   0000008C   2000               MOVS     R0,R4
   \   0000008E   0A21               MOVS     R1,#+10
   \   00000090   ........           BL       __aeabi_idivmod
   \   00000094   3140               ANDS     R1,R1,R6
   \   00000096   2943               ORRS     R1,R1,R5
   \   00000098   0906               LSLS     R1,R1,#+24
   \   0000009A   090E               LSRS     R1,R1,#+24
   \   0000009C   0C00               MOVS     R4,R1
   \   0000009E   3D78               LDRB     R5,[R7, #+0]
   \   000000A0   2800               MOVS     R0,R5
   \   000000A2   0A21               MOVS     R1,#+10
   \   000000A4   ........           BL       __aeabi_idivmod
   \   000000A8   0001               LSLS     R0,R0,#+4
   \   000000AA   01B5               PUSH     {R0,LR}
   \   000000AC   2800               MOVS     R0,R5
   \   000000AE   0A21               MOVS     R1,#+10
   \   000000B0   ........           BL       __aeabi_idivmod
   \   000000B4   3140               ANDS     R1,R1,R6
   \   000000B6   0098               LDR      R0,[SP, #0]
   \   000000B8   02B0               ADD      SP,SP,#+8
   \   000000BA   0143               ORRS     R1,R1,R0
   \   000000BC   0906               LSLS     R1,R1,#+24
   \   000000BE   090E               LSRS     R1,R1,#+24
   \   000000C0   0D00               MOVS     R5,R1
   \   000000C2   BF79               LDRB     R7,[R7, #+6]
   \   000000C4   3800               MOVS     R0,R7
   \   000000C6   0A21               MOVS     R1,#+10
   \   000000C8   ........           BL       __aeabi_idivmod
   \   000000CC   0001               LSLS     R0,R0,#+4
   \   000000CE   01B5               PUSH     {R0,LR}
   \   000000D0   3800               MOVS     R0,R7
   \   000000D2   0A21               MOVS     R1,#+10
   \   000000D4   ........           BL       __aeabi_idivmod
   \   000000D8   0E40               ANDS     R6,R6,R1
   \   000000DA   0098               LDR      R0,[SP, #0]
   \   000000DC   02B0               ADD      SP,SP,#+8
   \   000000DE   0643               ORRS     R6,R6,R0
   \   000000E0   3606               LSLS     R6,R6,#+24
   \   000000E2   360E               LSRS     R6,R6,#+24
    151          char Min        = ((DateTime.Minute/10)<<4)       |  ((DateTime.Minute%10) &0xF);
    152          char Hour       = ((DateTime.Hour/10)<<4)         |  ((DateTime.Hour%10) &0xF);
    153          char Day        = ((DateTime.Day/10)<<4)          |  ((DateTime.Day%10) &0xF);
    154          char Mounth     = ((DateTime.Mounth/10)<<4)       |  ((DateTime.Mounth%10) &0xF);
    155          char Year       = ((DateTime.Year/10)<<4)         |  ((DateTime.Year%10) &0xF);
    156          char DayOfWeek  = ((DateTime.DayOfWeek/10)<<4)    |  ((DateTime.DayOfWeek%10) &0xF);
    157            
    158          ComandCLK[0]=0x80;
   \   000000E4   0C48               LDR      R0,??SetRTC_DateTime_0+0x4  ;; ComandCLK
   \   000000E6   8021               MOVS     R1,#+128
   \   000000E8   0170               STRB     R1,[R0, #+0]
    159          ComandCLK[1]=Sec;
   \   000000EA   0099               LDR      R1,[SP, #+0]
   \   000000EC   4170               STRB     R1,[R0, #+1]
    160          ComandCLK[2]=Min;
   \   000000EE   0199               LDR      R1,[SP, #+4]
   \   000000F0   8170               STRB     R1,[R0, #+2]
    161          ComandCLK[3]=Hour;
   \   000000F2   0299               LDR      R1,[SP, #+8]
   \   000000F4   C170               STRB     R1,[R0, #+3]
    162          ComandCLK[4]=DayOfWeek;
   \   000000F6   0671               STRB     R6,[R0, #+4]
    163          ComandCLK[5]=Day;
   \   000000F8   0399               LDR      R1,[SP, #+12]
   \   000000FA   4171               STRB     R1,[R0, #+5]
    164          ComandCLK[6]=Mounth;
   \   000000FC   8471               STRB     R4,[R0, #+6]
    165          ComandCLK[7]=Year;
   \   000000FE   C571               STRB     R5,[R0, #+7]
    166          ComandCLK[8]=0;
   \   00000100   0021               MOVS     R1,#+0
   \   00000102   0172               STRB     R1,[R0, #+8]
    167          //  char comand[]={0x80, Sec, Min, Hour, DayOfWeek, Day, Mounth, Year}; 
    168          int DTS=8;
    169            SPI_SendB_Buff(ComandCLK,DTS,Cs_Clock); 
   \   00000104   0122               MOVS     R2,#+1
   \   00000106   0821               MOVS     R1,#+8
   \   00000108   ........           BL       SPI_SendB_Buff
    170            
    171             
    172          }//_____________________________________________________________________________
   \   0000010C   05B0               ADD      SP,SP,#+20
   \   0000010E   F0BC               POP      {R4-R7}
   \   00000110   01BC               POP      {R0}
   \   00000112   0047               BX       R0               ;; return
   \                     ??SetRTC_DateTime_0:
   \   00000114   ........           DC32     DateTime
   \   00000118   ........           DC32     ComandCLK
    173          
    174          
    175          
    176          
    177          
    178          //-----------------------------------------------------------------------------
    179          //! Nazwa funkcji :    SPI_Response_Interpretation
    180          //! Funkcja interpretacji danych otrzymanych z lini SPI
    181          //  Buffer_Tx - parametr funkcji zawieraj¹cy wskanik do danych wys³anych odebranych
    182          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    183          char SPI_Clock_Execute(char *Buffer_Tx, char *Buffer_Rx)                                       
    184          {
   \                     SPI_Clock_Execute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    185              char res=0; 
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0200               MOVS     R2,R0
    186              switch (*Buffer_Tx)
   \   00000006   009B               LDR      R3,[SP, #+0]
   \   00000008   1B78               LDRB     R3,[R3, #+0]
   \   0000000A   002B               CMP      R3,#+0
   \   0000000C   19D0               BEQ      ??SPI_Clock_Execute_0
   \   0000000E   112B               CMP      R3,#+17
   \   00000010   15D0               BEQ      ??SPI_Clock_Execute_1
   \   00000012   802B               CMP      R3,#+128
   \   00000014   02D0               BEQ      ??SPI_Clock_Execute_2
   \   00000016   912B               CMP      R3,#+145
   \   00000018   11D0               BEQ      ??SPI_Clock_Execute_1
   \   0000001A   0CE0               B        ??SPI_Clock_Execute_3
    187              {
    188          
    189                case order_set_sec:                                                       //wykonano ustawienie sekundy jako czêæ ustawiania godziny/daty  
    190                     for (char i=0; i<16; i++)
   \                     ??SPI_Clock_Execute_2:
   \   0000001C   0500               MOVS     R5,R0
   \   0000001E   06E0               B        ??SPI_Clock_Execute_4
    191                     {
    192                       Buffer_Tx[i]=0;
   \                     ??SPI_Clock_Execute_5:
   \   00000020   009C               LDR      R4,[SP, #+0]
   \   00000022   E554               STRB     R5,[R4, R3]
    193                       Buffer_Rx[i]=0;
   \   00000024   0400               MOVS     R4,R0
   \   00000026   CC54               STRB     R4,[R1, R3]
    194                     }
   \   00000028   521C               ADDS     R2,R2,#+1
   \   0000002A   1206               LSLS     R2,R2,#+24
   \   0000002C   120E               LSRS     R2,R2,#+24
   \                     ??SPI_Clock_Execute_4:
   \   0000002E   1300               MOVS     R3,R2
   \   00000030   102B               CMP      R3,#+16
   \   00000032   F5D3               BCC      ??SPI_Clock_Execute_5
    195                     res = 8;
   \                     ??SPI_Clock_Execute_6:
   \   00000034   0822               MOVS     R2,#+8
    196                break;
    197          
    198                case order_read_ChargerReg:                                                       //wykonano ustawienie sekundy jako czêæ ustawiania godziny/daty  
    199          
    200                     res = 2;
    201                break;
    202          
    203                case order_set_ChargerReg:                                                       //wykonano ustawienie sekundy jako czêæ ustawiania godziny/daty  
    204          
    205                     res = 2;
    206                break;      
    207                
    208                
    209                case order_read_sec:                                                      //wykonano odczyt sekundy jako czêæ odczytu godziny/daty  
    210                    
    211                  
    212                  
    213                   pDateTime->Second     = (Buffer_Rx[0]&0xf) +  ((Buffer_Rx[0]>>4)&0x7)*10;
    214                   pDateTime->Minute     = (Buffer_Rx[5]&0xf) +  ((Buffer_Rx[5]>>4)&0x7)*10;
    215                   pDateTime->Hour       = (Buffer_Rx[4]&0xf) +  ((Buffer_Rx[4]>>4)&0x3)*10;
    216                   pDateTime->DayOfWeek  = Buffer_Rx[9];
    217                   pDateTime->Day        = (Buffer_Rx[8]&0xf) +  ((Buffer_Rx[8]>>4)&0x3)*10;
    218                   pDateTime->Mounth     = (Buffer_Rx[13]&0xf) +  ((Buffer_Rx[13]>>4)&0x3)*10;
    219                   pDateTime->Year       = (Buffer_Rx[12]&0xf) +  ((Buffer_Rx[12]>>4)&0xF)*10;
    220               
    221          
    222                   TRACE_INFO("%d:", pDateTime->Hour); 
    223                   TRACE_INFO("%d:", pDateTime->Minute); 
    224                   TRACE_INFO("%d     ", pDateTime->Second);  
    225                   TRACE_INFO("%d-", pDateTime->Day);  
    226                   TRACE_INFO("%d-", pDateTime->Mounth);  
    227                   TRACE_INFO("%d    ", pDateTime->Year);  
    228                    TRACE_INFO("\n\r");  
    229                  
    230                    for (char i=0; i<16; i++)
    231                     {
    232                       Buffer_Tx[i]=0;
    233                       Buffer_Rx[i]=0;
    234                     }
    235                    
    236                     res = 8;
    237                break;
    238                
    239          
    240                
    241          
    242                
    243                
    244              }
    245          
    246             return res;
   \                     ??SPI_Clock_Execute_3:
   \   00000036   1000               MOVS     R0,R2
   \   00000038   F8BC               POP      {R3-R7}
   \   0000003A   02BC               POP      {R1}
   \   0000003C   0847               BX       R1               ;; return
   \                     ??SPI_Clock_Execute_1:
   \   0000003E   0222               MOVS     R2,#+2
   \   00000040   F9E7               B        ??SPI_Clock_Execute_3
   \                     ??SPI_Clock_Execute_0:
   \   00000042   2B4A               LDR      R2,??SPI_Clock_Execute_7  ;; pDateTime
   \   00000044   0724               MOVS     R4,#+7
   \   00000046   0F23               MOVS     R3,#+15
   \   00000048   1768               LDR      R7,[R2, #+0]
   \   0000004A   0D78               LDRB     R5,[R1, #+0]
   \   0000004C   1D40               ANDS     R5,R5,R3
   \   0000004E   AC46               MOV      R12,R5
   \   00000050   0D78               LDRB     R5,[R1, #+0]
   \   00000052   2E00               MOVS     R6,R5
   \   00000054   3611               ASRS     R6,R6,#+4
   \   00000056   2640               ANDS     R6,R6,R4
   \   00000058   0A25               MOVS     R5,#+10
   \   0000005A   6E43               MULS     R6,R5,R6
   \   0000005C   6546               MOV      R5,R12
   \   0000005E   AD19               ADDS     R5,R5,R6
   \   00000060   7D71               STRB     R5,[R7, #+5]
   \   00000062   1668               LDR      R6,[R2, #+0]
   \   00000064   4D79               LDRB     R5,[R1, #+5]
   \   00000066   1D40               ANDS     R5,R5,R3
   \   00000068   4F79               LDRB     R7,[R1, #+5]
   \   0000006A   3F11               ASRS     R7,R7,#+4
   \   0000006C   3C40               ANDS     R4,R4,R7
   \   0000006E   0A27               MOVS     R7,#+10
   \   00000070   7C43               MULS     R4,R7,R4
   \   00000072   2C19               ADDS     R4,R5,R4
   \   00000074   3471               STRB     R4,[R6, #+4]
   \   00000076   0324               MOVS     R4,#+3
   \   00000078   1768               LDR      R7,[R2, #+0]
   \   0000007A   0D79               LDRB     R5,[R1, #+4]
   \   0000007C   1D40               ANDS     R5,R5,R3
   \   0000007E   AC46               MOV      R12,R5
   \   00000080   0D79               LDRB     R5,[R1, #+4]
   \   00000082   2E00               MOVS     R6,R5
   \   00000084   3611               ASRS     R6,R6,#+4
   \   00000086   2640               ANDS     R6,R6,R4
   \   00000088   0A25               MOVS     R5,#+10
   \   0000008A   6E43               MULS     R6,R5,R6
   \   0000008C   6546               MOV      R5,R12
   \   0000008E   AD19               ADDS     R5,R5,R6
   \   00000090   FD70               STRB     R5,[R7, #+3]
   \   00000092   1568               LDR      R5,[R2, #+0]
   \   00000094   4E7A               LDRB     R6,[R1, #+9]
   \   00000096   AE71               STRB     R6,[R5, #+6]
   \   00000098   1768               LDR      R7,[R2, #+0]
   \   0000009A   0D7A               LDRB     R5,[R1, #+8]
   \   0000009C   1D40               ANDS     R5,R5,R3
   \   0000009E   AC46               MOV      R12,R5
   \   000000A0   0D7A               LDRB     R5,[R1, #+8]
   \   000000A2   2E00               MOVS     R6,R5
   \   000000A4   3611               ASRS     R6,R6,#+4
   \   000000A6   2640               ANDS     R6,R6,R4
   \   000000A8   0A25               MOVS     R5,#+10
   \   000000AA   6E43               MULS     R6,R5,R6
   \   000000AC   6546               MOV      R5,R12
   \   000000AE   AD19               ADDS     R5,R5,R6
   \   000000B0   BD70               STRB     R5,[R7, #+2]
   \   000000B2   1668               LDR      R6,[R2, #+0]
   \   000000B4   4D7B               LDRB     R5,[R1, #+13]
   \   000000B6   1D40               ANDS     R5,R5,R3
   \   000000B8   4F7B               LDRB     R7,[R1, #+13]
   \   000000BA   3F11               ASRS     R7,R7,#+4
   \   000000BC   3C40               ANDS     R4,R4,R7
   \   000000BE   0A27               MOVS     R7,#+10
   \   000000C0   7C43               MULS     R4,R7,R4
   \   000000C2   2C19               ADDS     R4,R5,R4
   \   000000C4   7470               STRB     R4,[R6, #+1]
   \   000000C6   1268               LDR      R2,[R2, #+0]
   \   000000C8   0C7B               LDRB     R4,[R1, #+12]
   \   000000CA   2340               ANDS     R3,R3,R4
   \   000000CC   2409               LSRS     R4,R4,#+4
   \   000000CE   3D00               MOVS     R5,R7
   \   000000D0   6C43               MULS     R4,R5,R4
   \   000000D2   1B19               ADDS     R3,R3,R4
   \   000000D4   1370               STRB     R3,[R2, #+0]
   \   000000D6   0200               MOVS     R2,R0
   \   000000D8   0500               MOVS     R5,R0
   \                     ??SPI_Clock_Execute_8:
   \   000000DA   1300               MOVS     R3,R2
   \   000000DC   102B               CMP      R3,#+16
   \   000000DE   A9D2               BCS      ??SPI_Clock_Execute_6
   \   000000E0   009C               LDR      R4,[SP, #+0]
   \   000000E2   E554               STRB     R5,[R4, R3]
   \   000000E4   0400               MOVS     R4,R0
   \   000000E6   CC54               STRB     R4,[R1, R3]
   \   000000E8   521C               ADDS     R2,R2,#+1
   \   000000EA   1206               LSLS     R2,R2,#+24
   \   000000EC   120E               LSRS     R2,R2,#+24
   \   000000EE   F4E7               B        ??SPI_Clock_Execute_8
   \                     ??SPI_Clock_Execute_7:
   \   000000F0   ........           DC32     pDateTime
    247          }//_____________________________________________________________________________

   \                                 In section .rodata, align 4
   \                     `?<Constant {143, 0, 0}>`:
   \   00000000   8F000000           DC8 143, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>`:
   \   00000000   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 0
   \              0600        
    248          
    249          

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     GetDateTimeFromRTC     16
     InitRTC                 8
     SPI_Clock_Execute      24
     SetRTC_DateTime        48


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     pDateTime                         4
     InitRTC                          28
     GetDateTimeFromRTC               32
     ComandCLK                        12
     SetRTC_DateTime                 284
     SPI_Clock_Execute               244
     ?<Constant {143, 0, 0}>           4
     ?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>
                                       8

 
  12 bytes in section .bss
   4 bytes in section .data
  12 bytes in section .rodata
 588 bytes in section Debug.txt
 
 588 bytes of CODE  memory
  12 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: 1
