###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           20/Mar/2013  07:53:44 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\Framework\main.c                              #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\main.c" -D AT91SAM7S256 -D          #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -D _TESTER_ -lC "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\TESTER S300i\List\"                #
#                    --diag_suppress Pa082 -o "D:\Zeuron\Projekty\S300\S300-p #
#                    rogram v1.3 BETA- 14.03.2013\TESTER S300i\Obj\"          #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian little --cpu ARM7TDMI -e --fpu None     #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.3       #
#                    BETA- 14.03.2013\lib\AT91SAM7S256\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\cdc\" -I                           #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\core\" -I "D:\Zeuron\Projekty\S300\S300-progr #
#                    am v1.3 BETA- 14.03.2013\startup\" -I                    #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\" -I "D:\Zeuron\Projekty\S300\S300- #
#                    program v1.3 BETA- 14.03.2013\Framework\Configuration\"  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 5.0\ARM\INC\" --section .text=Debug.txt        #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\List\main.lst                    #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\Obj\main.o                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\main.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//                     
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : main.c                                   *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21            
     22          
     23          
     24          //Sta³e ------------------------------------------------------------------------
     25          #ifdef S300
     26              const char identyfikacja[]="S300 ";                                          //nazwa urz¹dzeni 
     27          #endif
     28          #ifdef S300i

   \                                 In section .rodata, align 4
     29              const char identyfikacja[]="S300-i ";                                          //nazwa urz¹dzeni 
   \                     identyfikacja:
   \   00000000   533330302D69       DC8 "S300-i "
   \              2000        
     30          #endif
     31          #ifdef S300iMax
     32              const char identyfikacja[]="S300-iMax ";                                          //nazwa urz¹dzeni 
     33          #endif
     34          #ifdef S300iOld
     35              const char identyfikacja[]="S300-i(Old) ";                                          //nazwa urz¹dzeni 
     36          #endif
     37              

   \                                 In section .rodata, align 4
     38              const char system[]="1.3B";                                                  //nazwa urz¹dzeni 
   \                     system:
   \   00000000   312E334200         DC8 "1.3B"
   \   00000005   000000             DC8 0, 0, 0
     39              
     40          //____________________________Koniec sta³ych ___________________________________
     41          
     42          
     43          
     44          //Konfiguracja -----------------------------------------------------------------
     45              #define LightLCD_Time              20                                       //czas (s sek.) wygaszania podœwietlenia
     46          //___________________________Koniec konfiguracji________________________________
     47          
     48          
     49          
     50          
     51          //Definicje --------------------------------------------------------------------
     52              #define MSG_SIZE 	                1000                                    
     53              #define TAB_SIZE                    1000                                    
     54              #define USB_BUFFER_SIZE             256                                     //bufor odbiorczy USB  
     55             
     56             // #define NOTRACES                                                            //Wy³¹cza debagowania poprzez US1
     57              
     58          //___________________________Koniec definicji___________________________________
     59          
     60          
     61          
     62          // Pliki do³¹czane -------------------------------------------------------------
     63          
     64               #include "main_H.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_AIC_ConfigureIt(AT91PS_AIC, unsigned int, unsigned int, unsigned int, void (*)())
   \                     AT91F_AIC_ConfigureIt:
   \   00000000   F5B4               PUSH     {R0,R2,R4-R7}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   069E               LDR      R6,[SP, #+24]
   \   00000008   A100               LSLS     R1,R4,#+2
   \   0000000A   5718               ADDS     R7,R2,R1
   \   0000000C   8037               ADDS     R7,R7,#+128
   \   0000000E   3868               LDR      R0,[R7, #+0]
   \   00000010   0125               MOVS     R5,#+1
   \   00000012   A540               LSLS     R5,R5,R4
   \   00000014   2C00               MOVS     R4,R5
   \   00000016   9225               MOVS     R5,#+146
   \   00000018   6D00               LSLS     R5,R5,#+1        ;; #+292
   \   0000001A   5519               ADDS     R5,R2,R5
   \   0000001C   2C60               STR      R4,[R5, #+0]
   \   0000001E   3E60               STR      R6,[R7, #+0]
   \   00000020   019E               LDR      R6,[SP, #+4]
   \   00000022   1E43               ORRS     R6,R6,R3
   \   00000024   5650               STR      R6,[R2, R1]
   \   00000026   6C60               STR      R4,[R5, #+4]
   \   00000028   FCBC               POP      {R2-R7}
   \   0000002A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_AIC_EnableIt(AT91PS_AIC, unsigned int)
   \                     AT91F_AIC_EnableIt:
   \   00000000   9022               MOVS     R2,#+144
   \   00000002   5200               LSLS     R2,R2,#+1        ;; #+288
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   8B40               LSLS     R3,R3,R1
   \   00000008   8350               STR      R3,[R0, R2]
   \   0000000A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgOutput:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   0161               STR      R1,[R0, #+16]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgInput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgInput:
   \   00000000   4161               STR      R1,[R0, #+20]
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPullup(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgPullup:
   \   00000000   CA43               MVNS     R2,R1
   \   00000002   0266               STR      R2,[R0, #+96]
   \   00000004   4166               STR      R1,[R0, #+100]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_InterruptEnable(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_InterruptEnable:
   \   00000000   0164               STR      R1,[R0, #+64]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PIO_GetInterruptStatus(AT91PS_PIO)
   \                     AT91F_PIO_GetInterruptStatus:
   \   00000000   C06C               LDR      R0,[R0, #+76]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_WDTRestart(AT91PS_WDTC)
   \                     AT91F_WDTRestart:
   \   00000000   0149               LDR      R1,??AT91F_WDTRestart_0  ;; 0xa5000001
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??AT91F_WDTRestart_0:
   \   00000008   010000A5           DC32     0xa5000001

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_LCD_Init()
   \                     AT91F_LCD_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   2348               LDR      R0,??AT91F_LCD_Init_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   234C               LDR      R4,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000000C   0421               MOVS     R1,#+4
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       AT91F_PIO_CfgOutput
   \   00000014   8021               MOVS     R1,#+128
   \   00000016   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   ........           BL       AT91F_PIO_CfgOutput
   \   0000001E   8021               MOVS     R1,#+128
   \   00000020   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       AT91F_PIO_CfgOutput
   \   00000028   8021               MOVS     R1,#+128
   \   0000002A   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   0000002C   2000               MOVS     R0,R4
   \   0000002E   ........           BL       AT91F_PIO_CfgOutput
   \   00000032   8021               MOVS     R1,#+128
   \   00000034   0905               LSLS     R1,R1,#+20       ;; #+134217728
   \   00000036   2000               MOVS     R0,R4
   \   00000038   ........           BL       AT91F_PIO_CfgOutput
   \   0000003C   1021               MOVS     R1,#+16
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       AT91F_PIO_CfgOutput
   \   00000044   8021               MOVS     R1,#+128
   \   00000046   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       AT91F_PIO_CfgOutput
   \   0000004E   8021               MOVS     R1,#+128
   \   00000050   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   00000052   2000               MOVS     R0,R4
   \   00000054   ........           BL       AT91F_PIO_CfgOutput
   \   00000058   8021               MOVS     R1,#+128
   \   0000005A   8904               LSLS     R1,R1,#+18       ;; #+33554432
   \   0000005C   2000               MOVS     R0,R4
   \   0000005E   ........           BL       AT91F_PIO_CfgOutput
   \   00000062   8021               MOVS     R1,#+128
   \   00000064   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000066   2000               MOVS     R0,R4
   \   00000068   ........           BL       AT91F_PIO_CfgOutput
   \   0000006C   8021               MOVS     R1,#+128
   \   0000006E   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   00000070   2000               MOVS     R0,R4
   \   00000072   ........           BL       AT91F_PIO_CfgOutput
   \   00000076   8021               MOVS     R1,#+128
   \   00000078   0904               LSLS     R1,R1,#+16       ;; #+8388608
   \   0000007A   2000               MOVS     R0,R4
   \   0000007C   ........           BL       AT91F_PIO_CfgOutput
   \   00000080   0121               MOVS     R1,#+1
   \   00000082   2000               MOVS     R0,R4
   \   00000084   ........           BL       AT91F_PIO_CfgOutput
   \   00000088   0448               LDR      R0,??AT91F_LCD_Init_0+0x8  ;; 0xfffff430
   \   0000008A   0549               LDR      R1,??AT91F_LCD_Init_0+0xC  ;; 0x7e00811c
   \   0000008C   0160               STR      R1,[R0, #+0]
   \   0000008E   10BC               POP      {R4}
   \   00000090   01BC               POP      {R0}
   \   00000092   0047               BX       R0               ;; return
   \                     ??AT91F_LCD_Init_0:
   \   00000094   00FCFFFF           DC32     0xfffffc00
   \   00000098   00F4FFFF           DC32     0xfffff400
   \   0000009C   30F4FFFF           DC32     0xfffff430
   \   000000A0   1C81007E           DC32     0x7e00811c

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void *USB_GetDriverInterface(S_usb const *)
   \                     USB_GetDriverInterface:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetDriverID(S_usb const *)
   \                     USB_GetDriverID:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   C068               LDR      R0,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Handler(S_usb const *)
   \                     USB_Handler:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   896A               LDR      R1,[R1, #+40]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork bool USB_Attach(S_usb const *)
   \                     USB_Attach:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C969               LDR      R1,[R1, #+28]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   02BC               POP      {R1}
   \   00000010   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Connect(S_usb const *)
   \                     USB_Connect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C96A               LDR      R1,[R1, #+44]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Disconnect(S_usb const *)
   \                     USB_Disconnect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   096B               LDR      R1,[R1, #+48]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetState(S_usb const *)
   \                     USB_GetState:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0004               LSLS     R0,R0,#+16
   \   00000006   000C               LSRS     R0,R0,#+16
   \   00000008   7047               BX       LR               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     65               #include "WizFi.h"

   
   ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\WizFi.h",171  Warning[Pe001]: 
          last line of file ends without a newline
     66          
     67          
     68          
     69          //-----------------------Koniec plików do³¹czanych -----------------------------
     70          
     71          
     72          
     73          
     74          
     75          
     76          
     77          
     78          
     79          

   \                                 In section .bss, align 1
     80          char APC;
   \                     APC:
   \   00000000                      DS8 1
     81          
     82          
     83          
     84          
     85          
     86          //Zmienne globalne -------------------------------------------------------------

   \                                 In section .data, align 1
     87              char g_czas_petli = 10;                                                     //  Czas przebiegu pêtli programu w ms
   \                     g_czas_petli:
   \   00000000   0A                 DC8 10

   \                                 In section .bss, align 4
     88              unsigned int komunikacja_ok=0;                                              //1-ok, 0-brak
   \                     komunikacja_ok:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     89              int  rej_prog[10];
   \                     rej_prog:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     90              int LifeCouter = 0, LifeCouterMax = 0;                                      // Zmienne funkcji LifeBlinking
   \                     LifeCouter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     LifeCouterMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     91              byte USB_busy;
   \                     USB_busy:
   \   00000000                      DS8 1
     92              int FlashProgramOfset =  256;                                               //0-wykonywany program A, 
     93              int FlashProgramReserveOfset =  256+UseProgramSize;                         //0-wykonywany program A, 

   \                                 In section .bss, align 4
     94              int  advY =0;                                                                  //chwilowa wspolzedna Y TP
   \                     advY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     95              int  advX =0;                                                                  //chwilowa wspolzedna X TP
   \                     advX:
   \   00000000                      DS8 4
     96               signed short  Y_down  =-1;                                                           //wspolzedna Y TP (naciœniêcie)
     97               signed short  X_down  =-1;                                                           //wspolzedna X TP (naciœniêcie)
     98               signed short  Y_up    =-1;                                                           //wspolzedna Y TP (puszczenie)
     99               signed short  X_up    =-1;                                                           //wspolzedna X TP (puszczenie)

   \                                 In section .bss, align 4
    100              int  g_leng  =0;                                                            //jêzyk 1-polski, 2 angielski
   \                     g_leng:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    101              char g_level =0;                                                            //poziom dostêpu 0-ograniczony, 1- operator, 2-administrator
   \                     g_level:
   \   00000000                      DS8 1
    102              char g_Password_1[8]={"1111"};                                              //haslo poziomu 1  
    103              char g_Password_2[8]={"2222"};                                              //haslo poziomu 1  

   \                                 In section .bss, align 4
    104              long int g_Message =0;                                                             //1-wiadomosc ekranowa
   \                     g_Message:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    105              int g_info=0;                                                                   
   \                     g_info:
   \   00000000                      DS8 4
    106              char g_PC_Connected;                                                       //1-pod³aczony komputer
    107              unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
    108              unsigned long       g_seconds_counter;                                      //globalny licznik sekundowy od w³¹czenia/restartu sterownika
    109              
    110          //    static char US0_Buffer[US_BUFFER_SIZE];                                    //bufor odbiorczy USART 0
    111          //    static char US0_Buffer2[US_BUFFER_SIZE];                                   //zapasowy bufor odbiorczy USART 0
    112              char AdressModbus = 1;                                                      //Adres urz¹dzenia dla protoko³u modbus
    113              int g_LightCouterLCD = 0;                                                   //licznik podœwietlenia lcd
    114              char g_LightLCDEnable = 0;                                                   //podœwietlenia lcd
    115              char g_ScreenSever_On;                                                      //1-Wygaszacz aktywny
    116              char g_ScreenSever_Time_On;                                                 //godzina w³¹czenia wygaszacz
    117              char g_ScreenSever_Time_Off;                                                //godzina wy³¹czenia wygaszacza
    118              char g_SlaveConnect=0;                                                   //
    119              char g_Stop_Program = 0;                                                    //1- zatrzymuje program
    120              char g_Restart_Program = 1;                                                 //1- restartuje program
    121              unsigned long long g_NextTimeProgram = 0;                                                    //
    122              char g_NeedPass=0;  //wymóg has³a
    123              char AlarmOn=0;                                                             //1=alarm dzwiêkowy
    124              char Speaker[SPK_Amount];                                                   //sygna³ dŸwiêkowy
    125              _AlarmScreenActionType AlarmScreenAction;
    126              _Net NET; 
    127              char WypMaxJasnosci;                                                        //jasnoœc ekranu przy aktywnym ekranie
    128              char WypMinJasnosci;                                                        //jasnoœc ekranu przy nieaktywnym ekranie
    129              char gWypMinJasnosciTest;                                                   //test wygl¹du ekranu z  jsnoœci¹ WypMinJasnosci   
    130              long long FuseLastWiFiDataIn;                                               //zabezpieczenie przed blokad¹ DMA USART. FuseLastWiFiDataIn zawiera czas ostatniej odpowiedzi od usarta. Je¿eli WiFi jest w³¹czone a USART milczy od 30s to restartuj mikroprocesor
    131          
    132              //___________________________Koniec zmiennych globalnych________________________
    133          
    134          
    135          
    136          
    137          
    138          //Zmienne lokalne -------------------------------------------------------------
    139              char LightLCD_OFF_Counter;                                                  //zmiena œciemniacza LCD
    140              char LightLCD_OFF_Counter2;                                                 //zmiena œciemniacza LCD
    141              char LightLCD_OFF_Curent;                                                   //zmiena œciemniacza LCD
    142              volatile char SlaveMode=0;
    143              volatile char ReciveFrameToMe=0;                                            //zmienna u¿ywana do prze³¹czania w tryb tymczasowy master po odebraniu ramki pobrania statusu z poprawnym id a nastêpnie ramki do obcego lub ponownym odebraniu ramki z poprawnym id i rozkazem pobrania statusu. Ramka pobrania statusu (odczyt rej. 0) zawsze wystêpuje na pocz¹tku kolejki ramek do pojedyñczego wêz³a 
    144          //___________________________Koniec zmiennych lplkalnych________________________
    145          
    146          
    147              
    148               
    149          
    150              
    151          
    152          //Zmienne zewnêtrzne -------------------------------------------------------------    
    153              extern char       LCD_Canvas[8][128];
    154              extern char       Label_move;
    155              extern int        MenuLevel;      //poziom menu
    156              extern int        Suw_poz_analog;  
    157              extern int        ScrollMenu_poz;
    158              extern char       g_US0_Connect_OK;
    159              extern char       g_US1_Connect_OK;
    160              extern char       g_US0_Comm_TIMEOUT;
    161              extern _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];
    162              extern char       g_Ans_ZD_MODBUS_0;
    163              extern char       g_Current_ZD_MODBUS_0;
    164              extern char       g_ERR_ZD_MODBUS_0;
    165              extern int        g_US0_Comm_MinCykle;
    166              extern char       US0_MasterMODBUS_ENABLE;
    167              extern char       g_US1_Comm_TIMEOUT;
    168              extern _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];
    169              extern char       g_Ans_ZD_MODBUS_1;
    170              extern char       g_Current_ZD_MODBUS_1;
    171              extern char       g_ERR_ZD_MODBUS_1;
    172              extern int        g_US1_Comm_MinCykle;
    173              extern char       US1_MasterMODBUS_ENABLE;
    174              extern char       Busy_program;
    175              extern _Trap      Trap;
    176              extern _Correct korekta_Y;
    177              extern _Correct korekta_X;
    178              extern  char Synchronizacja;
    179              extern char         RF_CurrentTask;
    180              //extern unsigned char  SPI_Buffer_Rx[SPI_Read_BUFFER_SIZE];                         //bufor odbiorczy SPI
    181              //extern unsigned char  SPI_Buffer_Tx[SPI_Write_BUFFER_SIZE];                        //bufor odbiorczy SPI
    182              extern void ReadWriteSpi (unsigned char* pReadBuffer, int nReadLen, unsigned char* pWriteBuffer, int nWriteLen, bool bHoldCS);
    183              extern void SPI_init(void) ;
    184              
    185              extern _MainStage  MainStage; 
    186              extern _ProgramTab gProg;
    187              extern void RF_Init(void);
    188              extern _RF_Status RF_Status;
    189              extern char g_RF_TimeOutCounter;
    190              extern   _RF_TaskTab  RF_TaskTab;
    191              extern _TransQuality TransQuality;
    192              extern _DateTime  *pDateTime;
    193              extern char Variables[];
    194              extern unsigned int CyklPerSek;
    195              extern char Buff_TX_1[];
    196              AT91PS_MEM pAT91C_IFLASH_MEM=AT91C_IFLASH_MEM;
    197              extern short int VariablesAnal[];
    198              extern char Variables[];
    199              extern unsigned char  US1_Buffer[];
    200              
    201          //___________________________Koniec zmiennych zewnêtrznych________________________    
    202              
    203              
    204              
    205          //Zmienne tymczasowe -----------------------------------------------------------
    206              char tmp_i =0; 
    207              float licznik = 0.0;
    208              int licznik2 = 0;
    209              int licznik3 = 0;
    210              char *memory;
    211              unsigned long sss;
    212              int int1 =0;
    213              
    214          
    215              _DateTime DateTime;
    216              
    217               
    218              //___________________________Koniec zmiennych tymczasowych______________________
    219          
    220          
    221              
    222          
    223          //Funkcje zewnêtrzne -----------------------------------------------------------
    224              extern RAM ram;
    225              extern ConversFC Convers_DW_B;
    226              extern void InitFlash(void);
    227              extern void Program (_ProgramTab *ProgTab);
    228              extern void at91flashWriteDW(int sektor, int nr_DW, unsigned long wartDW );
    229              extern void ScreenEvent(void);
    230              extern int Suw_poz;
    231              extern void MenuPaint(void);
    232              extern void at91flashWrite();
    233              extern void ConfigureIrBus(void);
    234              extern void MenuRefresh();
    235              //extern unsigned short crc16(unsigned char* modbusframe,int Length);
    236              //extern unsigned char ModBus_CommS(unsigned char* modbusframe);
    237              //extern void ModBus_CommS_US0();
    238              extern void US0_init(void);
    239              extern void US1_init(void);
    240              extern char ModBus_MASTER_TX(char US_Nr);
    241              extern void ReadTP(_TPoint *Point);
    242              //extern BYTE ModBus_MASTER_Return(BYTE* modbusframe);
    243          //_______________________ Koniec funkcji zewnêtrznych __________________________
    244              
    245          
    246          /*
    247          $Id: serial_example.c,v 1.1.2.1 2006/12/05 08:33:25 danielru Exp $
    248          */
    249          
    250          
    251          
    252          
    253          //------------------------------------------------------------------------------
    254          //      Prototypes
    255          //------------------------------------------------------------------------------
    256          
    257          //! \brief  Initialization callback
    258          static void CBK_Init(const S_usb *pUsb);
    259          
    260          //! \brief  Suspend callback
    261          static void CBK_Suspend(const S_usb *pUsb);
    262          
    263          //! \brief  Resume callback
    264          static void CBK_Resume(const S_usb *pUsb);
    265          
    266          //! \brief  New request callback
    267          static void CBK_NewRequest(const S_usb *pUsb);
    268          
    269          //! \brief  New reset callback
    270          //static void CBK_Reset(const S_usb *pUsb);
    271          
    272          //! \brief  New SOF callback
    273          //static void CBK_SOF(const S_usb *pUsb);
    274          
    275          //------------------------------------------------------------------------------
    276          //      Internal variables
    277          //------------------------------------------------------------------------------
    278          
    279          //! \brief  List of endpoints (including endpoint 0) used by the device.
    280          //! \see    S_usb_endpoint
    281          static S_usb_endpoint pEndpoints[] = {
    282          
    283              USB_ENDPOINT_SINGLEBANK, // Control endpoint 0
    284              USB_ENDPOINT_DUALBANK,   // Data out endpoint
    285              USB_ENDPOINT_DUALBANK,   // Data in endpoint
    286              USB_ENDPOINT_SINGLEBANK, // Notification endpoint
    287          };
    288          
    289          //! \brief  Variable used to store the last received SETUP packet.
    290          //! \see    S_usb_request
    291          //! \see    S_usb
    292          static S_usb_request sSetup;
    293          
    294          //! \brief  Variable used to store the current device state
    295          //! \see    S_usb
    296          static unsigned int dState;
    297          
    298          //! \brief  List of implemented callbacks
    299          //! \see    S_usb_callbacks
    300          //! \see    S_usb

   \                                 In section .rodata, align 4
    301          static const S_usb_callbacks sCallbacks = {
   \                     sCallbacks:
   \   00000000   ........0000       DC32 CBK_Init, 0H, 0H, CBK_Resume, CBK_NewRequest, 0H
   \              000000000000
   \              ............
   \              ....00000000
    302          
    303              CBK_Init,
    304              0, // CBK_Reset
    305              0, //CBK_Suspend,
    306              CBK_Resume,
    307              CBK_NewRequest,
    308              0  // CBK_SOF
    309          };
    310          
    311          //! \brief  USB driver instance
    312          //! \see    S_usb

   \                                 In section .rodata, align 4
    313          static const S_usb sUsb = {
   \                     sUsb:
   \   00000000   ............       DC32 sDefaultDriver, pEndpoints, 4, sCallbacks, sSetup, dState
   \              ....04000000
   \              ............
   \              ............
    314          
    315              &sDefaultDriver,
    316              pEndpoints,
    317              SER_NUM_ENDPOINTS,
    318              &sCallbacks,
    319              &sSetup,
    320              &dState
    321          };
    322          
    323          //! \brief  CDC serial class driver instance
    324          //! \see    S_ser
    325          static S_ser sSer;
    326          
    327          // Buffer for receiving data from the USB
    328          static unsigned char pUsbBuffer[USB_BUFFER_SIZE];
    329          
    330          
    331          //------------------------------------------------------------------------------
    332          //      Internal Functions
    333          //------------------------------------------------------------------------------
    334          
    335          // Interrupt Service Routines
    336          //------------------------------------------------------------------------------
    337          
    338          //------------------------------------------------------------------------------
    339          //! \brief  Handler for the USB controller interrupt
    340          //!
    341          //!         Defers the call to the USB_Handler function.
    342          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    343          void ISR_Driver(void)
    344          {
   \                     ISR_Driver:
   \   00000000   01B5               PUSH     {R0,LR}
    345              USB_Handler(&sUsb);
   \   00000002   ....               LDR      R0,??DataTable1  ;; sUsb
   \   00000004   ........           BL       USB_Handler
    346          }//_______________________ Koniec funkcji ISR_Driver ____________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    347          
    348          
    349          
    350          
    351          //------------------------------------------------------------------------------
    352          //! \brief  Handler for the VBus state change interrupt
    353          //!
    354          //! This method calls the USB_Attach function to perform the necessary
    355          //! operations.
    356          //------------------------------------------------------------------------------
    357          //#if !defined(USB_BUS_POWERED)
    358          char ForwardUSB2Serialferst=0;
    359          
    360          
    361           
    362          

   \                                 In section Debug.txt, align 4, keep-with-next
    363          void ISR_VBus(void)
    364          {
   \                     ISR_VBus:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    365            
    366            
    367            USB_Attach(&sUsb);
   \   00000002   ....               LDR      R5,??DataTable1  ;; sUsb
   \   00000004   2800               MOVS     R0,R5
   \   00000006   ........           BL       USB_Attach
    368          
    369            if ((( AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)>0)
   \   0000000A   0226               MOVS     R6,#+2
   \   0000000C   0024               MOVS     R4,#+0
   \   0000000E   ....               LDR      R7,??DataTable11  ;; DateTime
   \   00000010   ....               LDR      R0,??DataTable3  ;; 0xfffff43c
   \   00000012   0068               LDR      R0,[R0, #+0]
   \   00000014   3100               MOVS     R1,R6
   \   00000016   0842               TST      R0,R1
   \   00000018   31D0               BEQ      ??ISR_VBus_0
   \   0000001A   0120               MOVS     R0,#+1
   \   0000001C   3873               STRB     R0,[R7, #+12]
    370            {
    371              g_PC_Connected=1;
    372              
    373              if (ISSET(USB_GetState(&sUsb), USB_STATE_POWERED)) 
   \   0000001E   2800               MOVS     R0,R5
   \   00000020   ........           BL       USB_GetState
   \   00000024   3042               TST      R0,R6
   \   00000026   14D0               BEQ      ??ISR_VBus_1
    374              {
    375                MenuLevel=1;
   \   00000028   ....               LDR      R0,??DataTable4  ;; MenuLevel
   \   0000002A   0121               MOVS     R1,#+1
   \   0000002C   0160               STR      R1,[R0, #+0]
    376                g_PC_Connected=1;
    377                MenuPaint();
   \   0000002E   ........           BL       MenuPaint
    378                RepaintLCD();
   \   00000032   ........           BL       RepaintLCD
    379                RepaintLCD();
   \   00000036   ........           BL       RepaintLCD
    380               
    381                USB_Connect(&sUsb);   
   \   0000003A   2800               MOVS     R0,R5
   \   0000003C   ........           BL       USB_Connect
    382                
    383          
    384               // if (ForwardUSB2Serialferst!=1)
    385               // {
    386                  ForwardUSB2Serialferst=1; 
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   F875               STRB     R0,[R7, #+23]
    387               // }
    388                
    389                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000044   3C65               STR      R4,[R7, #+80]
    390                if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000046   787B               LDRB     R0,[R7, #+13]
   \   00000048   0028               CMP      R0,#+0
   \   0000004A   15D1               BNE      ??ISR_VBus_2
   \   0000004C   0120               MOVS     R0,#+1
   \   0000004E   7873               STRB     R0,[R7, #+13]
   \   00000050   12E0               B        ??ISR_VBus_2
    391          
    392              }
    393                else
    394              {
    395          
    396                USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_1:
   \   00000052   2800               MOVS     R0,R5
   \   00000054   ........           BL       USB_Disconnect
    397                g_PC_Connected=0;
   \   00000058   2000               MOVS     R0,R4
   \   0000005A   3873               STRB     R0,[R7, #+12]
    398                MenuPaint();
   \   0000005C   ........           BL       MenuPaint
    399                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000060   3C65               STR      R4,[R7, #+80]
    400                if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000062   787B               LDRB     R0,[R7, #+13]
   \   00000064   0028               CMP      R0,#+0
   \   00000066   01D1               BNE      ??ISR_VBus_3
   \   00000068   0120               MOVS     R0,#+1
   \   0000006A   7873               STRB     R0,[R7, #+13]
    401                Trap.Enable=0;
   \                     ??ISR_VBus_3:
   \   0000006C   0F48               LDR      R0,??ISR_VBus_4  ;; Trap
   \   0000006E   2100               MOVS     R1,R4
   \   00000070   0170               STRB     R1,[R0, #+0]
    402                Trap.Row=0;
   \   00000072   4170               STRB     R1,[R0, #+1]
    403                Trap.Col=0;
   \   00000074   8170               STRB     R1,[R0, #+2]
    404                Trap.Activ=0;
   \   00000076   C470               STRB     R4,[R0, #+3]
    405                
    406                
    407          
    408              }
    409              MenuPaint();
   \                     ??ISR_VBus_2:
   \   00000078   ........           BL       MenuPaint
   \   0000007C   12E0               B        ??ISR_VBus_5
    410            }
    411            else
    412            {
    413              USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_0:
   \   0000007E   2800               MOVS     R0,R5
   \   00000080   ........           BL       USB_Disconnect
    414              g_PC_Connected=0;
   \   00000084   2000               MOVS     R0,R4
   \   00000086   3873               STRB     R0,[R7, #+12]
    415              MenuPaint();
   \   00000088   ........           BL       MenuPaint
    416              g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000008C   3C65               STR      R4,[R7, #+80]
    417              if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   0000008E   787B               LDRB     R0,[R7, #+13]
   \   00000090   0028               CMP      R0,#+0
   \   00000092   01D1               BNE      ??ISR_VBus_6
   \   00000094   0120               MOVS     R0,#+1
   \   00000096   7873               STRB     R0,[R7, #+13]
    418              
    419              Trap.Enable=0;
   \                     ??ISR_VBus_6:
   \   00000098   0448               LDR      R0,??ISR_VBus_4  ;; Trap
   \   0000009A   2100               MOVS     R1,R4
   \   0000009C   0170               STRB     R1,[R0, #+0]
    420              Trap.Row=0;
   \   0000009E   4170               STRB     R1,[R0, #+1]
    421              Trap.Col=0;
   \   000000A0   8170               STRB     R1,[R0, #+2]
    422              Trap.Activ=0;
   \   000000A2   C470               STRB     R4,[R0, #+3]
    423              
    424          
    425            } 
    426          
    427          }//_____________________________________________________________________________
   \                     ??ISR_VBus_5:
   \   000000A4   F8BC               POP      {R3-R7}
   \   000000A6   01BC               POP      {R0}
   \   000000A8   0047               BX       R0               ;; return
   \   000000AA   C046               Nop      
   \                     ??ISR_VBus_4:
   \   000000AC   ........           DC32     Trap
    428          //#endif // !defined(USB_BUS_POWERED)
    429          
    430          
    431          
    432          
    433          
    434          // Callbacks
    435          //------------------------------------------------------------------------------
    436          //------------------------------------------------------------------------------
    437          //! \brief  Callback invoked during the initialization of the USB driver
    438          //!
    439          //!         Configures and enables USB controller and VBus monitoring interrupts
    440          //! \param  pUsb    Pointer to a S_usb instance
    441          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    442          static void CBK_Init(const S_usb *pUsb)
    443          {
   \                     CBK_Init:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
    444          
    445            TRACE_INFO("\n\rInicjalizacja przerwania VBUS od podlaczenia USB  \n\r" ); 
    446              
    447              // Configure and enable the USB controller interrupt
    448              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    449                                    USB_GetDriverID(pUsb),
    450                                    USB_CON_PRIOR,
    451                                    0, //AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    452                                    ISR_Driver);
   \   00000004   ........           BL       USB_GetDriverID
   \   00000008   ....               LDR      R5,??DataTable5  ;; 0xfffff000
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0F49               LDR      R1,??CBK_Init_0  ;; ISR_Driver
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   0522               MOVS     R2,#+5
   \   00000014   0100               MOVS     R1,R0
   \   00000016   2800               MOVS     R0,R5
   \   00000018   ........           BL       AT91F_AIC_ConfigureIt
   \   0000001C   02B0               ADD      SP,SP,#+8
    453          
    454              AT91F_AIC_EnableIt(AT91C_BASE_AIC, USB_GetDriverID(pUsb));
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       USB_GetDriverID
   \   00000024   0100               MOVS     R1,R0
   \   00000026   2800               MOVS     R0,R5
   \   00000028   ........           BL       AT91F_AIC_EnableIt
    455          
    456          //#ifndef USB_BUS_POWERED
    457             
    458              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   0000002C   0221               MOVS     R1,#+2
   \   0000002E   ....               LDR      R0,??DataTable6  ;; 0xfffff400
   \   00000030   ........           BL       AT91F_PIO_CfgInput
    459              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   00000034   ....               LDR      R0,??DataTable7  ;; 0xfffff460
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   0160               STR      R1,[R0, #+0]
    460             
    461              // Configure VBus monitoring
    462              BRD_ConfigureVBus(USB_GetDriverInterface(pUsb));
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USB_GetDriverInterface
   \   00000040   ........           BL       BRD_ConfigureVBus
    463          
    464              
    465              
    466              
    467              
    468            /*  
    469              // Configure and enable the Vbus detection interrupt
    470              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    471                                    AT91C_ID_VBUS,
    472                                    USB_CON_PRIOR, //AT91C_AIC_PRIOR_LOWEST,
    473                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    474                                    ISR_VBus);
    475          
    476              
    477              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
    478              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
    479            
    480             
    481              
    482              
    483              
    484              
    485              */
    486              
    487              
    488          /*
    489          #else
    490              // Power up the USB controller
    491              USB_Attach(pUsb);
    492            
    493          #endif
    494          */
    495          
    496          }//_____________________________________________________________________________
   \   00000044   38BC               POP      {R3-R5}
   \   00000046   01BC               POP      {R0}
   \   00000048   0047               BX       R0               ;; return
   \   0000004A   C046               Nop      
   \                     ??CBK_Init_0:
   \   0000004C   ........           DC32     ISR_Driver
    497          
    498          
    499          
    500          
    501          
    502          
    503          
    504          
    505          
    506          
    507          
    508          
    509          
    510          
    511          
    512          
    513          
    514          
    515          
    516          
    517          
    518          
    519          
    520          //------------------------------------------------------------------------------
    521          //! \brief  Callback invoked when the device becomes suspended
    522          //!
    523          //!         Disables LEDs (if they are used) and then puts the device into
    524          //!         low-power mode. When traces are used, the device does not enter
    525          //!         low-power mode to avoid losing some outputs.
    526          //! \param  pUsb    Pointer to a S_usb instance
    527          //------------------------------------------------------------------------------
    528          static void CBK_Suspend(const S_usb *pUsb)
    529          {
    530          
    531          #if defined(NOTRACES)
    532              DEV_Suspend();
    533          #endif
    534          }//_____________________________________________________________________________
    535          
    536          
    537          
    538          
    539          
    540          
    541          //------------------------------------------------------------------------------
    542          //! \brief  Callback invoked when the device leaves the suspended state
    543          //!
    544          //!         The device is first returned to a normal operating mode and LEDs are
    545          //!         re-enabled. When traces are used, the device does not enter
    546          //!         low-power mode to avoid losing some outputs.
    547          //! \param  pUsb    Pointer to a S_usb instance
    548          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    549          static void CBK_Resume(const S_usb *pUsb)
    550          {
   \                     CBK_Resume:
   \   00000000   01B5               PUSH     {R0,LR}
    551          #if defined(NOTRACES)
    552              DEV_Resume();
   \   00000002   ........           BL       DEV_Resume
    553          #endif
    554          
    555          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    556          
    557          
    558          
    559          
    560          
    561          
    562          //------------------------------------------------------------------------------
    563          //! \brief  Callback invoked when a new SETUP request is received
    564          //!
    565          //!         The new request if forwarded to the standard request handler,
    566          //!         which performs the enumeration of the device.
    567          //! \param  pUsb   Pointer to a S_usb instance
    568          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    569          static void CBK_NewRequest(const S_usb *pUsb)
    570          {
   \                     CBK_NewRequest:
   \   00000000   01B5               PUSH     {R0,LR}
    571              SER_RequestHandler(&sSer);
   \   00000002   0348               LDR      R0,??CBK_NewRequest_0  ;; DateTime + 124
   \   00000004   ........           BL       SER_RequestHandler
    572          }//_____________________________________________________________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
   \   0000000E   C046               Nop      
   \                     ??CBK_NewRequest_0:
   \   00000010   ........           DC32     DateTime + 124
    573          
    574          
    575          
    576          
    577          
    578          
    579          //------------------------------------------------------------------------------
    580          //! \brief  Callback invoked when a Reset request is received
    581          //!
    582          //! \param  pUsb   Pointer to a S_usb instance
    583          //------------------------------------------------------------------------------
    584          //static void CBK_Reset(const S_usb *pUsb)
    585          //{
    586              // Put your reset handler here
    587          //}//_____________________________________________________________________________
    588          
    589          
    590          
    591          
    592          //------------------------------------------------------------------------------
    593          //! \brief  Callback invoked when a SOF is received
    594          //!
    595          //! \param  pUsb   Pointer to a S_usb instance
    596          //------------------------------------------------------------------------------
    597          //static void CBK_SOF(const S_usb *pUsb)
    598          //{
    599              // Put your SOF handler here
    600          //}//_____________________________________________________________________________
    601          
    602          
    603          
    604          
    605          
    606          // Other functions
    607          //------------------------------------------------------------------------------
    608          //------------------------------------------------------------------------------
    609          //! \brief  Forwards data receiving from the USB host through the USART
    610          //!
    611          //!         This function operates asynchronously.
    612          //! \param  pBuffer           Must be 0 when function is first called
    613          //! \param  bStatus           Same as above
    614          //! \param  dBytesTransferred Same as above
    615          //! \param  dBytesRemaining   Same as above
    616          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    617          static void ForwardUSB2Serial(unsigned char *pBuffer,
    618                                        unsigned char bStatus,
    619                                        unsigned int dBytesTransferred,
    620                                        unsigned int dBytesRemaining)
    621          {
   \                     ForwardUSB2Serial:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    622              //Zmienne lokalne ----------------------------------------------------
    623                      static char buff_tx[900];                                          //Bufor danych wysy³anych do USB
    624                   
    625                      unsigned int rozmiar_tx=0;                                          //Iloœæ danych do wys³ania przez USB
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0093               STR      R3,[SP, #+0]
    626                    //---------------------koniec zmiennych lokalnych--------------------
    627                  
    628          
    629              if (pBuffer != 0) {                                                                   
   \   00000006   0028               CMP      R0,#+0
   \   00000008   15D0               BEQ      ??ForwardUSB2Serial_0
    630                  if (bStatus != SER_STATUS_SUCCESS) 
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   13D1               BNE      ??ForwardUSB2Serial_0
    631                  {
    632                    
    633                    TRACE_WARNING("\n\r W: ForwardUSB2Serial: B³¹d transmisji USB\n\r");
    634                  }
    635                  else 
    636                  {
    637          
    638                      pBuffer[dBytesTransferred] = 0;
   \   0000000E   8354               STRB     R3,[R0, R2]
    639                     komunikcja_RSwin((char *)pBuffer,buff_tx,&rozmiar_tx);
   \   00000010   ....               LDR      R4,??DataTable11  ;; DateTime
   \   00000012   C821               MOVS     R1,#+200
   \   00000014   4900               LSLS     R1,R1,#+1        ;; #+400
   \   00000016   6518               ADDS     R5,R4,R1
   \   00000018   6A46               MOV      R2,SP
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   ........           BL       komunikcja_RSwin
    640                     SER_Write(&sSer, buff_tx,rozmiar_tx,0, 0);                                                                        
   \   00000020   82B0               SUB      SP,SP,#+8
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   0090               STR      R0,[SP, #+0]
   \   00000026   0300               MOVS     R3,R0
   \   00000028   029A               LDR      R2,[SP, #+8]
   \   0000002A   2900               MOVS     R1,R5
   \   0000002C   7C34               ADDS     R4,R4,#+124
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       SER_Write
   \   00000034   02B0               ADD      SP,SP,#+8
    641                  }
    642              }
    643          
    644          
    645              do {
    646          
    647                  bStatus = SER_Read(&sSer,
    648                                     pUsbBuffer,
    649              
    650                                     USB_BUFFER_SIZE,
    651                                     (Callback_f) ForwardUSB2Serial,
    652                                     pUsbBuffer);
    653              }
    654              while (bStatus != SER_STATUS_SUCCESS);
   \                     ??ForwardUSB2Serial_0:
   \   00000036   ....               LDR      R4,??DataTable11  ;; DateTime
   \   00000038   2100               MOVS     R1,R4
   \   0000003A   9031               ADDS     R1,R1,#+144
   \   0000003C   82B0               SUB      SP,SP,#+8
   \   0000003E   0091               STR      R1,[SP, #+0]
   \   00000040   064B               LDR      R3,??ForwardUSB2Serial_1  ;; ForwardUSB2Serial
   \   00000042   8022               MOVS     R2,#+128
   \   00000044   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000046   7C34               ADDS     R4,R4,#+124
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       SER_Read
   \   0000004E   02B0               ADD      SP,SP,#+8
   \   00000050   0028               CMP      R0,#+0
   \   00000052   F0D1               BNE      ??ForwardUSB2Serial_0
    655           
    656          }//_____________________________________________________________________________
   \   00000054   38BC               POP      {R3-R5}
   \   00000056   01BC               POP      {R0}
   \   00000058   0047               BX       R0               ;; return
   \   0000005A   C046               Nop      
   \                     ??ForwardUSB2Serial_1:
   \   0000005C   ........           DC32     ForwardUSB2Serial
    657          
    658          
    659          
    660          
    661          
    662          
    663          //-----------------------------------------------------------------------------
    664          //!  Nazwa funkcji :    Delay
    665          //!  Funkcja opóŸnienia
    666          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    667          void Delay (unsigned long a) 
    668          { 
   \                     Delay:
   \   00000000   01B5               PUSH     {R0,LR}
    669              while (--a!=0);   AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Delay_0:
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   FDD1               BNE      ??Delay_0
   \   00000006   ....               LDR      R0,??DataTable10  ;; 0xfffffd40
   \   00000008   ........           BL       AT91F_WDTRestart
    670          }//_______________________ Koniec funkcji opóŸnienia ____________________________
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return
    671          
    672          
    673          
    674          
    675          char *memory_read;
    676          
    677          //-----------------------------------------------------------------------------
    678          //! Nazwa funkcji :    InitFramework
    679          //! Funkcja ustawieñ wstêpnych systemu
    680          //-----------------------------------------------------------------------------
    681          int tProgramTabSize=ProgramTabSize;
    682          char *SourRam;
    683          unsigned int  stop=2000;
    684          unsigned int  siz;

   \                                 In section Debug.txt, align 4, keep-with-next
    685          void InitFramework (void) 
    686          { 
   \                     InitFramework:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    687             
    688           //  TRACE_INFO("\n\ InitFramework \n\r");
    689              
    690          
    691          
    692                                            FlashProgramOfset=FlashProgram_A_Ofset;
   \   00000002   ....               LDR      R0,??DataTable11  ;; DateTime
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   8164               STR      R1,[R0, #+72]
    693                                 
    694                                            
    695                                          //  TRACE_INFO("\n\r---  Strona flash = A  \n\r" ); 
    696          
    697              
    698              
    699          //    TRACE_INFO(" ---  Przepisuje program z FLASH do RAM     -Ofset : %d\n\r",AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    700              //przepisz program z flash do ram
    701              char *memory_read_prog;
    702              memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
    703          
    704            
    705               SourRam= (char*)&gProg;
   \   00000008   ....               LDR      R2,??DataTable12  ;; gProg
   \   0000000A   8265               STR      R2,[R0, #+88]
    706          
    707             
    708              siz=sizeof(gProg);
   \   0000000C   ....               LDR      R3,??DataTable13  ;; 0xc670
   \   0000000E   C365               STR      R3,[R0, #+92]
    709              for (unsigned int k = 0 ; k <siz; k++) 
   \   00000010   0B00               MOVS     R3,R1
   \   00000012   04E0               B        ??InitFramework_0
    710              {      
    711                    SourRam[k]=memory_read_prog[k]; 
   \                     ??InitFramework_1:
   \   00000014   846D               LDR      R4,[R0, #+88]
   \   00000016   ....               LDR      R5,??DataTable14  ;; 0x130100
   \   00000018   ED5C               LDRB     R5,[R5, R3]
   \   0000001A   E554               STRB     R5,[R4, R3]
    712              }
   \   0000001C   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_0:
   \   0000001E   C46D               LDR      R4,[R0, #+92]
   \   00000020   A342               CMP      R3,R4
   \   00000022   F7D3               BCC      ??InitFramework_1
    713              
    714             
    715            
    716              for (char i=0; i<ScreenNr; i++) 
   \   00000024   0B00               MOVS     R3,R1
   \   00000026   03E0               B        ??InitFramework_2
    717             {
    718               //je¿eli ustawienie automatyczne temperatury
    719               if (gProg.Screen[i].Thermo.AutoOn) 
    720               {
    721                 
    722                   //je¿eli dzieñ typu pierwszego
    723                   if (((gProg.Screen[i].Thermo.Week>>DateTime.DayOfWeek) & 0x1)==1)       
    724                   {
    725                      if (((gProg.Screen[i].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    726                      {                 
    727                        //ustaw wy¿sz¹ temperaturê
    728                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    729                        {
    730                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
    731                        }else{
    732                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    733                        }
    734                      }else{
    735                        //ustaw ni¿sz¹ temperaturê
    736                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    737                        {
    738                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    739                        }else{
    740                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
   \                     ??InitFramework_3:
   \   00000028   2C81               STRH     R4,[R5, #+8]
    741                        }
   \                     ??InitFramework_4:
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \   0000002C   1B06               LSLS     R3,R3,#+24
   \   0000002E   1B0E               LSRS     R3,R3,#+24
   \                     ??InitFramework_2:
   \   00000030   1C00               MOVS     R4,R3
   \   00000032   082C               CMP      R4,#+8
   \   00000034   27D2               BCS      ??InitFramework_5
   \   00000036   A025               MOVS     R5,#+160
   \   00000038   6C43               MULS     R4,R5,R4
   \   0000003A   1419               ADDS     R4,R2,R4
   \   0000003C   ....               LDR      R5,??DataTable15  ;; 0xbc26
   \   0000003E   6519               ADDS     R5,R4,R5
   \   00000040   2E78               LDRB     R6,[R5, #+0]
   \   00000042   002E               CMP      R6,#+0
   \   00000044   F1D0               BEQ      ??InitFramework_4
   \   00000046   EE78               LDRB     R6,[R5, #+3]
   \   00000048   8779               LDRB     R7,[R0, #+6]
   \   0000004A   3E41               ASRS     R6,R6,R7
   \   0000004C   F607               LSLS     R6,R6,#+31
   \   0000004E   ECD5               BPL      ??InitFramework_4
   \   00000050   ....               LDR      R6,??DataTable16  ;; 0xbc30
   \   00000052   A459               LDR      R4,[R4, R6]
   \   00000054   C678               LDRB     R6,[R0, #+3]
   \   00000056   F440               LSRS     R4,R4,R6
   \   00000058   E407               LSLS     R4,R4,#+31
   \   0000005A   0BD5               BPL      ??InitFramework_6
   \   0000005C   0624               MOVS     R4,#+6
   \   0000005E   2C5F               LDRSH    R4,[R5, R4]
   \   00000060   0426               MOVS     R6,#+4
   \   00000062   AE5F               LDRSH    R6,[R5, R6]
   \   00000064   B442               CMP      R4,R6
   \   00000066   02DA               BGE      ??InitFramework_7
   \   00000068   AC88               LDRH     R4,[R5, #+4]
   \   0000006A   2C81               STRH     R4,[R5, #+8]
   \   0000006C   DDE7               B        ??InitFramework_4
   \                     ??InitFramework_7:
   \   0000006E   EC88               LDRH     R4,[R5, #+6]
   \   00000070   2C81               STRH     R4,[R5, #+8]
   \   00000072   DAE7               B        ??InitFramework_4
   \                     ??InitFramework_6:
   \   00000074   0424               MOVS     R4,#+4
   \   00000076   2C5F               LDRSH    R4,[R5, R4]
   \   00000078   0626               MOVS     R6,#+6
   \   0000007A   AE5F               LDRSH    R6,[R5, R6]
   \   0000007C   A642               CMP      R6,R4
   \   0000007E   D3DA               BGE      ??InitFramework_3
   \   00000080   EC88               LDRH     R4,[R5, #+6]
   \   00000082   2C81               STRH     R4,[R5, #+8]
   \   00000084   D1E7               B        ??InitFramework_4
    742                      }
    743                   }
    744               }
    745             }
    746           
    747              
    748           
    749              //koniec
    750             
    751             
    752             
    753             
    754             //czyszczenie zmiennych programowych
    755                for (int LineNr=0; LineNr<MaxPrcLines; LineNr++)
   \                     ??InitFramework_5:
   \   00000086   0B00               MOVS     R3,R1
   \   00000088   0DE0               B        ??InitFramework_8
    756                {
    757                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
    758                  {
    759                    gProg.Line[LineNr].Proc[PrcInLine].LastIn=0;
   \                     ??InitFramework_9:
   \   0000008A   1825               MOVS     R5,#+24
   \   0000008C   6543               MULS     R5,R4,R5
   \   0000008E   F026               MOVS     R6,#+240
   \   00000090   5E43               MULS     R6,R3,R6
   \   00000092   9619               ADDS     R6,R2,R6
   \   00000094   7519               ADDS     R5,R6,R5
   \   00000096   2835               ADDS     R5,R5,#+40
   \   00000098   0E00               MOVS     R6,R1
   \   0000009A   2E70               STRB     R6,[R5, #+0]
    760                    gProg.Line[LineNr].Proc[PrcInLine].Out=0;
   \   0000009C   6E80               STRH     R6,[R5, #+2]
    761                  }
   \   0000009E   641C               ADDS     R4,R4,#+1
   \                     ??InitFramework_10:
   \   000000A0   0A2C               CMP      R4,#+10
   \   000000A2   F2DB               BLT      ??InitFramework_9
   \   000000A4   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_8:
   \   000000A6   C82B               CMP      R3,#+200
   \   000000A8   01DA               BGE      ??InitFramework_11
   \   000000AA   0C00               MOVS     R4,R1
   \   000000AC   F8E7               B        ??InitFramework_10
    762                }
    763           
    764          
    765                //Ustawienie wartoœci analogowych wêz³ów na niewiarygodne (0x8AAA)
    766                for (char NN=1; NN<NumberNeurons; NN++)
   \                     ??InitFramework_11:
   \   000000AE   0122               MOVS     R2,#+1
   \   000000B0   12E0               B        ??InitFramework_12
    767                {
    768                  for (char NR=0; NR<NumberReg; NR++)
    769                  {
    770                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   \                     ??InitFramework_13:
   \   000000B2   6400               LSLS     R4,R4,#+1
   \   000000B4   1500               MOVS     R5,R2
   \   000000B6   1626               MOVS     R6,#+22
   \   000000B8   7543               MULS     R5,R6,R5
   \   000000BA   ....               LDR      R6,??DataTable17  ;; MainStage
   \   000000BC   7519               ADDS     R5,R6,R5
   \   000000BE   2C19               ADDS     R4,R5,R4
   \   000000C0   A034               ADDS     R4,R4,#+160
   \   000000C2   ....               LDR      R5,??DataTable18  ;; 0xffff8aaa
   \   000000C4   2580               STRH     R5,[R4, #+0]
    771                  }
   \   000000C6   5B1C               ADDS     R3,R3,#+1
   \   000000C8   1B06               LSLS     R3,R3,#+24
   \   000000CA   1B0E               LSRS     R3,R3,#+24
   \                     ??InitFramework_14:
   \   000000CC   1C00               MOVS     R4,R3
   \   000000CE   0B2C               CMP      R4,#+11
   \   000000D0   EFD3               BCC      ??InitFramework_13
   \   000000D2   521C               ADDS     R2,R2,#+1
   \   000000D4   1206               LSLS     R2,R2,#+24
   \   000000D6   120E               LSRS     R2,R2,#+24
   \                     ??InitFramework_12:
   \   000000D8   1300               MOVS     R3,R2
   \   000000DA   232B               CMP      R3,#+35
   \   000000DC   01D2               BCS      ??InitFramework_15
   \   000000DE   0B00               MOVS     R3,R1
   \   000000E0   F4E7               B        ??InitFramework_14
    772                }
    773              
    774              
    775                 //przepisanie wartoœci konfiguracyjnych
    776              WypMaxJasnosci=pAT91C_IFLASH_MEM->Config.ScreenBrightActive;
   \                     ??InitFramework_15:
   \   000000E2   0A49               LDR      R1,??InitFramework_16  ;; 0xd80e
   \   000000E4   426D               LDR      R2,[R0, #+84]
   \   000000E6   5118               ADDS     R1,R2,R1
   \   000000E8   0A78               LDRB     R2,[R1, #+0]
   \   000000EA   C274               STRB     R2,[R0, #+19]
    777              WypMinJasnosci=pAT91C_IFLASH_MEM->Config.ScreenBrightInactive;
   \   000000EC   4978               LDRB     R1,[R1, #+1]
   \   000000EE   0175               STRB     R1,[R0, #+20]
    778              if ((WypMaxJasnosci<10) || (WypMaxJasnosci>100)) WypMaxJasnosci=100;
   \   000000F0   0A2A               CMP      R2,#+10
   \   000000F2   01D3               BCC      ??InitFramework_17
   \   000000F4   652A               CMP      R2,#+101
   \   000000F6   01D3               BCC      ??InitFramework_18
   \                     ??InitFramework_17:
   \   000000F8   6422               MOVS     R2,#+100
   \   000000FA   C274               STRB     R2,[R0, #+19]
    779              if (WypMinJasnosci==0) WypMinJasnosci=14;
   \                     ??InitFramework_18:
   \   000000FC   0029               CMP      R1,#+0
   \   000000FE   01D1               BNE      ??InitFramework_19
   \   00000100   0E21               MOVS     R1,#+14
   \   00000102   0175               STRB     R1,[R0, #+20]
    780               
    781          }//_______________________ Koniec funkcji InitFramework ____________________________
   \                     ??InitFramework_19:
   \   00000104   F8BC               POP      {R3-R7}
   \   00000106   01BC               POP      {R0}
   \   00000108   0047               BX       R0               ;; return
   \   0000010A   C046               Nop      
   \                     ??InitFramework_16:
   \   0000010C   0ED80000           DC32     0xd80e
    782          
    783          
    784          
    785          
    786          
    787          
    788          //char gLcdLightDuty=2;

   \                                 In section Debug.txt, align 4, keep-with-next
    789          void Timer_10us(void)                        //timer isr 
    790          { 
    791              unsigned int dummy0 = AT91C_BASE_TC1->TC_SR;      
   \                     Timer_10us:
   \   00000000   0148               LDR      R0,??Timer_10us_0  ;; 0xfffa0060
   \   00000002   0068               LDR      R0,[R0, #+0]
    792            
    793           /*
    794            
    795            //PWM podœwietlenia
    796            static char LcdLightCounterPWM=6;        //licznik podœwietlenia
    797            
    798            
    799          AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD); 
    800            
    801            /*
                   ^
Warning[Pe009]: nested comment is not allowed
    802            static long long ScreenSaverCounter=0;
    803            if (g_LightLCDEnable)
    804            {
    805              AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);    
    806              ScreenSaverCounter=0;
    807            }else{
    808            
    809              if (LcdLightCounterPWM<6)
    810            {
    811              LcdLightCounterPWM++;
    812             
    813            }else{
    814              LcdLightCounterPWM=0; 
    815              
    816              if ((ScreenSaverCounter<500000) && (g_ScreenSever_On) ) 
    817              {
    818                ScreenSaverCounter++;  
    819                AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    820              }
    821              if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))   AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    822            }
    823            if  (LcdLightCounterPWM==gLcdLightDuty) AT91F_PIO_ClearOutput(LCD_PIO,(unsigned int)LightLCD);
    824            }
    825            */
    826            
    827          
    828            //----koniec PWM podœwietlenia ------
    829            
    830          
    831            
    832          }//_____________________________________________________________________________
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??Timer_10us_0:
   \   00000008   6000FAFF           DC32     0xfffa0060
    833          
    834          
    835          
    836          
    837          
    838          
    839          
    840          
    841          //-----------------------------------------------------------------------------
    842          //!  Nazwa funkcji :    Timer_1_Setup
    843          //!  Funkcja inicjalizacji Timer1 - 1ms
    844          //-----------------------------------------------------------------------------
    845          //! 
    846          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    847          void Timer_10us_Setup(void) 
    848          { 
    849          
    850            
    851           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
    852           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
    853           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC1] = (unsigned int)Timer_10us;  //set AIC             
   \                     Timer_10us_Setup:
   \   00000000   1148               LDR      R0,??Timer_10us_Setup_0  ;; 0xfffff0b4
   \   00000002   1249               LDR      R1,??Timer_10us_Setup_0+0x4  ;; Timer_10us
   \   00000004   0160               STR      R1,[R0, #+0]
    854           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC1] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10US_PRIOR); 
   \   00000006   1248               LDR      R0,??Timer_10us_Setup_0+0x8  ;; 0xfffff034
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0160               STR      R1,[R0, #+0]
    855           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC1);      //enable clock 
   \   0000000C   4803               LSLS     R0,R1,#+13
   \   0000000E   1149               LDR      R1,??Timer_10us_Setup_0+0xC  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
    856           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   1149               LDR      R1,??Timer_10us_Setup_0+0x10  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
    857           //no external clocks 
    858           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   1049               LDR      R1,??Timer_10us_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
    859           AT91C_BASE_TC1->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   1049               LDR      R1,??Timer_10us_Setup_0+0x18  ;; 0xfffa0040
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
    860           AT91C_BASE_TC1->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0F49               LDR      R1,??Timer_10us_Setup_0+0x1C  ;; 0xfffa0044
   \   00000026   104A               LDR      R2,??Timer_10us_Setup_0+0x20  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
    861           //clock: MCK/1024  = 48054841/ DIV
    862           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
    863           //! DIV5 - 1024
    864           //! DIV4 - 128
    865           //! DIV3 - 32
    866           //! DIV2 - 8
    867           
    868           //AT91C_BASE_TC3->TC_RC = 5090;                  //1ms  (z wyliczeñ 6007)
    869           //AT91C_BASE_TC0->TC_RC = 5286;                    //880us 
    870           AT91C_BASE_TC1->TC_RC = 200;                    //440us  
   \   0000002A   1049               LDR      R1,??Timer_10us_Setup_0+0x24  ;; 0xfffa005c
   \   0000002C   C822               MOVS     R2,#+200
   \   0000002E   0A60               STR      R2,[R1, #+0]
    871           AT91C_BASE_TC1->TC_IER = AT91C_TC_CPCS;          //enable RC compare int 
   \   00000030   0F49               LDR      R1,??Timer_10us_Setup_0+0x28  ;; 0xfffa0064
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
    872           AT91C_BASE_TC1->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   0F49               LDR      R1,??Timer_10us_Setup_0+0x2C  ;; 0xfffa0068
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
    873           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC1);       //enable int 
   \   0000003C   0E49               LDR      R1,??Timer_10us_Setup_0+0x30  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
    874           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC1);       //clear int 
   \   00000040   0E49               LDR      R1,??Timer_10us_Setup_0+0x34  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
    875           
    876           
    877           //AT91C_BASE_TC1->TC_CMR |= 1<<6;
    878          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_10us_Setup_0:
   \   00000048   B4F0FFFF           DC32     0xfffff0b4
   \   0000004C   ........           DC32     Timer_10us
   \   00000050   34F0FFFF           DC32     0xfffff034
   \   00000054   10FCFFFF           DC32     0xfffffc10
   \   00000058   C000FAFF           DC32     0xfffa00c0
   \   0000005C   C400FAFF           DC32     0xfffa00c4
   \   00000060   4000FAFF           DC32     0xfffa0040
   \   00000064   4400FAFF           DC32     0xfffa0044
   \   00000068   01C00C00           DC32     0xcc001
   \   0000006C   5C00FAFF           DC32     0xfffa005c
   \   00000070   6400FAFF           DC32     0xfffa0064
   \   00000074   6800FAFF           DC32     0xfffa0068
   \   00000078   20F1FFFF           DC32     0xfffff120
   \   0000007C   28F1FFFF           DC32     0xfffff128
    879          
    880          
    881          
    882          

   \                                 In section Debug.txt, align 4, keep-with-next
    883          void TimetableExecute(void)
    884          {
   \                     TimetableExecute:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   04E0               B        ??TimetableExecute_0
    885          
    886            
    887            volatile static __Timetable *Timetable=AT91C_IFLASH_MEM->Config.Timetable;
    888            
    889            static  char Out[ScreenNr][TimetableTasks];
    890            char Hour;
    891            for (char sc=0; sc<ScreenNr; sc++)
   \                     ??TimetableExecute_1:
   \   00000008   0098               LDR      R0,[SP, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   0006               LSLS     R0,R0,#+24
   \   0000000E   000E               LSRS     R0,R0,#+24
   \   00000010   0090               STR      R0,[SP, #+0]
   \                     ??TimetableExecute_0:
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   0006               LSLS     R0,R0,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0828               CMP      R0,#+8
   \   0000001A   00D3               BCC      .+4
   \   0000001C   ACE0               B        ??TimetableExecute_2
    892            {
    893               for (char tn=0; tn<4; tn++)
   \   0000001E   0024               MOVS     R4,#+0
   \   00000020   55E0               B        ??TimetableExecute_3
    894               {
    895                   
    896          
    897                  
    898                   if (Timetable[sc].Task[tn].Enable==1) 
    899                   {    
    900                     
    901                             if (gProg.Screen[sc].Timetable.Min1h)
    902                             {
    903                               if(Timetable[sc].Task[tn].Hour>0) {
    904                                 Hour=Timetable[sc].Task[tn].Hour-1;
    905                               }else{
    906                                 Hour=23;
   \                     ??TimetableExecute_4:
   \   00000022   1722               MOVS     R2,#+23
   \   00000024   00E0               B        ??TimetableExecute_5
    907                               }
    908                             }else{
    909                               Hour=Timetable[sc].Task[tn].Hour;
   \                     ??TimetableExecute_6:
   \   00000026   C278               LDRB     R2,[R0, #+3]
    910                             }
    911                  
    912                     
    913                       if ((Hour==DateTime.Hour)&& (Timetable[sc].Task[tn].Minute==DateTime.Minute) && ((Timetable[sc].Task[tn].Week) & (1<<DateTime.DayOfWeek-1))  && (DateTime.Second==0))
   \                     ??TimetableExecute_5:
   \   00000028   5549               LDR      R1,??TimetableExecute_7  ;; DateTime
   \   0000002A   CB78               LDRB     R3,[R1, #+3]
   \   0000002C   1206               LSLS     R2,R2,#+24
   \   0000002E   120E               LSRS     R2,R2,#+24
   \   00000030   9A42               CMP      R2,R3
   \   00000032   00D0               BEQ      .+4
   \   00000034   96E0               B        ??TimetableExecute_8
   \   00000036   0279               LDRB     R2,[R0, #+4]
   \   00000038   0B79               LDRB     R3,[R1, #+4]
   \   0000003A   9A42               CMP      R2,R3
   \   0000003C   00D0               BEQ      .+4
   \   0000003E   91E0               B        ??TimetableExecute_8
   \   00000040   8078               LDRB     R0,[R0, #+2]
   \   00000042   0122               MOVS     R2,#+1
   \   00000044   8B79               LDRB     R3,[R1, #+6]
   \   00000046   5B1E               SUBS     R3,R3,#+1
   \   00000048   9A40               LSLS     R2,R2,R3
   \   0000004A   1042               TST      R0,R2
   \   0000004C   00D1               BNE      .+4
   \   0000004E   89E0               B        ??TimetableExecute_8
   \   00000050   4879               LDRB     R0,[R1, #+5]
   \   00000052   0028               CMP      R0,#+0
   \   00000054   00D0               BEQ      .+4
   \   00000056   85E0               B        ??TimetableExecute_8
    914                       {
    915                         if (gProg.Screen[sc].Timetable.ActionType==2)
   \   00000058   A800               LSLS     R0,R5,#+2
   \   0000005A   4A49               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   0000005C   0818               ADDS     R0,R1,R0
   \   0000005E   8019               ADDS     R0,R0,R6
   \   00000060   0190               STR      R0,[SP, #+4]
   \   00000062   0078               LDRB     R0,[R0, #+0]
   \   00000064   B978               LDRB     R1,[R7, #+2]
   \   00000066   0229               CMP      R1,#+2
   \   00000068   51D1               BNE      ??TimetableExecute_9
    916                         {
    917                           if (Out[sc][tn])
   \   0000006A   0028               CMP      R0,#+0
   \   0000006C   2CD0               BEQ      ??TimetableExecute_10
    918                           {
    919                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \                     ??TimetableExecute_11:
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   3856               LDRSB    R0,[R7, R0]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   0ED5               BPL      ??TimetableExecute_12
    920                             {
    921                                Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
   \   00000076   7878               LDRB     R0,[R7, #+1]
   \   00000078   4349               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000007A   0200               MOVS     R2,R0
   \   0000007C   D210               ASRS     R2,R2,#+3
   \   0000007E   8A18               ADDS     R2,R1,R2
   \   00000080   1378               LDRB     R3,[R2, #+0]
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   0700               MOVS     R7,R0
   \   00000086   FF08               LSRS     R7,R7,#+3
   \   00000088   FF00               LSLS     R7,R7,#+3
   \   0000008A   C01B               SUBS     R0,R0,R7
   \   0000008C   8140               LSLS     R1,R1,R0
   \   0000008E   8B43               BICS     R3,R3,R1
   \   00000090   1370               STRB     R3,[R2, #+0]
   \   00000092   14E0               B        ??TimetableExecute_13
    922                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_12:
   \   00000094   0022               MOVS     R2,#+0
   \   00000096   7978               LDRB     R1,[R7, #+1]
   \   00000098   8C46               MOV      R12,R1
   \   0000009A   3C49               LDR      R1,??TimetableExecute_7+0xC  ;; 0x3a2
   \   0000009C   0020               MOVS     R0,#+0
   \   0000009E   3856               LDRSB    R0,[R7, R0]
   \   000000A0   1623               MOVS     R3,#+22
   \   000000A2   5843               MULS     R0,R3,R0
   \   000000A4   3A4B               LDR      R3,??TimetableExecute_7+0x10  ;; MainStage
   \   000000A6   1818               ADDS     R0,R3,R0
   \   000000A8   4018               ADDS     R0,R0,R1
   \   000000AA   6146               MOV      R1,R12
    923                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);  
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   000000AC   ........           BL       PortStageSet
    924                                MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
   \   000000B0   3848               LDR      R0,??TimetableExecute_7+0x14  ;; 0x6eb
   \   000000B2   0021               MOVS     R1,#+0
   \   000000B4   7956               LDRSB    R1,[R7, R1]
   \   000000B6   364A               LDR      R2,??TimetableExecute_7+0x10  ;; MainStage
   \   000000B8   5118               ADDS     R1,R2,R1
   \   000000BA   0A22               MOVS     R2,#+10
   \   000000BC   0A54               STRB     R2,[R1, R0]
    925                             }
    926                             Out[sc][tn]=0;
   \                     ??TimetableExecute_13:
   \   000000BE   A800               LSLS     R0,R5,#+2
   \   000000C0   3049               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   000000C2   0818               ADDS     R0,R1,R0
   \   000000C4   0021               MOVS     R1,#+0
   \   000000C6   8155               STRB     R1,[R0, R6]
    927                           }
    928                         }else{
   \                     ??TimetableExecute_10:
   \   000000C8   641C               ADDS     R4,R4,#+1
   \   000000CA   2406               LSLS     R4,R4,#+24
   \   000000CC   240E               LSRS     R4,R4,#+24
   \                     ??TimetableExecute_3:
   \   000000CE   2000               MOVS     R0,R4
   \   000000D0   0428               CMP      R0,#+4
   \   000000D2   99D2               BCS      ??TimetableExecute_1
   \   000000D4   2600               MOVS     R6,R4
   \   000000D6   009D               LDR      R5,[SP, #+0]
   \   000000D8   2D06               LSLS     R5,R5,#+24
   \   000000DA   2D0E               LSRS     R5,R5,#+24
   \   000000DC   B000               LSLS     R0,R6,#+2
   \   000000DE   1121               MOVS     R1,#+17
   \   000000E0   6943               MULS     R1,R5,R1
   \   000000E2   2D4A               LDR      R2,??TimetableExecute_7+0x18  ;; ??Out + 32
   \   000000E4   1268               LDR      R2,[R2, #+0]
   \   000000E6   5118               ADDS     R1,R2,R1
   \   000000E8   0818               ADDS     R0,R1,R0
   \   000000EA   4178               LDRB     R1,[R0, #+1]
   \   000000EC   0129               CMP      R1,#+1
   \   000000EE   EBD1               BNE      ??TimetableExecute_10
   \   000000F0   2A49               LDR      R1,??TimetableExecute_7+0x1C  ;; 0xbc24
   \   000000F2   A022               MOVS     R2,#+160
   \   000000F4   6A43               MULS     R2,R5,R2
   \   000000F6   2A4B               LDR      R3,??TimetableExecute_7+0x20  ;; gProg
   \   000000F8   9A18               ADDS     R2,R3,R2
   \   000000FA   5718               ADDS     R7,R2,R1
   \   000000FC   F978               LDRB     R1,[R7, #+3]
   \   000000FE   0029               CMP      R1,#+0
   \   00000100   91D0               BEQ      ??TimetableExecute_6
   \   00000102   C178               LDRB     R1,[R0, #+3]
   \   00000104   0029               CMP      R1,#+0
   \   00000106   8CD0               BEQ      ??TimetableExecute_4
   \   00000108   C178               LDRB     R1,[R0, #+3]
   \   0000010A   4A1E               SUBS     R2,R1,#+1
   \   0000010C   8CE7               B        ??TimetableExecute_5
    929                           
    930                           if (Out[sc][tn]==0) {
   \                     ??TimetableExecute_9:
   \   0000010E   0028               CMP      R0,#+0
   \   00000110   24D1               BNE      ??TimetableExecute_14
    931                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \   00000112   3856               LDRSB    R0,[R7, R0]
   \   00000114   0028               CMP      R0,#+0
   \   00000116   0ED5               BPL      ??TimetableExecute_15
    932                             {
    933                                Variables[gProg.Screen[sc].Timetable.ActorPort/8] |= 1<<(gProg.Screen[sc].Timetable.ActorPort%8);
   \   00000118   7878               LDRB     R0,[R7, #+1]
   \   0000011A   1B49               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000011C   0200               MOVS     R2,R0
   \   0000011E   D210               ASRS     R2,R2,#+3
   \   00000120   8918               ADDS     R1,R1,R2
   \   00000122   0A78               LDRB     R2,[R1, #+0]
   \   00000124   0123               MOVS     R3,#+1
   \   00000126   0500               MOVS     R5,R0
   \   00000128   ED08               LSRS     R5,R5,#+3
   \   0000012A   ED00               LSLS     R5,R5,#+3
   \   0000012C   401B               SUBS     R0,R0,R5
   \   0000012E   8340               LSLS     R3,R3,R0
   \   00000130   1343               ORRS     R3,R3,R2
   \   00000132   0B70               STRB     R3,[R1, #+0]
   \   00000134   12E0               B        ??TimetableExecute_14
    934                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_15:
   \   00000136   0122               MOVS     R2,#+1
   \   00000138   7978               LDRB     R1,[R7, #+1]
   \   0000013A   1448               LDR      R0,??TimetableExecute_7+0xC  ;; 0x3a2
   \   0000013C   0023               MOVS     R3,#+0
   \   0000013E   FB56               LDRSB    R3,[R7, R3]
   \   00000140   1625               MOVS     R5,#+22
   \   00000142   6B43               MULS     R3,R5,R3
   \   00000144   124D               LDR      R5,??TimetableExecute_7+0x10  ;; MainStage
   \   00000146   EB18               ADDS     R3,R5,R3
   \   00000148   1818               ADDS     R0,R3,R0
    935                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 1);  
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000014A   ........           BL       PortStageSet
    936                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;}
   \   0000014E   1148               LDR      R0,??TimetableExecute_7+0x14  ;; 0x6eb
   \   00000150   0021               MOVS     R1,#+0
   \   00000152   7956               LDRSB    R1,[R7, R1]
   \   00000154   0E4A               LDR      R2,??TimetableExecute_7+0x10  ;; MainStage
   \   00000156   5118               ADDS     R1,R2,R1
   \   00000158   0A22               MOVS     R2,#+10
   \   0000015A   0A54               STRB     R2,[R1, R0]
    937                             }
    938                           Out[sc][tn]=1;
   \                     ??TimetableExecute_14:
   \   0000015C   0198               LDR      R0,[SP, #+4]
   \   0000015E   0121               MOVS     R1,#+1
   \   00000160   0170               STRB     R1,[R0, #+0]
   \   00000162   B1E7               B        ??TimetableExecute_10
    939                           
    940                         }
    941                       }else{
    942                         if ((gProg.Screen[sc].Timetable.ActionType==0) && (Out[sc][tn]==1)) 
   \                     ??TimetableExecute_8:
   \   00000164   B878               LDRB     R0,[R7, #+2]
   \   00000166   0028               CMP      R0,#+0
   \   00000168   A9D1               BNE      ??TimetableExecute_13
   \   0000016A   A800               LSLS     R0,R5,#+2
   \   0000016C   0549               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   0000016E   0818               ADDS     R0,R1,R0
   \   00000170   805D               LDRB     R0,[R0, R6]
   \   00000172   0128               CMP      R0,#+1
   \   00000174   A3D1               BNE      ??TimetableExecute_13
   \   00000176   7AE7               B        ??TimetableExecute_11
    943                         {
    944                           if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    945                             {
    946                               Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
    947                             }else{  //je¿eli wêze³
    948                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
    949                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
    950                             }
    951                         }
    952                         Out[sc][tn]=0;
    953                         
    954                       }
    955                   
    956                   }
    957                   
    958                   
    959               }
    960               
    961            }
    962          }
   \                     ??TimetableExecute_2:
   \   00000178   FEBC               POP      {R1-R7}
   \   0000017A   01BC               POP      {R0}
   \   0000017C   0047               BX       R0               ;; return
   \   0000017E   C046               Nop      
   \                     ??TimetableExecute_7:
   \   00000180   ........           DC32     DateTime
   \   00000184   ........           DC32     ??Out
   \   00000188   ........           DC32     Variables
   \   0000018C   A2030000           DC32     0x3a2
   \   00000190   ........           DC32     MainStage
   \   00000194   EB060000           DC32     0x6eb
   \   00000198   ........           DC32     ??Out + 32
   \   0000019C   24BC0000           DC32     0xbc24
   \   000001A0   ........           DC32     gProg
    963          
    964          
    965          

   \                                 In section Debug.txt, align 4, keep-with-next
    966          void ThermostatsTimeChartExecute(void)
    967          {
   \                     ThermostatsTimeChartExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    968            
    969            signed   short H_Tmp;
    970            signed   short L_Tmp;
    971            signed   short New_Temp;
    972            static  signed short LastTemp[ScreenNr];
    973              
    974            for (signed int sc=0; sc<ScreenNr; )
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   04E0               B        ??ThermostatsTimeChartExecute_0
    975            {
    976              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
    977                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
    978              {
    979                     //je¿eli ustawienie automatyczne temperatury
    980                     if (gProg.Screen[sc].Thermo.AutoOn) 
    981                     {                       
    982                          if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    983                              {
    984                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    985                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[1]; 
    986                              }else{
    987                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[1];
    988                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    989                              }
    990                          
    991                         //je¿eli dzieñ wykresu pierwszego
    992                         if (((gProg.Screen[sc].Thermo.Week>>(DateTime.DayOfWeek-1)) & 0x1)==1)       
    993                         {
    994          
    995                           
    996                              if (((gProg.Screen[sc].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    997                              {                 
    998                                //ustaw wy¿sz¹ temperaturê
    999                                  New_Temp=H_Tmp; 
   1000                              }else{
   1001                                //ustaw ni¿sz¹ temperaturê
   1002                                  New_Temp=L_Tmp;
   1003                              }
   1004                         }else{
   1005          
   1006                              if (((gProg.Screen[sc].Thermo.Chart[1]>>DateTime.Hour) & 0x1)==1)
   1007                              {                 
   1008                                //ustaw wy¿sz¹ temperaturê
   1009                                  New_Temp=H_Tmp; 
   1010                              }else{
   1011                                //ustaw ni¿sz¹ temperaturê
   1012                                  New_Temp=L_Tmp;
   1013                              }
   1014                         }
   1015                         if (LastTemp[sc]!=New_Temp)  
   1016                            {
   1017                                gProg.Screen[sc].Thermo.SetTemperature=New_Temp;
   1018                                LastTemp[sc]=gProg.Screen[sc].Thermo.SetTemperature;
   1019                            }
   1020                     }else{
   1021                        LastTemp[sc]=-9999;
   \                     ??ThermostatsTimeChartExecute_1:
   \   00000006   5000               LSLS     R0,R2,#+1
   \   00000008   2749               LDR      R1,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   0000000A   284B               LDR      R3,??ThermostatsTimeChartExecute_2+0x4  ;; 0xffffd8f1
   \   0000000C   0B52               STRH     R3,[R1, R0]
   1022                     }
   1023               }
   1024              sc++;
   \                     ??ThermostatsTimeChartExecute_3:
   \   0000000E   521C               ADDS     R2,R2,#+1
   \                     ??ThermostatsTimeChartExecute_0:
   \   00000010   082A               CMP      R2,#+8
   \   00000012   46DA               BGE      ??ThermostatsTimeChartExecute_4
   \   00000014   002A               CMP      R2,#+0
   \   00000016   03D1               BNE      ??ThermostatsTimeChartExecute_5
   \   00000018   2548               LDR      R0,??ThermostatsTimeChartExecute_2+0x8  ;; gProg + 48024
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0828               CMP      R0,#+8
   \   0000001E   09D0               BEQ      ??ThermostatsTimeChartExecute_6
   \                     ??ThermostatsTimeChartExecute_5:
   \   00000020   002A               CMP      R2,#+0
   \   00000022   F4D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   00000024   2348               LDR      R0,??ThermostatsTimeChartExecute_2+0xC  ;; 0xbb98
   \   00000026   A021               MOVS     R1,#+160
   \   00000028   5143               MULS     R1,R2,R1
   \   0000002A   234B               LDR      R3,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000002C   5918               ADDS     R1,R3,R1
   \   0000002E   085C               LDRB     R0,[R1, R0]
   \   00000030   0528               CMP      R0,#+5
   \   00000032   ECD1               BNE      ??ThermostatsTimeChartExecute_3
   \                     ??ThermostatsTimeChartExecute_6:
   \   00000034   A020               MOVS     R0,#+160
   \   00000036   5043               MULS     R0,R2,R0
   \   00000038   1F49               LDR      R1,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000003A   0C18               ADDS     R4,R1,R0
   \   0000003C   1F48               LDR      R0,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc26
   \   0000003E   2318               ADDS     R3,R4,R0
   \   00000040   1878               LDRB     R0,[R3, #+0]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   DFD0               BEQ      ??ThermostatsTimeChartExecute_1
   \   00000046   0620               MOVS     R0,#+6
   \   00000048   185E               LDRSH    R0,[R3, R0]
   \   0000004A   0421               MOVS     R1,#+4
   \   0000004C   595E               LDRSH    R1,[R3, R1]
   \   0000004E   8842               CMP      R0,R1
   \   00000050   03DA               BGE      ??ThermostatsTimeChartExecute_7
   \   00000052   0800               MOVS     R0,R1
   \   00000054   0621               MOVS     R1,#+6
   \   00000056   595E               LDRSH    R1,[R3, R1]
   \   00000058   03E0               B        ??ThermostatsTimeChartExecute_8
   \                     ??ThermostatsTimeChartExecute_7:
   \   0000005A   0620               MOVS     R0,#+6
   \   0000005C   185E               LDRSH    R0,[R3, R0]
   \   0000005E   0421               MOVS     R1,#+4
   \   00000060   595E               LDRSH    R1,[R3, R1]
   \                     ??ThermostatsTimeChartExecute_8:
   \   00000062   174D               LDR      R5,??ThermostatsTimeChartExecute_2+0x18  ;; 0xbc30
   \   00000064   6419               ADDS     R4,R4,R5
   \   00000066   174E               LDR      R6,??ThermostatsTimeChartExecute_2+0x1C  ;; DateTime
   \   00000068   F578               LDRB     R5,[R6, #+3]
   \   0000006A   DF78               LDRB     R7,[R3, #+3]
   \   0000006C   B679               LDRB     R6,[R6, #+6]
   \   0000006E   761E               SUBS     R6,R6,#+1
   \   00000070   3741               ASRS     R7,R7,R6
   \   00000072   FE07               LSLS     R6,R7,#+31
   \   00000074   05D5               BPL      ??ThermostatsTimeChartExecute_9
   \   00000076   2468               LDR      R4,[R4, #+0]
   \   00000078   EC40               LSRS     R4,R4,R5
   \   0000007A   E407               LSLS     R4,R4,#+31
   \   0000007C   06D4               BMI      ??ThermostatsTimeChartExecute_10
   \   0000007E   0800               MOVS     R0,R1
   \   00000080   04E0               B        ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_9:
   \   00000082   6468               LDR      R4,[R4, #+4]
   \   00000084   EC40               LSRS     R4,R4,R5
   \   00000086   E407               LSLS     R4,R4,#+31
   \   00000088   00D4               BMI      ??ThermostatsTimeChartExecute_10
   \   0000008A   0800               MOVS     R0,R1
   \                     ??ThermostatsTimeChartExecute_10:
   \   0000008C   5100               LSLS     R1,R2,#+1
   \   0000008E   064C               LDR      R4,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   00000090   6118               ADDS     R1,R4,R1
   \   00000092   0024               MOVS     R4,#+0
   \   00000094   0C5F               LDRSH    R4,[R1, R4]
   \   00000096   8442               CMP      R4,R0
   \   00000098   B9D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   0000009A   1881               STRH     R0,[R3, #+8]
   \   0000009C   1889               LDRH     R0,[R3, #+8]
   \   0000009E   0880               STRH     R0,[R1, #+0]
   \   000000A0   B5E7               B        ??ThermostatsTimeChartExecute_3
   1025            }
   1026          }
   \                     ??ThermostatsTimeChartExecute_4:
   \   000000A2   F8BC               POP      {R3-R7}
   \   000000A4   01BC               POP      {R0}
   \   000000A6   0047               BX       R0               ;; return
   \                     ??ThermostatsTimeChartExecute_2:
   \   000000A8   ........           DC32     ??LastTemp
   \   000000AC   F1D8FFFF           DC32     0xffffd8f1
   \   000000B0   ........           DC32     gProg + 48024
   \   000000B4   98BB0000           DC32     0xbb98
   \   000000B8   ........           DC32     gProg
   \   000000BC   26BC0000           DC32     0xbc26
   \   000000C0   30BC0000           DC32     0xbc30
   \   000000C4   ........           DC32     DateTime
   1027          
   1028          
   1029           // int MainScreenTermo=ScreenSetTab_0_Nr;
   1030           // int SubScreenTermo=ScreenSetTab_1_Nr;
   1031            //int MainScreenTimetable=ScreenSetTab_0_Nr+1;
   1032            //int SubScreenTimetable=ScreenSetTab_1_Nr+1;

   \                                 In section Debug.txt, align 4, keep-with-next
   1033          void ThermostatsExecute(void)
   1034          {
   \                     ThermostatsExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   15E0               B        ??ThermostatsExecute_0
   1035            short  SensorNodeValue;
   1036           
   1037            static char Hysteresis[ScreenNr];
   1038            
   1039            for (char sc=0; sc<ScreenNr; sc++)
   1040            {
   1041              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
   1042                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
   1043              {
   1044                     SensorNodeValue=0;
   1045                     if (gProg.Screen[sc].Thermo.SensorNode<0) //je¿eli zmienna
   1046                     {
   1047                       SensorNodeValue=VariablesAnal[gProg.Screen[sc].Thermo.SensorReg];
   1048                     }else{
   1049                       SensorNodeValue=MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg];
   1050                     }
   1051                
   1052                     //zeruje stan wyjœcia je¿eli temperatura wy¿sza od za³o¿onej 
   1053                     if (SensorNodeValue>=gProg.Screen[sc].Thermo.SetTemperature)
   1054                     {
   1055                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   1056                       {
   1057                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] &= ~(1<<(gProg.Screen[sc].Thermo.ActorPort%8));
   1058                       }else{
   1059                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 0);  
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1060                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   1061                       }
   1062                       Hysteresis[sc]=ThermostatHysteresis; //ustawia histerezê
   1063                     }
   1064                     
   1065                     //ustawia na 1 stan wyjœcia je¿eli temperatura ni¿sza od za³o¿onej - histereza
   1066                     if (SensorNodeValue>0)
   1067                     if (SensorNodeValue<=gProg.Screen[sc].Thermo.SetTemperature-Hysteresis[sc])
   1068                     {
   1069                       Hysteresis[sc]=0;
   1070                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   \                     ??ThermostatsExecute_1:
   \   00000006   0122               MOVS     R2,#+1
   \   00000008   7178               LDRB     R1,[R6, #+1]
   \   0000000A   4D48               LDR      R0,??ThermostatsExecute_2  ;; 0x3a2
   \   0000000C   0023               MOVS     R3,#+0
   \   0000000E   F356               LDRSB    R3,[R6, R3]
   \   00000010   1625               MOVS     R5,#+22
   \   00000012   6B43               MULS     R3,R5,R3
   \   00000014   4B4D               LDR      R5,??ThermostatsExecute_2+0x4  ;; MainStage
   \   00000016   EB18               ADDS     R3,R5,R3
   \   00000018   1818               ADDS     R0,R3,R0
   1071                       {
   1072                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] |= 1<<(gProg.Screen[sc].Thermo.ActorPort%8);
   1073                       }else{
   1074                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 1);   
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000001A   ........           BL       PortStageSet
   1075                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   \   0000001E   4A48               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0x6eb
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   7156               LDRSB    R1,[R6, R1]
   \   00000024   474A               LDR      R2,??ThermostatsExecute_2+0x4  ;; MainStage
   \   00000026   5118               ADDS     R1,R2,R1
   \   00000028   0A22               MOVS     R2,#+10
   \   0000002A   0A54               STRB     R2,[R1, R0]
   1076                       }
   \                     ??ThermostatsExecute_3:
   \   0000002C   641C               ADDS     R4,R4,#+1
   \   0000002E   2406               LSLS     R4,R4,#+24
   \   00000030   240E               LSRS     R4,R4,#+24
   \                     ??ThermostatsExecute_0:
   \   00000032   2000               MOVS     R0,R4
   \   00000034   0828               CMP      R0,#+8
   \   00000036   00D3               BCC      .+4
   \   00000038   7EE0               B        ??ThermostatsExecute_4
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   08D1               BNE      ??ThermostatsExecute_5
   \   0000003E   4348               LDR      R0,??ThermostatsExecute_2+0xC  ;; 0xbb98
   \   00000040   2100               MOVS     R1,R4
   \   00000042   A022               MOVS     R2,#+160
   \   00000044   5143               MULS     R1,R2,R1
   \   00000046   424A               LDR      R2,??ThermostatsExecute_2+0x10  ;; gProg
   \   00000048   5118               ADDS     R1,R2,R1
   \   0000004A   085C               LDRB     R0,[R1, R0]
   \   0000004C   0828               CMP      R0,#+8
   \   0000004E   0AD0               BEQ      ??ThermostatsExecute_6
   \                     ??ThermostatsExecute_5:
   \   00000050   2000               MOVS     R0,R4
   \   00000052   EBD0               BEQ      ??ThermostatsExecute_3
   \   00000054   3D48               LDR      R0,??ThermostatsExecute_2+0xC  ;; 0xbb98
   \   00000056   2100               MOVS     R1,R4
   \   00000058   A022               MOVS     R2,#+160
   \   0000005A   5143               MULS     R1,R2,R1
   \   0000005C   3C4A               LDR      R2,??ThermostatsExecute_2+0x10  ;; gProg
   \   0000005E   5118               ADDS     R1,R2,R1
   \   00000060   085C               LDRB     R0,[R1, R0]
   \   00000062   0528               CMP      R0,#+5
   \   00000064   E2D1               BNE      ??ThermostatsExecute_3
   \                     ??ThermostatsExecute_6:
   \   00000066   2500               MOVS     R5,R4
   \   00000068   3A48               LDR      R0,??ThermostatsExecute_2+0x14  ;; 0xbc24
   \   0000006A   A021               MOVS     R1,#+160
   \   0000006C   6943               MULS     R1,R5,R1
   \   0000006E   5118               ADDS     R1,R2,R1
   \   00000070   0E18               ADDS     R6,R1,R0
   \   00000072   0320               MOVS     R0,#+3
   \   00000074   3056               LDRSB    R0,[R6, R0]
   \   00000076   0028               CMP      R0,#+0
   \   00000078   04D5               BPL      ??ThermostatsExecute_7
   \   0000007A   3079               LDRB     R0,[R6, #+4]
   \   0000007C   4000               LSLS     R0,R0,#+1
   \   0000007E   3649               LDR      R1,??ThermostatsExecute_2+0x18  ;; VariablesAnal
   \   00000080   0F5E               LDRSH    R7,[R1, R0]
   \   00000082   08E0               B        ??ThermostatsExecute_8
   \                     ??ThermostatsExecute_7:
   \   00000084   A021               MOVS     R1,#+160
   \   00000086   3279               LDRB     R2,[R6, #+4]
   \   00000088   5200               LSLS     R2,R2,#+1
   \   0000008A   1623               MOVS     R3,#+22
   \   0000008C   5843               MULS     R0,R3,R0
   \   0000008E   2D4B               LDR      R3,??ThermostatsExecute_2+0x4  ;; MainStage
   \   00000090   1818               ADDS     R0,R3,R0
   \   00000092   8018               ADDS     R0,R0,R2
   \   00000094   475E               LDRSH    R7,[R0, R1]
   \                     ??ThermostatsExecute_8:
   \   00000096   0A20               MOVS     R0,#+10
   \   00000098   305E               LDRSH    R0,[R6, R0]
   \   0000009A   8742               CMP      R7,R0
   \   0000009C   2CDB               BLT      ??ThermostatsExecute_9
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   3056               LDRSB    R0,[R6, R0]
   \   000000A2   0028               CMP      R0,#+0
   \   000000A4   10D5               BPL      ??ThermostatsExecute_10
   \   000000A6   7078               LDRB     R0,[R6, #+1]
   \   000000A8   2C49               LDR      R1,??ThermostatsExecute_2+0x1C  ;; Variables
   \   000000AA   0200               MOVS     R2,R0
   \   000000AC   D210               ASRS     R2,R2,#+3
   \   000000AE   8918               ADDS     R1,R1,R2
   \   000000B0   0A78               LDRB     R2,[R1, #+0]
   \   000000B2   9446               MOV      R12,R2
   \   000000B4   0122               MOVS     R2,#+1
   \   000000B6   0300               MOVS     R3,R0
   \   000000B8   DB08               LSRS     R3,R3,#+3
   \   000000BA   DB00               LSLS     R3,R3,#+3
   \   000000BC   C01A               SUBS     R0,R0,R3
   \   000000BE   8240               LSLS     R2,R2,R0
   \   000000C0   6046               MOV      R0,R12
   \   000000C2   9043               BICS     R0,R0,R2
   \   000000C4   0870               STRB     R0,[R1, #+0]
   \   000000C6   14E0               B        ??ThermostatsExecute_11
   \                     ??ThermostatsExecute_10:
   \   000000C8   0022               MOVS     R2,#+0
   \   000000CA   7178               LDRB     R1,[R6, #+1]
   \   000000CC   8C46               MOV      R12,R1
   \   000000CE   1C49               LDR      R1,??ThermostatsExecute_2  ;; 0x3a2
   \   000000D0   0020               MOVS     R0,#+0
   \   000000D2   3056               LDRSB    R0,[R6, R0]
   \   000000D4   1623               MOVS     R3,#+22
   \   000000D6   5843               MULS     R0,R3,R0
   \   000000D8   1A4B               LDR      R3,??ThermostatsExecute_2+0x4  ;; MainStage
   \   000000DA   1818               ADDS     R0,R3,R0
   \   000000DC   4018               ADDS     R0,R0,R1
   \   000000DE   6146               MOV      R1,R12
   \   000000E0   ........           BL       PortStageSet
   \   000000E4   1848               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0x6eb
   \   000000E6   0021               MOVS     R1,#+0
   \   000000E8   7156               LDRSB    R1,[R6, R1]
   \   000000EA   164A               LDR      R2,??ThermostatsExecute_2+0x4  ;; MainStage
   \   000000EC   5118               ADDS     R1,R2,R1
   \   000000EE   0A22               MOVS     R2,#+10
   \   000000F0   0A54               STRB     R2,[R1, R0]
   \                     ??ThermostatsExecute_11:
   \   000000F2   1B48               LDR      R0,??ThermostatsExecute_2+0x20  ;; ??Hysteresis
   \   000000F4   0221               MOVS     R1,#+2
   \   000000F6   4155               STRB     R1,[R0, R5]
   \                     ??ThermostatsExecute_9:
   \   000000F8   012F               CMP      R7,#+1
   \   000000FA   97DB               BLT      ??ThermostatsExecute_3
   \   000000FC   1848               LDR      R0,??ThermostatsExecute_2+0x20  ;; ??Hysteresis
   \   000000FE   4019               ADDS     R0,R0,R5
   \   00000100   0A21               MOVS     R1,#+10
   \   00000102   715E               LDRSH    R1,[R6, R1]
   \   00000104   0278               LDRB     R2,[R0, #+0]
   \   00000106   891A               SUBS     R1,R1,R2
   \   00000108   B942               CMP      R1,R7
   \   0000010A   8FDB               BLT      ??ThermostatsExecute_3
   \   0000010C   0021               MOVS     R1,#+0
   \   0000010E   0170               STRB     R1,[R0, #+0]
   \   00000110   0020               MOVS     R0,#+0
   \   00000112   3056               LDRSB    R0,[R6, R0]
   \   00000114   0028               CMP      R0,#+0
   \   00000116   00D4               BMI      .+4
   \   00000118   75E7               B        ??ThermostatsExecute_1
   \   0000011A   7078               LDRB     R0,[R6, #+1]
   \   0000011C   0F49               LDR      R1,??ThermostatsExecute_2+0x1C  ;; Variables
   \   0000011E   0200               MOVS     R2,R0
   \   00000120   D210               ASRS     R2,R2,#+3
   \   00000122   8918               ADDS     R1,R1,R2
   \   00000124   0A78               LDRB     R2,[R1, #+0]
   \   00000126   0123               MOVS     R3,#+1
   \   00000128   0500               MOVS     R5,R0
   \   0000012A   ED08               LSRS     R5,R5,#+3
   \   0000012C   ED00               LSLS     R5,R5,#+3
   \   0000012E   401B               SUBS     R0,R0,R5
   \   00000130   8340               LSLS     R3,R3,R0
   \   00000132   1343               ORRS     R3,R3,R2
   \   00000134   0B70               STRB     R3,[R1, #+0]
   \   00000136   79E7               B        ??ThermostatsExecute_3
   1077                     }
   1078                     
   1079                     
   1080              }
   1081            }
   1082          }
   \                     ??ThermostatsExecute_4:
   \   00000138   F8BC               POP      {R3-R7}
   \   0000013A   01BC               POP      {R0}
   \   0000013C   0047               BX       R0               ;; return
   \   0000013E   C046               Nop      
   \                     ??ThermostatsExecute_2:
   \   00000140   A2030000           DC32     0x3a2
   \   00000144   ........           DC32     MainStage
   \   00000148   EB060000           DC32     0x6eb
   \   0000014C   98BB0000           DC32     0xbb98
   \   00000150   ........           DC32     gProg
   \   00000154   24BC0000           DC32     0xbc24
   \   00000158   ........           DC32     VariablesAnal
   \   0000015C   ........           DC32     Variables
   \   00000160   ........           DC32     ??Hysteresis
   1083          
   1084          
   1085          
   1086          char out[10]={1,1,1,1,1,1,1,1,1,1};

   \                                 In section Debug.txt, align 4, keep-with-next
   1087          void AlarmExecute(void)
   1088          {
   \                     AlarmExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0026               MOVS     R6,#+0
   \   00000004   2AE0               B        ??AlarmExecute_0
   1089          
   1090          static long long AlarmOnTime[ScreenNr];  //czas do odliczania dla alarmu
   1091          static long long AlarmOffTime[ScreenNr];
   1092            
   1093            for (char sc=0; sc<ScreenNr; sc++)
   1094            {
   1095              if ((((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenAlarm)) || 
   1096                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenAlarm))))
   1097              {
   1098                if (AlarmScreenAction[sc].Active) 
   1099                {
   1100                           //zeruje stan wyjœcia je¿eli zda¿enie od czujnika             
   1101                      if (PortStageRead(MainStage.StageI[gProg.Screen[sc].Alarm.SensorNode].Port, gProg.Screen[sc].Alarm.SensorPort)==0x1)  
   1102                           {
   1103                             if (AlarmOnTime[sc]==0) {AlarmOnTime[sc]=g_counter;}
   1104                             if ((g_counter>AlarmOnTime[sc]+AlarmTimeToActive*1000) && (out[sc]==0))
   1105                             {
   1106                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 0);
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1107                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1108                                AlarmOn=1; 
   1109                                out[sc]=1;
   1110                                AlarmOffTime[sc]=g_counter;
   1111                             }
   1112                             if ((AlarmOffTime>0) && (g_counter>AlarmOffTime[sc]+AlarmSirenTime*1000) && (out[sc]==1))
   1113                             {
   1114                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1); 
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1115                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1116                                AlarmOn=0; 
   1117                                out[sc]=1;
   1118                                AlarmOffTime[sc]=0;
   1119           
   1120                             }
   1121                             
   1122                            
   1123                             
   1124                           }
   1125                }else{
   1126                  if (out[sc]==1)
   \                     ??AlarmExecute_1:
   \   00000006   7048               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000008   0719               ADDS     R7,R0,R4
   \   0000000A   387C               LDRB     R0,[R7, #+16]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   22D1               BNE      ??AlarmExecute_3
   1127                  {
   1128                      out[sc]=0;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   3874               STRB     R0,[R7, #+16]
   1129                      AlarmOnTime[sc]=0;
   \   00000014   E000               LSLS     R0,R4,#+3
   \   00000016   0A18               ADDS     R2,R1,R0
   \   00000018   2032               ADDS     R2,R2,#+32
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   0100               MOVS     R1,R0
   \   0000001E   03C2               STM      R2!,{R0,R1}
   1130                      AlarmOn=0; 
   \   00000020   6A48               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 18
   \   00000022   0170               STRB     R1,[R0, #+0]
   1131                      PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1);
                                          ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000024   A020               MOVS     R0,#+160
   \   00000026   4443               MULS     R4,R0,R4
   \   00000028   6948               LDR      R0,??AlarmExecute_2+0x8  ;; gProg
   \   0000002A   0019               ADDS     R0,R0,R4
   \   0000002C   6949               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   0000002E   4518               ADDS     R5,R0,R1
   \   00000030   0122               MOVS     R2,#+1
   \   00000032   6978               LDRB     R1,[R5, #+1]
   \   00000034   6848               LDR      R0,??AlarmExecute_2+0x10  ;; 0x3a2
   \   00000036   0023               MOVS     R3,#+0
   \   00000038   EB56               LDRSB    R3,[R5, R3]
   \   0000003A   1624               MOVS     R4,#+22
   \   0000003C   6343               MULS     R3,R4,R3
   \   0000003E   674C               LDR      R4,??AlarmExecute_2+0x14  ;; MainStage
   \   00000040   E318               ADDS     R3,R4,R3
   \   00000042   1818               ADDS     R0,R3,R0
   \   00000044   ........           BL       PortStageSet
   1132                      MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   \   00000048   6548               LDR      R0,??AlarmExecute_2+0x18  ;; 0x6eb
   \   0000004A   0021               MOVS     R1,#+0
   \   0000004C   6956               LDRSB    R1,[R5, R1]
   \   0000004E   634A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   00000050   5118               ADDS     R1,R2,R1
   \   00000052   0A22               MOVS     R2,#+10
   \   00000054   0A54               STRB     R2,[R1, R0]
   1133                  }
   1134                }
   \                     ??AlarmExecute_3:
   \   00000056   761C               ADDS     R6,R6,#+1
   \   00000058   3606               LSLS     R6,R6,#+24
   \   0000005A   360E               LSRS     R6,R6,#+24
   \                     ??AlarmExecute_0:
   \   0000005C   3000               MOVS     R0,R6
   \   0000005E   0828               CMP      R0,#+8
   \   00000060   00D3               BCC      .+4
   \   00000062   AEE0               B        ??AlarmExecute_4
   \   00000064   3000               MOVS     R0,R6
   \   00000066   08D1               BNE      ??AlarmExecute_5
   \   00000068   5E48               LDR      R0,??AlarmExecute_2+0x1C  ;; 0xbb98
   \   0000006A   3100               MOVS     R1,R6
   \   0000006C   A022               MOVS     R2,#+160
   \   0000006E   5143               MULS     R1,R2,R1
   \   00000070   574A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   00000072   5118               ADDS     R1,R2,R1
   \   00000074   085C               LDRB     R0,[R1, R0]
   \   00000076   0A28               CMP      R0,#+10
   \   00000078   0AD0               BEQ      ??AlarmExecute_6
   \                     ??AlarmExecute_5:
   \   0000007A   3000               MOVS     R0,R6
   \   0000007C   EBD0               BEQ      ??AlarmExecute_3
   \   0000007E   5948               LDR      R0,??AlarmExecute_2+0x1C  ;; 0xbb98
   \   00000080   3100               MOVS     R1,R6
   \   00000082   A022               MOVS     R2,#+160
   \   00000084   5143               MULS     R1,R2,R1
   \   00000086   524A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   00000088   5118               ADDS     R1,R2,R1
   \   0000008A   085C               LDRB     R0,[R1, R0]
   \   0000008C   0728               CMP      R0,#+7
   \   0000008E   E2D1               BNE      ??AlarmExecute_3
   \                     ??AlarmExecute_6:
   \   00000090   3400               MOVS     R4,R6
   \   00000092   6000               LSLS     R0,R4,#+1
   \   00000094   4C49               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000096   085C               LDRB     R0,[R1, R0]
   \   00000098   0028               CMP      R0,#+0
   \   0000009A   B4D0               BEQ      ??AlarmExecute_1
   \   0000009C   A020               MOVS     R0,#+160
   \   0000009E   6043               MULS     R0,R4,R0
   \   000000A0   4B49               LDR      R1,??AlarmExecute_2+0x8  ;; gProg
   \   000000A2   0818               ADDS     R0,R1,R0
   \   000000A4   4B49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   000000A6   4518               ADDS     R5,R0,R1
   \   000000A8   E978               LDRB     R1,[R5, #+3]
   \   000000AA   0220               MOVS     R0,#+2
   \   000000AC   2856               LDRSB    R0,[R5, R0]
   \   000000AE   1622               MOVS     R2,#+22
   \   000000B0   5043               MULS     R0,R2,R0
   \   000000B2   4A4A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   000000B4   1018               ADDS     R0,R2,R0
   \   000000B6   A030               ADDS     R0,R0,#+160
   \   000000B8   0088               LDRH     R0,[R0, #+0]
   \   000000BA   0004               LSLS     R0,R0,#+16
   \   000000BC   0014               ASRS     R0,R0,#+16
   \   000000BE   ........           BL       PortStageRead
   \   000000C2   0128               CMP      R0,#+1
   \   000000C4   C7D1               BNE      ??AlarmExecute_3
   \   000000C6   E000               LSLS     R0,R4,#+3
   \   000000C8   3F49               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   000000CA   0818               ADDS     R0,R1,R0
   \   000000CC   0090               STR      R0,[SP, #+0]
   \   000000CE   2030               ADDS     R0,R0,#+32
   \   000000D0   03C8               LDM      R0!,{R0,R1}
   \   000000D2   0029               CMP      R1,#+0
   \   000000D4   06D1               BNE      ??AlarmExecute_7
   \   000000D6   0028               CMP      R0,#+0
   \   000000D8   04D1               BNE      ??AlarmExecute_7
   \   000000DA   009A               LDR      R2,[SP, #+0]
   \   000000DC   2032               ADDS     R2,R2,#+32
   \   000000DE   4248               LDR      R0,??AlarmExecute_2+0x20  ;; DateTime + 48
   \   000000E0   03C8               LDM      R0!,{R0,R1}
   \   000000E2   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_7:
   \   000000E4   0098               LDR      R0,[SP, #+0]
   \   000000E6   2030               ADDS     R0,R0,#+32
   \   000000E8   03C8               LDM      R0!,{R0,R1}
   \   000000EA   0200               MOVS     R2,R0
   \   000000EC   0B00               MOVS     R3,R1
   \   000000EE   3F48               LDR      R0,??AlarmExecute_2+0x24  ;; 0xea60
   \   000000F0   0021               MOVS     R1,#+0
   \   000000F2   8018               ADDS     R0,R0,R2
   \   000000F4   5941               ADCS     R1,R1,R3
   \   000000F6   0200               MOVS     R2,R0
   \   000000F8   0B00               MOVS     R3,R1
   \   000000FA   3B48               LDR      R0,??AlarmExecute_2+0x20  ;; DateTime + 48
   \   000000FC   03C8               LDM      R0!,{R0,R1}
   \   000000FE   8B42               CMP      R3,R1
   \   00000100   24D8               BHI      ??AlarmExecute_8
   \   00000102   01D3               BCC      ??AlarmExecute_9
   \   00000104   8242               CMP      R2,R0
   \   00000106   21D2               BCS      ??AlarmExecute_8
   \                     ??AlarmExecute_9:
   \   00000108   2F48               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   0000010A   0719               ADDS     R7,R0,R4
   \   0000010C   387C               LDRB     R0,[R7, #+16]
   \   0000010E   0028               CMP      R0,#+0
   \   00000110   1CD1               BNE      ??AlarmExecute_8
   \   00000112   0022               MOVS     R2,#+0
   \   00000114   6978               LDRB     R1,[R5, #+1]
   \   00000116   8C46               MOV      R12,R1
   \   00000118   2F49               LDR      R1,??AlarmExecute_2+0x10  ;; 0x3a2
   \   0000011A   2856               LDRSB    R0,[R5, R0]
   \   0000011C   1623               MOVS     R3,#+22
   \   0000011E   5843               MULS     R0,R3,R0
   \   00000120   2E4B               LDR      R3,??AlarmExecute_2+0x14  ;; MainStage
   \   00000122   1818               ADDS     R0,R3,R0
   \   00000124   4018               ADDS     R0,R0,R1
   \   00000126   6146               MOV      R1,R12
   \   00000128   ........           BL       PortStageSet
   \   0000012C   2C48               LDR      R0,??AlarmExecute_2+0x18  ;; 0x6eb
   \   0000012E   0021               MOVS     R1,#+0
   \   00000130   6956               LDRSB    R1,[R5, R1]
   \   00000132   2A4A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   00000134   5118               ADDS     R1,R2,R1
   \   00000136   0A22               MOVS     R2,#+10
   \   00000138   0A54               STRB     R2,[R1, R0]
   \   0000013A   0120               MOVS     R0,#+1
   \   0000013C   2349               LDR      R1,??AlarmExecute_2+0x4  ;; DateTime + 18
   \   0000013E   0870               STRB     R0,[R1, #+0]
   \   00000140   3874               STRB     R0,[R7, #+16]
   \   00000142   009A               LDR      R2,[SP, #+0]
   \   00000144   6032               ADDS     R2,R2,#+96
   \   00000146   2848               LDR      R0,??AlarmExecute_2+0x20  ;; DateTime + 48
   \   00000148   03C8               LDM      R0!,{R0,R1}
   \   0000014A   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_8:
   \   0000014C   2848               LDR      R0,??AlarmExecute_2+0x28  ;; AlarmScreenAction + 96
   \   0000014E   0028               CMP      R0,#+0
   \   00000150   00D1               BNE      .+4
   \   00000152   80E7               B        ??AlarmExecute_3
   \   00000154   009A               LDR      R2,[SP, #+0]
   \   00000156   106E               LDR      R0,[R2, #+96]
   \   00000158   516E               LDR      R1,[R2, #+100]
   \   0000015A   0200               MOVS     R2,R0
   \   0000015C   0B00               MOVS     R3,R1
   \   0000015E   2548               LDR      R0,??AlarmExecute_2+0x2C  ;; 0x493e0
   \   00000160   0021               MOVS     R1,#+0
   \   00000162   8018               ADDS     R0,R0,R2
   \   00000164   5941               ADCS     R1,R1,R3
   \   00000166   0200               MOVS     R2,R0
   \   00000168   0B00               MOVS     R3,R1
   \   0000016A   1F48               LDR      R0,??AlarmExecute_2+0x20  ;; DateTime + 48
   \   0000016C   03C8               LDM      R0!,{R0,R1}
   \   0000016E   8B42               CMP      R3,R1
   \   00000170   00D9               BLS      .+4
   \   00000172   70E7               B        ??AlarmExecute_3
   \   00000174   02D3               BCC      ??AlarmExecute_10
   \   00000176   8242               CMP      R2,R0
   \   00000178   00D3               BCC      .+4
   \   0000017A   6CE7               B        ??AlarmExecute_3
   \                     ??AlarmExecute_10:
   \   0000017C   1248               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   0000017E   0719               ADDS     R7,R0,R4
   \   00000180   387C               LDRB     R0,[R7, #+16]
   \   00000182   0128               CMP      R0,#+1
   \   00000184   00D0               BEQ      .+4
   \   00000186   66E7               B        ??AlarmExecute_3
   \   00000188   0122               MOVS     R2,#+1
   \   0000018A   6978               LDRB     R1,[R5, #+1]
   \   0000018C   1248               LDR      R0,??AlarmExecute_2+0x10  ;; 0x3a2
   \   0000018E   0023               MOVS     R3,#+0
   \   00000190   EB56               LDRSB    R3,[R5, R3]
   \   00000192   1624               MOVS     R4,#+22
   \   00000194   6343               MULS     R3,R4,R3
   \   00000196   114C               LDR      R4,??AlarmExecute_2+0x14  ;; MainStage
   \   00000198   E318               ADDS     R3,R4,R3
   \   0000019A   1818               ADDS     R0,R3,R0
   \   0000019C   ........           BL       PortStageSet
   \   000001A0   0F48               LDR      R0,??AlarmExecute_2+0x18  ;; 0x6eb
   \   000001A2   0021               MOVS     R1,#+0
   \   000001A4   6956               LDRSB    R1,[R5, R1]
   \   000001A6   0D4A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   000001A8   5118               ADDS     R1,R2,R1
   \   000001AA   0A22               MOVS     R2,#+10
   \   000001AC   0A54               STRB     R2,[R1, R0]
   \   000001AE   0748               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 18
   \   000001B0   0021               MOVS     R1,#+0
   \   000001B2   0170               STRB     R1,[R0, #+0]
   \   000001B4   0120               MOVS     R0,#+1
   \   000001B6   3874               STRB     R0,[R7, #+16]
   \   000001B8   009A               LDR      R2,[SP, #+0]
   \   000001BA   6032               ADDS     R2,R2,#+96
   \   000001BC   0800               MOVS     R0,R1
   \   000001BE   03C2               STM      R2!,{R0,R1}
   \   000001C0   49E7               B        ??AlarmExecute_3
   1135                     
   1136              }
   1137            }
   1138          }
   \                     ??AlarmExecute_4:
   \   000001C2   F8BC               POP      {R3-R7}
   \   000001C4   01BC               POP      {R0}
   \   000001C6   0047               BX       R0               ;; return
   \                     ??AlarmExecute_2:
   \   000001C8   ........           DC32     AlarmScreenAction
   \   000001CC   ........           DC32     DateTime + 18
   \   000001D0   ........           DC32     gProg
   \   000001D4   24BC0000           DC32     0xbc24
   \   000001D8   A2030000           DC32     0x3a2
   \   000001DC   ........           DC32     MainStage
   \   000001E0   EB060000           DC32     0x6eb
   \   000001E4   98BB0000           DC32     0xbb98
   \   000001E8   ........           DC32     DateTime + 48
   \   000001EC   60EA0000           DC32     0xea60
   \   000001F0   ........           DC32     AlarmScreenAction + 96
   \   000001F4   E0930400           DC32     0x493e0
   1139          
   1140          
   1141          
   1142          
   1143          
   1144          
   1145          
   1146          //-----------------------------------------------------------------------------
   1147          //! Nazwa funkcji :    Timer_1h  
   1148          //! Okres: 1 godzina
   1149          //-----------------------------------------------------------------------------
   1150          //  
   1151          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1152          void Timer_1h(void)                  
   1153          { 
   \                     Timer_1h:
   \   00000000   01B5               PUSH     {R0,LR}
   1154              ThermostatsTimeChartExecute();
   \   00000002   ........           BL       ThermostatsTimeChartExecute
   1155          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
   1156          
   1157          
   1158          
   1159          //-----------------------------------------------------------------------------
   1160          //! Nazwa funkcji :    Timer_1min  
   1161          //! Okres: 1min
   1162          //-----------------------------------------------------------------------------
   1163          //  
   1164          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1165          void Timer_1min(void)                  
   1166          { 
   \                     Timer_1min:
   \   00000000   01B5               PUSH     {R0,LR}
   1167             TimetableExecute();
   \   00000002   ........           BL       TimetableExecute
   1168             ThermostatsExecute();
   \   00000006   ........           BL       ThermostatsExecute
   1169             
   1170          }//_____________________________________________________________________________
   \   0000000A   08BC               POP      {R3}
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
   1171          
   1172          
   1173          
   1174          
   1175          
   1176          
   1177          //-----------------------------------------------------------------------------
   1178          //! Nazwa funkcji :    Timer_1s  
   1179          //! Okres: 1s
   1180          //! Funkcja obs³ugi przerwania USART 0
   1181          //-----------------------------------------------------------------------------
   1182          //  
   1183          //----------------------------------------------------------------------------- 
   1184          int XY_Tab[11];
   1185          int LiczOds = 0;
   1186          #define x_offset 1
   1187          #define y_offset 6
   1188          char display_cykl =0;
   1189          int X_up_old =-1;
   1190          int Y_up_old =-1;
   1191          int X_down_old =-1;
   1192          int Y_down_old =-1;
   1193          char g_PC_Connected_timeout=5;
   1194          
   1195          
   1196          unsigned int CyklPerSekCount=0; 
   1197          unsigned int TransLoopTime=0;
   1198          unsigned int CyklPerSek=1;
   1199          int MenuLevel_old; //tmp
   1200           char FlagChangeTime=0;
   1201          
   1202          
   1203          

   \                                 In section Debug.txt, align 4, keep-with-next
   1204          void Timer_1s(void)                        //timer isr 
   1205          { 
   \                     Timer_1s:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   1206          
   1207            if ((AlarmOn) || (Speaker[1]==1)) 
   \   00000002   AC4C               LDR      R4,??Timer_1s_1  ;; DateTime
   \   00000004   A07C               LDRB     R0,[R4, #+18]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   02D1               BNE      ??Timer_1s_2
   \   0000000A   607A               LDRB     R0,[R4, #+9]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   0DD1               BNE      ??Timer_1s_3
   1208            {
   1209                ButtonBipCounter=g_counter+500;
   \                     ??Timer_1s_2:
   \   00000010   A94D               LDR      R5,??Timer_1s_1+0x4  ;; ButtonBipCounter
   \   00000012   2000               MOVS     R0,R4
   \   00000014   3030               ADDS     R0,R0,#+48
   \   00000016   0CC8               LDM      R0!,{R2,R3}
   \   00000018   FA20               MOVS     R0,#+250
   \   0000001A   4000               LSLS     R0,R0,#+1        ;; #+500
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   8018               ADDS     R0,R0,R2
   \   00000020   5941               ADCS     R1,R1,R3
   \   00000022   03C5               STM      R5!,{R0,R1}
   1210                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000024   A548               LDR      R0,??Timer_1s_1+0x8  ;; 0xfffff430
   \   00000026   8021               MOVS     R1,#+128
   \   00000028   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000002A   0160               STR      R1,[R0, #+0]
   1211            }
   1212          
   1213             g_seconds_counter++;
   \                     ??Timer_1s_3:
   \   0000002C   E06C               LDR      R0,[R4, #+76]
   \   0000002E   401C               ADDS     R0,R0,#+1
   \   00000030   E064               STR      R0,[R4, #+76]
   1214          
   1215            
   1216            if (CyklPerSekCount>0)
   \   00000032   656E               LDR      R5,[R4, #+100]
   \   00000034   002D               CMP      R5,#+0
   \   00000036   07D0               BEQ      ??Timer_1s_4
   1217            {
   1218             TransLoopTime=(1000/CyklPerSekCount);     //czas obiegu programu w ms
   \   00000038   FA20               MOVS     R0,#+250
   \   0000003A   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000003C   2900               MOVS     R1,R5
   \   0000003E   ........           BL       __aeabi_uidivmod
   \   00000042   A066               STR      R0,[R4, #+104]
   1219             CyklPerSek=CyklPerSekCount;               //iloœæ cykli na sekunde
   \   00000044   E566               STR      R5,[R4, #+108]
   \   00000046   01E0               B        ??Timer_1s_5
   1220            }else{
   1221             TransLoopTime=0;
   \                     ??Timer_1s_4:
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   A066               STR      R0,[R4, #+104]
   1222            }
   1223            CyklPerSekCount=0;
   \                     ??Timer_1s_5:
   \   0000004C   0025               MOVS     R5,#+0
   \   0000004E   6566               STR      R5,[R4, #+100]
   1224          
   1225                       
   1226            
   1227            
   1228             //Wy³¹czanie podœwietlenia wyœwietlacza
   1229            
   1230            if (g_LightCouterLCD==0) 
   \   00000050   206D               LDR      R0,[R4, #+80]
   \   00000052   0028               CMP      R0,#+0
   \   00000054   04D1               BNE      ??Timer_1s_6
   1231            {
   1232              if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000056   617B               LDRB     R1,[R4, #+13]
   \   00000058   0029               CMP      R1,#+0
   \   0000005A   01D1               BNE      ??Timer_1s_6
   \   0000005C   0121               MOVS     R1,#+1
   \   0000005E   6173               STRB     R1,[R4, #+13]
   1233            }
   1234            if ((g_LightCouterLCD < LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_6:
   \   00000060   1428               CMP      R0,#+20
   \   00000062   04DA               BGE      ??Timer_1s_7
   \   00000064   217B               LDRB     R1,[R4, #+12]
   \   00000066   0029               CMP      R1,#+0
   \   00000068   01D1               BNE      ??Timer_1s_7
   1235            {
   1236                g_LightCouterLCD++;
   \   0000006A   401C               ADDS     R0,R0,#+1
   \   0000006C   2065               STR      R0,[R4, #+80]
   1237                  
   1238            } 
   1239            
   1240            
   1241            if ((g_LightCouterLCD >= LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_7:
   \   0000006E   206D               LDR      R0,[R4, #+80]
   \   00000070   1428               CMP      R0,#+20
   \   00000072   03DB               BLT      ??Timer_1s_8
   \   00000074   207B               LDRB     R0,[R4, #+12]
   \   00000076   0028               CMP      R0,#+0
   \   00000078   00D1               BNE      ??Timer_1s_8
   1242          
   1243            {
   1244             g_LightLCDEnable=0; 
   \   0000007A   6073               STRB     R0,[R4, #+13]
   1245            }
   1246          
   1247            
   1248            if ((DateTime.DayOfWeek)==0) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_8:
   \   0000007C   A079               LDRB     R0,[R4, #+6]
   \   0000007E   0028               CMP      R0,#+0
   \   00000080   01D1               BNE      ??Timer_1s_9
   \   00000082   0120               MOVS     R0,#+1
   \   00000084   A071               STRB     R0,[R4, #+6]
   1249            
   1250            if (DateTime.Second<59) {DateTime.Second++;} else {DateTime.Second=0; DateTime.Minute++;};
   \                     ??Timer_1s_9:
   \   00000086   6079               LDRB     R0,[R4, #+5]
   \   00000088   3B28               CMP      R0,#+59
   \   0000008A   02D2               BCS      ??Timer_1s_10
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   6071               STRB     R0,[R4, #+5]
   \   00000090   04E0               B        ??Timer_1s_11
   \                     ??Timer_1s_10:
   \   00000092   2800               MOVS     R0,R5
   \   00000094   6071               STRB     R0,[R4, #+5]
   \   00000096   2079               LDRB     R0,[R4, #+4]
   \   00000098   401C               ADDS     R0,R0,#+1
   \   0000009A   2071               STRB     R0,[R4, #+4]
   1251            if (DateTime.Minute>59) {
   \                     ??Timer_1s_11:
   \   0000009C   2079               LDRB     R0,[R4, #+4]
   \   0000009E   3C28               CMP      R0,#+60
   \   000000A0   33D3               BCC      ??Timer_1s_12
   1252                DateTime.Minute=0; 
   \   000000A2   2800               MOVS     R0,R5
   \   000000A4   2071               STRB     R0,[R4, #+4]
   1253                DateTime.Hour++;
   \   000000A6   E078               LDRB     R0,[R4, #+3]
   \   000000A8   401C               ADDS     R0,R0,#+1
   \   000000AA   E070               STRB     R0,[R4, #+3]
   1254                   //zmiana czasu z zimowego na letni
   1255                 if ((DateTime.Mounth==3) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==2) && (DateTime.Second==0))
   \   000000AC   6178               LDRB     R1,[R4, #+1]
   \   000000AE   0329               CMP      R1,#+3
   \   000000B0   10D1               BNE      ??Timer_1s_13
   \   000000B2   A178               LDRB     R1,[R4, #+2]
   \   000000B4   1929               CMP      R1,#+25
   \   000000B6   0DD3               BCC      ??Timer_1s_13
   \   000000B8   A179               LDRB     R1,[R4, #+6]
   \   000000BA   0729               CMP      R1,#+7
   \   000000BC   0AD1               BNE      ??Timer_1s_13
   \   000000BE   0006               LSLS     R0,R0,#+24
   \   000000C0   000E               LSRS     R0,R0,#+24
   \   000000C2   0228               CMP      R0,#+2
   \   000000C4   06D1               BNE      ??Timer_1s_13
   \   000000C6   6079               LDRB     R0,[R4, #+5]
   \   000000C8   0028               CMP      R0,#+0
   \   000000CA   03D1               BNE      ??Timer_1s_13
   1256                 {
   1257                   DateTime.Hour=3;
   \   000000CC   0320               MOVS     R0,#+3
   \   000000CE   E070               STRB     R0,[R4, #+3]
   1258                   SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000D0   ........           BL       SetRTC_DateTime
   1259          
   1260                 }
   1261                 //zmiana czasu z letniego na zimowy
   1262                 if ((DateTime.Mounth==10) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==3) && (DateTime.Second==0))
   \                     ??Timer_1s_13:
   \   000000D4   6078               LDRB     R0,[R4, #+1]
   \   000000D6   0A28               CMP      R0,#+10
   \   000000D8   17D1               BNE      ??Timer_1s_12
   \   000000DA   A078               LDRB     R0,[R4, #+2]
   \   000000DC   1928               CMP      R0,#+25
   \   000000DE   14D3               BCC      ??Timer_1s_12
   \   000000E0   A079               LDRB     R0,[R4, #+6]
   \   000000E2   0728               CMP      R0,#+7
   \   000000E4   11D1               BNE      ??Timer_1s_12
   \   000000E6   E078               LDRB     R0,[R4, #+3]
   \   000000E8   0328               CMP      R0,#+3
   \   000000EA   0ED1               BNE      ??Timer_1s_12
   \   000000EC   6079               LDRB     R0,[R4, #+5]
   \   000000EE   0028               CMP      R0,#+0
   \   000000F0   0BD1               BNE      ??Timer_1s_12
   1263                 {
   1264                   if (FlagChangeTime==0)
   \   000000F2   207E               LDRB     R0,[R4, #+24]
   \   000000F4   0028               CMP      R0,#+0
   \   000000F6   06D1               BNE      ??Timer_1s_14
   1265                   {
   1266                      FlagChangeTime=1; 
   \   000000F8   0120               MOVS     R0,#+1
   \   000000FA   2076               STRB     R0,[R4, #+24]
   1267                      DateTime.Hour=2;
   \   000000FC   0220               MOVS     R0,#+2
   \   000000FE   E070               STRB     R0,[R4, #+3]
   1268                      SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   00000100   ........           BL       SetRTC_DateTime
   \   00000104   01E0               B        ??Timer_1s_12
   1269                   }else{
   1270                      FlagChangeTime=0; 
   \                     ??Timer_1s_14:
   \   00000106   2800               MOVS     R0,R5
   \   00000108   2076               STRB     R0,[R4, #+24]
   1271                   }
   1272                 }
   1273            }
   1274            
   1275            if (DateTime.Hour>23)   {
   \                     ??Timer_1s_12:
   \   0000010A   E078               LDRB     R0,[R4, #+3]
   \   0000010C   1828               CMP      R0,#+24
   \   0000010E   07D3               BCC      ??Timer_1s_15
   1276              DateTime.Hour=0;     
   \   00000110   2800               MOVS     R0,R5
   \   00000112   E070               STRB     R0,[R4, #+3]
   1277              DateTime.DayOfWeek++; DateTime.Day++;
   \   00000114   A079               LDRB     R0,[R4, #+6]
   \   00000116   401C               ADDS     R0,R0,#+1
   \   00000118   A071               STRB     R0,[R4, #+6]
   \   0000011A   A078               LDRB     R0,[R4, #+2]
   \   0000011C   401C               ADDS     R0,R0,#+1
   \   0000011E   A070               STRB     R0,[R4, #+2]
   1278          
   1279            }
   1280            
   1281            
   1282            switch (DateTime.Mounth)
   \                     ??Timer_1s_15:
   \   00000120   6678               LDRB     R6,[R4, #+1]
   \   00000122   3000               MOVS     R0,R6
   \   00000124   401E               SUBS     R0,R0,#+1
   \   00000126   0B28               CMP      R0,#+11
   \   00000128   39D8               BHI      ??Timer_1s_16
   \   0000012A   01A1               ADR      R1,??Timer_1s_0
   \   0000012C   095C               LDRB     R1,[R1, R0]
   \   0000012E   8F44               ADD      PC,PC,R1
   \                     ??Timer_1s_0:
   \   00000130   0A1A0A50           DC8      +10,+26,+10,+80
   \   00000134   0A500A0A           DC8      +10,+80,+10,+10
   \   00000138   500A5058           DC8      +80,+10,+80,+88
   1283                  {
   1284                    case 1  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_17:
   \   0000013C   A078               LDRB     R0,[R4, #+2]
   \   0000013E   2028               CMP      R0,#+32
   \   00000140   2DD3               BCC      ??Timer_1s_16
   \                     ??Timer_1s_18:
   \   00000142   0120               MOVS     R0,#+1
   \   00000144   A070               STRB     R0,[R4, #+2]
   \   00000146   761C               ADDS     R6,R6,#+1
   \   00000148   6670               STRB     R6,[R4, #+1]
   \   0000014A   28E0               B        ??Timer_1s_16
   1285                    case 2  : if ((DateTime.Year%4 == 0) && (DateTime.Year%100 != 0) || (DateTime.Year%400 == 0))  //je¿eli rok przestêpny
   \                     ??Timer_1s_19:
   \   0000014C   2778               LDRB     R7,[R4, #+0]
   \   0000014E   3800               MOVS     R0,R7
   \   00000150   8008               LSRS     R0,R0,#+2
   \   00000152   8000               LSLS     R0,R0,#+2
   \   00000154   381A               SUBS     R0,R7,R0
   \   00000156   05D1               BNE      ??Timer_1s_20
   \   00000158   3800               MOVS     R0,R7
   \   0000015A   6421               MOVS     R1,#+100
   \   0000015C   ........           BL       __aeabi_idivmod
   \   00000160   0029               CMP      R1,#+0
   \   00000162   06D1               BNE      ??Timer_1s_21
   \                     ??Timer_1s_20:
   \   00000164   3800               MOVS     R0,R7
   \   00000166   C821               MOVS     R1,#+200
   \   00000168   4900               LSLS     R1,R1,#+1        ;; #+400
   \   0000016A   ........           BL       __aeabi_idivmod
   \   0000016E   0029               CMP      R1,#+0
   \   00000170   03D1               BNE      ??Timer_1s_22
   1286                                  {if (DateTime.Day>29) {DateTime.Day=1; DateTime.Mounth++;}     
   \                     ??Timer_1s_21:
   \   00000172   A078               LDRB     R0,[R4, #+2]
   \   00000174   1E28               CMP      R0,#+30
   \   00000176   12D3               BCC      ??Timer_1s_16
   \   00000178   E3E7               B        ??Timer_1s_18
   1287                                  }else{if (DateTime.Day>28) {DateTime.Day=1; DateTime.Mounth++;}
   \                     ??Timer_1s_22:
   \   0000017A   A078               LDRB     R0,[R4, #+2]
   \   0000017C   1D28               CMP      R0,#+29
   \   0000017E   0ED3               BCC      ??Timer_1s_16
   \   00000180   DFE7               B        ??Timer_1s_18
   1288                                  }
   1289                    break;
   1290                    case 3  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1291                    case 4  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_23:
   \   00000182   A078               LDRB     R0,[R4, #+2]
   \   00000184   1F28               CMP      R0,#+31
   \   00000186   0AD3               BCC      ??Timer_1s_16
   \   00000188   DBE7               B        ??Timer_1s_18
   1292                    case 5  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1293                    case 6  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1294                    case 7  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1295                    case 8  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1296                    case 9  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1297                    case 10 : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1298                    case 11 : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1299                    case 12 : if (DateTime.Day>31) 
   \                     ??Timer_1s_24:
   \   0000018A   A078               LDRB     R0,[R4, #+2]
   \   0000018C   2028               CMP      R0,#+32
   \   0000018E   06D3               BCC      ??Timer_1s_16
   1300                    {
   1301                      DateTime.Day=1; DateTime.Mounth=1; DateTime.Year++;
   \   00000190   0126               MOVS     R6,#+1
   \   00000192   3000               MOVS     R0,R6
   \   00000194   A070               STRB     R0,[R4, #+2]
   \   00000196   6670               STRB     R6,[R4, #+1]
   \   00000198   2078               LDRB     R0,[R4, #+0]
   \   0000019A   401C               ADDS     R0,R0,#+1
   \   0000019C   2070               STRB     R0,[R4, #+0]
   1302                    } break;
   1303                    
   1304            
   1305            
   1306            }  
   1307            if (DateTime.DayOfWeek>Sunday) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_16:
   \   0000019E   A079               LDRB     R0,[R4, #+6]
   \   000001A0   0828               CMP      R0,#+8
   \   000001A2   01D3               BCC      ??Timer_1s_25
   \   000001A4   0120               MOVS     R0,#+1
   \   000001A6   A071               STRB     R0,[R4, #+6]
   1308            
   1309          
   1310            
   1311            
   1312            
   1313          
   1314              
   1315            if (MenuLevel_old!=MenuLevel)
   \                     ??Timer_1s_25:
   \   000001A8   8548               LDR      R0,??Timer_1s_26  ;; MenuLevel
   \   000001AA   0068               LDR      R0,[R0, #+0]
   \   000001AC   216F               LDR      R1,[R4, #+112]
   \   000001AE   8142               CMP      R1,R0
   \   000001B0   00D0               BEQ      ??Timer_1s_27
   1316            {
   1317              MenuLevel_old=MenuLevel;    //na koniec usun¹c MenuLevel_old
   \   000001B2   2067               STR      R0,[R4, #+112]
   1318            }
   1319            
   1320             char czas_tmp[9];
   1321            
   1322            TimeToStr(DateTime.Hour, DateTime.Minute, DateTime.Second, czas_tmp);
   \                     ??Timer_1s_27:
   \   000001B4   6B46               MOV      R3,SP
   \   000001B6   6279               LDRB     R2,[R4, #+5]
   \   000001B8   2179               LDRB     R1,[R4, #+4]
   \   000001BA   E078               LDRB     R0,[R4, #+3]
   \   000001BC   ........           BL       TimeToStr
   1323            czas_tmp[8]=13;
   \   000001C0   6846               MOV      R0,SP
   \   000001C2   0D21               MOVS     R1,#+13
   \   000001C4   0172               STRB     R1,[R0, #+8]
   1324          
   1325            
   1326            //zeruj wskaŸniki poprawnoœci po³aczeñ
   1327            if (g_US0_Connect_OK) g_US0_Connect_OK--;
   \   000001C6   7F48               LDR      R0,??Timer_1s_26+0x4  ;; g_US0_Connect_OK
   \   000001C8   0178               LDRB     R1,[R0, #+0]
   \   000001CA   0029               CMP      R1,#+0
   \   000001CC   01D0               BEQ      ??Timer_1s_28
   \   000001CE   491E               SUBS     R1,R1,#+1
   \   000001D0   0170               STRB     R1,[R0, #+0]
   1328            if (g_US1_Connect_OK) g_US1_Connect_OK--;
   \                     ??Timer_1s_28:
   \   000001D2   7D48               LDR      R0,??Timer_1s_26+0x8  ;; g_US1_Connect_OK
   \   000001D4   0178               LDRB     R1,[R0, #+0]
   \   000001D6   0029               CMP      R1,#+0
   \   000001D8   01D0               BEQ      ??Timer_1s_29
   \   000001DA   491E               SUBS     R1,R1,#+1
   \   000001DC   0170               STRB     R1,[R0, #+0]
   1329            
   1330          
   1331            //synchronizacja RTC
   1332          if ((DateTime.Hour==2) && (DateTime.Minute==57) && (DateTime.Second==0)) GetDateTimeFromRTC(); 
   \                     ??Timer_1s_29:
   \   000001DE   E078               LDRB     R0,[R4, #+3]
   \   000001E0   0228               CMP      R0,#+2
   \   000001E2   07D1               BNE      ??Timer_1s_30
   \   000001E4   2079               LDRB     R0,[R4, #+4]
   \   000001E6   3928               CMP      R0,#+57
   \   000001E8   04D1               BNE      ??Timer_1s_30
   \   000001EA   6079               LDRB     R0,[R4, #+5]
   \   000001EC   0028               CMP      R0,#+0
   \   000001EE   01D1               BNE      ??Timer_1s_30
   \   000001F0   ........           BL       GetDateTimeFromRTC
   1333          //if (DateTime.Second=30) GetDateTimeFromRTC(); 
   1334          
   1335            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ 1min
   1336            static char CountMin=0;
   1337            if (CountMin<60)
   \                     ??Timer_1s_30:
   \   000001F4   607E               LDRB     R0,[R4, #+25]
   \   000001F6   3C28               CMP      R0,#+60
   \   000001F8   21D2               BCS      ??Timer_1s_31
   1338            {
   1339              CountMin++; 
   \   000001FA   401C               ADDS     R0,R0,#+1
   \   000001FC   6076               STRB     R0,[R4, #+25]
   1340            }else{
   1341              CountMin=0;
   1342            
   1343              if (TransQuality.SlowMensurIndex<4)
   1344              {
   1345                TransQuality.SlowMensurIndex++; 
   1346                
   1347              }else{
   1348                TransQuality.SlowMensurIndex=0;
   1349          
   1350              }
   1351              for(char NN=1; NN<NumberNeurons; NN++)   TransQuality.SlowMensur[NN] &= ~(1<<TransQuality.SlowMensurIndex);
   1352              
   1353                    //Sprawdzenie wiarygodnoœci wêz³ów na podstawie d³ugotrwa³ego pomiaru jakoœci
   1354                for (char NN=1; NN<NumberNeurons; NN++)
   1355                {
   1356                  if (TransQuality.SlowMensur[NN-1]==0)
   1357                  for (char NR=0; NR<NumberReg; NR++)
   1358                  {
   1359                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   1360                  }
   1361                }
   1362            }
   1363                               
   1364          
   1365            if (DateTime.Second==0) Timer_1min();
   \                     ??Timer_1s_32:
   \   000001FE   6079               LDRB     R0,[R4, #+5]
   \   00000200   0028               CMP      R0,#+0
   \   00000202   01D1               BNE      ??Timer_1s_33
   \   00000204   ........           BL       Timer_1min
   1366            if ((DateTime.Second==0) && (DateTime.Minute==0))  Timer_1h();
   \                     ??Timer_1s_33:
   \   00000208   6679               LDRB     R6,[R4, #+5]
   \   0000020A   002E               CMP      R6,#+0
   \   0000020C   04D1               BNE      ??Timer_1s_34
   \   0000020E   2079               LDRB     R0,[R4, #+4]
   \   00000210   0028               CMP      R0,#+0
   \   00000212   01D1               BNE      ??Timer_1s_34
   \   00000214   ........           BL       Timer_1h
   1367            if (DateTime.Second==0) TimetableExecute();
   \                     ??Timer_1s_34:
   \   00000218   002E               CMP      R6,#+0
   \   0000021A   01D1               BNE      ??Timer_1s_35
   \   0000021C   ........           BL       TimetableExecute
   1368               AlarmExecute();
   \                     ??Timer_1s_35:
   \   00000220   ........           BL       AlarmExecute
   1369               
   1370               
   1371          
   1372             //sprawdzenie wy³adowania baterii i wyœwietlenie ostrzenia       
   1373             if ((DateTime.Hour==10) && (DateTime.Minute==0) && (DateTime.Second==0)  && (DateTime.DayOfWeek==Saturday))
   \   00000224   E078               LDRB     R0,[R4, #+3]
   \   00000226   0A28               CMP      R0,#+10
   \   00000228   77D1               BNE      ??Timer_1s_36
   \   0000022A   2079               LDRB     R0,[R4, #+4]
   \   0000022C   0028               CMP      R0,#+0
   \   0000022E   74D1               BNE      ??Timer_1s_36
   \   00000230   6079               LDRB     R0,[R4, #+5]
   \   00000232   0028               CMP      R0,#+0
   \   00000234   71D1               BNE      ??Timer_1s_36
   \   00000236   A079               LDRB     R0,[R4, #+6]
   \   00000238   0628               CMP      R0,#+6
   \   0000023A   6ED1               BNE      ??Timer_1s_36
   1374             {
   1375             
   1376                 for (char i=0; i<NumberNeurons; i++)
   \   0000023C   6AE0               B        ??Timer_1s_37
   \                     ??Timer_1s_31:
   \   0000023E   2800               MOVS     R0,R5
   \   00000240   6076               STRB     R0,[R4, #+25]
   \   00000242   6248               LDR      R0,??Timer_1s_26+0xC  ;; TransQuality
   \   00000244   4178               LDRB     R1,[R0, #+1]
   \   00000246   0429               CMP      R1,#+4
   \   00000248   02D2               BCS      ??Timer_1s_38
   \   0000024A   491C               ADDS     R1,R1,#+1
   \   0000024C   4170               STRB     R1,[R0, #+1]
   \   0000024E   01E0               B        ??Timer_1s_39
   \                     ??Timer_1s_38:
   \   00000250   2900               MOVS     R1,R5
   \   00000252   4170               STRB     R1,[R0, #+1]
   \                     ??Timer_1s_39:
   \   00000254   0126               MOVS     R6,#+1
   \   00000256   3100               MOVS     R1,R6
   \   00000258   0BE0               B        ??Timer_1s_40
   \                     ??Timer_1s_41:
   \   0000025A   8218               ADDS     R2,R0,R2
   \   0000025C   D378               LDRB     R3,[R2, #+3]
   \   0000025E   9C46               MOV      R12,R3
   \   00000260   3700               MOVS     R7,R6
   \   00000262   4378               LDRB     R3,[R0, #+1]
   \   00000264   9F40               LSLS     R7,R7,R3
   \   00000266   6346               MOV      R3,R12
   \   00000268   BB43               BICS     R3,R3,R7
   \   0000026A   D370               STRB     R3,[R2, #+3]
   \   0000026C   491C               ADDS     R1,R1,#+1
   \   0000026E   0906               LSLS     R1,R1,#+24
   \   00000270   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_40:
   \   00000272   0A00               MOVS     R2,R1
   \   00000274   232A               CMP      R2,#+35
   \   00000276   F0D3               BCC      ??Timer_1s_41
   \   00000278   3100               MOVS     R1,R6
   \   0000027A   13E0               B        ??Timer_1s_42
   \                     ??Timer_1s_43:
   \   0000027C   7700               LSLS     R7,R6,#+1
   \   0000027E   BC46               MOV      R12,R7
   \   00000280   1627               MOVS     R7,#+22
   \   00000282   5743               MULS     R7,R2,R7
   \   00000284   524E               LDR      R6,??Timer_1s_26+0x10  ;; MainStage
   \   00000286   F619               ADDS     R6,R6,R7
   \   00000288   6746               MOV      R7,R12
   \   0000028A   F619               ADDS     R6,R6,R7
   \   0000028C   A036               ADDS     R6,R6,#+160
   \   0000028E   514F               LDR      R7,??Timer_1s_26+0x14  ;; 0xffff8aaa
   \   00000290   3780               STRH     R7,[R6, #+0]
   \   00000292   5B1C               ADDS     R3,R3,#+1
   \   00000294   1B06               LSLS     R3,R3,#+24
   \   00000296   1B0E               LSRS     R3,R3,#+24
   \                     ??Timer_1s_44:
   \   00000298   1E00               MOVS     R6,R3
   \   0000029A   0B2E               CMP      R6,#+11
   \   0000029C   EED3               BCC      ??Timer_1s_43
   \                     ??Timer_1s_45:
   \   0000029E   491C               ADDS     R1,R1,#+1
   \   000002A0   0906               LSLS     R1,R1,#+24
   \   000002A2   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_42:
   \   000002A4   0A00               MOVS     R2,R1
   \   000002A6   232A               CMP      R2,#+35
   \   000002A8   A9D2               BCS      ??Timer_1s_32
   \   000002AA   8318               ADDS     R3,R0,R2
   \   000002AC   9B78               LDRB     R3,[R3, #+2]
   \   000002AE   002B               CMP      R3,#+0
   \   000002B0   F5D1               BNE      ??Timer_1s_45
   \   000002B2   F1E7               B        ??Timer_1s_44
   \                     ??Timer_1s_1:
   \   000002B4   ........           DC32     DateTime
   \   000002B8   ........           DC32     ButtonBipCounter
   \   000002BC   30F4FFFF           DC32     0xfffff430
   \                     ??Timer_1s_46:
   \   000002C0   1621               MOVS     R1,#+22
   \   000002C2   4843               MULS     R0,R1,R0
   \   000002C4   4249               LDR      R1,??Timer_1s_26+0x10  ;; MainStage
   \   000002C6   0818               ADDS     R0,R1,R0
   \   000002C8   A030               ADDS     R0,R0,#+160
   \   000002CA   0088               LDRH     R0,[R0, #+0]
   \   000002CC   0104               LSLS     R1,R0,#+16
   \   000002CE   1ED5               BPL      ??Timer_1s_47
   \   000002D0   4149               LDR      R1,??Timer_1s_26+0x18  ;; 0x8aaa
   \   000002D2   8842               CMP      R0,R1
   \   000002D4   1BD0               BEQ      ??Timer_1s_47
   1377                 {
   1378                   if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1379                   {
   1380                      Message_Paint(2,"Wyladowana","bateria","   ","Sprawdz","liste wezlow");         
   \   000002D6   414E               LDR      R6,??Timer_1s_26+0x1C  ;; `?<Constant "Wyladowana">`
   \   000002D8   3100               MOVS     R1,R6
   \   000002DA   1C31               ADDS     R1,R1,#+28
   \   000002DC   3000               MOVS     R0,R6
   \   000002DE   1430               ADDS     R0,R0,#+20
   \   000002E0   03B4               PUSH     {R0,R1}
   \   000002E2   3FA3               ADR      R3,??Timer_1s_26+0x20  ;; "   "
   \   000002E4   3200               MOVS     R2,R6
   \   000002E6   0C32               ADDS     R2,R2,#+12
   \   000002E8   3100               MOVS     R1,R6
   \   000002EA   0220               MOVS     R0,#+2
   \   000002EC   ........           BL       Message_Paint
   \   000002F0   02B0               ADD      SP,SP,#+8
   1381          
   1382                      ButtonBipCounter=g_counter+8000;
   \   000002F2   3C4E               LDR      R6,??Timer_1s_26+0x24  ;; ButtonBipCounter
   \   000002F4   2000               MOVS     R0,R4
   \   000002F6   3030               ADDS     R0,R0,#+48
   \   000002F8   0CC8               LDM      R0!,{R2,R3}
   \   000002FA   FA20               MOVS     R0,#+250
   \   000002FC   4001               LSLS     R0,R0,#+5        ;; #+8000
   \   000002FE   0021               MOVS     R1,#+0
   \   00000300   8018               ADDS     R0,R0,R2
   \   00000302   5941               ADCS     R1,R1,R3
   \   00000304   03C6               STM      R6!,{R0,R1}
   1383                      AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                        ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000306   3848               LDR      R0,??Timer_1s_26+0x28  ;; 0xfffff430
   \   00000308   8021               MOVS     R1,#+128
   \   0000030A   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000030C   0160               STR      R1,[R0, #+0]
   1384                   }
   1385          
   1386                 } 
   \                     ??Timer_1s_47:
   \   0000030E   6D1C               ADDS     R5,R5,#+1
   \   00000310   2D06               LSLS     R5,R5,#+24
   \   00000312   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1s_37:
   \   00000314   2800               MOVS     R0,R5
   \   00000316   2328               CMP      R0,#+35
   \   00000318   D2D3               BCC      ??Timer_1s_46
   1387                
   1388             }    
   1389              
   1390          
   1391             
   1392             
   1393             //wygaszacz ekranu
   1394             static char LCD_last_fill=100;
   1395             char WypMin;
   1396             if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))  
   \                     ??Timer_1s_36:
   \   0000031A   A07B               LDRB     R0,[R4, #+14]
   \   0000031C   0028               CMP      R0,#+0
   \   0000031E   07D0               BEQ      ??Timer_1s_48
   \   00000320   08D0               BEQ      ??Timer_1s_49
   \   00000322   E078               LDRB     R0,[R4, #+3]
   \   00000324   E17B               LDRB     R1,[R4, #+15]
   \   00000326   8842               CMP      R0,R1
   \   00000328   04D2               BCS      ??Timer_1s_49
   \   0000032A   217C               LDRB     R1,[R4, #+16]
   \   0000032C   8842               CMP      R0,R1
   \   0000032E   01D3               BCC      ??Timer_1s_49
   1397             {  
   1398                WypMin=WypMinJasnosci;   //wype³nienie bez wygaszacza
   \                     ??Timer_1s_48:
   \   00000330   207D               LDRB     R0,[R4, #+20]
   \   00000332   00E0               B        ??Timer_1s_50
   1399             }else{
   1400                WypMin=4;    //wype³nienie przy wygaszaczu
   \                     ??Timer_1s_49:
   \   00000334   0420               MOVS     R0,#+4
   1401             }
   1402               if (gWypMinJasnosciTest)
   \                     ??Timer_1s_50:
   \   00000336   617D               LDRB     R1,[R4, #+21]
   \   00000338   0029               CMP      R1,#+0
   \   0000033A   08D0               BEQ      ??Timer_1s_51
   1403               {
   1404                  AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   0000033C   0126               MOVS     R6,#+1
   \   0000033E   2B48               LDR      R0,??Timer_1s_26+0x2C  ;; 0xfffcc008
   \   00000340   0660               STR      R6,[R0, #+0]
   1405                  Set_LCD_Light_PWM_Fill(WypMinJasnosci); 
                         ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   00000342   207D               LDRB     R0,[R4, #+20]
   \   00000344   ........           BL       Set_LCD_Light_PWM_Fill
   1406                  AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000348   2948               LDR      R0,??Timer_1s_26+0x30  ;; 0xfffcc004
   \   0000034A   0660               STR      R6,[R0, #+0]
   \   0000034C   23E0               B        ??Timer_1s_52
   1407               }
   1408               else if (g_LightLCDEnable==1)
   \                     ??Timer_1s_51:
   \   0000034E   A17E               LDRB     R1,[R4, #+26]
   \   00000350   627B               LDRB     R2,[R4, #+13]
   \   00000352   012A               CMP      R2,#+1
   \   00000354   0DD1               BNE      ??Timer_1s_53
   1409               {
   1410                 if (LCD_last_fill!=WypMaxJasnosci)
   \   00000356   E07C               LDRB     R0,[R4, #+19]
   \   00000358   8142               CMP      R1,R0
   \   0000035A   1CD0               BEQ      ??Timer_1s_52
   1411                 {
   1412                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   0000035C   0126               MOVS     R6,#+1
   \   0000035E   2348               LDR      R0,??Timer_1s_26+0x2C  ;; 0xfffcc008
   \   00000360   0660               STR      R6,[R0, #+0]
   1413                    Set_LCD_Light_PWM_Fill(WypMaxJasnosci);  //maksymalne wype³nienie
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   00000362   E07C               LDRB     R0,[R4, #+19]
   \   00000364   ........           BL       Set_LCD_Light_PWM_Fill
   1414                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000368   2148               LDR      R0,??Timer_1s_26+0x30  ;; 0xfffcc004
   \   0000036A   0660               STR      R6,[R0, #+0]
   1415                    LCD_last_fill=WypMaxJasnosci;
   \   0000036C   E07C               LDRB     R0,[R4, #+19]
   \   0000036E   A076               STRB     R0,[R4, #+26]
   \   00000370   11E0               B        ??Timer_1s_52
   1416                 }
   1417               }else {
   1418                 if (LCD_last_fill>WypMin)
   \                     ??Timer_1s_53:
   \   00000372   8842               CMP      R0,R1
   \   00000374   0FD2               BCS      ??Timer_1s_52
   1419                 {
   1420                    if (LCD_last_fill>60) LCD_last_fill=61;
   \   00000376   3D29               CMP      R1,#+61
   \   00000378   01D3               BCC      ??Timer_1s_54
   \   0000037A   3D20               MOVS     R0,#+61
   \   0000037C   A076               STRB     R0,[R4, #+26]
   1421                    LCD_last_fill-=2;
   \                     ??Timer_1s_54:
   \   0000037E   A07E               LDRB     R0,[R4, #+26]
   \   00000380   801E               SUBS     R0,R0,#+2
   \   00000382   A076               STRB     R0,[R4, #+26]
   1422                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   00000384   0126               MOVS     R6,#+1
   \   00000386   1949               LDR      R1,??Timer_1s_26+0x2C  ;; 0xfffcc008
   \   00000388   0E60               STR      R6,[R1, #+0]
   1423                    Set_LCD_Light_PWM_Fill(LCD_last_fill); 
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   0000038A   0006               LSLS     R0,R0,#+24
   \   0000038C   000E               LSRS     R0,R0,#+24
   \   0000038E   ........           BL       Set_LCD_Light_PWM_Fill
   1424                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000392   1748               LDR      R0,??Timer_1s_26+0x30  ;; 0xfffcc004
   \   00000394   0660               STR      R6,[R0, #+0]
   1425                 }
   1426              }
   1427              
   1428              
   1429              if ((RF_Status.RfFuse>0) && (RF_Status.RfFuse<100)) RF_Status.RfFuse++;
   \                     ??Timer_1s_52:
   \   00000396   1748               LDR      R0,??Timer_1s_26+0x34  ;; RF_Status
   \   00000398   017C               LDRB     R1,[R0, #+16]
   \   0000039A   0029               CMP      R1,#+0
   \   0000039C   03D0               BEQ      ??Timer_1s_55
   \   0000039E   6429               CMP      R1,#+100
   \   000003A0   01D2               BCS      ??Timer_1s_55
   \   000003A2   491C               ADDS     R1,R1,#+1
   \   000003A4   0174               STRB     R1,[R0, #+16]
   1430             
   1431             
   1432             
   1433             //bezpiecznik przed zablokowaniem siê DMA USARTA lub WiFi 
   1434             if (NET.WiFi.On)
   \                     ??Timer_1s_55:
   \   000003A6   1448               LDR      R0,??Timer_1s_26+0x38  ;; NET + 80
   \   000003A8   0078               LDRB     R0,[R0, #+0]
   \   000003AA   0028               CMP      R0,#+0
   \   000003AC   04D1               BNE      ??Timer_1s_56
   1435             {
   1436               (FuseLastWiFiDataIn<g_counter-30000);   //zabezpieczenie przed blokad¹ DMA USART. FuseLastWiFiDataIn zawiera czas ostatniej odpowiedzi od usarta. Je¿eli WiFi jest w³¹czone a USART milczy od 30s to restartuj mikroprocesor
                      ^
Warning[Pe174]: expression has no effect
   1437             }else{
   1438                FuseLastWiFiDataIn=g_counter;
   \   000003AE   2000               MOVS     R0,R4
   \   000003B0   3030               ADDS     R0,R0,#+48
   \   000003B2   03C8               LDM      R0!,{R0,R1}
   \   000003B4   2064               STR      R0,[R4, #+64]
   \   000003B6   6164               STR      R1,[R4, #+68]
   1439             }
   1440          }
   \                     ??Timer_1s_56:
   \   000003B8   FEBC               POP      {R1-R7}
   \   000003BA   01BC               POP      {R0}
   \   000003BC   0047               BX       R0               ;; return
   \   000003BE   C046               Nop      
   \                     ??Timer_1s_26:
   \   000003C0   ........           DC32     MenuLevel
   \   000003C4   ........           DC32     g_US0_Connect_OK
   \   000003C8   ........           DC32     g_US1_Connect_OK
   \   000003CC   ........           DC32     TransQuality
   \   000003D0   ........           DC32     MainStage
   \   000003D4   AA8AFFFF           DC32     0xffff8aaa
   \   000003D8   AA8A0000           DC32     0x8aaa
   \   000003DC   ........           DC32     `?<Constant "Wyladowana">`
   \   000003E0   20202000           DC8      "   "
   \   000003E4   ........           DC32     ButtonBipCounter
   \   000003E8   30F4FFFF           DC32     0xfffff430
   \   000003EC   08C0FCFF           DC32     0xfffcc008
   \   000003F0   04C0FCFF           DC32     0xfffcc004
   \   000003F4   ........           DC32     RF_Status
   \   000003F8   ........           DC32     NET + 80
   1441          
   1442          
   1443          
   1444          
   1445          //-----------------------------------------------------------------------------
   1446          //! Nazwa funkcji :    Timer_10ms
   1447          //! Okres: 10ms
   1448          //! Timer zale¿ny od Timer_1ms
   1449          //-----------------------------------------------------------------------------
   1450          //  
   1451          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1452          void Timer_10ms(void)                      
   1453          { 
   \                     Timer_10ms:
   \   00000000   10B5               PUSH     {R4,LR}
   1454            unsigned int dummy = AT91C_BASE_TC0->TC_SR;                                   // Odczyt statusu  
   \   00000002   4248               LDR      R0,??Timer_10ms_0  ;; 0xfffa0020
   \   00000004   0068               LDR      R0,[R0, #+0]
   1455          
   1456           X_up=-1;
   \   00000006   424C               LDR      R4,??Timer_10ms_0+0x4  ;; DateTime
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   C043               MVNS     R0,R0            ;; #-1
   \   0000000C   6085               STRH     R0,[R4, #+42]
   1457           Y_up=-1;
   \   0000000E   2085               STRH     R0,[R4, #+40]
   1458          
   1459           X_down=-1;
   \   00000010   E084               STRH     R0,[R4, #+38]
   1460           Y_down=-1;
   \   00000012   A084               STRH     R0,[R4, #+36]
   1461          
   1462          
   1463            GetTouchPoint(&X_down, &Y_down, &X_up, &Y_up);
   \   00000014   2300               MOVS     R3,R4
   \   00000016   2833               ADDS     R3,R3,#+40
   \   00000018   2200               MOVS     R2,R4
   \   0000001A   2A32               ADDS     R2,R2,#+42
   \   0000001C   2100               MOVS     R1,R4
   \   0000001E   2431               ADDS     R1,R1,#+36
   \   00000020   2000               MOVS     R0,R4
   \   00000022   2630               ADDS     R0,R0,#+38
   \   00000024   ........           BL       GetTouchPoint
   1464          
   1465           
   1466             //Akcja przycisku up
   1467            if ((X_up>0)&&(Y_up>0)) 
   \   00000028   2A20               MOVS     R0,#+42
   \   0000002A   205E               LDRSH    R0,[R4, R0]
   \   0000002C   0128               CMP      R0,#+1
   \   0000002E   0CDB               BLT      ??Timer_10ms_1
   \   00000030   2820               MOVS     R0,#+40
   \   00000032   205E               LDRSH    R0,[R4, R0]
   \   00000034   0128               CMP      R0,#+1
   \   00000036   08DB               BLT      ??Timer_10ms_1
   1468            {
   1469               ScreenEvent();
   \   00000038   ........           BL       ScreenEvent
   1470               g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   2065               STR      R0,[R4, #+80]
   1471               if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000040   607B               LDRB     R0,[R4, #+13]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   01D1               BNE      ??Timer_10ms_1
   \   00000046   0120               MOVS     R0,#+1
   \   00000048   6073               STRB     R0,[R4, #+13]
   1472            }
   1473            
   1474            if (LiczOds>=5) {
   \                     ??Timer_10ms_1:
   \   0000004A   206E               LDR      R0,[R4, #+96]
   \   0000004C   0528               CMP      R0,#+5
   \   0000004E   16DB               BLT      ??Timer_10ms_2
   1475            
   1476                      //Akcja przycisku down
   1477                if ((X_down>0)&&(Y_down>0) /*&& (g_LightLCDEnable==0)*/) 
   \   00000050   2620               MOVS     R0,#+38
   \   00000052   205E               LDRSH    R0,[R4, R0]
   \   00000054   0128               CMP      R0,#+1
   \   00000056   09DB               BLT      ??Timer_10ms_3
   \   00000058   2420               MOVS     R0,#+36
   \   0000005A   205E               LDRSH    R0,[R4, R0]
   \   0000005C   0128               CMP      R0,#+1
   \   0000005E   05DB               BLT      ??Timer_10ms_3
   1478                {
   1479                   ScreenEvent();
   \   00000060   ........           BL       ScreenEvent
   1480                   g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   2065               STR      R0,[R4, #+80]
   1481                   g_LightLCDEnable=1;
   \   00000068   0120               MOVS     R0,#+1
   \   0000006A   6073               STRB     R0,[R4, #+13]
   1482                }  
   1483                
   1484                MenuRefresh(); 
   \                     ??Timer_10ms_3:
   \   0000006C   ........           BL       MenuRefresh
   1485          
   1486              
   1487          
   1488              
   1489              RepaintLCD();
   \   00000070   ........           BL       RepaintLCD
   1490              RepaintLCD();
   \   00000074   ........           BL       RepaintLCD
   1491          
   1492              
   1493              LiczOds=0;
   \   00000078   0020               MOVS     R0,#+0
   \   0000007A   2066               STR      R0,[R4, #+96]
   \   0000007C   01E0               B        ??Timer_10ms_4
   1494          
   1495            }
   1496            
   1497            else 
   1498            {
   1499              LiczOds++; 
   \                     ??Timer_10ms_2:
   \   0000007E   401C               ADDS     R0,R0,#+1
   \   00000080   2066               STR      R0,[R4, #+96]
   1500            }
   1501            
   1502              
   1503            
   1504            static int Spek2_Counter;
   1505            if (Spek2_Counter<202)Spek2_Counter++;
   \                     ??Timer_10ms_4:
   \   00000082   606F               LDR      R0,[R4, #+116]
   \   00000084   CA28               CMP      R0,#+202
   \   00000086   01DA               BGE      ??Timer_10ms_5
   \   00000088   401C               ADDS     R0,R0,#+1
   \   0000008A   6067               STR      R0,[R4, #+116]
   1506            if ((Speaker[2]==1) && (Spek2_Counter>150)) 
   \                     ??Timer_10ms_5:
   \   0000008C   A07A               LDRB     R0,[R4, #+10]
   \   0000008E   0128               CMP      R0,#+1
   \   00000090   10D1               BNE      ??Timer_10ms_6
   \   00000092   606F               LDR      R0,[R4, #+116]
   \   00000094   9728               CMP      R0,#+151
   \   00000096   0DDB               BLT      ??Timer_10ms_6
   1507            {
   1508                Spek2_Counter=0;
   \   00000098   0020               MOVS     R0,#+0
   \   0000009A   6067               STR      R0,[R4, #+116]
   1509                ButtonBipCounter=g_counter+150;
   \   0000009C   1D4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   0000009E   2000               MOVS     R0,R4
   \   000000A0   3030               ADDS     R0,R0,#+48
   \   000000A2   03C8               LDM      R0!,{R0,R1}
   \   000000A4   0023               MOVS     R3,#+0
   \   000000A6   9630               ADDS     R0,R0,#+150
   \   000000A8   5941               ADCS     R1,R1,R3
   \   000000AA   03C2               STM      R2!,{R0,R1}
   1510                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000AC   1A48               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000AE   8021               MOVS     R1,#+128
   \   000000B0   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000B2   0160               STR      R1,[R0, #+0]
   1511            }
   1512          
   1513            if ((Speaker[3]==1) && (Spek2_Counter==150)) 
   \                     ??Timer_10ms_6:
   \   000000B4   E07A               LDRB     R0,[R4, #+11]
   \   000000B6   0128               CMP      R0,#+1
   \   000000B8   0ED1               BNE      ??Timer_10ms_7
   \   000000BA   606F               LDR      R0,[R4, #+116]
   \   000000BC   9628               CMP      R0,#+150
   \   000000BE   0BD1               BNE      ??Timer_10ms_7
   1514            {
   1515                ButtonBipCounter=g_counter+100;
   \   000000C0   144A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000C2   2000               MOVS     R0,R4
   \   000000C4   3030               ADDS     R0,R0,#+48
   \   000000C6   03C8               LDM      R0!,{R0,R1}
   \   000000C8   0023               MOVS     R3,#+0
   \   000000CA   6430               ADDS     R0,R0,#+100
   \   000000CC   5941               ADCS     R1,R1,R3
   \   000000CE   03C2               STM      R2!,{R0,R1}
   1516                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000D0   1148               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000D2   8021               MOVS     R1,#+128
   \   000000D4   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000D6   0160               STR      R1,[R0, #+0]
   1517            }  
   1518            if ((Speaker[3]==1) && (Spek2_Counter>200)) 
   \                     ??Timer_10ms_7:
   \   000000D8   E07A               LDRB     R0,[R4, #+11]
   \   000000DA   0128               CMP      R0,#+1
   \   000000DC   0FD1               BNE      ??Timer_10ms_8
   \   000000DE   606F               LDR      R0,[R4, #+116]
   \   000000E0   C928               CMP      R0,#+201
   \   000000E2   0CDB               BLT      ??Timer_10ms_8
   1519            {
   1520                Spek2_Counter=0;
   \   000000E4   0020               MOVS     R0,#+0
   \   000000E6   6067               STR      R0,[R4, #+116]
   1521                ButtonBipCounter=g_counter+100;
   \   000000E8   0A4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000EA   3034               ADDS     R4,R4,#+48
   \   000000EC   03CC               LDM      R4!,{R0,R1}
   \   000000EE   0023               MOVS     R3,#+0
   \   000000F0   6430               ADDS     R0,R0,#+100
   \   000000F2   5941               ADCS     R1,R1,R3
   \   000000F4   03C2               STM      R2!,{R0,R1}
   1522                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000F6   0848               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000F8   8021               MOVS     R1,#+128
   \   000000FA   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000FC   0160               STR      R1,[R0, #+0]
   1523            }    
   1524          
   1525           AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Timer_10ms_8:
   \   000000FE   0748               LDR      R0,??Timer_10ms_0+0x10  ;; 0xfffffd40
   \   00000100   ........           BL       AT91F_WDTRestart
   1526          
   1527          }
   \   00000104   10BC               POP      {R4}
   \   00000106   01BC               POP      {R0}
   \   00000108   0047               BX       R0               ;; return
   \   0000010A   C046               Nop      
   \                     ??Timer_10ms_0:
   \   0000010C   2000FAFF           DC32     0xfffa0020
   \   00000110   ........           DC32     DateTime
   \   00000114   ........           DC32     ButtonBipCounter
   \   00000118   30F4FFFF           DC32     0xfffff430
   \   0000011C   40FDFFFF           DC32     0xfffffd40
   1528          
   1529          
   1530          
   1531          

   \                                 In section Debug.txt, align 4, keep-with-next
   1532          void Timer_10ms_Setup(void) 
   1533          { 
   1534          
   1535          
   1536           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC0] = (unsigned int)Timer_10ms;  //set AIC             
   \                     Timer_10ms_Setup:
   \   00000000   1248               LDR      R0,??Timer_10ms_Setup_0  ;; 0xfffff0b0
   \   00000002   1349               LDR      R1,??Timer_10ms_Setup_0+0x4  ;; Timer_10ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1537           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC0] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10mS_PRIOR ); 
   \   00000006   1348               LDR      R0,??Timer_10ms_Setup_0+0x8  ;; 0xfffff030
   \   00000008   0321               MOVS     R1,#+3
   \   0000000A   0160               STR      R1,[R0, #+0]
   1538           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC0);      //enable clock 
   \   0000000C   8020               MOVS     R0,#+128
   \   0000000E   4001               LSLS     R0,R0,#+5        ;; #+4096
   \   00000010   1149               LDR      R1,??Timer_10ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000012   0860               STR      R0,[R1, #+0]
   1539           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1149               LDR      R1,??Timer_10ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0A60               STR      R2,[R1, #+0]
   1540           //no external clocks 
   1541           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1149               LDR      R1,??Timer_10ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1522               MOVS     R2,#+21
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1542           AT91C_BASE_TC0->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1049               LDR      R1,??Timer_10ms_Setup_0+0x18  ;; 0xfffa0000
   \   00000022   0522               MOVS     R2,#+5
   \   00000024   0A60               STR      R2,[R1, #+0]
   1543           AT91C_BASE_TC0->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV5_CLOCK;//CPC 
   \   00000026   1049               LDR      R1,??Timer_10ms_Setup_0+0x1C  ;; 0xfffa0004
   \   00000028   104A               LDR      R2,??Timer_10ms_Setup_0+0x20  ;; 0xcc004
   \   0000002A   0A60               STR      R2,[R1, #+0]
   1544            //! DIV5 - 1024
   1545           //! DIV4 - 128
   1546           //! DIV3 - 32
   1547           //! DIV2 - 8
   1548           //clock: MCK/1024  = 48054841/1024  =  46928 Hz 
   1549           //AT91C_BASE_TC0->TC_RC = 46928,55;    => 1 sec 
   1550                                   
   1551           AT91C_BASE_TC0->TC_RC = 469;                  //10ms 
   \   0000002C   1049               LDR      R1,??Timer_10ms_Setup_0+0x24  ;; 0xfffa001c
   \   0000002E   FF22               MOVS     R2,#+255
   \   00000030   D632               ADDS     R2,R2,#+214      ;; #+469
   \   00000032   0A60               STR      R2,[R1, #+0]
   1552           AT91C_BASE_TC0->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000034   0F49               LDR      R1,??Timer_10ms_Setup_0+0x28  ;; 0xfffa0024
   \   00000036   1022               MOVS     R2,#+16
   \   00000038   0A60               STR      R2,[R1, #+0]
   1553           AT91C_BASE_TC0->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   0000003A   0F49               LDR      R1,??Timer_10ms_Setup_0+0x2C  ;; 0xfffa0028
   \   0000003C   D243               MVNS     R2,R2            ;; #-17
   \   0000003E   0A60               STR      R2,[R1, #+0]
   1554           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC0);       //enable int 
   \   00000040   0E49               LDR      R1,??Timer_10ms_Setup_0+0x30  ;; 0xfffff120
   \   00000042   0860               STR      R0,[R1, #+0]
   1555           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC0);       //clear int 
   \   00000044   0E49               LDR      R1,??Timer_10ms_Setup_0+0x34  ;; 0xfffff128
   \   00000046   0860               STR      R0,[R1, #+0]
   1556            
   1557          
   1558          }//_____________________________________________________________________________
   \   00000048   7047               BX       LR               ;; return
   \   0000004A   C046               Nop      
   \                     ??Timer_10ms_Setup_0:
   \   0000004C   B0F0FFFF           DC32     0xfffff0b0
   \   00000050   ........           DC32     Timer_10ms
   \   00000054   30F0FFFF           DC32     0xfffff030
   \   00000058   10FCFFFF           DC32     0xfffffc10
   \   0000005C   C000FAFF           DC32     0xfffa00c0
   \   00000060   C400FAFF           DC32     0xfffa00c4
   \   00000064   0000FAFF           DC32     0xfffa0000
   \   00000068   0400FAFF           DC32     0xfffa0004
   \   0000006C   04C00C00           DC32     0xcc004
   \   00000070   1C00FAFF           DC32     0xfffa001c
   \   00000074   2400FAFF           DC32     0xfffa0024
   \   00000078   2800FAFF           DC32     0xfffa0028
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1559          
   1560          
   1561          
   1562          
   1563          
   1564          //-----------------------------------------------------------------------------
   1565          //! Nazwa funkcji :    Timer_1ms
   1566          //! Okres: 1ms
   1567          //! Funkcje:
   1568          //!         Funkcja obs³ugi przerwania USART 0  Czas 1 ms
   1569          //!         Triger Timer_10ms 
   1570          //-----------------------------------------------------------------------------
   1571          //  
   1572          //----------------------------------------------------------------------------- 
   1573          
   1574          
   1575          int Counter=0;
   1576          int US0_Counter=0;
   1577          int US1_Counter=0;
   1578          extern char SendModbusEnable;
   1579          char CounterForTimer10ms=0;
   1580          short int CurTimeQual=0;
   1581          

   \                                 In section Debug.txt, align 4, keep-with-next
   1582          void Timer_1ms(void)                        //timer isr 
   1583          { 
   \                     Timer_1ms:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1584            unsigned int dummy2 = AT91C_BASE_TC2->TC_SR;  
   \   00000002   6448               LDR      R0,??Timer_1ms_0  ;; 0xfffa00a0
   \   00000004   0068               LDR      R0,[R0, #+0]
   1585            
   1586            g_counter++;
   \   00000006   644E               LDR      R6,??Timer_1ms_0+0x4  ;; DateTime
   \   00000008   3000               MOVS     R0,R6
   \   0000000A   3030               ADDS     R0,R0,#+48
   \   0000000C   03C8               LDM      R0!,{R0,R1}
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   5141               ADCS     R1,R1,R2
   \   00000014   3200               MOVS     R2,R6
   \   00000016   3032               ADDS     R2,R2,#+48
   \   00000018   03C2               STM      R2!,{R0,R1}
   1587          
   1588            
   1589          
   1590            
   1591            
   1592            /*
   1593            
   1594          
   1595          
   1596            
   1597            //obs³uga US0
   1598            if (US0_MasterMODBUS_ENABLE)
   1599            {
   1600            if (US0_Counter>g_US0_Comm_MinCykle) 
   1601            {
   1602              
   1603                if (g_Ans_ZD_MODBUS_0 == g_US0_Comm_TIMEOUT)
   1604                {
   1605                    ZD_MODBUS_0[g_Current_ZD_MODBUS_0].Error ++;
   1606                }
   1607              
   1608                
   1609                if (g_Ans_ZD_MODBUS_0 >= g_US0_Comm_TIMEOUT)
   1610                {
   1611          
   1612                    //AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
   1613             
   1614                    g_Ans_ZD_MODBUS_0=0;
   1615                    SendModbusEnable=0;
   1616                  //  ModBus_MASTER_TX(0);
   1617                    
   1618                    US0_Counter=0;
   1619                }
   1620                else
   1621                {
   1622                    g_Ans_ZD_MODBUS_0++;
   1623          
   1624                }
   1625              
   1626            }
   1627            else
   1628            {
   1629              US0_Counter++; 
   1630            }
   1631            }
   1632            
   1633          
   1634          
   1635            if (US1_MasterMODBUS_ENABLE)
   1636            {
   1637            if (US1_Counter>g_US0_Comm_MinCykle) 
   1638            {
   1639              
   1640                if (g_Ans_ZD_MODBUS_1 == g_US1_Comm_TIMEOUT)
   1641                {
   1642                    ZD_MODBUS_1[g_Current_ZD_MODBUS_1].Error ++;
   1643                }
   1644                
   1645                if (g_Ans_ZD_MODBUS_1 >= g_US1_Comm_TIMEOUT)
   1646                {
   1647             
   1648                    g_Ans_ZD_MODBUS_1=0;
   1649                    ModBus_MASTER_TX(1);
   1650                    
   1651                    US0_Counter=1;
   1652                }
   1653                else
   1654                {
   1655                    g_Ans_ZD_MODBUS_1++;
   1656          
   1657                }
   1658              
   1659            }
   1660            else
   1661            {
   1662              US1_Counter++; 
   1663            }
   1664            }
   1665          */
   1666            
   1667            
   1668          
   1669          if (ButtonBipCounter<g_counter) AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                                            ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000001A   604A               LDR      R2,??Timer_1ms_0+0x8  ;; ButtonBipCounter
   \   0000001C   0CCA               LDM      R2!,{R2,R3}
   \   0000001E   8B42               CMP      R3,R1
   \   00000020   06D8               BHI      ??Timer_1ms_1
   \   00000022   01D3               BCC      ??Timer_1ms_2
   \   00000024   8242               CMP      R2,R0
   \   00000026   03D2               BCS      ??Timer_1ms_1
   \                     ??Timer_1ms_2:
   \   00000028   5D48               LDR      R0,??Timer_1ms_0+0xC  ;; 0xfffff434
   \   0000002A   8021               MOVS     R1,#+128
   \   0000002C   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000002E   0160               STR      R1,[R0, #+0]
   1670          
   1671            
   1672            
   1673            static int RF_SlaveCounter;
   1674           
   1675            
   1676            
   1677          //TimeOut RF -----
   1678            
   1679          if (RF_Status.AllReady)
   \                     ??Timer_1ms_1:
   \   00000030   5C4D               LDR      R5,??Timer_1ms_0+0x10  ;; g_SlaveConnect
   \   00000032   5D4C               LDR      R4,??Timer_1ms_0+0x14  ;; RF_Status
   \   00000034   E07B               LDRB     R0,[R4, #+15]
   \   00000036   0028               CMP      R0,#+0
   \   00000038   65D0               BEQ      ??Timer_1ms_3
   1680          
   1681          {
   1682            if (RF_Status.MasterMode)
   \   0000003A   207B               LDRB     R0,[R4, #+12]
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   0FD0               BEQ      ??Timer_1ms_4
   1683            {
   1684              if ((!SlaveMode) && (g_Stop_Program==0))
   \   00000040   B07D               LDRB     R0,[R6, #+22]
   \   00000042   6978               LDRB     R1,[R5, #+1]
   \   00000044   0143               ORRS     R1,R1,R0
   \   00000046   5ED1               BNE      ??Timer_1ms_3
   1685              if (g_RF_TimeOutCounter>0)
   \   00000048   5848               LDR      R0,??Timer_1ms_0+0x18  ;; g_RF_TimeOutCounter
   \   0000004A   0178               LDRB     R1,[R0, #+0]
   \   0000004C   0029               CMP      R1,#+0
   \   0000004E   02D0               BEQ      ??Timer_1ms_5
   1686              {
   1687                g_RF_TimeOutCounter--;
   \   00000050   491E               SUBS     R1,R1,#+1
   \   00000052   0170               STRB     R1,[R0, #+0]
   \   00000054   57E0               B        ??Timer_1ms_3
   1688           
   1689              }else{
   1690                 g_RF_TimeOutCounter=RF_TimeOut; 
   \                     ??Timer_1ms_5:
   \   00000056   0921               MOVS     R1,#+9
   \   00000058   0170               STRB     R1,[R0, #+0]
   1691                 RF_MasterExecut();
   \   0000005A   ........           BL       RF_MasterExecut
   \   0000005E   52E0               B        ??Timer_1ms_3
   1692              }
   1693            }else{
   1694                  
   1695                  RF_SlaveCounter++;
   \                     ??Timer_1ms_4:
   \   00000060   A868               LDR      R0,[R5, #+8]
   \   00000062   401C               ADDS     R0,R0,#+1
   \   00000064   A860               STR      R0,[R5, #+8]
   1696               
   1697                  
   1698                    if (RF_Status.ConfResive==2) //je¿eli poprawnie odebrano dane 
   \   00000066   E17A               LDRB     R1,[R4, #+11]
   \   00000068   0229               CMP      R1,#+2
   \   0000006A   06D1               BNE      ??Timer_1ms_6
   1699                    {
   1700                      RF_SlaveCounter=0;   //- zeruj licznik
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   A860               STR      R0,[R5, #+8]
   1701                      RF_Status.ConfResive=1;
   \   00000070   0120               MOVS     R0,#+1
   \   00000072   0100               MOVS     R1,R0
   \   00000074   E172               STRB     R1,[R4, #+11]
   1702                      g_SlaveConnect=1;    //ustawia flagê poprawnej transmisji slave
   \   00000076   2870               STRB     R0,[R5, #+0]
   \   00000078   45E0               B        ??Timer_1ms_3
   1703                    }else{
   1704          
   1705                      if (((RF_SlaveCounter==100)  && (RF_Status.ConfResive==0)) //je¿eli nie odebrano danych w czasie 100ms
   1706                      || ((RF_SlaveCounter>=2000) && (RF_Status.ConfResive<2))  //je¿eli nie odebrano danych o w³aœciwym ID w czasie 1000ms
   1707                        )
   \                     ??Timer_1ms_6:
   \   0000007A   6428               CMP      R0,#+100
   \   0000007C   01D1               BNE      ??Timer_1ms_7
   \   0000007E   0029               CMP      R1,#+0
   \   00000080   05D0               BEQ      ??Timer_1ms_8
   \                     ??Timer_1ms_7:
   \   00000082   FA22               MOVS     R2,#+250
   \   00000084   D200               LSLS     R2,R2,#+3        ;; #+2000
   \   00000086   9042               CMP      R0,R2
   \   00000088   3DDB               BLT      ??Timer_1ms_3
   \   0000008A   0229               CMP      R1,#+2
   \   0000008C   3BD2               BCS      ??Timer_1ms_3
   1708                      {
   1709                         /*
   1710                           RF_Status.ConfResive=0;
   1711                           g_SlaveConnect=0; 
   1712                           SPI_SendWord(0x8219,Cs_RF);                          //wy³¹cz odbiornik/nadajnik
   1713                           if (RF_Status.AllReady) if (RF_Status.ChSlave<RF_ChannelQuanti-1) {RF_Status.ChSlave++;} else {RF_Status.ChSlave=0;}
   1714                           SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
   1715                           //SPI_SendWord(0x8299,Cs_RF);                          //w³¹cz odbiornik
   1716                           RF_Status.EnableRX();
   1717                           */
   1718                        
   1719                           RF_SlaveCounter=0;   //- zeruj licznik
   \                     ??Timer_1ms_8:
   \   0000008E   0026               MOVS     R6,#+0
   \   00000090   AE60               STR      R6,[R5, #+8]
   1720                           RF_Status.ConfResive=0;
   \   00000092   3000               MOVS     R0,R6
   \   00000094   E072               STRB     R0,[R4, #+11]
   1721                           g_SlaveConnect=0; 
   \   00000096   2870               STRB     R0,[R5, #+0]
   1722                           if (RF_Status.AllReady) if (RF_Status.ChSlave<RF_ChannelQuanti-1) {RF_Status.ChSlave++;} else {RF_Status.ChSlave=0;}
   \   00000098   E07B               LDRB     R0,[R4, #+15]
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   07D0               BEQ      ??Timer_1ms_9
   \   0000009E   A07B               LDRB     R0,[R4, #+14]
   \   000000A0   2728               CMP      R0,#+39
   \   000000A2   02D2               BCS      ??Timer_1ms_10
   \   000000A4   401C               ADDS     R0,R0,#+1
   \   000000A6   A073               STRB     R0,[R4, #+14]
   \   000000A8   01E0               B        ??Timer_1ms_9
   \                     ??Timer_1ms_10:
   \   000000AA   3000               MOVS     R0,R6
   \   000000AC   A073               STRB     R0,[R4, #+14]
   1723                           SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
                                  ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \                     ??Timer_1ms_9:
   \   000000AE   0221               MOVS     R1,#+2
   \   000000B0   0F00               MOVS     R7,R1
   \   000000B2   A07B               LDRB     R0,[R4, #+14]
   \   000000B4   ........           BL       __aeabi_ui2d
   \   000000B8   0200               MOVS     R2,R0
   \   000000BA   0B00               MOVS     R3,R1
   \   000000BC   3C48               LDR      R0,??Timer_1ms_0+0x1C  ;; 0x33333333
   \   000000BE   3D49               LDR      R1,??Timer_1ms_0+0x20  ;; 0x3fd33333
   \   000000C0   ........           BL       __aeabi_dmul
   \   000000C4   0200               MOVS     R2,R0
   \   000000C6   0B00               MOVS     R3,R1
   \   000000C8   3B48               LDR      R0,??Timer_1ms_0+0x24  ;; 0x5c28f5c3
   \   000000CA   3C49               LDR      R1,??Timer_1ms_0+0x28  ;; 0x408ae28f
   \   000000CC   ........           BL       __aeabi_dadd
   \   000000D0   0200               MOVS     R2,R0
   \   000000D2   0B00               MOVS     R3,R1
   \   000000D4   3000               MOVS     R0,R6
   \   000000D6   3A49               LDR      R1,??Timer_1ms_0+0x2C  ;; 0x40690000
   \   000000D8   ........           BL       __aeabi_dmul
   \   000000DC   0200               MOVS     R2,R0
   \   000000DE   0B00               MOVS     R3,R1
   \   000000E0   3000               MOVS     R0,R6
   \   000000E2   3849               LDR      R1,??Timer_1ms_0+0x30  ;; 0xc104ff00
   \   000000E4   ........           BL       __aeabi_dadd
   \   000000E8   ........           BL       __aeabi_d2iz
   \   000000EC   0004               LSLS     R0,R0,#+16
   \   000000EE   0014               ASRS     R0,R0,#+16
   \   000000F0   A021               MOVS     R1,#+160
   \   000000F2   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   000000F4   0143               ORRS     R1,R1,R0
   \   000000F6   0800               MOVS     R0,R1
   \   000000F8   3900               MOVS     R1,R7
   \   000000FA   ........           BL       SPI_SendWord
   1724                           RF_Status.MasterMode=0;  
   \   000000FE   2673               STRB     R6,[R4, #+12]
   1725                           RF_Status.EnableRX();
   \   00000100   E069               LDR      R0,[R4, #+28]
   \   00000102   ........           BL       __iar_via_R0
   1726                        
   1727                      }
   1728                    
   1729                    }
   1730                   
   1731                    
   1732            }
   1733          }          
   1734          
   1735            
   1736          
   1737            
   1738                //uruchomienie Timer_1s co 1000 cykli-------------------------------------------
   1739                static short CounterForTimer1s; 
   1740                if (CounterForTimer1s<1000)
   \                     ??Timer_1ms_3:
   \   00000106   0420               MOVS     R0,#+4
   \   00000108   285E               LDRSH    R0,[R5, R0]
   \   0000010A   FA21               MOVS     R1,#+250
   \   0000010C   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   0000010E   8842               CMP      R0,R1
   \   00000110   02DA               BGE      ??Timer_1ms_11
   1741                {
   1742                    CounterForTimer1s++;
   \   00000112   401C               ADDS     R0,R0,#+1
   \   00000114   A880               STRH     R0,[R5, #+4]
   \   00000116   03E0               B        ??Timer_1ms_12
   1743                }else{
   1744                    CounterForTimer1s=0;
   \                     ??Timer_1ms_11:
   \   00000118   0020               MOVS     R0,#+0
   \   0000011A   A880               STRH     R0,[R5, #+4]
   1745                    Timer_1s();
   \   0000011C   ........           BL       Timer_1s
   1746                }
   1747          
   1748          
   1749          
   1750            
   1751            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ TimeUnitQual
   1752            if (++CurTimeQual>=TimeUnitQual)
   \                     ??Timer_1ms_12:
   \   00000120   0220               MOVS     R0,#+2
   \   00000122   285E               LDRSH    R0,[R5, R0]
   \   00000124   401C               ADDS     R0,R0,#+1
   \   00000126   6880               STRH     R0,[R5, #+2]
   \   00000128   9621               MOVS     R1,#+150
   \   0000012A   8900               LSLS     R1,R1,#+2        ;; #+600
   \   0000012C   0004               LSLS     R0,R0,#+16
   \   0000012E   0014               ASRS     R0,R0,#+16
   \   00000130   8842               CMP      R0,R1
   \   00000132   2CDB               BLT      ??Timer_1ms_13
   1753            {
   1754              CurTimeQual=0;
   \   00000134   0026               MOVS     R6,#+0
   \   00000136   3000               MOVS     R0,R6
   \   00000138   6880               STRH     R0,[R5, #+2]
   1755              if (TransQuality.MensurIndex<32)
   \   0000013A   2348               LDR      R0,??Timer_1ms_0+0x34  ;; TransQuality
   \   0000013C   0178               LDRB     R1,[R0, #+0]
   \   0000013E   2029               CMP      R1,#+32
   \   00000140   02D2               BCS      ??Timer_1ms_14
   1756              {
   1757                TransQuality.MensurIndex++; 
   \   00000142   491C               ADDS     R1,R1,#+1
   \   00000144   0170               STRB     R1,[R0, #+0]
   \   00000146   01E0               B        ??Timer_1ms_15
   1758              }else{
   1759                TransQuality.MensurIndex=0;
   \                     ??Timer_1ms_14:
   \   00000148   3100               MOVS     R1,R6
   \   0000014A   0170               STRB     R1,[R0, #+0]
   1760              }
   1761              if (TransQuality.QuickMensurIndex<4)
   \                     ??Timer_1ms_15:
   \   0000014C   8178               LDRB     R1,[R0, #+2]
   \   0000014E   0429               CMP      R1,#+4
   \   00000150   02D2               BCS      ??Timer_1ms_16
   1762              {
   1763                TransQuality.QuickMensurIndex++; 
   \   00000152   491C               ADDS     R1,R1,#+1
   \   00000154   8170               STRB     R1,[R0, #+2]
   \   00000156   17E0               B        ??Timer_1ms_17
   1764              }else{
   1765                TransQuality.QuickMensurIndex=0;
   \                     ??Timer_1ms_16:
   \   00000158   3100               MOVS     R1,R6
   \   0000015A   8170               STRB     R1,[R0, #+2]
   1766              }
   1767          
   1768              for (char i=0; i<NumberNeurons; i++) 
   \   0000015C   14E0               B        ??Timer_1ms_17
   1769              {
   1770                TransQuality.Mensur[i] &= ~(0x1 << TransQuality.MensurIndex);
   \                     ??Timer_1ms_18:
   \   0000015E   8A00               LSLS     R2,R1,#+2
   \   00000160   8218               ADDS     R2,R0,R2
   \   00000162   D36C               LDR      R3,[R2, #+76]
   \   00000164   0124               MOVS     R4,#+1
   \   00000166   0578               LDRB     R5,[R0, #+0]
   \   00000168   AC40               LSLS     R4,R4,R5
   \   0000016A   A343               BICS     R3,R3,R4
   \   0000016C   D364               STR      R3,[R2, #+76]
   1771                TransQuality.QuickMensur[i] &= ~(0x1 << TransQuality.QuickMensurIndex);
   \   0000016E   4118               ADDS     R1,R0,R1
   \   00000170   2622               MOVS     R2,#+38
   \   00000172   0B00               MOVS     R3,R1
   \   00000174   2633               ADDS     R3,R3,#+38
   \   00000176   1B78               LDRB     R3,[R3, #+0]
   \   00000178   0124               MOVS     R4,#+1
   \   0000017A   8578               LDRB     R5,[R0, #+2]
   \   0000017C   AC40               LSLS     R4,R4,R5
   \   0000017E   A343               BICS     R3,R3,R4
   \   00000180   8B54               STRB     R3,[R1, R2]
   1772              }                 
   \   00000182   761C               ADDS     R6,R6,#+1
   \   00000184   3606               LSLS     R6,R6,#+24
   \   00000186   360E               LSRS     R6,R6,#+24
   \                     ??Timer_1ms_17:
   \   00000188   3100               MOVS     R1,R6
   \   0000018A   2329               CMP      R1,#+35
   \   0000018C   E7D3               BCC      ??Timer_1ms_18
   1773            }
   1774          
   1775            
   1776          
   1777                    
   1778                 
   1779          
   1780          
   1781          }//_____________________________________________________________________________
   \                     ??Timer_1ms_13:
   \   0000018E   F8BC               POP      {R3-R7}
   \   00000190   01BC               POP      {R0}
   \   00000192   0047               BX       R0               ;; return
   \                     ??Timer_1ms_0:
   \   00000194   A000FAFF           DC32     0xfffa00a0
   \   00000198   ........           DC32     DateTime
   \   0000019C   ........           DC32     ButtonBipCounter
   \   000001A0   34F4FFFF           DC32     0xfffff434
   \   000001A4   ........           DC32     g_SlaveConnect
   \   000001A8   ........           DC32     RF_Status
   \   000001AC   ........           DC32     g_RF_TimeOutCounter
   \   000001B0   33333333           DC32     0x33333333
   \   000001B4   3333D33F           DC32     0x3fd33333
   \   000001B8   C3F5285C           DC32     0x5c28f5c3
   \   000001BC   8FE28A40           DC32     0x408ae28f
   \   000001C0   00006940           DC32     0x40690000
   \   000001C4   00FF04C1           DC32     0xc104ff00
   \   000001C8   ........           DC32     TransQuality

   \                                 In section .bss, align 4
   \                     g_SlaveConnect:
   \   00000000                      DS8 1
   \                     g_Stop_Program:
   \   00000001                      DS8 1
   \                     CurTimeQual:
   \   00000002                      DS8 2
   \   00000004                      DS8 2
   \   00000006                      DS8 2
   \   00000008                      DS8 4

   \                                 In section .bss, align 8
   \                     NET:
   \   00000000                      DS8 448

   \                                 In section .bss, align 1
   \                     LightLCD_OFF_Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     LightLCD_OFF_Counter2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     LightLCD_OFF_Curent:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ReciveFrameToMe:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     tmp_i:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     licznik:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     licznik2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     licznik3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     memory:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     sss:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     int1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     sSetup:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     dState:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     memory_read:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??LastTemp:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     ??Hysteresis:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
   \                     XY_Tab:
   \   00000000                      DS8 44

   \                                 In section .bss, align 1
   \                     display_cykl:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     US0_Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     US1_Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   \                     CounterForTimer10ms:
   \   00000000                      DS8 1
   1782          
   1783          
   1784          
   1785          
   1786          
   1787          //-----------------------------------------------------------------------------
   1788          //!  Nazwa funkcji :    Timer_1_Setup
   1789          //!  Funkcja inicjalizacji Timer1 - 1ms
   1790          //-----------------------------------------------------------------------------
   1791          //! 
   1792          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1793          void Timer_1ms_Setup(void) 
   1794          { 
   1795            //TRACE_INFO("T2_setup");  
   1796            //TRACE_INFO("\n\r"); 
   1797            
   1798           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
   1799           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
   1800           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC2] = (unsigned int)Timer_1ms;  //set AIC             
   \                     Timer_1ms_Setup:
   \   00000000   1148               LDR      R0,??Timer_1ms_Setup_0  ;; 0xfffff0b8
   \   00000002   1249               LDR      R1,??Timer_1ms_Setup_0+0x4  ;; Timer_1ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1801           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC2] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_1mS_PRIOR ); 
   \   00000006   1248               LDR      R0,??Timer_1ms_Setup_0+0x8  ;; 0xfffff038
   \   00000008   0421               MOVS     R1,#+4
   \   0000000A   0160               STR      R1,[R0, #+0]
   1802           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC2);      //enable clock 
   \   0000000C   0803               LSLS     R0,R1,#+12
   \   0000000E   1149               LDR      R1,??Timer_1ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
   1803           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   1149               LDR      R1,??Timer_1ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
   1804           //no external clocks 
   1805           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   1049               LDR      R1,??Timer_1ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
   1806           AT91C_BASE_TC2->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   1049               LDR      R1,??Timer_1ms_Setup_0+0x18  ;; 0xfffa0080
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
   1807           AT91C_BASE_TC2->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0F49               LDR      R1,??Timer_1ms_Setup_0+0x1C  ;; 0xfffa0084
   \   00000026   104A               LDR      R2,??Timer_1ms_Setup_0+0x20  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
   1808           //clock: MCK/1024  = 48054841/ DIV
   1809           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
   1810           //! DIV5 - 1024
   1811           //! DIV4 - 128
   1812           //! DIV3 - 32
   1813           //! DIV2 - 8
   1814           
   1815           AT91C_BASE_TC2->TC_RC = 6007;                  //1ms  (z wyliczeñ 6007)
   \   0000002A   1049               LDR      R1,??Timer_1ms_Setup_0+0x24  ;; 0xfffa009c
   \   0000002C   104A               LDR      R2,??Timer_1ms_Setup_0+0x28  ;; 0x1777
   \   0000002E   0A60               STR      R2,[R1, #+0]
   1816           AT91C_BASE_TC2->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000030   1049               LDR      R1,??Timer_1ms_Setup_0+0x2C  ;; 0xfffa00a4
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
   1817           AT91C_BASE_TC2->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   1049               LDR      R1,??Timer_1ms_Setup_0+0x30  ;; 0xfffa00a8
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
   1818           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC2);       //enable int 
   \   0000003C   0F49               LDR      R1,??Timer_1ms_Setup_0+0x34  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
   1819           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC2);       //clear int 
   \   00000040   0F49               LDR      R1,??Timer_1ms_Setup_0+0x38  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
   1820          
   1821          
   1822          
   1823          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_1ms_Setup_0:
   \   00000048   B8F0FFFF           DC32     0xfffff0b8
   \   0000004C   ........           DC32     Timer_1ms
   \   00000050   38F0FFFF           DC32     0xfffff038
   \   00000054   10FCFFFF           DC32     0xfffffc10
   \   00000058   C000FAFF           DC32     0xfffa00c0
   \   0000005C   C400FAFF           DC32     0xfffa00c4
   \   00000060   8000FAFF           DC32     0xfffa0080
   \   00000064   8400FAFF           DC32     0xfffa0084
   \   00000068   01C00C00           DC32     0xcc001
   \   0000006C   9C00FAFF           DC32     0xfffa009c
   \   00000070   77170000           DC32     0x1777
   \   00000074   A400FAFF           DC32     0xfffa00a4
   \   00000078   A800FAFF           DC32     0xfffa00a8
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1824          
   1825          
   1826          
   1827          
   1828          
   1829          
   1830          
   1831          
   1832          
   1833          

   \                                 In section Debug.txt, align 4, keep-with-next
   1834          void RamToFlash(void)
   1835          {
   \                     RamToFlash:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1836                    //if (g_PC_Connected==0)
   1837                    //{
   1838                      DispWait=DispWaitOn; 
   \   00000002   2F4C               LDR      R4,??RamToFlash_0  ;; DispWait
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   2070               STRB     R0,[R4, #+0]
   1839                      Wait_Paint();
   \   00000008   ........           BL       Wait_Paint
   1840                    //} 
   1841                      gProg.Preambu=ProgPreambu;
   \   0000000C   2D4D               LDR      R5,??RamToFlash_0+0x4  ;; gProg
   \   0000000E   AA20               MOVS     R0,#+170
   \   00000010   2870               STRB     R0,[R5, #+0]
   1842                      gProg.ProgFormatTyp=_ProgFormatTyp;
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   6870               STRB     R0,[R5, #+1]
   \   00000016   2C48               LDR      R0,??RamToFlash_0+0x8  ;; 0xc670
   \   00000018   6880               STRH     R0,[R5, #+2]
   1843                      gProg.Size=sizeof(gProg);
   1844                      gProg.ModyfiData[0]='2';gProg.ModyfiData[1]='0';
   \   0000001A   3220               MOVS     R0,#+50
   \   0000001C   2871               STRB     R0,[R5, #+4]
   \   0000001E   3020               MOVS     R0,#+48
   \   00000020   6871               STRB     R0,[R5, #+5]
   1845                      CharToStr(DateTime.Year, &(gProg.ModyfiData[2]), 2); 
   \   00000022   2A4E               LDR      R6,??RamToFlash_0+0xC  ;; DateTime
   \   00000024   0222               MOVS     R2,#+2
   \   00000026   2900               MOVS     R1,R5
   \   00000028   891D               ADDS     R1,R1,#+6
   \   0000002A   3078               LDRB     R0,[R6, #+0]
   \   0000002C   ........           BL       CharToStr
   1846                      gProg.ModyfiData[4]='-';
   \   00000030   2D27               MOVS     R7,#+45
   \   00000032   2F72               STRB     R7,[R5, #+8]
   1847                      CharToStr(DateTime.Mounth, &(gProg.ModyfiData[5]), 2);
   \   00000034   0222               MOVS     R2,#+2
   \   00000036   2900               MOVS     R1,R5
   \   00000038   0931               ADDS     R1,R1,#+9
   \   0000003A   7078               LDRB     R0,[R6, #+1]
   \   0000003C   ........           BL       CharToStr
   1848                      gProg.ModyfiData[7]='-'; 
   \   00000040   EF72               STRB     R7,[R5, #+11]
   1849                      CharToStr(DateTime.Day, &(gProg.ModyfiData[8]), 2); 
   \   00000042   0222               MOVS     R2,#+2
   \   00000044   2900               MOVS     R1,R5
   \   00000046   0C31               ADDS     R1,R1,#+12
   \   00000048   B078               LDRB     R0,[R6, #+2]
   \   0000004A   ........           BL       CharToStr
   1850                      gProg.ModyfiData[10]=' ';
   \   0000004E   2020               MOVS     R0,#+32
   \   00000050   A873               STRB     R0,[R5, #+14]
   1851                      CharToStr(DateTime.Hour, &(gProg.ModyfiData[11]), 2); 
   \   00000052   0222               MOVS     R2,#+2
   \   00000054   2900               MOVS     R1,R5
   \   00000056   0F31               ADDS     R1,R1,#+15
   \   00000058   F078               LDRB     R0,[R6, #+3]
   \   0000005A   ........           BL       CharToStr
   1852                      gProg.ModyfiData[13]=':';
   \   0000005E   3A27               MOVS     R7,#+58
   \   00000060   6F74               STRB     R7,[R5, #+17]
   1853                      CharToStr(DateTime.Minute, &(gProg.ModyfiData[14]), 2); 
   \   00000062   0222               MOVS     R2,#+2
   \   00000064   2900               MOVS     R1,R5
   \   00000066   1231               ADDS     R1,R1,#+18
   \   00000068   3079               LDRB     R0,[R6, #+4]
   \   0000006A   ........           BL       CharToStr
   1854                      gProg.ModyfiData[16]=':';
   \   0000006E   2F75               STRB     R7,[R5, #+20]
   1855                      CharToStr(DateTime.Second, &(gProg.ModyfiData[17]), 2); 
   \   00000070   0222               MOVS     R2,#+2
   \   00000072   2900               MOVS     R1,R5
   \   00000074   1531               ADDS     R1,R1,#+21
   \   00000076   7079               LDRB     R0,[R6, #+5]
   \   00000078   ........           BL       CharToStr
   1856                      for (char i=0; i<19; i++) if (gProg.ModyfiData[i]==0) gProg.ModyfiData[i]='0';
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   08E0               B        ??RamToFlash_1
   \                     ??RamToFlash_2:
   \   00000080   6918               ADDS     R1,R5,R1
   \   00000082   0A79               LDRB     R2,[R1, #+4]
   \   00000084   002A               CMP      R2,#+0
   \   00000086   01D1               BNE      ??RamToFlash_3
   \   00000088   3022               MOVS     R2,#+48
   \   0000008A   0A71               STRB     R2,[R1, #+4]
   \                     ??RamToFlash_3:
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   0006               LSLS     R0,R0,#+24
   \   00000090   000E               LSRS     R0,R0,#+24
   \                     ??RamToFlash_1:
   \   00000092   0100               MOVS     R1,R0
   \   00000094   1329               CMP      R1,#+19
   \   00000096   F3D3               BCC      ??RamToFlash_2
   1857          
   1858                        unsigned int Save = __get_interrupt_state();            
   \   00000098   ........           BL       __iar_get_interrupt_state
   \   0000009C   0700               MOVS     R7,R0
   1859                        __disable_interrupt();
   \   0000009E   ........           BL       __iar_disable_interrupt
   1860                        //CleanFlash(AT91C_IFLASH_MEM->FlashProgram,sizeof(gProg));
   1861                        FlashWrite((char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset), (char*)&gProg,sizeof(gProg)); //(char *ptrMem, char *value, int length)
                               ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   000000A2   094A               LDR      R2,??RamToFlash_0+0x8  ;; 0xc670
   \   000000A4   2900               MOVS     R1,R5
   \   000000A6   B06C               LDR      R0,[R6, #+72]
   \   000000A8   094B               LDR      R3,??RamToFlash_0+0x10  ;; 0x130100
   \   000000AA   1818               ADDS     R0,R3,R0
   \   000000AC   ........           BL       FlashWrite
   1862                        //at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,(char*)&gProg,sizeof(gProg));
   1863                        __set_interrupt_state(Save);
   \   000000B0   3800               MOVS     R0,R7
   \   000000B2   ........           BL       __iar_set_interrupt_state
   1864          
   1865           DispWait=DispWaitOff; 
   \   000000B6   0420               MOVS     R0,#+4
   \   000000B8   2070               STRB     R0,[R4, #+0]
   1866          
   1867          
   1868          
   1869          }
   \   000000BA   F8BC               POP      {R3-R7}
   \   000000BC   01BC               POP      {R0}
   \   000000BE   0047               BX       R0               ;; return
   \                     ??RamToFlash_0:
   \   000000C0   ........           DC32     DispWait
   \   000000C4   ........           DC32     gProg
   \   000000C8   70C60000           DC32     0xc670
   \   000000CC   ........           DC32     DateTime
   \   000000D0   00011300           DC32     0x130100
   1870          
   1871          
   1872          
   1873          
   1874          

   \                                 In section .bss, align 4
   1875          int testcount=0;
   \                     testcount:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
   1876          void TestHendel(void)
   1877          {
   \                     TestHendel:
   \   00000000   01B5               PUSH     {R0,LR}
   1878            AT91F_PIO_GetInterruptStatus(AT91C_PIO_VBUS);
   \   00000002   0748               LDR      R0,??TestHendel_0  ;; 0xfffff400
   \   00000004   ........           BL       AT91F_PIO_GetInterruptStatus
   1879            if ((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) testcount++;
   \   00000008   0648               LDR      R0,??TestHendel_0+0x4  ;; 0xfffff43c
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8007               LSLS     R0,R0,#+30
   \   0000000E   03D5               BPL      ??TestHendel_1
   \   00000010   0548               LDR      R0,??TestHendel_0+0x8  ;; testcount
   \   00000012   0168               LDR      R1,[R0, #+0]
   \   00000014   491C               ADDS     R1,R1,#+1
   \   00000016   0160               STR      R1,[R0, #+0]
   1880              
   1881          
   1882          }
   \                     ??TestHendel_1:
   \   00000018   08BC               POP      {R3}
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
   \   0000001E   C046               Nop      
   \                     ??TestHendel_0:
   \   00000020   00F4FFFF           DC32     0xfffff400
   \   00000024   3CF4FFFF           DC32     0xfffff43c
   \   00000028   ........           DC32     testcount
   1883          
   1884          

   \                                 In section Debug.txt, align 4, keep-with-next
   1885          void TestInit(void)
   1886          {
   \                     TestInit:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   1887          //#ifndef USB_BUS_POWERED
   1888              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   00000002   154C               LDR      R4,??TestInit_0  ;; 0xfffff400
   \   00000004   0221               MOVS     R1,#+2
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       AT91F_PIO_CfgInput
   1889              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   0000000C   1348               LDR      R0,??TestInit_0+0x4  ;; 0xfffff460
   \   0000000E   0221               MOVS     R1,#+2
   \   00000010   0160               STR      R1,[R0, #+0]
   1890              
   1891              // Configure VBus monitoring
   1892                  AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, 1 << AT91C_ID_VBUS);
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   1248               LDR      R0,??TestInit_0+0x8  ;; 0xfffffc00
   \   00000016   ........           BL       AT91F_PMC_EnablePeriphClock
   1893              AT91F_PIO_CfgPullup(AT91C_PIO_VBUS, ~AT91C_VBUS);
   \   0000001A   0221               MOVS     R1,#+2
   \   0000001C   C943               MVNS     R1,R1            ;; #-3
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       AT91F_PIO_CfgPullup
   1894              AT91F_PIO_CfgInput(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000024   0221               MOVS     R1,#+2
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       AT91F_PIO_CfgInput
   1895          
   1896              // Configure and enable the Vbus detection interrupt
   1897              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
   1898                                    AT91C_ID_VBUS,
   1899                                    5, //AT91C_AIC_PRIOR_LOWEST,
   1900                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
   1901                                    ISR_VBus);
   \   0000002C   0D4D               LDR      R5,??TestInit_0+0xC  ;; 0xfffff000
   \   0000002E   82B0               SUB      SP,SP,#+8
   \   00000030   0D48               LDR      R0,??TestInit_0+0x10  ;; ISR_VBus
   \   00000032   0090               STR      R0,[SP, #+0]
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   0522               MOVS     R2,#+5
   \   00000038   0221               MOVS     R1,#+2
   \   0000003A   2800               MOVS     R0,R5
   \   0000003C   ........           BL       AT91F_AIC_ConfigureIt
   \   00000040   02B0               ADD      SP,SP,#+8
   1902          
   1903              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   2000               MOVS     R0,R4
   \   00000046   ........           BL       AT91F_PIO_InterruptEnable
   1904              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
   \   0000004A   0221               MOVS     R1,#+2
   \   0000004C   2800               MOVS     R0,R5
   \   0000004E   ........           BL       AT91F_AIC_EnableIt
   1905          }
   \   00000052   38BC               POP      {R3-R5}
   \   00000054   01BC               POP      {R0}
   \   00000056   0047               BX       R0               ;; return
   \                     ??TestInit_0:
   \   00000058   00F4FFFF           DC32     0xfffff400
   \   0000005C   60F4FFFF           DC32     0xfffff460
   \   00000060   00FCFFFF           DC32     0xfffffc00
   \   00000064   00F0FFFF           DC32     0xfffff000
   \   00000068   ........           DC32     ISR_VBus
   1906          
   1907          
   1908          
   1909          
   1910          
   1911          
   1912          //------------------------------------------------------------------------------
   1913          //!          Main
   1914          //------------------------------------------------------------------------------
   1915          
   1916          //char ekran_tab[8][128]; 
   1917          

   \                                 In section .bss, align 4
   1918          char string[25];
   \                     string:
   \   00000000                      DS8 28
   1919          

   \                                 In section Debug.txt, align 4, keep-with-next
   1920          void watchdogEnable(int millis)
   1921          {
   \                     watchdogEnable:
   \   00000000   01B5               PUSH     {R0,LR}
   1922            int period = (millis * 256) / 1000;
   \   00000002   0002               LSLS     R0,R0,#+8
   \   00000004   FA21               MOVS     R1,#+250
   \   00000006   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000008   ........           BL       __aeabi_idivmod
   1923            AT91C_BASE_WDTC->WDTC_WDMR =  AT91C_WDTC_WDRSTEN |        // enable reset on timeout
   1924                                          AT91C_WDTC_WDDBGHLT |       // respect debug mode
   1925                                          AT91C_WDTC_WDIDLEHLT |      // respect idle mode
   1926                                          ((period << 16 ) & AT91C_WDTC_WDD) | // delta is as wide as the period, so we can restart anytime
   1927                                          (period & AT91C_WDTC_WDV);  // set the period
   \   0000000C   0649               LDR      R1,??watchdogEnable_0  ;; 0xfffffd44
   \   0000000E   0204               LSLS     R2,R0,#+16
   \   00000010   064B               LDR      R3,??watchdogEnable_0+0x4  ;; 0xfff0000
   \   00000012   1340               ANDS     R3,R3,R2
   \   00000014   0005               LSLS     R0,R0,#+20
   \   00000016   000D               LSRS     R0,R0,#+20
   \   00000018   1843               ORRS     R0,R0,R3
   \   0000001A   054A               LDR      R2,??watchdogEnable_0+0x8  ;; 0x30002000
   \   0000001C   0243               ORRS     R2,R2,R0
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1928          }
   \   00000020   08BC               POP      {R3}
   \   00000022   01BC               POP      {R0}
   \   00000024   0047               BX       R0               ;; return
   \   00000026   C046               Nop      
   \                     ??watchdogEnable_0:
   \   00000028   44FDFFFF           DC32     0xfffffd44
   \   0000002C   0000FF0F           DC32     0xfff0000
   \   00000030   00200030           DC32     0x30002000

   \                                 In section .data, align 8
   \                     DateTime:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     Speaker:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     g_PC_Connected:
   \   0000000C   00                 DC8 0
   \                     g_LightLCDEnable:
   \   0000000D   00                 DC8 0
   \                     g_ScreenSever_On:
   \   0000000E   00                 DC8 0
   \                     g_ScreenSever_Time_On:
   \   0000000F   00                 DC8 0
   \                     g_ScreenSever_Time_Off:
   \   00000010   00                 DC8 0
   \                     g_NeedPass:
   \   00000011   00                 DC8 0
   \                     AlarmOn:
   \   00000012   00                 DC8 0
   \                     WypMaxJasnosci:
   \   00000013   00                 DC8 0
   \                     WypMinJasnosci:
   \   00000014   00                 DC8 0
   \                     gWypMinJasnosciTest:
   \   00000015   00                 DC8 0
   \                     SlaveMode:
   \   00000016   00                 DC8 0
   \                     ForwardUSB2Serialferst:
   \   00000017   00                 DC8 0
   \                     FlagChangeTime:
   \   00000018   00                 DC8 0
   \   00000019   00                 DC8 0
   \   0000001A   64                 DC8 100
   \   0000001B   00                 DC8 0
   \                     g_Password_1:
   \   0000001C   3131313100         DC8 "1111"
   \   00000021   000000             DC8 0, 0, 0
   \                     Y_down:
   \   00000024   FFFF               DC16 -1
   \                     X_down:
   \   00000026   FFFF               DC16 -1
   \                     Y_up:
   \   00000028   FFFF               DC16 -1
   \                     X_up:
   \   0000002A   FFFF               DC16 -1
   \   0000002C   00000000           DC8 0, 0, 0, 0
   \                     g_counter:
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     g_NextTimeProgram:
   \   00000038   000000000000       DC32 0, 0
   \              0000        
   \                     FuseLastWiFiDataIn:
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     FlashProgramOfset:
   \   00000048   00010000           DC32 256
   \                     g_seconds_counter:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     g_LightCouterLCD:
   \   00000050   00000000           DC32 0
   \                     pAT91C_IFLASH_MEM:
   \   00000054   00001300           DC32 130000H
   \                     SourRam:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     siz:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     LiczOds:
   \   00000060   00000000           DC32 0
   \                     CyklPerSekCount:
   \   00000064   00000000           DC32 0
   \                     TransLoopTime:
   \   00000068   00000000           DC32 0
   \                     CyklPerSek:
   \   0000006C   01000000           DC32 1
   \                     MenuLevel_old:
   \   00000070   00000000           DC8 0, 0, 0, 0
   \   00000074   00000000           DC8 0, 0, 0, 0
   1929          
   1930          
   1931          
   1932          
   1933          
   1934          
   1935          
   1936          
   1937          
   1938          
   1939          #define WATCHDOG_KEY (0xA5 << 24)
   1940          
   1941          char TimeCompil[]= __TIME__;
   1942          char DateCompil[]= __DATE__;
   1943          
   1944          extern  char VBUS_old;
   1945          
   1946          
   1947          #ifdef _LIVE_RJESTR 
   1948          int LIVE_TAB_IDX=0;  
   1949          unsigned short LIVE_TAB[LIVE_TAB_SIZE];  //   | A-Odczyt, B-potwierdzenie odczytu, C-Zapis F-flaga priorytetu | Nr wêz³a |  wartoœæ | | 
   1950          #endif
   1951             
   1952          
   1953          AT91PS_MEM FLASH;  
   \                     FLASH:
   \   00000078   00000000           DC8 0, 0, 0, 0
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000200   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000210   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000220   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000230   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000240   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000250   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000260   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000270   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000280   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000290   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000300   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000310   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000320   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000330   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000340   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000350   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000360   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000370   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000380   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000390   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000400   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000410   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000420   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000430   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000440   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000450   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000460   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000470   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000480   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000490   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000500   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In section .data, align 4
   \                     FlashProgramReserveOfset:
   \   00000000   D8D70000           DC32 55256

   \                                 In section .data, align 4
   \                     g_Password_2:
   \   00000000   3232323200         DC8 "2222"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .data, align 1
   \                     AdressModbus:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 1
   \                     g_Restart_Program:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 8
   \                     AlarmScreenAction:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     out:
   \   00000010   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
   \              010101010000
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In section .data, align 4
   \                     pEndpoints:
   \   00000000   000000000000       DC32 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000020   01000000           DC8 1, 0, 0, 0
   \   00000024   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000048   02000000           DC8 2, 0, 0, 0
   \   0000004C   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000070   02000000           DC8 2, 0, 0, 0
   \   00000074   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000098   01000000           DC8 1, 0, 0, 0
   \   0000009C   00000000           DC32 0

   \                                 In section .data, align 4
   \                     tProgramTabSize:
   \   00000000   70C60000           DC32 50800

   \                                 In section .data, align 4
   \                     stop:
   \   00000000   D0070000           DC32 2000

   \                                 In section .data, align 4
   \                     ??Out:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   30D81300           DC32 13D830H

   \                                 In section .data, align 4
   \                     X_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     X_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 1
   \                     g_PC_Connected_timeout:
   \   00000000   05                 DC8 5

   \                                 In section .data, align 4
   \                     TimeCompil:
   \   00000000   30373A35333A       DC8 "07:53:44"
   \              343400      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .data, align 4
   \                     DateCompil:
   \   00000000   4D6172203230       DC8 "Mar 20 2013"
   \              203230313300
   1954          

   \                                 In section Debug.txt, align 4, keep-with-next
   1955          void main()
   1956          {
   \                     main:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1957              FLASH=AT91C_IFLASH_MEM;  
   \   00000002   A04C               LDR      R4,??main_0      ;; DateTime
   \   00000004   9820               MOVS     R0,#+152
   \   00000006   4003               LSLS     R0,R0,#+13       ;; #+1245184
   \   00000008   A067               STR      R0,[R4, #+120]
   1958            
   1959              LCD_INIT();
   \   0000000A   ........           BL       AT91F_LCD_Init
   1960              Init_LCD_TS();           //inicjalizacja Touchpanel`a
   \   0000000E   ........           BL       Init_LCD_TS
   1961              CheckLCD();
   \   00000012   ........           BL       CheckLCD
   1962              
   1963              CleanCanvas(); 
   \   00000016   ........           BL       CleanCanvas
   1964              MenuPaint();    
   \   0000001A   ........           BL       MenuPaint
   1965              RepaintLCD();
   \   0000001E   ........           BL       RepaintLCD
   1966              RepaintLCD();     
   \   00000022   ........           BL       RepaintLCD
   \   00000026   9848               LDR      R0,??main_0+0x4  ;; RF_Status
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   0170               STRB     R1,[R0, #+0]
   1967            
   1968              RF_Status.Init=1;
   1969              
   1970              
   1971              AT91F_PIO_CfgOutput(AT91C_BASE_PIOA, SpeakerPin);
                                                          ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000002C   8025               MOVS     R5,#+128
   \   0000002E   2D06               LSLS     R5,R5,#+24       ;; #-2147483648
   \   00000030   2900               MOVS     R1,R5
   \   00000032   9648               LDR      R0,??main_0+0x8  ;; 0xfffff400
   \   00000034   ........           BL       AT91F_PIO_CfgOutput
   1972              AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000038   9548               LDR      R0,??main_0+0xC  ;; 0xfffff434
   \   0000003A   0560               STR      R5,[R0, #+0]
   1973              
   1974              //uruchomienie Watchdog`a na 60s 
   1975              /*watchdogEnable(60000);  
   1976              AT91F_WDTRestart(AT91C_BASE_WDTC);
   1977              AT91C_BASE_WDTC->WDTC_WDMR=(unsigned int) AT91C_WDTC_WDV|AT91C_WDTC_WDRSTEN | AT91C_WDTC_WDD|0x0<<15;
   1978          
   1979              AT91C_BASE_WDTC->WDTC_WDMR=AT91C_WDTC_WDDIS; 
   1980              */
   1981             
   1982              
   1983              SpiMaster_Init();
   \   0000003C   ........           BL       SpiMaster_Init
   1984              
   1985              __enable_interrupt(); 
   \   00000040   ........           BL       __iar_enable_interrupt
   1986          
   1987             InitRTC();  
   \   00000044   ........           BL       InitRTC
   1988              GetDateTimeFromRTC(); 
   \   00000048   ........           BL       GetDateTimeFromRTC
   1989           
   1990              InitFramework();
   \   0000004C   ........           BL       InitFramework
   1991          
   1992              SER_Init(&sSer, &sUsb);  // Initialize the serial driver
   \   00000050   904F               LDR      R7,??main_0+0x10  ;; sUsb
   \   00000052   3900               MOVS     R1,R7
   \   00000054   2000               MOVS     R0,R4
   \   00000056   7C30               ADDS     R0,R0,#+124
   \   00000058   ........           BL       SER_Init
   1993          
   1994              InitFlash();  
   \   0000005C   ........           BL       InitFlash
   1995            
   1996              
   1997              Init_LCD_Light_PWM(WypMaxJasnosci);
                     ^
Warning[Pe223]: function "Init_LCD_Light_PWM" declared implicitly
   \   00000060   E07C               LDRB     R0,[R4, #+19]
   \   00000062   ........           BL       Init_LCD_Light_PWM
   1998              
   1999              __enable_interrupt();    
   \   00000066   ........           BL       __iar_enable_interrupt
   2000           
   2001            
   2002                
   2003              #ifndef _DEBUG_
   2004              //******************************************************************************
   2005              //Ustawienia dla pierwszego uruchomienia starownika ****************************
   2006                if (pAT91C_IFLASH_MEM->Config.FerstRun!=0x0A)
   \   0000006A   8B48               LDR      R0,??main_0+0x14  ;; 0xd7e7
   \   0000006C   616D               LDR      R1,[R4, #+84]
   \   0000006E   085C               LDRB     R0,[R1, R0]
   \   00000070   0A28               CMP      R0,#+10
   \   00000072   0FD0               BEQ      ??main_1
   2007                {
   2008                  char WriteTmp;
   2009                 //zapis ustawieñ do flasha 
   2010                
   2011                 unsigned int Save = __get_interrupt_state();            
   \   00000074   ........           BL       __iar_get_interrupt_state
   \   00000078   0500               MOVS     R5,R0
   2012                 __disable_interrupt();
   \   0000007A   ........           BL       __iar_disable_interrupt
   2013                     //uruchomiono sterownik  
   2014                     WriteTmp=0xA;    FlashWrite((char*)&(AT91C_IFLASH_MEM->Config.FerstRun),&WriteTmp,1);
                                             ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   0000007E   6846               MOV      R0,SP
   \   00000080   0A21               MOVS     R1,#+10
   \   00000082   0170               STRB     R1,[R0, #+0]
   \   00000084   0122               MOVS     R2,#+1
   \   00000086   6946               MOV      R1,SP
   \   00000088   CA48               LDR      R0,??main_2      ;; 0x13d7e7
   \   0000008A   ........           BL       FlashWrite
   2015                 __set_interrupt_state(Save);
   \   0000008E   2800               MOVS     R0,R5
   \   00000090   ........           BL       __iar_set_interrupt_state
   \                     ??main_1:
   \   00000094   C848               LDR      R0,??main_2+0x4  ;; gProg
   2016            
   2017          
   2018                  }
   2019              #endif 
   2020           
   2021               
   2022                
   2023              //Koniec ustawieñ dla pierwszego uruchomienia starownika ***********************
   2024              //******************************************************************************
   2025          
   2026              ProgramChangeExecute(&gProg); 
   \   00000096   ........           BL       ProgramChangeExecute
   2027              ThermostatsTimeChartExecute();
   \   0000009A   ........           BL       ThermostatsTimeChartExecute
   2028              
   2029              
   2030           //   US0_init();                                                                //inicjalizacja USART0
   2031             
   2032          #ifdef __WIFI_MODULE    
   2033              US1_init();                                                                 //inicjalizacja USART1
   \   0000009E   ........           BL       US1_init
   2034          #endif
   2035              
   2036           //   Timer_10us_Setup();
   2037              Timer_1ms_Setup();
   \   000000A2   ........           BL       Timer_1ms_Setup
   2038              Timer_10ms_Setup();
   \   000000A6   ........           BL       Timer_10ms_Setup
   \   000000AA   0020               MOVS     R0,#+0
   \   000000AC   C349               LDR      R1,??main_2+0x8  ;; 0xefffff
   \   000000AE   01E0               B        ??main_3
   2039              
   2040              //Timer_1s();   
   2041                
   2042              for (int aaa=0; aaa<0xEFFFFF; aaa++)
   2043                      {
   2044                        asm( "nop" );
   \                     ??main_4:
   \   000000B0   C046               nop              
   2045                      }       
   \   000000B2   401C               ADDS     R0,R0,#+1
   \                     ??main_3:
   \   000000B4   8842               CMP      R0,R1
   \   000000B6   FBDB               BLT      ??main_4
   2046          
   2047              g_ScreenSever_On=pAT91C_IFLASH_MEM->Config.ScreenSever_On;
   \   000000B8   C148               LDR      R0,??main_2+0xC  ;; 0xd7e6
   \   000000BA   616D               LDR      R1,[R4, #+84]
   \   000000BC   0818               ADDS     R0,R1,R0
   \   000000BE   0179               LDRB     R1,[R0, #+4]
   \   000000C0   A173               STRB     R1,[R4, #+14]
   2048              g_ScreenSever_Time_On=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_On;
   \   000000C2   4179               LDRB     R1,[R0, #+5]
   \   000000C4   E173               STRB     R1,[R4, #+15]
   2049              g_ScreenSever_Time_Off=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_Off;
   \   000000C6   8179               LDRB     R1,[R0, #+6]
   \   000000C8   2174               STRB     R1,[R4, #+16]
   2050              
   2051          
   2052          
   2053          
   2054              
   2055              
   2056           
   2057          //uruchomienie RF
   2058              
   2059              //odczyt kanalu z flasha ------------------------------ 
   2060              
   2061              SlaveMode=pAT91C_IFLASH_MEM->Config.SlaveMode;
   \   000000CA   8178               LDRB     R1,[R0, #+2]
   \   000000CC   A175               STRB     R1,[R4, #+22]
   2062              RF_Status.Ch=pAT91C_IFLASH_MEM->Config.RF_channel;
   \   000000CE   0078               LDRB     R0,[R0, #+0]
   \   000000D0   BC49               LDR      R1,??main_2+0x10  ;; RF_Status + 13
   \   000000D2   0870               STRB     R0,[R1, #+0]
   2063              if (RF_Status.Ch==0) RF_Status.Ch=1;
   \   000000D4   0028               CMP      R0,#+0
   \   000000D6   02D1               BNE      ??main_5
   \   000000D8   BA48               LDR      R0,??main_2+0x10  ;; RF_Status + 13
   \   000000DA   0121               MOVS     R1,#+1
   \   000000DC   0170               STRB     R1,[R0, #+0]
   2064              
   2065              
   2066              InitPioInterrupt();
                     ^
Warning[Pe223]: function "InitPioInterrupt" declared implicitly
   \                     ??main_5:
   \   000000DE   ........           BL       InitPioInterrupt
   2067              
   2068              RF_Init();
   \   000000E2   ........           BL       RF_Init
   2069              
   2070              
   2071              char InitRF=1;
   \   000000E6   0125               MOVS     R5,#+1
   \   000000E8   04E0               B        ??main_6
   2072              
   2073              while (InitRF==1)
   2074              { 
   2075                  InitRF=RF_Status.Init;
   \                     ??main_7:
   \   000000EA   6748               LDR      R0,??main_0+0x4  ;; RF_Status
   \   000000EC   0578               LDRB     R5,[R0, #+0]
   2076                  Delay(0x1);
   \   000000EE   0120               MOVS     R0,#+1
   \   000000F0   ........           BL       Delay
   2077              };
   \                     ??main_6:
   \   000000F4   012D               CMP      R5,#+1
   \   000000F6   F8D0               BEQ      ??main_7
   2078          
   2079              
   2080          
   2081              //sprawdzenie kana³u transmisji radiowej
   2082              if (!SlaveMode) //je¿eli master
   \   000000F8   A07D               LDRB     R0,[R4, #+22]
   \   000000FA   0028               CMP      R0,#+0
   \   000000FC   66D1               BNE      ??main_8
   2083              {
   2084                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   000000FE   A026               MOVS     R6,#+160
   \   00000100   3602               LSLS     R6,R6,#+8        ;; #+40960
   \   00000102   0221               MOVS     R1,#+2
   \   00000104   0D00               MOVS     R5,R1
   \   00000106   AF48               LDR      R0,??main_2+0x10  ;; RF_Status + 13
   \   00000108   0078               LDRB     R0,[R0, #+0]
   \   0000010A   ........           BL       __aeabi_ui2d
   \   0000010E   0200               MOVS     R2,R0
   \   00000110   0B00               MOVS     R3,R1
   \   00000112   AD48               LDR      R0,??main_2+0x14  ;; 0x33333333
   \   00000114   AD49               LDR      R1,??main_2+0x18  ;; 0x3fd33333
   \   00000116   ........           BL       __aeabi_dmul
   \   0000011A   0200               MOVS     R2,R0
   \   0000011C   0B00               MOVS     R3,R1
   \   0000011E   AC48               LDR      R0,??main_2+0x1C  ;; 0x5c28f5c3
   \   00000120   AC49               LDR      R1,??main_2+0x20  ;; 0x408ae28f
   \   00000122   ........           BL       __aeabi_dadd
   \   00000126   0200               MOVS     R2,R0
   \   00000128   0B00               MOVS     R3,R1
   \   0000012A   0020               MOVS     R0,#+0
   \   0000012C   AA49               LDR      R1,??main_2+0x24  ;; 0x40690000
   \   0000012E   ........           BL       __aeabi_dmul
   \   00000132   0200               MOVS     R2,R0
   \   00000134   0B00               MOVS     R3,R1
   \   00000136   0020               MOVS     R0,#+0
   \   00000138   A849               LDR      R1,??main_2+0x28  ;; 0xc104ff00
   \   0000013A   ........           BL       __aeabi_dadd
   \   0000013E   ........           BL       __aeabi_d2iz
   \   00000142   0004               LSLS     R0,R0,#+16
   \   00000144   0014               ASRS     R0,R0,#+16
   \   00000146   3043               ORRS     R0,R0,R6
   \   00000148   2900               MOVS     R1,R5
   \   0000014A   ........           BL       SPI_SendWord
   2085                  RF_Status.EnableRX();
   \   0000014E   A448               LDR      R0,??main_2+0x2C  ;; RF_Status + 28
   \   00000150   0068               LDR      R0,[R0, #+0]
   \   00000152   ........           BL       __iar_via_R0
   2086                  Delay(0x100000);
   \   00000156   E804               LSLS     R0,R5,#+19
   \   00000158   ........           BL       Delay
   \   0000015C   26E0               B        ??main_9
   2087                  while (RF_CheckChannel())                                                                                            
   2088                  {
   2089                    
   2090                      if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   \                     ??main_10:
   \   0000015E   9948               LDR      R0,??main_2+0x10  ;; RF_Status + 13
   \   00000160   0121               MOVS     R1,#+1
   \   00000162   0170               STRB     R1,[R0, #+0]
   2091                      SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   \                     ??main_11:
   \   00000164   9748               LDR      R0,??main_2+0x10  ;; RF_Status + 13
   \   00000166   0078               LDRB     R0,[R0, #+0]
   \   00000168   ........           BL       __aeabi_ui2d
   \   0000016C   0200               MOVS     R2,R0
   \   0000016E   0B00               MOVS     R3,R1
   \   00000170   9548               LDR      R0,??main_2+0x14  ;; 0x33333333
   \   00000172   9649               LDR      R1,??main_2+0x18  ;; 0x3fd33333
   \   00000174   ........           BL       __aeabi_dmul
   \   00000178   0200               MOVS     R2,R0
   \   0000017A   0B00               MOVS     R3,R1
   \   0000017C   9448               LDR      R0,??main_2+0x1C  ;; 0x5c28f5c3
   \   0000017E   9549               LDR      R1,??main_2+0x20  ;; 0x408ae28f
   \   00000180   ........           BL       __aeabi_dadd
   \   00000184   0200               MOVS     R2,R0
   \   00000186   0B00               MOVS     R3,R1
   \   00000188   0020               MOVS     R0,#+0
   \   0000018A   9349               LDR      R1,??main_2+0x24  ;; 0x40690000
   \   0000018C   ........           BL       __aeabi_dmul
   \   00000190   0200               MOVS     R2,R0
   \   00000192   0B00               MOVS     R3,R1
   \   00000194   0020               MOVS     R0,#+0
   \   00000196   9149               LDR      R1,??main_2+0x28  ;; 0xc104ff00
   \   00000198   ........           BL       __aeabi_dadd
   \   0000019C   ........           BL       __aeabi_d2iz
   \   000001A0   0004               LSLS     R0,R0,#+16
   \   000001A2   0014               ASRS     R0,R0,#+16
   \   000001A4   3043               ORRS     R0,R0,R6
   \   000001A6   2900               MOVS     R1,R5
   \   000001A8   ........           BL       SPI_SendWord
   \                     ??main_9:
   \   000001AC   ........           BL       RF_CheckChannel
   \   000001B0   0028               CMP      R0,#+0
   \   000001B2   07D0               BEQ      ??main_12
   \   000001B4   8348               LDR      R0,??main_2+0x10  ;; RF_Status + 13
   \   000001B6   0078               LDRB     R0,[R0, #+0]
   \   000001B8   2728               CMP      R0,#+39
   \   000001BA   D0D2               BCS      ??main_10
   \   000001BC   8149               LDR      R1,??main_2+0x10  ;; RF_Status + 13
   \   000001BE   401C               ADDS     R0,R0,#+1
   \   000001C0   0870               STRB     R0,[R1, #+0]
   \   000001C2   CFE7               B        ??main_11
   2092                  }  
   2093                  RF_Status.MasterMode=1;
   \                     ??main_12:
   \   000001C4   8748               LDR      R0,??main_2+0x30  ;; RF_Status + 12
   \   000001C6   0121               MOVS     R1,#+1
   \   000001C8   0170               STRB     R1,[R0, #+0]
   \   000001CA   0DE0               B        ??main_13
   2094              }else{  //je¿eli slave
   2095                
   2096                /*
   2097                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   2098                  RF_Status.EnableRX();
   2099                  Delay(0x100000);
   2100                  while (RF_CheckChannel())                                                                                            
   2101                  {
   2102                    
   2103                      if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   2104                      SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   2105                  }  
   2106                */
   2107                
   2108                  RF_Status.ChSlave=1;
   \                     ??main_8:
   \   000001CC   8648               LDR      R0,??main_2+0x34  ;; RF_Status + 14
   \   000001CE   0121               MOVS     R1,#+1
   \   000001D0   0170               STRB     R1,[R0, #+0]
   2109                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   000001D2   0221               MOVS     R1,#+2
   \   000001D4   8548               LDR      R0,??main_2+0x38  ;; 0xa07c
   \   000001D6   ........           BL       SPI_SendWord
   2110                  RF_Status.MasterMode=0;  
   \   000001DA   8248               LDR      R0,??main_2+0x30  ;; RF_Status + 12
   \   000001DC   0021               MOVS     R1,#+0
   \   000001DE   0170               STRB     R1,[R0, #+0]
   2111                  RF_Status.EnableRX();
   \   000001E0   7F48               LDR      R0,??main_2+0x2C  ;; RF_Status + 28
   \   000001E2   0068               LDR      R0,[R0, #+0]
   \   000001E4   ........           BL       __iar_via_R0
   2112              }
   2113          
   2114              RF_Status.AllReady=1;
   \                     ??main_13:
   \   000001E8   8148               LDR      R0,??main_2+0x3C  ;; RF_Status + 15
   \   000001EA   0121               MOVS     R1,#+1
   \   000001EC   0170               STRB     R1,[R0, #+0]
   2115              
   2116              
   2117              
   2118          
   2119              
   2120              
   2121              
   2122              //odczyt has³a------------------------------------------    
   2123              if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEC)
   \   000001EE   606D               LDR      R0,[R4, #+84]
   \   000001F0   8049               LDR      R1,??main_2+0x40  ;; 0xd7dc
   \   000001F2   4118               ADDS     R1,R0,R1
   \   000001F4   0A78               LDRB     R2,[R1, #+0]
   \   000001F6   EC2A               CMP      R2,#+236
   \   000001F8   0ED1               BNE      ??main_14
   2124              {//je¿eli nie wymagane has³o
   2125               g_NeedPass=0; 
   \   000001FA   0021               MOVS     R1,#+0
   \   000001FC   6174               STRB     R1,[R4, #+17]
   2126               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   000001FE   7E4D               LDR      R5,??main_2+0x44  ;; 0xd7dd
   \                     ??main_15:
   \   00000200   0A00               MOVS     R2,R1
   \   00000202   082A               CMP      R2,#+8
   \   00000204   33D2               BCS      ??main_16
   \   00000206   0B00               MOVS     R3,R1
   \   00000208   E218               ADDS     R2,R4,R3
   \   0000020A   C318               ADDS     R3,R0,R3
   \   0000020C   5B5D               LDRB     R3,[R3, R5]
   \   0000020E   1377               STRB     R3,[R2, #+28]
   \   00000210   491C               ADDS     R1,R1,#+1
   \   00000212   0906               LSLS     R1,R1,#+24
   \   00000214   090E               LSRS     R1,R1,#+24
   \   00000216   F3E7               B        ??main_15
   2127              }else if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEB)
   \                     ??main_14:
   \   00000218   0978               LDRB     R1,[R1, #+0]
   \   0000021A   EB29               CMP      R1,#+235
   \   0000021C   0FD1               BNE      ??main_17
   2128              {//je¿eli nie wymagane has³o
   2129               g_NeedPass=1; 
   \   0000021E   0121               MOVS     R1,#+1
   \   00000220   6174               STRB     R1,[R4, #+17]
   2130               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   00000222   0021               MOVS     R1,#+0
   \   00000224   744D               LDR      R5,??main_2+0x44  ;; 0xd7dd
   \                     ??main_18:
   \   00000226   0A00               MOVS     R2,R1
   \   00000228   082A               CMP      R2,#+8
   \   0000022A   20D2               BCS      ??main_16
   \   0000022C   0B00               MOVS     R3,R1
   \   0000022E   E218               ADDS     R2,R4,R3
   \   00000230   C318               ADDS     R3,R0,R3
   \   00000232   5B5D               LDRB     R3,[R3, R5]
   \   00000234   1377               STRB     R3,[R2, #+28]
   \   00000236   491C               ADDS     R1,R1,#+1
   \   00000238   0906               LSLS     R1,R1,#+24
   \   0000023A   090E               LSRS     R1,R1,#+24
   \   0000023C   F3E7               B        ??main_18
   2131              }else
   2132              {//jezeli nie zdefiniowano  - zdefiniuj i zapisz has³o domyœlne i ustaw jako nie wymagane
   2133               
   2134               //zapis has³a do flash
   2135               unsigned int Save = __get_interrupt_state();  
   \                     ??main_17:
   \   0000023E   ........           BL       __iar_get_interrupt_state
   \   00000242   0500               MOVS     R5,R0
   2136               __disable_interrupt();
   \   00000244   ........           BL       __iar_disable_interrupt
   2137               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])),0,g_Password_1,9);
   2138               
   2139                FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])), g_Password_1, 9);
                       ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   00000248   0922               MOVS     R2,#+9
   \   0000024A   2100               MOVS     R1,R4
   \   0000024C   1C31               ADDS     R1,R1,#+28
   \   0000024E   6B48               LDR      R0,??main_2+0x48  ;; 0x13d7dd
   \   00000250   ........           BL       FlashWrite
   2140               char NeedPassFlag=0xEC;
   \   00000254   6846               MOV      R0,SP
   \   00000256   EC21               MOVS     R1,#+236
   \   00000258   0170               STRB     R1,[R0, #+0]
   2141               g_NeedPass=0; 
   \   0000025A   0020               MOVS     R0,#+0
   \   0000025C   6074               STRB     R0,[R4, #+17]
   2142               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)),0,&NeedPassFlag,1);
   2143               FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)), &NeedPassFlag, 1);
   \   0000025E   0122               MOVS     R2,#+1
   \   00000260   6946               MOV      R1,SP
   \   00000262   6748               LDR      R0,??main_2+0x4C  ;; 0x13d7dc
   \   00000264   ........           BL       FlashWrite
   2144               __set_interrupt_state(Save);
   \   00000268   2800               MOVS     R0,R5
   \   0000026A   ........           BL       __iar_set_interrupt_state
   2145               //koniec zapisu do flash
   2146              }
   2147              //koniec odczytu has³a ---------------------------------------- 
   2148          
   2149          
   2150              
   2151              USB_Connect(&sUsb);    
   \                     ??main_16:
   \   0000026E   3800               MOVS     R0,R7
   \   00000270   ........           BL       USB_Connect
   2152             __enable_interrupt();   
   \   00000274   ........           BL       __iar_enable_interrupt
   \   00000278   6249               LDR      R1,??main_2+0x50  ;; NET
   \   0000027A   6348               LDR      R0,??main_2+0x54  ;; 0xfffc4000
   2153             
   2154             
   2155           
   2156          #ifdef __WIFI_MODULE   
   2157             InitWizFi(AT91C_BASE_US1, &NET);
   \   0000027C   ........           BL       InitWizFi
   \   00000280   5AE0               B        ??main_19
   \   00000282   C046               Nop      
   \                     ??main_0:
   \   00000284   ........           DC32     DateTime
   \   00000288   ........           DC32     RF_Status
   \   0000028C   00F4FFFF           DC32     0xfffff400
   \   00000290   34F4FFFF           DC32     0xfffff434
   \   00000294   ........           DC32     sUsb
   \   00000298   E7D70000           DC32     0xd7e7
   2158          #endif
   2159          
   2160             
   2161             
   2162              /*
   2163             //ustawienie wys³ania stanów  do wszystkich wêz³ów po restarcie
   2164              for (char i=0; i<NumberNeurons; i++)
   2165              {
   2166                MainStage.SendStageChange[i]=ChangeStageFlag; 
   2167              }
   2168             */
   2169             
   2170             
   2171              while (1) 
   2172              {
   2173                  AT91F_WDTRestart(AT91C_BASE_WDTC);
   2174                  
   2175                  
   2176                  if (ForwardUSB2Serialferst==1)
   2177                  {
   2178                      // Start USB->Serial forward mechanism
   2179                      ForwardUSB2Serial(0, 0, 0, 0);
   2180                      ForwardUSB2Serialferst=2;
   2181                  }
   2182                
   2183                 
   2184                  
   2185                 
   2186                 if ((!((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)) && (VBUS_old==1))
   2187                 {
   2188                   VBUS_old=0;
   2189                   ISR_VBus();
   2190                 }
   2191                 /*
   2192                 if (((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) && (VBUS_old==0))
   2193                 {
   2194                   VBUS_old=1;
   2195                   ISR_VBus();
   2196                 } 
   2197                 */
   2198                 
   2199                  
   2200                  
   2201                   
   2202                  if ((g_NextTimeProgram<=g_counter) || (g_NextTimeProgram>g_counter+ProgramPeriod))
   2203                   {
   2204                    
   2205                     
   2206                       char WaitingRF_WrTask=0;
   2207                       if (g_NextTimeProgram<g_counter+1000)    //blokowanie wykonania programu jezeli istnieje oczekuj¹ce ¿¹danie wys³ania stanu do któregokolwiek wêz³a. Blokowanie nie mo¿e przekroczyæ 1s. 
   2208                       {
   2209                           char Nd=1;
   2210                           while ((Nd<NumberNeurons) && (WaitingRF_WrTask==0))
   2211                            {
   2212                                if ((MainStage.SendStageChange[Nd]>0))    
   \                     ??main_20:
   \   0000029C   5B49               LDR      R1,??main_2+0x58  ;; 0x6eb
   \   0000029E   0200               MOVS     R2,R0
   \   000002A0   5B4B               LDR      R3,??main_2+0x5C  ;; MainStage
   \   000002A2   9A18               ADDS     R2,R3,R2
   \   000002A4   515C               LDRB     R1,[R2, R1]
   \   000002A6   0029               CMP      R1,#+0
   \   000002A8   00D0               BEQ      ??main_21
   2213                                {
   2214                                    WaitingRF_WrTask=1;
   \   000002AA   0125               MOVS     R5,#+1
   2215                                }
   2216                                Nd++;  
   \                     ??main_21:
   \   000002AC   401C               ADDS     R0,R0,#+1
   \   000002AE   0006               LSLS     R0,R0,#+24
   \   000002B0   000E               LSRS     R0,R0,#+24
   2217                            } 
   \                     ??main_22:
   \   000002B2   0100               MOVS     R1,R0
   \   000002B4   2329               CMP      R1,#+35
   \   000002B6   01D2               BCS      ??main_23
   \   000002B8   2900               MOVS     R1,R5
   \   000002BA   EFD0               BEQ      ??main_20
   2218                       }
   2219          
   2220                      if (WaitingRF_WrTask==0)
   \                     ??main_23:
   \   000002BC   002D               CMP      R5,#+0
   \   000002BE   0AD1               BNE      ??main_24
   2221                      {
   2222                        g_NextTimeProgram=g_counter+ProgramPeriod;
   \   000002C0   2200               MOVS     R2,R4
   \   000002C2   3832               ADDS     R2,R2,#+56
   \   000002C4   AF20               MOVS     R0,#+175
   \   000002C6   4000               LSLS     R0,R0,#+1        ;; #+350
   \   000002C8   0021               MOVS     R1,#+0
   \   000002CA   8019               ADDS     R0,R0,R6
   \   000002CC   7941               ADCS     R1,R1,R7
   \   000002CE   03C2               STM      R2!,{R0,R1}
   2223                        Program(&gProg);
   \   000002D0   3948               LDR      R0,??main_2+0x4  ;; gProg
   \   000002D2   ........           BL       Program
   2224                      }
   2225                      
   2226                      
   2227                      
   2228                      
   2229                   }
   2230                   
   2231                  
   2232                  if ((g_counter>4000) && (MenuLevel==0)) { MenuLevel=1;   MenuPaint();}
   \                     ??main_24:
   \   000002D6   2000               MOVS     R0,R4
   \   000002D8   3030               ADDS     R0,R0,#+48
   \   000002DA   03C8               LDM      R0!,{R0,R1}
   \   000002DC   4D4A               LDR      R2,??main_2+0x60  ;; 0xfa1
   \   000002DE   0023               MOVS     R3,#+0
   \   000002E0   9942               CMP      R1,R3
   \   000002E2   0AD3               BCC      ??main_25
   \   000002E4   01D8               BHI      ??main_26
   \   000002E6   9042               CMP      R0,R2
   \   000002E8   07D3               BCC      ??main_25
   \                     ??main_26:
   \   000002EA   4B48               LDR      R0,??main_2+0x64  ;; MenuLevel
   \   000002EC   0168               LDR      R1,[R0, #+0]
   \   000002EE   0029               CMP      R1,#+0
   \   000002F0   03D1               BNE      ??main_25
   \   000002F2   0121               MOVS     R1,#+1
   \   000002F4   0160               STR      R1,[R0, #+0]
   \   000002F6   ........           BL       MenuPaint
   2233                  
   2234          
   2235                    
   2236          #ifdef __WIFI_MODULE     
   2237                  if (NET.WiFi.On)
   \                     ??main_25:
   \   000002FA   4848               LDR      R0,??main_2+0x68  ;; NET + 80
   \   000002FC   0078               LDRB     R0,[R0, #+0]
   \   000002FE   0028               CMP      R0,#+0
   \   00000300   14D0               BEQ      ??main_27
   2238                  {
   2239                      //wifi-------------------------------------------------------------------
   2240                      if ((g_counter>6000) /*&&  (g_counter%200==0)*/)
   \   00000302   2000               MOVS     R0,R4
   \   00000304   3030               ADDS     R0,R0,#+48
   \   00000306   03C8               LDM      R0!,{R0,R1}
   \   00000308   454A               LDR      R2,??main_2+0x6C  ;; 0x1771
   \   0000030A   0023               MOVS     R3,#+0
   \   0000030C   9942               CMP      R1,R3
   \   0000030E   07D3               BCC      ??main_28
   \   00000310   01D8               BHI      ??main_29
   \   00000312   9042               CMP      R0,R2
   \   00000314   04D3               BCC      ??main_28
   2241                      {
   2242                        CheckVarChangeHTTP(Buff_TX_1 ,AT91C_BASE_US1, &NET);
   \                     ??main_29:
   \   00000316   3B4A               LDR      R2,??main_2+0x50  ;; NET
   \   00000318   3B49               LDR      R1,??main_2+0x54  ;; 0xfffc4000
   \   0000031A   4248               LDR      R0,??main_2+0x70  ;; Buff_TX_1
   \   0000031C   ........           BL       CheckVarChangeHTTP
   2243                      }
   2244                  
   2245                      WiFi(US1_Buffer, Buff_TX_1 ,AT91C_BASE_US1, &NET);
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

  static void CBK_Suspend(const S_usb *pUsb)
              ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\main.c",528  Warning[Pe177]: 
          function "CBK_Suspend" was declared but never referenced
   \                     ??main_28:
   \   00000320   384B               LDR      R3,??main_2+0x50  ;; NET
   \   00000322   394A               LDR      R2,??main_2+0x54  ;; 0xfffc4000
   \   00000324   3F49               LDR      R1,??main_2+0x70  ;; Buff_TX_1
   \   00000326   4048               LDR      R0,??main_2+0x74  ;; US1_Buffer
   \   00000328   ........           BL       WiFi
   2246                  }
   2247                  //CheckConnectionStatus();
   2248          #endif  
   2249            
   2250                  
   2251                  
   2252                  //bezpiecznik RF zabezpiecza przed zablokowaniem RFa
   2253                  if (RF_Status.RfFuse>=60) 
   \                     ??main_27:
   \   0000032C   3F48               LDR      R0,??main_2+0x78  ;; RF_Status + 16
   \   0000032E   0078               LDRB     R0,[R0, #+0]
   \   00000330   3C28               CMP      R0,#+60
   \   00000332   01D3               BCC      ??main_19
   2254                  {
   2255                      #ifdef _DEBUG_
   2256                               MESSAGE("Bezpiecznik RF"); 
   2257                      #endif
   2258                                
   2259                      RF_Init();          
   \   00000334   ........           BL       RF_Init
   2260                  }   
   \                     ??main_19:
   \   00000338   3D48               LDR      R0,??main_2+0x7C  ;; 0xfffffd40
   \   0000033A   ........           BL       AT91F_WDTRestart
   \   0000033E   E07D               LDRB     R0,[R4, #+23]
   \   00000340   0128               CMP      R0,#+1
   \   00000342   07D1               BNE      ??main_30
   \   00000344   0023               MOVS     R3,#+0
   \   00000346   1A00               MOVS     R2,R3
   \   00000348   1100               MOVS     R1,R2
   \   0000034A   0800               MOVS     R0,R1
   \   0000034C   ........           BL       ForwardUSB2Serial
   \   00000350   0220               MOVS     R0,#+2
   \   00000352   E075               STRB     R0,[R4, #+23]
   \                     ??main_30:
   \   00000354   3748               LDR      R0,??main_2+0x80  ;; 0xfffff43c
   \   00000356   0068               LDR      R0,[R0, #+0]
   \   00000358   0221               MOVS     R1,#+2
   \   0000035A   0842               TST      R0,R1
   \   0000035C   07D1               BNE      ??main_31
   \   0000035E   3648               LDR      R0,??main_2+0x84  ;; VBUS_old
   \   00000360   0178               LDRB     R1,[R0, #+0]
   \   00000362   0129               CMP      R1,#+1
   \   00000364   03D1               BNE      ??main_31
   \   00000366   0021               MOVS     R1,#+0
   \   00000368   0170               STRB     R1,[R0, #+0]
   \   0000036A   ........           BL       ISR_VBus
   \                     ??main_31:
   \   0000036E   2000               MOVS     R0,R4
   \   00000370   3830               ADDS     R0,R0,#+56
   \   00000372   0CC8               LDM      R0!,{R2,R3}
   \   00000374   2000               MOVS     R0,R4
   \   00000376   3030               ADDS     R0,R0,#+48
   \   00000378   C0C8               LDM      R0!,{R6,R7}
   \   0000037A   9F42               CMP      R7,R3
   \   0000037C   0CD8               BHI      ??main_32
   \   0000037E   01D3               BCC      ??main_33
   \   00000380   9642               CMP      R6,R2
   \   00000382   09D2               BCS      ??main_32
   \                     ??main_33:
   \   00000384   AF20               MOVS     R0,#+175
   \   00000386   4000               LSLS     R0,R0,#+1        ;; #+350
   \   00000388   0021               MOVS     R1,#+0
   \   0000038A   8019               ADDS     R0,R0,R6
   \   0000038C   7941               ADCS     R1,R1,R7
   \   0000038E   9942               CMP      R1,R3
   \   00000390   A1D8               BHI      ??main_24
   \   00000392   01D3               BCC      ??main_32
   \   00000394   9042               CMP      R0,R2
   \   00000396   9ED2               BCS      ??main_24
   \                     ??main_32:
   \   00000398   0025               MOVS     R5,#+0
   \   0000039A   FA20               MOVS     R0,#+250
   \   0000039C   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000039E   2900               MOVS     R1,R5
   \   000003A0   8019               ADDS     R0,R0,R6
   \   000003A2   7941               ADCS     R1,R1,R7
   \   000003A4   8B42               CMP      R3,R1
   \   000003A6   89D8               BHI      ??main_23
   \   000003A8   01D3               BCC      ??main_34
   \   000003AA   8242               CMP      R2,R0
   \   000003AC   86D2               BCS      ??main_23
   \                     ??main_34:
   \   000003AE   0120               MOVS     R0,#+1
   \   000003B0   7FE7               B        ??main_22
   \   000003B2   C046               Nop      
   \                     ??main_2:
   \   000003B4   E7D71300           DC32     0x13d7e7
   \   000003B8   ........           DC32     gProg
   \   000003BC   FFFFEF00           DC32     0xefffff
   \   000003C0   E6D70000           DC32     0xd7e6
   \   000003C4   ........           DC32     RF_Status + 13
   \   000003C8   33333333           DC32     0x33333333
   \   000003CC   3333D33F           DC32     0x3fd33333
   \   000003D0   C3F5285C           DC32     0x5c28f5c3
   \   000003D4   8FE28A40           DC32     0x408ae28f
   \   000003D8   00006940           DC32     0x40690000
   \   000003DC   00FF04C1           DC32     0xc104ff00
   \   000003E0   ........           DC32     RF_Status + 28
   \   000003E4   ........           DC32     RF_Status + 12
   \   000003E8   ........           DC32     RF_Status + 14
   \   000003EC   7CA00000           DC32     0xa07c
   \   000003F0   ........           DC32     RF_Status + 15
   \   000003F4   DCD70000           DC32     0xd7dc
   \   000003F8   DDD70000           DC32     0xd7dd
   \   000003FC   DDD71300           DC32     0x13d7dd
   \   00000400   DCD71300           DC32     0x13d7dc
   \   00000404   ........           DC32     NET
   \   00000408   0040FCFF           DC32     0xfffc4000
   \   0000040C   EB060000           DC32     0x6eb
   \   00000410   ........           DC32     MainStage
   \   00000414   A10F0000           DC32     0xfa1
   \   00000418   ........           DC32     MenuLevel
   \   0000041C   ........           DC32     NET + 80
   \   00000420   71170000           DC32     0x1771
   \   00000424   ........           DC32     Buff_TX_1
   \   00000428   ........           DC32     US1_Buffer
   \   0000042C   ........           DC32     RF_Status + 16
   \   00000430   40FDFFFF           DC32     0xfffffd40
   \   00000434   3CF4FFFF           DC32     0xfffff43c
   \   00000438   ........           DC32     VBUS_old
   2261              }
   2262             
   2263              
   2264          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     sUsb

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   3CF4FFFF           DC32     0xfffff43c

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     MenuLevel

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   00F0FFFF           DC32     0xfffff000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00F4FFFF           DC32     0xfffff400

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   60F4FFFF           DC32     0xfffff460

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   40FDFFFF           DC32     0xfffffd40

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     DateTime

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     gProg

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   70C60000           DC32     0xc670

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   00011300           DC32     0x130100

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   26BC0000           DC32     0xbc26

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   30BC0000           DC32     0xbc30

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     MainStage

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   AA8AFFFF           DC32     0xffff8aaa

   \                                 In section .rodata, align 4
   \                     `?<Constant "Wyladowana">`:
   \   00000000   57796C61646F       DC8 "Wyladowana"
   \              77616E6100  
   \   0000000B   00                 DC8 0
   \   0000000C   626174657269       DC8 "bateria"
   \              6100        
   \   00000014   537072617764       DC8 "Sprawdz"
   \              7A00        
   \   0000001C   6C6973746520       DC8 "liste wezlow"
   \              77657A6C6F77
   \              00          
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "
   2265          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     AT91F_AIC_ConfigureIt            24
     AT91F_AIC_EnableIt                0
     AT91F_LCD_Init                    8
     AT91F_PIO_CfgInput                0
     AT91F_PIO_CfgOutput               0
     AT91F_PIO_CfgPullup               0
     AT91F_PIO_GetInterruptStatus      0
     AT91F_PIO_InterruptEnable         0
     AT91F_PMC_EnablePeriphClock       0
     AT91F_WDTRestart                  0
     AlarmExecute                     24
     CBK_Init                         24
     CBK_NewRequest                    8
     CBK_Resume                        8
     Delay                             8
     ForwardUSB2Serial                24
     ISR_Driver                        8
     ISR_VBus                         24
     InitFramework                    24
     RamToFlash                       24
     TestHendel                        8
     TestInit                         24
     ThermostatsExecute               24
     ThermostatsTimeChartExecute      24
     Timer_10ms                        8
     Timer_10ms_Setup                  0
     Timer_10us                        0
     Timer_10us_Setup                  0
     Timer_1h                          8
     Timer_1min                        8
     Timer_1ms                        24
     Timer_1ms_Setup                   0
     Timer_1s                         40
     TimetableExecute                 32
     USB_Attach                        8
     USB_Connect                       8
     USB_Disconnect                    8
     USB_GetDriverID                   0
     USB_GetDriverInterface            0
     USB_GetState                      0
     USB_Handler                       8
     main                             24
     watchdogEnable                    8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     identyfikacja                   8
     system                          8
     AT91F_AIC_ConfigureIt          44
     AT91F_AIC_EnableIt             12
     AT91F_PIO_CfgOutput             6
     AT91F_PIO_CfgInput              6
     AT91F_PIO_CfgPullup             8
     AT91F_PIO_InterruptEnable       4
     AT91F_PIO_GetInterruptStatus    4
     AT91F_PMC_EnablePeriphClock     4
     AT91F_WDTRestart               12
     AT91F_LCD_Init                164
     USB_GetDriverInterface          6
     USB_GetDriverID                 6
     USB_Handler                    18
     USB_Attach                     18
     USB_Connect                    18
     USB_Disconnect                 18
     USB_GetState                   10
     APC                             1
     g_czas_petli                    1
     komunikacja_ok                  4
     rej_prog                       40
     LifeCouter                      4
     LifeCouterMax                   4
     USB_busy                        1
     advY                            4
     advX                            4
     g_leng                          4
     g_level                         1
     g_Message                       4
     g_info                          4
     sCallbacks                     24
     sUsb                           24
     ISR_Driver                     14
     ISR_VBus                      176
     CBK_Init                       80
     CBK_Resume                     12
     CBK_NewRequest                 20
     ForwardUSB2Serial              96
     Delay                          18
     InitFramework                 272
     Timer_10us                     12
     Timer_10us_Setup              128
     TimetableExecute              420
     ThermostatsTimeChartExecute   200
     ThermostatsExecute            356
     AlarmExecute                  504
     Timer_1h                       12
     Timer_1min                     16
     Timer_1s                     1020
     Timer_10ms                    288
     Timer_10ms_Setup              132
     Timer_1ms                     460
     g_SlaveConnect                 12
     NET                           448
     LightLCD_OFF_Counter            1
     LightLCD_OFF_Counter2           1
     LightLCD_OFF_Curent             1
     ReciveFrameToMe                 1
     tmp_i                           1
     licznik                         4
     licznik2                        4
     licznik3                        4
     memory                          4
     sss                             4
     int1                            4
     sSetup                          8
     dState                          4
     memory_read                     4
     LastTemp                       16
     Hysteresis                      8
     XY_Tab                         44
     display_cykl                    1
     Counter                         4
     US0_Counter                     4
     US1_Counter                     4
     CounterForTimer10ms             1
     Timer_1ms_Setup               132
     RamToFlash                    212
     testcount                       4
     TestHendel                     44
     TestInit                      108
     string                         28
     watchdogEnable                 52
     DateTime                     1300
     FlashProgramReserveOfset        4
     g_Password_2                    8
     AdressModbus                    1
     g_Restart_Program               1
     AlarmScreenAction             160
     pEndpoints                    160
     tProgramTabSize                 4
     stop                            4
     Out                            36
     X_up_old                        4
     Y_up_old                        4
     X_down_old                      4
     Y_down_old                      4
     g_PC_Connected_timeout          1
     TimeCompil                     12
     DateCompil                     12
     main                         1084
     ??DataTable1                    4
     ??DataTable3                    4
     ??DataTable4                    4
     ??DataTable5                    4
     ??DataTable6                    4
     ??DataTable7                    4
     ??DataTable10                   4
     ??DataTable11                   4
     ??DataTable12                   4
     ??DataTable13                   4
     ??DataTable14                   4
     ??DataTable15                   4
     ??DataTable16                   4
     ??DataTable17                   4
     ??DataTable18                   4
     ?<Constant "Wyladowana">       44
     ?<Constant "   ">               4
      Others                        68

 
   694 bytes in section .bss
 1 720 bytes in section .data
   112 bytes in section .rodata
 6 354 bytes in section Debug.txt
 
 5 928 bytes of CODE  memory (+ 426 bytes shared)
   112 bytes of CONST memory
 2 414 bytes of DATA  memory

Errors: none
Warnings: 33
