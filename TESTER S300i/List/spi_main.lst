###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           20/Mar/2013  07:53:45 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\Framework\spi_main.c                          #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\spi_main.c" -D AT91SAM7S256 -D      #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -D _TESTER_ -lC "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\TESTER S300i\List\"                #
#                    --diag_suppress Pa082 -o "D:\Zeuron\Projekty\S300\S300-p #
#                    rogram v1.3 BETA- 14.03.2013\TESTER S300i\Obj\"          #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian little --cpu ARM7TDMI -e --fpu None     #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.3       #
#                    BETA- 14.03.2013\lib\AT91SAM7S256\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\cdc\" -I                           #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\core\" -I "D:\Zeuron\Projekty\S300\S300-progr #
#                    am v1.3 BETA- 14.03.2013\startup\" -I                    #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\" -I "D:\Zeuron\Projekty\S300\S300- #
#                    program v1.3 BETA- 14.03.2013\Framework\Configuration\"  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 5.0\ARM\INC\" --section .text=Debug.txt        #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\List\spi_main.lst                #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\Obj\spi_main.o                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\spi_main.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : spi_main.c                               *//
      7          //*  Opis                         : obs³oga transmisji SPI                   *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 14.01.2009                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          
     24          //Konfiguracja -----------------------------------------------------------------
     25            
     26          //___________________________Koniec konfiguracji________________________________
     27          
     28          
     29          
     30          // Pliki do³¹czane -------------------------------------------------------------
     31              #include "core/common.h"
     32              #include "core/device.h" 

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_AIC_ConfigureIt(AT91PS_AIC, unsigned int, unsigned int, unsigned int, void (*)())
   \                     AT91F_AIC_ConfigureIt:
   \   00000000   F5B4               PUSH     {R0,R2,R4-R7}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   069E               LDR      R6,[SP, #+24]
   \   00000008   A100               LSLS     R1,R4,#+2
   \   0000000A   5718               ADDS     R7,R2,R1
   \   0000000C   8037               ADDS     R7,R7,#+128
   \   0000000E   3868               LDR      R0,[R7, #+0]
   \   00000010   0125               MOVS     R5,#+1
   \   00000012   A540               LSLS     R5,R5,R4
   \   00000014   2C00               MOVS     R4,R5
   \   00000016   9225               MOVS     R5,#+146
   \   00000018   6D00               LSLS     R5,R5,#+1        ;; #+292
   \   0000001A   5519               ADDS     R5,R2,R5
   \   0000001C   2C60               STR      R4,[R5, #+0]
   \   0000001E   3E60               STR      R6,[R7, #+0]
   \   00000020   019E               LDR      R6,[SP, #+4]
   \   00000022   1E43               ORRS     R6,R6,R3
   \   00000024   5650               STR      R6,[R2, R1]
   \   00000026   6C60               STR      R4,[R5, #+4]
   \   00000028   FCBC               POP      {R2-R7}
   \   0000002A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_AIC_EnableIt(AT91PS_AIC, unsigned int)
   \                     AT91F_AIC_EnableIt:
   \   00000000   9022               MOVS     R2,#+144
   \   00000002   5200               LSLS     R2,R2,#+1        ;; #+288
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   8B40               LSLS     R3,R3,R1
   \   00000008   8350               STR      R3,[R0, R2]
   \   0000000A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetNextRx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetNextRx:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   4261               STR      R2,[R0, #+20]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetNextTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetNextTx:
   \   00000000   8161               STR      R1,[R0, #+24]
   \   00000002   C261               STR      R2,[R0, #+28]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetRx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetRx:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   4260               STR      R2,[R0, #+4]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetTx:
   \   00000000   8160               STR      R1,[R0, #+8]
   \   00000002   C260               STR      R2,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_EnableTx(AT91PS_PDC)
   \                     AT91F_PDC_EnableTx:
   \   00000000   8021               MOVS     R1,#+128
   \   00000002   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000004   0162               STR      R1,[R0, #+32]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_EnableRx(AT91PS_PDC)
   \                     AT91F_PDC_EnableRx:
   \   00000000   0121               MOVS     R1,#+1
   \   00000002   0162               STR      R1,[R0, #+32]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_DisableTx(AT91PS_PDC)
   \                     AT91F_PDC_DisableTx:
   \   00000000   8021               MOVS     R1,#+128
   \   00000002   8900               LSLS     R1,R1,#+2        ;; #+512
   \   00000004   0162               STR      R1,[R0, #+32]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_DisableRx(AT91PS_PDC)
   \                     AT91F_PDC_DisableRx:
   \   00000000   0221               MOVS     R1,#+2
   \   00000002   0162               STR      R1,[R0, #+32]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsTxEmpty:
   \   00000000   C068               LDR      R0,[R0, #+12]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsNextTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsNextTxEmpty:
   \   00000000   C069               LDR      R0,[R0, #+28]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsRxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsRxEmpty:
   \   00000000   4068               LDR      R0,[R0, #+4]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsNextRxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsNextRxEmpty:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_Open(AT91PS_PDC)
   \                     AT91F_PDC_Open:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   ........           BL       AT91F_PDC_DisableRx
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   ........           BL       AT91F_PDC_DisableTx
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   1100               MOVS     R1,R2
   \   00000012   2000               MOVS     R0,R4
   \   00000014   ........           BL       AT91F_PDC_SetNextTx
   \   00000018   0022               MOVS     R2,#+0
   \   0000001A   1100               MOVS     R1,R2
   \   0000001C   2000               MOVS     R0,R4
   \   0000001E   ........           BL       AT91F_PDC_SetNextRx
   \   00000022   0022               MOVS     R2,#+0
   \   00000024   1100               MOVS     R1,R2
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       AT91F_PDC_SetTx
   \   0000002C   0022               MOVS     R2,#+0
   \   0000002E   1100               MOVS     R1,R2
   \   00000030   2000               MOVS     R0,R4
   \   00000032   ........           BL       AT91F_PDC_SetRx
   \   00000036   2000               MOVS     R0,R4
   \   00000038   ........           BL       AT91F_PDC_EnableRx
   \   0000003C   2000               MOVS     R0,R4
   \   0000003E   ........           BL       AT91F_PDC_EnableTx
   \   00000042   10BC               POP      {R4}
   \   00000044   01BC               POP      {R0}
   \   00000046   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PDC_SendFrame(AT91PS_PDC, char *, unsigned int, char *, unsigned int)
   \                     AT91F_PDC_SendFrame:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   069F               LDR      R7,[SP, #+24]
   \   0000000A   ........           BL       AT91F_PDC_IsTxEmpty
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   0BD0               BEQ      ??AT91F_PDC_SendFrame_0
   \   00000012   3200               MOVS     R2,R6
   \   00000014   2900               MOVS     R1,R5
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       AT91F_PDC_SetTx
   \   0000001C   3A00               MOVS     R2,R7
   \   0000001E   0099               LDR      R1,[SP, #+0]
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       AT91F_PDC_SetNextTx
   \   00000026   0220               MOVS     R0,#+2
   \   00000028   0AE0               B        ??AT91F_PDC_SendFrame_1
   \                     ??AT91F_PDC_SendFrame_0:
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_PDC_IsNextTxEmpty
   \   00000030   0028               CMP      R0,#+0
   \   00000032   05D0               BEQ      ??AT91F_PDC_SendFrame_1
   \   00000034   3200               MOVS     R2,R6
   \   00000036   2900               MOVS     R1,R5
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   ........           BL       AT91F_PDC_SetNextTx
   \   0000003E   0120               MOVS     R0,#+1
   \                     ??AT91F_PDC_SendFrame_1:
   \   00000040   F8BC               POP      {R3-R7}
   \   00000042   02BC               POP      {R1}
   \   00000044   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PDC_ReceiveFrame(AT91PS_PDC, char *, unsigned int, char *, unsigned int)
   \                     AT91F_PDC_ReceiveFrame:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   069F               LDR      R7,[SP, #+24]
   \   0000000A   ........           BL       AT91F_PDC_IsRxEmpty
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   0BD0               BEQ      ??AT91F_PDC_ReceiveFrame_0
   \   00000012   3200               MOVS     R2,R6
   \   00000014   2900               MOVS     R1,R5
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       AT91F_PDC_SetRx
   \   0000001C   3A00               MOVS     R2,R7
   \   0000001E   0099               LDR      R1,[SP, #+0]
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       AT91F_PDC_SetNextRx
   \   00000026   0220               MOVS     R0,#+2
   \   00000028   0AE0               B        ??AT91F_PDC_ReceiveFrame_1
   \                     ??AT91F_PDC_ReceiveFrame_0:
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_PDC_IsNextRxEmpty
   \   00000030   0028               CMP      R0,#+0
   \   00000032   05D0               BEQ      ??AT91F_PDC_ReceiveFrame_1
   \   00000034   3200               MOVS     R2,R6
   \   00000036   2900               MOVS     R1,R5
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   ........           BL       AT91F_PDC_SetNextRx
   \   0000003E   0120               MOVS     R0,#+1
   \                     ??AT91F_PDC_ReceiveFrame_1:
   \   00000040   F8BC               POP      {R3-R7}
   \   00000042   02BC               POP      {R1}
   \   00000044   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPeriph(AT91PS_PIO, unsigned int, unsigned int)
   \                     AT91F_PIO_CfgPeriph:
   \   00000000   0167               STR      R1,[R0, #+112]
   \   00000002   4267               STR      R2,[R0, #+116]
   \   00000004   0A43               ORRS     R2,R2,R1
   \   00000006   4260               STR      R2,[R0, #+4]
   \   00000008   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_SPI_CfgCs(AT91PS_SPI, int, int)
   \                     AT91F_SPI_CfgCs:
   \   00000000   8900               LSLS     R1,R1,#+2
   \   00000002   4018               ADDS     R0,R0,R1
   \   00000004   0263               STR      R2,[R0, #+48]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_SPI_ReceiveFrame(AT91PS_SPI, char *, unsigned int, char *, unsigned int)
   \                     AT91F_SPI_ReceiveFrame:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   029C               LDR      R4,[SP, #+8]
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0094               STR      R4,[SP, #+0]
   \   00000008   8024               MOVS     R4,#+128
   \   0000000A   6400               LSLS     R4,R4,#+1        ;; #+256
   \   0000000C   0019               ADDS     R0,R0,R4
   \   0000000E   ........           BL       AT91F_PDC_ReceiveFrame
   \   00000012   02B0               ADD      SP,SP,#+8
   \   00000014   10BC               POP      {R4}
   \   00000016   02BC               POP      {R1}
   \   00000018   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_SPI_SendFrame(AT91PS_SPI, char *, unsigned int, char *, unsigned int)
   \                     AT91F_SPI_SendFrame:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   029C               LDR      R4,[SP, #+8]
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0094               STR      R4,[SP, #+0]
   \   00000008   8024               MOVS     R4,#+128
   \   0000000A   6400               LSLS     R4,R4,#+1        ;; #+256
   \   0000000C   0019               ADDS     R0,R0,R4
   \   0000000E   ........           BL       AT91F_PDC_SendFrame
   \   00000012   02B0               ADD      SP,SP,#+8
   \   00000014   10BC               POP      {R4}
   \   00000016   02BC               POP      {R1}
   \   00000018   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_SPI_CfgPMC(void)
   \                     AT91F_SPI_CfgPMC:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   2021               MOVS     R1,#+32
   \   00000004   0248               LDR      R0,??AT91F_SPI_CfgPMC_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   08BC               POP      {R3}
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
   \                     ??AT91F_SPI_CfgPMC_0:
   \   00000010   00FCFFFF           DC32     0xfffffc00

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_SPI_CfgPIO(void)
   \                     AT91F_SPI_CfgPIO:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   8022               MOVS     R2,#+128
   \   00000004   9200               LSLS     R2,R2,#+2        ;; #+512
   \   00000006   F021               MOVS     R1,#+240
   \   00000008   C901               LSLS     R1,R1,#+7        ;; #+30720
   \   0000000A   0348               LDR      R0,??AT91F_SPI_CfgPIO_0  ;; 0xfffff400
   \   0000000C   ........           BL       AT91F_PIO_CfgPeriph
   \   00000010   08BC               POP      {R3}
   \   00000012   01BC               POP      {R0}
   \   00000014   0047               BX       R0               ;; return
   \   00000016   C046               Nop      
   \                     ??AT91F_SPI_CfgPIO_0:
   \   00000018   00F4FFFF           DC32     0xfffff400
     33              #include "spi_main.h"
     34              #include <intrinsics.h>
     35              //#include  "Clock.h"
     36          #include "core/trace.h"
     37             // #include  "RF.h"
     38          #include "core/board.h"
     39          #include "InterruptPriority.h"

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     40          //-----------------------Koniec plików do³¹czanych -----------------------------
     41          
     42          
     43          
     44          //Definicje --------------------------------------------------------------------
     45              AT91PS_SPI     pSPI = AT91C_BASE_SPI;
     46          //___________________________Koniec definicji___________________________________
     47          
     48          
     49          
     50          
     51          
     52          //Sta³e ------------------------------------------------------------------------
     53          
     54          //____________________________Koniec sta³ych ___________________________________
     55          
     56          
     57          
     58          
     59          
     60          //Zmienne globalne -------------------------------------------------------------
     61          
     62          //___________________________Koniec zmiennych globalnych________________________
     63          
     64          
     65          
     66          
     67          
     68          //Zmienne lokalne -------------------------------------------------------------

   \                                 In section .bss, align 1
     69              unsigned char volatile      spi_Rdrf_Flag     = 0;
   \                     spi_Rdrf_Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     70              unsigned char volatile	spi_Tdre_Flag     = 0;
   \                     spi_Tdre_Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     71              unsigned char volatile	spi_Modf_Flag     = 0;
   \                     spi_Modf_Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     72              unsigned char volatile	spi_Ovred_Flag    = 0;
   \                     spi_Ovred_Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     73              unsigned char volatile	spi_Nssr_Flag     = 0;
   \                     spi_Nssr_Flag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     74              unsigned long volatile	spi_Txempty_Flag  = 0;
   \                     spi_Txempty_Flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     75              unsigned char volatile	spi_Spiens_Flag   = 0;
   \                     spi_Spiens_Flag:
   \   00000000                      DS8 1
     76              unsigned long volatile 	spi_Endrx_Flag    = 0;
     77              unsigned long volatile 	spi_Endtx_Flag    = 0;
     78              unsigned long volatile      spi_Rxbuff_Flag   = 0;

   \                                 In section .bss, align 4
     79              unsigned long volatile      spi_Txbuff_Flag   = 0;
   \                     spi_Txbuff_Flag:
   \   00000000                      DS8 4
     80              unsigned long volatile	spi_Status        = 0;

   \                                 In section .bss, align 4
     81              AT91_SPI_Buff               SPI_Buff;
   \                     SPI_Buff:
   \   00000000                      DS8 224
     82              AT91_SPI_Buff               *pSPI_Buff        = &SPI_Buff;
     83          //___________________________Koniec zmiennych lplkalnych________________________
     84          
     85          
     86          
     87          //Zmienne zewnêtrzne -------------------------------------------------------------
     88              extern    char Clock_Set_Command[6];
     89          
     90          //___________________________Koniec zmiennych zewnêtrznych________________________
     91          
     92            
     93          
     94          //-----------------------------------------------------------------------------
     95          //! Nazwa funkcji :    AT91F_SPI_Interrupt_handler
     96          //! Funkcja realizacji przerwania SPI
     97          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     98          void AT91F_SPI_Interrupt_handler (void)
     99          {
   \                     AT91F_SPI_Interrupt_handler:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    100          
    101            	spi_Status = pSPI -> SPI_SR;
   \   00000002   ....               LDR      R4,??DataTable11  ;; Real_Cs_RF
   \   00000004   6068               LDR      R0,[R4, #+4]
   \   00000006   0069               LDR      R0,[R0, #+16]
   \   00000008   6061               STR      R0,[R4, #+20]
    102          
    103          
    104          	// The Receive Counter Register has reached 0 since the last write in SPI_RCR or SPI_RNCR.
    105          	if (spi_Status & AT91C_SPI_ENDRX)	
   \   0000000A   1025               MOVS     R5,#+16
   \   0000000C   6069               LDR      R0,[R4, #+20]
   \   0000000E   2900               MOVS     R1,R5
   \   00000010   0842               TST      R0,R1
   \   00000012   13D0               BEQ      ??AT91F_SPI_Interrupt_handler_0
    106          	{
    107                            SPI_Response_Interpretation((pSPI_Buff->Buffer_TxCount));
   \   00000014   A069               LDR      R0,[R4, #+24]
   \   00000016   DD30               ADDS     R0,R0,#+221
   \   00000018   0078               LDRB     R0,[R0, #+0]
   \   0000001A   ........           BL       SPI_Response_Interpretation
    108                       
    109                           
    110                            if (SPI_Buff.WordToSendCount>0) 
   \   0000001E   ....               LDR      R0,??DataTable6  ;; SPI_Buff + 220
   \   00000020   0078               LDRB     R0,[R0, #+0]
   \   00000022   0028               CMP      R0,#+0
   \   00000024   02D0               BEQ      ??AT91F_SPI_Interrupt_handler_1
    111                            {
    112                              SPI_Send_Executive();
   \   00000026   ........           BL       SPI_Send_Executive
   \   0000002A   03E0               B        ??AT91F_SPI_Interrupt_handler_2
    113                            }
    114                            else
    115                            {
    116                              pSPI_Buff->Buffer_TxCount=0;
   \                     ??AT91F_SPI_Interrupt_handler_1:
   \   0000002C   A069               LDR      R0,[R4, #+24]
   \   0000002E   DD30               ADDS     R0,R0,#+221
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   0170               STRB     R1,[R0, #+0]
    117                            }
    118                             
    119                          spi_Endrx_Flag  = 1;
   \                     ??AT91F_SPI_Interrupt_handler_2:
   \   00000034   0120               MOVS     R0,#+1
   \   00000036   A060               STR      R0,[R4, #+8]
    120          		pSPI -> SPI_IDR = AT91C_SPI_ENDRX; // Interrupt is disabled to avoid inopportune interrupt 
   \   00000038   6068               LDR      R0,[R4, #+4]
   \   0000003A   8561               STR      R5,[R0, #+24]
    121                  }
    122                  
    123                    
    124                  // Both SPI_RCR and SPI_RNCR have a value of 0.
    125          	if (spi_Status & AT91C_SPI_RXBUFF)	
   \                     ??AT91F_SPI_Interrupt_handler_0:
   \   0000003C   6069               LDR      R0,[R4, #+20]
   \   0000003E   4006               LSLS     R0,R0,#+25
   \   00000040   01D5               BPL      ??AT91F_SPI_Interrupt_handler_3
    126          	{
    127          		spi_Rxbuff_Flag  = 1;
   \   00000042   0120               MOVS     R0,#+1
   \   00000044   2061               STR      R0,[R4, #+16]
    128          		//pSPI -> SPI_IDR = AT91C_SPI_RXBUFF; // Interrupt is disabled to avoid inopportune interrupt  
    129                          
    130                  }	        
    131                         
    132                  
    133                  /*
    134          
    135                  // The Transmit Counter Register has reached 0 since the last write in SPI_TCR or SPI_TNCR.
    136          	if (spi_Status & AT91C_SPI_ENDTX)	
    137          	{
    138          		spi_Endtx_Flag  = 1;
    139          		//pSPI -> SPI_IDR = AT91C_SPI_ENDTX; // Interrupt is disabled to avoid inopportune interrupt 
    140                  }	
    141                  
    142                  
    143           
    144                  
    145             
    146          	// A data has been recieved and transmitted to the RBR.
    147          	if (spi_Status & AT91C_SPI_RDRF)	
    148          	{ 
    149          		spi_Rdrf_Flag = 1;
    150          		pSPI -> SPI_IDR = AT91C_SPI_RDRF; // Interrupt is disabled to avoid inopportune interrupt 
    151                          
    152          
    153          	}
    154          
    155          	// The last data written in the TDR has been transmitted to the serializer
    156          	if (spi_Status & AT91C_SPI_TDRE)	
    157          	{
    158          		spi_Tdre_Flag  = 1;
    159          		pSPI -> SPI_IDR = AT91C_SPI_TDRE; // Interrupt is disabled to avoid inopportune interrupt  
    160          	}
    161          
    162          	// A mode fault has occured (NCS0 was tied low).
    163          	if (spi_Status & AT91C_SPI_MODF)	
    164          	{
    165          		spi_Modf_Flag  = 1;
    166          		pSPI -> SPI_IDR = AT91C_SPI_MODF; // Interrupt is disabled to avoid inopportune interrupt      
    167          	}
    168          
    169          	// An overrun error has occured.
    170          	if (spi_Status & AT91C_SPI_OVRES)	
    171          	{
    172          		spi_Ovred_Flag  = 1;
    173          		pSPI -> SPI_IDR = AT91C_SPI_OVRES; // Interrupt is disabled to avoid inopportune interrupt 
    174          	}
    175          	
    176          
    177          
    178          	// Both SPI_TCR and SPI_TNCR have a value of 0.
    179          	if (spi_Status & AT91C_SPI_TXBUFE)	
    180          	{
    181          		spi_Txbuff_Flag  = 1;
    182          		pSPI -> SPI_IDR = AT91C_SPI_TXBUFE; // Interrupt is disabled to avoid inopportune interrupt         
    183          	}
    184          
    185          	// NSS has risen
    186          	if (spi_Status & AT91C_SPI_NSSR)	
    187          	{
    188          		spi_Nssr_Flag  = 1;
    189          		pSPI -> SPI_IDR = AT91C_SPI_NSSR; // Interrupt is disabled to avoid inopportune interrupt
    190                  }
    191          
    192                      
    193          	// TDR and shift registers are empty
    194          	if (spi_Status & AT91C_SPI_TXEMPTY)	
    195          	{
    196          		spi_Txempty_Flag  = 1;
    197          		pSPI -> SPI_IDR = AT91C_SPI_TXEMPTY; // Interrupt is disabled to avoid inopportune interrupt   
    198          	}
    199                  
    200                  */
    201          
    202          }//_____________________________________________________________________________
   \                     ??AT91F_SPI_Interrupt_handler_3:
   \   00000046   38BC               POP      {R3-R5}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
    203          
    204          
    205          
    206          
    207          
    208          //-----------------------------------------------------------------------------
    209          //! Nazwa funkcji :    SpiMaster_Init
    210          //! Funkcja inicjalizacji komunikacji SPI w trybie master
    211          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    212          void SpiMaster_Init (void)
    213          {
   \                     SpiMaster_Init:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    214          	unsigned char error;
                 	              ^
Warning[Pe550]: variable "error" was set but never used
    215          	AT91PS_SPI     pSPI = AT91C_BASE_SPI;
    216          	
    217          	error = 0;
    218          
    219          	AT91F_SPI_Open ();	
   \   00000002   ........           BL       AT91F_SPI_Open
    220          
    221                  pSPI -> SPI_IER =  	(AT91C_SPI_RDRF + AT91C_SPI_TDRE + AT91C_SPI_MODF + AT91C_SPI_OVRES+ 
    222          					 AT91C_SPI_NSSR + AT91C_SPI_TXEMPTY + AT91C_SPI_SPIENS +AT91C_SPI_TXBUFE);
   \   00000006   ....               LDR      R4,??DataTable8  ;; 0xfffe0014
   \   00000008   ....               LDR      R0,??DataTable3  ;; 0x1038f
   \   0000000A   2060               STR      R0,[R4, #+0]
    223          
    224                   __enable_interrupt();
   \   0000000C   ........           BL       __iar_enable_interrupt
    225                   
    226                   
    227                   
    228                   
    229                            //SPI CONTROL REGISTER
    230              //=========================================================================================
    231              //| -------- | -------- | -------- | -------- | -------- | -------- | -------- | LASTXFER |
    232              //=========================================================================================
    233              
    234              //=========================================================================================
    235              //| -------- | -------- | -------- | -------- | -------- | -------- | -------- | -------- |
    236              //========================================================================================= 
    237              
    238              //=========================================================================================
    239              //| -------- | -------- | -------- | -------- | -------- | -------- | -------- | -------- |
    240              //=========================================================================================
    241              
    242              //=========================================================================================
    243              //|  SWRST   | -------- | -------- | -------- | -------- | -------- |  SPIDIS  |   SPEN   |
    244              //=========================================================================================
    245              //pSPI->SPI_CR = (AT91C_SPI_SPIEN | AT91C_SPI_SWRST);	
    246              pSPI->SPI_CR = AT91C_SPI_SPIEN;
   \   00000010   ....               LDR      R5,??DataTable10  ;; 0xfffe0000
   \   00000012   0120               MOVS     R0,#+1
   \   00000014   2860               STR      R0,[R5, #+0]
    247              
    248          
    249          
    250              
    251                  //SPI MODE REGISTER
    252              //=========================================================================================
    253              //|                                         DLYBCS                                        |
    254              //=========================================================================================
    255              
    256              //=========================================================================================
    257              //| -------- | -------- | -------- | -------- |                    PCS                    |
    258              //========================================================================================= 
    259              
    260              //=========================================================================================
    261              //| -------- | -------- | -------- | -------- | -------- | -------- | -------- | -------- |
    262              //=========================================================================================
    263              
    264              //=========================================================================================
    265              //|   LLB    | -------- | -------- |  MODFDIS | -------- |  PCSDEC  |    PS    |   MSTR   |
    266              //=========================================================================================
    267              //pSPI->SPI_MR = (AT91C_SPI_MSTR | AT91C_SPI_MODFDIS | AT91C_SPI_PCSDEC |AT91C_SPI_PS_VARIABLE | ((0x0)<<16));
    268          pSPI->SPI_MR = (AT91C_SPI_MSTR | AT91C_SPI_MODFDIS  |AT91C_SPI_PS_VARIABLE | ((0x0)<<16));
   \   00000016   2048               LDR      R0,??SpiMaster_Init_0  ;; 0xfffe0004
   \   00000018   1321               MOVS     R1,#+19
   \   0000001A   0160               STR      R1,[R0, #+0]
    269          
    270          
    271          
    272          
    273              
    274              //SPI CHIP SELECT REGISTER 
    275              //=========================================================================================
    276              //|                                         DLYBCT                                        |
    277              //=========================================================================================
    278              
    279              //=========================================================================================
    280              //|                                          DLYBS                                        |
    281              //========================================================================================= 
    282              
    283              //=========================================================================================
    284              //|                                          SCBR                                         |
    285              //=========================================================================================
    286              
    287              //=========================================================================================
    288              //|                 BITS                      |   CSAAT  | -------- |   NCPHA  |   CPOL   |
    289              //=========================================================================================
    290             
    291              
    292              char CS_BAUD = MCK / SPIBAUD_CSR0; 
    293              AT91F_SPI_CfgCs (AT91C_BASE_SPI, 0, AT91C_SPI_CPOL |  AT91C_SPI_BITS_16 | (AT91C_SPI_SCBR & (CS_BAUD << 8)) ); /*ustawienia dla RTC  :*/
   \   0000001C   1F4A               LDR      R2,??SpiMaster_Init_0+0x4  ;; 0x5081
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   2800               MOVS     R0,R5
   \   00000022   ........           BL       AT91F_SPI_CfgCs
    294              CS_BAUD = MCK / SPIBAUD_CSR1; 
    295              AT91F_SPI_CfgCs (AT91C_BASE_SPI, 1, AT91C_SPI_NCPHA |  AT91C_SPI_BITS_16 | AT91C_SPI_DLYBCT |(AT91C_SPI_SCBR & (CS_BAUD << 8)) ); /*ustawienia dla RF  :*/
   \   00000026   1E4A               LDR      R2,??SpiMaster_Init_0+0x8  ;; 0x1001882
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   2800               MOVS     R0,R5
   \   0000002C   ........           BL       AT91F_SPI_CfgCs
    296              CS_BAUD = MCK / SPIBAUD_CSR2; 
    297              AT91F_SPI_CfgCs (AT91C_BASE_SPI, 2, AT91C_SPI_NCPHA |  AT91C_SPI_BITS_16 | AT91C_SPI_DLYBCT |(AT91C_SPI_SCBR & (CS_BAUD << 8)) ); 
   \   00000030   1C4A               LDR      R2,??SpiMaster_Init_0+0xC  ;; 0x1001082
   \   00000032   0221               MOVS     R1,#+2
   \   00000034   2800               MOVS     R0,R5
   \   00000036   ........           BL       AT91F_SPI_CfgCs
    298              CS_BAUD = MCK / SPIBAUD_CSR3; 
    299                AT91F_SPI_CfgCs (AT91C_BASE_SPI, 3, AT91C_SPI_CPOL |  AT91C_SPI_BITS_16 | (AT91C_SPI_SCBR & (CS_BAUD << 8)) );
   \   0000003A   1B4A               LDR      R2,??SpiMaster_Init_0+0x10  ;; 0xc81
   \   0000003C   0321               MOVS     R1,#+3
   \   0000003E   2800               MOVS     R0,R5
   \   00000040   ........           BL       AT91F_SPI_CfgCs
    300                          
    301          
    302              
    303          
    304          
    305                    // konfiguracja PDC
    306                  AT91F_PDC_Open(AT91C_BASE_PDC_SPI);  //wyczyszczenie PDC
   \   00000044   194E               LDR      R6,??SpiMaster_Init_0+0x14  ;; 0xfffe0100
   \   00000046   3000               MOVS     R0,R6
   \   00000048   ........           BL       AT91F_PDC_Open
    307          
    308                  AT91F_PDC_DisableTx (AT91C_BASE_PDC_SPI); 
   \   0000004C   3000               MOVS     R0,R6
   \   0000004E   ........           BL       AT91F_PDC_DisableTx
    309                  AT91F_PDC_DisableRx (AT91C_BASE_PDC_SPI); 
   \   00000052   3000               MOVS     R0,R6
   \   00000054   ........           BL       AT91F_PDC_DisableRx
    310               
    311          
    312                  unsigned long xxR= AT91F_SPI_ReceiveFrame (AT91C_BASE_SPI, pSPI_Buff->Buffer_Rx1, 0,pSPI_Buff->Buffer_Rx2,0); //Ustawia bufor odbiorczy bufor dodatkowy
   \   00000058   ....               LDR      R7,??DataTable11  ;; Real_Cs_RF
   \   0000005A   B969               LDR      R1,[R7, #+24]
   \   0000005C   82B0               SUB      SP,SP,#+8
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   0090               STR      R0,[SP, #+0]
   \   00000062   0B00               MOVS     R3,R1
   \   00000064   6833               ADDS     R3,R3,#+104
   \   00000066   0200               MOVS     R2,R0
   \   00000068   2800               MOVS     R0,R5
   \   0000006A   ........           BL       AT91F_SPI_ReceiveFrame
   \   0000006E   02B0               ADD      SP,SP,#+8
    313                
    314           
    315                  AT91F_PDC_EnableTx (AT91C_BASE_PDC_SPI); 
   \   00000070   3000               MOVS     R0,R6
   \   00000072   ........           BL       AT91F_PDC_EnableTx
    316                  AT91F_PDC_EnableRx (AT91C_BASE_PDC_SPI); 
   \   00000076   3000               MOVS     R0,R6
   \   00000078   ........           BL       AT91F_PDC_EnableRx
    317              
    318                  
    319                  pSPI -> SPI_IDR = 0xFFFFFFFF;  
   \   0000007C   0C48               LDR      R0,??SpiMaster_Init_0+0x18  ;; 0xfffe0018
   \   0000007E   0021               MOVS     R1,#+0
   \   00000080   C943               MVNS     R1,R1            ;; #-1
   \   00000082   0160               STR      R1,[R0, #+0]
    320                  
    321                  
    322                  pSPI_Buff->BuffToSend = pSPI_Buff->Buffer_Tx1;   
   \   00000084   B869               LDR      R0,[R7, #+24]
   \   00000086   D821               MOVS     R1,#+216
   \   00000088   0200               MOVS     R2,R0
   \   0000008A   3432               ADDS     R2,R2,#+52
   \   0000008C   4250               STR      R2,[R0, R1]
    323          
    324           
    325                  AT91C_BASE_SPI -> SPI_IER = AT91C_SPI_ENDRX | AT91C_SPI_RXBUFF;
   \   0000008E   5020               MOVS     R0,#+80
   \   00000090   2060               STR      R0,[R4, #+0]
    326                  
    327          }//_____________________________________________________________________________
   \   00000092   F8BC               POP      {R3-R7}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
   \                     ??SpiMaster_Init_0:
   \   00000098   0400FEFF           DC32     0xfffe0004
   \   0000009C   81500000           DC32     0x5081
   \   000000A0   82180001           DC32     0x1001882
   \   000000A4   82100001           DC32     0x1001082
   \   000000A8   810C0000           DC32     0xc81
   \   000000AC   0001FEFF           DC32     0xfffe0100
   \   000000B0   1800FEFF           DC32     0xfffe0018
    328          
    329          
    330          
    331          
    332          
    333          //-----------------------------------------------------------------------------
    334          //!  Nazwa funkcji :    SPI_Send_Buff
    335          //!  Funkcja dodaje zadanie wys³ania poprzez SPI bufora danych do kolejki
    336          //-----------------------------------------------------------------------------
    337          //! 
    338          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    339          void SPI_SendB_Buff (char *Data_To_Send, unsigned int QuantityByte, char CS)
    340          {
   \                     SPI_SendB_Buff:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0300               MOVS     R3,R0
    341              
    342             // if ((QuantityByte==0) || (!CS)) return;
    343              if ((QuantityByte==0)) return;
   \   00000004   0029               CMP      R1,#+0
   \   00000006   38D0               BEQ      ??SPI_SendB_Buff_0
    344              
    345              short int QuantityWord   = QuantityByte/2;
   \   00000008   4908               LSRS     R1,R1,#+1
   \   0000000A   0904               LSLS     R1,R1,#+16
   \   0000000C   0914               ASRS     R1,R1,#+16
    346              short int RegToSendCount = SPI_Buff.WordToSendCount;
                               ^
Warning[Pe177]: variable "RegToSendCount" was declared but never referenced
    347              //short int QuantityREG    = QuantityWord/2;
    348                
    349              if (QuantityWord>SPI_BUFFER_REG_SIZE) return;
   \   0000000E   0D29               CMP      R1,#+13
   \   00000010   33DA               BGE      ??SPI_SendB_Buff_0
    350              
    351          
    352              
    353              while(QuantityWord+ (SPI_Buff.WordToSendCount)>SPI_BUFFER_REG_SIZE);
   \                     ??SPI_SendB_Buff_1:
   \   00000012   ....               LDR      R0,??DataTable6  ;; SPI_Buff + 220
   \   00000014   0078               LDRB     R0,[R0, #+0]
   \   00000016   0818               ADDS     R0,R1,R0
   \   00000018   0D28               CMP      R0,#+13
   \   0000001A   FADA               BGE      ??SPI_SendB_Buff_1
    354              
    355           
    356              for (short int i=0; i<QuantityWord; i++)
   \   0000001C   0024               MOVS     R4,#+0
   \   0000001E   1DE0               B        ??SPI_SendB_Buff_2
    357              {
    358          
    359                pSPI_Buff->BuffToSend[((pSPI_Buff->WordToSendCount+i)*4)+1]=Data_To_Send[i*2];
   \                     ??SPI_SendB_Buff_3:
   \   00000020   D830               ADDS     R0,R0,#+216
   \   00000022   6600               LSLS     R6,R4,#+1
   \   00000024   9F19               ADDS     R7,R3,R6
   \   00000026   0679               LDRB     R6,[R0, #+4]
   \   00000028   3619               ADDS     R6,R6,R4
   \   0000002A   B600               LSLS     R6,R6,#+2
   \   0000002C   0068               LDR      R0,[R0, #+0]
   \   0000002E   8019               ADDS     R0,R0,R6
   \   00000030   3E78               LDRB     R6,[R7, #+0]
   \   00000032   4670               STRB     R6,[R0, #+1]
    360                pSPI_Buff->BuffToSend[((pSPI_Buff->WordToSendCount+i)*4)]=Data_To_Send[(i*2)+1];
   \   00000034   A869               LDR      R0,[R5, #+24]
   \   00000036   D830               ADDS     R0,R0,#+216
   \   00000038   0679               LDRB     R6,[R0, #+4]
   \   0000003A   3619               ADDS     R6,R6,R4
   \   0000003C   B600               LSLS     R6,R6,#+2
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   7F78               LDRB     R7,[R7, #+1]
   \   00000042   8755               STRB     R7,[R0, R6]
    361                
    362                pSPI_Buff->BuffToSend[((pSPI_Buff->WordToSendCount+i)*4)+2]=(~CS);
   \   00000044   A869               LDR      R0,[R5, #+24]
   \   00000046   D830               ADDS     R0,R0,#+216
   \   00000048   0579               LDRB     R5,[R0, #+4]
   \   0000004A   2D19               ADDS     R5,R5,R4
   \   0000004C   AD00               LSLS     R5,R5,#+2
   \   0000004E   0068               LDR      R0,[R0, #+0]
   \   00000050   4019               ADDS     R0,R0,R5
   \   00000052   D543               MVNS     R5,R2
   \   00000054   8570               STRB     R5,[R0, #+2]
    363                //pSPI_Buff->WordToSendCount=pSPI_Buff->WordToSendCount+i+1;  
    364              }
   \   00000056   641C               ADDS     R4,R4,#+1
   \   00000058   2404               LSLS     R4,R4,#+16
   \   0000005A   2414               ASRS     R4,R4,#+16
   \                     ??SPI_SendB_Buff_2:
   \   0000005C   8C42               CMP      R4,R1
   \   0000005E   ....               LDR      R5,??DataTable11  ;; Real_Cs_RF
   \   00000060   A869               LDR      R0,[R5, #+24]
   \   00000062   DDDB               BLT      ??SPI_SendB_Buff_3
    365              pSPI_Buff->WordToSendCount=pSPI_Buff->WordToSendCount+QuantityWord;
   \   00000064   D830               ADDS     R0,R0,#+216
   \   00000066   0279               LDRB     R2,[R0, #+4]
   \   00000068   5118               ADDS     R1,R2,R1
   \   0000006A   0171               STRB     R1,[R0, #+4]
    366              
    367          
    368              
    369              if (pSPI_Buff->Buffer_TxCount==0)
   \   0000006C   A869               LDR      R0,[R5, #+24]
   \   0000006E   DD30               ADDS     R0,R0,#+221
   \   00000070   0078               LDRB     R0,[R0, #+0]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   01D1               BNE      ??SPI_SendB_Buff_0
    370              {
    371              SPI_Send_Executive();
   \   00000076   ........           BL       SPI_Send_Executive
   \                     ??SPI_SendB_Buff_0:
   \   0000007A   F8BC               POP      {R3-R7}
   \   0000007C   01BC               POP      {R0}
   \   0000007E   0047               BX       R0               ;; return
    372              }
    373          }//_____________________________________________________________________________
    374          
    375          
    376          
    377          
    378          //-----------------------------------------------------------------------------
    379          //!  Nazwa funkcji :    SPI_Send_Executive pSPI_Buff->Buffer_Rx
    380          //!  Funkcja wysy³a dane z bufora oczekuj¹cego a nastepnie zamienia bufory oczekuj¹cy z realizowanym
    381          //-----------------------------------------------------------------------------
    382          //! 
    383          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    384          void SPI_Send_Executive ()
    385          {
   \                     SPI_Send_Executive:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    386                char QuantityWord;
    387            
    388                AT91C_BASE_SPI -> SPI_IER = AT91C_SPI_ENDRX;
   \   00000002   ....               LDR      R0,??DataTable8  ;; 0xfffe0014
   \   00000004   1021               MOVS     R1,#+16
   \   00000006   0160               STR      R1,[R0, #+0]
    389          
    390                  spi_Endrx_Flag=0;
   \   00000008   ....               LDR      R4,??DataTable11  ;; Real_Cs_RF
   \   0000000A   0020               MOVS     R0,#+0
   \   0000000C   A060               STR      R0,[R4, #+8]
    391                  spi_Endtx_Flag=0;  
   \   0000000E   E060               STR      R0,[R4, #+12]
    392                  spi_Rxbuff_Flag=0;  
   \   00000010   2061               STR      R0,[R4, #+16]
    393                
    394                             
    395                  
    396                //ustawienie buforów nadawczych i odbiorczych naprzemiennie Buffer_Rx1->Buffer_Rx2, Buffer_Rx2->Buffer_Rx1, Buffer_Tx1->Buffer_Tx2
    397                if (pSPI_Buff->pBuffer_Tx == pSPI_Buff->Buffer_Tx1)
   \   00000012   A169               LDR      R1,[R4, #+24]
   \   00000014   0A00               MOVS     R2,R1
   \   00000016   D432               ADDS     R2,R2,#+212
   \   00000018   1368               LDR      R3,[R2, #+0]
   \   0000001A   0D00               MOVS     R5,R1
   \   0000001C   3435               ADDS     R5,R5,#+52
   \   0000001E   AB42               CMP      R3,R5
   \   00000020   0CD1               BNE      ??SPI_Send_Executive_0
    398                {
    399                   pSPI_Buff->pBuffer_Tx = pSPI_Buff->Buffer_Tx2;
   \   00000022   9C31               ADDS     R1,R1,#+156
   \   00000024   1160               STR      R1,[R2, #+0]
    400                   pSPI_Buff->pBuffer_Rx = pSPI_Buff->Buffer_Rx2;
   \   00000026   A169               LDR      R1,[R4, #+24]
   \   00000028   D022               MOVS     R2,#+208
   \   0000002A   0B00               MOVS     R3,R1
   \   0000002C   6833               ADDS     R3,R3,#+104
   \   0000002E   8B50               STR      R3,[R1, R2]
    401                   pSPI_Buff->BuffToSend = pSPI_Buff->Buffer_Tx1; 
   \   00000030   A169               LDR      R1,[R4, #+24]
   \   00000032   D822               MOVS     R2,#+216
   \   00000034   0B00               MOVS     R3,R1
   \   00000036   3433               ADDS     R3,R3,#+52
   \   00000038   8B50               STR      R3,[R1, R2]
   \   0000003A   09E0               B        ??SPI_Send_Executive_1
    402                }
    403                else 
    404                {
    405                   pSPI_Buff->pBuffer_Tx  = pSPI_Buff->Buffer_Tx1; 
   \                     ??SPI_Send_Executive_0:
   \   0000003C   3431               ADDS     R1,R1,#+52
   \   0000003E   1160               STR      R1,[R2, #+0]
    406                   pSPI_Buff->pBuffer_Rx  = pSPI_Buff->Buffer_Rx1;
   \   00000040   A169               LDR      R1,[R4, #+24]
   \   00000042   D022               MOVS     R2,#+208
   \   00000044   8950               STR      R1,[R1, R2]
    407                   pSPI_Buff->BuffToSend = pSPI_Buff->Buffer_Tx2; 
   \   00000046   A169               LDR      R1,[R4, #+24]
   \   00000048   D822               MOVS     R2,#+216
   \   0000004A   0B00               MOVS     R3,R1
   \   0000004C   9C33               ADDS     R3,R3,#+156
   \   0000004E   8B50               STR      R3,[R1, R2]
    408                }
    409               
    410                QuantityWord=pSPI_Buff->WordToSendCount;
   \                     ??SPI_Send_Executive_1:
   \   00000050   A169               LDR      R1,[R4, #+24]
   \   00000052   DC31               ADDS     R1,R1,#+220
   \   00000054   0D78               LDRB     R5,[R1, #+0]
    411                pSPI_Buff->WordToSendCount=0;
   \   00000056   0870               STRB     R0,[R1, #+0]
    412                pSPI_Buff->Buffer_TxCount=QuantityWord;
   \   00000058   A069               LDR      R0,[R4, #+24]
   \   0000005A   DD30               ADDS     R0,R0,#+221
   \   0000005C   2900               MOVS     R1,R5
   \   0000005E   0170               STRB     R1,[R0, #+0]
    413                unsigned long xxR= AT91F_SPI_ReceiveFrame (AT91C_BASE_SPI,pSPI_Buff->pBuffer_Rx, QuantityWord,0,0); 
   \   00000060   ....               LDR      R6,??DataTable10  ;; 0xfffe0000
   \   00000062   82B0               SUB      SP,SP,#+8
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   0090               STR      R0,[SP, #+0]
   \   00000068   0300               MOVS     R3,R0
   \   0000006A   2A00               MOVS     R2,R5
   \   0000006C   A069               LDR      R0,[R4, #+24]
   \   0000006E   D030               ADDS     R0,R0,#+208
   \   00000070   0168               LDR      R1,[R0, #+0]
   \   00000072   3000               MOVS     R0,R6
   \   00000074   ........           BL       AT91F_SPI_ReceiveFrame
   \   00000078   02B0               ADD      SP,SP,#+8
    414                unsigned long xxT = AT91F_SPI_SendFrame (AT91C_BASE_SPI,pSPI_Buff->pBuffer_Tx,QuantityWord,0,0 );
   \   0000007A   82B0               SUB      SP,SP,#+8
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   0090               STR      R0,[SP, #+0]
   \   00000080   0300               MOVS     R3,R0
   \   00000082   2A00               MOVS     R2,R5
   \   00000084   A069               LDR      R0,[R4, #+24]
   \   00000086   D430               ADDS     R0,R0,#+212
   \   00000088   0168               LDR      R1,[R0, #+0]
   \   0000008A   3000               MOVS     R0,R6
   \   0000008C   ........           BL       AT91F_SPI_SendFrame
   \   00000090   02B0               ADD      SP,SP,#+8
    415                
    416          }//_____________________________________________________________________________
   \   00000092   70BC               POP      {R4-R6}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
    417          
    418          
    419          
    420          
    421          

   \                                 In section Debug.txt, align 4, keep-with-next
    422          void SPI_SendWord(short int Val, char CS)
    423          {
   \                     SPI_SendWord:
   \   00000000   01B5               PUSH     {R0,LR}
    424            char tabSPI[3];
    425            tabSPI[0]=(char)((Val>>8) & 0xFF);
   \   00000002   6A46               MOV      R2,SP
   \   00000004   0300               MOVS     R3,R0
   \   00000006   1B12               ASRS     R3,R3,#+8
   \   00000008   1370               STRB     R3,[R2, #+0]
    426            tabSPI[1]=(char)(Val & 0xFF);
   \   0000000A   5070               STRB     R0,[R2, #+1]
    427            tabSPI[2]=0;
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   9070               STRB     R0,[R2, #+2]
    428            
    429            SPI_SendB_Buff(tabSPI,2,CS);
   \   00000010   0A00               MOVS     R2,R1
   \   00000012   0221               MOVS     R1,#+2
   \   00000014   6846               MOV      R0,SP
   \   00000016   ........           BL       SPI_SendB_Buff
    430          }
   \   0000001A   08BC               POP      {R3}
   \   0000001C   01BC               POP      {R0}
   \   0000001E   0047               BX       R0               ;; return
    431          
    432          
    433          
    434              
    435          
    436          //-----------------------------------------------------------------------------
    437          //! Nazwa funkcji :    SPI_Response_Interpretation
    438          //! Funkcja interpretacji danych otrzymanych z lini SPI 
    439          //! paramentr funkcji to iloæ odebranych danych
    440          //-----------------------------------------------------------------------------
    441          
    442          

   \                                 In section .bss, align 4
    443          char *zm_tmp1;
   \                     zm_tmp1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    444          char *zm_tmp2;
   \                     zm_tmp2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    445          char zm_tmp3;
   \                     zm_tmp3:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
    446          
    447          
    448          char Real_Cs_RF=0xFF-Cs_RF;
   \                     Real_Cs_RF:
   \   00000000   FD                 DC8 253
   \   00000001   000000             DC8 0, 0, 0
   \                     pSPI:
   \   00000004   0000FEFF           DC32 0FFFE0000H
   \                     spi_Endrx_Flag:
   \   00000008   00000000           DC32 0
   \                     spi_Endtx_Flag:
   \   0000000C   00000000           DC32 0
   \                     spi_Rxbuff_Flag:
   \   00000010   00000000           DC32 0
   \                     spi_Status:
   \   00000014   00000000           DC32 0
   \                     pSPI_Buff:
   \   00000018   ........           DC32 SPI_Buff
    449          

   \                                 In section Debug.txt, align 4, keep-with-next
    450          void SPI_Response_Interpretation(char TxCount)
    451          { 
   \                     SPI_Response_Interpretation:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    452             char *TMP_pBuffer_Tx = pSPI_Buff->pBuffer_Tx;
   \   00000002   ....               LDR      R0,??DataTable11  ;; Real_Cs_RF
   \   00000004   8169               LDR      R1,[R0, #+24]
   \   00000006   D031               ADDS     R1,R1,#+208
   \   00000008   4C68               LDR      R4,[R1, #+4]
    453             char *TMP_pBuffer_Rx = pSPI_Buff->pBuffer_Rx;
   \   0000000A   0D68               LDR      R5,[R1, #+0]
    454             char move;  
    455             
    456          
    457             
    458             if (TMP_pBuffer_Tx[2]==Real_Cs_RF)
   \   0000000C   A178               LDRB     R1,[R4, #+2]
   \   0000000E   0078               LDRB     R0,[R0, #+0]
   \   00000010   8142               CMP      R1,R0
   \   00000012   05D1               BNE      ??SPI_Response_Interpretation_0
    459             {
    460               SPI_RFM12_Execute(TMP_pBuffer_Tx, TMP_pBuffer_Rx);  
   \   00000014   2900               MOVS     R1,R5
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       SPI_RFM12_Execute
    461               TMP_pBuffer_Tx+=4;
   \   0000001C   241D               ADDS     R4,R4,#+4
    462               TMP_pBuffer_Rx+=4;
   \   0000001E   2D1D               ADDS     R5,R5,#+4
    463             }
    464          
    465             if (TMP_pBuffer_Tx[2]==0xFF-Cs_Clock)
   \                     ??SPI_Response_Interpretation_0:
   \   00000020   A078               LDRB     R0,[R4, #+2]
   \   00000022   FE28               CMP      R0,#+254
   \   00000024   04D1               BNE      ??SPI_Response_Interpretation_1
    466             {
    467               move=SPI_Clock_Execute(TMP_pBuffer_Tx+1, TMP_pBuffer_Rx);  
                           ^
Warning[Pe223]: function "SPI_Clock_Execute" declared implicitly
   \   00000026   2900               MOVS     R1,R5
   \   00000028   641C               ADDS     R4,R4,#+1
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       SPI_Clock_Execute
    468               TMP_pBuffer_Tx+=move;
    469               TMP_pBuffer_Rx+=move;
    470             }
    471            
    472             /*
    473               char wsk=0;
    474          
    475              zm_tmp1=&TxCount;
    476              zm_tmp2=&wsk;
    477              
    478              TxCount *=4;
    479          
    480              wsk=0;
    481             
    482              while (TxCount>wsk)  //dopuki wszystkie odebrane dane nie zosta³y zinterpretowane
    483              {
    484                
    485                switch (0xF-((pSPI_Buff->pBuffer_Tx[wsk+2])&0xF))
    486                {
    487                  
    488          /*
                 ^
Warning[Pe009]: nested comment is not allowed
    489                  case Cs_Clock:  
    490                     wsk += SPI_Clock_Execute(pSPI_Buff->pBuffer_Tx+wsk+1, pSPI_Buff->pBuffer_Rx+wsk); 
    491                     //wsk *=2; 
    492                      wsk=TxCount;
    493                  break;
    494          
    495                  case Cs_RF:  
    496                    wsk=0;
    497                     SPI_RFM12_Execute(pSPI_Buff->pBuffer_Tx+wsk, pSPI_Buff->pBuffer_Rx+wsk);       
    498                     wsk +=4;
    499                     if (0xF-((pSPI_Buff->pBuffer_Tx[wsk+2])&0xF)==Cs_RF) wsk +=4;
    500                     if (0xF-((pSPI_Buff->pBuffer_Tx[wsk+2])&0xF)==Cs_RF) wsk +=4;
    501                     if (0xF-((pSPI_Buff->pBuffer_Tx[wsk+2])&0xF)==Cs_RF) wsk +=4;
    502          
    503                  break;
    504                  
    505                  default:
    506                    wsk=TxCount;
    507                    wsk=0;
    508                     SPI_RFM12_Execute(pSPI_Buff->pBuffer_Tx+wsk, pSPI_Buff->pBuffer_Rx+wsk); 
    509                     
    510                  break;  
    511             
    512                }
    513           
    514                //zm_tmp3=(0xF-((pSPI_Buff->pBuffer_Tx[wsk+2])&0xF));
    515                wsk=TxCount;
    516              }
    517            
    518          wsk =0;
    519               SPI_RFM12_Execute(pSPI_Buff->pBuffer_Tx+wsk, pSPI_Buff->pBuffer_Rx+wsk);  
    520          
    521          */
    522            
    523            
    524            
    525          }//_____________________________________________________________________________
   \                     ??SPI_Response_Interpretation_1:
   \   00000030   38BC               POP      {R3-R5}
   \   00000032   01BC               POP      {R0}
   \   00000034   0047               BX       R0               ;; return
    526          
    527          
    528          
    529          
    530          
    531          
    532          
    533          
    534          
    535          
    536          
    537          
    538          
    539          
    540          //FUNKCJE BIBLIOTECZNE *********************************************************
    541          
    542          
    543          //*--------------------------------------------------------------------------------------
    544          //* Function Name       	: AT91F_SPI_SWReset
    545          //* Object              	: SPI Software reset and check reg after reset
    546          //* Input Parameters    : none.
    547          //* Output Parameters  : none.
    548          //*--------------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    549          void AT91F_SPI_SWReset (const AT91PS_SPI pSpi)
    550          {
    551          	pSpi -> SPI_CR  = AT91C_SPI_SWRST; // SW reset
   \                     AT91F_SPI_SWReset:
   \   00000000   8021               MOVS     R1,#+128
   \   00000002   0160               STR      R1,[R0, #+0]
    552          }
   \   00000004   7047               BX       LR               ;; return
    553          
    554          
    555          
    556          //*--------------------------------------------------------------------------------------
    557          //* Function Name       	: AT91F_SPI_En_Dis
    558          //* Object              	: SPI Enable  Disable
    559          //* Input Parameters    : Enable.
    560          //* Output Parameters  : error.
    561          //*--------------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    562          void AT91F_SPI_En_Dis (const AT91PS_SPI pSpi, unsigned char Enable)
    563          {
   \                     AT91F_SPI_En_Dis:
   \   00000000   01B5               PUSH     {R0,LR}
    564          	volatile unsigned int error;
    565          
    566          	error = 0;
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   0092               STR      R2,[SP, #+0]
    567          
    568          	switch (Enable)
   \   00000006   0029               CMP      R1,#+0
   \   00000008   04D0               BEQ      ??AT91F_SPI_En_Dis_0
   \   0000000A   0129               CMP      R1,#+1
   \   0000000C   08D0               BEQ      ??AT91F_SPI_En_Dis_1
   \   0000000E   0229               CMP      R1,#+2
   \   00000010   0CD0               BEQ      ??AT91F_SPI_En_Dis_2
   \   00000012   10E0               B        ??AT91F_SPI_En_Dis_3
    569          	{ 
    570          		case ENABLE_SPI:
    571          		pSpi -> SPI_CR  = AT91C_SPI_SPIEN; // SPI is enable
   \                     ??AT91F_SPI_En_Dis_0:
   \   00000014   0121               MOVS     R1,#+1
   \   00000016   0160               STR      R1,[R0, #+0]
    572          		Delay (0xFF);
                 		^
Warning[Pe223]: function "Delay" declared implicitly
   \   00000018   FF20               MOVS     R0,#+255
   \   0000001A   ........           BL       Delay
   \   0000001E   0AE0               B        ??AT91F_SPI_En_Dis_3
    573          		break;
    574          
    575          		case DISABLE_SPI:
    576          		pSpi -> SPI_CR  = AT91C_SPI_SPIDIS; // SPI is Disable
   \                     ??AT91F_SPI_En_Dis_1:
   \   00000020   0221               MOVS     R1,#+2
   \   00000022   0160               STR      R1,[R0, #+0]
    577          		Delay (0xFF);
   \   00000024   FF20               MOVS     R0,#+255
   \   00000026   ........           BL       Delay
   \   0000002A   04E0               B        ??AT91F_SPI_En_Dis_3
    578          		break;
    579          
    580          		case ENABLE_DISABLE_SPI:
    581          		pSpi -> SPI_CR  = (AT91C_SPI_SPIDIS | AT91C_SPI_SPIEN); // Enable and disable are set @ the same time => SPI shoulb be disable
   \                     ??AT91F_SPI_En_Dis_2:
   \   0000002C   0321               MOVS     R1,#+3
   \   0000002E   0160               STR      R1,[R0, #+0]
    582          		Delay (0xFF);
   \   00000030   FF20               MOVS     R0,#+255
   \   00000032   ........           BL       Delay
    583          		break;
    584          	}
    585          }
   \                     ??AT91F_SPI_En_Dis_3:
   \   00000036   08BC               POP      {R3}
   \   00000038   01BC               POP      {R0}
   \   0000003A   0047               BX       R0               ;; return
    586          
    587          
    588          //*--------------------------------------------------------------------------------------
    589          //* Function Name       : AT91F_Set_SPI_CSR
    590          //* Object              : Allows programming SPI_CSR registers
    591          //* Input Parameters    : Csr_Value.
    592          //* Input Parameters    : Csr_Number.
    593          //* Output Parameters   : none.
    594          //*--------------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    595          void AT91F_Set_SPI_CSR (const AT91PS_SPI pSpi, unsigned long Csr_Value, unsigned long Csr_Number)
    596          {
   \                     AT91F_Set_SPI_CSR:
   \   00000000   01B5               PUSH     {R0,LR}
    597          	switch (Csr_Number)
   \   00000002   002A               CMP      R2,#+0
   \   00000004   06D0               BEQ      ??AT91F_Set_SPI_CSR_0
   \   00000006   012A               CMP      R2,#+1
   \   00000008   06D0               BEQ      ??AT91F_Set_SPI_CSR_1
   \   0000000A   022A               CMP      R2,#+2
   \   0000000C   06D0               BEQ      ??AT91F_Set_SPI_CSR_2
   \   0000000E   032A               CMP      R2,#+3
   \   00000010   06D0               BEQ      ??AT91F_Set_SPI_CSR_3
   \   00000012   06E0               B        ??AT91F_Set_SPI_CSR_4
    598          	{
    599          		case CSR0:
    600          		pSpi -> SPI_CSR[CSR0]  = Csr_Value; // CSR0 <- Csr_Value
   \                     ??AT91F_Set_SPI_CSR_0:
   \   00000014   0163               STR      R1,[R0, #+48]
   \   00000016   04E0               B        ??AT91F_Set_SPI_CSR_4
    601          		break;
    602          
    603          		case CSR1:
    604          		pSpi -> SPI_CSR[CSR1]  = Csr_Value; // CSR1 <- Csr_Value
   \                     ??AT91F_Set_SPI_CSR_1:
   \   00000018   4163               STR      R1,[R0, #+52]
   \   0000001A   02E0               B        ??AT91F_Set_SPI_CSR_4
    605          		break;
    606          		
    607          		case CSR2:
    608          		pSpi -> SPI_CSR[CSR2]  = Csr_Value; // CSR2 <- Csr_Value
   \                     ??AT91F_Set_SPI_CSR_2:
   \   0000001C   8163               STR      R1,[R0, #+56]
   \   0000001E   00E0               B        ??AT91F_Set_SPI_CSR_4
    609          		break;
    610          
    611          		case CSR3:
    612          		pSpi -> SPI_CSR[CSR3]  = Csr_Value; // CSR3 <- Csr_Value
   \                     ??AT91F_Set_SPI_CSR_3:
   \   00000020   C163               STR      R1,[R0, #+60]
    613          		break;
    614          
    615          		default:
    616          		break; 
    617          	}
    618          }
   \                     ??AT91F_Set_SPI_CSR_4:
   \   00000022   08BC               POP      {R3}
   \   00000024   01BC               POP      {R0}
   \   00000026   0047               BX       R0               ;; return
    619          
    620          
    621          //*--------------------------------------------------------------------------------------
    622          //* Function Name       	: AT91F_SPI_Read_Data
    623          //* Object              	: Read SPI_RDR
    624          //* Input Parameters    : none.
    625          //* Output Parameters  : Data_Recieved.
    626          //*--------------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    627          unsigned long AT91F_SPI_Read_Data (const AT91PS_SPI pSpi)
    628          {
   \                     AT91F_SPI_Read_Data:
   \   00000000   30B4               PUSH     {R4,R5}
   \   00000002   0100               MOVS     R1,R0
    629          	unsigned long Data_Recieved;
    630          
    631                  AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA3 ;AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA3; 
   \   00000004   0822               MOVS     R2,#+8
   \   00000006   064B               LDR      R3,??AT91F_SPI_Read_Data_0  ;; 0xfffff430
   \   00000008   1A60               STR      R2,[R3, #+0]
   \   0000000A   064C               LDR      R4,??AT91F_SPI_Read_Data_0+0x4  ;; 0xfffff434
   \   0000000C   2260               STR      R2,[R4, #+0]
    632          	/*spi_Rdrf_Flag = 0;
    633          	pSpi -> SPI_IER = AT91C_SPI_RDRF; // Disabled in the interrupt handler
    634          
    635          	while (spi_Rdrf_Flag == 0);
    636                  */
    637          	Data_Recieved = (pSpi -> SPI_RDR & 0x000FFFFF); // Read RDR and mask non used bits
   \   0000000E   8868               LDR      R0,[R1, #+8]
   \   00000010   0003               LSLS     R0,R0,#+12
   \   00000012   000B               LSRS     R0,R0,#+12
    638          
    639          	pSpi -> SPI_IER = AT91C_SPI_RDRF; // RDF re enabled (see handler)
   \   00000014   0125               MOVS     R5,#+1
   \   00000016   4D61               STR      R5,[R1, #+20]
    640          
    641                  AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA3 ;AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA3; 
   \   00000018   1A60               STR      R2,[R3, #+0]
   \   0000001A   2260               STR      R2,[R4, #+0]
    642          	return Data_Recieved; // Return RDR (Read Data + PCS)
   \   0000001C   30BC               POP      {R4,R5}
   \   0000001E   7047               BX       LR               ;; return
   \                     ??AT91F_SPI_Read_Data_0:
   \   00000020   30F4FFFF           DC32     0xfffff430
   \   00000024   34F4FFFF           DC32     0xfffff434
    643          }
    644          
    645          
    646          //*--------------------------------------------------------------------------------------
    647          //* Function Name       : AT91F_SPI_Send_Data
    648          //* Object              : Send a data
    649          //* Input Parameters    : Data_To_Send.
    650          //* Output Parameters   : none.
    651          //*--------------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    652          void AT91F_SPI_Send_Data (const AT91PS_SPI pSpi, unsigned long Data_To_Send)
    653          {
    654          	// IMPORTANT: Data_To_Send = TD (in fixed mode)
    655          	// IMPORTANT: Data_To_Send = TD + PCS + LASTXFER (in variable mode)
    656          	spi_Tdre_Flag = 0;
   \                     AT91F_SPI_Send_Data:
   \   00000000   034A               LDR      R2,??AT91F_SPI_Send_Data_0  ;; spi_Tdre_Flag
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   1370               STRB     R3,[R2, #+0]
    657          
    658          	Data_To_Send &= 0x010FFFFF; // mask non used bits
    659          	pSpi -> SPI_TDR = Data_To_Send;
   \   00000006   034A               LDR      R2,??AT91F_SPI_Send_Data_0+0x4  ;; 0x10fffff
   \   00000008   0A40               ANDS     R2,R2,R1
   \   0000000A   C260               STR      R2,[R0, #+12]
    660          }
   \   0000000C   7047               BX       LR               ;; return
   \   0000000E   C046               Nop      
   \                     ??AT91F_SPI_Send_Data_0:
   \   00000010   ........           DC32     spi_Tdre_Flag
   \   00000014   FFFF0F01           DC32     0x10fffff
    661          
    662          
    663          //*--------------------------------------------------------------------------------------
    664          //* Function Name       	: AT91F_SPI_Open
    665          //* Object              	: Open the SPI0
    666          //* Input Parameters    : none.
    667          //* Output Parameters  : error.
    668          //*--------------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    669          void  AT91F_SPI_Open (void)
    670          {
   \                     AT91F_SPI_Open:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    671          // MISO, MOSI, CLK, NPCS[3:0] are configured
    672          // SPI (IP) clock is activated
    673          // Interrupt Handler is configured
    674          // SPI is resetted
    675          
    676          	AT91PS_SPI     pSPI = AT91C_BASE_SPI;
    677          
    678          	//  Cfp SPI PIO, PMC, ...
    679          		// Configure SPI PIOs
    680            		AT91F_SPI_CfgPIO ();
   \   00000002   ........           BL       AT91F_SPI_CfgPIO
    681          
    682          	  	// Configure PMC by enabling SPI clock
    683            		AT91F_SPI_CfgPMC ();
   \   00000006   ........           BL       AT91F_SPI_CfgPMC
    684          
    685          		// Configure SPI interrupt
    686          		AT91F_AIC_ConfigureIt ( AT91C_BASE_AIC, AT91C_ID_SPI, SPI_PRIOR, AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE, AT91F_SPI_Interrupt_handler);
   \   0000000A   104C               LDR      R4,??AT91F_SPI_Open_0  ;; 0xfffff000
   \   0000000C   82B0               SUB      SP,SP,#+8
   \   0000000E   1048               LDR      R0,??AT91F_SPI_Open_0+0x4  ;; AT91F_SPI_Interrupt_handler
   \   00000010   0090               STR      R0,[SP, #+0]
   \   00000012   2023               MOVS     R3,#+32
   \   00000014   0622               MOVS     R2,#+6
   \   00000016   0521               MOVS     R1,#+5
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   ........           BL       AT91F_AIC_ConfigureIt
   \   0000001E   02B0               ADD      SP,SP,#+8
    687          	  	AT91F_AIC_EnableIt (AT91C_BASE_AIC, AT91C_ID_SPI);	
   \   00000020   0521               MOVS     R1,#+5
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       AT91F_AIC_EnableIt
    688          
    689          		// Reset the SPI (note it is possible to reset the SPI even if SPI is disabled)
    690          		AT91F_SPI_SWReset (AT91C_BASE_SPI);
   \   00000028   0A4C               LDR      R4,??AT91F_SPI_Open_0+0x8  ;; 0xfffe0000
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_SPI_SWReset
    691          
    692          		spi_Txempty_Flag = 0;
   \   00000030   094D               LDR      R5,??AT91F_SPI_Open_0+0xC  ;; spi_Txempty_Flag
   \   00000032   0026               MOVS     R6,#+0
   \   00000034   2E60               STR      R6,[R5, #+0]
    693          
    694          		pSPI -> SPI_IER =  	(AT91C_SPI_RDRF + AT91C_SPI_TDRE + AT91C_SPI_MODF + AT91C_SPI_OVRES+ 
    695          							 AT91C_SPI_NSSR + AT91C_SPI_TXEMPTY + AT91C_SPI_SPIENS + AT91C_SPI_TXBUFE);
   \   00000036   0948               LDR      R0,??AT91F_SPI_Open_0+0x10  ;; 0xfffe0014
   \   00000038   0949               LDR      R1,??AT91F_SPI_Open_0+0x14  ;; 0x1038f
   \   0000003A   0160               STR      R1,[R0, #+0]
    696          
    697          		 AT91F_SPI_En_Dis (AT91C_BASE_SPI, ENABLE_SPI);
   \   0000003C   3100               MOVS     R1,R6
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       AT91F_SPI_En_Dis
    698          
    699          		spi_Txempty_Flag = 0;
   \   00000044   2E60               STR      R6,[R5, #+0]
    700          }
   \   00000046   70BC               POP      {R4-R6}
   \   00000048   01BC               POP      {R0}
   \   0000004A   0047               BX       R0               ;; return
   \                     ??AT91F_SPI_Open_0:
   \   0000004C   00F0FFFF           DC32     0xfffff000
   \   00000050   ........           DC32     AT91F_SPI_Interrupt_handler
   \   00000054   0000FEFF           DC32     0xfffe0000
   \   00000058   ........           DC32     spi_Txempty_Flag
   \   0000005C   1400FEFF           DC32     0xfffe0014
   \   00000060   8F030100           DC32     0x1038f

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   8F030100           DC32     0x1038f

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     SPI_Buff + 220

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   1400FEFF           DC32     0xfffe0014

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0000FEFF           DC32     0xfffe0000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   ........           DC32     Real_Cs_RF
    701          
    702          
    703          
    704          
    705          
    706          

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     AT91F_AIC_ConfigureIt           24
     AT91F_AIC_EnableIt               0
     AT91F_PDC_DisableRx              0
     AT91F_PDC_DisableTx              0
     AT91F_PDC_EnableRx               0
     AT91F_PDC_EnableTx               0
     AT91F_PDC_IsNextRxEmpty          0
     AT91F_PDC_IsNextTxEmpty          0
     AT91F_PDC_IsRxEmpty              0
     AT91F_PDC_IsTxEmpty              0
     AT91F_PDC_Open                   8
     AT91F_PDC_ReceiveFrame          24
     AT91F_PDC_SendFrame             24
     AT91F_PDC_SetNextRx              0
     AT91F_PDC_SetNextTx              0
     AT91F_PDC_SetRx                  0
     AT91F_PDC_SetTx                  0
     AT91F_PIO_CfgPeriph              0
     AT91F_PMC_EnablePeriphClock      0
     AT91F_SPI_CfgCs                  0
     AT91F_SPI_CfgPIO                 8
     AT91F_SPI_CfgPMC                 8
     AT91F_SPI_En_Dis                 8
     AT91F_SPI_Interrupt_handler     16
     AT91F_SPI_Open                  24
     AT91F_SPI_Read_Data              8
     AT91F_SPI_ReceiveFrame          16
     AT91F_SPI_SWReset                0
     AT91F_SPI_SendFrame             16
     AT91F_SPI_Send_Data              0
     AT91F_Set_SPI_CSR                8
     SPI_Response_Interpretation     16
     SPI_SendB_Buff                  24
     SPI_SendWord                     8
     SPI_Send_Executive              24
     SpiMaster_Init                  32


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     AT91F_AIC_ConfigureIt         44
     AT91F_AIC_EnableIt            12
     AT91F_PDC_SetNextRx            6
     AT91F_PDC_SetNextTx            6
     AT91F_PDC_SetRx                6
     AT91F_PDC_SetTx                6
     AT91F_PDC_EnableTx             8
     AT91F_PDC_EnableRx             6
     AT91F_PDC_DisableTx            8
     AT91F_PDC_DisableRx            6
     AT91F_PDC_IsTxEmpty           10
     AT91F_PDC_IsNextTxEmpty       10
     AT91F_PDC_IsRxEmpty           10
     AT91F_PDC_IsNextRxEmpty       10
     AT91F_PDC_Open                72
     AT91F_PDC_SendFrame           70
     AT91F_PDC_ReceiveFrame        70
     AT91F_PIO_CfgPeriph           10
     AT91F_PMC_EnablePeriphClock    4
     AT91F_SPI_CfgCs                8
     AT91F_SPI_ReceiveFrame        26
     AT91F_SPI_SendFrame           26
     AT91F_SPI_CfgPMC              20
     AT91F_SPI_CfgPIO              28
     spi_Rdrf_Flag                  1
     spi_Tdre_Flag                  1
     spi_Modf_Flag                  1
     spi_Ovred_Flag                 1
     spi_Nssr_Flag                  1
     spi_Txempty_Flag               4
     spi_Spiens_Flag                1
     spi_Txbuff_Flag                4
     SPI_Buff                     224
     AT91F_SPI_Interrupt_handler   76
     SpiMaster_Init               180
     SPI_SendB_Buff               128
     SPI_Send_Executive           152
     SPI_SendWord                  32
     zm_tmp1                        4
     zm_tmp2                        4
     zm_tmp3                        1
     Real_Cs_RF                    28
     SPI_Response_Interpretation   54
     AT91F_SPI_SWReset              6
     AT91F_SPI_En_Dis              60
     AT91F_Set_SPI_CSR             40
     AT91F_SPI_Read_Data           40
     AT91F_SPI_Send_Data           24
     AT91F_SPI_Open               100
     ??DataTable3                   4
     ??DataTable6                   4
     ??DataTable8                   4
     ??DataTable10                  4
     ??DataTable11                  4
      Others                       16

 
   247 bytes in section .bss
    28 bytes in section .data
 1 410 bytes in section Debug.txt
 
 912 bytes of CODE memory (+ 498 bytes shared)
 275 bytes of DATA memory

Errors: none
Warnings: 6
