###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           20/Mar/2013  07:53:32 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\Framework\RS_WIN.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\RS_WIN.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -D S300i   #
#                    -D _TESTER_ -lC "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\TESTER S300i\List\"                #
#                    --diag_suppress Pa082 -o "D:\Zeuron\Projekty\S300\S300-p #
#                    rogram v1.3 BETA- 14.03.2013\TESTER S300i\Obj\"          #
#                    --no_unroll --no_inline --no_tbaa --no_scheduling        #
#                    --debug --endian little --cpu ARM7TDMI -e --fpu None     #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.3       #
#                    BETA- 14.03.2013\lib\AT91SAM7S256\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.3 BETA- 14.03.2013\cdc\" -I                           #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\core\" -I "D:\Zeuron\Projekty\S300\S300-progr #
#                    am v1.3 BETA- 14.03.2013\startup\" -I                    #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-         #
#                    14.03.2013\Framework\" -I "D:\Zeuron\Projekty\S300\S300- #
#                    program v1.3 BETA- 14.03.2013\Framework\Configuration\"  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 5.0\ARM\INC\" --section .text=Debug.txt        #
#                    --interwork --cpu_mode thumb -Om                         #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\List\RS_WIN.lst                  #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.3 BETA-          #
#                    14.03.2013\TESTER S300i\Obj\RS_WIN.o                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\RS_WIN.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : RS_WIN.c                                 *//
      7          //*  Opis                         : Plik komunikacji z programem RS-win      *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #include <intrinsics.h>
     24          #include "core/common.h"
     25          #include "core/device.h"
     26          #include "core/trace.h"
     27          #include "flash.h"
     28          #include "Framework.h"
     29          #include "Application_prog.h"
     30          
     31               

   \                                 In section .bss, align 4
     32          RAM ram;
   \                     ram:
   \   00000000                      DS8 400
     33          extern char *pProg;
     34          //extern FlashPagesOffset;

   \                                 In section .bss, align 4
     35          ConversFC Convers_DW_B;
   \                     Convers_DW_B:
   \   00000000                      DS8 4
     36          
     37          
     38          
     39          
     40          //Zmienne zewnêtrzne -------------------------------------------------
     41              extern char g_czas_petli;
     42              extern const char identyfikacja[];
     43              extern int FlashProgramOfset;
     44              extern int FlashProgramReserveOfset;
     45              //extern char start_cykl;
     46              extern char g_Stop_Program;                                                     //1- zatrzymuje program
     47              extern char g_Restart_Program;                                                  //1- restartuje program
     48              extern _ProgramTab gProg;
     49              extern void Delay (unsigned long a);
     50              extern _Trap      Trap;
     51          //_______________Koniec globalnych zmiennych zewnêtrznych ______________________
     52          
     53              
     54          
     55          //*-----------------------------------------------------------------------------
     56          //* Nazwa funkcji :    komunikcja_RSwin
     57          //* Interpretacja i wykonanie rozkazów wysy³anych z programu RS-win
     58          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     59          void komunikcja_RSwin(char *ptr1, char *ptr2, unsigned int *ptr3)
     60          {
   \                     komunikcja_RSwin:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   0190               STR      R0,[SP, #+4]
     61          
     62          
     63              //Zmienne lokalne ----------------------------------------------------------
     64          
     65                unsigned long adres =0;;
     66              //----------------Koniec zmiennych lokalnych -------------------------------
     67            
     68           
     69              //Zmienne tymczasowe -------------------------------------------------------
     70                int tmp =0;
   \   0000000C   0700               MOVS     R7,R0
     71                
     72              //----------------Koniec zmiennych tymczasowych ---------------------------- 
     73            
     74            
     75                
     76                
     77              //Zapis do dowolnego segmentu ----------------------------------------------
     78              if ((ptr1[0]==0xAD)& (ptr1[1]==0x05)) 
   \   0000000E   2078               LDRB     R0,[R4, #+0]
   \   00000010   AD28               CMP      R0,#+173
   \   00000012   60D1               BNE      ??komunikcja_RSwin_0
   \   00000014   6078               LDRB     R0,[R4, #+1]
   \   00000016   0528               CMP      R0,#+5
   \   00000018   5DD1               BNE      ??komunikcja_RSwin_0
     79              {
     80                //Zapis programu zrodlowego
     81                adres = ptr1[4]+(ptr1[5]*0x100);
   \   0000001A   2079               LDRB     R0,[R4, #+4]
   \   0000001C   6179               LDRB     R1,[R4, #+5]
   \   0000001E   0902               LSLS     R1,R1,#+8
   \   00000020   4018               ADDS     R0,R0,R1
   \   00000022   0190               STR      R0,[SP, #+4]
     82                if (ptr1[3]==0x70)
   \   00000024   E078               LDRB     R0,[R4, #+3]
   \   00000026   7028               CMP      R0,#+112
   \   00000028   37D1               BNE      ??komunikcja_RSwin_1
     83                {
     84          
     85          
     86                       unsigned int Save = __get_interrupt_state();            
   \   0000002A   ........           BL       __iar_get_interrupt_state
   \   0000002E   0090               STR      R0,[SP, #+0]
     87                          __disable_interrupt();
   \   00000030   ........           BL       __iar_disable_interrupt
     88                          
     89                      if (adres==0) 
   \   00000034   0198               LDR      R0,[SP, #+4]
   \   00000036   0028               CMP      R0,#+0
   \   00000038   06D1               BNE      ??komunikcja_RSwin_2
     90                      {
     91                        //CleanFlash((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,sizeof(gProg));
     92                        CleanFlash((char*)&AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,sizeof(gProg));
   \   0000003A   BE49               LDR      R1,??komunikcja_RSwin_3  ;; 0xc670
   \   0000003C   BE48               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   BE4A               LDR      R2,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000042   1018               ADDS     R0,R2,R0
   \   00000044   ........           BL       CleanFlash
   \                     ??komunikcja_RSwin_2:
   \   00000048   A379               LDRB     R3,[R4, #+6]
   \   0000004A   2200               MOVS     R2,R4
   \   0000004C   D21D               ADDS     R2,R2,#+7
   \   0000004E   0199               LDR      R1,[SP, #+4]
   \   00000050   8C46               MOV      R12,R1
   \   00000052   B948               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   00000054   0168               LDR      R1,[R0, #+0]
   \   00000056   B948               LDR      R0,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000058   0818               ADDS     R0,R1,R0
   \   0000005A   6146               MOV      R1,R12
     93                      }
     94                      
     95                         
     96                          at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,adres,ptr1+7,ptr1[6]);
   \   0000005C   ........           BL       at91flashWrite
     97                      
     98                          
     99                          __set_interrupt_state(Save);
   \   00000060   0098               LDR      R0,[SP, #+0]
   \   00000062   ........           BL       __iar_set_interrupt_state
    100                          __enable_interrupt();  
   \   00000066   ........           BL       __iar_enable_interrupt
    101                     
    102                      
    103                      //Potwierdzenie
    104                      ptr2[0]=0xAC;
   \   0000006A   AC20               MOVS     R0,#+172
   \   0000006C   2870               STRB     R0,[R5, #+0]
    105                      ptr2[1]=0x02;
   \   0000006E   0220               MOVS     R0,#+2
   \   00000070   0100               MOVS     R1,R0
   \   00000072   6970               STRB     R1,[R5, #+1]
    106                      *ptr3=2;
   \   00000074   3060               STR      R0,[R6, #+0]
    107                      ptr2[2]=CheckSum(ptr2, ptr3);
   \   00000076   3100               MOVS     R1,R6
   \   00000078   2800               MOVS     R0,R5
   \   0000007A   ........           BL       CheckSum
   \   0000007E   A870               STRB     R0,[R5, #+2]
    108                      
    109                        /*
    110                               memory_read=(char*)&gProg+adres;
    111                      
    112                      for (char i=0; i<ptr1[6]; i++)
    113                      {
    114                        *memory_read=*(ptr1+7+i);
    115                        memory_read++;
    116                      }
    117                          
    118                      */
    119                  
    120                    //przepisz program z flash do ram
    121                    char *memory_read_prog;
    122                    memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
   \   00000080   AD48               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   AD49               LDR      R1,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000086   0818               ADDS     R0,R1,R0
    123                
    124                    
    125                    char *SourRam= (char*)&gProg;
    126                    int tProgramTabSize=ProgramTabSize;
    127                    for (int k = 0 ; k <= tProgramTabSize ; k++) 
   \   00000088   3900               MOVS     R1,R7
   \   0000008A   03E0               B        ??komunikcja_RSwin_4
    128                    { 
    129                          SourRam[k]=memory_read_prog[k]; 
   \                     ??komunikcja_RSwin_5:
   \   0000008C   AC4A               LDR      R2,??komunikcja_RSwin_3+0xC  ;; gProg
   \   0000008E   435C               LDRB     R3,[R0, R1]
   \   00000090   5354               STRB     R3,[R2, R1]
    130                          
    131                    }
   \   00000092   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_4:
   \   00000094   AB4A               LDR      R2,??komunikcja_RSwin_3+0x10  ;; 0xc671
   \   00000096   9142               CMP      R1,R2
   \   00000098   F8DB               BLT      ??komunikcja_RSwin_5
    132                } 
    133                   
    134                
    135                if (ptr1[3]==0x10)
   \                     ??komunikcja_RSwin_1:
   \   0000009A   E078               LDRB     R0,[R4, #+3]
   \   0000009C   1028               CMP      R0,#+16
   \   0000009E   1AD1               BNE      ??komunikcja_RSwin_0
    136                {
    137                   char *memory_read;
    138                      memory_read=(char*)&gProg+adres;
   \   000000A0   0198               LDR      R0,[SP, #+4]
   \   000000A2   A749               LDR      R1,??komunikcja_RSwin_3+0xC  ;; gProg
   \   000000A4   0818               ADDS     R0,R1,R0
    139                      
    140                      for (char i=0; i<ptr1[6]; i++)
   \   000000A6   3900               MOVS     R1,R7
   \   000000A8   06E0               B        ??komunikcja_RSwin_6
    141                      {
    142                        *memory_read=*(ptr1+7+i);
   \                     ??komunikcja_RSwin_7:
   \   000000AA   A218               ADDS     R2,R4,R2
   \   000000AC   D279               LDRB     R2,[R2, #+7]
   \   000000AE   0270               STRB     R2,[R0, #+0]
    143                        memory_read++;
   \   000000B0   401C               ADDS     R0,R0,#+1
    144                      } 
   \   000000B2   491C               ADDS     R1,R1,#+1
   \   000000B4   0906               LSLS     R1,R1,#+24
   \   000000B6   090E               LSRS     R1,R1,#+24
   \                     ??komunikcja_RSwin_6:
   \   000000B8   0A00               MOVS     R2,R1
   \   000000BA   A379               LDRB     R3,[R4, #+6]
   \   000000BC   9A42               CMP      R2,R3
   \   000000BE   F4D3               BCC      ??komunikcja_RSwin_7
    145                      
    146                      
    147                     //Potwierdzenie
    148                      ptr2[0]=0xAC;
   \   000000C0   AC20               MOVS     R0,#+172
   \   000000C2   2870               STRB     R0,[R5, #+0]
    149                      ptr2[1]=0x02;
   \   000000C4   0220               MOVS     R0,#+2
   \   000000C6   0100               MOVS     R1,R0
   \   000000C8   6970               STRB     R1,[R5, #+1]
    150                      *ptr3=2;
   \   000000CA   3060               STR      R0,[R6, #+0]
    151                      ptr2[2]=CheckSum(ptr2, ptr3);   
   \   000000CC   3100               MOVS     R1,R6
   \   000000CE   2800               MOVS     R0,R5
   \   000000D0   ........           BL       CheckSum
   \   000000D4   A870               STRB     R0,[R5, #+2]
    152                
    153                }
    154                
    155              }//-----------Koniec zapisu do dowolnego segmentu --------------------------         
    156              
    157              
    158              
    159              //Odczyt z dowolnego segmentu ----------------------------------------------
    160              if ((ptr1[0]==0xAD)& (ptr1[1]==0x03)) 
   \                     ??komunikcja_RSwin_0:
   \   000000D6   2078               LDRB     R0,[R4, #+0]
   \   000000D8   AD28               CMP      R0,#+173
   \   000000DA   4DD1               BNE      ??komunikcja_RSwin_8
   \   000000DC   6078               LDRB     R0,[R4, #+1]
   \   000000DE   0328               CMP      R0,#+3
   \   000000E0   4AD1               BNE      ??komunikcja_RSwin_8
    161              {
    162                
    163          
    164                //Odczyt programu zrodlowego
    165                if ((ptr1[2]==0x00) & (ptr1[3]==0x10) /*& (ptr1[4]!=0x40)*/)
   \   000000E2   A078               LDRB     R0,[R4, #+2]
   \   000000E4   0028               CMP      R0,#+0
   \   000000E6   20D1               BNE      ??komunikcja_RSwin_9
   \   000000E8   E078               LDRB     R0,[R4, #+3]
   \   000000EA   1028               CMP      R0,#+16
   \   000000EC   1DD1               BNE      ??komunikcja_RSwin_9
    166                {
    167                  
    168                  tmp = 2;
   \   000000EE   0227               MOVS     R7,#+2
    169                  
    170                  ptr2[0] =0xAC;
   \   000000F0   AC20               MOVS     R0,#+172
   \   000000F2   2870               STRB     R0,[R5, #+0]
    171                  ptr2[1] =0x04;
   \   000000F4   0420               MOVS     R0,#+4
   \   000000F6   6870               STRB     R0,[R5, #+1]
    172                  //*ptr3=2;
    173                  
    174                  adres = ptr1[4]+(ptr1[5]*0x100);
   \   000000F8   2079               LDRB     R0,[R4, #+4]
   \   000000FA   6179               LDRB     R1,[R4, #+5]
   \   000000FC   0902               LSLS     R1,R1,#+8
   \   000000FE   4018               ADDS     R0,R0,R1
   \   00000100   0190               STR      R0,[SP, #+4]
    175                  
    176                  char *memory_read;
    177                  
    178                  //memory_read=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    179                  memory_read=(char*)&gProg;
    180                  
    181                  
    182                  for (int k = 0 ; k <= (ptr1[6]-1) ; k++) 
   \   00000102   0020               MOVS     R0,#+0
   \   00000104   8E4B               LDR      R3,??komunikcja_RSwin_3+0xC  ;; gProg
   \   00000106   06E0               B        ??komunikcja_RSwin_10
    183                  { 
    184          
    185                      tmp++;
   \                     ??komunikcja_RSwin_11:
   \   00000108   7F1C               ADDS     R7,R7,#+1
    186                      
    187                      ptr2[2+k] =memory_read[adres+k]; 
   \   0000010A   2918               ADDS     R1,R5,R0
   \   0000010C   019A               LDR      R2,[SP, #+4]
   \   0000010E   1218               ADDS     R2,R2,R0
   \   00000110   9A5C               LDRB     R2,[R3, R2]
   \   00000112   8A70               STRB     R2,[R1, #+2]
    188                      
    189                  
    190                  }
   \   00000114   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_10:
   \   00000116   A179               LDRB     R1,[R4, #+6]
   \   00000118   491E               SUBS     R1,R1,#+1
   \   0000011A   8142               CMP      R1,R0
   \   0000011C   F4DA               BGE      ??komunikcja_RSwin_11
    191                  
    192                  
    193                  
    194          
    195                  *ptr3=tmp;
   \   0000011E   3760               STR      R7,[R6, #+0]
    196                  ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   00000120   3100               MOVS     R1,R6
   \   00000122   2800               MOVS     R0,R5
   \   00000124   ........           BL       CheckSum
   \   00000128   E855               STRB     R0,[R5, R7]
    197                  
    198                }
    199          //tmp
    200                if ((ptr1[2]==0x00) & (ptr1[3]>0x70) & (ptr1[3]<0xC0)  /*& (ptr1[4]!=0x40)*/)
   \                     ??komunikcja_RSwin_9:
   \   0000012A   A078               LDRB     R0,[R4, #+2]
   \   0000012C   0028               CMP      R0,#+0
   \   0000012E   23D1               BNE      ??komunikcja_RSwin_8
   \   00000130   E078               LDRB     R0,[R4, #+3]
   \   00000132   7128               CMP      R0,#+113
   \   00000134   20D3               BCC      ??komunikcja_RSwin_8
   \   00000136   C028               CMP      R0,#+192
   \   00000138   1ED2               BCS      ??komunikcja_RSwin_8
    201                {
    202                  
    203                  tmp = 2;
   \   0000013A   0227               MOVS     R7,#+2
    204                  
    205                  ptr2[0] =0xAC;
   \   0000013C   AC20               MOVS     R0,#+172
   \   0000013E   2870               STRB     R0,[R5, #+0]
    206                  ptr2[1] =0x04;
   \   00000140   0420               MOVS     R0,#+4
   \   00000142   6870               STRB     R0,[R5, #+1]
    207                  //*ptr3=2;
    208                  
    209                  adres = ptr1[4]+(ptr1[5]*0x100);
   \   00000144   2079               LDRB     R0,[R4, #+4]
   \   00000146   6179               LDRB     R1,[R4, #+5]
   \   00000148   0902               LSLS     R1,R1,#+8
   \   0000014A   4018               ADDS     R0,R0,R1
   \   0000014C   0190               STR      R0,[SP, #+4]
    210                  for (int k = 0 ; k <= (ptr1[6]-1) ; k++) 
   \   0000014E   0020               MOVS     R0,#+0
   \   00000150   08E0               B        ??komunikcja_RSwin_12
    211                  { 
    212                      ptr2[2+k] = pProg[adres+k];
   \                     ??komunikcja_RSwin_13:
   \   00000152   2918               ADDS     R1,R5,R0
   \   00000154   019A               LDR      R2,[SP, #+4]
   \   00000156   1218               ADDS     R2,R2,R0
   \   00000158   7B4B               LDR      R3,??komunikcja_RSwin_3+0x14  ;; pProg
   \   0000015A   1B68               LDR      R3,[R3, #+0]
   \   0000015C   9A5C               LDRB     R2,[R3, R2]
   \   0000015E   8A70               STRB     R2,[R1, #+2]
    213                      tmp++;
   \   00000160   7F1C               ADDS     R7,R7,#+1
    214                  }
   \   00000162   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_12:
   \   00000164   A179               LDRB     R1,[R4, #+6]
   \   00000166   491E               SUBS     R1,R1,#+1
   \   00000168   8142               CMP      R1,R0
   \   0000016A   F2DA               BGE      ??komunikcja_RSwin_13
    215          
    216                  *ptr3=tmp;
   \   0000016C   3760               STR      R7,[R6, #+0]
    217                  ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   0000016E   3100               MOVS     R1,R6
   \   00000170   2800               MOVS     R0,R5
   \   00000172   ........           BL       CheckSum
   \   00000176   E855               STRB     R0,[R5, R7]
    218                  
    219                } 
    220          //kon tmp
    221                
    222              }//------------------Koniec odczytu z dowolnego segmentu--------------------    
    223              
    224              
    225          
    226              //Odczyt z segmentu 0 ------------------------------------------------------
    227              if ((ptr1[0]==0xAC)& (ptr1[1]==0x03) & (ptr1[2]!=0x14) & (ptr1[2]!=0x80) ) 
   \                     ??komunikcja_RSwin_8:
   \   00000178   2078               LDRB     R0,[R4, #+0]
   \   0000017A   AC28               CMP      R0,#+172
   \   0000017C   00D0               BEQ      .+4
   \   0000017E   93E0               B        ??komunikcja_RSwin_14
   \   00000180   6078               LDRB     R0,[R4, #+1]
   \   00000182   0328               CMP      R0,#+3
   \   00000184   00D0               BEQ      .+4
   \   00000186   8FE0               B        ??komunikcja_RSwin_14
   \   00000188   A078               LDRB     R0,[R4, #+2]
   \   0000018A   1428               CMP      R0,#+20
   \   0000018C   00D1               BNE      .+4
   \   0000018E   8BE0               B        ??komunikcja_RSwin_14
   \   00000190   8028               CMP      R0,#+128
   \   00000192   00D1               BNE      .+4
   \   00000194   88E0               B        ??komunikcja_RSwin_14
   \   00000196   E178               LDRB     R1,[R4, #+3]
   \   00000198   0902               LSLS     R1,R1,#+8
   \   0000019A   4018               ADDS     R0,R0,R1
   \   0000019C   C021               MOVS     R1,#+192
   \   0000019E   0902               LSLS     R1,R1,#+8        ;; #+49152
   \   000001A0   0004               LSLS     R0,R0,#+16
   \   000001A2   000C               LSRS     R0,R0,#+16
   \   000001A4   8842               CMP      R0,R1
   \   000001A6   29D3               BCC      ??komunikcja_RSwin_15
   \   000001A8   A078               LDRB     R0,[R4, #+2]
   \   000001AA   E178               LDRB     R1,[R4, #+3]
   \   000001AC   0902               LSLS     R1,R1,#+8
   \   000001AE   4018               ADDS     R0,R0,R1
   \   000001B0   C821               MOVS     R1,#+200
   \   000001B2   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   000001B4   0004               LSLS     R0,R0,#+16
   \   000001B6   000C               LSRS     R0,R0,#+16
   \   000001B8   8842               CMP      R0,R1
   \   000001BA   1FD2               BCS      ??komunikcja_RSwin_15
    228              {
    229                
    230                //odczyt zmiennych dwustanwych
    231                if (   (ptr1[2]+(ptr1[3]*0x100)>= 0xC000) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xC7FF)  )
    232                {
    233                  
    234                  
    235                  ptr2[0] =0xAC;
   \   000001BC   AC20               MOVS     R0,#+172
   \   000001BE   2870               STRB     R0,[R5, #+0]
    236                  ptr2[1] =0x04;
   \   000001C0   0420               MOVS     R0,#+4
   \   000001C2   6870               STRB     R0,[R5, #+1]
    237                  tmp = 2;
   \   000001C4   0227               MOVS     R7,#+2
    238                  
    239                  for (int k = 0; k <= ptr1[4]-1; k++) 
   \   000001C6   0020               MOVS     R0,#+0
   \   000001C8   0090               STR      R0,[SP, #+0]
   \   000001CA   12E0               B        ??komunikcja_RSwin_16
    240                  { 
    241                    adres = (ptr1[2]+(ptr1[3]*0x100)-0xC000 +k);
   \                     ??komunikcja_RSwin_17:
   \   000001CC   A078               LDRB     R0,[R4, #+2]
   \   000001CE   E178               LDRB     R1,[R4, #+3]
   \   000001D0   0902               LSLS     R1,R1,#+8
   \   000001D2   4018               ADDS     R0,R0,R1
   \   000001D4   0099               LDR      R1,[SP, #+0]
   \   000001D6   4018               ADDS     R0,R0,R1
   \   000001D8   5C49               LDR      R1,??komunikcja_RSwin_3+0x18  ;; 0xffff4000
   \   000001DA   4018               ADDS     R0,R0,R1
   \   000001DC   0190               STR      R0,[SP, #+4]
    242                    ptr2[2+k] = BinVarToMaster(&adres);     
   \   000001DE   01A8               ADD      R0,SP,#+4
   \   000001E0   ........           BL       BinVarToMaster
   \   000001E4   0099               LDR      R1,[SP, #+0]
   \   000001E6   6918               ADDS     R1,R5,R1
   \   000001E8   8870               STRB     R0,[R1, #+2]
    243                    tmp++;
   \   000001EA   7F1C               ADDS     R7,R7,#+1
    244                  }
   \   000001EC   0098               LDR      R0,[SP, #+0]
   \   000001EE   401C               ADDS     R0,R0,#+1
   \   000001F0   0090               STR      R0,[SP, #+0]
   \                     ??komunikcja_RSwin_16:
   \   000001F2   2079               LDRB     R0,[R4, #+4]
   \   000001F4   401E               SUBS     R0,R0,#+1
   \   000001F6   0099               LDR      R1,[SP, #+0]
   \   000001F8   8842               CMP      R0,R1
   \   000001FA   E7DA               BGE      ??komunikcja_RSwin_17
    245                  
    246                }//Koniec odczytu zmiennych dwustanowych
    247                      
    248                      
    249                //Odczyt zmiennych analogowych
    250                if (  (ptr1[2]+(ptr1[3]*0x100)>= 0xC800) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xDFFF) )
   \                     ??komunikcja_RSwin_15:
   \   000001FC   A078               LDRB     R0,[R4, #+2]
   \   000001FE   E178               LDRB     R1,[R4, #+3]
   \   00000200   0902               LSLS     R1,R1,#+8
   \   00000202   4018               ADDS     R0,R0,R1
   \   00000204   C821               MOVS     R1,#+200
   \   00000206   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   00000208   0004               LSLS     R0,R0,#+16
   \   0000020A   000C               LSRS     R0,R0,#+16
   \   0000020C   8842               CMP      R0,R1
   \   0000020E   45D3               BCC      ??komunikcja_RSwin_18
   \   00000210   A078               LDRB     R0,[R4, #+2]
   \   00000212   E178               LDRB     R1,[R4, #+3]
   \   00000214   0902               LSLS     R1,R1,#+8
   \   00000216   4018               ADDS     R0,R0,R1
   \   00000218   E021               MOVS     R1,#+224
   \   0000021A   0902               LSLS     R1,R1,#+8        ;; #+57344
   \   0000021C   0004               LSLS     R0,R0,#+16
   \   0000021E   000C               LSRS     R0,R0,#+16
   \   00000220   8842               CMP      R0,R1
   \   00000222   3BD2               BCS      ??komunikcja_RSwin_18
    251                {   
    252                  
    253                  ptr2[0] =0xAC;
   \   00000224   AC20               MOVS     R0,#+172
   \   00000226   2870               STRB     R0,[R5, #+0]
    254                  ptr2[1] =0x04;
   \   00000228   0420               MOVS     R0,#+4
   \   0000022A   6870               STRB     R0,[R5, #+1]
    255                  tmp = 2;
   \   0000022C   0227               MOVS     R7,#+2
    256                  
    257                  for (int k = 0; k <= ptr1[4]-1; k=k+4) 
   \   0000022E   0020               MOVS     R0,#+0
   \   00000230   0090               STR      R0,[SP, #+0]
   \   00000232   2EE0               B        ??komunikcja_RSwin_19
    258                  { 
    259                    
    260                    adres = ((ptr1[2]+(ptr1[3]*0x100)-0xC800)/4)  +(k/4);
   \                     ??komunikcja_RSwin_20:
   \   00000234   A078               LDRB     R0,[R4, #+2]
   \   00000236   E178               LDRB     R1,[R4, #+3]
   \   00000238   0902               LSLS     R1,R1,#+8
   \   0000023A   4018               ADDS     R0,R0,R1
   \   0000023C   4449               LDR      R1,??komunikcja_RSwin_3+0x1C  ;; 0xffff3800
   \   0000023E   4018               ADDS     R0,R0,R1
   \   00000240   0100               MOVS     R1,R0
   \   00000242   4910               ASRS     R1,R1,#+1
   \   00000244   890F               LSRS     R1,R1,#+30
   \   00000246   0818               ADDS     R0,R1,R0
   \   00000248   8010               ASRS     R0,R0,#+2
   \   0000024A   0099               LDR      R1,[SP, #+0]
   \   0000024C   4910               ASRS     R1,R1,#+1
   \   0000024E   890F               LSRS     R1,R1,#+30
   \   00000250   009A               LDR      R2,[SP, #+0]
   \   00000252   8918               ADDS     R1,R1,R2
   \   00000254   8910               ASRS     R1,R1,#+2
   \   00000256   4018               ADDS     R0,R0,R1
   \   00000258   0190               STR      R0,[SP, #+4]
   \   0000025A   01A8               ADD      R0,SP,#+4
    261                    
    262                    Convers_DW_B.DWvar = AnaVarToMaster(&adres);  
   \   0000025C   ........           BL       AnaVarToMaster
   \   00000260   3C49               LDR      R1,??komunikcja_RSwin_3+0x20  ;; Convers_DW_B
   \   00000262   0860               STR      R0,[R1, #+0]
    263                    
    264                    // zmiana kolejnoci dla nowego RSWINa
    265                   /*
    266                    ptr2[k+2]   =Convers_DW_B.Bvar[3];
    267                    ptr2[k+3]   =Convers_DW_B.Bvar[2];
    268                    ptr2[k+4]   =Convers_DW_B.Bvar[0];
    269                    ptr2[k+5]   =Convers_DW_B.Bvar[1];
    270                   */
    271                    ptr2[k+2]   =Convers_DW_B.Bvar[0];
   \   00000264   0098               LDR      R0,[SP, #+0]
   \   00000266   2818               ADDS     R0,R5,R0
   \   00000268   0978               LDRB     R1,[R1, #+0]
   \   0000026A   8170               STRB     R1,[R0, #+2]
    272                    ptr2[k+3]   =Convers_DW_B.Bvar[1];
   \   0000026C   0098               LDR      R0,[SP, #+0]
   \   0000026E   2818               ADDS     R0,R5,R0
   \   00000270   3949               LDR      R1,??komunikcja_RSwin_3+0x24  ;; Convers_DW_B + 1
   \   00000272   0978               LDRB     R1,[R1, #+0]
   \   00000274   C170               STRB     R1,[R0, #+3]
    273                    ptr2[k+4]   =Convers_DW_B.Bvar[2];
   \   00000276   0098               LDR      R0,[SP, #+0]
   \   00000278   2818               ADDS     R0,R5,R0
   \   0000027A   3849               LDR      R1,??komunikcja_RSwin_3+0x28  ;; Convers_DW_B + 2
   \   0000027C   0978               LDRB     R1,[R1, #+0]
   \   0000027E   0171               STRB     R1,[R0, #+4]
    274                    ptr2[k+5]   =Convers_DW_B.Bvar[3];
   \   00000280   0098               LDR      R0,[SP, #+0]
   \   00000282   2818               ADDS     R0,R5,R0
   \   00000284   3649               LDR      R1,??komunikcja_RSwin_3+0x2C  ;; Convers_DW_B + 3
   \   00000286   0978               LDRB     R1,[R1, #+0]
   \   00000288   4171               STRB     R1,[R0, #+5]
    275                    
    276                    tmp=tmp+4;
   \   0000028A   3F1D               ADDS     R7,R7,#+4
    277                   }
   \   0000028C   0098               LDR      R0,[SP, #+0]
   \   0000028E   001D               ADDS     R0,R0,#+4
   \   00000290   0090               STR      R0,[SP, #+0]
   \                     ??komunikcja_RSwin_19:
   \   00000292   2079               LDRB     R0,[R4, #+4]
   \   00000294   401E               SUBS     R0,R0,#+1
   \   00000296   0099               LDR      R1,[SP, #+0]
   \   00000298   8842               CMP      R0,R1
   \   0000029A   CBDA               BGE      ??komunikcja_RSwin_20
    278                 }//Koniec odczytu zmiennych analogowych
    279                 *ptr3=tmp;
   \                     ??komunikcja_RSwin_18:
   \   0000029C   3760               STR      R7,[R6, #+0]
    280                 ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   0000029E   3100               MOVS     R1,R6
   \   000002A0   2800               MOVS     R0,R5
   \   000002A2   ........           BL       CheckSum
   \   000002A6   E855               STRB     R0,[R5, R7]
    281              
    282              }//-------------------Koniec odczytu z segmentu 0---------------------------
    283              
    284              
    285              
    286              //Zapis do segmentu 0-------------------------------------------------------
    287              if ((ptr1[0]==0xAC)& (ptr1[1]==0x05)) 
   \                     ??komunikcja_RSwin_14:
   \   000002A8   2078               LDRB     R0,[R4, #+0]
   \   000002AA   AC28               CMP      R0,#+172
   \   000002AC   00D0               BEQ      .+4
   \   000002AE   8FE0               B        ??komunikcja_RSwin_21
   \   000002B0   6078               LDRB     R0,[R4, #+1]
   \   000002B2   0528               CMP      R0,#+5
   \   000002B4   00D0               BEQ      .+4
   \   000002B6   8BE0               B        ??komunikcja_RSwin_21
   \   000002B8   A078               LDRB     R0,[R4, #+2]
   \   000002BA   E178               LDRB     R1,[R4, #+3]
   \   000002BC   0902               LSLS     R1,R1,#+8
   \   000002BE   4018               ADDS     R0,R0,R1
   \   000002C0   C021               MOVS     R1,#+192
   \   000002C2   0902               LSLS     R1,R1,#+8        ;; #+49152
   \   000002C4   0004               LSLS     R0,R0,#+16
   \   000002C6   000C               LSRS     R0,R0,#+16
   \   000002C8   8842               CMP      R0,R1
   \   000002CA   1DD3               BCC      ??komunikcja_RSwin_22
   \   000002CC   A078               LDRB     R0,[R4, #+2]
   \   000002CE   E178               LDRB     R1,[R4, #+3]
   \   000002D0   0902               LSLS     R1,R1,#+8
   \   000002D2   4018               ADDS     R0,R0,R1
   \   000002D4   C821               MOVS     R1,#+200
   \   000002D6   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   000002D8   0004               LSLS     R0,R0,#+16
   \   000002DA   000C               LSRS     R0,R0,#+16
   \   000002DC   8842               CMP      R0,R1
   \   000002DE   13D2               BCS      ??komunikcja_RSwin_22
    288              {
    289          
    290                //Zapis zmiennych dwustanowych
    291                if ( (ptr1[2]+(ptr1[3]*0x100)>= 0xC000) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xC7FF))
    292                {
    293                  for (int k = 0; k <= ptr1[4]-1; k++) 
   \   000002E0   0027               MOVS     R7,#+0
   \   000002E2   0DE0               B        ??komunikcja_RSwin_23
    294                  { 
    295                    adres = (ptr1[2]+(ptr1[3]*0x100)-0xC000+k);
   \                     ??komunikcja_RSwin_24:
   \   000002E4   A078               LDRB     R0,[R4, #+2]
   \   000002E6   E178               LDRB     R1,[R4, #+3]
   \   000002E8   0902               LSLS     R1,R1,#+8
   \   000002EA   4018               ADDS     R0,R0,R1
   \   000002EC   C019               ADDS     R0,R0,R7
   \   000002EE   1749               LDR      R1,??komunikcja_RSwin_3+0x18  ;; 0xffff4000
   \   000002F0   4018               ADDS     R0,R0,R1
   \   000002F2   0190               STR      R0,[SP, #+4]
    296                    MasterToBinVar(&adres, &ptr1[5]);              //Konwersja z formatu Master i zapis
   \   000002F4   2100               MOVS     R1,R4
   \   000002F6   491D               ADDS     R1,R1,#+5
   \   000002F8   01A8               ADD      R0,SP,#+4
   \   000002FA   ........           BL       MasterToBinVar
    297                  }        
   \   000002FE   7F1C               ADDS     R7,R7,#+1
   \                     ??komunikcja_RSwin_23:
   \   00000300   2079               LDRB     R0,[R4, #+4]
   \   00000302   401E               SUBS     R0,R0,#+1
   \   00000304   B842               CMP      R0,R7
   \   00000306   EDDA               BGE      ??komunikcja_RSwin_24
    298                }//Koniec zapisu zmiennych dwustanowch
    299                      
    300                      
    301                
    302                //Zapis zmiennej analogowej
    303                if ( (ptr1[2]+(ptr1[3]*0x100)>= 0xC800) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xDFFF))
   \                     ??komunikcja_RSwin_22:
   \   00000308   A078               LDRB     R0,[R4, #+2]
   \   0000030A   E178               LDRB     R1,[R4, #+3]
   \   0000030C   0902               LSLS     R1,R1,#+8
   \   0000030E   4018               ADDS     R0,R0,R1
   \   00000310   C821               MOVS     R1,#+200
   \   00000312   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   00000314   0004               LSLS     R0,R0,#+16
   \   00000316   000C               LSRS     R0,R0,#+16
   \   00000318   8842               CMP      R0,R1
   \   0000031A   4ED3               BCC      ??komunikcja_RSwin_25
   \   0000031C   A078               LDRB     R0,[R4, #+2]
   \   0000031E   E178               LDRB     R1,[R4, #+3]
   \   00000320   0902               LSLS     R1,R1,#+8
   \   00000322   4018               ADDS     R0,R0,R1
   \   00000324   E021               MOVS     R1,#+224
   \   00000326   0902               LSLS     R1,R1,#+8        ;; #+57344
   \   00000328   0004               LSLS     R0,R0,#+16
   \   0000032A   000C               LSRS     R0,R0,#+16
   \   0000032C   8842               CMP      R0,R1
   \   0000032E   44D2               BCS      ??komunikcja_RSwin_25
    304                {
    305                                                           
    306          
    307                  for (int k = 0; k <= ptr1[4]-1; k=k+4) 
   \   00000330   0027               MOVS     R7,#+0
   \   00000332   3EE0               B        ??komunikcja_RSwin_26
   \                     ??komunikcja_RSwin_3:
   \   00000334   70C60000           DC32     0xc670
   \   00000338   ........           DC32     FlashProgramOfset
   \   0000033C   00011300           DC32     0x130100
   \   00000340   ........           DC32     gProg
   \   00000344   71C60000           DC32     0xc671
   \   00000348   ........           DC32     pProg
   \   0000034C   0040FFFF           DC32     0xffff4000
   \   00000350   0038FFFF           DC32     0xffff3800
   \   00000354   ........           DC32     Convers_DW_B
   \   00000358   ........           DC32     Convers_DW_B + 1
   \   0000035C   ........           DC32     Convers_DW_B + 2
   \   00000360   ........           DC32     Convers_DW_B + 3
   \                     ??komunikcja_RSwin_27:
   \   00000364   B548               LDR      R0,??komunikcja_RSwin_28  ;; Convers_DW_B
   \   00000366   E119               ADDS     R1,R4,R7
   \   00000368   4979               LDRB     R1,[R1, #+5]
   \   0000036A   0170               STRB     R1,[R0, #+0]
    308                  { /*
    309                    // zmiana kolejnoci dla nowego RSWINa
    310                    
    311                    Convers_DW_B.Bvar[3] = ptr1[5+(k)+0];
    312                    Convers_DW_B.Bvar[2] = ptr1[5+(k)+1];
    313                    Convers_DW_B.Bvar[0] = ptr1[5+(k)+2];
    314                    Convers_DW_B.Bvar[1] = ptr1[5+(k)+3];
    315                    */
    316                    Convers_DW_B.Bvar[0] = ptr1[5+(k)+0];
    317                    Convers_DW_B.Bvar[1] = ptr1[5+(k)+1];
   \   0000036C   B448               LDR      R0,??komunikcja_RSwin_28+0x4  ;; Convers_DW_B + 1
   \   0000036E   E119               ADDS     R1,R4,R7
   \   00000370   8979               LDRB     R1,[R1, #+6]
   \   00000372   0170               STRB     R1,[R0, #+0]
    318                    Convers_DW_B.Bvar[2] = ptr1[5+(k)+2];
   \   00000374   B348               LDR      R0,??komunikcja_RSwin_28+0x8  ;; Convers_DW_B + 2
   \   00000376   E119               ADDS     R1,R4,R7
   \   00000378   C979               LDRB     R1,[R1, #+7]
   \   0000037A   0170               STRB     R1,[R0, #+0]
    319                    Convers_DW_B.Bvar[3] = ptr1[5+(k)+3];
   \   0000037C   B248               LDR      R0,??komunikcja_RSwin_28+0xC  ;; Convers_DW_B + 3
   \   0000037E   E119               ADDS     R1,R4,R7
   \   00000380   097A               LDRB     R1,[R1, #+8]
   \   00000382   0170               STRB     R1,[R0, #+0]
    320                    
    321                    
    322                    adres= (((ptr1[2]+(ptr1[3]*0x100)-0xC800))/4)+(k/4);
   \   00000384   A078               LDRB     R0,[R4, #+2]
   \   00000386   E178               LDRB     R1,[R4, #+3]
   \   00000388   0902               LSLS     R1,R1,#+8
   \   0000038A   4018               ADDS     R0,R0,R1
   \   0000038C   AF49               LDR      R1,??komunikcja_RSwin_28+0x10  ;; 0xffff3800
   \   0000038E   4018               ADDS     R0,R0,R1
   \   00000390   0100               MOVS     R1,R0
   \   00000392   4910               ASRS     R1,R1,#+1
   \   00000394   890F               LSRS     R1,R1,#+30
   \   00000396   0818               ADDS     R0,R1,R0
   \   00000398   8010               ASRS     R0,R0,#+2
   \   0000039A   3900               MOVS     R1,R7
   \   0000039C   4910               ASRS     R1,R1,#+1
   \   0000039E   890F               LSRS     R1,R1,#+30
   \   000003A0   C919               ADDS     R1,R1,R7
   \   000003A2   8910               ASRS     R1,R1,#+2
   \   000003A4   4018               ADDS     R0,R0,R1
   \   000003A6   0190               STR      R0,[SP, #+4]
    323                    MasterToAnaVar(&adres, &Convers_DW_B.DWvar);
   \   000003A8   A449               LDR      R1,??komunikcja_RSwin_28  ;; Convers_DW_B
   \   000003AA   01A8               ADD      R0,SP,#+4
   \   000003AC   ........           BL       MasterToAnaVar
    324          
    325                  } //koniec petli k
   \   000003B0   3F1D               ADDS     R7,R7,#+4
   \                     ??komunikcja_RSwin_26:
   \   000003B2   2079               LDRB     R0,[R4, #+4]
   \   000003B4   401E               SUBS     R0,R0,#+1
   \   000003B6   B842               CMP      R0,R7
   \   000003B8   D4DA               BGE      ??komunikcja_RSwin_27
    326                  
    327                }//Koniec zapisu zmiennych analogowych
    328                      
    329                      
    330                      
    331                      
    332                  //Potwierdzenie
    333                  ptr2[0]=0xAC;
   \                     ??komunikcja_RSwin_25:
   \   000003BA   AC20               MOVS     R0,#+172
   \   000003BC   2870               STRB     R0,[R5, #+0]
    334                  ptr2[1]=0x02;
   \   000003BE   0220               MOVS     R0,#+2
   \   000003C0   0100               MOVS     R1,R0
   \   000003C2   6970               STRB     R1,[R5, #+1]
    335                  *ptr3=2;
   \   000003C4   3060               STR      R0,[R6, #+0]
    336                  //koniec potwoerdzenia
    337                  
    338                   ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   000003C6   3100               MOVS     R1,R6
   \   000003C8   2800               MOVS     R0,R5
   \   000003CA   ........           BL       CheckSum
   \   000003CE   A870               STRB     R0,[R5, #+2]
    339           
    340              }//------------------Koniec zapisu do segmentu 0---------------------------       
    341                 
    342              
    343          
    344              
    345              //!!! Standardowe pytania -------------------------------------------------- 
    346             
    347                  //Przepisz program uzytkowy z Ram do flash
    348                  if ( (ptr1[0]==0xAC) && (ptr1[1]==0x06) && (ptr1[2]==0x4E) )
   \                     ??komunikcja_RSwin_21:
   \   000003D0   2078               LDRB     R0,[R4, #+0]
   \   000003D2   AC28               CMP      R0,#+172
   \   000003D4   15D1               BNE      ??komunikcja_RSwin_29
   \   000003D6   6078               LDRB     R0,[R4, #+1]
   \   000003D8   0628               CMP      R0,#+6
   \   000003DA   12D1               BNE      ??komunikcja_RSwin_29
   \   000003DC   A078               LDRB     R0,[R4, #+2]
   \   000003DE   4E28               CMP      R0,#+78
   \   000003E0   0FD1               BNE      ??komunikcja_RSwin_29
    349                    {
    350                      ptr2[0]=0xAC;
   \   000003E2   AC20               MOVS     R0,#+172
   \   000003E4   2870               STRB     R0,[R5, #+0]
    351                      ptr2[1]=0x02;
   \   000003E6   0220               MOVS     R0,#+2
   \   000003E8   0100               MOVS     R1,R0
   \   000003EA   6970               STRB     R1,[R5, #+1]
    352                      *ptr3=2;
   \   000003EC   3060               STR      R0,[R6, #+0]
    353                      ptr2[2]=CheckSum(ptr2, ptr3);
   \   000003EE   3100               MOVS     R1,R6
   \   000003F0   2800               MOVS     R0,R5
   \   000003F2   ........           BL       CheckSum
   \   000003F6   A870               STRB     R0,[R5, #+2]
    354                      
    355                      
    356                       RamToFlash();
   \   000003F8   ........           BL       RamToFlash
    357                       ProgramChangeExecute(&gProg); 
   \   000003FC   9448               LDR      R0,??komunikcja_RSwin_28+0x14  ;; gProg
   \   000003FE   ........           BL       ProgramChangeExecute
    358          
    359                    }
    360          
    361          
    362              
    363                    //Ustaw pu³apkê
    364                    if (
    365                         (ptr1[0]==0xAA)&&
    366                         (ptr1[1]==0xAA)&&
    367                         (ptr1[2]==0x01)
    368                        )
   \                     ??komunikcja_RSwin_29:
   \   00000402   2078               LDRB     R0,[R4, #+0]
   \   00000404   AA28               CMP      R0,#+170
   \   00000406   1AD1               BNE      ??komunikcja_RSwin_30
   \   00000408   6078               LDRB     R0,[R4, #+1]
   \   0000040A   AA28               CMP      R0,#+170
   \   0000040C   17D1               BNE      ??komunikcja_RSwin_30
   \   0000040E   A078               LDRB     R0,[R4, #+2]
   \   00000410   0128               CMP      R0,#+1
   \   00000412   14D1               BNE      ??komunikcja_RSwin_30
    369                      {
    370                       
    371                        Trap.Row=ptr1[3];
   \   00000414   8F48               LDR      R0,??komunikcja_RSwin_28+0x18  ;; Trap
   \   00000416   E178               LDRB     R1,[R4, #+3]
   \   00000418   4170               STRB     R1,[R0, #+1]
    372                        Trap.Col=ptr1[4];
   \   0000041A   2179               LDRB     R1,[R4, #+4]
   \   0000041C   8170               STRB     R1,[R0, #+2]
    373                        Trap.Enable=1;
   \   0000041E   0121               MOVS     R1,#+1
   \   00000420   0A00               MOVS     R2,R1
   \   00000422   0270               STRB     R2,[R0, #+0]
    374                        Trap.Activ=0;
   \   00000424   0022               MOVS     R2,#+0
   \   00000426   C270               STRB     R2,[R0, #+3]
    375                        Trap.Change=1;
   \   00000428   0171               STRB     R1,[R0, #+4]
    376                        
    377                        
    378                        //Potwierdzenie
    379                         ptr2[0]=0xAB;
   \   0000042A   AB20               MOVS     R0,#+171
   \   0000042C   2870               STRB     R0,[R5, #+0]
    380                         ptr2[1]=0xAB;
   \   0000042E   6870               STRB     R0,[R5, #+1]
    381                         *ptr3=2;
   \   00000430   0220               MOVS     R0,#+2
   \   00000432   3060               STR      R0,[R6, #+0]
    382                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   00000434   3100               MOVS     R1,R6
   \   00000436   2800               MOVS     R0,R5
   \   00000438   ........           BL       CheckSum
   \   0000043C   A870               STRB     R0,[R5, #+2]
    383                        //koniec potwoerdzenia
    384          
    385                      }//koniec "Ustaw pu³apkê"
    386                   
    387              
    388              
    389                    //Usuñ pu³apki
    390                    if (
    391                         (ptr1[0]==0xAA)&&
    392                         (ptr1[1]==0xAA)&&
    393                         (ptr1[2]==0x02)
    394                        )
   \                     ??komunikcja_RSwin_30:
   \   0000043E   2078               LDRB     R0,[R4, #+0]
   \   00000440   AA28               CMP      R0,#+170
   \   00000442   15D1               BNE      ??komunikcja_RSwin_31
   \   00000444   6078               LDRB     R0,[R4, #+1]
   \   00000446   AA28               CMP      R0,#+170
   \   00000448   12D1               BNE      ??komunikcja_RSwin_31
   \   0000044A   A078               LDRB     R0,[R4, #+2]
   \   0000044C   0228               CMP      R0,#+2
   \   0000044E   0FD1               BNE      ??komunikcja_RSwin_31
    395                      {
    396                        
    397                        Trap.Enable=0;
   \   00000450   8048               LDR      R0,??komunikcja_RSwin_28+0x18  ;; Trap
   \   00000452   0021               MOVS     R1,#+0
   \   00000454   0170               STRB     R1,[R0, #+0]
    398                        Trap.Row=0;
   \   00000456   4170               STRB     R1,[R0, #+1]
    399                        Trap.Col=0;
   \   00000458   8170               STRB     R1,[R0, #+2]
    400                        Trap.Activ=0;
   \   0000045A   C170               STRB     R1,[R0, #+3]
    401                       
    402                        //Potwierdzenie
    403                         ptr2[0]=0xAB;
   \   0000045C   AB20               MOVS     R0,#+171
   \   0000045E   2870               STRB     R0,[R5, #+0]
    404                         ptr2[1]=0xAB;
   \   00000460   6870               STRB     R0,[R5, #+1]
    405                         *ptr3=2;
   \   00000462   0220               MOVS     R0,#+2
   \   00000464   3060               STR      R0,[R6, #+0]
    406                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   00000466   3100               MOVS     R1,R6
   \   00000468   2800               MOVS     R0,R5
   \   0000046A   ........           BL       CheckSum
   \   0000046E   A870               STRB     R0,[R5, #+2]
    407                        //koniec potwoerdzenia
    408          
    409                      }//koniec "Ustaw pu³apkê"
    410                   
    411              
    412              
    413                     //Odczytaj stany "Output" procedur (ptr1[3]-startowy rz¹d procedur, ptr1[4]-ilosc rzedow do odczytu
    414                    if (
    415                         (ptr1[0]==0xAA)&&
    416                         (ptr1[1]==0xAA)&&
    417                         (ptr1[2]==0x03)
    418                        )
   \                     ??komunikcja_RSwin_31:
   \   00000470   2078               LDRB     R0,[R4, #+0]
   \   00000472   AA28               CMP      R0,#+170
   \   00000474   2DD1               BNE      ??komunikcja_RSwin_32
   \   00000476   6078               LDRB     R0,[R4, #+1]
   \   00000478   AA28               CMP      R0,#+170
   \   0000047A   2AD1               BNE      ??komunikcja_RSwin_32
   \   0000047C   A078               LDRB     R0,[R4, #+2]
   \   0000047E   0328               CMP      R0,#+3
   \   00000480   27D1               BNE      ??komunikcja_RSwin_32
    419                      {
    420          
    421                          
    422                  
    423                          ptr2[0] =0xAC;
   \   00000482   AC20               MOVS     R0,#+172
   \   00000484   2870               STRB     R0,[R5, #+0]
    424                          ptr2[1] =0x04;
   \   00000486   0420               MOVS     R0,#+4
   \   00000488   6870               STRB     R0,[R5, #+1]
    425          
    426                          tmp = 2;
   \   0000048A   0227               MOVS     R7,#+2
    427          
    428                          for (int Row = ptr1[3] ; Row<ptr1[3]+ptr1[4] ; Row++) 
   \   0000048C   E078               LDRB     R0,[R4, #+3]
   \   0000048E   13E0               B        ??komunikcja_RSwin_33
    429                          { 
    430                            for (int Col = 0 ; Col<MaxPrcInLine ; Col++) 
   \                     ??komunikcja_RSwin_34:
   \   00000490   1823               MOVS     R3,#+24
   \   00000492   4B43               MULS     R3,R1,R3
   \   00000494   9C46               MOV      R12,R3
   \   00000496   F023               MOVS     R3,#+240
   \   00000498   4343               MULS     R3,R0,R3
   \   0000049A   6D4A               LDR      R2,??komunikcja_RSwin_28+0x14  ;; gProg
   \   0000049C   D218               ADDS     R2,R2,R3
   \   0000049E   6346               MOV      R3,R12
   \   000004A0   D218               ADDS     R2,R2,R3
   \   000004A2   538D               LDRH     R3,[R2, #+42]
   \   000004A4   1B12               ASRS     R3,R3,#+8
   \   000004A6   EB55               STRB     R3,[R5, R7]
   \   000004A8   7F1C               ADDS     R7,R7,#+1
    431                            { 
    432                              ptr2[tmp++] =gProg.Line[Row].Proc[Col].Out>>8; 
    433                              ptr2[tmp++] =gProg.Line[Row].Proc[Col].Out & 0xFF; 
   \   000004AA   528D               LDRH     R2,[R2, #+42]
   \   000004AC   EA55               STRB     R2,[R5, R7]
   \   000004AE   7F1C               ADDS     R7,R7,#+1
    434                            }  
   \   000004B0   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_35:
   \   000004B2   0A29               CMP      R1,#+10
   \   000004B4   ECDB               BLT      ??komunikcja_RSwin_34
   \   000004B6   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_33:
   \   000004B8   E178               LDRB     R1,[R4, #+3]
   \   000004BA   2279               LDRB     R2,[R4, #+4]
   \   000004BC   8918               ADDS     R1,R1,R2
   \   000004BE   8842               CMP      R0,R1
   \   000004C0   01DA               BGE      ??komunikcja_RSwin_36
   \   000004C2   0021               MOVS     R1,#+0
   \   000004C4   F5E7               B        ??komunikcja_RSwin_35
    435                          }
    436                      
    437          
    438                          *ptr3=tmp;
   \                     ??komunikcja_RSwin_36:
   \   000004C6   3760               STR      R7,[R6, #+0]
    439                          ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   000004C8   3100               MOVS     R1,R6
   \   000004CA   2800               MOVS     R0,R5
   \   000004CC   ........           BL       CheckSum
   \   000004D0   E855               STRB     R0,[R5, R7]
    440          
    441                        
    442                        
    443                      }//koniec "Ustaw pu³apkê"
    444                    
    445              
    446              
    447              
    448                  //Komunikacja startowa  
    449                    //pytanie 0 - pytanie o prêdkoæ pêtli programu
    450                    if (
    451                         (ptr1[0]==0xAC)&&
    452                         (ptr1[1]==0x03)&&
    453                         (ptr1[2]==0x14)&&
    454                         (ptr1[3]==0xFF)&&
    455                         (ptr1[4]==0x02)&&
    456                         (ptr1[5]==0x3C)
    457                        )
   \                     ??komunikcja_RSwin_32:
   \   000004D2   2078               LDRB     R0,[R4, #+0]
   \   000004D4   AC28               CMP      R0,#+172
   \   000004D6   21D1               BNE      ??komunikcja_RSwin_37
   \   000004D8   6078               LDRB     R0,[R4, #+1]
   \   000004DA   0328               CMP      R0,#+3
   \   000004DC   1ED1               BNE      ??komunikcja_RSwin_37
   \   000004DE   A078               LDRB     R0,[R4, #+2]
   \   000004E0   1428               CMP      R0,#+20
   \   000004E2   1BD1               BNE      ??komunikcja_RSwin_37
   \   000004E4   E078               LDRB     R0,[R4, #+3]
   \   000004E6   FF28               CMP      R0,#+255
   \   000004E8   18D1               BNE      ??komunikcja_RSwin_37
   \   000004EA   2079               LDRB     R0,[R4, #+4]
   \   000004EC   0228               CMP      R0,#+2
   \   000004EE   15D1               BNE      ??komunikcja_RSwin_37
   \   000004F0   6079               LDRB     R0,[R4, #+5]
   \   000004F2   3C28               CMP      R0,#+60
   \   000004F4   12D1               BNE      ??komunikcja_RSwin_37
    458                      {
    459                        //odpowied
    460                        ptr2[0]=0xAC;
   \   000004F6   AC20               MOVS     R0,#+172
   \   000004F8   2870               STRB     R0,[R5, #+0]
    461                        ptr2[1]=0x04;
   \   000004FA   0427               MOVS     R7,#+4
   \   000004FC   3800               MOVS     R0,R7
   \   000004FE   6870               STRB     R0,[R5, #+1]
    462                        ptr2[2]=g_czas_petli / 10;
   \   00000500   8548               LDR      R0,??komunikcja_RSwin_38  ;; g_czas_petli
   \   00000502   0078               LDRB     R0,[R0, #+0]
   \   00000504   0A21               MOVS     R1,#+10
   \   00000506   ........           BL       __aeabi_idivmod
   \   0000050A   A870               STRB     R0,[R5, #+2]
    463                        ptr2[3]=0x00;
   \   0000050C   0020               MOVS     R0,#+0
   \   0000050E   E870               STRB     R0,[R5, #+3]
    464                        *ptr3=4;
   \   00000510   3760               STR      R7,[R6, #+0]
    465                        ptr2[4]=CheckSum(ptr2, ptr3);
   \   00000512   3100               MOVS     R1,R6
   \   00000514   2800               MOVS     R0,R5
   \   00000516   ........           BL       CheckSum
   \   0000051A   2871               STRB     R0,[R5, #+4]
    466                      }//koniec pytania 0
    467                   
    468            
    469                   //pytanie 1 
    470                   if (
    471                         (ptr1[0]==0xAD)&&
    472                         (ptr1[1]==0x03)&&
    473                         (ptr1[2]==0x00)&&
    474                         (ptr1[3]==0xA0)&&
    475                         (ptr1[4]==0x0D)&&
    476                         (ptr1[5]==0x00)&&
    477                         (ptr1[6]==0x01)&&
    478                         (ptr1[7]==0xA2)
    479                      
    480                        )
   \                     ??komunikcja_RSwin_37:
   \   0000051C   2078               LDRB     R0,[R4, #+0]
   \   0000051E   AD28               CMP      R0,#+173
   \   00000520   21D1               BNE      ??komunikcja_RSwin_39
   \   00000522   6078               LDRB     R0,[R4, #+1]
   \   00000524   0328               CMP      R0,#+3
   \   00000526   1ED1               BNE      ??komunikcja_RSwin_39
   \   00000528   A078               LDRB     R0,[R4, #+2]
   \   0000052A   0028               CMP      R0,#+0
   \   0000052C   1BD1               BNE      ??komunikcja_RSwin_39
   \   0000052E   E078               LDRB     R0,[R4, #+3]
   \   00000530   A028               CMP      R0,#+160
   \   00000532   18D1               BNE      ??komunikcja_RSwin_39
   \   00000534   2079               LDRB     R0,[R4, #+4]
   \   00000536   0D28               CMP      R0,#+13
   \   00000538   15D1               BNE      ??komunikcja_RSwin_39
   \   0000053A   6079               LDRB     R0,[R4, #+5]
   \   0000053C   0028               CMP      R0,#+0
   \   0000053E   12D1               BNE      ??komunikcja_RSwin_39
   \   00000540   A079               LDRB     R0,[R4, #+6]
   \   00000542   0128               CMP      R0,#+1
   \   00000544   0FD1               BNE      ??komunikcja_RSwin_39
   \   00000546   E079               LDRB     R0,[R4, #+7]
   \   00000548   A228               CMP      R0,#+162
   \   0000054A   0CD1               BNE      ??komunikcja_RSwin_39
    481                    {
    482                        //odpowied
    483                        ptr2[0]=0xAC;
   \   0000054C   AC20               MOVS     R0,#+172
   \   0000054E   2870               STRB     R0,[R5, #+0]
    484                        ptr2[1]=0x04;
   \   00000550   0420               MOVS     R0,#+4
   \   00000552   6870               STRB     R0,[R5, #+1]
    485                        ptr2[2]=0xFF;
   \   00000554   FF20               MOVS     R0,#+255
   \   00000556   A870               STRB     R0,[R5, #+2]
    486                        
    487                        *ptr3=3;
   \   00000558   0320               MOVS     R0,#+3
   \   0000055A   3060               STR      R0,[R6, #+0]
    488                        ptr2[3]=CheckSum(ptr2, ptr3);
   \   0000055C   3100               MOVS     R1,R6
   \   0000055E   2800               MOVS     R0,R5
   \   00000560   ........           BL       CheckSum
   \   00000564   E870               STRB     R0,[R5, #+3]
    489                      
    490                    }//koniec pytania 1
    491                   
    492                   
    493                   //pytanie 2  (pytanie o sterownik)
    494                   if (
    495                         (ptr1[0]==0xAC)&&
    496                         (ptr1[1]==0x03)&&
    497                         (ptr1[2]==0x80)&&
    498                         (ptr1[3]==0xFF)&&
    499                         (ptr1[4]==0x10)&&
    500                         (ptr1[5]==0xC2)
    501                        )
   \                     ??komunikcja_RSwin_39:
   \   00000566   2078               LDRB     R0,[R4, #+0]
   \   00000568   AC28               CMP      R0,#+172
   \   0000056A   23D1               BNE      ??komunikcja_RSwin_40
   \   0000056C   6078               LDRB     R0,[R4, #+1]
   \   0000056E   0328               CMP      R0,#+3
   \   00000570   20D1               BNE      ??komunikcja_RSwin_40
   \   00000572   A078               LDRB     R0,[R4, #+2]
   \   00000574   8028               CMP      R0,#+128
   \   00000576   1DD1               BNE      ??komunikcja_RSwin_40
   \   00000578   E078               LDRB     R0,[R4, #+3]
   \   0000057A   FF28               CMP      R0,#+255
   \   0000057C   1AD1               BNE      ??komunikcja_RSwin_40
   \   0000057E   2079               LDRB     R0,[R4, #+4]
   \   00000580   1028               CMP      R0,#+16
   \   00000582   17D1               BNE      ??komunikcja_RSwin_40
   \   00000584   6079               LDRB     R0,[R4, #+5]
   \   00000586   C228               CMP      R0,#+194
   \   00000588   14D1               BNE      ??komunikcja_RSwin_40
    502                    {
    503                        //odpowied
    504                        ptr2[0]=0xAC;
   \   0000058A   AC20               MOVS     R0,#+172
   \   0000058C   2870               STRB     R0,[R5, #+0]
    505                        ptr2[1]=0x04;
   \   0000058E   0420               MOVS     R0,#+4
   \   00000590   6870               STRB     R0,[R5, #+1]
    506                        
    507                        for(int k=2; k<=11; k++)
   \   00000592   0220               MOVS     R0,#+2
   \   00000594   05E0               B        ??komunikcja_RSwin_41
    508                        {
    509                          ptr2[k]=identyfikacja[k-2];
   \                     ??komunikcja_RSwin_42:
   \   00000596   6149               LDR      R1,??komunikcja_RSwin_38+0x4  ;; identyfikacja
   \   00000598   0918               ADDS     R1,R1,R0
   \   0000059A   891E               SUBS     R1,R1,#+2
   \   0000059C   0978               LDRB     R1,[R1, #+0]
   \   0000059E   2954               STRB     R1,[R5, R0]
    510                        }
   \   000005A0   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_41:
   \   000005A2   0C28               CMP      R0,#+12
   \   000005A4   F7DB               BLT      ??komunikcja_RSwin_42
    511                        
    512                        *ptr3=18; 
   \   000005A6   1220               MOVS     R0,#+18
   \   000005A8   3060               STR      R0,[R6, #+0]
    513                        ptr2[18]=CheckSum(ptr2, ptr3);
   \   000005AA   3100               MOVS     R1,R6
   \   000005AC   2800               MOVS     R0,R5
   \   000005AE   ........           BL       CheckSum
   \   000005B2   A874               STRB     R0,[R5, #+18]
    514                    }
    515                   
    516                   
    517                   //pytanie 3 // 1-jest program, 2 - brak programu
    518                   if (
    519                         (ptr1[0]==0xAD)&&
    520                         (ptr1[1]==0x03)&&
    521                         (ptr1[2]==0x00)&&
    522                         (ptr1[3]==0x60)&&
    523                         (ptr1[4]==0x0D)&&
    524                         (ptr1[5]==0x00)&&
    525                         (ptr1[6]==0x01)&&
    526                         (ptr1[7]==0xE2)
    527                        )
   \                     ??komunikcja_RSwin_40:
   \   000005B4   2078               LDRB     R0,[R4, #+0]
   \   000005B6   AD28               CMP      R0,#+173
   \   000005B8   21D1               BNE      ??komunikcja_RSwin_43
   \   000005BA   6078               LDRB     R0,[R4, #+1]
   \   000005BC   0328               CMP      R0,#+3
   \   000005BE   1ED1               BNE      ??komunikcja_RSwin_43
   \   000005C0   A078               LDRB     R0,[R4, #+2]
   \   000005C2   0028               CMP      R0,#+0
   \   000005C4   1BD1               BNE      ??komunikcja_RSwin_43
   \   000005C6   E078               LDRB     R0,[R4, #+3]
   \   000005C8   6028               CMP      R0,#+96
   \   000005CA   18D1               BNE      ??komunikcja_RSwin_43
   \   000005CC   2079               LDRB     R0,[R4, #+4]
   \   000005CE   0D28               CMP      R0,#+13
   \   000005D0   15D1               BNE      ??komunikcja_RSwin_43
   \   000005D2   6079               LDRB     R0,[R4, #+5]
   \   000005D4   0028               CMP      R0,#+0
   \   000005D6   12D1               BNE      ??komunikcja_RSwin_43
   \   000005D8   A079               LDRB     R0,[R4, #+6]
   \   000005DA   0128               CMP      R0,#+1
   \   000005DC   0FD1               BNE      ??komunikcja_RSwin_43
   \   000005DE   E079               LDRB     R0,[R4, #+7]
   \   000005E0   E228               CMP      R0,#+226
   \   000005E2   0CD1               BNE      ??komunikcja_RSwin_43
    528                    {
    529                        //odpowied
    530                        ptr2[0]=0xAC;
   \   000005E4   AC20               MOVS     R0,#+172
   \   000005E6   2870               STRB     R0,[R5, #+0]
    531                        ptr2[1]=0x04;
   \   000005E8   0420               MOVS     R0,#+4
   \   000005EA   6870               STRB     R0,[R5, #+1]
    532                        ptr2[2]=0x01;
   \   000005EC   0120               MOVS     R0,#+1
   \   000005EE   A870               STRB     R0,[R5, #+2]
    533                        //ptr2[3]=0x4F;
    534                       
    535                        *ptr3=3;
   \   000005F0   0320               MOVS     R0,#+3
   \   000005F2   3060               STR      R0,[R6, #+0]
    536                        ptr2[3]=CheckSum(ptr2, ptr3);
   \   000005F4   3100               MOVS     R1,R6
   \   000005F6   2800               MOVS     R0,R5
   \   000005F8   ........           BL       CheckSum
   \   000005FC   E870               STRB     R0,[R5, #+3]
    537                    }
    538                   
    539           
    540                   //pytanie 4 - pytanie o nazwe aktualnie dzia³j¹cego programu u¿ytkowego
    541                   if (
    542                         (ptr1[0]==0xAD)&&
    543                         (ptr1[1]==0x03)&&
    544                         (ptr1[2]==0x00)&&
    545                         (ptr1[3]==0x90)&&
    546                         (ptr1[4]==0x40)&&
    547                         (ptr1[5]==0x00)&&
    548                         (ptr1[6]==0x20)&&
    549                         (ptr1[7]==0x60)
    550                        )
   \                     ??komunikcja_RSwin_43:
   \   000005FE   2078               LDRB     R0,[R4, #+0]
   \   00000600   AD28               CMP      R0,#+173
   \   00000602   3AD1               BNE      ??komunikcja_RSwin_44
   \   00000604   6078               LDRB     R0,[R4, #+1]
   \   00000606   0328               CMP      R0,#+3
   \   00000608   37D1               BNE      ??komunikcja_RSwin_44
   \   0000060A   A078               LDRB     R0,[R4, #+2]
   \   0000060C   0028               CMP      R0,#+0
   \   0000060E   34D1               BNE      ??komunikcja_RSwin_44
   \   00000610   E078               LDRB     R0,[R4, #+3]
   \   00000612   9028               CMP      R0,#+144
   \   00000614   31D1               BNE      ??komunikcja_RSwin_44
   \   00000616   2079               LDRB     R0,[R4, #+4]
   \   00000618   4028               CMP      R0,#+64
   \   0000061A   2ED1               BNE      ??komunikcja_RSwin_44
   \   0000061C   6079               LDRB     R0,[R4, #+5]
   \   0000061E   0028               CMP      R0,#+0
   \   00000620   2BD1               BNE      ??komunikcja_RSwin_44
   \   00000622   A079               LDRB     R0,[R4, #+6]
   \   00000624   2028               CMP      R0,#+32
   \   00000626   28D1               BNE      ??komunikcja_RSwin_44
   \   00000628   E079               LDRB     R0,[R4, #+7]
   \   0000062A   6028               CMP      R0,#+96
   \   0000062C   25D1               BNE      ??komunikcja_RSwin_44
    551                    {
    552                        //odpowied
    553                        ptr2[0]=0xAC;
   \   0000062E   AC20               MOVS     R0,#+172
   \   00000630   2870               STRB     R0,[R5, #+0]
    554                        ptr2[1]=0x04;
   \   00000632   0420               MOVS     R0,#+4
   \   00000634   6870               STRB     R0,[R5, #+1]
    555                        
    556                        for (int k=2; k<=32; k++)
   \   00000636   0220               MOVS     R0,#+2
   \   00000638   15E0               B        ??komunikcja_RSwin_45
   \   0000063A   C046               Nop      
   \                     ??komunikcja_RSwin_28:
   \   0000063C   ........           DC32     Convers_DW_B
   \   00000640   ........           DC32     Convers_DW_B + 1
   \   00000644   ........           DC32     Convers_DW_B + 2
   \   00000648   ........           DC32     Convers_DW_B + 3
   \   0000064C   0038FFFF           DC32     0xffff3800
   \   00000650   ........           DC32     gProg
   \   00000654   ........           DC32     Trap
    557                        {
    558                         ptr2[k]=pProg[0x40 - 2 +k]; 
   \                     ??komunikcja_RSwin_46:
   \   00000658   3149               LDR      R1,??komunikcja_RSwin_38+0x8  ;; pProg
   \   0000065A   0968               LDR      R1,[R1, #+0]
   \   0000065C   0918               ADDS     R1,R1,R0
   \   0000065E   3E31               ADDS     R1,R1,#+62
   \   00000660   0978               LDRB     R1,[R1, #+0]
   \   00000662   2954               STRB     R1,[R5, R0]
    559                        }
   \   00000664   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_45:
   \   00000666   2128               CMP      R0,#+33
   \   00000668   F6DB               BLT      ??komunikcja_RSwin_46
    560          
    561                        *ptr3=33;
   \   0000066A   2120               MOVS     R0,#+33
   \   0000066C   3060               STR      R0,[R6, #+0]
    562                        ptr2[33]=CheckSum(ptr2, ptr3);
   \   0000066E   3100               MOVS     R1,R6
   \   00000670   2800               MOVS     R0,R5
   \   00000672   ........           BL       CheckSum
   \   00000676   2121               MOVS     R1,#+33
   \   00000678   6854               STRB     R0,[R5, R1]
    563                        //Suma=true;
    564                        
    565                    }
    566          
    567              
    568               /*    
    569                   //pytanie 5 
    570                   if (
    571                         (ptr1[0]==0xAD)&&
    572                         (ptr1[1]==0x03)&&
    573                         (ptr1[2]==0x00)&&
    574                         (ptr1[3]==0x10)&&
    575                         (ptr1[4]==0x40)&&
    576                         (ptr1[5]==0x00)&&
    577                         (ptr1[6]==0x20)&&
    578                         (ptr1[7]==0xE0)
    579                        )
    580                    {
    581                       //odpowied
    582                        ptr2[0]=0xAC;
    583                        ptr2[1]=0x04;
    584                        ptr2[2]=0x73;
    585                        ptr2[3]=0x41;
    586                        ptr2[4]=0x73;
    587                        ptr2[5]=0x42;
    588                        ptr2[6]=0x45;
    589                        ptr2[7]=0xD6;
    590                        ptr2[8]=0x84;
    591                        ptr2[9]=0x75;
    592                        ptr2[10]=0xA5;
    593                        ptr2[11]=0xE8;
    594                        ptr2[12]=0x47;
    595                        ptr2[13]=0x00;
    596                        ptr2[14]=0xA0;
    597                        ptr2[15]=0x27;
    598                        ptr2[16]=0x21;
    599                        ptr2[17]=0xDE;
    600                        ptr2[18]=0x44;
    601                        ptr2[19]=0x5D;
    602          
    603                        *ptr3=20;   
    604                        ptr2[20]=CheckSum(ptr2, ptr3);
    605                        
    606               
    607                    }
    608                   
    609                  */
    610              
    611                   //rozkaz uruchomienia nowo wgranego programu
    612                   if (
    613                         (ptr1[0]==0xAC)&&
    614                         (ptr1[1]==0x01)&&
    615                         (ptr1[2]==0x53)
    616                        )
   \                     ??komunikcja_RSwin_44:
   \   0000067A   2078               LDRB     R0,[R4, #+0]
   \   0000067C   AC28               CMP      R0,#+172
   \   0000067E   1CD1               BNE      ??komunikcja_RSwin_47
   \   00000680   6078               LDRB     R0,[R4, #+1]
   \   00000682   0128               CMP      R0,#+1
   \   00000684   19D1               BNE      ??komunikcja_RSwin_47
   \   00000686   A078               LDRB     R0,[R4, #+2]
   \   00000688   5328               CMP      R0,#+83
   \   0000068A   16D1               BNE      ??komunikcja_RSwin_47
    617                    {
    618                        //zatrzymaj program
    619                        g_Stop_Program=1;
   \   0000068C   2548               LDR      R0,??komunikcja_RSwin_38+0xC  ;; g_Stop_Program
   \   0000068E   0121               MOVS     R1,#+1
   \   00000690   0A00               MOVS     R2,R1
   \   00000692   0270               STRB     R2,[R0, #+0]
    620                        //ustaw restart programu
    621                        g_Restart_Program=1;
   \   00000694   244A               LDR      R2,??komunikcja_RSwin_38+0x10  ;; g_Restart_Program
   \   00000696   1170               STRB     R1,[R2, #+0]
    622                        //cykl startowy
    623                        //start_cykl = 0;
    624                      
    625                        //przepisz program z flash do ram
    626                        char *memory_read_prog;
    627                        memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
   \   00000698   2449               LDR      R1,??komunikcja_RSwin_38+0x14  ;; FlashProgramReserveOfset
   \   0000069A   0968               LDR      R1,[R1, #+0]
   \   0000069C   244A               LDR      R2,??komunikcja_RSwin_38+0x18  ;; 0x130100
   \   0000069E   5118               ADDS     R1,R2,R1
    628                        for (int k = 0 ; k <= UseProgramSize ; k++) 
   \   000006A0   0022               MOVS     R2,#+0
   \   000006A2   04E0               B        ??komunikcja_RSwin_48
    629                        { 
    630                            pProg[k]=memory_read_prog[k]; 
   \                     ??komunikcja_RSwin_49:
   \   000006A4   1E4B               LDR      R3,??komunikcja_RSwin_38+0x8  ;; pProg
   \   000006A6   1B68               LDR      R3,[R3, #+0]
   \   000006A8   8F5C               LDRB     R7,[R1, R2]
   \   000006AA   9F54               STRB     R7,[R3, R2]
    631                        }
   \   000006AC   521C               ADDS     R2,R2,#+1
   \                     ??komunikcja_RSwin_48:
   \   000006AE   214B               LDR      R3,??komunikcja_RSwin_38+0x1C  ;; 0xd6d9
   \   000006B0   9A42               CMP      R2,R3
   \   000006B2   F7DB               BLT      ??komunikcja_RSwin_49
    632                        //koniec
    633          
    634                        *ptr3=0;
   \   000006B4   0021               MOVS     R1,#+0
   \   000006B6   3160               STR      R1,[R6, #+0]
    635                       
    636                      
    637                       
    638                       //wznów wykonywanie programu
    639                        g_Stop_Program=0; 
   \   000006B8   0170               STRB     R1,[R0, #+0]
    640                    }    
    641              
    642              
    643                   
    644                   //pytanie 6 
    645                   if (
    646                         (ptr1[0]==0xAD)&&
    647                         (ptr1[1]==0x03)&&
    648                         (ptr1[2]==0x00)&&
    649                         (ptr1[3]==0x10)&&
    650                         (ptr1[4]==0xC3)&&
    651                         (ptr1[5]==0x00)&&
    652                         (ptr1[6]==0x04)&&
    653                         (ptr1[7]==0x00)
    654                        )
   \                     ??komunikcja_RSwin_47:
   \   000006BA   2078               LDRB     R0,[R4, #+0]
   \   000006BC   AD28               CMP      R0,#+173
   \   000006BE   27D1               BNE      ??komunikcja_RSwin_50
   \   000006C0   6078               LDRB     R0,[R4, #+1]
   \   000006C2   0328               CMP      R0,#+3
   \   000006C4   24D1               BNE      ??komunikcja_RSwin_50
   \   000006C6   A078               LDRB     R0,[R4, #+2]
   \   000006C8   0028               CMP      R0,#+0
   \   000006CA   21D1               BNE      ??komunikcja_RSwin_50
   \   000006CC   E078               LDRB     R0,[R4, #+3]
   \   000006CE   1028               CMP      R0,#+16
   \   000006D0   1ED1               BNE      ??komunikcja_RSwin_50
   \   000006D2   2079               LDRB     R0,[R4, #+4]
   \   000006D4   C328               CMP      R0,#+195
   \   000006D6   1BD1               BNE      ??komunikcja_RSwin_50
   \   000006D8   6079               LDRB     R0,[R4, #+5]
   \   000006DA   0028               CMP      R0,#+0
   \   000006DC   18D1               BNE      ??komunikcja_RSwin_50
   \   000006DE   A079               LDRB     R0,[R4, #+6]
   \   000006E0   0428               CMP      R0,#+4
   \   000006E2   15D1               BNE      ??komunikcja_RSwin_50
   \   000006E4   E079               LDRB     R0,[R4, #+7]
   \   000006E6   0028               CMP      R0,#+0
   \   000006E8   12D1               BNE      ??komunikcja_RSwin_50
    655                    {
    656                        //odpowied
    657                        ptr2[0]=0xAC;
   \   000006EA   AC20               MOVS     R0,#+172
   \   000006EC   2870               STRB     R0,[R5, #+0]
    658                        ptr2[1]=0x04;
   \   000006EE   0420               MOVS     R0,#+4
   \   000006F0   6870               STRB     R0,[R5, #+1]
    659                        ptr2[2]=0x70;
   \   000006F2   7020               MOVS     R0,#+112
   \   000006F4   A870               STRB     R0,[R5, #+2]
    660                        ptr2[3]=0xC9;
   \   000006F6   C920               MOVS     R0,#+201
   \   000006F8   E870               STRB     R0,[R5, #+3]
    661                        ptr2[4]=0x90;
   \   000006FA   9020               MOVS     R0,#+144
   \   000006FC   2871               STRB     R0,[R5, #+4]
    662                        ptr2[5]=0x5D;
   \   000006FE   5D20               MOVS     R0,#+93
   \   00000700   6871               STRB     R0,[R5, #+5]
    663                        //ptr2[6]=0x2A;
    664                        *ptr3=6;    
   \   00000702   0620               MOVS     R0,#+6
   \   00000704   3060               STR      R0,[R6, #+0]
    665                        ptr2[6]=CheckSum(ptr2, ptr3);
   \   00000706   3100               MOVS     R1,R6
   \   00000708   2800               MOVS     R0,R5
   \   0000070A   ........           BL       CheckSum
   \   0000070E   A871               STRB     R0,[R5, #+6]
    666                    }
    667              
    668             
    669                   
    670          }
   \                     ??komunikcja_RSwin_50:
   \   00000710   FEBC               POP      {R1-R7}
   \   00000712   01BC               POP      {R0}
   \   00000714   0047               BX       R0               ;; return
   \   00000716   C046               Nop      
   \                     ??komunikcja_RSwin_38:
   \   00000718   ........           DC32     g_czas_petli
   \   0000071C   ........           DC32     identyfikacja
   \   00000720   ........           DC32     pProg
   \   00000724   ........           DC32     g_Stop_Program
   \   00000728   ........           DC32     g_Restart_Program
   \   0000072C   ........           DC32     FlashProgramReserveOfset
   \   00000730   00011300           DC32     0x130100
   \   00000734   D9D60000           DC32     0xd6d9
    671          
    672          //SUMA KONTEROLNA---------------------------------------------------------------

   \                                 In section .bss, align 1
    673           byte SK=0;
   \                     SK:
   \   00000000                      DS8 1

   \                                 In section Debug.txt, align 4, keep-with-next
    674          char CheckSum(char *TabLiczb, unsigned int *IlLiczb)
    675          {
   \                     CheckSum:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    676                  SK=0;
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0C4A               LDR      R2,??CheckSum_0  ;; SK
   \   00000006   1C00               MOVS     R4,R3
   \   00000008   1470               STRB     R4,[R2, #+0]
    677                  for (int k = 0; k<*IlLiczb; k++) 
   \   0000000A   04E0               B        ??CheckSum_1
    678                  {
    679                    SK += TabLiczb[k]; 
   \                     ??CheckSum_2:
   \   0000000C   1478               LDRB     R4,[R2, #+0]
   \   0000000E   C55C               LDRB     R5,[R0, R3]
   \   00000010   6419               ADDS     R4,R4,R5
   \   00000012   1470               STRB     R4,[R2, #+0]
    680                  }
   \   00000014   5B1C               ADDS     R3,R3,#+1
   \                     ??CheckSum_1:
   \   00000016   0C68               LDR      R4,[R1, #+0]
   \   00000018   A342               CMP      R3,R4
   \   0000001A   F7D3               BCC      ??CheckSum_2
    681                  SK = 0 - SK;
   \   0000001C   1378               LDRB     R3,[R2, #+0]
   \   0000001E   5C42               RSBS     R4,R3,#+0
   \   00000020   1470               STRB     R4,[R2, #+0]
    682                  TabLiczb[*IlLiczb]=SK;
   \   00000022   0B68               LDR      R3,[R1, #+0]
   \   00000024   1478               LDRB     R4,[R2, #+0]
   \   00000026   C454               STRB     R4,[R0, R3]
    683                  *IlLiczb=*IlLiczb+1;
   \   00000028   0868               LDR      R0,[R1, #+0]
   \   0000002A   401C               ADDS     R0,R0,#+1
   \   0000002C   0860               STR      R0,[R1, #+0]
    684                  return  SK;
   \   0000002E   1078               LDRB     R0,[R2, #+0]
   \   00000030   38BC               POP      {R3-R5}
   \   00000032   02BC               POP      {R1}
   \   00000034   0847               BX       R1               ;; return
   \   00000036   C046               Nop      
   \                     ??CheckSum_0:
   \   00000038   ........           DC32     SK
    685                  
    686          }
    687          //------------------------------------------------------------------------------
    688          
    689                         
    690          //Funkcja konwersji zmiennej analogowej z formatu MASTER na format Float oraz zapisu do RAM------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    691          void MasterToAnaVar(unsigned long *adr, unsigned long *vart)           //(nr. zmiennej, wartoæ do konwersji)
    692          {
    693                    
    694            ConversFC Convers_DW_Btmp;
    695            unsigned long zm;
                                 ^
Warning[Pe550]: variable "zm" was set but never used
    696          
    697            
    698                    
    699                    Convers_DW_Btmp.DWvar = *vart;   
    700                    zm=Convers_DW_Btmp.DWvar;
    701                    
    702          }
   \                     MasterToAnaVar:
   \   00000000   7047               BX       LR               ;; return
    703          //------------------------------------------------------------------------------
    704          
    705          
    706          //Funkcja konwersji zmiennej dwustanowej z formatu MASTER na format Float------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    707          void MasterToBinVar(unsigned long *adr, char *vart)           //(nr. zmiennej, wartoæ do konwersji)
    708          {
    709           
    710            /*
    711                  //ustawienie "1"
    712                  if ((*vart & 0xC0)==0x80)
    713                  { 
    714                    ram.BinVarRAM[(*adr/8)] |= (0x1 << (*adr%8));
    715                  }
    716                  if (((*vart & 0xC0)==0x00) || ((*vart & 0xC0)==0x40))
    717                  { 
    718                    ram.BinVarRAM[(*adr/8)] &= ~(0x1 << (*adr%8));
    719                  }
    720                  //Ustawienie forsowanie
    721                  if ((*vart & 0x1F)==0x15) 
    722                  { 
    723                    ram.BinVarRAMfors[(*adr/8)] |= (0x1 << (*adr%8));
    724                  }
    725                   else
    726                  { 
    727                    ram.BinVarRAMfors[(*adr/8)] &= ~(0x1 << (*adr%8));
    728                  }
    729            */
    730          }
   \                     MasterToBinVar:
   \   00000000   7047               BX       LR               ;; return
    731          //------------------------------------------------------------------------------
    732          
    733          
    734          //funkcja konwersji zmiennej dwustanowej z formatu Float na format MASTER ------

   \                                 In section Debug.txt, align 4, keep-with-next
    735          char BinVarToMaster(unsigned long *adr)                    
    736          {
    737          
    738          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "BinVarToMaster"
   \                     BinVarToMaster:
   \   00000000   7047               BX       LR               ;; return
    739          //------------------------------------------------------------------------------
    740          
    741          
    742          //funkcja konwersji zmiennej analogowej z formatu Float na format MASTER -------

   \                                 In section Debug.txt, align 4, keep-with-next
    743          unsigned long AnaVarToMaster(unsigned long *adr)
    744          {
    745            ConversFC Convers_DW_Btmp;
    746            unsigned long zm;
    747          
    748                    
    749               
    750                    
    751                    Convers_DW_Btmp.DWvar = 0;
    752          
    753                    return zm;
                                  ^
Warning[Pe549]: variable "zm" is used before its value is set

    ConversFC Convers_DW_Btmp;
              ^
"D:\Zeuron\Projekty\S300\S300-program v1.3 BETA- 14.03.2013\Framework\RS_WIN.c",745  Warning[Pe550]: 
          variable "Convers_DW_Btmp" was set but never used
   \                     AnaVarToMaster:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   7047               BX       LR               ;; return
    754                    
    755                    
    756          }
    757          //------------------------------------------------------------------------------
    758          

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     AnaVarToMaster        0
     BinVarToMaster        0
     CheckSum             16
     MasterToAnaVar        0
     MasterToBinVar        0
     komunikcja_RSwin     32


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     ram               400
     Convers_DW_B        4
     komunikcja_RSwin 1848
     SK                  1
     CheckSum           60
     MasterToAnaVar      2
     MasterToBinVar      2
     BinVarToMaster      2
     AnaVarToMaster      4
      Others            64

 
   405 bytes in section .bss
 1 982 bytes in section Debug.txt
 
 1 918 bytes of CODE memory (+ 64 bytes shared)
   405 bytes of DATA memory

Errors: none
Warnings: 4
