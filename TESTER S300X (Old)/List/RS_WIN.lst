###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           12/Jun/2013  19:50:37 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\RS_WIN.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\RS_WIN.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_ -D __ALARM -D     #
#                    __WIFI_MODULE -D _DEBUG_ -D S300iOld -D _TESTER_ -lC     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\TESTER S300X (Old)\List\" --diag_suppress     #
#                    Pa082 -o "D:\Zeuron\Projekty\S300\S300-program v1.4 -    #
#                    12.06.2013\TESTER S300X (Old)\Obj\" --no_unroll          #
#                    --no_inline --no_tbaa --no_scheduling --debug --endian   #
#                    little --cpu ARM7TDMI -e --fpu None --dlib_config        #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Om                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\TESTER S300X (Old)\List\RS_WIN.lst            #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\TESTER S300X (Old)\Obj\RS_WIN.o               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\RS_WIN.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : RS_WIN.c                                 *//
      7          //*  Opis                         : Plik komunikacji z programem RS-win      *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #include <intrinsics.h>
     24          #include "core/common.h"
     25          #include "core/device.h"
     26          #include "core/trace.h"
     27          #include "flash.h"
     28          #include "Framework.h"
     29          #include "Application_prog.h"
     30          
     31               

   \                                 In section .bss, align 4
     32          RAM ram;
   \                     ram:
   \   00000000                      DS8 400
     33          extern char *pProg;
     34          extern char WiFiDebug;
     35          //extern FlashPagesOffset;

   \                                 In section .bss, align 4
     36          ConversFC Convers_DW_B;
   \                     Convers_DW_B:
   \   00000000                      DS8 4
     37          
     38          
     39          
     40          
     41          //Zmienne zewnêtrzne -------------------------------------------------
     42              extern char g_czas_petli;
     43              extern const char identyfikacja[];
     44              extern int FlashProgramOfset;
     45              extern int FlashProgramReserveOfset;
     46              //extern char start_cykl;
     47              extern char g_Stop_Program;                                                     //1- zatrzymuje program
     48              extern char g_Restart_Program;                                                  //1- restartuje program
     49              extern _ProgramTab gProg;
     50              extern void Delay (unsigned long a);
     51              extern _Trap      Trap;
     52          //_______________Koniec globalnych zmiennych zewnêtrznych ______________________
     53          
     54              
     55          
     56          //*-----------------------------------------------------------------------------
     57          //* Nazwa funkcji :    komunikcja_RSwin
     58          //* Interpretacja i wykonanie rozkazów wysy³anych z programu RS-win
     59          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     60          void komunikcja_RSwin(char *ptr1, char *ptr2, unsigned int *ptr3)
     61          {
   \                     komunikcja_RSwin:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   0190               STR      R0,[SP, #+4]
     62          
     63          
     64              //Zmienne lokalne ----------------------------------------------------------
     65          
     66                unsigned long adres =0;;
     67              //----------------Koniec zmiennych lokalnych -------------------------------
     68            
     69           
     70              //Zmienne tymczasowe -------------------------------------------------------
     71                int tmp =0;
   \   0000000C   0700               MOVS     R7,R0
     72                
     73              //----------------Koniec zmiennych tymczasowych ---------------------------- 
     74            
     75            
     76                
     77                
     78              //Zapis do dowolnego segmentu ----------------------------------------------
     79              if ((ptr1[0]==0xAD)& (ptr1[1]==0x05)) 
   \   0000000E   2078               LDRB     R0,[R4, #+0]
   \   00000010   AD28               CMP      R0,#+173
   \   00000012   60D1               BNE      ??komunikcja_RSwin_0
   \   00000014   6078               LDRB     R0,[R4, #+1]
   \   00000016   0528               CMP      R0,#+5
   \   00000018   5DD1               BNE      ??komunikcja_RSwin_0
     80              {
     81                //Zapis programu zrodlowego
     82                adres = ptr1[4]+(ptr1[5]*0x100);
   \   0000001A   2079               LDRB     R0,[R4, #+4]
   \   0000001C   6179               LDRB     R1,[R4, #+5]
   \   0000001E   0902               LSLS     R1,R1,#+8
   \   00000020   4018               ADDS     R0,R0,R1
   \   00000022   0190               STR      R0,[SP, #+4]
     83                if (ptr1[3]==0x70)
   \   00000024   E078               LDRB     R0,[R4, #+3]
   \   00000026   7028               CMP      R0,#+112
   \   00000028   37D1               BNE      ??komunikcja_RSwin_1
     84                {
     85          
     86          
     87                       unsigned int Save = __get_interrupt_state();            
   \   0000002A   ........           BL       __iar_get_interrupt_state
   \   0000002E   0090               STR      R0,[SP, #+0]
     88                          __disable_interrupt();
   \   00000030   ........           BL       __iar_disable_interrupt
     89                          
     90                      if (adres==0) 
   \   00000034   0198               LDR      R0,[SP, #+4]
   \   00000036   0028               CMP      R0,#+0
   \   00000038   06D1               BNE      ??komunikcja_RSwin_2
     91                      {
     92                        //CleanFlash((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,sizeof(gProg));
     93                        CleanFlash((char*)&AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,sizeof(gProg));
   \   0000003A   BE49               LDR      R1,??komunikcja_RSwin_3  ;; 0xc670
   \   0000003C   BE48               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   BE4A               LDR      R2,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000042   1018               ADDS     R0,R2,R0
   \   00000044   ........           BL       CleanFlash
   \                     ??komunikcja_RSwin_2:
   \   00000048   A379               LDRB     R3,[R4, #+6]
   \   0000004A   2200               MOVS     R2,R4
   \   0000004C   D21D               ADDS     R2,R2,#+7
   \   0000004E   0199               LDR      R1,[SP, #+4]
   \   00000050   8C46               MOV      R12,R1
   \   00000052   B948               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   00000054   0168               LDR      R1,[R0, #+0]
   \   00000056   B948               LDR      R0,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000058   0818               ADDS     R0,R1,R0
   \   0000005A   6146               MOV      R1,R12
     94                      }
     95                      
     96                         
     97                          at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,adres,ptr1+7,ptr1[6]);
   \   0000005C   ........           BL       at91flashWrite
     98                      
     99                          
    100                          __set_interrupt_state(Save);
   \   00000060   0098               LDR      R0,[SP, #+0]
   \   00000062   ........           BL       __iar_set_interrupt_state
    101                          __enable_interrupt();  
   \   00000066   ........           BL       __iar_enable_interrupt
    102                     
    103                      
    104                      //Potwierdzenie
    105                      ptr2[0]=0xAC;
   \   0000006A   AC20               MOVS     R0,#+172
   \   0000006C   2870               STRB     R0,[R5, #+0]
    106                      ptr2[1]=0x02;
   \   0000006E   0220               MOVS     R0,#+2
   \   00000070   0100               MOVS     R1,R0
   \   00000072   6970               STRB     R1,[R5, #+1]
    107                      *ptr3=2;
   \   00000074   3060               STR      R0,[R6, #+0]
    108                      ptr2[2]=CheckSum(ptr2, ptr3);
   \   00000076   3100               MOVS     R1,R6
   \   00000078   2800               MOVS     R0,R5
   \   0000007A   ........           BL       CheckSum
   \   0000007E   A870               STRB     R0,[R5, #+2]
    109                      
    110                        /*
    111                               memory_read=(char*)&gProg+adres;
    112                      
    113                      for (char i=0; i<ptr1[6]; i++)
    114                      {
    115                        *memory_read=*(ptr1+7+i);
    116                        memory_read++;
    117                      }
    118                          
    119                      */
    120                  
    121                    //przepisz program z flash do ram
    122                    char *memory_read_prog;
    123                    memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
   \   00000080   AD48               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   00000082   0068               LDR      R0,[R0, #+0]
   \   00000084   AD49               LDR      R1,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000086   0818               ADDS     R0,R1,R0
    124                
    125                    
    126                    char *SourRam= (char*)&gProg;
    127                    int tProgramTabSize=ProgramTabSize;
    128                    for (int k = 0 ; k <= tProgramTabSize ; k++) 
   \   00000088   3900               MOVS     R1,R7
   \   0000008A   03E0               B        ??komunikcja_RSwin_4
    129                    { 
    130                          SourRam[k]=memory_read_prog[k]; 
   \                     ??komunikcja_RSwin_5:
   \   0000008C   AC4A               LDR      R2,??komunikcja_RSwin_3+0xC  ;; gProg
   \   0000008E   435C               LDRB     R3,[R0, R1]
   \   00000090   5354               STRB     R3,[R2, R1]
    131                          
    132                    }
   \   00000092   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_4:
   \   00000094   AB4A               LDR      R2,??komunikcja_RSwin_3+0x10  ;; 0xc671
   \   00000096   9142               CMP      R1,R2
   \   00000098   F8DB               BLT      ??komunikcja_RSwin_5
    133                } 
    134                   
    135                
    136                if (ptr1[3]==0x10)
   \                     ??komunikcja_RSwin_1:
   \   0000009A   E078               LDRB     R0,[R4, #+3]
   \   0000009C   1028               CMP      R0,#+16
   \   0000009E   1AD1               BNE      ??komunikcja_RSwin_0
    137                {
    138                   char *memory_read;
    139                      memory_read=(char*)&gProg+adres;
   \   000000A0   0198               LDR      R0,[SP, #+4]
   \   000000A2   A749               LDR      R1,??komunikcja_RSwin_3+0xC  ;; gProg
   \   000000A4   0818               ADDS     R0,R1,R0
    140                      
    141                      for (char i=0; i<ptr1[6]; i++)
   \   000000A6   3900               MOVS     R1,R7
   \   000000A8   06E0               B        ??komunikcja_RSwin_6
    142                      {
    143                        *memory_read=*(ptr1+7+i);
   \                     ??komunikcja_RSwin_7:
   \   000000AA   A218               ADDS     R2,R4,R2
   \   000000AC   D279               LDRB     R2,[R2, #+7]
   \   000000AE   0270               STRB     R2,[R0, #+0]
    144                        memory_read++;
   \   000000B0   401C               ADDS     R0,R0,#+1
    145                      } 
   \   000000B2   491C               ADDS     R1,R1,#+1
   \   000000B4   0906               LSLS     R1,R1,#+24
   \   000000B6   090E               LSRS     R1,R1,#+24
   \                     ??komunikcja_RSwin_6:
   \   000000B8   0A00               MOVS     R2,R1
   \   000000BA   A379               LDRB     R3,[R4, #+6]
   \   000000BC   9A42               CMP      R2,R3
   \   000000BE   F4D3               BCC      ??komunikcja_RSwin_7
    146                      
    147                      
    148                     //Potwierdzenie
    149                      ptr2[0]=0xAC;
   \   000000C0   AC20               MOVS     R0,#+172
   \   000000C2   2870               STRB     R0,[R5, #+0]
    150                      ptr2[1]=0x02;
   \   000000C4   0220               MOVS     R0,#+2
   \   000000C6   0100               MOVS     R1,R0
   \   000000C8   6970               STRB     R1,[R5, #+1]
    151                      *ptr3=2;
   \   000000CA   3060               STR      R0,[R6, #+0]
    152                      ptr2[2]=CheckSum(ptr2, ptr3);   
   \   000000CC   3100               MOVS     R1,R6
   \   000000CE   2800               MOVS     R0,R5
   \   000000D0   ........           BL       CheckSum
   \   000000D4   A870               STRB     R0,[R5, #+2]
    153                
    154                }
    155                
    156              }//-----------Koniec zapisu do dowolnego segmentu --------------------------         
    157              
    158              
    159              
    160              //Odczyt z dowolnego segmentu ----------------------------------------------
    161              if ((ptr1[0]==0xAD)& (ptr1[1]==0x03)) 
   \                     ??komunikcja_RSwin_0:
   \   000000D6   2078               LDRB     R0,[R4, #+0]
   \   000000D8   AD28               CMP      R0,#+173
   \   000000DA   4DD1               BNE      ??komunikcja_RSwin_8
   \   000000DC   6078               LDRB     R0,[R4, #+1]
   \   000000DE   0328               CMP      R0,#+3
   \   000000E0   4AD1               BNE      ??komunikcja_RSwin_8
    162              {
    163                
    164          
    165                //Odczyt programu zrodlowego
    166                if ((ptr1[2]==0x00) & (ptr1[3]==0x10) /*& (ptr1[4]!=0x40)*/)
   \   000000E2   A078               LDRB     R0,[R4, #+2]
   \   000000E4   0028               CMP      R0,#+0
   \   000000E6   20D1               BNE      ??komunikcja_RSwin_9
   \   000000E8   E078               LDRB     R0,[R4, #+3]
   \   000000EA   1028               CMP      R0,#+16
   \   000000EC   1DD1               BNE      ??komunikcja_RSwin_9
    167                {
    168                  
    169                  tmp = 2;
   \   000000EE   0227               MOVS     R7,#+2
    170                  
    171                  ptr2[0] =0xAC;
   \   000000F0   AC20               MOVS     R0,#+172
   \   000000F2   2870               STRB     R0,[R5, #+0]
    172                  ptr2[1] =0x04;
   \   000000F4   0420               MOVS     R0,#+4
   \   000000F6   6870               STRB     R0,[R5, #+1]
    173                  //*ptr3=2;
    174                  
    175                  adres = ptr1[4]+(ptr1[5]*0x100);
   \   000000F8   2079               LDRB     R0,[R4, #+4]
   \   000000FA   6179               LDRB     R1,[R4, #+5]
   \   000000FC   0902               LSLS     R1,R1,#+8
   \   000000FE   4018               ADDS     R0,R0,R1
   \   00000100   0190               STR      R0,[SP, #+4]
    176                  
    177                  char *memory_read;
    178                  
    179                  //memory_read=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    180                  memory_read=(char*)&gProg;
    181                  
    182                  
    183                  for (int k = 0 ; k <= (ptr1[6]-1) ; k++) 
   \   00000102   0020               MOVS     R0,#+0
   \   00000104   8E4B               LDR      R3,??komunikcja_RSwin_3+0xC  ;; gProg
   \   00000106   06E0               B        ??komunikcja_RSwin_10
    184                  { 
    185          
    186                      tmp++;
   \                     ??komunikcja_RSwin_11:
   \   00000108   7F1C               ADDS     R7,R7,#+1
    187                      
    188                      ptr2[2+k] =memory_read[adres+k]; 
   \   0000010A   2918               ADDS     R1,R5,R0
   \   0000010C   019A               LDR      R2,[SP, #+4]
   \   0000010E   1218               ADDS     R2,R2,R0
   \   00000110   9A5C               LDRB     R2,[R3, R2]
   \   00000112   8A70               STRB     R2,[R1, #+2]
    189                      
    190                  
    191                  }
   \   00000114   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_10:
   \   00000116   A179               LDRB     R1,[R4, #+6]
   \   00000118   491E               SUBS     R1,R1,#+1
   \   0000011A   8142               CMP      R1,R0
   \   0000011C   F4DA               BGE      ??komunikcja_RSwin_11
    192                  
    193                  
    194                  
    195          
    196                  *ptr3=tmp;
   \   0000011E   3760               STR      R7,[R6, #+0]
    197                  ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   00000120   3100               MOVS     R1,R6
   \   00000122   2800               MOVS     R0,R5
   \   00000124   ........           BL       CheckSum
   \   00000128   E855               STRB     R0,[R5, R7]
    198                  
    199                }
    200          //tmp
    201                if ((ptr1[2]==0x00) & (ptr1[3]>0x70) & (ptr1[3]<0xC0)  /*& (ptr1[4]!=0x40)*/)
   \                     ??komunikcja_RSwin_9:
   \   0000012A   A078               LDRB     R0,[R4, #+2]
   \   0000012C   0028               CMP      R0,#+0
   \   0000012E   23D1               BNE      ??komunikcja_RSwin_8
   \   00000130   E078               LDRB     R0,[R4, #+3]
   \   00000132   7128               CMP      R0,#+113
   \   00000134   20D3               BCC      ??komunikcja_RSwin_8
   \   00000136   C028               CMP      R0,#+192
   \   00000138   1ED2               BCS      ??komunikcja_RSwin_8
    202                {
    203                  
    204                  tmp = 2;
   \   0000013A   0227               MOVS     R7,#+2
    205                  
    206                  ptr2[0] =0xAC;
   \   0000013C   AC20               MOVS     R0,#+172
   \   0000013E   2870               STRB     R0,[R5, #+0]
    207                  ptr2[1] =0x04;
   \   00000140   0420               MOVS     R0,#+4
   \   00000142   6870               STRB     R0,[R5, #+1]
    208                  //*ptr3=2;
    209                  
    210                  adres = ptr1[4]+(ptr1[5]*0x100);
   \   00000144   2079               LDRB     R0,[R4, #+4]
   \   00000146   6179               LDRB     R1,[R4, #+5]
   \   00000148   0902               LSLS     R1,R1,#+8
   \   0000014A   4018               ADDS     R0,R0,R1
   \   0000014C   0190               STR      R0,[SP, #+4]
    211                  for (int k = 0 ; k <= (ptr1[6]-1) ; k++) 
   \   0000014E   0020               MOVS     R0,#+0
   \   00000150   08E0               B        ??komunikcja_RSwin_12
    212                  { 
    213                      ptr2[2+k] = pProg[adres+k];
   \                     ??komunikcja_RSwin_13:
   \   00000152   2918               ADDS     R1,R5,R0
   \   00000154   019A               LDR      R2,[SP, #+4]
   \   00000156   1218               ADDS     R2,R2,R0
   \   00000158   7B4B               LDR      R3,??komunikcja_RSwin_3+0x14  ;; pProg
   \   0000015A   1B68               LDR      R3,[R3, #+0]
   \   0000015C   9A5C               LDRB     R2,[R3, R2]
   \   0000015E   8A70               STRB     R2,[R1, #+2]
    214                      tmp++;
   \   00000160   7F1C               ADDS     R7,R7,#+1
    215                  }
   \   00000162   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_12:
   \   00000164   A179               LDRB     R1,[R4, #+6]
   \   00000166   491E               SUBS     R1,R1,#+1
   \   00000168   8142               CMP      R1,R0
   \   0000016A   F2DA               BGE      ??komunikcja_RSwin_13
    216          
    217                  *ptr3=tmp;
   \   0000016C   3760               STR      R7,[R6, #+0]
    218                  ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   0000016E   3100               MOVS     R1,R6
   \   00000170   2800               MOVS     R0,R5
   \   00000172   ........           BL       CheckSum
   \   00000176   E855               STRB     R0,[R5, R7]
    219                  
    220                } 
    221          //kon tmp
    222                
    223              }//------------------Koniec odczytu z dowolnego segmentu--------------------    
    224              
    225              
    226          
    227              //Odczyt z segmentu 0 ------------------------------------------------------
    228              if ((ptr1[0]==0xAC)& (ptr1[1]==0x03) & (ptr1[2]!=0x14) & (ptr1[2]!=0x80) ) 
   \                     ??komunikcja_RSwin_8:
   \   00000178   2078               LDRB     R0,[R4, #+0]
   \   0000017A   AC28               CMP      R0,#+172
   \   0000017C   00D0               BEQ      .+4
   \   0000017E   93E0               B        ??komunikcja_RSwin_14
   \   00000180   6078               LDRB     R0,[R4, #+1]
   \   00000182   0328               CMP      R0,#+3
   \   00000184   00D0               BEQ      .+4
   \   00000186   8FE0               B        ??komunikcja_RSwin_14
   \   00000188   A078               LDRB     R0,[R4, #+2]
   \   0000018A   1428               CMP      R0,#+20
   \   0000018C   00D1               BNE      .+4
   \   0000018E   8BE0               B        ??komunikcja_RSwin_14
   \   00000190   8028               CMP      R0,#+128
   \   00000192   00D1               BNE      .+4
   \   00000194   88E0               B        ??komunikcja_RSwin_14
   \   00000196   E178               LDRB     R1,[R4, #+3]
   \   00000198   0902               LSLS     R1,R1,#+8
   \   0000019A   4018               ADDS     R0,R0,R1
   \   0000019C   C021               MOVS     R1,#+192
   \   0000019E   0902               LSLS     R1,R1,#+8        ;; #+49152
   \   000001A0   0004               LSLS     R0,R0,#+16
   \   000001A2   000C               LSRS     R0,R0,#+16
   \   000001A4   8842               CMP      R0,R1
   \   000001A6   29D3               BCC      ??komunikcja_RSwin_15
   \   000001A8   A078               LDRB     R0,[R4, #+2]
   \   000001AA   E178               LDRB     R1,[R4, #+3]
   \   000001AC   0902               LSLS     R1,R1,#+8
   \   000001AE   4018               ADDS     R0,R0,R1
   \   000001B0   C821               MOVS     R1,#+200
   \   000001B2   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   000001B4   0004               LSLS     R0,R0,#+16
   \   000001B6   000C               LSRS     R0,R0,#+16
   \   000001B8   8842               CMP      R0,R1
   \   000001BA   1FD2               BCS      ??komunikcja_RSwin_15
    229              {
    230                
    231                //odczyt zmiennych dwustanwych
    232                if (   (ptr1[2]+(ptr1[3]*0x100)>= 0xC000) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xC7FF)  )
    233                {
    234                  
    235                  
    236                  ptr2[0] =0xAC;
   \   000001BC   AC20               MOVS     R0,#+172
   \   000001BE   2870               STRB     R0,[R5, #+0]
    237                  ptr2[1] =0x04;
   \   000001C0   0420               MOVS     R0,#+4
   \   000001C2   6870               STRB     R0,[R5, #+1]
    238                  tmp = 2;
   \   000001C4   0227               MOVS     R7,#+2
    239                  
    240                  for (int k = 0; k <= ptr1[4]-1; k++) 
   \   000001C6   0020               MOVS     R0,#+0
   \   000001C8   0090               STR      R0,[SP, #+0]
   \   000001CA   12E0               B        ??komunikcja_RSwin_16
    241                  { 
    242                    adres = (ptr1[2]+(ptr1[3]*0x100)-0xC000 +k);
   \                     ??komunikcja_RSwin_17:
   \   000001CC   A078               LDRB     R0,[R4, #+2]
   \   000001CE   E178               LDRB     R1,[R4, #+3]
   \   000001D0   0902               LSLS     R1,R1,#+8
   \   000001D2   4018               ADDS     R0,R0,R1
   \   000001D4   0099               LDR      R1,[SP, #+0]
   \   000001D6   4018               ADDS     R0,R0,R1
   \   000001D8   5C49               LDR      R1,??komunikcja_RSwin_3+0x18  ;; 0xffff4000
   \   000001DA   4018               ADDS     R0,R0,R1
   \   000001DC   0190               STR      R0,[SP, #+4]
    243                    ptr2[2+k] = BinVarToMaster(&adres);     
   \   000001DE   01A8               ADD      R0,SP,#+4
   \   000001E0   ........           BL       BinVarToMaster
   \   000001E4   0099               LDR      R1,[SP, #+0]
   \   000001E6   6918               ADDS     R1,R5,R1
   \   000001E8   8870               STRB     R0,[R1, #+2]
    244                    tmp++;
   \   000001EA   7F1C               ADDS     R7,R7,#+1
    245                  }
   \   000001EC   0098               LDR      R0,[SP, #+0]
   \   000001EE   401C               ADDS     R0,R0,#+1
   \   000001F0   0090               STR      R0,[SP, #+0]
   \                     ??komunikcja_RSwin_16:
   \   000001F2   2079               LDRB     R0,[R4, #+4]
   \   000001F4   401E               SUBS     R0,R0,#+1
   \   000001F6   0099               LDR      R1,[SP, #+0]
   \   000001F8   8842               CMP      R0,R1
   \   000001FA   E7DA               BGE      ??komunikcja_RSwin_17
    246                  
    247                }//Koniec odczytu zmiennych dwustanowych
    248                      
    249                      
    250                //Odczyt zmiennych analogowych
    251                if (  (ptr1[2]+(ptr1[3]*0x100)>= 0xC800) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xDFFF) )
   \                     ??komunikcja_RSwin_15:
   \   000001FC   A078               LDRB     R0,[R4, #+2]
   \   000001FE   E178               LDRB     R1,[R4, #+3]
   \   00000200   0902               LSLS     R1,R1,#+8
   \   00000202   4018               ADDS     R0,R0,R1
   \   00000204   C821               MOVS     R1,#+200
   \   00000206   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   00000208   0004               LSLS     R0,R0,#+16
   \   0000020A   000C               LSRS     R0,R0,#+16
   \   0000020C   8842               CMP      R0,R1
   \   0000020E   45D3               BCC      ??komunikcja_RSwin_18
   \   00000210   A078               LDRB     R0,[R4, #+2]
   \   00000212   E178               LDRB     R1,[R4, #+3]
   \   00000214   0902               LSLS     R1,R1,#+8
   \   00000216   4018               ADDS     R0,R0,R1
   \   00000218   E021               MOVS     R1,#+224
   \   0000021A   0902               LSLS     R1,R1,#+8        ;; #+57344
   \   0000021C   0004               LSLS     R0,R0,#+16
   \   0000021E   000C               LSRS     R0,R0,#+16
   \   00000220   8842               CMP      R0,R1
   \   00000222   3BD2               BCS      ??komunikcja_RSwin_18
    252                {   
    253                  
    254                  ptr2[0] =0xAC;
   \   00000224   AC20               MOVS     R0,#+172
   \   00000226   2870               STRB     R0,[R5, #+0]
    255                  ptr2[1] =0x04;
   \   00000228   0420               MOVS     R0,#+4
   \   0000022A   6870               STRB     R0,[R5, #+1]
    256                  tmp = 2;
   \   0000022C   0227               MOVS     R7,#+2
    257                  
    258                  for (int k = 0; k <= ptr1[4]-1; k=k+4) 
   \   0000022E   0020               MOVS     R0,#+0
   \   00000230   0090               STR      R0,[SP, #+0]
   \   00000232   2EE0               B        ??komunikcja_RSwin_19
    259                  { 
    260                    
    261                    adres = ((ptr1[2]+(ptr1[3]*0x100)-0xC800)/4)  +(k/4);
   \                     ??komunikcja_RSwin_20:
   \   00000234   A078               LDRB     R0,[R4, #+2]
   \   00000236   E178               LDRB     R1,[R4, #+3]
   \   00000238   0902               LSLS     R1,R1,#+8
   \   0000023A   4018               ADDS     R0,R0,R1
   \   0000023C   4449               LDR      R1,??komunikcja_RSwin_3+0x1C  ;; 0xffff3800
   \   0000023E   4018               ADDS     R0,R0,R1
   \   00000240   0100               MOVS     R1,R0
   \   00000242   4910               ASRS     R1,R1,#+1
   \   00000244   890F               LSRS     R1,R1,#+30
   \   00000246   0818               ADDS     R0,R1,R0
   \   00000248   8010               ASRS     R0,R0,#+2
   \   0000024A   0099               LDR      R1,[SP, #+0]
   \   0000024C   4910               ASRS     R1,R1,#+1
   \   0000024E   890F               LSRS     R1,R1,#+30
   \   00000250   009A               LDR      R2,[SP, #+0]
   \   00000252   8918               ADDS     R1,R1,R2
   \   00000254   8910               ASRS     R1,R1,#+2
   \   00000256   4018               ADDS     R0,R0,R1
   \   00000258   0190               STR      R0,[SP, #+4]
   \   0000025A   01A8               ADD      R0,SP,#+4
    262                    
    263                    Convers_DW_B.DWvar = AnaVarToMaster(&adres);  
   \   0000025C   ........           BL       AnaVarToMaster
   \   00000260   3C49               LDR      R1,??komunikcja_RSwin_3+0x20  ;; Convers_DW_B
   \   00000262   0860               STR      R0,[R1, #+0]
    264                    
    265                    // zmiana kolejnoci dla nowego RSWINa
    266                   /*
    267                    ptr2[k+2]   =Convers_DW_B.Bvar[3];
    268                    ptr2[k+3]   =Convers_DW_B.Bvar[2];
    269                    ptr2[k+4]   =Convers_DW_B.Bvar[0];
    270                    ptr2[k+5]   =Convers_DW_B.Bvar[1];
    271                   */
    272                    ptr2[k+2]   =Convers_DW_B.Bvar[0];
   \   00000264   0098               LDR      R0,[SP, #+0]
   \   00000266   2818               ADDS     R0,R5,R0
   \   00000268   0978               LDRB     R1,[R1, #+0]
   \   0000026A   8170               STRB     R1,[R0, #+2]
    273                    ptr2[k+3]   =Convers_DW_B.Bvar[1];
   \   0000026C   0098               LDR      R0,[SP, #+0]
   \   0000026E   2818               ADDS     R0,R5,R0
   \   00000270   3949               LDR      R1,??komunikcja_RSwin_3+0x24  ;; Convers_DW_B + 1
   \   00000272   0978               LDRB     R1,[R1, #+0]
   \   00000274   C170               STRB     R1,[R0, #+3]
    274                    ptr2[k+4]   =Convers_DW_B.Bvar[2];
   \   00000276   0098               LDR      R0,[SP, #+0]
   \   00000278   2818               ADDS     R0,R5,R0
   \   0000027A   3849               LDR      R1,??komunikcja_RSwin_3+0x28  ;; Convers_DW_B + 2
   \   0000027C   0978               LDRB     R1,[R1, #+0]
   \   0000027E   0171               STRB     R1,[R0, #+4]
    275                    ptr2[k+5]   =Convers_DW_B.Bvar[3];
   \   00000280   0098               LDR      R0,[SP, #+0]
   \   00000282   2818               ADDS     R0,R5,R0
   \   00000284   3649               LDR      R1,??komunikcja_RSwin_3+0x2C  ;; Convers_DW_B + 3
   \   00000286   0978               LDRB     R1,[R1, #+0]
   \   00000288   4171               STRB     R1,[R0, #+5]
    276                    
    277                    tmp=tmp+4;
   \   0000028A   3F1D               ADDS     R7,R7,#+4
    278                   }
   \   0000028C   0098               LDR      R0,[SP, #+0]
   \   0000028E   001D               ADDS     R0,R0,#+4
   \   00000290   0090               STR      R0,[SP, #+0]
   \                     ??komunikcja_RSwin_19:
   \   00000292   2079               LDRB     R0,[R4, #+4]
   \   00000294   401E               SUBS     R0,R0,#+1
   \   00000296   0099               LDR      R1,[SP, #+0]
   \   00000298   8842               CMP      R0,R1
   \   0000029A   CBDA               BGE      ??komunikcja_RSwin_20
    279                 }//Koniec odczytu zmiennych analogowych
    280                 *ptr3=tmp;
   \                     ??komunikcja_RSwin_18:
   \   0000029C   3760               STR      R7,[R6, #+0]
    281                 ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   0000029E   3100               MOVS     R1,R6
   \   000002A0   2800               MOVS     R0,R5
   \   000002A2   ........           BL       CheckSum
   \   000002A6   E855               STRB     R0,[R5, R7]
    282              
    283              }//-------------------Koniec odczytu z segmentu 0---------------------------
    284              
    285              
    286              
    287              //Zapis do segmentu 0-------------------------------------------------------
    288              if ((ptr1[0]==0xAC)& (ptr1[1]==0x05)) 
   \                     ??komunikcja_RSwin_14:
   \   000002A8   2078               LDRB     R0,[R4, #+0]
   \   000002AA   AC28               CMP      R0,#+172
   \   000002AC   00D0               BEQ      .+4
   \   000002AE   8FE0               B        ??komunikcja_RSwin_21
   \   000002B0   6078               LDRB     R0,[R4, #+1]
   \   000002B2   0528               CMP      R0,#+5
   \   000002B4   00D0               BEQ      .+4
   \   000002B6   8BE0               B        ??komunikcja_RSwin_21
   \   000002B8   A078               LDRB     R0,[R4, #+2]
   \   000002BA   E178               LDRB     R1,[R4, #+3]
   \   000002BC   0902               LSLS     R1,R1,#+8
   \   000002BE   4018               ADDS     R0,R0,R1
   \   000002C0   C021               MOVS     R1,#+192
   \   000002C2   0902               LSLS     R1,R1,#+8        ;; #+49152
   \   000002C4   0004               LSLS     R0,R0,#+16
   \   000002C6   000C               LSRS     R0,R0,#+16
   \   000002C8   8842               CMP      R0,R1
   \   000002CA   1DD3               BCC      ??komunikcja_RSwin_22
   \   000002CC   A078               LDRB     R0,[R4, #+2]
   \   000002CE   E178               LDRB     R1,[R4, #+3]
   \   000002D0   0902               LSLS     R1,R1,#+8
   \   000002D2   4018               ADDS     R0,R0,R1
   \   000002D4   C821               MOVS     R1,#+200
   \   000002D6   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   000002D8   0004               LSLS     R0,R0,#+16
   \   000002DA   000C               LSRS     R0,R0,#+16
   \   000002DC   8842               CMP      R0,R1
   \   000002DE   13D2               BCS      ??komunikcja_RSwin_22
    289              {
    290          
    291                //Zapis zmiennych dwustanowych
    292                if ( (ptr1[2]+(ptr1[3]*0x100)>= 0xC000) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xC7FF))
    293                {
    294                  for (int k = 0; k <= ptr1[4]-1; k++) 
   \   000002E0   0027               MOVS     R7,#+0
   \   000002E2   0DE0               B        ??komunikcja_RSwin_23
    295                  { 
    296                    adres = (ptr1[2]+(ptr1[3]*0x100)-0xC000+k);
   \                     ??komunikcja_RSwin_24:
   \   000002E4   A078               LDRB     R0,[R4, #+2]
   \   000002E6   E178               LDRB     R1,[R4, #+3]
   \   000002E8   0902               LSLS     R1,R1,#+8
   \   000002EA   4018               ADDS     R0,R0,R1
   \   000002EC   C019               ADDS     R0,R0,R7
   \   000002EE   1749               LDR      R1,??komunikcja_RSwin_3+0x18  ;; 0xffff4000
   \   000002F0   4018               ADDS     R0,R0,R1
   \   000002F2   0190               STR      R0,[SP, #+4]
    297                    MasterToBinVar(&adres, &ptr1[5]);              //Konwersja z formatu Master i zapis
   \   000002F4   2100               MOVS     R1,R4
   \   000002F6   491D               ADDS     R1,R1,#+5
   \   000002F8   01A8               ADD      R0,SP,#+4
   \   000002FA   ........           BL       MasterToBinVar
    298                  }        
   \   000002FE   7F1C               ADDS     R7,R7,#+1
   \                     ??komunikcja_RSwin_23:
   \   00000300   2079               LDRB     R0,[R4, #+4]
   \   00000302   401E               SUBS     R0,R0,#+1
   \   00000304   B842               CMP      R0,R7
   \   00000306   EDDA               BGE      ??komunikcja_RSwin_24
    299                }//Koniec zapisu zmiennych dwustanowch
    300                      
    301                      
    302                
    303                //Zapis zmiennej analogowej
    304                if ( (ptr1[2]+(ptr1[3]*0x100)>= 0xC800) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xDFFF))
   \                     ??komunikcja_RSwin_22:
   \   00000308   A078               LDRB     R0,[R4, #+2]
   \   0000030A   E178               LDRB     R1,[R4, #+3]
   \   0000030C   0902               LSLS     R1,R1,#+8
   \   0000030E   4018               ADDS     R0,R0,R1
   \   00000310   C821               MOVS     R1,#+200
   \   00000312   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   00000314   0004               LSLS     R0,R0,#+16
   \   00000316   000C               LSRS     R0,R0,#+16
   \   00000318   8842               CMP      R0,R1
   \   0000031A   4ED3               BCC      ??komunikcja_RSwin_25
   \   0000031C   A078               LDRB     R0,[R4, #+2]
   \   0000031E   E178               LDRB     R1,[R4, #+3]
   \   00000320   0902               LSLS     R1,R1,#+8
   \   00000322   4018               ADDS     R0,R0,R1
   \   00000324   E021               MOVS     R1,#+224
   \   00000326   0902               LSLS     R1,R1,#+8        ;; #+57344
   \   00000328   0004               LSLS     R0,R0,#+16
   \   0000032A   000C               LSRS     R0,R0,#+16
   \   0000032C   8842               CMP      R0,R1
   \   0000032E   44D2               BCS      ??komunikcja_RSwin_25
    305                {
    306                                                           
    307          
    308                  for (int k = 0; k <= ptr1[4]-1; k=k+4) 
   \   00000330   0027               MOVS     R7,#+0
   \   00000332   3EE0               B        ??komunikcja_RSwin_26
   \                     ??komunikcja_RSwin_3:
   \   00000334   70C60000           DC32     0xc670
   \   00000338   ........           DC32     FlashProgramOfset
   \   0000033C   00011300           DC32     0x130100
   \   00000340   ........           DC32     gProg
   \   00000344   71C60000           DC32     0xc671
   \   00000348   ........           DC32     pProg
   \   0000034C   0040FFFF           DC32     0xffff4000
   \   00000350   0038FFFF           DC32     0xffff3800
   \   00000354   ........           DC32     Convers_DW_B
   \   00000358   ........           DC32     Convers_DW_B + 1
   \   0000035C   ........           DC32     Convers_DW_B + 2
   \   00000360   ........           DC32     Convers_DW_B + 3
   \                     ??komunikcja_RSwin_27:
   \   00000364   B548               LDR      R0,??komunikcja_RSwin_28  ;; Convers_DW_B
   \   00000366   E119               ADDS     R1,R4,R7
   \   00000368   4979               LDRB     R1,[R1, #+5]
   \   0000036A   0170               STRB     R1,[R0, #+0]
    309                  { /*
    310                    // zmiana kolejnoci dla nowego RSWINa
    311                    
    312                    Convers_DW_B.Bvar[3] = ptr1[5+(k)+0];
    313                    Convers_DW_B.Bvar[2] = ptr1[5+(k)+1];
    314                    Convers_DW_B.Bvar[0] = ptr1[5+(k)+2];
    315                    Convers_DW_B.Bvar[1] = ptr1[5+(k)+3];
    316                    */
    317                    Convers_DW_B.Bvar[0] = ptr1[5+(k)+0];
    318                    Convers_DW_B.Bvar[1] = ptr1[5+(k)+1];
   \   0000036C   B448               LDR      R0,??komunikcja_RSwin_28+0x4  ;; Convers_DW_B + 1
   \   0000036E   E119               ADDS     R1,R4,R7
   \   00000370   8979               LDRB     R1,[R1, #+6]
   \   00000372   0170               STRB     R1,[R0, #+0]
    319                    Convers_DW_B.Bvar[2] = ptr1[5+(k)+2];
   \   00000374   B348               LDR      R0,??komunikcja_RSwin_28+0x8  ;; Convers_DW_B + 2
   \   00000376   E119               ADDS     R1,R4,R7
   \   00000378   C979               LDRB     R1,[R1, #+7]
   \   0000037A   0170               STRB     R1,[R0, #+0]
    320                    Convers_DW_B.Bvar[3] = ptr1[5+(k)+3];
   \   0000037C   B248               LDR      R0,??komunikcja_RSwin_28+0xC  ;; Convers_DW_B + 3
   \   0000037E   E119               ADDS     R1,R4,R7
   \   00000380   097A               LDRB     R1,[R1, #+8]
   \   00000382   0170               STRB     R1,[R0, #+0]
    321                    
    322                    
    323                    adres= (((ptr1[2]+(ptr1[3]*0x100)-0xC800))/4)+(k/4);
   \   00000384   A078               LDRB     R0,[R4, #+2]
   \   00000386   E178               LDRB     R1,[R4, #+3]
   \   00000388   0902               LSLS     R1,R1,#+8
   \   0000038A   4018               ADDS     R0,R0,R1
   \   0000038C   AF49               LDR      R1,??komunikcja_RSwin_28+0x10  ;; 0xffff3800
   \   0000038E   4018               ADDS     R0,R0,R1
   \   00000390   0100               MOVS     R1,R0
   \   00000392   4910               ASRS     R1,R1,#+1
   \   00000394   890F               LSRS     R1,R1,#+30
   \   00000396   0818               ADDS     R0,R1,R0
   \   00000398   8010               ASRS     R0,R0,#+2
   \   0000039A   3900               MOVS     R1,R7
   \   0000039C   4910               ASRS     R1,R1,#+1
   \   0000039E   890F               LSRS     R1,R1,#+30
   \   000003A0   C919               ADDS     R1,R1,R7
   \   000003A2   8910               ASRS     R1,R1,#+2
   \   000003A4   4018               ADDS     R0,R0,R1
   \   000003A6   0190               STR      R0,[SP, #+4]
    324                    MasterToAnaVar(&adres, &Convers_DW_B.DWvar);
   \   000003A8   A449               LDR      R1,??komunikcja_RSwin_28  ;; Convers_DW_B
   \   000003AA   01A8               ADD      R0,SP,#+4
   \   000003AC   ........           BL       MasterToAnaVar
    325          
    326                  } //koniec petli k
   \   000003B0   3F1D               ADDS     R7,R7,#+4
   \                     ??komunikcja_RSwin_26:
   \   000003B2   2079               LDRB     R0,[R4, #+4]
   \   000003B4   401E               SUBS     R0,R0,#+1
   \   000003B6   B842               CMP      R0,R7
   \   000003B8   D4DA               BGE      ??komunikcja_RSwin_27
    327                  
    328                }//Koniec zapisu zmiennych analogowych
    329                      
    330                      
    331                      
    332                      
    333                  //Potwierdzenie
    334                  ptr2[0]=0xAC;
   \                     ??komunikcja_RSwin_25:
   \   000003BA   AC20               MOVS     R0,#+172
   \   000003BC   2870               STRB     R0,[R5, #+0]
    335                  ptr2[1]=0x02;
   \   000003BE   0220               MOVS     R0,#+2
   \   000003C0   0100               MOVS     R1,R0
   \   000003C2   6970               STRB     R1,[R5, #+1]
    336                  *ptr3=2;
   \   000003C4   3060               STR      R0,[R6, #+0]
    337                  //koniec potwoerdzenia
    338                  
    339                   ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   000003C6   3100               MOVS     R1,R6
   \   000003C8   2800               MOVS     R0,R5
   \   000003CA   ........           BL       CheckSum
   \   000003CE   A870               STRB     R0,[R5, #+2]
    340           
    341              }//------------------Koniec zapisu do segmentu 0---------------------------       
    342                 
    343              
    344          
    345              
    346              //!!! Standardowe pytania -------------------------------------------------- 
    347             
    348                  //Przepisz program uzytkowy z Ram do flash
    349                  if ( (ptr1[0]==0xAC) && (ptr1[1]==0x06) && (ptr1[2]==0x4E) )
   \                     ??komunikcja_RSwin_21:
   \   000003D0   2078               LDRB     R0,[R4, #+0]
   \   000003D2   AC28               CMP      R0,#+172
   \   000003D4   15D1               BNE      ??komunikcja_RSwin_29
   \   000003D6   6078               LDRB     R0,[R4, #+1]
   \   000003D8   0628               CMP      R0,#+6
   \   000003DA   12D1               BNE      ??komunikcja_RSwin_29
   \   000003DC   A078               LDRB     R0,[R4, #+2]
   \   000003DE   4E28               CMP      R0,#+78
   \   000003E0   0FD1               BNE      ??komunikcja_RSwin_29
    350                    {
    351                      ptr2[0]=0xAC;
   \   000003E2   AC20               MOVS     R0,#+172
   \   000003E4   2870               STRB     R0,[R5, #+0]
    352                      ptr2[1]=0x02;
   \   000003E6   0220               MOVS     R0,#+2
   \   000003E8   0100               MOVS     R1,R0
   \   000003EA   6970               STRB     R1,[R5, #+1]
    353                      *ptr3=2;
   \   000003EC   3060               STR      R0,[R6, #+0]
    354                      ptr2[2]=CheckSum(ptr2, ptr3);
   \   000003EE   3100               MOVS     R1,R6
   \   000003F0   2800               MOVS     R0,R5
   \   000003F2   ........           BL       CheckSum
   \   000003F6   A870               STRB     R0,[R5, #+2]
    355                      
    356                      
    357                       RamToFlash();
   \   000003F8   ........           BL       RamToFlash
    358                       ProgramChangeExecute(&gProg); 
   \   000003FC   9448               LDR      R0,??komunikcja_RSwin_28+0x14  ;; gProg
   \   000003FE   ........           BL       ProgramChangeExecute
    359          
    360                    }
    361          
    362          
    363              
    364                    //Ustaw pu³apkê
    365                    if (
    366                         (ptr1[0]==0xAA)&&
    367                         (ptr1[1]==0xAA)&&
    368                         (ptr1[2]==0x01)
    369                        )
   \                     ??komunikcja_RSwin_29:
   \   00000402   2078               LDRB     R0,[R4, #+0]
   \   00000404   AA28               CMP      R0,#+170
   \   00000406   1AD1               BNE      ??komunikcja_RSwin_30
   \   00000408   6078               LDRB     R0,[R4, #+1]
   \   0000040A   AA28               CMP      R0,#+170
   \   0000040C   17D1               BNE      ??komunikcja_RSwin_30
   \   0000040E   A078               LDRB     R0,[R4, #+2]
   \   00000410   0128               CMP      R0,#+1
   \   00000412   14D1               BNE      ??komunikcja_RSwin_30
    370                      {
    371                       
    372                        Trap.Row=ptr1[3];
   \   00000414   8F48               LDR      R0,??komunikcja_RSwin_28+0x18  ;; Trap
   \   00000416   E178               LDRB     R1,[R4, #+3]
   \   00000418   4170               STRB     R1,[R0, #+1]
    373                        Trap.Col=ptr1[4];
   \   0000041A   2179               LDRB     R1,[R4, #+4]
   \   0000041C   8170               STRB     R1,[R0, #+2]
    374                        Trap.Enable=1;
   \   0000041E   0121               MOVS     R1,#+1
   \   00000420   0A00               MOVS     R2,R1
   \   00000422   0270               STRB     R2,[R0, #+0]
    375                        Trap.Activ=0;
   \   00000424   0022               MOVS     R2,#+0
   \   00000426   C270               STRB     R2,[R0, #+3]
    376                        Trap.Change=1;
   \   00000428   0171               STRB     R1,[R0, #+4]
    377                        
    378                        
    379                        //Potwierdzenie
    380                         ptr2[0]=0xAB;
   \   0000042A   AB20               MOVS     R0,#+171
   \   0000042C   2870               STRB     R0,[R5, #+0]
    381                         ptr2[1]=0xAB;
   \   0000042E   6870               STRB     R0,[R5, #+1]
    382                         *ptr3=2;
   \   00000430   0220               MOVS     R0,#+2
   \   00000432   3060               STR      R0,[R6, #+0]
    383                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   00000434   3100               MOVS     R1,R6
   \   00000436   2800               MOVS     R0,R5
   \   00000438   ........           BL       CheckSum
   \   0000043C   A870               STRB     R0,[R5, #+2]
    384                        //koniec potwoerdzenia
    385          
    386                      }//koniec "Ustaw pu³apkê"
    387                   
    388              
    389              
    390                    //Usuñ pu³apki
    391                    if (
    392                         (ptr1[0]==0xAA)&&
    393                         (ptr1[1]==0xAA)&&
    394                         (ptr1[2]==0x02)
    395                        )
   \                     ??komunikcja_RSwin_30:
   \   0000043E   2078               LDRB     R0,[R4, #+0]
   \   00000440   AA28               CMP      R0,#+170
   \   00000442   15D1               BNE      ??komunikcja_RSwin_31
   \   00000444   6078               LDRB     R0,[R4, #+1]
   \   00000446   AA28               CMP      R0,#+170
   \   00000448   12D1               BNE      ??komunikcja_RSwin_31
   \   0000044A   A078               LDRB     R0,[R4, #+2]
   \   0000044C   0228               CMP      R0,#+2
   \   0000044E   0FD1               BNE      ??komunikcja_RSwin_31
    396                      {
    397                        
    398                        Trap.Enable=0;
   \   00000450   8048               LDR      R0,??komunikcja_RSwin_28+0x18  ;; Trap
   \   00000452   0021               MOVS     R1,#+0
   \   00000454   0170               STRB     R1,[R0, #+0]
    399                        Trap.Row=0;
   \   00000456   4170               STRB     R1,[R0, #+1]
    400                        Trap.Col=0;
   \   00000458   8170               STRB     R1,[R0, #+2]
    401                        Trap.Activ=0;
   \   0000045A   C170               STRB     R1,[R0, #+3]
    402                       
    403                        //Potwierdzenie
    404                         ptr2[0]=0xAB;
   \   0000045C   AB20               MOVS     R0,#+171
   \   0000045E   2870               STRB     R0,[R5, #+0]
    405                         ptr2[1]=0xAB;
   \   00000460   6870               STRB     R0,[R5, #+1]
    406                         *ptr3=2;
   \   00000462   0220               MOVS     R0,#+2
   \   00000464   3060               STR      R0,[R6, #+0]
    407                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   00000466   3100               MOVS     R1,R6
   \   00000468   2800               MOVS     R0,R5
   \   0000046A   ........           BL       CheckSum
   \   0000046E   A870               STRB     R0,[R5, #+2]
    408                        //koniec potwoerdzenia
    409          
    410                      }//koniec "Ustaw pu³apkê"
    411                   
    412              
    413              
    414                     //Odczytaj stany "Output" procedur (ptr1[3]-startowy rz¹d procedur, ptr1[4]-ilosc rzedow do odczytu
    415                    if (
    416                         (ptr1[0]==0xAA)&&
    417                         (ptr1[1]==0xAA)&&
    418                         (ptr1[2]==0x03)
    419                        )
   \                     ??komunikcja_RSwin_31:
   \   00000470   2078               LDRB     R0,[R4, #+0]
   \   00000472   AA28               CMP      R0,#+170
   \   00000474   2DD1               BNE      ??komunikcja_RSwin_32
   \   00000476   6078               LDRB     R0,[R4, #+1]
   \   00000478   AA28               CMP      R0,#+170
   \   0000047A   2AD1               BNE      ??komunikcja_RSwin_32
   \   0000047C   A078               LDRB     R0,[R4, #+2]
   \   0000047E   0328               CMP      R0,#+3
   \   00000480   27D1               BNE      ??komunikcja_RSwin_32
    420                      {
    421          
    422                          
    423                  
    424                          ptr2[0] =0xAC;
   \   00000482   AC20               MOVS     R0,#+172
   \   00000484   2870               STRB     R0,[R5, #+0]
    425                          ptr2[1] =0x04;
   \   00000486   0420               MOVS     R0,#+4
   \   00000488   6870               STRB     R0,[R5, #+1]
    426          
    427                          tmp = 2;
   \   0000048A   0227               MOVS     R7,#+2
    428          
    429                          for (int Row = ptr1[3] ; Row<ptr1[3]+ptr1[4] ; Row++) 
   \   0000048C   E078               LDRB     R0,[R4, #+3]
   \   0000048E   13E0               B        ??komunikcja_RSwin_33
    430                          { 
    431                            for (int Col = 0 ; Col<MaxPrcInLine ; Col++) 
   \                     ??komunikcja_RSwin_34:
   \   00000490   1823               MOVS     R3,#+24
   \   00000492   4B43               MULS     R3,R1,R3
   \   00000494   9C46               MOV      R12,R3
   \   00000496   F023               MOVS     R3,#+240
   \   00000498   4343               MULS     R3,R0,R3
   \   0000049A   6D4A               LDR      R2,??komunikcja_RSwin_28+0x14  ;; gProg
   \   0000049C   D218               ADDS     R2,R2,R3
   \   0000049E   6346               MOV      R3,R12
   \   000004A0   D218               ADDS     R2,R2,R3
   \   000004A2   538D               LDRH     R3,[R2, #+42]
   \   000004A4   1B12               ASRS     R3,R3,#+8
   \   000004A6   EB55               STRB     R3,[R5, R7]
   \   000004A8   7F1C               ADDS     R7,R7,#+1
    432                            { 
    433                              ptr2[tmp++] =gProg.Line[Row].Proc[Col].Out>>8; 
    434                              ptr2[tmp++] =gProg.Line[Row].Proc[Col].Out & 0xFF; 
   \   000004AA   528D               LDRH     R2,[R2, #+42]
   \   000004AC   EA55               STRB     R2,[R5, R7]
   \   000004AE   7F1C               ADDS     R7,R7,#+1
    435                            }  
   \   000004B0   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_35:
   \   000004B2   0A29               CMP      R1,#+10
   \   000004B4   ECDB               BLT      ??komunikcja_RSwin_34
   \   000004B6   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_33:
   \   000004B8   E178               LDRB     R1,[R4, #+3]
   \   000004BA   2279               LDRB     R2,[R4, #+4]
   \   000004BC   8918               ADDS     R1,R1,R2
   \   000004BE   8842               CMP      R0,R1
   \   000004C0   01DA               BGE      ??komunikcja_RSwin_36
   \   000004C2   0021               MOVS     R1,#+0
   \   000004C4   F5E7               B        ??komunikcja_RSwin_35
    436                          }
    437                      
    438          
    439                          *ptr3=tmp;
   \                     ??komunikcja_RSwin_36:
   \   000004C6   3760               STR      R7,[R6, #+0]
    440                          ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   000004C8   3100               MOVS     R1,R6
   \   000004CA   2800               MOVS     R0,R5
   \   000004CC   ........           BL       CheckSum
   \   000004D0   E855               STRB     R0,[R5, R7]
    441          
    442                        
    443                        
    444                      }//koniec "Ustaw pu³apkê"
    445                    
    446              
    447              
    448              
    449                  //Komunikacja startowa  
    450                    //pytanie 0 - pytanie o prêdkoæ pêtli programu
    451                    if (
    452                         (ptr1[0]==0xAC)&&
    453                         (ptr1[1]==0x03)&&
    454                         (ptr1[2]==0x14)&&
    455                         (ptr1[3]==0xFF)&&
    456                         (ptr1[4]==0x02)&&
    457                         (ptr1[5]==0x3C)
    458                        )
   \                     ??komunikcja_RSwin_32:
   \   000004D2   2078               LDRB     R0,[R4, #+0]
   \   000004D4   AC28               CMP      R0,#+172
   \   000004D6   21D1               BNE      ??komunikcja_RSwin_37
   \   000004D8   6078               LDRB     R0,[R4, #+1]
   \   000004DA   0328               CMP      R0,#+3
   \   000004DC   1ED1               BNE      ??komunikcja_RSwin_37
   \   000004DE   A078               LDRB     R0,[R4, #+2]
   \   000004E0   1428               CMP      R0,#+20
   \   000004E2   1BD1               BNE      ??komunikcja_RSwin_37
   \   000004E4   E078               LDRB     R0,[R4, #+3]
   \   000004E6   FF28               CMP      R0,#+255
   \   000004E8   18D1               BNE      ??komunikcja_RSwin_37
   \   000004EA   2079               LDRB     R0,[R4, #+4]
   \   000004EC   0228               CMP      R0,#+2
   \   000004EE   15D1               BNE      ??komunikcja_RSwin_37
   \   000004F0   6079               LDRB     R0,[R4, #+5]
   \   000004F2   3C28               CMP      R0,#+60
   \   000004F4   12D1               BNE      ??komunikcja_RSwin_37
    459                      {
    460                        //odpowied
    461                        ptr2[0]=0xAC;
   \   000004F6   AC20               MOVS     R0,#+172
   \   000004F8   2870               STRB     R0,[R5, #+0]
    462                        ptr2[1]=0x04;
   \   000004FA   0427               MOVS     R7,#+4
   \   000004FC   3800               MOVS     R0,R7
   \   000004FE   6870               STRB     R0,[R5, #+1]
    463                        ptr2[2]=g_czas_petli / 10;
   \   00000500   9B48               LDR      R0,??komunikcja_RSwin_38  ;; g_czas_petli
   \   00000502   0078               LDRB     R0,[R0, #+0]
   \   00000504   0A21               MOVS     R1,#+10
   \   00000506   ........           BL       __aeabi_idivmod
   \   0000050A   A870               STRB     R0,[R5, #+2]
    464                        ptr2[3]=0x00;
   \   0000050C   0020               MOVS     R0,#+0
   \   0000050E   E870               STRB     R0,[R5, #+3]
    465                        *ptr3=4;
   \   00000510   3760               STR      R7,[R6, #+0]
    466                        ptr2[4]=CheckSum(ptr2, ptr3);
   \   00000512   3100               MOVS     R1,R6
   \   00000514   2800               MOVS     R0,R5
   \   00000516   ........           BL       CheckSum
   \   0000051A   2871               STRB     R0,[R5, #+4]
    467                      }//koniec pytania 0
    468                   
    469            
    470                   //pytanie 1 
    471                   if (
    472                         (ptr1[0]==0xAD)&&
    473                         (ptr1[1]==0x03)&&
    474                         (ptr1[2]==0x00)&&
    475                         (ptr1[3]==0xA0)&&
    476                         (ptr1[4]==0x0D)&&
    477                         (ptr1[5]==0x00)&&
    478                         (ptr1[6]==0x01)&&
    479                         (ptr1[7]==0xA2)
    480                      
    481                        )
   \                     ??komunikcja_RSwin_37:
   \   0000051C   2078               LDRB     R0,[R4, #+0]
   \   0000051E   AD28               CMP      R0,#+173
   \   00000520   21D1               BNE      ??komunikcja_RSwin_39
   \   00000522   6078               LDRB     R0,[R4, #+1]
   \   00000524   0328               CMP      R0,#+3
   \   00000526   1ED1               BNE      ??komunikcja_RSwin_39
   \   00000528   A078               LDRB     R0,[R4, #+2]
   \   0000052A   0028               CMP      R0,#+0
   \   0000052C   1BD1               BNE      ??komunikcja_RSwin_39
   \   0000052E   E078               LDRB     R0,[R4, #+3]
   \   00000530   A028               CMP      R0,#+160
   \   00000532   18D1               BNE      ??komunikcja_RSwin_39
   \   00000534   2079               LDRB     R0,[R4, #+4]
   \   00000536   0D28               CMP      R0,#+13
   \   00000538   15D1               BNE      ??komunikcja_RSwin_39
   \   0000053A   6079               LDRB     R0,[R4, #+5]
   \   0000053C   0028               CMP      R0,#+0
   \   0000053E   12D1               BNE      ??komunikcja_RSwin_39
   \   00000540   A079               LDRB     R0,[R4, #+6]
   \   00000542   0128               CMP      R0,#+1
   \   00000544   0FD1               BNE      ??komunikcja_RSwin_39
   \   00000546   E079               LDRB     R0,[R4, #+7]
   \   00000548   A228               CMP      R0,#+162
   \   0000054A   0CD1               BNE      ??komunikcja_RSwin_39
    482                    {
    483                        //odpowied
    484                        ptr2[0]=0xAC;
   \   0000054C   AC20               MOVS     R0,#+172
   \   0000054E   2870               STRB     R0,[R5, #+0]
    485                        ptr2[1]=0x04;
   \   00000550   0420               MOVS     R0,#+4
   \   00000552   6870               STRB     R0,[R5, #+1]
    486                        ptr2[2]=0xFF;
   \   00000554   FF20               MOVS     R0,#+255
   \   00000556   A870               STRB     R0,[R5, #+2]
    487                        
    488                        *ptr3=3;
   \   00000558   0320               MOVS     R0,#+3
   \   0000055A   3060               STR      R0,[R6, #+0]
    489                        ptr2[3]=CheckSum(ptr2, ptr3);
   \   0000055C   3100               MOVS     R1,R6
   \   0000055E   2800               MOVS     R0,R5
   \   00000560   ........           BL       CheckSum
   \   00000564   E870               STRB     R0,[R5, #+3]
    490                      
    491                    }//koniec pytania 1
    492                   
    493                   
    494                   //pytanie 2  (pytanie o sterownik)
    495                   if (
    496                         (ptr1[0]==0xAC)&&
    497                         (ptr1[1]==0x03)&&
    498                         (ptr1[2]==0x80)&&
    499                         (ptr1[3]==0xFF)&&
    500                         (ptr1[4]==0x10)&&
    501                         (ptr1[5]==0xC2)
    502                        )
   \                     ??komunikcja_RSwin_39:
   \   00000566   2078               LDRB     R0,[R4, #+0]
   \   00000568   AC28               CMP      R0,#+172
   \   0000056A   23D1               BNE      ??komunikcja_RSwin_40
   \   0000056C   6078               LDRB     R0,[R4, #+1]
   \   0000056E   0328               CMP      R0,#+3
   \   00000570   20D1               BNE      ??komunikcja_RSwin_40
   \   00000572   A078               LDRB     R0,[R4, #+2]
   \   00000574   8028               CMP      R0,#+128
   \   00000576   1DD1               BNE      ??komunikcja_RSwin_40
   \   00000578   E078               LDRB     R0,[R4, #+3]
   \   0000057A   FF28               CMP      R0,#+255
   \   0000057C   1AD1               BNE      ??komunikcja_RSwin_40
   \   0000057E   2079               LDRB     R0,[R4, #+4]
   \   00000580   1028               CMP      R0,#+16
   \   00000582   17D1               BNE      ??komunikcja_RSwin_40
   \   00000584   6079               LDRB     R0,[R4, #+5]
   \   00000586   C228               CMP      R0,#+194
   \   00000588   14D1               BNE      ??komunikcja_RSwin_40
    503                    {
    504                        //odpowied
    505                        ptr2[0]=0xAC;
   \   0000058A   AC20               MOVS     R0,#+172
   \   0000058C   2870               STRB     R0,[R5, #+0]
    506                        ptr2[1]=0x04;
   \   0000058E   0420               MOVS     R0,#+4
   \   00000590   6870               STRB     R0,[R5, #+1]
    507                        
    508                        for(int k=2; k<=11; k++)
   \   00000592   0220               MOVS     R0,#+2
   \   00000594   05E0               B        ??komunikcja_RSwin_41
    509                        {
    510                          ptr2[k]=identyfikacja[k-2];
   \                     ??komunikcja_RSwin_42:
   \   00000596   7749               LDR      R1,??komunikcja_RSwin_38+0x4  ;; identyfikacja
   \   00000598   0918               ADDS     R1,R1,R0
   \   0000059A   891E               SUBS     R1,R1,#+2
   \   0000059C   0978               LDRB     R1,[R1, #+0]
   \   0000059E   2954               STRB     R1,[R5, R0]
    511                        }
   \   000005A0   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_41:
   \   000005A2   0C28               CMP      R0,#+12
   \   000005A4   F7DB               BLT      ??komunikcja_RSwin_42
    512                        
    513                        *ptr3=18; 
   \   000005A6   1220               MOVS     R0,#+18
   \   000005A8   3060               STR      R0,[R6, #+0]
    514                        ptr2[18]=CheckSum(ptr2, ptr3);
   \   000005AA   3100               MOVS     R1,R6
   \   000005AC   2800               MOVS     R0,R5
   \   000005AE   ........           BL       CheckSum
   \   000005B2   A874               STRB     R0,[R5, #+18]
    515                    }
    516                   
    517                   
    518                   //pytanie 3 // 1-jest program, 2 - brak programu
    519                   if (
    520                         (ptr1[0]==0xAD)&&
    521                         (ptr1[1]==0x03)&&
    522                         (ptr1[2]==0x00)&&
    523                         (ptr1[3]==0x60)&&
    524                         (ptr1[4]==0x0D)&&
    525                         (ptr1[5]==0x00)&&
    526                         (ptr1[6]==0x01)&&
    527                         (ptr1[7]==0xE2)
    528                        )
   \                     ??komunikcja_RSwin_40:
   \   000005B4   2078               LDRB     R0,[R4, #+0]
   \   000005B6   AD28               CMP      R0,#+173
   \   000005B8   21D1               BNE      ??komunikcja_RSwin_43
   \   000005BA   6078               LDRB     R0,[R4, #+1]
   \   000005BC   0328               CMP      R0,#+3
   \   000005BE   1ED1               BNE      ??komunikcja_RSwin_43
   \   000005C0   A078               LDRB     R0,[R4, #+2]
   \   000005C2   0028               CMP      R0,#+0
   \   000005C4   1BD1               BNE      ??komunikcja_RSwin_43
   \   000005C6   E078               LDRB     R0,[R4, #+3]
   \   000005C8   6028               CMP      R0,#+96
   \   000005CA   18D1               BNE      ??komunikcja_RSwin_43
   \   000005CC   2079               LDRB     R0,[R4, #+4]
   \   000005CE   0D28               CMP      R0,#+13
   \   000005D0   15D1               BNE      ??komunikcja_RSwin_43
   \   000005D2   6079               LDRB     R0,[R4, #+5]
   \   000005D4   0028               CMP      R0,#+0
   \   000005D6   12D1               BNE      ??komunikcja_RSwin_43
   \   000005D8   A079               LDRB     R0,[R4, #+6]
   \   000005DA   0128               CMP      R0,#+1
   \   000005DC   0FD1               BNE      ??komunikcja_RSwin_43
   \   000005DE   E079               LDRB     R0,[R4, #+7]
   \   000005E0   E228               CMP      R0,#+226
   \   000005E2   0CD1               BNE      ??komunikcja_RSwin_43
    529                    {
    530                        //odpowied
    531                        ptr2[0]=0xAC;
   \   000005E4   AC20               MOVS     R0,#+172
   \   000005E6   2870               STRB     R0,[R5, #+0]
    532                        ptr2[1]=0x04;
   \   000005E8   0420               MOVS     R0,#+4
   \   000005EA   6870               STRB     R0,[R5, #+1]
    533                        ptr2[2]=0x01;
   \   000005EC   0120               MOVS     R0,#+1
   \   000005EE   A870               STRB     R0,[R5, #+2]
    534                        //ptr2[3]=0x4F;
    535                       
    536                        *ptr3=3;
   \   000005F0   0320               MOVS     R0,#+3
   \   000005F2   3060               STR      R0,[R6, #+0]
    537                        ptr2[3]=CheckSum(ptr2, ptr3);
   \   000005F4   3100               MOVS     R1,R6
   \   000005F6   2800               MOVS     R0,R5
   \   000005F8   ........           BL       CheckSum
   \   000005FC   E870               STRB     R0,[R5, #+3]
    538                    }
    539                   
    540           
    541                   //pytanie 4 - pytanie o nazwe aktualnie dzia³j¹cego programu u¿ytkowego
    542                   if (
    543                         (ptr1[0]==0xAD)&&
    544                         (ptr1[1]==0x03)&&
    545                         (ptr1[2]==0x00)&&
    546                         (ptr1[3]==0x90)&&
    547                         (ptr1[4]==0x40)&&
    548                         (ptr1[5]==0x00)&&
    549                         (ptr1[6]==0x20)&&
    550                         (ptr1[7]==0x60)
    551                        )
   \                     ??komunikcja_RSwin_43:
   \   000005FE   2078               LDRB     R0,[R4, #+0]
   \   00000600   AD28               CMP      R0,#+173
   \   00000602   3AD1               BNE      ??komunikcja_RSwin_44
   \   00000604   6078               LDRB     R0,[R4, #+1]
   \   00000606   0328               CMP      R0,#+3
   \   00000608   37D1               BNE      ??komunikcja_RSwin_44
   \   0000060A   A078               LDRB     R0,[R4, #+2]
   \   0000060C   0028               CMP      R0,#+0
   \   0000060E   34D1               BNE      ??komunikcja_RSwin_44
   \   00000610   E078               LDRB     R0,[R4, #+3]
   \   00000612   9028               CMP      R0,#+144
   \   00000614   31D1               BNE      ??komunikcja_RSwin_44
   \   00000616   2079               LDRB     R0,[R4, #+4]
   \   00000618   4028               CMP      R0,#+64
   \   0000061A   2ED1               BNE      ??komunikcja_RSwin_44
   \   0000061C   6079               LDRB     R0,[R4, #+5]
   \   0000061E   0028               CMP      R0,#+0
   \   00000620   2BD1               BNE      ??komunikcja_RSwin_44
   \   00000622   A079               LDRB     R0,[R4, #+6]
   \   00000624   2028               CMP      R0,#+32
   \   00000626   28D1               BNE      ??komunikcja_RSwin_44
   \   00000628   E079               LDRB     R0,[R4, #+7]
   \   0000062A   6028               CMP      R0,#+96
   \   0000062C   25D1               BNE      ??komunikcja_RSwin_44
    552                    {
    553                        //odpowied
    554                        ptr2[0]=0xAC;
   \   0000062E   AC20               MOVS     R0,#+172
   \   00000630   2870               STRB     R0,[R5, #+0]
    555                        ptr2[1]=0x04;
   \   00000632   0420               MOVS     R0,#+4
   \   00000634   6870               STRB     R0,[R5, #+1]
    556                        
    557                        for (int k=2; k<=32; k++)
   \   00000636   0220               MOVS     R0,#+2
   \   00000638   15E0               B        ??komunikcja_RSwin_45
   \   0000063A   C046               Nop      
   \                     ??komunikcja_RSwin_28:
   \   0000063C   ........           DC32     Convers_DW_B
   \   00000640   ........           DC32     Convers_DW_B + 1
   \   00000644   ........           DC32     Convers_DW_B + 2
   \   00000648   ........           DC32     Convers_DW_B + 3
   \   0000064C   0038FFFF           DC32     0xffff3800
   \   00000650   ........           DC32     gProg
   \   00000654   ........           DC32     Trap
    558                        {
    559                         ptr2[k]=pProg[0x40 - 2 +k]; 
   \                     ??komunikcja_RSwin_46:
   \   00000658   4749               LDR      R1,??komunikcja_RSwin_38+0x8  ;; pProg
   \   0000065A   0968               LDR      R1,[R1, #+0]
   \   0000065C   0918               ADDS     R1,R1,R0
   \   0000065E   3E31               ADDS     R1,R1,#+62
   \   00000660   0978               LDRB     R1,[R1, #+0]
   \   00000662   2954               STRB     R1,[R5, R0]
    560                        }
   \   00000664   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_45:
   \   00000666   2128               CMP      R0,#+33
   \   00000668   F6DB               BLT      ??komunikcja_RSwin_46
    561          
    562                        *ptr3=33;
   \   0000066A   2120               MOVS     R0,#+33
   \   0000066C   3060               STR      R0,[R6, #+0]
    563                        ptr2[33]=CheckSum(ptr2, ptr3);
   \   0000066E   3100               MOVS     R1,R6
   \   00000670   2800               MOVS     R0,R5
   \   00000672   ........           BL       CheckSum
   \   00000676   2121               MOVS     R1,#+33
   \   00000678   6854               STRB     R0,[R5, R1]
    564                        //Suma=true;
    565                        
    566                    }
    567              
    568              
    569              
    570                    if (
    571                         (ptr1[0]==0xAC)&&
    572                         (ptr1[1]==0xAC)&&
    573                         (ptr1[2]==0x01)
    574                        )
   \                     ??komunikcja_RSwin_44:
   \   0000067A   2078               LDRB     R0,[R4, #+0]
   \   0000067C   AC28               CMP      R0,#+172
   \   0000067E   12D1               BNE      ??komunikcja_RSwin_47
   \   00000680   6078               LDRB     R0,[R4, #+1]
   \   00000682   AC28               CMP      R0,#+172
   \   00000684   0FD1               BNE      ??komunikcja_RSwin_47
   \   00000686   A078               LDRB     R0,[R4, #+2]
   \   00000688   0128               CMP      R0,#+1
   \   0000068A   0CD1               BNE      ??komunikcja_RSwin_47
    575                      {
    576          
    577                         WiFiDebug=1;
   \   0000068C   3B48               LDR      R0,??komunikcja_RSwin_38+0xC  ;; WiFiDebug
   \   0000068E   0121               MOVS     R1,#+1
   \   00000690   0170               STRB     R1,[R0, #+0]
    578                        
    579                        //Potwierdzenie
    580                         ptr2[0]=0xAC;
   \   00000692   AC20               MOVS     R0,#+172
   \   00000694   2870               STRB     R0,[R5, #+0]
    581                         ptr2[1]=0xAC;
   \   00000696   6870               STRB     R0,[R5, #+1]
    582                         *ptr3=2;
   \   00000698   0220               MOVS     R0,#+2
   \   0000069A   3060               STR      R0,[R6, #+0]
    583                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   0000069C   3100               MOVS     R1,R6
   \   0000069E   2800               MOVS     R0,R5
   \   000006A0   ........           BL       CheckSum
   \   000006A4   A870               STRB     R0,[R5, #+2]
    584                        //koniec potwoerdzenia
    585          
    586                      }//koniec
    587              
    588              
    589              
    590                     if (
    591                         (ptr1[0]==0xAC)&&
    592                         (ptr1[1]==0xAC)&&
    593                         (ptr1[2]==0x02)
    594                        )
   \                     ??komunikcja_RSwin_47:
   \   000006A6   2078               LDRB     R0,[R4, #+0]
   \   000006A8   AC28               CMP      R0,#+172
   \   000006AA   12D1               BNE      ??komunikcja_RSwin_48
   \   000006AC   6078               LDRB     R0,[R4, #+1]
   \   000006AE   AC28               CMP      R0,#+172
   \   000006B0   0FD1               BNE      ??komunikcja_RSwin_48
   \   000006B2   A078               LDRB     R0,[R4, #+2]
   \   000006B4   0228               CMP      R0,#+2
   \   000006B6   0CD1               BNE      ??komunikcja_RSwin_48
    595                      {
    596          
    597                         WiFiDebug=0;
   \   000006B8   3048               LDR      R0,??komunikcja_RSwin_38+0xC  ;; WiFiDebug
   \   000006BA   0021               MOVS     R1,#+0
   \   000006BC   0170               STRB     R1,[R0, #+0]
    598                        
    599                        //Potwierdzenie
    600                         ptr2[0]=0xAC;
   \   000006BE   AC20               MOVS     R0,#+172
   \   000006C0   2870               STRB     R0,[R5, #+0]
    601                         ptr2[1]=0xAC;
   \   000006C2   6870               STRB     R0,[R5, #+1]
    602                         *ptr3=2;
   \   000006C4   0220               MOVS     R0,#+2
   \   000006C6   3060               STR      R0,[R6, #+0]
    603                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   000006C8   3100               MOVS     R1,R6
   \   000006CA   2800               MOVS     R0,R5
   \   000006CC   ........           BL       CheckSum
   \   000006D0   A870               STRB     R0,[R5, #+2]
    604                        //koniec potwoerdzenia
    605          
    606                      }//koniec
    607          
    608          
    609              
    610               /*    
    611                   //pytanie 5 
    612                   if (
    613                         (ptr1[0]==0xAD)&&
    614                         (ptr1[1]==0x03)&&
    615                         (ptr1[2]==0x00)&&
    616                         (ptr1[3]==0x10)&&
    617                         (ptr1[4]==0x40)&&
    618                         (ptr1[5]==0x00)&&
    619                         (ptr1[6]==0x20)&&
    620                         (ptr1[7]==0xE0)
    621                        )
    622                    {
    623                       //odpowied
    624                        ptr2[0]=0xAC;
    625                        ptr2[1]=0x04;
    626                        ptr2[2]=0x73;
    627                        ptr2[3]=0x41;
    628                        ptr2[4]=0x73;
    629                        ptr2[5]=0x42;
    630                        ptr2[6]=0x45;
    631                        ptr2[7]=0xD6;
    632                        ptr2[8]=0x84;
    633                        ptr2[9]=0x75;
    634                        ptr2[10]=0xA5;
    635                        ptr2[11]=0xE8;
    636                        ptr2[12]=0x47;
    637                        ptr2[13]=0x00;
    638                        ptr2[14]=0xA0;
    639                        ptr2[15]=0x27;
    640                        ptr2[16]=0x21;
    641                        ptr2[17]=0xDE;
    642                        ptr2[18]=0x44;
    643                        ptr2[19]=0x5D;
    644          
    645                        *ptr3=20;   
    646                        ptr2[20]=CheckSum(ptr2, ptr3);
    647                        
    648               
    649                    }
    650                   
    651                  */
    652              
    653                   //rozkaz uruchomienia nowo wgranego programu
    654                   if (
    655                         (ptr1[0]==0xAC)&&
    656                         (ptr1[1]==0x01)&&
    657                         (ptr1[2]==0x53)
    658                        )
   \                     ??komunikcja_RSwin_48:
   \   000006D2   2078               LDRB     R0,[R4, #+0]
   \   000006D4   AC28               CMP      R0,#+172
   \   000006D6   1CD1               BNE      ??komunikcja_RSwin_49
   \   000006D8   6078               LDRB     R0,[R4, #+1]
   \   000006DA   0128               CMP      R0,#+1
   \   000006DC   19D1               BNE      ??komunikcja_RSwin_49
   \   000006DE   A078               LDRB     R0,[R4, #+2]
   \   000006E0   5328               CMP      R0,#+83
   \   000006E2   16D1               BNE      ??komunikcja_RSwin_49
    659                    {
    660                        //zatrzymaj program
    661                        g_Stop_Program=1;
   \   000006E4   2648               LDR      R0,??komunikcja_RSwin_38+0x10  ;; g_Stop_Program
   \   000006E6   0121               MOVS     R1,#+1
   \   000006E8   0A00               MOVS     R2,R1
   \   000006EA   0270               STRB     R2,[R0, #+0]
    662                        //ustaw restart programu
    663                        g_Restart_Program=1;
   \   000006EC   254A               LDR      R2,??komunikcja_RSwin_38+0x14  ;; g_Restart_Program
   \   000006EE   1170               STRB     R1,[R2, #+0]
    664                        //cykl startowy
    665                        //start_cykl = 0;
    666                      
    667                        //przepisz program z flash do ram
    668                        char *memory_read_prog;
    669                        memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
   \   000006F0   2549               LDR      R1,??komunikcja_RSwin_38+0x18  ;; FlashProgramReserveOfset
   \   000006F2   0968               LDR      R1,[R1, #+0]
   \   000006F4   254A               LDR      R2,??komunikcja_RSwin_38+0x1C  ;; 0x130100
   \   000006F6   5118               ADDS     R1,R2,R1
    670                        for (int k = 0 ; k <= UseProgramSize ; k++) 
   \   000006F8   0022               MOVS     R2,#+0
   \   000006FA   04E0               B        ??komunikcja_RSwin_50
    671                        { 
    672                            pProg[k]=memory_read_prog[k]; 
   \                     ??komunikcja_RSwin_51:
   \   000006FC   1E4B               LDR      R3,??komunikcja_RSwin_38+0x8  ;; pProg
   \   000006FE   1B68               LDR      R3,[R3, #+0]
   \   00000700   8F5C               LDRB     R7,[R1, R2]
   \   00000702   9F54               STRB     R7,[R3, R2]
    673                        }
   \   00000704   521C               ADDS     R2,R2,#+1
   \                     ??komunikcja_RSwin_50:
   \   00000706   224B               LDR      R3,??komunikcja_RSwin_38+0x20  ;; 0xd6d9
   \   00000708   9A42               CMP      R2,R3
   \   0000070A   F7DB               BLT      ??komunikcja_RSwin_51
    674                        //koniec
    675          
    676                        *ptr3=0;
   \   0000070C   0021               MOVS     R1,#+0
   \   0000070E   3160               STR      R1,[R6, #+0]
    677                       
    678                      
    679                       
    680                       //wznów wykonywanie programu
    681                        g_Stop_Program=0; 
   \   00000710   0170               STRB     R1,[R0, #+0]
    682                    }    
    683              
    684              
    685                   
    686                   //pytanie 6 
    687                   if (
    688                         (ptr1[0]==0xAD)&&
    689                         (ptr1[1]==0x03)&&
    690                         (ptr1[2]==0x00)&&
    691                         (ptr1[3]==0x10)&&
    692                         (ptr1[4]==0xC3)&&
    693                         (ptr1[5]==0x00)&&
    694                         (ptr1[6]==0x04)&&
    695                         (ptr1[7]==0x00)
    696                        )
   \                     ??komunikcja_RSwin_49:
   \   00000712   2078               LDRB     R0,[R4, #+0]
   \   00000714   AD28               CMP      R0,#+173
   \   00000716   27D1               BNE      ??komunikcja_RSwin_52
   \   00000718   6078               LDRB     R0,[R4, #+1]
   \   0000071A   0328               CMP      R0,#+3
   \   0000071C   24D1               BNE      ??komunikcja_RSwin_52
   \   0000071E   A078               LDRB     R0,[R4, #+2]
   \   00000720   0028               CMP      R0,#+0
   \   00000722   21D1               BNE      ??komunikcja_RSwin_52
   \   00000724   E078               LDRB     R0,[R4, #+3]
   \   00000726   1028               CMP      R0,#+16
   \   00000728   1ED1               BNE      ??komunikcja_RSwin_52
   \   0000072A   2079               LDRB     R0,[R4, #+4]
   \   0000072C   C328               CMP      R0,#+195
   \   0000072E   1BD1               BNE      ??komunikcja_RSwin_52
   \   00000730   6079               LDRB     R0,[R4, #+5]
   \   00000732   0028               CMP      R0,#+0
   \   00000734   18D1               BNE      ??komunikcja_RSwin_52
   \   00000736   A079               LDRB     R0,[R4, #+6]
   \   00000738   0428               CMP      R0,#+4
   \   0000073A   15D1               BNE      ??komunikcja_RSwin_52
   \   0000073C   E079               LDRB     R0,[R4, #+7]
   \   0000073E   0028               CMP      R0,#+0
   \   00000740   12D1               BNE      ??komunikcja_RSwin_52
    697                    {
    698                        //odpowied
    699                        ptr2[0]=0xAC;
   \   00000742   AC20               MOVS     R0,#+172
   \   00000744   2870               STRB     R0,[R5, #+0]
    700                        ptr2[1]=0x04;
   \   00000746   0420               MOVS     R0,#+4
   \   00000748   6870               STRB     R0,[R5, #+1]
    701                        ptr2[2]=0x70;
   \   0000074A   7020               MOVS     R0,#+112
   \   0000074C   A870               STRB     R0,[R5, #+2]
    702                        ptr2[3]=0xC9;
   \   0000074E   C920               MOVS     R0,#+201
   \   00000750   E870               STRB     R0,[R5, #+3]
    703                        ptr2[4]=0x90;
   \   00000752   9020               MOVS     R0,#+144
   \   00000754   2871               STRB     R0,[R5, #+4]
    704                        ptr2[5]=0x5D;
   \   00000756   5D20               MOVS     R0,#+93
   \   00000758   6871               STRB     R0,[R5, #+5]
    705                        //ptr2[6]=0x2A;
    706                        *ptr3=6;    
   \   0000075A   0620               MOVS     R0,#+6
   \   0000075C   3060               STR      R0,[R6, #+0]
    707                        ptr2[6]=CheckSum(ptr2, ptr3);
   \   0000075E   3100               MOVS     R1,R6
   \   00000760   2800               MOVS     R0,R5
   \   00000762   ........           BL       CheckSum
   \   00000766   A871               STRB     R0,[R5, #+6]
    708                    }
    709              
    710             
    711                   
    712          }
   \                     ??komunikcja_RSwin_52:
   \   00000768   FEBC               POP      {R1-R7}
   \   0000076A   01BC               POP      {R0}
   \   0000076C   0047               BX       R0               ;; return
   \   0000076E   C046               Nop      
   \                     ??komunikcja_RSwin_38:
   \   00000770   ........           DC32     g_czas_petli
   \   00000774   ........           DC32     identyfikacja
   \   00000778   ........           DC32     pProg
   \   0000077C   ........           DC32     WiFiDebug
   \   00000780   ........           DC32     g_Stop_Program
   \   00000784   ........           DC32     g_Restart_Program
   \   00000788   ........           DC32     FlashProgramReserveOfset
   \   0000078C   00011300           DC32     0x130100
   \   00000790   D9D60000           DC32     0xd6d9
    713          
    714          //SUMA KONTEROLNA---------------------------------------------------------------

   \                                 In section .bss, align 1
    715           byte SK=0;
   \                     SK:
   \   00000000                      DS8 1

   \                                 In section Debug.txt, align 4, keep-with-next
    716          char CheckSum(char *TabLiczb, unsigned int *IlLiczb)
    717          {
   \                     CheckSum:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    718                  SK=0;
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0C4A               LDR      R2,??CheckSum_0  ;; SK
   \   00000006   1C00               MOVS     R4,R3
   \   00000008   1470               STRB     R4,[R2, #+0]
    719                  for (int k = 0; k<*IlLiczb; k++) 
   \   0000000A   04E0               B        ??CheckSum_1
    720                  {
    721                    SK += TabLiczb[k]; 
   \                     ??CheckSum_2:
   \   0000000C   1478               LDRB     R4,[R2, #+0]
   \   0000000E   C55C               LDRB     R5,[R0, R3]
   \   00000010   6419               ADDS     R4,R4,R5
   \   00000012   1470               STRB     R4,[R2, #+0]
    722                  }
   \   00000014   5B1C               ADDS     R3,R3,#+1
   \                     ??CheckSum_1:
   \   00000016   0C68               LDR      R4,[R1, #+0]
   \   00000018   A342               CMP      R3,R4
   \   0000001A   F7D3               BCC      ??CheckSum_2
    723                  SK = 0 - SK;
   \   0000001C   1378               LDRB     R3,[R2, #+0]
   \   0000001E   5C42               RSBS     R4,R3,#+0
   \   00000020   1470               STRB     R4,[R2, #+0]
    724                  TabLiczb[*IlLiczb]=SK;
   \   00000022   0B68               LDR      R3,[R1, #+0]
   \   00000024   1478               LDRB     R4,[R2, #+0]
   \   00000026   C454               STRB     R4,[R0, R3]
    725                  *IlLiczb=*IlLiczb+1;
   \   00000028   0868               LDR      R0,[R1, #+0]
   \   0000002A   401C               ADDS     R0,R0,#+1
   \   0000002C   0860               STR      R0,[R1, #+0]
    726                  return  SK;
   \   0000002E   1078               LDRB     R0,[R2, #+0]
   \   00000030   38BC               POP      {R3-R5}
   \   00000032   02BC               POP      {R1}
   \   00000034   0847               BX       R1               ;; return
   \   00000036   C046               Nop      
   \                     ??CheckSum_0:
   \   00000038   ........           DC32     SK
    727                  
    728          }
    729          //------------------------------------------------------------------------------
    730          
    731                         
    732          //Funkcja konwersji zmiennej analogowej z formatu MASTER na format Float oraz zapisu do RAM------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    733          void MasterToAnaVar(unsigned long *adr, unsigned long *vart)           //(nr. zmiennej, wartoæ do konwersji)
    734          {
    735                    
    736            ConversFC Convers_DW_Btmp;
    737            unsigned long zm;
                                 ^
Warning[Pe550]: variable "zm" was set but never used
    738          
    739            
    740                    
    741                    Convers_DW_Btmp.DWvar = *vart;   
    742                    zm=Convers_DW_Btmp.DWvar;
    743                    
    744          }
   \                     MasterToAnaVar:
   \   00000000   7047               BX       LR               ;; return
    745          //------------------------------------------------------------------------------
    746          
    747          
    748          //Funkcja konwersji zmiennej dwustanowej z formatu MASTER na format Float------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    749          void MasterToBinVar(unsigned long *adr, char *vart)           //(nr. zmiennej, wartoæ do konwersji)
    750          {
    751           
    752            /*
    753                  //ustawienie "1"
    754                  if ((*vart & 0xC0)==0x80)
    755                  { 
    756                    ram.BinVarRAM[(*adr/8)] |= (0x1 << (*adr%8));
    757                  }
    758                  if (((*vart & 0xC0)==0x00) || ((*vart & 0xC0)==0x40))
    759                  { 
    760                    ram.BinVarRAM[(*adr/8)] &= ~(0x1 << (*adr%8));
    761                  }
    762                  //Ustawienie forsowanie
    763                  if ((*vart & 0x1F)==0x15) 
    764                  { 
    765                    ram.BinVarRAMfors[(*adr/8)] |= (0x1 << (*adr%8));
    766                  }
    767                   else
    768                  { 
    769                    ram.BinVarRAMfors[(*adr/8)] &= ~(0x1 << (*adr%8));
    770                  }
    771            */
    772          }
   \                     MasterToBinVar:
   \   00000000   7047               BX       LR               ;; return
    773          //------------------------------------------------------------------------------
    774          
    775          
    776          //funkcja konwersji zmiennej dwustanowej z formatu Float na format MASTER ------

   \                                 In section Debug.txt, align 4, keep-with-next
    777          char BinVarToMaster(unsigned long *adr)                    
    778          {
    779          
    780          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "BinVarToMaster"
   \                     BinVarToMaster:
   \   00000000   7047               BX       LR               ;; return
    781          //------------------------------------------------------------------------------
    782          
    783          
    784          //funkcja konwersji zmiennej analogowej z formatu Float na format MASTER -------

   \                                 In section Debug.txt, align 4, keep-with-next
    785          unsigned long AnaVarToMaster(unsigned long *adr)
    786          {
    787            ConversFC Convers_DW_Btmp;
    788            unsigned long zm;
    789          
    790                    
    791               
    792                    
    793                    Convers_DW_Btmp.DWvar = 0;
    794          
    795                    return zm;
                                  ^
Warning[Pe549]: variable "zm" is used before its value is set

    ConversFC Convers_DW_Btmp;
              ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\RS_WIN.c",787  Warning[Pe550]: 
          variable "Convers_DW_Btmp" was set but never used
   \                     AnaVarToMaster:
   \   00000000   0020               MOVS     R0,#+0
   \   00000002   7047               BX       LR               ;; return
    796                    
    797                    
    798          }
    799          //------------------------------------------------------------------------------
    800          

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     AnaVarToMaster        0
     BinVarToMaster        0
     CheckSum             16
     MasterToAnaVar        0
     MasterToBinVar        0
     komunikcja_RSwin     32


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     ram               400
     Convers_DW_B        4
     komunikcja_RSwin 1940
     SK                  1
     CheckSum           60
     MasterToAnaVar      2
     MasterToBinVar      2
     BinVarToMaster      2
     AnaVarToMaster      4
      Others            64

 
   405 bytes in section .bss
 2 074 bytes in section Debug.txt
 
 2 010 bytes of CODE memory (+ 64 bytes shared)
   405 bytes of DATA memory

Errors: none
Warnings: 4
