###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           12/Jun/2013  19:50:46 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\main.c                              #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\main.c" -D AT91SAM7S256 -D          #
#                    AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_ -D __ALARM -D     #
#                    __WIFI_MODULE -D _DEBUG_ -D S300iOld -D _TESTER_ -lC     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\TESTER S300X (Old)\List\" --diag_suppress     #
#                    Pa082 -o "D:\Zeuron\Projekty\S300\S300-program v1.4 -    #
#                    12.06.2013\TESTER S300X (Old)\Obj\" --no_unroll          #
#                    --no_inline --no_tbaa --no_scheduling --debug --endian   #
#                    little --cpu ARM7TDMI -e --fpu None --dlib_config        #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Om                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\TESTER S300X (Old)\List\main.lst              #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\TESTER S300X (Old)\Obj\main.o                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\main.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//                     
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : main.c                                   *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21            
     22          
     23          
     24          //Sta³e ------------------------------------------------------------------------
     25          #ifdef S300
     26              const char identyfikacja[]="S300 ";                                          //nazwa urz¹dzeni 
     27          #endif
     28          #ifdef S300i
     29              const char identyfikacja[]="S300-i ";                                          //nazwa urz¹dzeni 
     30          #endif
     31          #ifdef S300iMax
     32              const char identyfikacja[]="S300-iMax ";                                          //nazwa urz¹dzeni 
     33          #endif
     34          #ifdef S300iOld

   \                                 In section .rodata, align 4
     35              const char identyfikacja[]="S300-i(Old) ";                                          //nazwa urz¹dzeni 
   \                     identyfikacja:
   \   00000000   533330302D69       DC8 "S300-i(Old) "
   \              284F6C642920
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
     36          #endif
     37              

   \                                 In section .rodata, align 4
     38              const char system[]="1.3";                                                  //nazwa urz¹dzeni 
   \                     system:
   \   00000000   312E3300           DC8 "1.3"
     39              
     40          //____________________________Koniec sta³ych ___________________________________
     41          
     42          
     43          
     44          //Konfiguracja -----------------------------------------------------------------
     45              #define LightLCD_Time              20                                       //czas (s sek.) wygaszania podœwietlenia
     46          //___________________________Koniec konfiguracji________________________________
     47          
     48          
     49          
     50          
     51          //Definicje --------------------------------------------------------------------
     52              #define MSG_SIZE 	                1000                                    
     53              #define TAB_SIZE                    1000                                    
     54              #define USB_BUFFER_SIZE             300                                     //bufor odbiorczy USB  
     55             
     56             // #define NOTRACES                                                            //Wy³¹cza debagowania poprzez US1
     57              
     58          //___________________________Koniec definicji___________________________________
     59          
     60          
     61          
     62          // Pliki do³¹czane -------------------------------------------------------------
     63          
     64               #include "main_H.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_AIC_ConfigureIt(AT91PS_AIC, unsigned int, unsigned int, unsigned int, void (*)())
   \                     AT91F_AIC_ConfigureIt:
   \   00000000   F5B4               PUSH     {R0,R2,R4-R7}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   069E               LDR      R6,[SP, #+24]
   \   00000008   A100               LSLS     R1,R4,#+2
   \   0000000A   5718               ADDS     R7,R2,R1
   \   0000000C   8037               ADDS     R7,R7,#+128
   \   0000000E   3868               LDR      R0,[R7, #+0]
   \   00000010   0125               MOVS     R5,#+1
   \   00000012   A540               LSLS     R5,R5,R4
   \   00000014   2C00               MOVS     R4,R5
   \   00000016   9225               MOVS     R5,#+146
   \   00000018   6D00               LSLS     R5,R5,#+1        ;; #+292
   \   0000001A   5519               ADDS     R5,R2,R5
   \   0000001C   2C60               STR      R4,[R5, #+0]
   \   0000001E   3E60               STR      R6,[R7, #+0]
   \   00000020   019E               LDR      R6,[SP, #+4]
   \   00000022   1E43               ORRS     R6,R6,R3
   \   00000024   5650               STR      R6,[R2, R1]
   \   00000026   6C60               STR      R4,[R5, #+4]
   \   00000028   FCBC               POP      {R2-R7}
   \   0000002A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_AIC_EnableIt(AT91PS_AIC, unsigned int)
   \                     AT91F_AIC_EnableIt:
   \   00000000   9022               MOVS     R2,#+144
   \   00000002   5200               LSLS     R2,R2,#+1        ;; #+288
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   8B40               LSLS     R3,R3,R1
   \   00000008   8350               STR      R3,[R0, R2]
   \   0000000A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgOutput:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   0161               STR      R1,[R0, #+16]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgInput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgInput:
   \   00000000   4161               STR      R1,[R0, #+20]
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPullup(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgPullup:
   \   00000000   CA43               MVNS     R2,R1
   \   00000002   0266               STR      R2,[R0, #+96]
   \   00000004   4166               STR      R1,[R0, #+100]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_InterruptEnable(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_InterruptEnable:
   \   00000000   0164               STR      R1,[R0, #+64]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PIO_GetInterruptStatus(AT91PS_PIO)
   \                     AT91F_PIO_GetInterruptStatus:
   \   00000000   C06C               LDR      R0,[R0, #+76]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_WDTRestart(AT91PS_WDTC)
   \                     AT91F_WDTRestart:
   \   00000000   0149               LDR      R1,??AT91F_WDTRestart_0  ;; 0xa5000001
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??AT91F_WDTRestart_0:
   \   00000008   010000A5           DC32     0xa5000001

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_LCD_Init()
   \                     AT91F_LCD_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   2348               LDR      R0,??AT91F_LCD_Init_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   234C               LDR      R4,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000000C   0421               MOVS     R1,#+4
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       AT91F_PIO_CfgOutput
   \   00000014   8021               MOVS     R1,#+128
   \   00000016   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   ........           BL       AT91F_PIO_CfgOutput
   \   0000001E   8021               MOVS     R1,#+128
   \   00000020   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       AT91F_PIO_CfgOutput
   \   00000028   8021               MOVS     R1,#+128
   \   0000002A   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   0000002C   2000               MOVS     R0,R4
   \   0000002E   ........           BL       AT91F_PIO_CfgOutput
   \   00000032   8021               MOVS     R1,#+128
   \   00000034   0905               LSLS     R1,R1,#+20       ;; #+134217728
   \   00000036   2000               MOVS     R0,R4
   \   00000038   ........           BL       AT91F_PIO_CfgOutput
   \   0000003C   1021               MOVS     R1,#+16
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       AT91F_PIO_CfgOutput
   \   00000044   8021               MOVS     R1,#+128
   \   00000046   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       AT91F_PIO_CfgOutput
   \   0000004E   8021               MOVS     R1,#+128
   \   00000050   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   00000052   2000               MOVS     R0,R4
   \   00000054   ........           BL       AT91F_PIO_CfgOutput
   \   00000058   8021               MOVS     R1,#+128
   \   0000005A   8904               LSLS     R1,R1,#+18       ;; #+33554432
   \   0000005C   2000               MOVS     R0,R4
   \   0000005E   ........           BL       AT91F_PIO_CfgOutput
   \   00000062   8021               MOVS     R1,#+128
   \   00000064   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000066   2000               MOVS     R0,R4
   \   00000068   ........           BL       AT91F_PIO_CfgOutput
   \   0000006C   8021               MOVS     R1,#+128
   \   0000006E   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   00000070   2000               MOVS     R0,R4
   \   00000072   ........           BL       AT91F_PIO_CfgOutput
   \   00000076   8021               MOVS     R1,#+128
   \   00000078   0904               LSLS     R1,R1,#+16       ;; #+8388608
   \   0000007A   2000               MOVS     R0,R4
   \   0000007C   ........           BL       AT91F_PIO_CfgOutput
   \   00000080   0121               MOVS     R1,#+1
   \   00000082   2000               MOVS     R0,R4
   \   00000084   ........           BL       AT91F_PIO_CfgOutput
   \   00000088   0448               LDR      R0,??AT91F_LCD_Init_0+0x8  ;; 0xfffff430
   \   0000008A   0549               LDR      R1,??AT91F_LCD_Init_0+0xC  ;; 0x7e00811c
   \   0000008C   0160               STR      R1,[R0, #+0]
   \   0000008E   10BC               POP      {R4}
   \   00000090   01BC               POP      {R0}
   \   00000092   0047               BX       R0               ;; return
   \                     ??AT91F_LCD_Init_0:
   \   00000094   00FCFFFF           DC32     0xfffffc00
   \   00000098   00F4FFFF           DC32     0xfffff400
   \   0000009C   30F4FFFF           DC32     0xfffff430
   \   000000A0   1C81007E           DC32     0x7e00811c

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void *USB_GetDriverInterface(S_usb const *)
   \                     USB_GetDriverInterface:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetDriverID(S_usb const *)
   \                     USB_GetDriverID:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   C068               LDR      R0,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Handler(S_usb const *)
   \                     USB_Handler:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   896A               LDR      R1,[R1, #+40]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork bool USB_Attach(S_usb const *)
   \                     USB_Attach:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C969               LDR      R1,[R1, #+28]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   02BC               POP      {R1}
   \   00000010   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Connect(S_usb const *)
   \                     USB_Connect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C96A               LDR      R1,[R1, #+44]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Disconnect(S_usb const *)
   \                     USB_Disconnect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   096B               LDR      R1,[R1, #+48]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetState(S_usb const *)
   \                     USB_GetState:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0004               LSLS     R0,R0,#+16
   \   00000006   000C               LSRS     R0,R0,#+16
   \   00000008   7047               BX       LR               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     65               #include "WizFi.h"

   
   ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\WizFi.h",172  Warning[Pe001]: 
          last line of file ends without a newline
     66          
     67          
     68          
     69          //-----------------------Koniec plików do³¹czanych -----------------------------
     70          
     71          
     72          
     73          
     74          
     75          
     76          
     77          
     78          
     79          

   \                                 In section .bss, align 1
     80          char APC;
   \                     APC:
   \   00000000                      DS8 1
     81          
     82          
     83          
     84          
     85          
     86          //Zmienne globalne -------------------------------------------------------------

   \                                 In section .data, align 1
     87              char g_czas_petli = 10;                                                     //  Czas przebiegu pêtli programu w ms
   \                     g_czas_petli:
   \   00000000   0A                 DC8 10

   \                                 In section .bss, align 4
     88              unsigned int komunikacja_ok=0;                                              //1-ok, 0-brak
   \                     komunikacja_ok:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     89              int  rej_prog[10];
   \                     rej_prog:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     90              int LifeCouter = 0, LifeCouterMax = 0;                                      // Zmienne funkcji LifeBlinking
   \                     LifeCouter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     LifeCouterMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     91              byte USB_busy;
   \                     USB_busy:
   \   00000000                      DS8 1
     92              int FlashProgramOfset =  256;                                               //0-wykonywany program A, 
     93              int FlashProgramReserveOfset =  256+UseProgramSize;                         //0-wykonywany program A, 

   \                                 In section .bss, align 4
     94              int  advY =0;                                                                  //chwilowa wspolzedna Y TP
   \                     advY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     95              int  advX =0;                                                                  //chwilowa wspolzedna X TP
   \                     advX:
   \   00000000                      DS8 4
     96               signed short  Y_down  =-1;                                                           //wspolzedna Y TP (naciœniêcie)
     97               signed short  X_down  =-1;                                                           //wspolzedna X TP (naciœniêcie)
     98               signed short  Y_up    =-1;                                                           //wspolzedna Y TP (puszczenie)
     99               signed short  X_up    =-1;                                                           //wspolzedna X TP (puszczenie)

   \                                 In section .bss, align 4
    100              int  g_leng  =0;                                                            //jêzyk 1-polski, 2 angielski
   \                     g_leng:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    101              char g_level =0;                                                            //poziom dostêpu 0-ograniczony, 1- operator, 2-administrator
   \                     g_level:
   \   00000000                      DS8 1
    102              char g_Password_1[8]={"1111"};                                              //haslo poziomu 1  
    103              char g_Password_2[8]={"2222"};                                              //haslo poziomu 1  

   \                                 In section .bss, align 4
    104              long int g_Message =0;                                                             //1-wiadomosc ekranowa
   \                     g_Message:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    105              int g_info=0;                                                                   
   \                     g_info:
   \   00000000                      DS8 4
    106              char g_PC_Connected;                                                       //1-pod³aczony komputer
    107              unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
    108              unsigned long       g_seconds_counter;                                      //globalny licznik sekundowy od w³¹czenia/restartu sterownika
    109              
    110          //    static char US0_Buffer[US_BUFFER_SIZE];                                    //bufor odbiorczy USART 0
    111          //    static char US0_Buffer2[US_BUFFER_SIZE];                                   //zapasowy bufor odbiorczy USART 0
    112              char AdressModbus = 1;                                                      //Adres urz¹dzenia dla protoko³u modbus
    113              int g_LightCouterLCD = 0;                                                   //licznik podœwietlenia lcd
    114              char g_LightLCDEnable = 0;                                                   //podœwietlenia lcd
    115              char g_ScreenSever_On;                                                      //1-Wygaszacz aktywny
    116              char g_ScreenSever_Time_On;                                                 //godzina w³¹czenia wygaszacz
    117              char g_ScreenSever_Time_Off;                                                //godzina wy³¹czenia wygaszacza
    118              char g_SlaveConnect=0;                                                   //
    119              char g_Stop_Program = 0;                                                    //1- zatrzymuje program
    120              char g_Restart_Program = 1;                                                 //1- restartuje program
    121              unsigned long long g_NextTimeProgram = 0;                                                    //
    122              char g_NeedPass=0;  //wymóg has³a
    123              char AlarmOn=0;                                                             //1=alarm dzwiêkowy
    124              char Speaker[SPK_Amount];                                                   //sygna³ dŸwiêkowy
    125              _AlarmScreenActionType AlarmScreenAction;
    126              char ChangeingIdMode=0;                                                     //tryb zmiany ID blokuje ustanawianie po³¹czeñ mostowych

   \                                 In section .bss, align 8
    127              _Net NET; 
   \                     NET:
   \   00000000                      DS8 448
    128              char WypMaxJasnosci;                                                        //jasnoœc ekranu przy aktywnym ekranie
    129              char WypMinJasnosci;                                                        //jasnoœc ekranu przy nieaktywnym ekranie
    130              char gWypMinJasnosciTest;                                                   //test wygl¹du ekranu z  jsnoœci¹ WypMinJasnosci   
    131              long long FuseLastWiFiDataIn;                                               //zabezpieczenie przed blokad¹ DMA USART. FuseLastWiFiDataIn zawiera czas ostatniej odpowiedzi od usarta. Je¿eli WiFi jest w³¹czone a USART milczy od 30s to restartuj mikroprocesor
    132              unsigned char ChangeStageFlag=10;                                           //ile razy (maksymalnie) sterownik ma wys³aæ zmiane stanu wyjœcia
    133              //___________________________Koniec zmiennych globalnych________________________
    134          
    135          
    136          
    137          
    138          
    139          //Zmienne lokalne -------------------------------------------------------------

   \                                 In section .bss, align 1
    140              char LightLCD_OFF_Counter;                                                  //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    141              char LightLCD_OFF_Counter2;                                                 //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    142              char LightLCD_OFF_Curent;                                                   //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Curent:
   \   00000000                      DS8 1
    143              volatile char SlaveMode=0;
    144             // volatile char SwitchToMasterBlock;

   \                                 In section .bss, align 8
    145              volatile long long TimeInMasterMode;                                         //zmienna dla kontroli czasu w trybie slave
   \                     TimeInMasterMode:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
    146              volatile char ReciveFrameToMe=0;                                            //zmienna u¿ywana do prze³¹czania w tryb tymczasowy master po odebraniu ramki pobrania statusu z poprawnym id a nastêpnie ramki do obcego lub ponownym odebraniu ramki z poprawnym id i rozkazem pobrania statusu. Ramka pobrania statusu (odczyt rej. 0) zawsze wystêpuje na pocz¹tku kolejki ramek do pojedyñczego wêz³a 
   \                     ReciveFrameToMe:
   \   00000000                      DS8 1
    147          //___________________________Koniec zmiennych lplkalnych________________________
    148          
    149          
    150              
    151               
    152          
    153              
    154          
    155          //Zmienne zewnêtrzne -------------------------------------------------------------    
    156              extern char       LCD_Canvas[8][128];
    157              extern char       Label_move;
    158              extern int        MenuLevel;      //poziom menu
    159              extern int        Suw_poz_analog;  
    160              extern int        ScrollMenu_poz;
    161              extern char       g_US0_Connect_OK;
    162              extern char       g_US1_Connect_OK;
    163              extern char       g_US0_Comm_TIMEOUT;
    164              extern _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];
    165              extern char       g_Ans_ZD_MODBUS_0;
    166              extern char       g_Current_ZD_MODBUS_0;
    167              extern char       g_ERR_ZD_MODBUS_0;
    168              extern int        g_US0_Comm_MinCykle;
    169              extern char       US0_MasterMODBUS_ENABLE;
    170              extern char       g_US1_Comm_TIMEOUT;
    171              extern _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];
    172              extern char       g_Ans_ZD_MODBUS_1;
    173              extern char       g_Current_ZD_MODBUS_1;
    174              extern char       g_ERR_ZD_MODBUS_1;
    175              extern int        g_US1_Comm_MinCykle;
    176              extern char       US1_MasterMODBUS_ENABLE;
    177              extern char       Busy_program;
    178              extern _Trap      Trap;
    179              extern _Correct korekta_Y;
    180              extern _Correct korekta_X;
    181              extern  char Synchronizacja;
    182              extern char         RF_CurrentTask;
    183              //extern unsigned char  SPI_Buffer_Rx[SPI_Read_BUFFER_SIZE];                         //bufor odbiorczy SPI
    184              //extern unsigned char  SPI_Buffer_Tx[SPI_Write_BUFFER_SIZE];                        //bufor odbiorczy SPI
    185              extern void ReadWriteSpi (unsigned char* pReadBuffer, int nReadLen, unsigned char* pWriteBuffer, int nWriteLen, bool bHoldCS);
    186              extern void SPI_init(void) ;
    187              
    188              extern _MainStage  MainStage; 
    189              extern _ProgramTab gProg;
    190              extern void RF_Init(void);
    191              extern _RF_Status RF_Status;
    192              extern char g_RF_TimeOutCounter;
    193              extern   _RF_TaskTab  RF_TaskTab;
    194              extern _TransQuality TransQuality;
    195              extern _DateTime  *pDateTime;
    196              extern char Variables[];
    197              extern unsigned int CyklPerSek;
    198              extern char Buff_TX_1[];
    199              AT91PS_MEM pAT91C_IFLASH_MEM=AT91C_IFLASH_MEM;
    200              extern short int VariablesAnal[];
    201              extern char Variables[];
    202              extern unsigned char  US1_Buffer[];
    203              extern  unsigned  short  TimeToSwithToMaster;
    204              extern _NeuronsListUnit NeuronsList[];
    205              extern  const unsigned int NODE_ID;
    206          //___________________________Koniec zmiennych zewnêtrznych________________________    
    207              
    208              
    209              
    210          //Zmienne tymczasowe -----------------------------------------------------------

   \                                 In section .bss, align 1
    211              char tmp_i =0; 
   \                     tmp_i:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    212              float licznik = 0.0;
   \                     licznik:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    213              int licznik2 = 0;
   \                     licznik2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    214              int licznik3 = 0;
   \                     licznik3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    215              char *memory;
   \                     memory:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    216              unsigned long sss;
   \                     sss:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    217              int int1 =0;
   \                     int1:
   \   00000000                      DS8 4
    218              
    219          
    220              _DateTime DateTime;
    221              
    222               
    223              //___________________________Koniec zmiennych tymczasowych______________________
    224          
    225          
    226              
    227          
    228          //Funkcje zewnêtrzne -----------------------------------------------------------
    229              extern RAM ram;
    230              extern ConversFC Convers_DW_B;
    231              extern void InitFlash(void);
    232              extern void Program (_ProgramTab *ProgTab);
    233              extern void at91flashWriteDW(int sektor, int nr_DW, unsigned long wartDW );
    234              extern void ScreenEvent(void);
    235              extern int Suw_poz;
    236              extern void MenuPaint(void);
    237              extern void at91flashWrite();
    238              extern void ConfigureIrBus(void);
    239              extern void MenuRefresh();
    240              //extern unsigned short crc16(unsigned char* modbusframe,int Length);
    241              //extern unsigned char ModBus_CommS(unsigned char* modbusframe);
    242              //extern void ModBus_CommS_US0();
    243              extern void US0_init(void);
    244              extern void US1_init(void);
    245              extern char ModBus_MASTER_TX(char US_Nr);
    246              extern void ReadTP(_TPoint *Point);
    247              //extern BYTE ModBus_MASTER_Return(BYTE* modbusframe);
    248          //_______________________ Koniec funkcji zewnêtrznych __________________________
    249              
    250          
    251          /*
    252          $Id: serial_example.c,v 1.1.2.1 2006/12/05 08:33:25 danielru Exp $
    253          */
    254          
    255          
    256          
    257          
    258          //------------------------------------------------------------------------------
    259          //      Prototypes
    260          //------------------------------------------------------------------------------
    261          
    262          //! \brief  Initialization callback
    263          static void CBK_Init(const S_usb *pUsb);
    264          
    265          //! \brief  Suspend callback
    266          static void CBK_Suspend(const S_usb *pUsb);
    267          
    268          //! \brief  Resume callback
    269          static void CBK_Resume(const S_usb *pUsb);
    270          
    271          //! \brief  New request callback
    272          static void CBK_NewRequest(const S_usb *pUsb);
    273          
    274          //! \brief  New reset callback
    275          //static void CBK_Reset(const S_usb *pUsb);
    276          
    277          //! \brief  New SOF callback
    278          //static void CBK_SOF(const S_usb *pUsb);
    279          
    280          //------------------------------------------------------------------------------
    281          //      Internal variables
    282          //------------------------------------------------------------------------------
    283          
    284          //! \brief  List of endpoints (including endpoint 0) used by the device.
    285          //! \see    S_usb_endpoint
    286          static S_usb_endpoint pEndpoints[] = {
    287          
    288              USB_ENDPOINT_SINGLEBANK, // Control endpoint 0
    289              USB_ENDPOINT_DUALBANK,   // Data out endpoint
    290              USB_ENDPOINT_DUALBANK,   // Data in endpoint
    291              USB_ENDPOINT_SINGLEBANK, // Notification endpoint
    292          };
    293          
    294          //! \brief  Variable used to store the last received SETUP packet.
    295          //! \see    S_usb_request
    296          //! \see    S_usb

   \                                 In section .bss, align 4
    297          static S_usb_request sSetup;
   \                     sSetup:
   \   00000000                      DS8 8
    298          
    299          //! \brief  Variable used to store the current device state
    300          //! \see    S_usb

   \                                 In section .bss, align 4
    301          static unsigned int dState;
   \                     dState:
   \   00000000                      DS8 4
    302          
    303          //! \brief  List of implemented callbacks
    304          //! \see    S_usb_callbacks
    305          //! \see    S_usb

   \                                 In section .rodata, align 4
    306          static const S_usb_callbacks sCallbacks = {
   \                     sCallbacks:
   \   00000000   ........0000       DC32 CBK_Init, 0H, 0H, CBK_Resume, CBK_NewRequest, 0H
   \              000000000000
   \              ............
   \              ....00000000
    307          
    308              CBK_Init,
    309              0, // CBK_Reset
    310              0, //CBK_Suspend,
    311              CBK_Resume,
    312              CBK_NewRequest,
    313              0  // CBK_SOF
    314          };
    315          
    316          //! \brief  USB driver instance
    317          //! \see    S_usb

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bezpiecznik RF">`:
   \   00000000   42657A706965       DC8 "Bezpiecznik RF"
   \              637A6E696B20
   \              524600      
   \   0000000F   00                 DC8 0
   \   00000010   ............       DC32 sDefaultDriver, pEndpoints, 4, sCallbacks, sSetup, dState
   \              ....04000000
   \              ............
   \              ............
    318          static const S_usb sUsb = {
    319          
    320              &sDefaultDriver,
    321              pEndpoints,
    322              SER_NUM_ENDPOINTS,
    323              &sCallbacks,
    324              &sSetup,
    325              &dState
    326          };
    327          
    328          //! \brief  CDC serial class driver instance
    329          //! \see    S_ser
    330          static S_ser sSer;
    331          
    332          // Buffer for receiving data from the USB
    333          static unsigned char pUsbBuffer[USB_BUFFER_SIZE];
    334          
    335          
    336          //------------------------------------------------------------------------------
    337          //      Internal Functions
    338          //------------------------------------------------------------------------------
    339          
    340          // Interrupt Service Routines
    341          //------------------------------------------------------------------------------
    342          
    343          //------------------------------------------------------------------------------
    344          //! \brief  Handler for the USB controller interrupt
    345          //!
    346          //!         Defers the call to the USB_Handler function.
    347          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    348          void ISR_Driver(void)
    349          {
   \                     ISR_Driver:
   \   00000000   01B5               PUSH     {R0,LR}
    350              USB_Handler(&sUsb);
   \   00000002   ....               LDR      R0,??DataTable8  ;; `?<Constant "Bezpiecznik RF">` + 16
   \   00000004   ........           BL       USB_Handler
    351          }//_______________________ Koniec funkcji ISR_Driver ____________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    352          
    353          
    354          
    355          
    356          //------------------------------------------------------------------------------
    357          //! \brief  Handler for the VBus state change interrupt
    358          //!
    359          //! This method calls the USB_Attach function to perform the necessary
    360          //! operations.
    361          //------------------------------------------------------------------------------
    362          //#if !defined(USB_BUS_POWERED)
    363          char ForwardUSB2Serialferst=0;
    364          
    365          
    366           
    367          

   \                                 In section Debug.txt, align 4, keep-with-next
    368          void ISR_VBus(void)
    369          {
   \                     ISR_VBus:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   ....               LDR      R0,??DataTable8  ;; `?<Constant "Bezpiecznik RF">` + 16
    370            
    371            
    372            USB_Attach(&sUsb);
   \   00000004   ........           BL       USB_Attach
    373          
    374            if ((( AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)>0)
   \   00000008   0226               MOVS     R6,#+2
   \   0000000A   0024               MOVS     R4,#+0
   \   0000000C   ....               LDR      R5,??DataTable17  ;; DateTime
   \   0000000E   ....               LDR      R0,??DataTable3  ;; 0xfffff43c
   \   00000010   0068               LDR      R0,[R0, #+0]
   \   00000012   3100               MOVS     R1,R6
   \   00000014   0842               TST      R0,R1
   \   00000016   31D0               BEQ      ??ISR_VBus_0
    375            {
    376              g_PC_Connected=1;
   \   00000018   0127               MOVS     R7,#+1
   \   0000001A   3800               MOVS     R0,R7
   \   0000001C   2873               STRB     R0,[R5, #+12]
    377              g_Stop_Program=1;
   \   0000001E   6874               STRB     R0,[R5, #+17]
    378              
    379              if (ISSET(USB_GetState(&sUsb), USB_STATE_POWERED)) 
   \   00000020   ....               LDR      R0,??DataTable8  ;; `?<Constant "Bezpiecznik RF">` + 16
   \   00000022   ........           BL       USB_GetState
   \   00000026   3042               TST      R0,R6
   \   00000028   12D0               BEQ      ??ISR_VBus_1
    380              {
    381                MenuLevel=1;
   \   0000002A   ....               LDR      R0,??DataTable5  ;; MenuLevel
   \   0000002C   0760               STR      R7,[R0, #+0]
    382                g_PC_Connected=1;
    383                MenuPaint();
   \   0000002E   ........           BL       MenuPaint
    384                RepaintLCD();
   \   00000032   ........           BL       RepaintLCD
    385                RepaintLCD();
   \   00000036   ........           BL       RepaintLCD
    386               
    387                USB_Connect(&sUsb);   
   \   0000003A   ....               LDR      R0,??DataTable8  ;; `?<Constant "Bezpiecznik RF">` + 16
   \   0000003C   ........           BL       USB_Connect
    388                
    389          
    390               // if (ForwardUSB2Serialferst!=1)
    391               // {
    392                  ForwardUSB2Serialferst=1; 
   \   00000040   3800               MOVS     R0,R7
   \   00000042   A876               STRB     R0,[R5, #+26]
    393               // }
    394                
    395                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000044   2C65               STR      R4,[R5, #+80]
    396                if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000046   687B               LDRB     R0,[R5, #+13]
   \   00000048   0028               CMP      R0,#+0
   \   0000004A   14D1               BNE      ??ISR_VBus_2
   \   0000004C   6F73               STRB     R7,[R5, #+13]
   \   0000004E   12E0               B        ??ISR_VBus_2
    397          
    398              }
    399                else
    400              {
    401          
    402                USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_1:
   \   00000050   ....               LDR      R0,??DataTable8  ;; `?<Constant "Bezpiecznik RF">` + 16
   \   00000052   ........           BL       USB_Disconnect
    403                g_PC_Connected=0;
   \   00000056   2000               MOVS     R0,R4
   \   00000058   2873               STRB     R0,[R5, #+12]
    404                MenuPaint();
   \   0000005A   ........           BL       MenuPaint
    405                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000005E   2C65               STR      R4,[R5, #+80]
    406                if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000060   687B               LDRB     R0,[R5, #+13]
   \   00000062   0028               CMP      R0,#+0
   \   00000064   00D1               BNE      ??ISR_VBus_3
   \   00000066   6F73               STRB     R7,[R5, #+13]
    407                Trap.Enable=0;
   \                     ??ISR_VBus_3:
   \   00000068   1048               LDR      R0,??ISR_VBus_4  ;; Trap
   \   0000006A   2100               MOVS     R1,R4
   \   0000006C   0170               STRB     R1,[R0, #+0]
    408                Trap.Row=0;
   \   0000006E   4170               STRB     R1,[R0, #+1]
    409                Trap.Col=0;
   \   00000070   8170               STRB     R1,[R0, #+2]
    410                Trap.Activ=0;
   \   00000072   C170               STRB     R1,[R0, #+3]
    411                g_Stop_Program=0;
   \   00000074   6C74               STRB     R4,[R5, #+17]
    412                
    413          
    414              }
    415              MenuPaint();
   \                     ??ISR_VBus_2:
   \   00000076   ........           BL       MenuPaint
   \   0000007A   13E0               B        ??ISR_VBus_5
    416            }
    417            else
    418            {
    419              USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_0:
   \   0000007C   ....               LDR      R0,??DataTable8  ;; `?<Constant "Bezpiecznik RF">` + 16
   \   0000007E   ........           BL       USB_Disconnect
    420              g_PC_Connected=0;
   \   00000082   2000               MOVS     R0,R4
   \   00000084   2873               STRB     R0,[R5, #+12]
    421              g_Stop_Program=0;
   \   00000086   6874               STRB     R0,[R5, #+17]
    422              MenuPaint();
   \   00000088   ........           BL       MenuPaint
    423              g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000008C   2C65               STR      R4,[R5, #+80]
    424              if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   0000008E   687B               LDRB     R0,[R5, #+13]
   \   00000090   0028               CMP      R0,#+0
   \   00000092   01D1               BNE      ??ISR_VBus_6
   \   00000094   0120               MOVS     R0,#+1
   \   00000096   6873               STRB     R0,[R5, #+13]
    425              
    426              Trap.Enable=0;
   \                     ??ISR_VBus_6:
   \   00000098   0448               LDR      R0,??ISR_VBus_4  ;; Trap
   \   0000009A   2100               MOVS     R1,R4
   \   0000009C   0170               STRB     R1,[R0, #+0]
    427              Trap.Row=0;
   \   0000009E   4170               STRB     R1,[R0, #+1]
    428              Trap.Col=0;
   \   000000A0   8170               STRB     R1,[R0, #+2]
    429              Trap.Activ=0;
   \   000000A2   C470               STRB     R4,[R0, #+3]
    430              
    431          
    432            } 
    433          
    434          }//_____________________________________________________________________________
   \                     ??ISR_VBus_5:
   \   000000A4   F8BC               POP      {R3-R7}
   \   000000A6   01BC               POP      {R0}
   \   000000A8   0047               BX       R0               ;; return
   \   000000AA   C046               Nop      
   \                     ??ISR_VBus_4:
   \   000000AC   ........           DC32     Trap
    435          //#endif // !defined(USB_BUS_POWERED)
    436          
    437          
    438          
    439          
    440          
    441          // Callbacks
    442          //------------------------------------------------------------------------------
    443          //------------------------------------------------------------------------------
    444          //! \brief  Callback invoked during the initialization of the USB driver
    445          //!
    446          //!         Configures and enables USB controller and VBus monitoring interrupts
    447          //! \param  pUsb    Pointer to a S_usb instance
    448          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    449          static void CBK_Init(const S_usb *pUsb)
    450          {
   \                     CBK_Init:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
    451          
    452            TRACE_INFO("\n\rInicjalizacja przerwania VBUS od podlaczenia USB  \n\r" ); 
    453              
    454              // Configure and enable the USB controller interrupt
    455              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    456                                    USB_GetDriverID(pUsb),
    457                                    USB_CON_PRIOR,
    458                                    0, //AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    459                                    ISR_Driver);
   \   00000004   ........           BL       USB_GetDriverID
   \   00000008   ....               LDR      R5,??DataTable9  ;; 0xfffff000
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0F49               LDR      R1,??CBK_Init_0  ;; ISR_Driver
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   0522               MOVS     R2,#+5
   \   00000014   0100               MOVS     R1,R0
   \   00000016   2800               MOVS     R0,R5
   \   00000018   ........           BL       AT91F_AIC_ConfigureIt
   \   0000001C   02B0               ADD      SP,SP,#+8
    460          
    461              AT91F_AIC_EnableIt(AT91C_BASE_AIC, USB_GetDriverID(pUsb));
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       USB_GetDriverID
   \   00000024   0100               MOVS     R1,R0
   \   00000026   2800               MOVS     R0,R5
   \   00000028   ........           BL       AT91F_AIC_EnableIt
    462          
    463          //#ifndef USB_BUS_POWERED
    464             
    465              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   0000002C   0221               MOVS     R1,#+2
   \   0000002E   ....               LDR      R0,??DataTable10  ;; 0xfffff400
   \   00000030   ........           BL       AT91F_PIO_CfgInput
    466              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   00000034   ....               LDR      R0,??DataTable11  ;; 0xfffff460
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   0160               STR      R1,[R0, #+0]
    467             
    468              // Configure VBus monitoring
    469              BRD_ConfigureVBus(USB_GetDriverInterface(pUsb));
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USB_GetDriverInterface
   \   00000040   ........           BL       BRD_ConfigureVBus
    470          
    471              
    472              
    473              
    474              
    475            /*  
    476              // Configure and enable the Vbus detection interrupt
    477              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    478                                    AT91C_ID_VBUS,
    479                                    USB_CON_PRIOR, //AT91C_AIC_PRIOR_LOWEST,
    480                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    481                                    ISR_VBus);
    482          
    483              
    484              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
    485              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
    486            
    487             
    488              
    489              
    490              
    491              
    492              */
    493              
    494              
    495          /*
    496          #else
    497              // Power up the USB controller
    498              USB_Attach(pUsb);
    499            
    500          #endif
    501          */
    502          
    503          }//_____________________________________________________________________________
   \   00000044   38BC               POP      {R3-R5}
   \   00000046   01BC               POP      {R0}
   \   00000048   0047               BX       R0               ;; return
   \   0000004A   C046               Nop      
   \                     ??CBK_Init_0:
   \   0000004C   ........           DC32     ISR_Driver
    504          
    505          
    506          
    507          
    508          
    509          
    510          
    511          
    512          
    513          
    514          
    515          
    516          
    517          
    518          
    519          
    520          
    521          
    522          
    523          
    524          
    525          
    526          
    527          //------------------------------------------------------------------------------
    528          //! \brief  Callback invoked when the device becomes suspended
    529          //!
    530          //!         Disables LEDs (if they are used) and then puts the device into
    531          //!         low-power mode. When traces are used, the device does not enter
    532          //!         low-power mode to avoid losing some outputs.
    533          //! \param  pUsb    Pointer to a S_usb instance
    534          //------------------------------------------------------------------------------
    535          static void CBK_Suspend(const S_usb *pUsb)
    536          {
    537          
    538          #if defined(NOTRACES)
    539              DEV_Suspend();
    540          #endif
    541          }//_____________________________________________________________________________
    542          
    543          
    544          
    545          
    546          
    547          
    548          //------------------------------------------------------------------------------
    549          //! \brief  Callback invoked when the device leaves the suspended state
    550          //!
    551          //!         The device is first returned to a normal operating mode and LEDs are
    552          //!         re-enabled. When traces are used, the device does not enter
    553          //!         low-power mode to avoid losing some outputs.
    554          //! \param  pUsb    Pointer to a S_usb instance
    555          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    556          static void CBK_Resume(const S_usb *pUsb)
    557          {
   \                     CBK_Resume:
   \   00000000   01B5               PUSH     {R0,LR}
    558          #if defined(NOTRACES)
    559              DEV_Resume();
   \   00000002   ........           BL       DEV_Resume
    560          #endif
    561          
    562          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    563          
    564          
    565          
    566          
    567          
    568          
    569          //------------------------------------------------------------------------------
    570          //! \brief  Callback invoked when a new SETUP request is received
    571          //!
    572          //!         The new request if forwarded to the standard request handler,
    573          //!         which performs the enumeration of the device.
    574          //! \param  pUsb   Pointer to a S_usb instance
    575          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    576          static void CBK_NewRequest(const S_usb *pUsb)
    577          {
   \                     CBK_NewRequest:
   \   00000000   01B5               PUSH     {R0,LR}
    578              SER_RequestHandler(&sSer);
   \   00000002   ....               LDR      R0,??DataTable13  ;; DateTime + 124
   \   00000004   ........           BL       SER_RequestHandler
    579          }//_____________________________________________________________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    580          
    581          
    582          
    583          
    584          
    585          
    586          //------------------------------------------------------------------------------
    587          //! \brief  Callback invoked when a Reset request is received
    588          //!
    589          //! \param  pUsb   Pointer to a S_usb instance
    590          //------------------------------------------------------------------------------
    591          //static void CBK_Reset(const S_usb *pUsb)
    592          //{
    593              // Put your reset handler here
    594          //}//_____________________________________________________________________________
    595          
    596          
    597          
    598          
    599          //------------------------------------------------------------------------------
    600          //! \brief  Callback invoked when a SOF is received
    601          //!
    602          //! \param  pUsb   Pointer to a S_usb instance
    603          //------------------------------------------------------------------------------
    604          //static void CBK_SOF(const S_usb *pUsb)
    605          //{
    606              // Put your SOF handler here
    607          //}//_____________________________________________________________________________
    608          
    609          
    610          
    611          

   \                                 In section Debug.txt, align 4, keep-with-next
    612          void SendViaUSB(unsigned char *Buff, unsigned short Size)
    613          {
   \                     SendViaUSB:
   \   00000000   01B5               PUSH     {R0,LR}
    614            SER_Write(&sSer, Buff,Size,0, 0); 
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   0092               STR      R2,[SP, #+0]
   \   00000008   1300               MOVS     R3,R2
   \   0000000A   0A00               MOVS     R2,R1
   \   0000000C   0100               MOVS     R1,R0
   \   0000000E   ....               LDR      R0,??DataTable13  ;; DateTime + 124
   \   00000010   ........           BL       SER_Write
   \   00000014   02B0               ADD      SP,SP,#+8
    615          }
   \   00000016   08BC               POP      {R3}
   \   00000018   01BC               POP      {R0}
   \   0000001A   0047               BX       R0               ;; return
    616          
    617          
    618          // Other functions
    619          //------------------------------------------------------------------------------
    620          //------------------------------------------------------------------------------
    621          //! \brief  Forwards data receiving from the USB host through the USART
    622          //!
    623          //!         This function operates asynchronously.
    624          //! \param  pBuffer           Must be 0 when function is first called
    625          //! \param  bStatus           Same as above
    626          //! \param  dBytesTransferred Same as above
    627          //! \param  dBytesRemaining   Same as above
    628          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    629          static void ForwardUSB2Serial(unsigned char *pBuffer,
    630                                        unsigned char bStatus,
    631                                        unsigned int dBytesTransferred,
    632                                        unsigned int dBytesRemaining)
    633          {
   \                     ForwardUSB2Serial:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    634              //Zmienne lokalne ----------------------------------------------------
    635                      static char buff_tx[900];                                          //Bufor danych wysy³anych do USB
    636                   
    637                      unsigned int rozmiar_tx=0;                                          //Iloœæ danych do wys³ania przez USB
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0093               STR      R3,[SP, #+0]
    638                    //---------------------koniec zmiennych lokalnych--------------------
    639                  
    640          
    641              if (pBuffer != 0) {                                                                   
   \   00000006   0028               CMP      R0,#+0
   \   00000008   15D0               BEQ      ??ForwardUSB2Serial_0
    642                  if (bStatus != SER_STATUS_SUCCESS) 
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   13D1               BNE      ??ForwardUSB2Serial_0
    643                  {
    644                    
    645                    TRACE_WARNING("\n\r W: ForwardUSB2Serial: B³¹d transmisji USB\n\r");
    646                  }
    647                  else 
    648                  {
    649          
    650                      pBuffer[dBytesTransferred] = 0;
   \   0000000E   8354               STRB     R3,[R0, R2]
    651                     komunikcja_RSwin((char *)pBuffer,buff_tx,&rozmiar_tx);
   \   00000010   ....               LDR      R4,??DataTable17  ;; DateTime
   \   00000012   DE21               MOVS     R1,#+222
   \   00000014   4900               LSLS     R1,R1,#+1        ;; #+444
   \   00000016   6518               ADDS     R5,R4,R1
   \   00000018   6A46               MOV      R2,SP
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   ........           BL       komunikcja_RSwin
    652                     SER_Write(&sSer, buff_tx,rozmiar_tx,0, 0);                                                                        
   \   00000020   82B0               SUB      SP,SP,#+8
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   0090               STR      R0,[SP, #+0]
   \   00000026   0300               MOVS     R3,R0
   \   00000028   029A               LDR      R2,[SP, #+8]
   \   0000002A   2900               MOVS     R1,R5
   \   0000002C   7C34               ADDS     R4,R4,#+124
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       SER_Write
   \   00000034   02B0               ADD      SP,SP,#+8
    653                  }
    654              }
    655          
    656          
    657              do {
    658          
    659                  bStatus = SER_Read(&sSer,
    660                                     pUsbBuffer,
    661              
    662                                     USB_BUFFER_SIZE,
    663                                     (Callback_f) ForwardUSB2Serial,
    664                                     pUsbBuffer);
    665              }
    666              while (bStatus != SER_STATUS_SUCCESS);
   \                     ??ForwardUSB2Serial_0:
   \   00000036   ....               LDR      R4,??DataTable17  ;; DateTime
   \   00000038   2100               MOVS     R1,R4
   \   0000003A   9031               ADDS     R1,R1,#+144
   \   0000003C   82B0               SUB      SP,SP,#+8
   \   0000003E   0091               STR      R1,[SP, #+0]
   \   00000040   064B               LDR      R3,??ForwardUSB2Serial_1  ;; ForwardUSB2Serial
   \   00000042   9622               MOVS     R2,#+150
   \   00000044   5200               LSLS     R2,R2,#+1        ;; #+300
   \   00000046   7C34               ADDS     R4,R4,#+124
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       SER_Read
   \   0000004E   02B0               ADD      SP,SP,#+8
   \   00000050   0028               CMP      R0,#+0
   \   00000052   F0D1               BNE      ??ForwardUSB2Serial_0
    667           
    668          }//_____________________________________________________________________________
   \   00000054   38BC               POP      {R3-R5}
   \   00000056   01BC               POP      {R0}
   \   00000058   0047               BX       R0               ;; return
   \   0000005A   C046               Nop      
   \                     ??ForwardUSB2Serial_1:
   \   0000005C   ........           DC32     ForwardUSB2Serial
    669          
    670          
    671          
    672          
    673          
    674          
    675          //-----------------------------------------------------------------------------
    676          //!  Nazwa funkcji :    Delay
    677          //!  Funkcja opóŸnienia
    678          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    679          void Delay (unsigned long a) 
    680          { 
   \                     Delay:
   \   00000000   01B5               PUSH     {R0,LR}
    681              while (--a!=0);   AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Delay_0:
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   FDD1               BNE      ??Delay_0
   \   00000006   ....               LDR      R0,??DataTable16  ;; 0xfffffd40
   \   00000008   ........           BL       AT91F_WDTRestart
    682          }//_______________________ Koniec funkcji opóŸnienia ____________________________
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return
    683          
    684          
    685          
    686          

   \                                 In section .bss, align 4
    687          char *memory_read;
   \                     memory_read:
   \   00000000                      DS8 4
    688          
    689          //-----------------------------------------------------------------------------
    690          //! Nazwa funkcji :    InitFramework
    691          //! Funkcja ustawieñ wstêpnych systemu
    692          //-----------------------------------------------------------------------------
    693          int tProgramTabSize=ProgramTabSize;
    694          char *SourRam;
    695          unsigned int  stop=2000;
    696          unsigned int  siz;

   \                                 In section Debug.txt, align 4, keep-with-next
    697          void InitFramework (void) 
    698          { 
   \                     InitFramework:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    699             
    700           //  TRACE_INFO("\n\ InitFramework \n\r");
    701              
    702          
    703          
    704                                            FlashProgramOfset=FlashProgram_A_Ofset;
   \   00000002   ....               LDR      R0,??DataTable17  ;; DateTime
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   8164               STR      R1,[R0, #+72]
    705                                 
    706                                            
    707                                          //  TRACE_INFO("\n\r---  Strona flash = A  \n\r" ); 
    708          
    709              
    710              
    711          //    TRACE_INFO(" ---  Przepisuje program z FLASH do RAM     -Ofset : %d\n\r",AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    712              //przepisz program z flash do ram
    713              char *memory_read_prog;
    714              memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
    715          
    716            
    717               SourRam= (char*)&gProg;
   \   00000008   ....               LDR      R2,??DataTable18  ;; gProg
   \   0000000A   8265               STR      R2,[R0, #+88]
    718          
    719             
    720              siz=sizeof(gProg);
   \   0000000C   ....               LDR      R3,??DataTable19  ;; 0xc670
   \   0000000E   C365               STR      R3,[R0, #+92]
    721              for (unsigned int k = 0 ; k <siz; k++) 
   \   00000010   0B00               MOVS     R3,R1
   \   00000012   04E0               B        ??InitFramework_0
    722              {      
    723                    SourRam[k]=memory_read_prog[k]; 
   \                     ??InitFramework_1:
   \   00000014   846D               LDR      R4,[R0, #+88]
   \   00000016   ....               LDR      R5,??DataTable20  ;; 0x130100
   \   00000018   ED5C               LDRB     R5,[R5, R3]
   \   0000001A   E554               STRB     R5,[R4, R3]
    724              }
   \   0000001C   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_0:
   \   0000001E   C46D               LDR      R4,[R0, #+92]
   \   00000020   A342               CMP      R3,R4
   \   00000022   F7D3               BCC      ??InitFramework_1
    725              
    726             
    727            
    728              for (char i=0; i<ScreenNr; i++) 
   \   00000024   0B00               MOVS     R3,R1
   \   00000026   03E0               B        ??InitFramework_2
    729             {
    730               //je¿eli ustawienie automatyczne temperatury
    731               if (gProg.Screen[i].Thermo.AutoOn) 
    732               {
    733                 
    734                   //je¿eli dzieñ typu pierwszego
    735                   if (((gProg.Screen[i].Thermo.Week>>DateTime.DayOfWeek) & 0x1)==1)       
    736                   {
    737                      if (((gProg.Screen[i].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    738                      {                 
    739                        //ustaw wy¿sz¹ temperaturê
    740                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    741                        {
    742                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
    743                        }else{
    744                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    745                        }
    746                      }else{
    747                        //ustaw ni¿sz¹ temperaturê
    748                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    749                        {
    750                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    751                        }else{
    752                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
   \                     ??InitFramework_3:
   \   00000028   2C81               STRH     R4,[R5, #+8]
    753                        }
   \                     ??InitFramework_4:
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \   0000002C   1B06               LSLS     R3,R3,#+24
   \   0000002E   1B0E               LSRS     R3,R3,#+24
   \                     ??InitFramework_2:
   \   00000030   1C00               MOVS     R4,R3
   \   00000032   082C               CMP      R4,#+8
   \   00000034   27D2               BCS      ??InitFramework_5
   \   00000036   A025               MOVS     R5,#+160
   \   00000038   6C43               MULS     R4,R5,R4
   \   0000003A   1419               ADDS     R4,R2,R4
   \   0000003C   ....               LDR      R5,??DataTable21  ;; 0xbc26
   \   0000003E   6519               ADDS     R5,R4,R5
   \   00000040   2E78               LDRB     R6,[R5, #+0]
   \   00000042   002E               CMP      R6,#+0
   \   00000044   F1D0               BEQ      ??InitFramework_4
   \   00000046   EE78               LDRB     R6,[R5, #+3]
   \   00000048   8779               LDRB     R7,[R0, #+6]
   \   0000004A   3E41               ASRS     R6,R6,R7
   \   0000004C   F607               LSLS     R6,R6,#+31
   \   0000004E   ECD5               BPL      ??InitFramework_4
   \   00000050   ....               LDR      R6,??DataTable22  ;; 0xbc30
   \   00000052   A459               LDR      R4,[R4, R6]
   \   00000054   C678               LDRB     R6,[R0, #+3]
   \   00000056   F440               LSRS     R4,R4,R6
   \   00000058   E407               LSLS     R4,R4,#+31
   \   0000005A   0BD5               BPL      ??InitFramework_6
   \   0000005C   0624               MOVS     R4,#+6
   \   0000005E   2C5F               LDRSH    R4,[R5, R4]
   \   00000060   0426               MOVS     R6,#+4
   \   00000062   AE5F               LDRSH    R6,[R5, R6]
   \   00000064   B442               CMP      R4,R6
   \   00000066   02DA               BGE      ??InitFramework_7
   \   00000068   AC88               LDRH     R4,[R5, #+4]
   \   0000006A   2C81               STRH     R4,[R5, #+8]
   \   0000006C   DDE7               B        ??InitFramework_4
   \                     ??InitFramework_7:
   \   0000006E   EC88               LDRH     R4,[R5, #+6]
   \   00000070   2C81               STRH     R4,[R5, #+8]
   \   00000072   DAE7               B        ??InitFramework_4
   \                     ??InitFramework_6:
   \   00000074   0424               MOVS     R4,#+4
   \   00000076   2C5F               LDRSH    R4,[R5, R4]
   \   00000078   0626               MOVS     R6,#+6
   \   0000007A   AE5F               LDRSH    R6,[R5, R6]
   \   0000007C   A642               CMP      R6,R4
   \   0000007E   D3DA               BGE      ??InitFramework_3
   \   00000080   EC88               LDRH     R4,[R5, #+6]
   \   00000082   2C81               STRH     R4,[R5, #+8]
   \   00000084   D1E7               B        ??InitFramework_4
    754                      }
    755                   }
    756               }
    757             }
    758           
    759              
    760           
    761              //koniec
    762             
    763             
    764             
    765             
    766             //czyszczenie zmiennych programowych
    767                for (int LineNr=0; LineNr<MaxPrcLines; LineNr++)
   \                     ??InitFramework_5:
   \   00000086   0B00               MOVS     R3,R1
   \   00000088   0DE0               B        ??InitFramework_8
    768                {
    769                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
    770                  {
    771                    gProg.Line[LineNr].Proc[PrcInLine].LastIn=0;
   \                     ??InitFramework_9:
   \   0000008A   1825               MOVS     R5,#+24
   \   0000008C   6543               MULS     R5,R4,R5
   \   0000008E   F026               MOVS     R6,#+240
   \   00000090   5E43               MULS     R6,R3,R6
   \   00000092   9619               ADDS     R6,R2,R6
   \   00000094   7519               ADDS     R5,R6,R5
   \   00000096   2835               ADDS     R5,R5,#+40
   \   00000098   0E00               MOVS     R6,R1
   \   0000009A   2E70               STRB     R6,[R5, #+0]
    772                    gProg.Line[LineNr].Proc[PrcInLine].Out=0;
   \   0000009C   6E80               STRH     R6,[R5, #+2]
    773                  }
   \   0000009E   641C               ADDS     R4,R4,#+1
   \                     ??InitFramework_10:
   \   000000A0   0A2C               CMP      R4,#+10
   \   000000A2   F2DB               BLT      ??InitFramework_9
   \   000000A4   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_8:
   \   000000A6   C82B               CMP      R3,#+200
   \   000000A8   01DA               BGE      ??InitFramework_11
   \   000000AA   0C00               MOVS     R4,R1
   \   000000AC   F8E7               B        ??InitFramework_10
    774                }
    775           
    776          
    777                //Ustawienie wartoœci analogowych wêz³ów na niewiarygodne (0x8AAA)
    778                for (char NN=1; NN<NumberNeurons; NN++)
   \                     ??InitFramework_11:
   \   000000AE   0122               MOVS     R2,#+1
   \   000000B0   12E0               B        ??InitFramework_12
    779                {
    780                  for (char NR=0; NR<NumberReg; NR++)
    781                  {
    782                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   \                     ??InitFramework_13:
   \   000000B2   6400               LSLS     R4,R4,#+1
   \   000000B4   1500               MOVS     R5,R2
   \   000000B6   1626               MOVS     R6,#+22
   \   000000B8   7543               MULS     R5,R6,R5
   \   000000BA   ....               LDR      R6,??DataTable23  ;; MainStage
   \   000000BC   7519               ADDS     R5,R6,R5
   \   000000BE   2C19               ADDS     R4,R5,R4
   \   000000C0   A034               ADDS     R4,R4,#+160
   \   000000C2   ....               LDR      R5,??DataTable24  ;; 0xffff8aaa
   \   000000C4   2580               STRH     R5,[R4, #+0]
    783                  }
   \   000000C6   5B1C               ADDS     R3,R3,#+1
   \   000000C8   1B06               LSLS     R3,R3,#+24
   \   000000CA   1B0E               LSRS     R3,R3,#+24
   \                     ??InitFramework_14:
   \   000000CC   1C00               MOVS     R4,R3
   \   000000CE   0B2C               CMP      R4,#+11
   \   000000D0   EFD3               BCC      ??InitFramework_13
   \   000000D2   521C               ADDS     R2,R2,#+1
   \   000000D4   1206               LSLS     R2,R2,#+24
   \   000000D6   120E               LSRS     R2,R2,#+24
   \                     ??InitFramework_12:
   \   000000D8   1300               MOVS     R3,R2
   \   000000DA   232B               CMP      R3,#+35
   \   000000DC   01D2               BCS      ??InitFramework_15
   \   000000DE   0B00               MOVS     R3,R1
   \   000000E0   F4E7               B        ??InitFramework_14
    784                }
    785              
    786              
    787                 //przepisanie wartoœci konfiguracyjnych
    788              WypMaxJasnosci=pAT91C_IFLASH_MEM->Config.ScreenBrightActive;
   \                     ??InitFramework_15:
   \   000000E2   0A49               LDR      R1,??InitFramework_16  ;; 0xd80e
   \   000000E4   426D               LDR      R2,[R0, #+84]
   \   000000E6   5118               ADDS     R1,R2,R1
   \   000000E8   0A78               LDRB     R2,[R1, #+0]
   \   000000EA   4275               STRB     R2,[R0, #+21]
    789              WypMinJasnosci=pAT91C_IFLASH_MEM->Config.ScreenBrightInactive;
   \   000000EC   4978               LDRB     R1,[R1, #+1]
   \   000000EE   8175               STRB     R1,[R0, #+22]
    790              if ((WypMaxJasnosci<10) || (WypMaxJasnosci>100)) WypMaxJasnosci=100;
   \   000000F0   0A2A               CMP      R2,#+10
   \   000000F2   01D3               BCC      ??InitFramework_17
   \   000000F4   652A               CMP      R2,#+101
   \   000000F6   01D3               BCC      ??InitFramework_18
   \                     ??InitFramework_17:
   \   000000F8   6422               MOVS     R2,#+100
   \   000000FA   4275               STRB     R2,[R0, #+21]
    791              if (WypMinJasnosci==0) WypMinJasnosci=14;
   \                     ??InitFramework_18:
   \   000000FC   0029               CMP      R1,#+0
   \   000000FE   01D1               BNE      ??InitFramework_19
   \   00000100   0E21               MOVS     R1,#+14
   \   00000102   8175               STRB     R1,[R0, #+22]
    792               
    793          }//_______________________ Koniec funkcji InitFramework ____________________________
   \                     ??InitFramework_19:
   \   00000104   F8BC               POP      {R3-R7}
   \   00000106   01BC               POP      {R0}
   \   00000108   0047               BX       R0               ;; return
   \   0000010A   C046               Nop      
   \                     ??InitFramework_16:
   \   0000010C   0ED80000           DC32     0xd80e
    794          
    795          
    796          
    797          
    798          
    799          
    800          //char gLcdLightDuty=2;

   \                                 In section Debug.txt, align 4, keep-with-next
    801          void Timer_10us(void)                        //timer isr 
    802          { 
    803              unsigned int dummy0 = AT91C_BASE_TC1->TC_SR;      
   \                     Timer_10us:
   \   00000000   0148               LDR      R0,??Timer_10us_0  ;; 0xfffa0060
   \   00000002   0068               LDR      R0,[R0, #+0]
    804            
    805           /*
    806            
    807            //PWM podœwietlenia
    808            static char LcdLightCounterPWM=6;        //licznik podœwietlenia
    809            
    810            
    811          AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD); 
    812            
    813            /*
                   ^
Warning[Pe009]: nested comment is not allowed
    814            static long long ScreenSaverCounter=0;
    815            if (g_LightLCDEnable)
    816            {
    817              AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);    
    818              ScreenSaverCounter=0;
    819            }else{
    820            
    821              if (LcdLightCounterPWM<6)
    822            {
    823              LcdLightCounterPWM++;
    824             
    825            }else{
    826              LcdLightCounterPWM=0; 
    827              
    828              if ((ScreenSaverCounter<500000) && (g_ScreenSever_On) ) 
    829              {
    830                ScreenSaverCounter++;  
    831                AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    832              }
    833              if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))   AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    834            }
    835            if  (LcdLightCounterPWM==gLcdLightDuty) AT91F_PIO_ClearOutput(LCD_PIO,(unsigned int)LightLCD);
    836            }
    837            */
    838            
    839          
    840            //----koniec PWM podœwietlenia ------
    841            
    842          
    843            
    844          }//_____________________________________________________________________________
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??Timer_10us_0:
   \   00000008   6000FAFF           DC32     0xfffa0060
    845          
    846          
    847          
    848          
    849          
    850          
    851          
    852          
    853          //-----------------------------------------------------------------------------
    854          //!  Nazwa funkcji :    Timer_1_Setup
    855          //!  Funkcja inicjalizacji Timer1 - 1ms
    856          //-----------------------------------------------------------------------------
    857          //! 
    858          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    859          void Timer_10us_Setup(void) 
    860          { 
    861          
    862            
    863           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
    864           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
    865           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC1] = (unsigned int)Timer_10us;  //set AIC             
   \                     Timer_10us_Setup:
   \   00000000   1148               LDR      R0,??Timer_10us_Setup_0  ;; 0xfffff0b4
   \   00000002   1249               LDR      R1,??Timer_10us_Setup_0+0x4  ;; Timer_10us
   \   00000004   0160               STR      R1,[R0, #+0]
    866           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC1] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10US_PRIOR); 
   \   00000006   1248               LDR      R0,??Timer_10us_Setup_0+0x8  ;; 0xfffff034
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0160               STR      R1,[R0, #+0]
    867           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC1);      //enable clock 
   \   0000000C   4803               LSLS     R0,R1,#+13
   \   0000000E   1149               LDR      R1,??Timer_10us_Setup_0+0xC  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
    868           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   1149               LDR      R1,??Timer_10us_Setup_0+0x10  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
    869           //no external clocks 
    870           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   1049               LDR      R1,??Timer_10us_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
    871           AT91C_BASE_TC1->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   1049               LDR      R1,??Timer_10us_Setup_0+0x18  ;; 0xfffa0040
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
    872           AT91C_BASE_TC1->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0F49               LDR      R1,??Timer_10us_Setup_0+0x1C  ;; 0xfffa0044
   \   00000026   104A               LDR      R2,??Timer_10us_Setup_0+0x20  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
    873           //clock: MCK/1024  = 48054841/ DIV
    874           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
    875           //! DIV5 - 1024
    876           //! DIV4 - 128
    877           //! DIV3 - 32
    878           //! DIV2 - 8
    879           
    880           //AT91C_BASE_TC3->TC_RC = 5090;                  //1ms  (z wyliczeñ 6007)
    881           //AT91C_BASE_TC0->TC_RC = 5286;                    //880us 
    882           AT91C_BASE_TC1->TC_RC = 200;                    //440us  
   \   0000002A   1049               LDR      R1,??Timer_10us_Setup_0+0x24  ;; 0xfffa005c
   \   0000002C   C822               MOVS     R2,#+200
   \   0000002E   0A60               STR      R2,[R1, #+0]
    883           AT91C_BASE_TC1->TC_IER = AT91C_TC_CPCS;          //enable RC compare int 
   \   00000030   0F49               LDR      R1,??Timer_10us_Setup_0+0x28  ;; 0xfffa0064
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
    884           AT91C_BASE_TC1->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   0F49               LDR      R1,??Timer_10us_Setup_0+0x2C  ;; 0xfffa0068
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
    885           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC1);       //enable int 
   \   0000003C   0E49               LDR      R1,??Timer_10us_Setup_0+0x30  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
    886           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC1);       //clear int 
   \   00000040   0E49               LDR      R1,??Timer_10us_Setup_0+0x34  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
    887           
    888           
    889           //AT91C_BASE_TC1->TC_CMR |= 1<<6;
    890          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_10us_Setup_0:
   \   00000048   B4F0FFFF           DC32     0xfffff0b4
   \   0000004C   ........           DC32     Timer_10us
   \   00000050   34F0FFFF           DC32     0xfffff034
   \   00000054   10FCFFFF           DC32     0xfffffc10
   \   00000058   C000FAFF           DC32     0xfffa00c0
   \   0000005C   C400FAFF           DC32     0xfffa00c4
   \   00000060   4000FAFF           DC32     0xfffa0040
   \   00000064   4400FAFF           DC32     0xfffa0044
   \   00000068   01C00C00           DC32     0xcc001
   \   0000006C   5C00FAFF           DC32     0xfffa005c
   \   00000070   6400FAFF           DC32     0xfffa0064
   \   00000074   6800FAFF           DC32     0xfffa0068
   \   00000078   20F1FFFF           DC32     0xfffff120
   \   0000007C   28F1FFFF           DC32     0xfffff128
    891          
    892          
    893          
    894          

   \                                 In section Debug.txt, align 4, keep-with-next
    895          void TimetableExecute(void)
    896          {
   \                     TimetableExecute:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   04E0               B        ??TimetableExecute_0
    897          
    898            
    899            volatile static __Timetable *Timetable=AT91C_IFLASH_MEM->Config.Timetable;
    900            
    901            static  char Out[ScreenNr][TimetableTasks];
    902            char Hour;
    903            for (char sc=0; sc<ScreenNr; sc++)
   \                     ??TimetableExecute_1:
   \   00000008   0098               LDR      R0,[SP, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   0006               LSLS     R0,R0,#+24
   \   0000000E   000E               LSRS     R0,R0,#+24
   \   00000010   0090               STR      R0,[SP, #+0]
   \                     ??TimetableExecute_0:
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   0006               LSLS     R0,R0,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0828               CMP      R0,#+8
   \   0000001A   00D3               BCC      .+4
   \   0000001C   AFE0               B        ??TimetableExecute_2
    904            {
    905               for (char tn=0; tn<4; tn++)
   \   0000001E   0024               MOVS     R4,#+0
   \   00000020   57E0               B        ??TimetableExecute_3
    906               {
    907                   
    908          
    909                  
    910                   if (Timetable[sc].Task[tn].Enable==1) 
    911                   {    
    912                     
    913                             if (gProg.Screen[sc].Timetable.Min1h)
    914                             {
    915                               if(Timetable[sc].Task[tn].Hour>0) {
    916                                 Hour=Timetable[sc].Task[tn].Hour-1;
    917                               }else{
    918                                 Hour=23;
   \                     ??TimetableExecute_4:
   \   00000022   1721               MOVS     R1,#+23
    919                               }
    920                             }else{
    921                               Hour=Timetable[sc].Task[tn].Hour;
   \                     ??TimetableExecute_5:
   \   00000024   574A               LDR      R2,??TimetableExecute_6  ;; DateTime + 3
   \   00000026   1278               LDRB     R2,[R2, #+0]
   \   00000028   0906               LSLS     R1,R1,#+24
   \   0000002A   090E               LSRS     R1,R1,#+24
   \   0000002C   9142               CMP      R1,R2
   \   0000002E   00D0               BEQ      .+4
   \   00000030   9BE0               B        ??TimetableExecute_7
   \   00000032   0179               LDRB     R1,[R0, #+4]
   \   00000034   544A               LDR      R2,??TimetableExecute_6+0x4  ;; DateTime + 4
   \   00000036   1278               LDRB     R2,[R2, #+0]
   \   00000038   9142               CMP      R1,R2
   \   0000003A   00D0               BEQ      .+4
   \   0000003C   95E0               B        ??TimetableExecute_7
   \   0000003E   8178               LDRB     R1,[R0, #+2]
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   524A               LDR      R2,??TimetableExecute_6+0x8  ;; DateTime + 6
   \   00000044   1278               LDRB     R2,[R2, #+0]
   \   00000046   521E               SUBS     R2,R2,#+1
   \   00000048   9040               LSLS     R0,R0,R2
   \   0000004A   0142               TST      R1,R0
   \   0000004C   00D1               BNE      .+4
   \   0000004E   8CE0               B        ??TimetableExecute_7
   \   00000050   4F48               LDR      R0,??TimetableExecute_6+0xC  ;; DateTime + 5
   \   00000052   0078               LDRB     R0,[R0, #+0]
   \   00000054   0028               CMP      R0,#+0
   \   00000056   00D0               BEQ      .+4
   \   00000058   87E0               B        ??TimetableExecute_7
    922                             }
    923                  
    924                     
    925                       if ((Hour==DateTime.Hour)&& (Timetable[sc].Task[tn].Minute==DateTime.Minute) && ((Timetable[sc].Task[tn].Week) & (1<<DateTime.DayOfWeek-1))  && (DateTime.Second==0))
    926                       {
    927                         if (gProg.Screen[sc].Timetable.ActionType==2)
   \   0000005A   A800               LSLS     R0,R5,#+2
   \   0000005C   4D49               LDR      R1,??TimetableExecute_6+0x10  ;; ??Out
   \   0000005E   0818               ADDS     R0,R1,R0
   \   00000060   8019               ADDS     R0,R0,R6
   \   00000062   0190               STR      R0,[SP, #+4]
   \   00000064   0078               LDRB     R0,[R0, #+0]
   \   00000066   B978               LDRB     R1,[R7, #+2]
   \   00000068   0229               CMP      R1,#+2
   \   0000006A   52D1               BNE      ??TimetableExecute_8
    928                         {
    929                           if (Out[sc][tn])
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   2DD0               BEQ      ??TimetableExecute_9
    930                           {
    931                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \                     ??TimetableExecute_10:
   \   00000070   0020               MOVS     R0,#+0
   \   00000072   3856               LDRSB    R0,[R7, R0]
   \   00000074   0028               CMP      R0,#+0
   \   00000076   0ED5               BPL      ??TimetableExecute_11
    932                             {
    933                                Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
   \   00000078   7878               LDRB     R0,[R7, #+1]
   \   0000007A   4749               LDR      R1,??TimetableExecute_6+0x14  ;; Variables
   \   0000007C   0200               MOVS     R2,R0
   \   0000007E   D210               ASRS     R2,R2,#+3
   \   00000080   8A18               ADDS     R2,R1,R2
   \   00000082   1378               LDRB     R3,[R2, #+0]
   \   00000084   0121               MOVS     R1,#+1
   \   00000086   0700               MOVS     R7,R0
   \   00000088   FF08               LSRS     R7,R7,#+3
   \   0000008A   FF00               LSLS     R7,R7,#+3
   \   0000008C   C01B               SUBS     R0,R0,R7
   \   0000008E   8140               LSLS     R1,R1,R0
   \   00000090   8B43               BICS     R3,R3,R1
   \   00000092   1370               STRB     R3,[R2, #+0]
   \   00000094   15E0               B        ??TimetableExecute_12
    934                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_11:
   \   00000096   0022               MOVS     R2,#+0
   \   00000098   7978               LDRB     R1,[R7, #+1]
   \   0000009A   8C46               MOV      R12,R1
   \   0000009C   3F49               LDR      R1,??TimetableExecute_6+0x18  ;; 0x3a2
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   3856               LDRSB    R0,[R7, R0]
   \   000000A2   1623               MOVS     R3,#+22
   \   000000A4   5843               MULS     R0,R3,R0
   \   000000A6   3E4B               LDR      R3,??TimetableExecute_6+0x1C  ;; MainStage
   \   000000A8   1818               ADDS     R0,R3,R0
   \   000000AA   4018               ADDS     R0,R0,R1
   \   000000AC   6146               MOV      R1,R12
    935                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);  
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   000000AE   ........           BL       PortStageSet
    936                                MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
   \   000000B2   3C48               LDR      R0,??TimetableExecute_6+0x20  ;; 0x6eb
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   7956               LDRSB    R1,[R7, R1]
   \   000000B8   394A               LDR      R2,??TimetableExecute_6+0x1C  ;; MainStage
   \   000000BA   5118               ADDS     R1,R2,R1
   \   000000BC   3A4A               LDR      R2,??TimetableExecute_6+0x24  ;; DateTime + 24
   \   000000BE   1278               LDRB     R2,[R2, #+0]
   \   000000C0   0A54               STRB     R2,[R1, R0]
    937                             }
    938                             Out[sc][tn]=0;
   \                     ??TimetableExecute_12:
   \   000000C2   A800               LSLS     R0,R5,#+2
   \   000000C4   3349               LDR      R1,??TimetableExecute_6+0x10  ;; ??Out
   \   000000C6   0818               ADDS     R0,R1,R0
   \   000000C8   0021               MOVS     R1,#+0
   \   000000CA   8155               STRB     R1,[R0, R6]
    939                           }
    940                         }else{
   \                     ??TimetableExecute_9:
   \   000000CC   641C               ADDS     R4,R4,#+1
   \   000000CE   2406               LSLS     R4,R4,#+24
   \   000000D0   240E               LSRS     R4,R4,#+24
   \                     ??TimetableExecute_3:
   \   000000D2   2000               MOVS     R0,R4
   \   000000D4   0428               CMP      R0,#+4
   \   000000D6   97D2               BCS      ??TimetableExecute_1
   \   000000D8   2600               MOVS     R6,R4
   \   000000DA   009D               LDR      R5,[SP, #+0]
   \   000000DC   2D06               LSLS     R5,R5,#+24
   \   000000DE   2D0E               LSRS     R5,R5,#+24
   \   000000E0   B000               LSLS     R0,R6,#+2
   \   000000E2   1121               MOVS     R1,#+17
   \   000000E4   6943               MULS     R1,R5,R1
   \   000000E6   314A               LDR      R2,??TimetableExecute_6+0x28  ;; ??Out + 32
   \   000000E8   1268               LDR      R2,[R2, #+0]
   \   000000EA   5118               ADDS     R1,R2,R1
   \   000000EC   0818               ADDS     R0,R1,R0
   \   000000EE   4178               LDRB     R1,[R0, #+1]
   \   000000F0   0129               CMP      R1,#+1
   \   000000F2   EBD1               BNE      ??TimetableExecute_9
   \   000000F4   2E49               LDR      R1,??TimetableExecute_6+0x2C  ;; 0xbc24
   \   000000F6   A022               MOVS     R2,#+160
   \   000000F8   6A43               MULS     R2,R5,R2
   \   000000FA   2E4B               LDR      R3,??TimetableExecute_6+0x30  ;; gProg
   \   000000FC   9A18               ADDS     R2,R3,R2
   \   000000FE   5718               ADDS     R7,R2,R1
   \   00000100   F978               LDRB     R1,[R7, #+3]
   \   00000102   0029               CMP      R1,#+0
   \   00000104   C178               LDRB     R1,[R0, #+3]
   \   00000106   8DD0               BEQ      ??TimetableExecute_5
   \   00000108   0029               CMP      R1,#+0
   \   0000010A   8AD0               BEQ      ??TimetableExecute_4
   \   0000010C   C178               LDRB     R1,[R0, #+3]
   \   0000010E   491E               SUBS     R1,R1,#+1
   \   00000110   88E7               B        ??TimetableExecute_5
    941                           
    942                           if (Out[sc][tn]==0) {
   \                     ??TimetableExecute_8:
   \   00000112   0028               CMP      R0,#+0
   \   00000114   25D1               BNE      ??TimetableExecute_13
    943                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \   00000116   3856               LDRSB    R0,[R7, R0]
   \   00000118   0028               CMP      R0,#+0
   \   0000011A   0ED5               BPL      ??TimetableExecute_14
    944                             {
    945                                Variables[gProg.Screen[sc].Timetable.ActorPort/8] |= 1<<(gProg.Screen[sc].Timetable.ActorPort%8);
   \   0000011C   7878               LDRB     R0,[R7, #+1]
   \   0000011E   1E49               LDR      R1,??TimetableExecute_6+0x14  ;; Variables
   \   00000120   0200               MOVS     R2,R0
   \   00000122   D210               ASRS     R2,R2,#+3
   \   00000124   8918               ADDS     R1,R1,R2
   \   00000126   0A78               LDRB     R2,[R1, #+0]
   \   00000128   0123               MOVS     R3,#+1
   \   0000012A   0500               MOVS     R5,R0
   \   0000012C   ED08               LSRS     R5,R5,#+3
   \   0000012E   ED00               LSLS     R5,R5,#+3
   \   00000130   401B               SUBS     R0,R0,R5
   \   00000132   8340               LSLS     R3,R3,R0
   \   00000134   1343               ORRS     R3,R3,R2
   \   00000136   0B70               STRB     R3,[R1, #+0]
   \   00000138   13E0               B        ??TimetableExecute_13
    946                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_14:
   \   0000013A   0122               MOVS     R2,#+1
   \   0000013C   7978               LDRB     R1,[R7, #+1]
   \   0000013E   1748               LDR      R0,??TimetableExecute_6+0x18  ;; 0x3a2
   \   00000140   0023               MOVS     R3,#+0
   \   00000142   FB56               LDRSB    R3,[R7, R3]
   \   00000144   1625               MOVS     R5,#+22
   \   00000146   6B43               MULS     R3,R5,R3
   \   00000148   154D               LDR      R5,??TimetableExecute_6+0x1C  ;; MainStage
   \   0000014A   EB18               ADDS     R3,R5,R3
   \   0000014C   1818               ADDS     R0,R3,R0
    947                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 1);  
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000014E   ........           BL       PortStageSet
    948                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;}
   \   00000152   1448               LDR      R0,??TimetableExecute_6+0x20  ;; 0x6eb
   \   00000154   0021               MOVS     R1,#+0
   \   00000156   7956               LDRSB    R1,[R7, R1]
   \   00000158   114A               LDR      R2,??TimetableExecute_6+0x1C  ;; MainStage
   \   0000015A   5118               ADDS     R1,R2,R1
   \   0000015C   124A               LDR      R2,??TimetableExecute_6+0x24  ;; DateTime + 24
   \   0000015E   1278               LDRB     R2,[R2, #+0]
   \   00000160   0A54               STRB     R2,[R1, R0]
    949                             }
    950                           Out[sc][tn]=1;
   \                     ??TimetableExecute_13:
   \   00000162   0198               LDR      R0,[SP, #+4]
   \   00000164   0121               MOVS     R1,#+1
   \   00000166   0170               STRB     R1,[R0, #+0]
   \   00000168   B0E7               B        ??TimetableExecute_9
    951                           
    952                         }
    953                       }else{
    954                         if ((gProg.Screen[sc].Timetable.ActionType==0) && (Out[sc][tn]==1)) 
   \                     ??TimetableExecute_7:
   \   0000016A   B878               LDRB     R0,[R7, #+2]
   \   0000016C   0028               CMP      R0,#+0
   \   0000016E   A8D1               BNE      ??TimetableExecute_12
   \   00000170   A800               LSLS     R0,R5,#+2
   \   00000172   0849               LDR      R1,??TimetableExecute_6+0x10  ;; ??Out
   \   00000174   0818               ADDS     R0,R1,R0
   \   00000176   805D               LDRB     R0,[R0, R6]
   \   00000178   0128               CMP      R0,#+1
   \   0000017A   A2D1               BNE      ??TimetableExecute_12
   \   0000017C   78E7               B        ??TimetableExecute_10
    955                         {
    956                           if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    957                             {
    958                               Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
    959                             }else{  //je¿eli wêze³
    960                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
    961                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
    962                             }
    963                         }
    964                         Out[sc][tn]=0;
    965                         
    966                       }
    967                   
    968                   }
    969                   
    970                   
    971               }
    972               
    973            }
    974          }
   \                     ??TimetableExecute_2:
   \   0000017E   FEBC               POP      {R1-R7}
   \   00000180   01BC               POP      {R0}
   \   00000182   0047               BX       R0               ;; return
   \                     ??TimetableExecute_6:
   \   00000184   ........           DC32     DateTime + 3
   \   00000188   ........           DC32     DateTime + 4
   \   0000018C   ........           DC32     DateTime + 6
   \   00000190   ........           DC32     DateTime + 5
   \   00000194   ........           DC32     ??Out
   \   00000198   ........           DC32     Variables
   \   0000019C   A2030000           DC32     0x3a2
   \   000001A0   ........           DC32     MainStage
   \   000001A4   EB060000           DC32     0x6eb
   \   000001A8   ........           DC32     DateTime + 24
   \   000001AC   ........           DC32     ??Out + 32
   \   000001B0   24BC0000           DC32     0xbc24
   \   000001B4   ........           DC32     gProg
    975          
    976          
    977          

   \                                 In section Debug.txt, align 4, keep-with-next
    978          void ThermostatsTimeChartExecute(void)
    979          {
   \                     ThermostatsTimeChartExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    980            
    981            signed   short H_Tmp;
    982            signed   short L_Tmp;
    983            signed   short New_Temp;
    984            static  signed short LastTemp[ScreenNr];
    985              
    986            for (signed int sc=0; sc<ScreenNr; )
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   04E0               B        ??ThermostatsTimeChartExecute_0
    987            {
    988              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
    989                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
    990              {
    991                     //je¿eli ustawienie automatyczne temperatury
    992                     if (gProg.Screen[sc].Thermo.AutoOn) 
    993                     {                       
    994                          if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    995                              {
    996                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    997                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[1]; 
    998                              }else{
    999                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[1];
   1000                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
   1001                              }
   1002                          
   1003                         //je¿eli dzieñ wykresu pierwszego
   1004                         if (((gProg.Screen[sc].Thermo.Week>>(DateTime.DayOfWeek-1)) & 0x1)==1)       
   1005                         {
   1006          
   1007                           
   1008                              if (((gProg.Screen[sc].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
   1009                              {                 
   1010                                //ustaw wy¿sz¹ temperaturê
   1011                                  New_Temp=H_Tmp; 
   1012                              }else{
   1013                                //ustaw ni¿sz¹ temperaturê
   1014                                  New_Temp=L_Tmp;
   1015                              }
   1016                         }else{
   1017          
   1018                              if (((gProg.Screen[sc].Thermo.Chart[1]>>DateTime.Hour) & 0x1)==1)
   1019                              {                 
   1020                                //ustaw wy¿sz¹ temperaturê
   1021                                  New_Temp=H_Tmp; 
   1022                              }else{
   1023                                //ustaw ni¿sz¹ temperaturê
   1024                                  New_Temp=L_Tmp;
   1025                              }
   1026                         }
   1027                         if (LastTemp[sc]!=New_Temp)  
   1028                            {
   1029                                gProg.Screen[sc].Thermo.SetTemperature=New_Temp;
   1030                                LastTemp[sc]=gProg.Screen[sc].Thermo.SetTemperature;
   1031                            }
   1032                     }else{
   1033                        LastTemp[sc]=-9999;
   \                     ??ThermostatsTimeChartExecute_1:
   \   00000006   5000               LSLS     R0,R2,#+1
   \   00000008   2749               LDR      R1,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   0000000A   284B               LDR      R3,??ThermostatsTimeChartExecute_2+0x4  ;; 0xffffd8f1
   \   0000000C   0B52               STRH     R3,[R1, R0]
   1034                     }
   1035               }
   1036              sc++;
   \                     ??ThermostatsTimeChartExecute_3:
   \   0000000E   521C               ADDS     R2,R2,#+1
   \                     ??ThermostatsTimeChartExecute_0:
   \   00000010   082A               CMP      R2,#+8
   \   00000012   46DA               BGE      ??ThermostatsTimeChartExecute_4
   \   00000014   002A               CMP      R2,#+0
   \   00000016   03D1               BNE      ??ThermostatsTimeChartExecute_5
   \   00000018   2548               LDR      R0,??ThermostatsTimeChartExecute_2+0x8  ;; gProg + 48024
   \   0000001A   0078               LDRB     R0,[R0, #+0]
   \   0000001C   0828               CMP      R0,#+8
   \   0000001E   09D0               BEQ      ??ThermostatsTimeChartExecute_6
   \                     ??ThermostatsTimeChartExecute_5:
   \   00000020   002A               CMP      R2,#+0
   \   00000022   F4D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   00000024   2348               LDR      R0,??ThermostatsTimeChartExecute_2+0xC  ;; 0xbb98
   \   00000026   A021               MOVS     R1,#+160
   \   00000028   5143               MULS     R1,R2,R1
   \   0000002A   234B               LDR      R3,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000002C   5918               ADDS     R1,R3,R1
   \   0000002E   085C               LDRB     R0,[R1, R0]
   \   00000030   0528               CMP      R0,#+5
   \   00000032   ECD1               BNE      ??ThermostatsTimeChartExecute_3
   \                     ??ThermostatsTimeChartExecute_6:
   \   00000034   A020               MOVS     R0,#+160
   \   00000036   5043               MULS     R0,R2,R0
   \   00000038   1F49               LDR      R1,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000003A   0C18               ADDS     R4,R1,R0
   \   0000003C   1F48               LDR      R0,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc26
   \   0000003E   2318               ADDS     R3,R4,R0
   \   00000040   1878               LDRB     R0,[R3, #+0]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   DFD0               BEQ      ??ThermostatsTimeChartExecute_1
   \   00000046   0620               MOVS     R0,#+6
   \   00000048   185E               LDRSH    R0,[R3, R0]
   \   0000004A   0421               MOVS     R1,#+4
   \   0000004C   595E               LDRSH    R1,[R3, R1]
   \   0000004E   8842               CMP      R0,R1
   \   00000050   03DA               BGE      ??ThermostatsTimeChartExecute_7
   \   00000052   0800               MOVS     R0,R1
   \   00000054   0621               MOVS     R1,#+6
   \   00000056   595E               LDRSH    R1,[R3, R1]
   \   00000058   03E0               B        ??ThermostatsTimeChartExecute_8
   \                     ??ThermostatsTimeChartExecute_7:
   \   0000005A   0620               MOVS     R0,#+6
   \   0000005C   185E               LDRSH    R0,[R3, R0]
   \   0000005E   0421               MOVS     R1,#+4
   \   00000060   595E               LDRSH    R1,[R3, R1]
   \                     ??ThermostatsTimeChartExecute_8:
   \   00000062   174D               LDR      R5,??ThermostatsTimeChartExecute_2+0x18  ;; 0xbc30
   \   00000064   6419               ADDS     R4,R4,R5
   \   00000066   174E               LDR      R6,??ThermostatsTimeChartExecute_2+0x1C  ;; DateTime
   \   00000068   F578               LDRB     R5,[R6, #+3]
   \   0000006A   DF78               LDRB     R7,[R3, #+3]
   \   0000006C   B679               LDRB     R6,[R6, #+6]
   \   0000006E   761E               SUBS     R6,R6,#+1
   \   00000070   3741               ASRS     R7,R7,R6
   \   00000072   FE07               LSLS     R6,R7,#+31
   \   00000074   05D5               BPL      ??ThermostatsTimeChartExecute_9
   \   00000076   2468               LDR      R4,[R4, #+0]
   \   00000078   EC40               LSRS     R4,R4,R5
   \   0000007A   E407               LSLS     R4,R4,#+31
   \   0000007C   06D4               BMI      ??ThermostatsTimeChartExecute_10
   \   0000007E   0800               MOVS     R0,R1
   \   00000080   04E0               B        ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_9:
   \   00000082   6468               LDR      R4,[R4, #+4]
   \   00000084   EC40               LSRS     R4,R4,R5
   \   00000086   E407               LSLS     R4,R4,#+31
   \   00000088   00D4               BMI      ??ThermostatsTimeChartExecute_10
   \   0000008A   0800               MOVS     R0,R1
   \                     ??ThermostatsTimeChartExecute_10:
   \   0000008C   5100               LSLS     R1,R2,#+1
   \   0000008E   064C               LDR      R4,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   00000090   6118               ADDS     R1,R4,R1
   \   00000092   0024               MOVS     R4,#+0
   \   00000094   0C5F               LDRSH    R4,[R1, R4]
   \   00000096   8442               CMP      R4,R0
   \   00000098   B9D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   0000009A   1881               STRH     R0,[R3, #+8]
   \   0000009C   1889               LDRH     R0,[R3, #+8]
   \   0000009E   0880               STRH     R0,[R1, #+0]
   \   000000A0   B5E7               B        ??ThermostatsTimeChartExecute_3
   1037            }
   1038          }
   \                     ??ThermostatsTimeChartExecute_4:
   \   000000A2   F8BC               POP      {R3-R7}
   \   000000A4   01BC               POP      {R0}
   \   000000A6   0047               BX       R0               ;; return
   \                     ??ThermostatsTimeChartExecute_2:
   \   000000A8   ........           DC32     ??LastTemp
   \   000000AC   F1D8FFFF           DC32     0xffffd8f1
   \   000000B0   ........           DC32     gProg + 48024
   \   000000B4   98BB0000           DC32     0xbb98
   \   000000B8   ........           DC32     gProg
   \   000000BC   26BC0000           DC32     0xbc26
   \   000000C0   30BC0000           DC32     0xbc30
   \   000000C4   ........           DC32     DateTime

   \                                 In section .bss, align 4
   \                     ??LastTemp:
   \   00000000                      DS8 16
   1039          
   1040          
   1041           // int MainScreenTermo=ScreenSetTab_0_Nr;
   1042           // int SubScreenTermo=ScreenSetTab_1_Nr;
   1043            //int MainScreenTimetable=ScreenSetTab_0_Nr+1;
   1044            //int SubScreenTimetable=ScreenSetTab_1_Nr+1;

   \                                 In section Debug.txt, align 4, keep-with-next
   1045          void ThermostatsExecute(void)
   1046          {
   \                     ThermostatsExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   16E0               B        ??ThermostatsExecute_0
   1047            short  SensorNodeValue;
   1048           
   1049            static char Hysteresis[ScreenNr];
   1050            
   1051            for (char sc=0; sc<ScreenNr; sc++)
   1052            {
   1053              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
   1054                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
   1055              {
   1056                     SensorNodeValue=0;
   1057                     if (gProg.Screen[sc].Thermo.SensorNode<0) //je¿eli zmienna
   1058                     {
   1059                       SensorNodeValue=VariablesAnal[gProg.Screen[sc].Thermo.SensorReg];
   1060                     }else{
   1061                       SensorNodeValue=MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg];
   1062                     }
   1063                
   1064                     //zeruje stan wyjœcia je¿eli temperatura wy¿sza od za³o¿onej 
   1065                     if (SensorNodeValue>=gProg.Screen[sc].Thermo.SetTemperature)
   1066                     {
   1067                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   1068                       {
   1069                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] &= ~(1<<(gProg.Screen[sc].Thermo.ActorPort%8));
   1070                       }else{
   1071                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 0);  
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1072                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   1073                       }
   1074                       Hysteresis[sc]=ThermostatHysteresis; //ustawia histerezê
   1075                     }
   1076                     
   1077                     //ustawia na 1 stan wyjœcia je¿eli temperatura ni¿sza od za³o¿onej - histereza
   1078                     if (SensorNodeValue>0)
   1079                     if (SensorNodeValue<=gProg.Screen[sc].Thermo.SetTemperature-Hysteresis[sc])
   1080                     {
   1081                       Hysteresis[sc]=0;
   1082                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   \                     ??ThermostatsExecute_1:
   \   00000006   0122               MOVS     R2,#+1
   \   00000008   7178               LDRB     R1,[R6, #+1]
   \   0000000A   4E48               LDR      R0,??ThermostatsExecute_2  ;; 0x3a2
   \   0000000C   0023               MOVS     R3,#+0
   \   0000000E   F356               LDRSB    R3,[R6, R3]
   \   00000010   1625               MOVS     R5,#+22
   \   00000012   6B43               MULS     R3,R5,R3
   \   00000014   4C4D               LDR      R5,??ThermostatsExecute_2+0x4  ;; MainStage
   \   00000016   EB18               ADDS     R3,R5,R3
   \   00000018   1818               ADDS     R0,R3,R0
   1083                       {
   1084                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] |= 1<<(gProg.Screen[sc].Thermo.ActorPort%8);
   1085                       }else{
   1086                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 1);   
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000001A   ........           BL       PortStageSet
   1087                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   \   0000001E   4B48               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0x6eb
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   7156               LDRSB    R1,[R6, R1]
   \   00000024   484A               LDR      R2,??ThermostatsExecute_2+0x4  ;; MainStage
   \   00000026   5118               ADDS     R1,R2,R1
   \   00000028   494A               LDR      R2,??ThermostatsExecute_2+0xC  ;; DateTime + 24
   \   0000002A   1278               LDRB     R2,[R2, #+0]
   \   0000002C   0A54               STRB     R2,[R1, R0]
   1088                       }
   \                     ??ThermostatsExecute_3:
   \   0000002E   641C               ADDS     R4,R4,#+1
   \   00000030   2406               LSLS     R4,R4,#+24
   \   00000032   240E               LSRS     R4,R4,#+24
   \                     ??ThermostatsExecute_0:
   \   00000034   2000               MOVS     R0,R4
   \   00000036   0828               CMP      R0,#+8
   \   00000038   00D3               BCC      .+4
   \   0000003A   7FE0               B        ??ThermostatsExecute_4
   \   0000003C   2000               MOVS     R0,R4
   \   0000003E   08D1               BNE      ??ThermostatsExecute_5
   \   00000040   4448               LDR      R0,??ThermostatsExecute_2+0x10  ;; 0xbb98
   \   00000042   2100               MOVS     R1,R4
   \   00000044   A022               MOVS     R2,#+160
   \   00000046   5143               MULS     R1,R2,R1
   \   00000048   434A               LDR      R2,??ThermostatsExecute_2+0x14  ;; gProg
   \   0000004A   5118               ADDS     R1,R2,R1
   \   0000004C   085C               LDRB     R0,[R1, R0]
   \   0000004E   0828               CMP      R0,#+8
   \   00000050   0AD0               BEQ      ??ThermostatsExecute_6
   \                     ??ThermostatsExecute_5:
   \   00000052   2000               MOVS     R0,R4
   \   00000054   EBD0               BEQ      ??ThermostatsExecute_3
   \   00000056   3F48               LDR      R0,??ThermostatsExecute_2+0x10  ;; 0xbb98
   \   00000058   2100               MOVS     R1,R4
   \   0000005A   A022               MOVS     R2,#+160
   \   0000005C   5143               MULS     R1,R2,R1
   \   0000005E   3E4A               LDR      R2,??ThermostatsExecute_2+0x14  ;; gProg
   \   00000060   5118               ADDS     R1,R2,R1
   \   00000062   085C               LDRB     R0,[R1, R0]
   \   00000064   0528               CMP      R0,#+5
   \   00000066   E2D1               BNE      ??ThermostatsExecute_3
   \                     ??ThermostatsExecute_6:
   \   00000068   2500               MOVS     R5,R4
   \   0000006A   3C48               LDR      R0,??ThermostatsExecute_2+0x18  ;; 0xbc24
   \   0000006C   A021               MOVS     R1,#+160
   \   0000006E   6943               MULS     R1,R5,R1
   \   00000070   5118               ADDS     R1,R2,R1
   \   00000072   0E18               ADDS     R6,R1,R0
   \   00000074   0320               MOVS     R0,#+3
   \   00000076   3056               LDRSB    R0,[R6, R0]
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   04D5               BPL      ??ThermostatsExecute_7
   \   0000007C   3079               LDRB     R0,[R6, #+4]
   \   0000007E   4000               LSLS     R0,R0,#+1
   \   00000080   3749               LDR      R1,??ThermostatsExecute_2+0x1C  ;; VariablesAnal
   \   00000082   0F5E               LDRSH    R7,[R1, R0]
   \   00000084   08E0               B        ??ThermostatsExecute_8
   \                     ??ThermostatsExecute_7:
   \   00000086   A021               MOVS     R1,#+160
   \   00000088   3279               LDRB     R2,[R6, #+4]
   \   0000008A   5200               LSLS     R2,R2,#+1
   \   0000008C   1623               MOVS     R3,#+22
   \   0000008E   5843               MULS     R0,R3,R0
   \   00000090   2D4B               LDR      R3,??ThermostatsExecute_2+0x4  ;; MainStage
   \   00000092   1818               ADDS     R0,R3,R0
   \   00000094   8018               ADDS     R0,R0,R2
   \   00000096   475E               LDRSH    R7,[R0, R1]
   \                     ??ThermostatsExecute_8:
   \   00000098   0A20               MOVS     R0,#+10
   \   0000009A   305E               LDRSH    R0,[R6, R0]
   \   0000009C   8742               CMP      R7,R0
   \   0000009E   2DDB               BLT      ??ThermostatsExecute_9
   \   000000A0   0020               MOVS     R0,#+0
   \   000000A2   3056               LDRSB    R0,[R6, R0]
   \   000000A4   0028               CMP      R0,#+0
   \   000000A6   10D5               BPL      ??ThermostatsExecute_10
   \   000000A8   7078               LDRB     R0,[R6, #+1]
   \   000000AA   2E49               LDR      R1,??ThermostatsExecute_2+0x20  ;; Variables
   \   000000AC   0200               MOVS     R2,R0
   \   000000AE   D210               ASRS     R2,R2,#+3
   \   000000B0   8918               ADDS     R1,R1,R2
   \   000000B2   0A78               LDRB     R2,[R1, #+0]
   \   000000B4   9446               MOV      R12,R2
   \   000000B6   0122               MOVS     R2,#+1
   \   000000B8   0300               MOVS     R3,R0
   \   000000BA   DB08               LSRS     R3,R3,#+3
   \   000000BC   DB00               LSLS     R3,R3,#+3
   \   000000BE   C01A               SUBS     R0,R0,R3
   \   000000C0   8240               LSLS     R2,R2,R0
   \   000000C2   6046               MOV      R0,R12
   \   000000C4   9043               BICS     R0,R0,R2
   \   000000C6   0870               STRB     R0,[R1, #+0]
   \   000000C8   15E0               B        ??ThermostatsExecute_11
   \                     ??ThermostatsExecute_10:
   \   000000CA   0022               MOVS     R2,#+0
   \   000000CC   7178               LDRB     R1,[R6, #+1]
   \   000000CE   8C46               MOV      R12,R1
   \   000000D0   1C49               LDR      R1,??ThermostatsExecute_2  ;; 0x3a2
   \   000000D2   0020               MOVS     R0,#+0
   \   000000D4   3056               LDRSB    R0,[R6, R0]
   \   000000D6   1623               MOVS     R3,#+22
   \   000000D8   5843               MULS     R0,R3,R0
   \   000000DA   1B4B               LDR      R3,??ThermostatsExecute_2+0x4  ;; MainStage
   \   000000DC   1818               ADDS     R0,R3,R0
   \   000000DE   4018               ADDS     R0,R0,R1
   \   000000E0   6146               MOV      R1,R12
   \   000000E2   ........           BL       PortStageSet
   \   000000E6   1948               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0x6eb
   \   000000E8   0021               MOVS     R1,#+0
   \   000000EA   7156               LDRSB    R1,[R6, R1]
   \   000000EC   164A               LDR      R2,??ThermostatsExecute_2+0x4  ;; MainStage
   \   000000EE   5118               ADDS     R1,R2,R1
   \   000000F0   174A               LDR      R2,??ThermostatsExecute_2+0xC  ;; DateTime + 24
   \   000000F2   1278               LDRB     R2,[R2, #+0]
   \   000000F4   0A54               STRB     R2,[R1, R0]
   \                     ??ThermostatsExecute_11:
   \   000000F6   1C48               LDR      R0,??ThermostatsExecute_2+0x24  ;; ??Hysteresis
   \   000000F8   0221               MOVS     R1,#+2
   \   000000FA   4155               STRB     R1,[R0, R5]
   \                     ??ThermostatsExecute_9:
   \   000000FC   012F               CMP      R7,#+1
   \   000000FE   96DB               BLT      ??ThermostatsExecute_3
   \   00000100   1948               LDR      R0,??ThermostatsExecute_2+0x24  ;; ??Hysteresis
   \   00000102   4019               ADDS     R0,R0,R5
   \   00000104   0A21               MOVS     R1,#+10
   \   00000106   715E               LDRSH    R1,[R6, R1]
   \   00000108   0278               LDRB     R2,[R0, #+0]
   \   0000010A   891A               SUBS     R1,R1,R2
   \   0000010C   B942               CMP      R1,R7
   \   0000010E   8EDB               BLT      ??ThermostatsExecute_3
   \   00000110   0021               MOVS     R1,#+0
   \   00000112   0170               STRB     R1,[R0, #+0]
   \   00000114   0020               MOVS     R0,#+0
   \   00000116   3056               LDRSB    R0,[R6, R0]
   \   00000118   0028               CMP      R0,#+0
   \   0000011A   00D4               BMI      .+4
   \   0000011C   73E7               B        ??ThermostatsExecute_1
   \   0000011E   7078               LDRB     R0,[R6, #+1]
   \   00000120   1049               LDR      R1,??ThermostatsExecute_2+0x20  ;; Variables
   \   00000122   0200               MOVS     R2,R0
   \   00000124   D210               ASRS     R2,R2,#+3
   \   00000126   8918               ADDS     R1,R1,R2
   \   00000128   0A78               LDRB     R2,[R1, #+0]
   \   0000012A   0123               MOVS     R3,#+1
   \   0000012C   0500               MOVS     R5,R0
   \   0000012E   ED08               LSRS     R5,R5,#+3
   \   00000130   ED00               LSLS     R5,R5,#+3
   \   00000132   401B               SUBS     R0,R0,R5
   \   00000134   8340               LSLS     R3,R3,R0
   \   00000136   1343               ORRS     R3,R3,R2
   \   00000138   0B70               STRB     R3,[R1, #+0]
   \   0000013A   78E7               B        ??ThermostatsExecute_3
   1089                     }
   1090                     
   1091                     
   1092              }
   1093            }
   1094          }
   \                     ??ThermostatsExecute_4:
   \   0000013C   F8BC               POP      {R3-R7}
   \   0000013E   01BC               POP      {R0}
   \   00000140   0047               BX       R0               ;; return
   \   00000142   C046               Nop      
   \                     ??ThermostatsExecute_2:
   \   00000144   A2030000           DC32     0x3a2
   \   00000148   ........           DC32     MainStage
   \   0000014C   EB060000           DC32     0x6eb
   \   00000150   ........           DC32     DateTime + 24
   \   00000154   98BB0000           DC32     0xbb98
   \   00000158   ........           DC32     gProg
   \   0000015C   24BC0000           DC32     0xbc24
   \   00000160   ........           DC32     VariablesAnal
   \   00000164   ........           DC32     Variables
   \   00000168   ........           DC32     ??Hysteresis

   \                                 In section .bss, align 4
   \                     ??Hysteresis:
   \   00000000                      DS8 8
   1095          
   1096          
   1097          
   1098          char out[10]={1,1,1,1,1,1,1,1,1,1};

   \                                 In section Debug.txt, align 4, keep-with-next
   1099          void AlarmExecute(void)
   1100          {
   \                     AlarmExecute:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   2CE0               B        ??AlarmExecute_0
   1101          
   1102          static long long AlarmOnTime[ScreenNr];  //czas do odliczania dla alarmu
   1103          static long long AlarmOffTime[ScreenNr];
   1104            
   1105            for (char sc=0; sc<ScreenNr; sc++)
   1106            {
   1107              if ((((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenAlarm)) || 
   1108                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenAlarm))))
   1109              {
   1110                if (AlarmScreenAction[sc].Active) 
   1111                {
   1112                           //zeruje stan wyjœcia je¿eli zda¿enie od czujnika             
   1113                      if (PortStageRead(MainStage.StageI[gProg.Screen[sc].Alarm.SensorNode].Port, gProg.Screen[sc].Alarm.SensorPort)==0x1)  
   1114                           {
   1115                             if (AlarmOnTime[sc]==0) {AlarmOnTime[sc]=g_counter;}
   1116                             if ((g_counter>AlarmOnTime[sc]+AlarmTimeToActive*1000) && (out[sc]==0))
   1117                             {
   1118                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 0);
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1119                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1120                                AlarmOn=1; 
   1121                                out[sc]=1;
   1122                                AlarmOffTime[sc]=g_counter;
   1123                             }
   1124                             if ((AlarmOffTime>0) && (g_counter>AlarmOffTime[sc]+AlarmSirenTime*1000) && (out[sc]==1))
   1125                             {
   1126                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1); 
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1127                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1128                                AlarmOn=0; 
   1129                                out[sc]=1;
   1130                                AlarmOffTime[sc]=0;
   1131           
   1132                             }
   1133                             
   1134                            
   1135                             
   1136                           }
   1137                }else{
   1138                  if (out[sc]==1)
   \                     ??AlarmExecute_1:
   \   00000008   7748               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   0000000A   0719               ADDS     R7,R0,R4
   \   0000000C   387C               LDRB     R0,[R7, #+16]
   \   0000000E   0128               CMP      R0,#+1
   \   00000010   22D1               BNE      ??AlarmExecute_3
   1139                  {
   1140                      out[sc]=0;
   \   00000012   0020               MOVS     R0,#+0
   \   00000014   3874               STRB     R0,[R7, #+16]
   1141                      AlarmOnTime[sc]=0;
   \   00000016   E000               LSLS     R0,R4,#+3
   \   00000018   0A18               ADDS     R2,R1,R0
   \   0000001A   2032               ADDS     R2,R2,#+32
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   0100               MOVS     R1,R0
   \   00000020   03C2               STM      R2!,{R0,R1}
   1142                      AlarmOn=0; 
   \   00000022   724D               LDR      R5,??AlarmExecute_2+0x4  ;; DateTime
   \   00000024   E874               STRB     R0,[R5, #+19]
   1143                      PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1);
                                          ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000026   A020               MOVS     R0,#+160
   \   00000028   4443               MULS     R4,R0,R4
   \   0000002A   7148               LDR      R0,??AlarmExecute_2+0x8  ;; gProg
   \   0000002C   0019               ADDS     R0,R0,R4
   \   0000002E   7149               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   00000030   4618               ADDS     R6,R0,R1
   \   00000032   0122               MOVS     R2,#+1
   \   00000034   7178               LDRB     R1,[R6, #+1]
   \   00000036   7048               LDR      R0,??AlarmExecute_2+0x10  ;; 0x3a2
   \   00000038   0023               MOVS     R3,#+0
   \   0000003A   F356               LDRSB    R3,[R6, R3]
   \   0000003C   1624               MOVS     R4,#+22
   \   0000003E   6343               MULS     R3,R4,R3
   \   00000040   6E4C               LDR      R4,??AlarmExecute_2+0x14  ;; MainStage
   \   00000042   E318               ADDS     R3,R4,R3
   \   00000044   1818               ADDS     R0,R3,R0
   \   00000046   ........           BL       PortStageSet
   1144                      MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   \   0000004A   6D48               LDR      R0,??AlarmExecute_2+0x18  ;; 0x6eb
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   7156               LDRSB    R1,[R6, R1]
   \   00000050   6A4A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   00000052   5118               ADDS     R1,R2,R1
   \   00000054   2A7E               LDRB     R2,[R5, #+24]
   \   00000056   0A54               STRB     R2,[R1, R0]
   1145                  }
   1146                }
   \                     ??AlarmExecute_3:
   \   00000058   0098               LDR      R0,[SP, #+0]
   \   0000005A   401C               ADDS     R0,R0,#+1
   \   0000005C   0006               LSLS     R0,R0,#+24
   \   0000005E   000E               LSRS     R0,R0,#+24
   \   00000060   0090               STR      R0,[SP, #+0]
   \                     ??AlarmExecute_0:
   \   00000062   0098               LDR      R0,[SP, #+0]
   \   00000064   0006               LSLS     R0,R0,#+24
   \   00000066   000E               LSRS     R0,R0,#+24
   \   00000068   0828               CMP      R0,#+8
   \   0000006A   00D3               BCC      .+4
   \   0000006C   B9E0               B        ??AlarmExecute_4
   \   0000006E   0098               LDR      R0,[SP, #+0]
   \   00000070   0006               LSLS     R0,R0,#+24
   \   00000072   0AD1               BNE      ??AlarmExecute_5
   \   00000074   6348               LDR      R0,??AlarmExecute_2+0x1C  ;; 0xbb98
   \   00000076   0099               LDR      R1,[SP, #+0]
   \   00000078   0906               LSLS     R1,R1,#+24
   \   0000007A   090E               LSRS     R1,R1,#+24
   \   0000007C   A022               MOVS     R2,#+160
   \   0000007E   5143               MULS     R1,R2,R1
   \   00000080   5B4A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   00000082   5118               ADDS     R1,R2,R1
   \   00000084   085C               LDRB     R0,[R1, R0]
   \   00000086   0A28               CMP      R0,#+10
   \   00000088   0DD0               BEQ      ??AlarmExecute_6
   \                     ??AlarmExecute_5:
   \   0000008A   0098               LDR      R0,[SP, #+0]
   \   0000008C   0006               LSLS     R0,R0,#+24
   \   0000008E   E3D0               BEQ      ??AlarmExecute_3
   \   00000090   5C48               LDR      R0,??AlarmExecute_2+0x1C  ;; 0xbb98
   \   00000092   0099               LDR      R1,[SP, #+0]
   \   00000094   0906               LSLS     R1,R1,#+24
   \   00000096   090E               LSRS     R1,R1,#+24
   \   00000098   A022               MOVS     R2,#+160
   \   0000009A   5143               MULS     R1,R2,R1
   \   0000009C   544A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   0000009E   5118               ADDS     R1,R2,R1
   \   000000A0   085C               LDRB     R0,[R1, R0]
   \   000000A2   0728               CMP      R0,#+7
   \   000000A4   D8D1               BNE      ??AlarmExecute_3
   \                     ??AlarmExecute_6:
   \   000000A6   009C               LDR      R4,[SP, #+0]
   \   000000A8   2406               LSLS     R4,R4,#+24
   \   000000AA   240E               LSRS     R4,R4,#+24
   \   000000AC   6000               LSLS     R0,R4,#+1
   \   000000AE   4E49               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   000000B0   085C               LDRB     R0,[R1, R0]
   \   000000B2   0028               CMP      R0,#+0
   \   000000B4   A8D0               BEQ      ??AlarmExecute_1
   \   000000B6   A020               MOVS     R0,#+160
   \   000000B8   6043               MULS     R0,R4,R0
   \   000000BA   4D49               LDR      R1,??AlarmExecute_2+0x8  ;; gProg
   \   000000BC   0818               ADDS     R0,R1,R0
   \   000000BE   4D49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   000000C0   4618               ADDS     R6,R0,R1
   \   000000C2   F178               LDRB     R1,[R6, #+3]
   \   000000C4   0220               MOVS     R0,#+2
   \   000000C6   3056               LDRSB    R0,[R6, R0]
   \   000000C8   1622               MOVS     R2,#+22
   \   000000CA   5043               MULS     R0,R2,R0
   \   000000CC   4B4A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   000000CE   1018               ADDS     R0,R2,R0
   \   000000D0   A030               ADDS     R0,R0,#+160
   \   000000D2   0088               LDRH     R0,[R0, #+0]
   \   000000D4   0004               LSLS     R0,R0,#+16
   \   000000D6   0014               ASRS     R0,R0,#+16
   \   000000D8   ........           BL       PortStageRead
   \   000000DC   0128               CMP      R0,#+1
   \   000000DE   BBD1               BNE      ??AlarmExecute_3
   \   000000E0   E000               LSLS     R0,R4,#+3
   \   000000E2   4149               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   000000E4   0818               ADDS     R0,R1,R0
   \   000000E6   0190               STR      R0,[SP, #+4]
   \   000000E8   2030               ADDS     R0,R0,#+32
   \   000000EA   03C8               LDM      R0!,{R0,R1}
   \   000000EC   0029               CMP      R1,#+0
   \   000000EE   06D1               BNE      ??AlarmExecute_7
   \   000000F0   0028               CMP      R0,#+0
   \   000000F2   04D1               BNE      ??AlarmExecute_7
   \   000000F4   019A               LDR      R2,[SP, #+4]
   \   000000F6   2032               ADDS     R2,R2,#+32
   \   000000F8   4348               LDR      R0,??AlarmExecute_2+0x20  ;; DateTime + 48
   \   000000FA   03C8               LDM      R0!,{R0,R1}
   \   000000FC   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_7:
   \   000000FE   3B4D               LDR      R5,??AlarmExecute_2+0x4  ;; DateTime
   \   00000100   0198               LDR      R0,[SP, #+4]
   \   00000102   2030               ADDS     R0,R0,#+32
   \   00000104   03C8               LDM      R0!,{R0,R1}
   \   00000106   0200               MOVS     R2,R0
   \   00000108   0B00               MOVS     R3,R1
   \   0000010A   4048               LDR      R0,??AlarmExecute_2+0x24  ;; 0xea60
   \   0000010C   0021               MOVS     R1,#+0
   \   0000010E   8018               ADDS     R0,R0,R2
   \   00000110   5941               ADCS     R1,R1,R3
   \   00000112   0200               MOVS     R2,R0
   \   00000114   0B00               MOVS     R3,R1
   \   00000116   2800               MOVS     R0,R5
   \   00000118   3030               ADDS     R0,R0,#+48
   \   0000011A   03C8               LDM      R0!,{R0,R1}
   \   0000011C   8B42               CMP      R3,R1
   \   0000011E   24D8               BHI      ??AlarmExecute_8
   \   00000120   01D3               BCC      ??AlarmExecute_9
   \   00000122   8242               CMP      R2,R0
   \   00000124   21D2               BCS      ??AlarmExecute_8
   \                     ??AlarmExecute_9:
   \   00000126   3048               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000128   0719               ADDS     R7,R0,R4
   \   0000012A   387C               LDRB     R0,[R7, #+16]
   \   0000012C   0028               CMP      R0,#+0
   \   0000012E   1CD1               BNE      ??AlarmExecute_8
   \   00000130   0022               MOVS     R2,#+0
   \   00000132   7178               LDRB     R1,[R6, #+1]
   \   00000134   8C46               MOV      R12,R1
   \   00000136   3049               LDR      R1,??AlarmExecute_2+0x10  ;; 0x3a2
   \   00000138   3056               LDRSB    R0,[R6, R0]
   \   0000013A   1623               MOVS     R3,#+22
   \   0000013C   5843               MULS     R0,R3,R0
   \   0000013E   2F4B               LDR      R3,??AlarmExecute_2+0x14  ;; MainStage
   \   00000140   1818               ADDS     R0,R3,R0
   \   00000142   4018               ADDS     R0,R0,R1
   \   00000144   6146               MOV      R1,R12
   \   00000146   ........           BL       PortStageSet
   \   0000014A   2D48               LDR      R0,??AlarmExecute_2+0x18  ;; 0x6eb
   \   0000014C   0021               MOVS     R1,#+0
   \   0000014E   7156               LDRSB    R1,[R6, R1]
   \   00000150   2A4A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   00000152   5118               ADDS     R1,R2,R1
   \   00000154   2A7E               LDRB     R2,[R5, #+24]
   \   00000156   0A54               STRB     R2,[R1, R0]
   \   00000158   0120               MOVS     R0,#+1
   \   0000015A   E874               STRB     R0,[R5, #+19]
   \   0000015C   3874               STRB     R0,[R7, #+16]
   \   0000015E   019A               LDR      R2,[SP, #+4]
   \   00000160   6032               ADDS     R2,R2,#+96
   \   00000162   2800               MOVS     R0,R5
   \   00000164   3030               ADDS     R0,R0,#+48
   \   00000166   03C8               LDM      R0!,{R0,R1}
   \   00000168   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_8:
   \   0000016A   2948               LDR      R0,??AlarmExecute_2+0x28  ;; AlarmScreenAction + 96
   \   0000016C   0028               CMP      R0,#+0
   \   0000016E   00D1               BNE      .+4
   \   00000170   72E7               B        ??AlarmExecute_3
   \   00000172   019A               LDR      R2,[SP, #+4]
   \   00000174   106E               LDR      R0,[R2, #+96]
   \   00000176   516E               LDR      R1,[R2, #+100]
   \   00000178   0200               MOVS     R2,R0
   \   0000017A   0B00               MOVS     R3,R1
   \   0000017C   2548               LDR      R0,??AlarmExecute_2+0x2C  ;; 0x493e0
   \   0000017E   0021               MOVS     R1,#+0
   \   00000180   8018               ADDS     R0,R0,R2
   \   00000182   5941               ADCS     R1,R1,R3
   \   00000184   0200               MOVS     R2,R0
   \   00000186   0B00               MOVS     R3,R1
   \   00000188   2800               MOVS     R0,R5
   \   0000018A   3030               ADDS     R0,R0,#+48
   \   0000018C   03C8               LDM      R0!,{R0,R1}
   \   0000018E   8B42               CMP      R3,R1
   \   00000190   00D9               BLS      .+4
   \   00000192   61E7               B        ??AlarmExecute_3
   \   00000194   02D3               BCC      ??AlarmExecute_10
   \   00000196   8242               CMP      R2,R0
   \   00000198   00D3               BCC      .+4
   \   0000019A   5DE7               B        ??AlarmExecute_3
   \                     ??AlarmExecute_10:
   \   0000019C   1248               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   0000019E   0719               ADDS     R7,R0,R4
   \   000001A0   387C               LDRB     R0,[R7, #+16]
   \   000001A2   0128               CMP      R0,#+1
   \   000001A4   00D0               BEQ      .+4
   \   000001A6   57E7               B        ??AlarmExecute_3
   \   000001A8   0122               MOVS     R2,#+1
   \   000001AA   7178               LDRB     R1,[R6, #+1]
   \   000001AC   1248               LDR      R0,??AlarmExecute_2+0x10  ;; 0x3a2
   \   000001AE   0023               MOVS     R3,#+0
   \   000001B0   F356               LDRSB    R3,[R6, R3]
   \   000001B2   1624               MOVS     R4,#+22
   \   000001B4   6343               MULS     R3,R4,R3
   \   000001B6   114C               LDR      R4,??AlarmExecute_2+0x14  ;; MainStage
   \   000001B8   E318               ADDS     R3,R4,R3
   \   000001BA   1818               ADDS     R0,R3,R0
   \   000001BC   ........           BL       PortStageSet
   \   000001C0   0F48               LDR      R0,??AlarmExecute_2+0x18  ;; 0x6eb
   \   000001C2   0021               MOVS     R1,#+0
   \   000001C4   7156               LDRSB    R1,[R6, R1]
   \   000001C6   0D4A               LDR      R2,??AlarmExecute_2+0x14  ;; MainStage
   \   000001C8   5118               ADDS     R1,R2,R1
   \   000001CA   2A7E               LDRB     R2,[R5, #+24]
   \   000001CC   0A54               STRB     R2,[R1, R0]
   \   000001CE   0020               MOVS     R0,#+0
   \   000001D0   E874               STRB     R0,[R5, #+19]
   \   000001D2   0120               MOVS     R0,#+1
   \   000001D4   3874               STRB     R0,[R7, #+16]
   \   000001D6   019A               LDR      R2,[SP, #+4]
   \   000001D8   6032               ADDS     R2,R2,#+96
   \   000001DA   0020               MOVS     R0,#+0
   \   000001DC   0100               MOVS     R1,R0
   \   000001DE   03C2               STM      R2!,{R0,R1}
   \   000001E0   3AE7               B        ??AlarmExecute_3
   1147                     
   1148              }
   1149            }
   1150          }
   \                     ??AlarmExecute_4:
   \   000001E2   FEBC               POP      {R1-R7}
   \   000001E4   01BC               POP      {R0}
   \   000001E6   0047               BX       R0               ;; return
   \                     ??AlarmExecute_2:
   \   000001E8   ........           DC32     AlarmScreenAction
   \   000001EC   ........           DC32     DateTime
   \   000001F0   ........           DC32     gProg
   \   000001F4   24BC0000           DC32     0xbc24
   \   000001F8   A2030000           DC32     0x3a2
   \   000001FC   ........           DC32     MainStage
   \   00000200   EB060000           DC32     0x6eb
   \   00000204   98BB0000           DC32     0xbb98
   \   00000208   ........           DC32     DateTime + 48
   \   0000020C   60EA0000           DC32     0xea60
   \   00000210   ........           DC32     AlarmScreenAction + 96
   \   00000214   E0930400           DC32     0x493e0
   1151          
   1152          
   1153          
   1154          
   1155          
   1156          
   1157          
   1158          //-----------------------------------------------------------------------------
   1159          //! Nazwa funkcji :    Timer_1h  
   1160          //! Okres: 1 godzina
   1161          //-----------------------------------------------------------------------------
   1162          //  
   1163          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1164          void Timer_1h(void)                  
   1165          { 
   \                     Timer_1h:
   \   00000000   01B5               PUSH     {R0,LR}
   1166              ThermostatsTimeChartExecute();
   \   00000002   ........           BL       ThermostatsTimeChartExecute
   1167          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
   1168          
   1169          
   1170          
   1171          //-----------------------------------------------------------------------------
   1172          //! Nazwa funkcji :    Timer_1min  
   1173          //! Okres: 1min
   1174          //-----------------------------------------------------------------------------
   1175          //  
   1176          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1177          void Timer_1min(void)                  
   1178          { 
   \                     Timer_1min:
   \   00000000   01B5               PUSH     {R0,LR}
   1179             TimetableExecute();
   \   00000002   ........           BL       TimetableExecute
   1180             ThermostatsExecute();
   \   00000006   ........           BL       ThermostatsExecute
   1181             
   1182          }//_____________________________________________________________________________
   \   0000000A   08BC               POP      {R3}
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
   1183          
   1184          
   1185          
   1186          
   1187          
   1188          
   1189          //-----------------------------------------------------------------------------
   1190          //! Nazwa funkcji :    Timer_1s  
   1191          //! Okres: 1s
   1192          //! Funkcja obs³ugi przerwania USART 0
   1193          //-----------------------------------------------------------------------------
   1194          //  
   1195          //----------------------------------------------------------------------------- 

   \                                 In section .bss, align 4
   1196          int XY_Tab[11];
   \                     XY_Tab:
   \   00000000                      DS8 44
   1197          int LiczOds = 0;
   1198          #define x_offset 1
   1199          #define y_offset 6

   \                                 In section .bss, align 1
   1200          char display_cykl =0;
   \                     display_cykl:
   \   00000000                      DS8 1
   1201          int X_up_old =-1;
   1202          int Y_up_old =-1;
   1203          int X_down_old =-1;
   1204          int Y_down_old =-1;
   1205          char g_PC_Connected_timeout=5;
   1206          
   1207          
   1208          unsigned int CyklPerSekCount=0; 
   1209          unsigned int TransLoopTime=0;
   1210          unsigned int CyklPerSek=1;
   1211          int MenuLevel_old; //tmp
   1212           char FlagChangeTime=0;
   1213          
   1214          
   1215          

   \                                 In section Debug.txt, align 4, keep-with-next
   1216          void Timer_1s(void)                        //timer isr 
   1217          { 
   \                     Timer_1s:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   87B0               SUB      SP,SP,#+28
   1218           static char TryIndirect, TryIndirectSlow;   //zmienna s³u¿y do usuwania trybu indirect w przypadku braku nawi¹zania po³¹czenia w okreœlonym czasie
   1219             
   1220            
   1221            if ((AlarmOn) || (Speaker[1]==1)) 
   \   00000004   9C4C               LDR      R4,??Timer_1s_1  ;; DateTime
   \   00000006   E07C               LDRB     R0,[R4, #+19]
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   02D1               BNE      ??Timer_1s_2
   \   0000000C   607A               LDRB     R0,[R4, #+9]
   \   0000000E   0128               CMP      R0,#+1
   \   00000010   0DD1               BNE      ??Timer_1s_3
   1222            {
   1223                ButtonBipCounter=g_counter+500;
   \                     ??Timer_1s_2:
   \   00000012   9A4D               LDR      R5,??Timer_1s_1+0x4  ;; ButtonBipCounter
   \   00000014   2000               MOVS     R0,R4
   \   00000016   3030               ADDS     R0,R0,#+48
   \   00000018   0CC8               LDM      R0!,{R2,R3}
   \   0000001A   FA20               MOVS     R0,#+250
   \   0000001C   4000               LSLS     R0,R0,#+1        ;; #+500
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   8018               ADDS     R0,R0,R2
   \   00000022   5941               ADCS     R1,R1,R3
   \   00000024   03C5               STM      R5!,{R0,R1}
   1224                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000026   9648               LDR      R0,??Timer_1s_1+0x8  ;; 0xfffff430
   \   00000028   8021               MOVS     R1,#+128
   \   0000002A   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000002C   0160               STR      R1,[R0, #+0]
   1225            }
   1226          
   1227             g_seconds_counter++;
   \                     ??Timer_1s_3:
   \   0000002E   E06C               LDR      R0,[R4, #+76]
   \   00000030   401C               ADDS     R0,R0,#+1
   \   00000032   E064               STR      R0,[R4, #+76]
   1228          
   1229            
   1230            if (CyklPerSekCount>0)
   \   00000034   656E               LDR      R5,[R4, #+100]
   \   00000036   002D               CMP      R5,#+0
   \   00000038   07D0               BEQ      ??Timer_1s_4
   1231            {
   1232             TransLoopTime=(1000/CyklPerSekCount);     //czas obiegu programu w ms
   \   0000003A   FA20               MOVS     R0,#+250
   \   0000003C   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000003E   2900               MOVS     R1,R5
   \   00000040   ........           BL       __aeabi_uidivmod
   \   00000044   A066               STR      R0,[R4, #+104]
   1233             CyklPerSek=CyklPerSekCount;               //iloœæ cykli na sekunde
   \   00000046   E566               STR      R5,[R4, #+108]
   \   00000048   01E0               B        ??Timer_1s_5
   1234            }else{
   1235             TransLoopTime=0;
   \                     ??Timer_1s_4:
   \   0000004A   0020               MOVS     R0,#+0
   \   0000004C   A066               STR      R0,[R4, #+104]
   \                     ??Timer_1s_5:
   \   0000004E   0020               MOVS     R0,#+0
   \   00000050   6066               STR      R0,[R4, #+100]
   1236            }
   1237            CyklPerSekCount=0;
   1238          
   1239               
   1240            
   1241            int ChangeStageFlagTMP=CHANGE_STAGE_TIME*CyklPerSek;
   \   00000052   E06E               LDR      R0,[R4, #+108]
   \   00000054   4000               LSLS     R0,R0,#+1
   1242            if (ChangeStageFlagTMP>0xFF) ChangeStageFlagTMP=0xFF;
   \   00000056   FF28               CMP      R0,#+255
   \   00000058   00DD               BLE      ??Timer_1s_6
   \   0000005A   FF20               MOVS     R0,#+255
   1243            if (ChangeStageFlagTMP<10) ChangeStageFlagTMP=10;
   \                     ??Timer_1s_6:
   \   0000005C   0A28               CMP      R0,#+10
   \   0000005E   00DA               BGE      ??Timer_1s_7
   \   00000060   0A20               MOVS     R0,#+10
   1244             ChangeStageFlag=ChangeStageFlagTMP;
   \                     ??Timer_1s_7:
   \   00000062   2076               STRB     R0,[R4, #+24]
   1245            
   1246             //Wy³¹czanie podœwietlenia wyœwietlacza
   1247            
   1248            if (g_LightCouterLCD==0) 
   \   00000064   206D               LDR      R0,[R4, #+80]
   \   00000066   0028               CMP      R0,#+0
   \   00000068   04D1               BNE      ??Timer_1s_8
   1249            {
   1250              if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   0000006A   617B               LDRB     R1,[R4, #+13]
   \   0000006C   0029               CMP      R1,#+0
   \   0000006E   01D1               BNE      ??Timer_1s_8
   \   00000070   0121               MOVS     R1,#+1
   \   00000072   6173               STRB     R1,[R4, #+13]
   1251            }
   1252            if ((g_LightCouterLCD < LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_8:
   \   00000074   1428               CMP      R0,#+20
   \   00000076   04DA               BGE      ??Timer_1s_9
   \   00000078   217B               LDRB     R1,[R4, #+12]
   \   0000007A   0029               CMP      R1,#+0
   \   0000007C   01D1               BNE      ??Timer_1s_9
   1253            {
   1254                g_LightCouterLCD++;
   \   0000007E   401C               ADDS     R0,R0,#+1
   \   00000080   2065               STR      R0,[R4, #+80]
   1255                  
   1256            } 
   1257            
   1258            
   1259            if ((g_LightCouterLCD >= LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_9:
   \   00000082   206D               LDR      R0,[R4, #+80]
   \   00000084   1428               CMP      R0,#+20
   \   00000086   03DB               BLT      ??Timer_1s_10
   \   00000088   207B               LDRB     R0,[R4, #+12]
   \   0000008A   0028               CMP      R0,#+0
   \   0000008C   00D1               BNE      ??Timer_1s_10
   1260          
   1261            {
   1262             g_LightLCDEnable=0; 
   \   0000008E   6073               STRB     R0,[R4, #+13]
   1263            }
   1264          
   1265            
   1266            if ((DateTime.DayOfWeek)==0) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_10:
   \   00000090   A079               LDRB     R0,[R4, #+6]
   \   00000092   0028               CMP      R0,#+0
   \   00000094   01D1               BNE      ??Timer_1s_11
   \   00000096   0120               MOVS     R0,#+1
   \   00000098   A071               STRB     R0,[R4, #+6]
   1267            
   1268            if (DateTime.Second<59) {DateTime.Second++;} else {DateTime.Second=0; DateTime.Minute++;};
   \                     ??Timer_1s_11:
   \   0000009A   6079               LDRB     R0,[R4, #+5]
   \   0000009C   3B28               CMP      R0,#+59
   \   0000009E   02D2               BCS      ??Timer_1s_12
   \   000000A0   401C               ADDS     R0,R0,#+1
   \   000000A2   6071               STRB     R0,[R4, #+5]
   \   000000A4   04E0               B        ??Timer_1s_13
   \                     ??Timer_1s_12:
   \   000000A6   0020               MOVS     R0,#+0
   \   000000A8   6071               STRB     R0,[R4, #+5]
   \   000000AA   2079               LDRB     R0,[R4, #+4]
   \   000000AC   401C               ADDS     R0,R0,#+1
   \   000000AE   2071               STRB     R0,[R4, #+4]
   1269            if (DateTime.Minute>59) {
   \                     ??Timer_1s_13:
   \   000000B0   2079               LDRB     R0,[R4, #+4]
   \   000000B2   3C28               CMP      R0,#+60
   \   000000B4   33D3               BCC      ??Timer_1s_14
   1270                DateTime.Minute=0; 
   \   000000B6   0020               MOVS     R0,#+0
   \   000000B8   2071               STRB     R0,[R4, #+4]
   1271                DateTime.Hour++;
   \   000000BA   E078               LDRB     R0,[R4, #+3]
   \   000000BC   401C               ADDS     R0,R0,#+1
   \   000000BE   E070               STRB     R0,[R4, #+3]
   1272                   //zmiana czasu z zimowego na letni
   1273                 if ((DateTime.Mounth==3) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==2) && (DateTime.Second==0))
   \   000000C0   6178               LDRB     R1,[R4, #+1]
   \   000000C2   0329               CMP      R1,#+3
   \   000000C4   10D1               BNE      ??Timer_1s_15
   \   000000C6   A178               LDRB     R1,[R4, #+2]
   \   000000C8   1929               CMP      R1,#+25
   \   000000CA   0DD3               BCC      ??Timer_1s_15
   \   000000CC   A179               LDRB     R1,[R4, #+6]
   \   000000CE   0729               CMP      R1,#+7
   \   000000D0   0AD1               BNE      ??Timer_1s_15
   \   000000D2   0006               LSLS     R0,R0,#+24
   \   000000D4   000E               LSRS     R0,R0,#+24
   \   000000D6   0228               CMP      R0,#+2
   \   000000D8   06D1               BNE      ??Timer_1s_15
   \   000000DA   6079               LDRB     R0,[R4, #+5]
   \   000000DC   0028               CMP      R0,#+0
   \   000000DE   03D1               BNE      ??Timer_1s_15
   1274                 {
   1275                   DateTime.Hour=3;
   \   000000E0   0320               MOVS     R0,#+3
   \   000000E2   E070               STRB     R0,[R4, #+3]
   1276                   SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000E4   ........           BL       SetRTC_DateTime
   1277          
   1278                 }
   1279                 //zmiana czasu z letniego na zimowy
   1280                 if ((DateTime.Mounth==10) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==3) && (DateTime.Second==0))
   \                     ??Timer_1s_15:
   \   000000E8   6078               LDRB     R0,[R4, #+1]
   \   000000EA   0A28               CMP      R0,#+10
   \   000000EC   17D1               BNE      ??Timer_1s_14
   \   000000EE   A078               LDRB     R0,[R4, #+2]
   \   000000F0   1928               CMP      R0,#+25
   \   000000F2   14D3               BCC      ??Timer_1s_14
   \   000000F4   A079               LDRB     R0,[R4, #+6]
   \   000000F6   0728               CMP      R0,#+7
   \   000000F8   11D1               BNE      ??Timer_1s_14
   \   000000FA   E078               LDRB     R0,[R4, #+3]
   \   000000FC   0328               CMP      R0,#+3
   \   000000FE   0ED1               BNE      ??Timer_1s_14
   \   00000100   6079               LDRB     R0,[R4, #+5]
   \   00000102   0028               CMP      R0,#+0
   \   00000104   0BD1               BNE      ??Timer_1s_14
   1281                 {
   1282                   if (FlagChangeTime==0)
   \   00000106   E07E               LDRB     R0,[R4, #+27]
   \   00000108   0028               CMP      R0,#+0
   \   0000010A   06D1               BNE      ??Timer_1s_16
   1283                   {
   1284                      FlagChangeTime=1; 
   \   0000010C   0120               MOVS     R0,#+1
   \   0000010E   E076               STRB     R0,[R4, #+27]
   1285                      DateTime.Hour=2;
   \   00000110   0220               MOVS     R0,#+2
   \   00000112   E070               STRB     R0,[R4, #+3]
   1286                      SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   00000114   ........           BL       SetRTC_DateTime
   \   00000118   01E0               B        ??Timer_1s_14
   1287                   }else{
   1288                      FlagChangeTime=0; 
   \                     ??Timer_1s_16:
   \   0000011A   0020               MOVS     R0,#+0
   \   0000011C   E076               STRB     R0,[R4, #+27]
   1289                   }
   1290                 }
   1291            }
   1292            
   1293            if (DateTime.Hour>23)   {
   \                     ??Timer_1s_14:
   \   0000011E   E078               LDRB     R0,[R4, #+3]
   \   00000120   1828               CMP      R0,#+24
   \   00000122   07D3               BCC      ??Timer_1s_17
   1294              DateTime.Hour=0;     
   \   00000124   0020               MOVS     R0,#+0
   \   00000126   E070               STRB     R0,[R4, #+3]
   1295              DateTime.DayOfWeek++; DateTime.Day++;
   \   00000128   A079               LDRB     R0,[R4, #+6]
   \   0000012A   401C               ADDS     R0,R0,#+1
   \   0000012C   A071               STRB     R0,[R4, #+6]
   \   0000012E   A078               LDRB     R0,[R4, #+2]
   \   00000130   401C               ADDS     R0,R0,#+1
   \   00000132   A070               STRB     R0,[R4, #+2]
   1296          
   1297            }
   1298            
   1299            
   1300            switch (DateTime.Mounth)
   \                     ??Timer_1s_17:
   \   00000134   6578               LDRB     R5,[R4, #+1]
   \   00000136   2800               MOVS     R0,R5
   \   00000138   401E               SUBS     R0,R0,#+1
   \   0000013A   0B28               CMP      R0,#+11
   \   0000013C   38D8               BHI      ??Timer_1s_18
   \   0000013E   01A1               ADR      R1,??Timer_1s_0
   \   00000140   095C               LDRB     R1,[R1, R0]
   \   00000142   8F44               ADD      PC,PC,R1
   \                     ??Timer_1s_0:
   \   00000144   0A1A0A50           DC8      +10,+26,+10,+80
   \   00000148   0A500A0A           DC8      +10,+80,+10,+10
   \   0000014C   500A5058           DC8      +80,+10,+80,+88
   1301                  {
   1302                    case 1  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_19:
   \   00000150   A078               LDRB     R0,[R4, #+2]
   \   00000152   2028               CMP      R0,#+32
   \   00000154   2CD3               BCC      ??Timer_1s_18
   \                     ??Timer_1s_20:
   \   00000156   0120               MOVS     R0,#+1
   \   00000158   A070               STRB     R0,[R4, #+2]
   \   0000015A   6D1C               ADDS     R5,R5,#+1
   \   0000015C   6570               STRB     R5,[R4, #+1]
   \   0000015E   27E0               B        ??Timer_1s_18
   1303                    case 2  : if ((DateTime.Year%4 == 0) && (DateTime.Year%100 != 0) || (DateTime.Year%400 == 0))  //je¿eli rok przestêpny
   \                     ??Timer_1s_21:
   \   00000160   2678               LDRB     R6,[R4, #+0]
   \   00000162   3000               MOVS     R0,R6
   \   00000164   8008               LSRS     R0,R0,#+2
   \   00000166   8000               LSLS     R0,R0,#+2
   \   00000168   301A               SUBS     R0,R6,R0
   \   0000016A   05D1               BNE      ??Timer_1s_22
   \   0000016C   3000               MOVS     R0,R6
   \   0000016E   6421               MOVS     R1,#+100
   \   00000170   ........           BL       __aeabi_idivmod
   \   00000174   0029               CMP      R1,#+0
   \   00000176   06D1               BNE      ??Timer_1s_23
   \                     ??Timer_1s_22:
   \   00000178   3000               MOVS     R0,R6
   \   0000017A   C821               MOVS     R1,#+200
   \   0000017C   4900               LSLS     R1,R1,#+1        ;; #+400
   \   0000017E   ........           BL       __aeabi_idivmod
   \   00000182   0029               CMP      R1,#+0
   \   00000184   03D1               BNE      ??Timer_1s_24
   1304                                  {if (DateTime.Day>29) {DateTime.Day=1; DateTime.Mounth++;}     
   \                     ??Timer_1s_23:
   \   00000186   A078               LDRB     R0,[R4, #+2]
   \   00000188   1E28               CMP      R0,#+30
   \   0000018A   11D3               BCC      ??Timer_1s_18
   \   0000018C   E3E7               B        ??Timer_1s_20
   1305                                  }else{if (DateTime.Day>28) {DateTime.Day=1; DateTime.Mounth++;}
   \                     ??Timer_1s_24:
   \   0000018E   A078               LDRB     R0,[R4, #+2]
   \   00000190   1D28               CMP      R0,#+29
   \   00000192   0DD3               BCC      ??Timer_1s_18
   \   00000194   DFE7               B        ??Timer_1s_20
   1306                                  }
   1307                    break;
   1308                    case 3  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1309                    case 4  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_25:
   \   00000196   A078               LDRB     R0,[R4, #+2]
   \   00000198   1F28               CMP      R0,#+31
   \   0000019A   09D3               BCC      ??Timer_1s_18
   \   0000019C   DBE7               B        ??Timer_1s_20
   1310                    case 5  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1311                    case 6  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1312                    case 7  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1313                    case 8  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1314                    case 9  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1315                    case 10 : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1316                    case 11 : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1317                    case 12 : if (DateTime.Day>31) 
   \                     ??Timer_1s_26:
   \   0000019E   A078               LDRB     R0,[R4, #+2]
   \   000001A0   2028               CMP      R0,#+32
   \   000001A2   05D3               BCC      ??Timer_1s_18
   \   000001A4   0120               MOVS     R0,#+1
   \   000001A6   A070               STRB     R0,[R4, #+2]
   1318                    {
   1319                      DateTime.Day=1; DateTime.Mounth=1; DateTime.Year++;
   \   000001A8   6070               STRB     R0,[R4, #+1]
   \   000001AA   2078               LDRB     R0,[R4, #+0]
   \   000001AC   401C               ADDS     R0,R0,#+1
   \   000001AE   2070               STRB     R0,[R4, #+0]
   1320                    } break;
   1321                    
   1322            
   1323            
   1324            }  
   1325            if (DateTime.DayOfWeek>Sunday) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_18:
   \   000001B0   A079               LDRB     R0,[R4, #+6]
   \   000001B2   0828               CMP      R0,#+8
   \   000001B4   01D3               BCC      ??Timer_1s_27
   \   000001B6   0120               MOVS     R0,#+1
   \   000001B8   A071               STRB     R0,[R4, #+6]
   1326            
   1327          
   1328            
   1329            
   1330            
   1331          
   1332              
   1333            if (MenuLevel_old!=MenuLevel)
   \                     ??Timer_1s_27:
   \   000001BA   3248               LDR      R0,??Timer_1s_1+0xC  ;; MenuLevel
   \   000001BC   0068               LDR      R0,[R0, #+0]
   \   000001BE   216F               LDR      R1,[R4, #+112]
   \   000001C0   8142               CMP      R1,R0
   \   000001C2   00D0               BEQ      ??Timer_1s_28
   1334            {
   1335              MenuLevel_old=MenuLevel;    //na koniec usun¹c MenuLevel_old
   \   000001C4   2067               STR      R0,[R4, #+112]
   1336            }
   1337            
   1338             char czas_tmp[9];
   1339            
   1340            TimeToStr(DateTime.Hour, DateTime.Minute, DateTime.Second, czas_tmp);
   \                     ??Timer_1s_28:
   \   000001C6   04AB               ADD      R3,SP,#+16
   \   000001C8   6279               LDRB     R2,[R4, #+5]
   \   000001CA   2179               LDRB     R1,[R4, #+4]
   \   000001CC   E078               LDRB     R0,[R4, #+3]
   \   000001CE   ........           BL       TimeToStr
   1341            czas_tmp[8]=13;
   \   000001D2   04A8               ADD      R0,SP,#+16
   \   000001D4   0D21               MOVS     R1,#+13
   \   000001D6   0172               STRB     R1,[R0, #+8]
   1342          
   1343            
   1344            //zeruj wskaŸniki poprawnoœci po³aczeñ
   1345            if (g_US0_Connect_OK) g_US0_Connect_OK--;
   \   000001D8   2B48               LDR      R0,??Timer_1s_1+0x10  ;; g_US0_Connect_OK
   \   000001DA   0178               LDRB     R1,[R0, #+0]
   \   000001DC   0029               CMP      R1,#+0
   \   000001DE   01D0               BEQ      ??Timer_1s_29
   \   000001E0   491E               SUBS     R1,R1,#+1
   \   000001E2   0170               STRB     R1,[R0, #+0]
   1346            if (g_US1_Connect_OK) g_US1_Connect_OK--;
   \                     ??Timer_1s_29:
   \   000001E4   2948               LDR      R0,??Timer_1s_1+0x14  ;; g_US1_Connect_OK
   \   000001E6   0178               LDRB     R1,[R0, #+0]
   \   000001E8   0029               CMP      R1,#+0
   \   000001EA   01D0               BEQ      ??Timer_1s_30
   \   000001EC   491E               SUBS     R1,R1,#+1
   \   000001EE   0170               STRB     R1,[R0, #+0]
   1347            
   1348          
   1349            //synchronizacja RTC
   1350          if ((DateTime.Hour==2) && (DateTime.Minute==57) && (DateTime.Second==0)) GetDateTimeFromRTC(); 
   \                     ??Timer_1s_30:
   \   000001F0   E078               LDRB     R0,[R4, #+3]
   \   000001F2   0228               CMP      R0,#+2
   \   000001F4   07D1               BNE      ??Timer_1s_31
   \   000001F6   2079               LDRB     R0,[R4, #+4]
   \   000001F8   3928               CMP      R0,#+57
   \   000001FA   04D1               BNE      ??Timer_1s_31
   \   000001FC   6079               LDRB     R0,[R4, #+5]
   \   000001FE   0028               CMP      R0,#+0
   \   00000200   01D1               BNE      ??Timer_1s_31
   \   00000202   ........           BL       GetDateTimeFromRTC
   1351          //if (DateTime.Second=30) GetDateTimeFromRTC(); 
   1352          
   1353            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ 1min
   1354            static char CountMin=0;
   1355            if (CountMin<60)
   \                     ??Timer_1s_31:
   \   00000206   A07F               LDRB     R0,[R4, #+30]
   \   00000208   3C28               CMP      R0,#+60
   \   0000020A   02D2               BCS      ??Timer_1s_32
   1356            {
   1357              CountMin++; 
   \   0000020C   401C               ADDS     R0,R0,#+1
   \   0000020E   A077               STRB     R0,[R4, #+30]
   \   00000210   B5E0               B        ??Timer_1s_33
   1358            }else{
   1359              CountMin=0;
   \                     ??Timer_1s_32:
   \   00000212   0020               MOVS     R0,#+0
   \   00000214   A077               STRB     R0,[R4, #+30]
   \   00000216   1E48               LDR      R0,??Timer_1s_1+0x18  ;; TransQuality + 1
   \   00000218   0078               LDRB     R0,[R0, #+0]
   \   0000021A   0728               CMP      R0,#+7
   \   0000021C   03D2               BCS      ??Timer_1s_34
   1360            
   1361              if (TransQuality.SlowMensurIndex<7)
   1362              {
   1363                TransQuality.SlowMensurIndex++; 
   \   0000021E   1C49               LDR      R1,??Timer_1s_1+0x18  ;; TransQuality + 1
   \   00000220   401C               ADDS     R0,R0,#+1
   \   00000222   0870               STRB     R0,[R1, #+0]
   \   00000224   02E0               B        ??Timer_1s_35
   1364              }else{
   1365                TransQuality.SlowMensurIndex=0;
   \                     ??Timer_1s_34:
   \   00000226   1A48               LDR      R0,??Timer_1s_1+0x18  ;; TransQuality + 1
   \   00000228   0021               MOVS     R1,#+0
   \   0000022A   0170               STRB     R1,[R0, #+0]
   \                     ??Timer_1s_35:
   \   0000022C   0120               MOVS     R0,#+1
   \   0000022E   0BE0               B        ??Timer_1s_36
   1366              }
   1367              
   1368              for(char NN=1; NN<NumberNeurons; NN++)   TransQuality.SlowMensur[NN] &= ~(1<<TransQuality.SlowMensurIndex);
   \                     ??Timer_1s_37:
   \   00000230   184A               LDR      R2,??Timer_1s_1+0x1C  ;; TransQuality
   \   00000232   5118               ADDS     R1,R2,R1
   \   00000234   CA78               LDRB     R2,[R1, #+3]
   \   00000236   0123               MOVS     R3,#+1
   \   00000238   154D               LDR      R5,??Timer_1s_1+0x18  ;; TransQuality + 1
   \   0000023A   2D78               LDRB     R5,[R5, #+0]
   \   0000023C   AB40               LSLS     R3,R3,R5
   \   0000023E   9A43               BICS     R2,R2,R3
   \   00000240   CA70               STRB     R2,[R1, #+3]
   \   00000242   401C               ADDS     R0,R0,#+1
   \   00000244   0006               LSLS     R0,R0,#+24
   \   00000246   000E               LSRS     R0,R0,#+24
   \                     ??Timer_1s_36:
   \   00000248   0100               MOVS     R1,R0
   \   0000024A   2329               CMP      R1,#+35
   \   0000024C   F0D3               BCC      ??Timer_1s_37
   1369              
   1370              char TryIndirectTmp, TryIndirectSlowTmp;
   1371              
   1372              TryIndirectTmp=TryIndirect;
   \   0000024E   6846               MOV      R0,SP
   \   00000250   217F               LDRB     R1,[R4, #+28]
   \   00000252   0170               STRB     R1,[R0, #+0]
   1373              TryIndirectSlowTmp=TryIndirectSlow;
   \   00000254   617F               LDRB     R1,[R4, #+29]
   \   00000256   4170               STRB     R1,[R0, #+1]
   1374                
   1375                    //Sprawdzenie wiarygodnoœci wêz³ów na podstawie d³ugotrwa³ego pomiaru jakoœci
   1376                for (char NN=1; NN<NumberNeurons; NN++)
   \   00000258   0125               MOVS     R5,#+1
   \   0000025A   02E0               B        ??Timer_1s_38
   \                     ??Timer_1s_39:
   \   0000025C   6D1C               ADDS     R5,R5,#+1
   \   0000025E   2D06               LSLS     R5,R5,#+24
   \   00000260   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1s_38:
   \   00000262   2800               MOVS     R0,R5
   \   00000264   2328               CMP      R0,#+35
   \   00000266   00D3               BCC      .+4
   \   00000268   83E0               B        ??Timer_1s_40
   \   0000026A   0A49               LDR      R1,??Timer_1s_1+0x1C  ;; TransQuality
   \   0000026C   0818               ADDS     R0,R1,R0
   \   0000026E   8078               LDRB     R0,[R0, #+2]
   \   00000270   0028               CMP      R0,#+0
   \   00000272   F3D1               BNE      ??Timer_1s_39
   1377                {
   1378                  if (TransQuality.SlowMensur[NN-1]==0)
   1379                  {
   1380                      for (char NR=0; NR<NumberReg; NR++)
   \   00000274   0027               MOVS     R7,#+0
   \   00000276   26E0               B        ??Timer_1s_41
   \                     ??Timer_1s_1:
   \   00000278   ........           DC32     DateTime
   \   0000027C   ........           DC32     ButtonBipCounter
   \   00000280   30F4FFFF           DC32     0xfffff430
   \   00000284   ........           DC32     MenuLevel
   \   00000288   ........           DC32     g_US0_Connect_OK
   \   0000028C   ........           DC32     g_US1_Connect_OK
   \   00000290   ........           DC32     TransQuality + 1
   \   00000294   ........           DC32     TransQuality
   1381                      {
   1382                        MainStage.StageI[NN].Value[NR]=0x8AAA;
   1383                        
   1384                            if (ChangeingIdMode==0)
   1385                            {
   1386                                if (NeuronsList[NN-1].NeuronType==NodeRF)   //je¿eli wêze³ ze sta³¹ komunikacj¹
   1387                                {
   1388              
   1389                                      if (TryIndirect==0) //je¿eli rozkaz rozg³oœny nie dodany
   1390                                      {
   1391                                        if ((!NeuronsList[NN-1].ReadSuspend) && (!AT91C_IFLASH_MEM->Config.SlaveMode))      AddRfTask_SearchNodeTask(NN);                //Dodaj rozkaz do tablicy zadañ RF - kto ma dostêp do wêz³a. Rozkaz dodawany jest po perwszej minucie pracy sterownika. Je¿eli wêze³ zerwie po³¹czenie to dodawany jest po 8 minutach
   1392                                        TryIndirectTmp=1;
   1393                                      }else if (TryIndirect==1){ //je¿eli rozkaz rozg³oœny dodany ale nikt nie znalaz³ wêz³a
   1394                                        AddRfTask_RemoveSearchNodeTask(NN); 
   1395                                        TryIndirectTmp=2;
   1396                                      }
   1397                                    
   1398                                
   1399                                }
   1400                                else if (NeuronsList[NN-1].NeuronType==NodeRF_Period) //je¿eli wêze³ z komunikacja d³ugo okresow¹ 
   1401                                {
   1402                                    if (g_counter>360000)
   1403                                    {
   1404                                      if (TryIndirectSlow==0)  //je¿eli rozkaz rozg³oœny nie dodany
   1405                                      {
   1406                                        if ((TransQuality.SlowMensurIndex==0) && (!NeuronsList[NN-1].ReadSuspend) && (!AT91C_IFLASH_MEM->Config.SlaveMode))      AddRfTask_SearchNodeTask(NN);                //Dodaj rozkaz do tablicy zadañ RF - kto ma dostêp do wêz³a.  Rozkaz dodawany jest w ósmej minucie pracy sterownika. Je¿eli wêze³ zerwie po³¹czenie to dodawany jest po 8 minutach
   1407                                        TryIndirectSlowTmp=1;
   1408                                      }else if ((TryIndirectSlow==1) && (g_counter>720000)) { //je¿eli rozkaz rozg³oœny dodany ale nikt nie znalaz³ wêz³a w dodatkowym czasie
   \                     ??Timer_1s_42:
   \   00000298   0128               CMP      R0,#+1
   \   0000029A   11D1               BNE      ??Timer_1s_43
   \   0000029C   2000               MOVS     R0,R4
   \   0000029E   3030               ADDS     R0,R0,#+48
   \   000002A0   03C8               LDM      R0!,{R0,R1}
   \   000002A2   0200               MOVS     R2,R0
   \   000002A4   0B00               MOVS     R3,R1
   \   000002A6   A548               LDR      R0,??Timer_1s_44  ;; 0xafc81
   \   000002A8   0021               MOVS     R1,#+0
   \   000002AA   8B42               CMP      R3,R1
   \   000002AC   08D3               BCC      ??Timer_1s_43
   \   000002AE   01D8               BHI      ??Timer_1s_45
   \   000002B0   8242               CMP      R2,R0
   \   000002B2   05D3               BCC      ??Timer_1s_43
   1409                                        AddRfTask_RemoveSearchNodeTask(NN); 
   \                     ??Timer_1s_45:
   \   000002B4   2800               MOVS     R0,R5
   \   000002B6   ........           BL       AddRfTask_RemoveSearchNodeTask
   1410                                        TryIndirectSlowTmp=2;
   \   000002BA   6846               MOV      R0,SP
   \   000002BC   0221               MOVS     R1,#+2
   \   000002BE   4170               STRB     R1,[R0, #+1]
   1411                                      }
   \                     ??Timer_1s_43:
   \   000002C0   7F1C               ADDS     R7,R7,#+1
   \   000002C2   3F06               LSLS     R7,R7,#+24
   \   000002C4   3F0E               LSRS     R7,R7,#+24
   \                     ??Timer_1s_41:
   \   000002C6   3800               MOVS     R0,R7
   \   000002C8   0B28               CMP      R0,#+11
   \   000002CA   C7D2               BCS      ??Timer_1s_39
   \   000002CC   4000               LSLS     R0,R0,#+1
   \   000002CE   2900               MOVS     R1,R5
   \   000002D0   1622               MOVS     R2,#+22
   \   000002D2   5143               MULS     R1,R2,R1
   \   000002D4   9A4A               LDR      R2,??Timer_1s_44+0x4  ;; MainStage
   \   000002D6   5118               ADDS     R1,R2,R1
   \   000002D8   0818               ADDS     R0,R1,R0
   \   000002DA   A030               ADDS     R0,R0,#+160
   \   000002DC   9949               LDR      R1,??Timer_1s_44+0x8  ;; 0xffff8aaa
   \   000002DE   0180               STRH     R1,[R0, #+0]
   \   000002E0   207D               LDRB     R0,[R4, #+20]
   \   000002E2   0028               CMP      R0,#+0
   \   000002E4   ECD1               BNE      ??Timer_1s_43
   \   000002E6   9848               LDR      R0,??Timer_1s_44+0xC  ;; NeuronsList
   \   000002E8   2900               MOVS     R1,R5
   \   000002EA   0C22               MOVS     R2,#+12
   \   000002EC   5143               MULS     R1,R2,R1
   \   000002EE   4618               ADDS     R6,R0,R1
   \   000002F0   0C3E               SUBS     R6,R6,#+12
   \   000002F2   3078               LDRB     R0,[R6, #+0]
   \   000002F4   0328               CMP      R0,#+3
   \   000002F6   19D1               BNE      ??Timer_1s_46
   \   000002F8   207F               LDRB     R0,[R4, #+28]
   \   000002FA   0028               CMP      R0,#+0
   \   000002FC   0DD1               BNE      ??Timer_1s_47
   \   000002FE   307A               LDRB     R0,[R6, #+8]
   \   00000300   4007               LSLS     R0,R0,#+29
   \   00000302   06D4               BMI      ??Timer_1s_48
   \   00000304   9148               LDR      R0,??Timer_1s_44+0x10  ;; 0x13d7e8
   \   00000306   0078               LDRB     R0,[R0, #+0]
   \   00000308   0028               CMP      R0,#+0
   \   0000030A   02D1               BNE      ??Timer_1s_48
   \   0000030C   2800               MOVS     R0,R5
   \   0000030E   ........           BL       AddRfTask_SearchNodeTask
   \                     ??Timer_1s_48:
   \   00000312   6846               MOV      R0,SP
   \   00000314   0121               MOVS     R1,#+1
   \   00000316   0170               STRB     R1,[R0, #+0]
   \   00000318   D2E7               B        ??Timer_1s_43
   \                     ??Timer_1s_47:
   \   0000031A   0128               CMP      R0,#+1
   \   0000031C   D0D1               BNE      ??Timer_1s_43
   \   0000031E   2800               MOVS     R0,R5
   \   00000320   ........           BL       AddRfTask_RemoveSearchNodeTask
   \   00000324   6846               MOV      R0,SP
   \   00000326   0221               MOVS     R1,#+2
   \   00000328   0170               STRB     R1,[R0, #+0]
   \   0000032A   C9E7               B        ??Timer_1s_43
   \                     ??Timer_1s_46:
   \   0000032C   0528               CMP      R0,#+5
   \   0000032E   C7D1               BNE      ??Timer_1s_43
   \   00000330   2000               MOVS     R0,R4
   \   00000332   3030               ADDS     R0,R0,#+48
   \   00000334   03C8               LDM      R0!,{R0,R1}
   \   00000336   0200               MOVS     R2,R0
   \   00000338   0B00               MOVS     R3,R1
   \   0000033A   8548               LDR      R0,??Timer_1s_44+0x14  ;; 0x57e41
   \   0000033C   0021               MOVS     R1,#+0
   \   0000033E   8B42               CMP      R3,R1
   \   00000340   BED3               BCC      ??Timer_1s_43
   \   00000342   01D8               BHI      ??Timer_1s_49
   \   00000344   8242               CMP      R2,R0
   \   00000346   BBD3               BCC      ??Timer_1s_43
   \                     ??Timer_1s_49:
   \   00000348   607F               LDRB     R0,[R4, #+29]
   \   0000034A   0028               CMP      R0,#+0
   \   0000034C   A4D1               BNE      ??Timer_1s_42
   \   0000034E   8148               LDR      R0,??Timer_1s_44+0x18  ;; TransQuality + 1
   \   00000350   0078               LDRB     R0,[R0, #+0]
   \   00000352   0028               CMP      R0,#+0
   \   00000354   09D1               BNE      ??Timer_1s_50
   \   00000356   307A               LDRB     R0,[R6, #+8]
   \   00000358   4007               LSLS     R0,R0,#+29
   \   0000035A   06D4               BMI      ??Timer_1s_50
   \   0000035C   7B48               LDR      R0,??Timer_1s_44+0x10  ;; 0x13d7e8
   \   0000035E   0078               LDRB     R0,[R0, #+0]
   \   00000360   0028               CMP      R0,#+0
   \   00000362   02D1               BNE      ??Timer_1s_50
   \   00000364   2800               MOVS     R0,R5
   \   00000366   ........           BL       AddRfTask_SearchNodeTask
   \                     ??Timer_1s_50:
   \   0000036A   6846               MOV      R0,SP
   \   0000036C   0121               MOVS     R1,#+1
   \   0000036E   4170               STRB     R1,[R0, #+1]
   \   00000370   A6E7               B        ??Timer_1s_43
   1412                                    }
   1413                                }
   1414                            }
   1415               
   1416                      }
   1417                  }
   1418                }
   1419                
   1420            TryIndirect=TryIndirectTmp;
   \                     ??Timer_1s_40:
   \   00000372   6846               MOV      R0,SP
   \   00000374   0078               LDRB     R0,[R0, #+0]
   \   00000376   2077               STRB     R0,[R4, #+28]
   1421            TryIndirectSlow=TryIndirectSlowTmp;
   \   00000378   6846               MOV      R0,SP
   \   0000037A   4078               LDRB     R0,[R0, #+1]
   \   0000037C   6077               STRB     R0,[R4, #+29]
   1422                
   1423                
   1424            }
   1425          
   1426                               
   1427          
   1428            if (DateTime.Second==0) Timer_1min();
   \                     ??Timer_1s_33:
   \   0000037E   6079               LDRB     R0,[R4, #+5]
   \   00000380   0028               CMP      R0,#+0
   \   00000382   01D1               BNE      ??Timer_1s_51
   \   00000384   ........           BL       Timer_1min
   1429            if ((DateTime.Second==0) && (DateTime.Minute==0))  Timer_1h();
   \                     ??Timer_1s_51:
   \   00000388   6579               LDRB     R5,[R4, #+5]
   \   0000038A   002D               CMP      R5,#+0
   \   0000038C   04D1               BNE      ??Timer_1s_52
   \   0000038E   2079               LDRB     R0,[R4, #+4]
   \   00000390   0028               CMP      R0,#+0
   \   00000392   01D1               BNE      ??Timer_1s_52
   \   00000394   ........           BL       Timer_1h
   1430            if (DateTime.Second==0) TimetableExecute();
   \                     ??Timer_1s_52:
   \   00000398   002D               CMP      R5,#+0
   \   0000039A   01D1               BNE      ??Timer_1s_53
   \   0000039C   ........           BL       TimetableExecute
   1431               AlarmExecute();
   \                     ??Timer_1s_53:
   \   000003A0   ........           BL       AlarmExecute
   1432               
   1433               
   1434          
   1435             //sprawdzenie wy³adowania baterii i wyœwietlenie ostrzenia       
   1436              if ((DateTime.Hour==10) && (DateTime.Minute==0) && (DateTime.Second==0)   && (DateTime.DayOfWeek==Saturday))
   \   000003A4   E078               LDRB     R0,[R4, #+3]
   \   000003A6   0A28               CMP      R0,#+10
   \   000003A8   4DD1               BNE      ??Timer_1s_54
   \   000003AA   2079               LDRB     R0,[R4, #+4]
   \   000003AC   0028               CMP      R0,#+0
   \   000003AE   4AD1               BNE      ??Timer_1s_54
   \   000003B0   6079               LDRB     R0,[R4, #+5]
   \   000003B2   0028               CMP      R0,#+0
   \   000003B4   47D1               BNE      ??Timer_1s_54
   \   000003B6   A079               LDRB     R0,[R4, #+6]
   \   000003B8   0628               CMP      R0,#+6
   \   000003BA   44D1               BNE      ??Timer_1s_54
   1437              {
   1438             
   1439                 for (char i=0; i<NumberNeurons; i++)
   \   000003BC   0025               MOVS     R5,#+0
   \   000003BE   31E0               B        ??Timer_1s_55
   1440                 {
   1441                   if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1442                   {
   1443                      char txt[NodeLabelLethers+1];
   1444                      for (char k=0; k<NodeLabelLethers; k++) txt[k]=gProg.NodeLabel[i-1][k];
   \                     ??Timer_1s_56:
   \   000003C0   01AF               ADD      R7,SP,#+4
   \   000003C2   654E               LDR      R6,??Timer_1s_44+0x1C  ;; 0xc11a
   \   000003C4   B446               MOV      R12,R6
   \   000003C6   0A26               MOVS     R6,#+10
   \   000003C8   4E43               MULS     R6,R1,R6
   \   000003CA   644B               LDR      R3,??Timer_1s_44+0x20  ;; gProg
   \   000003CC   9B19               ADDS     R3,R3,R6
   \   000003CE   9B18               ADDS     R3,R3,R2
   \   000003D0   6646               MOV      R6,R12
   \   000003D2   9B5D               LDRB     R3,[R3, R6]
   \   000003D4   BB54               STRB     R3,[R7, R2]
   \   000003D6   401C               ADDS     R0,R0,#+1
   \   000003D8   0006               LSLS     R0,R0,#+24
   \   000003DA   000E               LSRS     R0,R0,#+24
   \                     ??Timer_1s_57:
   \   000003DC   0200               MOVS     R2,R0
   \   000003DE   0A2A               CMP      R2,#+10
   \   000003E0   EED3               BCC      ??Timer_1s_56
   1445                      txt[NodeLabelLethers]=0;
   \   000003E2   01A8               ADD      R0,SP,#+4
   \   000003E4   0021               MOVS     R1,#+0
   \   000003E6   8172               STRB     R1,[R0, #+10]
   1446          
   1447                      
   1448                      Message_Paint(2,"Wyladowana","bateria","   ","Wezel:", txt);         
   \   000003E8   5D4E               LDR      R6,??Timer_1s_44+0x24  ;; `?<Constant "Wyladowana">`
   \   000003EA   01A9               ADD      R1,SP,#+4
   \   000003EC   3000               MOVS     R0,R6
   \   000003EE   1430               ADDS     R0,R0,#+20
   \   000003F0   03B4               PUSH     {R0,R1}
   \   000003F2   5CA3               ADR      R3,??Timer_1s_44+0x28  ;; "   "
   \   000003F4   3200               MOVS     R2,R6
   \   000003F6   0C32               ADDS     R2,R2,#+12
   \   000003F8   3100               MOVS     R1,R6
   \   000003FA   0220               MOVS     R0,#+2
   \   000003FC   ........           BL       Message_Paint
   \   00000400   02B0               ADD      SP,SP,#+8
   1449          
   1450                      ButtonBipCounter=g_counter+8000;
   \   00000402   594E               LDR      R6,??Timer_1s_44+0x2C  ;; ButtonBipCounter
   \   00000404   2000               MOVS     R0,R4
   \   00000406   3030               ADDS     R0,R0,#+48
   \   00000408   0CC8               LDM      R0!,{R2,R3}
   \   0000040A   FA20               MOVS     R0,#+250
   \   0000040C   4001               LSLS     R0,R0,#+5        ;; #+8000
   \   0000040E   0021               MOVS     R1,#+0
   \   00000410   8018               ADDS     R0,R0,R2
   \   00000412   5941               ADCS     R1,R1,R3
   \   00000414   03C6               STM      R6!,{R0,R1}
   1451                      AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                        ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000416   5548               LDR      R0,??Timer_1s_44+0x30  ;; 0xfffff430
   \   00000418   8021               MOVS     R1,#+128
   \   0000041A   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000041C   0160               STR      R1,[R0, #+0]
   \                     ??Timer_1s_58:
   \   0000041E   6D1C               ADDS     R5,R5,#+1
   \   00000420   2D06               LSLS     R5,R5,#+24
   \   00000422   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1s_55:
   \   00000424   2800               MOVS     R0,R5
   \   00000426   2328               CMP      R0,#+35
   \   00000428   0DD2               BCS      ??Timer_1s_54
   \   0000042A   2900               MOVS     R1,R5
   \   0000042C   1620               MOVS     R0,#+22
   \   0000042E   4843               MULS     R0,R1,R0
   \   00000430   434A               LDR      R2,??Timer_1s_44+0x4  ;; MainStage
   \   00000432   1018               ADDS     R0,R2,R0
   \   00000434   A030               ADDS     R0,R0,#+160
   \   00000436   0088               LDRH     R0,[R0, #+0]
   \   00000438   0204               LSLS     R2,R0,#+16
   \   0000043A   F0D5               BPL      ??Timer_1s_58
   \   0000043C   4C4A               LDR      R2,??Timer_1s_44+0x34  ;; 0x8aaa
   \   0000043E   9042               CMP      R0,R2
   \   00000440   EDD0               BEQ      ??Timer_1s_58
   \   00000442   0020               MOVS     R0,#+0
   \   00000444   CAE7               B        ??Timer_1s_57
   1452                   }
   1453          
   1454                 } 
   1455                
   1456             }    
   1457              
   1458          
   1459             
   1460             
   1461             //wygaszacz ekranu
   1462             static char LCD_last_fill=100;
   1463             char WypMin;
   1464             if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))  
   \                     ??Timer_1s_54:
   \   00000446   A07B               LDRB     R0,[R4, #+14]
   \   00000448   0028               CMP      R0,#+0
   \   0000044A   07D0               BEQ      ??Timer_1s_59
   \   0000044C   08D0               BEQ      ??Timer_1s_60
   \   0000044E   E078               LDRB     R0,[R4, #+3]
   \   00000450   E17B               LDRB     R1,[R4, #+15]
   \   00000452   8842               CMP      R0,R1
   \   00000454   04D2               BCS      ??Timer_1s_60
   \   00000456   217C               LDRB     R1,[R4, #+16]
   \   00000458   8842               CMP      R0,R1
   \   0000045A   01D3               BCC      ??Timer_1s_60
   1465             {  
   1466                WypMin=WypMinJasnosci;   //wype³nienie bez wygaszacza
   \                     ??Timer_1s_59:
   \   0000045C   A07D               LDRB     R0,[R4, #+22]
   \   0000045E   00E0               B        ??Timer_1s_61
   1467             }else{
   1468                WypMin=4;    //wype³nienie przy wygaszaczu
   \                     ??Timer_1s_60:
   \   00000460   0420               MOVS     R0,#+4
   1469             }
   1470               if (gWypMinJasnosciTest)
   \                     ??Timer_1s_61:
   \   00000462   E17D               LDRB     R1,[R4, #+23]
   \   00000464   0029               CMP      R1,#+0
   \   00000466   09D0               BEQ      ??Timer_1s_62
   \   00000468   4248               LDR      R0,??Timer_1s_44+0x38  ;; 0xfffcc008
   \   0000046A   0121               MOVS     R1,#+1
   \   0000046C   0160               STR      R1,[R0, #+0]
   1471               {
   1472                  AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   1473                  Set_LCD_Light_PWM_Fill(WypMinJasnosci); 
                         ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   0000046E   A07D               LDRB     R0,[R4, #+22]
   \   00000470   ........           BL       Set_LCD_Light_PWM_Fill
   1474                  AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000474   4048               LDR      R0,??Timer_1s_44+0x3C  ;; 0xfffcc004
   \   00000476   0121               MOVS     R1,#+1
   \   00000478   0160               STR      R1,[R0, #+0]
   \   0000047A   25E0               B        ??Timer_1s_63
   1475               }
   1476               else if (g_LightLCDEnable==1)
   \                     ??Timer_1s_62:
   \   0000047C   E17F               LDRB     R1,[R4, #+31]
   \   0000047E   627B               LDRB     R2,[R4, #+13]
   \   00000480   012A               CMP      R2,#+1
   \   00000482   0ED1               BNE      ??Timer_1s_64
   1477               {
   1478                 if (LCD_last_fill!=WypMaxJasnosci)
   \   00000484   607D               LDRB     R0,[R4, #+21]
   \   00000486   8142               CMP      R1,R0
   \   00000488   1ED0               BEQ      ??Timer_1s_63
   \   0000048A   3A48               LDR      R0,??Timer_1s_44+0x38  ;; 0xfffcc008
   \   0000048C   0121               MOVS     R1,#+1
   \   0000048E   0160               STR      R1,[R0, #+0]
   1479                 {
   1480                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   1481                    Set_LCD_Light_PWM_Fill(WypMaxJasnosci);  //maksymalne wype³nienie
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   00000490   607D               LDRB     R0,[R4, #+21]
   \   00000492   ........           BL       Set_LCD_Light_PWM_Fill
   1482                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000496   3848               LDR      R0,??Timer_1s_44+0x3C  ;; 0xfffcc004
   \   00000498   0121               MOVS     R1,#+1
   \   0000049A   0160               STR      R1,[R0, #+0]
   1483                    LCD_last_fill=WypMaxJasnosci;
   \   0000049C   607D               LDRB     R0,[R4, #+21]
   \   0000049E   E077               STRB     R0,[R4, #+31]
   \   000004A0   12E0               B        ??Timer_1s_63
   1484                 }
   1485               }else {
   1486                 if (LCD_last_fill>WypMin)
   \                     ??Timer_1s_64:
   \   000004A2   8842               CMP      R0,R1
   \   000004A4   10D2               BCS      ??Timer_1s_63
   1487                 {
   1488                    if (LCD_last_fill>60) LCD_last_fill=61;
   \   000004A6   3D29               CMP      R1,#+61
   \   000004A8   01D3               BCC      ??Timer_1s_65
   \   000004AA   3D20               MOVS     R0,#+61
   \   000004AC   E077               STRB     R0,[R4, #+31]
   1489                    LCD_last_fill-=2;
   \                     ??Timer_1s_65:
   \   000004AE   E07F               LDRB     R0,[R4, #+31]
   \   000004B0   801E               SUBS     R0,R0,#+2
   \   000004B2   E077               STRB     R0,[R4, #+31]
   \   000004B4   2F49               LDR      R1,??Timer_1s_44+0x38  ;; 0xfffcc008
   \   000004B6   0122               MOVS     R2,#+1
   \   000004B8   0A60               STR      R2,[R1, #+0]
   1490                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   1491                    Set_LCD_Light_PWM_Fill(LCD_last_fill); 
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   000004BA   0006               LSLS     R0,R0,#+24
   \   000004BC   000E               LSRS     R0,R0,#+24
   \   000004BE   ........           BL       Set_LCD_Light_PWM_Fill
   1492                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   000004C2   2D48               LDR      R0,??Timer_1s_44+0x3C  ;; 0xfffcc004
   \   000004C4   0121               MOVS     R1,#+1
   \   000004C6   0160               STR      R1,[R0, #+0]
   1493                 }
   1494              }
   1495              
   1496              
   1497              if ((RF_Status.RfFuse>0) && (RF_Status.RfFuse<100)) RF_Status.RfFuse++;
   \                     ??Timer_1s_63:
   \   000004C8   2C4A               LDR      R2,??Timer_1s_44+0x40  ;; RF_Status
   \   000004CA   507C               LDRB     R0,[R2, #+17]
   \   000004CC   0028               CMP      R0,#+0
   \   000004CE   03D0               BEQ      ??Timer_1s_66
   \   000004D0   6428               CMP      R0,#+100
   \   000004D2   01D2               BCS      ??Timer_1s_66
   \   000004D4   401C               ADDS     R0,R0,#+1
   \   000004D6   5074               STRB     R0,[R2, #+17]
   1498             
   1499             
   1500             
   1501             //bezpiecznik przed zablokowaniem siê DMA USARTA lub WiFi 
   1502             if (NET.WiFi.On)
   \                     ??Timer_1s_66:
   \   000004D8   2948               LDR      R0,??Timer_1s_44+0x44  ;; NET + 80
   \   000004DA   0078               LDRB     R0,[R0, #+0]
   \   000004DC   0028               CMP      R0,#+0
   \   000004DE   04D1               BNE      ??Timer_1s_67
   1503             {
   1504               (FuseLastWiFiDataIn<g_counter-30000);   //zabezpieczenie przed blokad¹ DMA USART. FuseLastWiFiDataIn zawiera czas ostatniej odpowiedzi od usarta. Je¿eli WiFi jest w³¹czone a USART milczy od 30s to restartuj mikroprocesor
                      ^
Warning[Pe174]: expression has no effect
   1505             }else{
   1506                FuseLastWiFiDataIn=g_counter;
   \   000004E0   2000               MOVS     R0,R4
   \   000004E2   3030               ADDS     R0,R0,#+48
   \   000004E4   03C8               LDM      R0!,{R0,R1}
   \   000004E6   2064               STR      R0,[R4, #+64]
   \   000004E8   6164               STR      R1,[R4, #+68]
   1507             }
   1508             
   1509             
   1510             //wyczyszczenie po³¹czeñ mostowych z którymi nie mam kontaktu po up³yniêciu czasu MAX_TIME_TO_REM_BRIDGE_NO_CON
   1511              if (RF_Status.TimeToRemBridgeNoCom) 
   \                     ??Timer_1s_67:
   \   000004EA   907C               LDRB     R0,[R2, #+18]
   \   000004EC   0028               CMP      R0,#+0
   \   000004EE   20D0               BEQ      ??Timer_1s_68
   1512              {
   1513                if (RF_Status.TimeToRemBridgeNoCom==1)
   \   000004F0   0128               CMP      R0,#+1
   \   000004F2   1BD1               BNE      ??Timer_1s_69
   1514                {
   1515                          for (char ND=0; ND<NumberNeurons-1; ND++)
   \   000004F4   0021               MOVS     R1,#+0
   \   000004F6   16E0               B        ??Timer_1s_70
   1516                              {
   1517                                if ((NeuronsList[ND].Bridge) &&  (TransQuality.QuickMensur[ND]==0))
   \                     ??Timer_1s_71:
   \   000004F8   0B00               MOVS     R3,R1
   \   000004FA   1348               LDR      R0,??Timer_1s_44+0xC  ;; NeuronsList
   \   000004FC   0C24               MOVS     R4,#+12
   \   000004FE   5C43               MULS     R4,R3,R4
   \   00000500   0019               ADDS     R0,R0,R4
   \   00000502   047A               LDRB     R4,[R0, #+8]
   \   00000504   E406               LSLS     R4,R4,#+27
   \   00000506   0BD5               BPL      ??Timer_1s_72
   \   00000508   1E4C               LDR      R4,??Timer_1s_44+0x48  ;; TransQuality
   \   0000050A   E318               ADDS     R3,R4,R3
   \   0000050C   2633               ADDS     R3,R3,#+38
   \   0000050E   1B78               LDRB     R3,[R3, #+0]
   \   00000510   002B               CMP      R3,#+0
   \   00000512   05D1               BNE      ??Timer_1s_72
   1518                                {
   1519                                   NeuronsList[ND].NeuronType=0;
                                                                    ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000514   0370               STRB     R3,[R0, #+0]
   1520                                   NeuronsList[ND].NeuronID=0;
   \   00000516   4360               STR      R3,[R0, #+4]
   1521                                   NeuronsList[ND].Bridge=0;
   \   00000518   037A               LDRB     R3,[R0, #+8]
   \   0000051A   EF24               MOVS     R4,#+239
   \   0000051C   1C40               ANDS     R4,R4,R3
   \   0000051E   0472               STRB     R4,[R0, #+8]
   1522                                }
   1523                              }
   \                     ??Timer_1s_72:
   \   00000520   491C               ADDS     R1,R1,#+1
   \   00000522   0906               LSLS     R1,R1,#+24
   \   00000524   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_70:
   \   00000526   0800               MOVS     R0,R1
   \   00000528   2228               CMP      R0,#+34
   \   0000052A   E5D3               BCC      ??Timer_1s_71
   1524                }
   1525                RF_Status.TimeToRemBridgeNoCom--;
   \                     ??Timer_1s_69:
   \   0000052C   907C               LDRB     R0,[R2, #+18]
   \   0000052E   401E               SUBS     R0,R0,#+1
   \   00000530   9074               STRB     R0,[R2, #+18]
   1526              }
   1527          
   1528          }
   \                     ??Timer_1s_68:
   \   00000532   07B0               ADD      SP,SP,#+28
   \   00000534   F0BC               POP      {R4-R7}
   \   00000536   01BC               POP      {R0}
   \   00000538   0047               BX       R0               ;; return
   \   0000053A   C046               Nop      
   \                     ??Timer_1s_44:
   \   0000053C   81FC0A00           DC32     0xafc81
   \   00000540   ........           DC32     MainStage
   \   00000544   AA8AFFFF           DC32     0xffff8aaa
   \   00000548   ........           DC32     NeuronsList
   \   0000054C   E8D71300           DC32     0x13d7e8
   \   00000550   417E0500           DC32     0x57e41
   \   00000554   ........           DC32     TransQuality + 1
   \   00000558   1AC10000           DC32     0xc11a
   \   0000055C   ........           DC32     gProg
   \   00000560   ........           DC32     `?<Constant "Wyladowana">`
   \   00000564   20202000           DC8      "   "
   \   00000568   ........           DC32     ButtonBipCounter
   \   0000056C   30F4FFFF           DC32     0xfffff430
   \   00000570   AA8A0000           DC32     0x8aaa
   \   00000574   08C0FCFF           DC32     0xfffcc008
   \   00000578   04C0FCFF           DC32     0xfffcc004
   \   0000057C   ........           DC32     RF_Status
   \   00000580   ........           DC32     NET + 80
   \   00000584   ........           DC32     TransQuality
   1529          
   1530          
   1531          
   1532          
   1533          //-----------------------------------------------------------------------------
   1534          //! Nazwa funkcji :    Timer_10ms
   1535          //! Okres: 10ms
   1536          //! Timer zale¿ny od Timer_1ms
   1537          //-----------------------------------------------------------------------------
   1538          //  
   1539          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1540          void Timer_10ms(void)                      
   1541          { 
   \                     Timer_10ms:
   \   00000000   10B5               PUSH     {R4,LR}
   1542            unsigned int dummy = AT91C_BASE_TC0->TC_SR;                                   // Odczyt statusu  
   \   00000002   4248               LDR      R0,??Timer_10ms_0  ;; 0xfffa0020
   \   00000004   0068               LDR      R0,[R0, #+0]
   1543          
   1544           X_up=-1;
   \   00000006   424C               LDR      R4,??Timer_10ms_0+0x4  ;; DateTime
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   C043               MVNS     R0,R0            ;; #-1
   \   0000000C   E085               STRH     R0,[R4, #+46]
   1545           Y_up=-1;
   \   0000000E   A085               STRH     R0,[R4, #+44]
   1546          
   1547           X_down=-1;
   \   00000010   6085               STRH     R0,[R4, #+42]
   1548           Y_down=-1;
   \   00000012   2085               STRH     R0,[R4, #+40]
   1549          
   1550          
   1551            GetTouchPoint(&X_down, &Y_down, &X_up, &Y_up);
   \   00000014   2300               MOVS     R3,R4
   \   00000016   2C33               ADDS     R3,R3,#+44
   \   00000018   2200               MOVS     R2,R4
   \   0000001A   2E32               ADDS     R2,R2,#+46
   \   0000001C   2100               MOVS     R1,R4
   \   0000001E   2831               ADDS     R1,R1,#+40
   \   00000020   2000               MOVS     R0,R4
   \   00000022   2A30               ADDS     R0,R0,#+42
   \   00000024   ........           BL       GetTouchPoint
   1552          
   1553           
   1554             //Akcja przycisku up
   1555            if ((X_up>0)&&(Y_up>0)) 
   \   00000028   2E20               MOVS     R0,#+46
   \   0000002A   205E               LDRSH    R0,[R4, R0]
   \   0000002C   0128               CMP      R0,#+1
   \   0000002E   0CDB               BLT      ??Timer_10ms_1
   \   00000030   2C20               MOVS     R0,#+44
   \   00000032   205E               LDRSH    R0,[R4, R0]
   \   00000034   0128               CMP      R0,#+1
   \   00000036   08DB               BLT      ??Timer_10ms_1
   1556            {
   1557               ScreenEvent();
   \   00000038   ........           BL       ScreenEvent
   1558               g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   2065               STR      R0,[R4, #+80]
   1559               if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000040   607B               LDRB     R0,[R4, #+13]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   01D1               BNE      ??Timer_10ms_1
   \   00000046   0120               MOVS     R0,#+1
   \   00000048   6073               STRB     R0,[R4, #+13]
   1560            }
   1561            
   1562            if (LiczOds>=5) {
   \                     ??Timer_10ms_1:
   \   0000004A   206E               LDR      R0,[R4, #+96]
   \   0000004C   0528               CMP      R0,#+5
   \   0000004E   16DB               BLT      ??Timer_10ms_2
   1563            
   1564                      //Akcja przycisku down
   1565                if ((X_down>0)&&(Y_down>0) /*&& (g_LightLCDEnable==0)*/) 
   \   00000050   2A20               MOVS     R0,#+42
   \   00000052   205E               LDRSH    R0,[R4, R0]
   \   00000054   0128               CMP      R0,#+1
   \   00000056   09DB               BLT      ??Timer_10ms_3
   \   00000058   2820               MOVS     R0,#+40
   \   0000005A   205E               LDRSH    R0,[R4, R0]
   \   0000005C   0128               CMP      R0,#+1
   \   0000005E   05DB               BLT      ??Timer_10ms_3
   1566                {
   1567                   ScreenEvent();
   \   00000060   ........           BL       ScreenEvent
   1568                   g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000064   0020               MOVS     R0,#+0
   \   00000066   2065               STR      R0,[R4, #+80]
   1569                   g_LightLCDEnable=1;
   \   00000068   0120               MOVS     R0,#+1
   \   0000006A   6073               STRB     R0,[R4, #+13]
   1570                }  
   1571                
   1572                MenuRefresh(); 
   \                     ??Timer_10ms_3:
   \   0000006C   ........           BL       MenuRefresh
   1573          
   1574              
   1575          
   1576              
   1577              RepaintLCD();
   \   00000070   ........           BL       RepaintLCD
   1578              RepaintLCD();
   \   00000074   ........           BL       RepaintLCD
   1579          
   1580              
   1581              LiczOds=0;
   \   00000078   0020               MOVS     R0,#+0
   \   0000007A   2066               STR      R0,[R4, #+96]
   \   0000007C   01E0               B        ??Timer_10ms_4
   1582          
   1583            }
   1584            
   1585            else 
   1586            {
   1587              LiczOds++; 
   \                     ??Timer_10ms_2:
   \   0000007E   401C               ADDS     R0,R0,#+1
   \   00000080   2066               STR      R0,[R4, #+96]
   1588            }
   1589            
   1590              
   1591            
   1592            static int Spek2_Counter;
   1593            if (Spek2_Counter<202)Spek2_Counter++;
   \                     ??Timer_10ms_4:
   \   00000082   606F               LDR      R0,[R4, #+116]
   \   00000084   CA28               CMP      R0,#+202
   \   00000086   01DA               BGE      ??Timer_10ms_5
   \   00000088   401C               ADDS     R0,R0,#+1
   \   0000008A   6067               STR      R0,[R4, #+116]
   1594            if ((Speaker[2]==1) && (Spek2_Counter>150)) 
   \                     ??Timer_10ms_5:
   \   0000008C   A07A               LDRB     R0,[R4, #+10]
   \   0000008E   0128               CMP      R0,#+1
   \   00000090   10D1               BNE      ??Timer_10ms_6
   \   00000092   606F               LDR      R0,[R4, #+116]
   \   00000094   9728               CMP      R0,#+151
   \   00000096   0DDB               BLT      ??Timer_10ms_6
   1595            {
   1596                Spek2_Counter=0;
   \   00000098   0020               MOVS     R0,#+0
   \   0000009A   6067               STR      R0,[R4, #+116]
   1597                ButtonBipCounter=g_counter+150;
   \   0000009C   1D4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   0000009E   2000               MOVS     R0,R4
   \   000000A0   3030               ADDS     R0,R0,#+48
   \   000000A2   03C8               LDM      R0!,{R0,R1}
   \   000000A4   0023               MOVS     R3,#+0
   \   000000A6   9630               ADDS     R0,R0,#+150
   \   000000A8   5941               ADCS     R1,R1,R3
   \   000000AA   03C2               STM      R2!,{R0,R1}
   1598                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000AC   1A48               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000AE   8021               MOVS     R1,#+128
   \   000000B0   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000B2   0160               STR      R1,[R0, #+0]
   1599            }
   1600          
   1601            if ((Speaker[3]==1) && (Spek2_Counter==150)) 
   \                     ??Timer_10ms_6:
   \   000000B4   E07A               LDRB     R0,[R4, #+11]
   \   000000B6   0128               CMP      R0,#+1
   \   000000B8   0ED1               BNE      ??Timer_10ms_7
   \   000000BA   606F               LDR      R0,[R4, #+116]
   \   000000BC   9628               CMP      R0,#+150
   \   000000BE   0BD1               BNE      ??Timer_10ms_7
   1602            {
   1603                ButtonBipCounter=g_counter+100;
   \   000000C0   144A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000C2   2000               MOVS     R0,R4
   \   000000C4   3030               ADDS     R0,R0,#+48
   \   000000C6   03C8               LDM      R0!,{R0,R1}
   \   000000C8   0023               MOVS     R3,#+0
   \   000000CA   6430               ADDS     R0,R0,#+100
   \   000000CC   5941               ADCS     R1,R1,R3
   \   000000CE   03C2               STM      R2!,{R0,R1}
   1604                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000D0   1148               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000D2   8021               MOVS     R1,#+128
   \   000000D4   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000D6   0160               STR      R1,[R0, #+0]
   1605            }  
   1606            if ((Speaker[3]==1) && (Spek2_Counter>200)) 
   \                     ??Timer_10ms_7:
   \   000000D8   E07A               LDRB     R0,[R4, #+11]
   \   000000DA   0128               CMP      R0,#+1
   \   000000DC   0FD1               BNE      ??Timer_10ms_8
   \   000000DE   606F               LDR      R0,[R4, #+116]
   \   000000E0   C928               CMP      R0,#+201
   \   000000E2   0CDB               BLT      ??Timer_10ms_8
   1607            {
   1608                Spek2_Counter=0;
   \   000000E4   0020               MOVS     R0,#+0
   \   000000E6   6067               STR      R0,[R4, #+116]
   1609                ButtonBipCounter=g_counter+100;
   \   000000E8   0A4A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000EA   3034               ADDS     R4,R4,#+48
   \   000000EC   03CC               LDM      R4!,{R0,R1}
   \   000000EE   0023               MOVS     R3,#+0
   \   000000F0   6430               ADDS     R0,R0,#+100
   \   000000F2   5941               ADCS     R1,R1,R3
   \   000000F4   03C2               STM      R2!,{R0,R1}
   1610                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000F6   0848               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000F8   8021               MOVS     R1,#+128
   \   000000FA   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000FC   0160               STR      R1,[R0, #+0]
   1611            }    
   1612          
   1613           AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Timer_10ms_8:
   \   000000FE   0748               LDR      R0,??Timer_10ms_0+0x10  ;; 0xfffffd40
   \   00000100   ........           BL       AT91F_WDTRestart
   1614          
   1615          }
   \   00000104   10BC               POP      {R4}
   \   00000106   01BC               POP      {R0}
   \   00000108   0047               BX       R0               ;; return
   \   0000010A   C046               Nop      
   \                     ??Timer_10ms_0:
   \   0000010C   2000FAFF           DC32     0xfffa0020
   \   00000110   ........           DC32     DateTime
   \   00000114   ........           DC32     ButtonBipCounter
   \   00000118   30F4FFFF           DC32     0xfffff430
   \   0000011C   40FDFFFF           DC32     0xfffffd40
   1616          
   1617          
   1618          
   1619          

   \                                 In section Debug.txt, align 4, keep-with-next
   1620          void Timer_10ms_Setup(void) 
   1621          { 
   1622          
   1623          
   1624           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC0] = (unsigned int)Timer_10ms;  //set AIC             
   \                     Timer_10ms_Setup:
   \   00000000   1248               LDR      R0,??Timer_10ms_Setup_0  ;; 0xfffff0b0
   \   00000002   1349               LDR      R1,??Timer_10ms_Setup_0+0x4  ;; Timer_10ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1625           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC0] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10mS_PRIOR ); 
   \   00000006   1348               LDR      R0,??Timer_10ms_Setup_0+0x8  ;; 0xfffff030
   \   00000008   0321               MOVS     R1,#+3
   \   0000000A   0160               STR      R1,[R0, #+0]
   1626           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC0);      //enable clock 
   \   0000000C   8020               MOVS     R0,#+128
   \   0000000E   4001               LSLS     R0,R0,#+5        ;; #+4096
   \   00000010   1149               LDR      R1,??Timer_10ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000012   0860               STR      R0,[R1, #+0]
   1627           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1149               LDR      R1,??Timer_10ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0A60               STR      R2,[R1, #+0]
   1628           //no external clocks 
   1629           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1149               LDR      R1,??Timer_10ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1522               MOVS     R2,#+21
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1630           AT91C_BASE_TC0->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1049               LDR      R1,??Timer_10ms_Setup_0+0x18  ;; 0xfffa0000
   \   00000022   0522               MOVS     R2,#+5
   \   00000024   0A60               STR      R2,[R1, #+0]
   1631           AT91C_BASE_TC0->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV5_CLOCK;//CPC 
   \   00000026   1049               LDR      R1,??Timer_10ms_Setup_0+0x1C  ;; 0xfffa0004
   \   00000028   104A               LDR      R2,??Timer_10ms_Setup_0+0x20  ;; 0xcc004
   \   0000002A   0A60               STR      R2,[R1, #+0]
   1632            //! DIV5 - 1024
   1633           //! DIV4 - 128
   1634           //! DIV3 - 32
   1635           //! DIV2 - 8
   1636           //clock: MCK/1024  = 48054841/1024  =  46928 Hz 
   1637           //AT91C_BASE_TC0->TC_RC = 46928,55;    => 1 sec 
   1638                                   
   1639           AT91C_BASE_TC0->TC_RC = 469;                  //10ms 
   \   0000002C   1049               LDR      R1,??Timer_10ms_Setup_0+0x24  ;; 0xfffa001c
   \   0000002E   FF22               MOVS     R2,#+255
   \   00000030   D632               ADDS     R2,R2,#+214      ;; #+469
   \   00000032   0A60               STR      R2,[R1, #+0]
   1640           AT91C_BASE_TC0->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000034   0F49               LDR      R1,??Timer_10ms_Setup_0+0x28  ;; 0xfffa0024
   \   00000036   1022               MOVS     R2,#+16
   \   00000038   0A60               STR      R2,[R1, #+0]
   1641           AT91C_BASE_TC0->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   0000003A   0F49               LDR      R1,??Timer_10ms_Setup_0+0x2C  ;; 0xfffa0028
   \   0000003C   D243               MVNS     R2,R2            ;; #-17
   \   0000003E   0A60               STR      R2,[R1, #+0]
   1642           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC0);       //enable int 
   \   00000040   0E49               LDR      R1,??Timer_10ms_Setup_0+0x30  ;; 0xfffff120
   \   00000042   0860               STR      R0,[R1, #+0]
   1643           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC0);       //clear int 
   \   00000044   0E49               LDR      R1,??Timer_10ms_Setup_0+0x34  ;; 0xfffff128
   \   00000046   0860               STR      R0,[R1, #+0]
   1644            
   1645          
   1646          }//_____________________________________________________________________________
   \   00000048   7047               BX       LR               ;; return
   \   0000004A   C046               Nop      
   \                     ??Timer_10ms_Setup_0:
   \   0000004C   B0F0FFFF           DC32     0xfffff0b0
   \   00000050   ........           DC32     Timer_10ms
   \   00000054   30F0FFFF           DC32     0xfffff030
   \   00000058   10FCFFFF           DC32     0xfffffc10
   \   0000005C   C000FAFF           DC32     0xfffa00c0
   \   00000060   C400FAFF           DC32     0xfffa00c4
   \   00000064   0000FAFF           DC32     0xfffa0000
   \   00000068   0400FAFF           DC32     0xfffa0004
   \   0000006C   04C00C00           DC32     0xcc004
   \   00000070   1C00FAFF           DC32     0xfffa001c
   \   00000074   2400FAFF           DC32     0xfffa0024
   \   00000078   2800FAFF           DC32     0xfffa0028
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1647          
   1648          
   1649          
   1650          
   1651          
   1652          //-----------------------------------------------------------------------------
   1653          //! Nazwa funkcji :    Timer_1ms
   1654          //! Okres: 1ms
   1655          //! Funkcje:
   1656          //!         Funkcja obs³ugi przerwania USART 0  Czas 1 ms
   1657          //!         Triger Timer_10ms 
   1658          //-----------------------------------------------------------------------------
   1659          //  
   1660          //----------------------------------------------------------------------------- 
   1661          
   1662          

   \                                 In section .bss, align 4
   1663          int Counter=0;
   \                     Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1664          int US0_Counter=0;
   \                     US0_Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1665          int US1_Counter=0;
   \                     US1_Counter:
   \   00000000                      DS8 4
   1666          extern char SendModbusEnable;

   \                                 In section .bss, align 1
   1667          char CounterForTimer10ms=0;
   \                     CounterForTimer10ms:
   \   00000000                      DS8 1
   1668          short int CurTimeQual=0;
   1669          

   \                                 In section Debug.txt, align 4, keep-with-next
   1670          void Timer_1ms(void)                        //timer isr 
   1671          { 
   \                     Timer_1ms:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1672            unsigned int dummy2 = AT91C_BASE_TC2->TC_SR;  
   \   00000002   7A48               LDR      R0,??Timer_1ms_0  ;; 0xfffa00a0
   \   00000004   0068               LDR      R0,[R0, #+0]
   1673            
   1674            g_counter++;
   \   00000006   7A4D               LDR      R5,??Timer_1ms_0+0x4  ;; DateTime
   \   00000008   2800               MOVS     R0,R5
   \   0000000A   3030               ADDS     R0,R0,#+48
   \   0000000C   03C8               LDM      R0!,{R0,R1}
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   5141               ADCS     R1,R1,R2
   \   00000014   2A00               MOVS     R2,R5
   \   00000016   3032               ADDS     R2,R2,#+48
   \   00000018   03C2               STM      R2!,{R0,R1}
   1675          
   1676            
   1677          
   1678            
   1679            
   1680            /*
   1681            
   1682          
   1683          
   1684            
   1685            //obs³uga US0
   1686            if (US0_MasterMODBUS_ENABLE)
   1687            {
   1688            if (US0_Counter>g_US0_Comm_MinCykle) 
   1689            {
   1690              
   1691                if (g_Ans_ZD_MODBUS_0 == g_US0_Comm_TIMEOUT)
   1692                {
   1693                    ZD_MODBUS_0[g_Current_ZD_MODBUS_0].Error ++;
   1694                }
   1695              
   1696                
   1697                if (g_Ans_ZD_MODBUS_0 >= g_US0_Comm_TIMEOUT)
   1698                {
   1699          
   1700                    //AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
   1701             
   1702                    g_Ans_ZD_MODBUS_0=0;
   1703                    SendModbusEnable=0;
   1704                  //  ModBus_MASTER_TX(0);
   1705                    
   1706                    US0_Counter=0;
   1707                }
   1708                else
   1709                {
   1710                    g_Ans_ZD_MODBUS_0++;
   1711          
   1712                }
   1713              
   1714            }
   1715            else
   1716            {
   1717              US0_Counter++; 
   1718            }
   1719            }
   1720            
   1721          
   1722          
   1723            if (US1_MasterMODBUS_ENABLE)
   1724            {
   1725            if (US1_Counter>g_US0_Comm_MinCykle) 
   1726            {
   1727              
   1728                if (g_Ans_ZD_MODBUS_1 == g_US1_Comm_TIMEOUT)
   1729                {
   1730                    ZD_MODBUS_1[g_Current_ZD_MODBUS_1].Error ++;
   1731                }
   1732                
   1733                if (g_Ans_ZD_MODBUS_1 >= g_US1_Comm_TIMEOUT)
   1734                {
   1735             
   1736                    g_Ans_ZD_MODBUS_1=0;
   1737                    ModBus_MASTER_TX(1);
   1738                    
   1739                    US0_Counter=1;
   1740                }
   1741                else
   1742                {
   1743                    g_Ans_ZD_MODBUS_1++;
   1744          
   1745                }
   1746              
   1747            }
   1748            else
   1749            {
   1750              US1_Counter++; 
   1751            }
   1752            }
   1753          */
   1754            
   1755            
   1756          
   1757          if (ButtonBipCounter<g_counter) AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                                            ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000001A   764A               LDR      R2,??Timer_1ms_0+0x8  ;; ButtonBipCounter
   \   0000001C   0CCA               LDM      R2!,{R2,R3}
   \   0000001E   8B42               CMP      R3,R1
   \   00000020   06D8               BHI      ??Timer_1ms_1
   \   00000022   01D3               BCC      ??Timer_1ms_2
   \   00000024   8242               CMP      R2,R0
   \   00000026   03D2               BCS      ??Timer_1ms_1
   \                     ??Timer_1ms_2:
   \   00000028   7348               LDR      R0,??Timer_1ms_0+0xC  ;; 0xfffff434
   \   0000002A   8021               MOVS     R1,#+128
   \   0000002C   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000002E   0160               STR      R1,[R0, #+0]
   1758          
   1759            
   1760            
   1761            static int RF_SlaveCounter;
   1762          
   1763            
   1764            
   1765          //TimeOut RF -----
   1766           
   1767            
   1768          if (RF_Status.AllReady)
   \                     ??Timer_1ms_1:
   \   00000030   724C               LDR      R4,??Timer_1ms_0+0x10  ;; RF_Status
   \   00000032   207C               LDRB     R0,[R4, #+16]
   \   00000034   0028               CMP      R0,#+0
   \   00000036   00D1               BNE      .+4
   \   00000038   90E0               B        ??Timer_1ms_3
   1769          {
   1770            
   1771            //Prze³¹czanie w tryb Master + zabezpieczenie przed utkniêciem w trybie slave na d³u¿ej ni¿ 400ms;
   1772            if (SlaveMode)                                        
   \   0000003A   687E               LDRB     R0,[R5, #+25]
   \   0000003C   0028               CMP      R0,#+0
   \   0000003E   1ED0               BEQ      ??Timer_1ms_4
   1773            {
   1774              if (RF_Status.SlaveModeTimeout>0) RF_Status.SlaveModeTimeout--;
   \   00000040   E07C               LDRB     R0,[R4, #+19]
   \   00000042   0028               CMP      R0,#+0
   \   00000044   01D0               BEQ      ??Timer_1ms_5
   \   00000046   401E               SUBS     R0,R0,#+1
   \   00000048   E074               STRB     R0,[R4, #+19]
   1775              if (RF_Status.TimeInSlaveMode<MAX_TIME_FOR_SLAVE_ASK+100) {RF_Status.TimeInSlaveMode++;}else {RF_Status.SlaveModeTimeout=0;}
   \                     ??Timer_1ms_5:
   \   0000004A   E08A               LDRH     R0,[R4, #+22]
   \   0000004C   E121               MOVS     R1,#+225
   \   0000004E   4900               LSLS     R1,R1,#+1        ;; #+450
   \   00000050   8842               CMP      R0,R1
   \   00000052   02D2               BCS      ??Timer_1ms_6
   \   00000054   401C               ADDS     R0,R0,#+1
   \   00000056   E082               STRH     R0,[R4, #+22]
   \   00000058   01E0               B        ??Timer_1ms_7
   \                     ??Timer_1ms_6:
   \   0000005A   0020               MOVS     R0,#+0
   \   0000005C   E074               STRB     R0,[R4, #+19]
   1776              if (RF_Status.SlaveModeTimeout==0) 
   \                     ??Timer_1ms_7:
   \   0000005E   E07C               LDRB     R0,[R4, #+19]
   \   00000060   0028               CMP      R0,#+0
   \   00000062   02D1               BNE      ??Timer_1ms_8
   1777              {
   1778                SwitchToMaster();
   \   00000064   ........           BL       SwitchToMaster
   \   00000068   0EE0               B        ??Timer_1ms_9
   1779              }else{
   1780                if ((RF_Status.EnRx==0) && (RF_Status.InitRx==0))
   \                     ??Timer_1ms_8:
   \   0000006A   6078               LDRB     R0,[R4, #+1]
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   0BD1               BNE      ??Timer_1ms_9
   \   00000070   2079               LDRB     R0,[R4, #+4]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   08D1               BNE      ??Timer_1ms_9
   1781                {
   1782                  RF_Status.EnableRX();
   \   00000076   A06A               LDR      R0,[R4, #+40]
   \   00000078   ........           BL       __iar_via_R0
   \   0000007C   04E0               B        ??Timer_1ms_9
   1783                }
   1784              }
   1785            }else{
   1786              if (RF_Status.TimeInMasterMode<0xFF) RF_Status.TimeInMasterMode++;
   \                     ??Timer_1ms_4:
   \   0000007E   A08A               LDRH     R0,[R4, #+20]
   \   00000080   FF28               CMP      R0,#+255
   \   00000082   01D2               BCS      ??Timer_1ms_9
   \   00000084   401C               ADDS     R0,R0,#+1
   \   00000086   A082               STRH     R0,[R4, #+20]
   1787              
   1788            }
   1789                   
   1790            
   1791            static char PraboblySlaveConstChanel=0xFF;   //prawdopodobny kana³ slave (by³a wczeœniej na nim komunikacja) 0xff - brak kana³u
   1792            
   1793            if (RF_Status.MasterMode)
   \                     ??Timer_1ms_9:
   \   00000088   607B               LDRB     R0,[R4, #+13]
   \   0000008A   0028               CMP      R0,#+0
   \   0000008C   0FD0               BEQ      ??Timer_1ms_10
   1794            {
   1795              if ((!SlaveMode) && (g_Stop_Program==0))
   \   0000008E   687E               LDRB     R0,[R5, #+25]
   \   00000090   697C               LDRB     R1,[R5, #+17]
   \   00000092   0143               ORRS     R1,R1,R0
   \   00000094   62D1               BNE      ??Timer_1ms_3
   1796              if (g_RF_TimeOutCounter>0)
   \   00000096   5A48               LDR      R0,??Timer_1ms_0+0x14  ;; g_RF_TimeOutCounter
   \   00000098   0178               LDRB     R1,[R0, #+0]
   \   0000009A   0029               CMP      R1,#+0
   \   0000009C   02D0               BEQ      ??Timer_1ms_11
   1797              {
   1798                g_RF_TimeOutCounter--;
   \   0000009E   491E               SUBS     R1,R1,#+1
   \   000000A0   0170               STRB     R1,[R0, #+0]
   \   000000A2   5BE0               B        ??Timer_1ms_3
   1799          
   1800           
   1801              }else{
   1802                 g_RF_TimeOutCounter=RF_TimeOut; 
   \                     ??Timer_1ms_11:
   \   000000A4   0921               MOVS     R1,#+9
   \   000000A6   0170               STRB     R1,[R0, #+0]
   1803                 RF_MasterExecut();
   \   000000A8   ........           BL       RF_MasterExecut
   \   000000AC   56E0               B        ??Timer_1ms_3
   1804              }
   1805            }else{
   1806                  
   1807                  RF_SlaveCounter++;
   \                     ??Timer_1ms_10:
   \   000000AE   554E               LDR      R6,??Timer_1ms_0+0x18  ;; g_SlaveConnect
   \   000000B0   B068               LDR      R0,[R6, #+8]
   \   000000B2   401C               ADDS     R0,R0,#+1
   \   000000B4   B060               STR      R0,[R6, #+8]
   1808               
   1809                  
   1810                    if (RF_Status.ConfResiveSlave==2) //je¿eli poprawnie odebrano dane 
   \   000000B6   217B               LDRB     R1,[R4, #+12]
   \   000000B8   0229               CMP      R1,#+2
   \   000000BA   08D1               BNE      ??Timer_1ms_12
   1811                    {
   1812                      PraboblySlaveConstChanel=RF_Status.ChSlave;
   \   000000BC   E07B               LDRB     R0,[R4, #+15]
   \   000000BE   7070               STRB     R0,[R6, #+1]
   1813                      RF_SlaveCounter=0;   //- zeruj licznik
   \   000000C0   0020               MOVS     R0,#+0
   \   000000C2   B060               STR      R0,[R6, #+8]
   1814                      RF_Status.ConfResiveSlave=1;
   \   000000C4   0120               MOVS     R0,#+1
   \   000000C6   0100               MOVS     R1,R0
   \   000000C8   2173               STRB     R1,[R4, #+12]
   1815                      g_SlaveConnect=1;    //ustawia flagê poprawnej transmisji slave
   \   000000CA   3070               STRB     R0,[R6, #+0]
   \   000000CC   46E0               B        ??Timer_1ms_3
   1816                    }else{
   1817            
   1818                      short LongWait=1000;
   \                     ??Timer_1ms_12:
   \   000000CE   FA22               MOVS     R2,#+250
   \   000000D0   9200               LSLS     R2,R2,#+2        ;; #+1000
   1819                      if (PraboblySlaveConstChanel==RF_Status.ChSlave) LongWait=10000;
   \   000000D2   7378               LDRB     R3,[R6, #+1]
   \   000000D4   E57B               LDRB     R5,[R4, #+15]
   \   000000D6   AB42               CMP      R3,R5
   \   000000D8   00D1               BNE      ??Timer_1ms_13
   \   000000DA   4B4A               LDR      R2,??Timer_1ms_0+0x1C  ;; 0x2710
   1820                      
   1821                      if (((RF_SlaveCounter==100)  && (RF_Status.ConfResiveSlave==0)) //je¿eli nie odebrano danych w czasie 100ms
   1822                      || ((RF_SlaveCounter>=LongWait) && (RF_Status.ConfResiveSlave<2))  //je¿eli nie odebrano danych o w³aœciwym ID w czasie 1000ms
   1823                        )
   \                     ??Timer_1ms_13:
   \   000000DC   6428               CMP      R0,#+100
   \   000000DE   01D1               BNE      ??Timer_1ms_14
   \   000000E0   0029               CMP      R1,#+0
   \   000000E2   03D0               BEQ      ??Timer_1ms_15
   \                     ??Timer_1ms_14:
   \   000000E4   9042               CMP      R0,R2
   \   000000E6   39DB               BLT      ??Timer_1ms_3
   \   000000E8   0229               CMP      R1,#+2
   \   000000EA   37D2               BCS      ??Timer_1ms_3
   1824                      {
   1825          
   1826                           SPI_SendWord(0x8219,Cs_RF); 
                                  ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \                     ??Timer_1ms_15:
   \   000000EC   0221               MOVS     R1,#+2
   \   000000EE   4748               LDR      R0,??Timer_1ms_0+0x20  ;; 0x8219
   \   000000F0   ........           BL       SPI_SendWord
   1827                           RF_SlaveCounter=0;   //- zeruj licznik
   \   000000F4   0025               MOVS     R5,#+0
   \   000000F6   B560               STR      R5,[R6, #+8]
   1828                           RF_Status.ConfResiveSlave=0;
   \   000000F8   2800               MOVS     R0,R5
   \   000000FA   2073               STRB     R0,[R4, #+12]
   1829                           g_SlaveConnect=0; 
   \   000000FC   3070               STRB     R0,[R6, #+0]
   1830                           
   1831                           if (RF_Status.AllReady) if (RF_Status.ChSlave<RF_ChannelQuanti-1) {RF_Status.ChSlave++;} else {RF_Status.ChSlave=0;}
   \   000000FE   207C               LDRB     R0,[R4, #+16]
   \   00000100   0028               CMP      R0,#+0
   \   00000102   07D0               BEQ      ??Timer_1ms_16
   \   00000104   E07B               LDRB     R0,[R4, #+15]
   \   00000106   2728               CMP      R0,#+39
   \   00000108   02D2               BCS      ??Timer_1ms_17
   \   0000010A   401C               ADDS     R0,R0,#+1
   \   0000010C   E073               STRB     R0,[R4, #+15]
   \   0000010E   01E0               B        ??Timer_1ms_16
   \                     ??Timer_1ms_17:
   \   00000110   2800               MOVS     R0,R5
   \   00000112   E073               STRB     R0,[R4, #+15]
   1832                           SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
   \                     ??Timer_1ms_16:
   \   00000114   0221               MOVS     R1,#+2
   \   00000116   0E00               MOVS     R6,R1
   \   00000118   E07B               LDRB     R0,[R4, #+15]
   \   0000011A   ........           BL       __aeabi_ui2d
   \   0000011E   3C4A               LDR      R2,??Timer_1ms_0+0x24  ;; 0x33333333
   \   00000120   3C4B               LDR      R3,??Timer_1ms_0+0x28  ;; 0x3fd33333
   \   00000122   ........           BL       __aeabi_dmul
   \   00000126   3C4A               LDR      R2,??Timer_1ms_0+0x2C  ;; 0x5c28f5c3
   \   00000128   3C4B               LDR      R3,??Timer_1ms_0+0x30  ;; 0x408ae28f
   \   0000012A   ........           BL       __aeabi_dadd
   \   0000012E   2A00               MOVS     R2,R5
   \   00000130   3B4B               LDR      R3,??Timer_1ms_0+0x34  ;; 0x40690000
   \   00000132   ........           BL       __aeabi_dmul
   \   00000136   2A00               MOVS     R2,R5
   \   00000138   3A4B               LDR      R3,??Timer_1ms_0+0x38  ;; 0xc104ff00
   \   0000013A   ........           BL       __aeabi_dadd
   \   0000013E   ........           BL       __aeabi_d2iz
   \   00000142   0004               LSLS     R0,R0,#+16
   \   00000144   0014               ASRS     R0,R0,#+16
   \   00000146   A021               MOVS     R1,#+160
   \   00000148   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   0000014A   0143               ORRS     R1,R1,R0
   \   0000014C   0800               MOVS     R0,R1
   \   0000014E   3100               MOVS     R1,R6
   \   00000150   ........           BL       SPI_SendWord
   1833                           RF_Status.MasterMode=0;  
   \   00000154   6573               STRB     R5,[R4, #+13]
   1834                           RF_Status.EnableRX();
   \   00000156   A06A               LDR      R0,[R4, #+40]
   \   00000158   ........           BL       __iar_via_R0
   1835                        
   1836                      }
   1837                    
   1838                    }
   1839                   
   1840                    
   1841            }
   1842          }          
   1843          
   1844            
   1845          
   1846            
   1847                //uruchomienie Timer_1s co 1000 cykli-------------------------------------------
   1848                static short CounterForTimer1s; 
   1849                if (CounterForTimer1s<1000)
   \                     ??Timer_1ms_3:
   \   0000015C   294E               LDR      R6,??Timer_1ms_0+0x18  ;; g_SlaveConnect
   \   0000015E   0420               MOVS     R0,#+4
   \   00000160   305E               LDRSH    R0,[R6, R0]
   \   00000162   FA21               MOVS     R1,#+250
   \   00000164   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000166   8842               CMP      R0,R1
   \   00000168   02DA               BGE      ??Timer_1ms_18
   1850                {
   1851                    CounterForTimer1s++;
   \   0000016A   401C               ADDS     R0,R0,#+1
   \   0000016C   B080               STRH     R0,[R6, #+4]
   \   0000016E   03E0               B        ??Timer_1ms_19
   1852                }else{
   1853                    CounterForTimer1s=0;
   \                     ??Timer_1ms_18:
   \   00000170   0020               MOVS     R0,#+0
   \   00000172   B080               STRH     R0,[R6, #+4]
   1854                    Timer_1s();
   \   00000174   ........           BL       Timer_1s
   1855                }
   1856          
   1857          
   1858          
   1859            
   1860            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ TimeUnitQual
   1861            if (++CurTimeQual>=TimeUnitQual)
   \                     ??Timer_1ms_19:
   \   00000178   0220               MOVS     R0,#+2
   \   0000017A   305E               LDRSH    R0,[R6, R0]
   \   0000017C   401C               ADDS     R0,R0,#+1
   \   0000017E   7080               STRH     R0,[R6, #+2]
   \   00000180   9621               MOVS     R1,#+150
   \   00000182   8900               LSLS     R1,R1,#+2        ;; #+600
   \   00000184   0004               LSLS     R0,R0,#+16
   \   00000186   0014               ASRS     R0,R0,#+16
   \   00000188   8842               CMP      R0,R1
   \   0000018A   2CDB               BLT      ??Timer_1ms_20
   1862            {
   1863              CurTimeQual=0;
   \   0000018C   0025               MOVS     R5,#+0
   \   0000018E   2800               MOVS     R0,R5
   \   00000190   7080               STRH     R0,[R6, #+2]
   1864              if (TransQuality.MensurIndex<32)
   \   00000192   2548               LDR      R0,??Timer_1ms_0+0x3C  ;; TransQuality
   \   00000194   0178               LDRB     R1,[R0, #+0]
   \   00000196   2029               CMP      R1,#+32
   \   00000198   02D2               BCS      ??Timer_1ms_21
   1865              {
   1866                TransQuality.MensurIndex++; 
   \   0000019A   491C               ADDS     R1,R1,#+1
   \   0000019C   0170               STRB     R1,[R0, #+0]
   \   0000019E   01E0               B        ??Timer_1ms_22
   1867              }else{
   1868                TransQuality.MensurIndex=0;
   \                     ??Timer_1ms_21:
   \   000001A0   2900               MOVS     R1,R5
   \   000001A2   0170               STRB     R1,[R0, #+0]
   1869              }
   1870              if (TransQuality.QuickMensurIndex<4)
   \                     ??Timer_1ms_22:
   \   000001A4   8178               LDRB     R1,[R0, #+2]
   \   000001A6   0429               CMP      R1,#+4
   \   000001A8   02D2               BCS      ??Timer_1ms_23
   1871              {
   1872                TransQuality.QuickMensurIndex++; 
   \   000001AA   491C               ADDS     R1,R1,#+1
   \   000001AC   8170               STRB     R1,[R0, #+2]
   \   000001AE   17E0               B        ??Timer_1ms_24
   1873              }else{
   1874                TransQuality.QuickMensurIndex=0;
   \                     ??Timer_1ms_23:
   \   000001B0   2900               MOVS     R1,R5
   \   000001B2   8170               STRB     R1,[R0, #+2]
   1875              }
   1876          
   1877              for (char i=0; i<NumberNeurons; i++) 
   \   000001B4   14E0               B        ??Timer_1ms_24
   1878              {
   1879                TransQuality.Mensur[i] &= ~(0x1 << TransQuality.MensurIndex);
   \                     ??Timer_1ms_25:
   \   000001B6   8A00               LSLS     R2,R1,#+2
   \   000001B8   8218               ADDS     R2,R0,R2
   \   000001BA   D36C               LDR      R3,[R2, #+76]
   \   000001BC   0124               MOVS     R4,#+1
   \   000001BE   0678               LDRB     R6,[R0, #+0]
   \   000001C0   B440               LSLS     R4,R4,R6
   \   000001C2   A343               BICS     R3,R3,R4
   \   000001C4   D364               STR      R3,[R2, #+76]
   1880                TransQuality.QuickMensur[i] &= ~(0x1 << TransQuality.QuickMensurIndex);
   \   000001C6   4118               ADDS     R1,R0,R1
   \   000001C8   2622               MOVS     R2,#+38
   \   000001CA   0B00               MOVS     R3,R1
   \   000001CC   2633               ADDS     R3,R3,#+38
   \   000001CE   1B78               LDRB     R3,[R3, #+0]
   \   000001D0   0124               MOVS     R4,#+1
   \   000001D2   8678               LDRB     R6,[R0, #+2]
   \   000001D4   B440               LSLS     R4,R4,R6
   \   000001D6   A343               BICS     R3,R3,R4
   \   000001D8   8B54               STRB     R3,[R1, R2]
   1881              }                 
   \   000001DA   6D1C               ADDS     R5,R5,#+1
   \   000001DC   2D06               LSLS     R5,R5,#+24
   \   000001DE   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1ms_24:
   \   000001E0   2900               MOVS     R1,R5
   \   000001E2   2329               CMP      R1,#+35
   \   000001E4   E7D3               BCC      ??Timer_1ms_25
   1882            }
   1883          
   1884            
   1885          
   1886                    
   1887                 
   1888          
   1889          
   1890          }//_____________________________________________________________________________
   \                     ??Timer_1ms_20:
   \   000001E6   70BC               POP      {R4-R6}
   \   000001E8   01BC               POP      {R0}
   \   000001EA   0047               BX       R0               ;; return
   \                     ??Timer_1ms_0:
   \   000001EC   A000FAFF           DC32     0xfffa00a0
   \   000001F0   ........           DC32     DateTime
   \   000001F4   ........           DC32     ButtonBipCounter
   \   000001F8   34F4FFFF           DC32     0xfffff434
   \   000001FC   ........           DC32     RF_Status
   \   00000200   ........           DC32     g_RF_TimeOutCounter
   \   00000204   ........           DC32     g_SlaveConnect
   \   00000208   10270000           DC32     0x2710
   \   0000020C   19820000           DC32     0x8219
   \   00000210   33333333           DC32     0x33333333
   \   00000214   3333D33F           DC32     0x3fd33333
   \   00000218   C3F5285C           DC32     0x5c28f5c3
   \   0000021C   8FE28A40           DC32     0x408ae28f
   \   00000220   00006940           DC32     0x40690000
   \   00000224   00FF04C1           DC32     0xc104ff00
   \   00000228   ........           DC32     TransQuality
   1891          
   1892          
   1893          
   1894          
   1895          
   1896          //-----------------------------------------------------------------------------
   1897          //!  Nazwa funkcji :    Timer_1_Setup
   1898          //!  Funkcja inicjalizacji Timer1 - 1ms
   1899          //-----------------------------------------------------------------------------
   1900          //! 
   1901          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1902          void Timer_1ms_Setup(void) 
   1903          { 
   1904            //TRACE_INFO("T2_setup");  
   1905            //TRACE_INFO("\n\r"); 
   1906            
   1907           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
   1908           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
   1909           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC2] = (unsigned int)Timer_1ms;  //set AIC             
   \                     Timer_1ms_Setup:
   \   00000000   1148               LDR      R0,??Timer_1ms_Setup_0  ;; 0xfffff0b8
   \   00000002   1249               LDR      R1,??Timer_1ms_Setup_0+0x4  ;; Timer_1ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1910           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC2] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_1mS_PRIOR ); 
   \   00000006   1248               LDR      R0,??Timer_1ms_Setup_0+0x8  ;; 0xfffff038
   \   00000008   0421               MOVS     R1,#+4
   \   0000000A   0160               STR      R1,[R0, #+0]
   1911           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC2);      //enable clock 
   \   0000000C   0803               LSLS     R0,R1,#+12
   \   0000000E   1149               LDR      R1,??Timer_1ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
   1912           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   1149               LDR      R1,??Timer_1ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
   1913           //no external clocks 
   1914           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   1049               LDR      R1,??Timer_1ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
   1915           AT91C_BASE_TC2->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   1049               LDR      R1,??Timer_1ms_Setup_0+0x18  ;; 0xfffa0080
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
   1916           AT91C_BASE_TC2->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0F49               LDR      R1,??Timer_1ms_Setup_0+0x1C  ;; 0xfffa0084
   \   00000026   104A               LDR      R2,??Timer_1ms_Setup_0+0x20  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
   1917           //clock: MCK/1024  = 48054841/ DIV
   1918           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
   1919           //! DIV5 - 1024
   1920           //! DIV4 - 128
   1921           //! DIV3 - 32
   1922           //! DIV2 - 8
   1923           
   1924           AT91C_BASE_TC2->TC_RC = 6007;                  //1ms  (z wyliczeñ 6007)
   \   0000002A   1049               LDR      R1,??Timer_1ms_Setup_0+0x24  ;; 0xfffa009c
   \   0000002C   104A               LDR      R2,??Timer_1ms_Setup_0+0x28  ;; 0x1777
   \   0000002E   0A60               STR      R2,[R1, #+0]
   1925           AT91C_BASE_TC2->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000030   1049               LDR      R1,??Timer_1ms_Setup_0+0x2C  ;; 0xfffa00a4
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
   1926           AT91C_BASE_TC2->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   1049               LDR      R1,??Timer_1ms_Setup_0+0x30  ;; 0xfffa00a8
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
   1927           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC2);       //enable int 
   \   0000003C   0F49               LDR      R1,??Timer_1ms_Setup_0+0x34  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
   1928           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC2);       //clear int 
   \   00000040   0F49               LDR      R1,??Timer_1ms_Setup_0+0x38  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
   1929          
   1930          
   1931          
   1932          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_1ms_Setup_0:
   \   00000048   B8F0FFFF           DC32     0xfffff0b8
   \   0000004C   ........           DC32     Timer_1ms
   \   00000050   38F0FFFF           DC32     0xfffff038
   \   00000054   10FCFFFF           DC32     0xfffffc10
   \   00000058   C000FAFF           DC32     0xfffa00c0
   \   0000005C   C400FAFF           DC32     0xfffa00c4
   \   00000060   8000FAFF           DC32     0xfffa0080
   \   00000064   8400FAFF           DC32     0xfffa0084
   \   00000068   01C00C00           DC32     0xcc001
   \   0000006C   9C00FAFF           DC32     0xfffa009c
   \   00000070   77170000           DC32     0x1777
   \   00000074   A400FAFF           DC32     0xfffa00a4
   \   00000078   A800FAFF           DC32     0xfffa00a8
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1933          
   1934          
   1935          
   1936          
   1937          
   1938          
   1939          
   1940          
   1941          
   1942          

   \                                 In section Debug.txt, align 4, keep-with-next
   1943          void RamToFlash(void)
   1944          {
   \                     RamToFlash:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1945                    //if (g_PC_Connected==0)
   1946                    //{
   1947                      DispWait=DispWaitOn; 
   \   00000002   304C               LDR      R4,??RamToFlash_0  ;; DispWait
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   2070               STRB     R0,[R4, #+0]
   1948                      Wait_Paint();
   \   00000008   ........           BL       Wait_Paint
   1949                    //} 
   1950                      gProg.Preambu=ProgPreambu;
   \   0000000C   2E4D               LDR      R5,??RamToFlash_0+0x4  ;; gProg
   \   0000000E   AA20               MOVS     R0,#+170
   \   00000010   2870               STRB     R0,[R5, #+0]
   1951                      gProg.ProgFormatTyp=_ProgFormatTyp;
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   6870               STRB     R0,[R5, #+1]
   \   00000016   2D48               LDR      R0,??RamToFlash_0+0x8  ;; 0xc670
   \   00000018   6880               STRH     R0,[R5, #+2]
   1952                      gProg.Size=sizeof(gProg);
   1953                      gProg.ModyfiData[0]='2';gProg.ModyfiData[1]='0';
   \   0000001A   3220               MOVS     R0,#+50
   \   0000001C   2871               STRB     R0,[R5, #+4]
   \   0000001E   3020               MOVS     R0,#+48
   \   00000020   6871               STRB     R0,[R5, #+5]
   1954                      CharToStr(DateTime.Year, &(gProg.ModyfiData[2]), 2); 
   \   00000022   2B4E               LDR      R6,??RamToFlash_0+0xC  ;; DateTime
   \   00000024   0222               MOVS     R2,#+2
   \   00000026   2900               MOVS     R1,R5
   \   00000028   891D               ADDS     R1,R1,#+6
   \   0000002A   3078               LDRB     R0,[R6, #+0]
   \   0000002C   ........           BL       CharToStr
   1955                      gProg.ModyfiData[4]='-';
   \   00000030   2D27               MOVS     R7,#+45
   \   00000032   2F72               STRB     R7,[R5, #+8]
   1956                      CharToStr(DateTime.Mounth, &(gProg.ModyfiData[5]), 2);
   \   00000034   0222               MOVS     R2,#+2
   \   00000036   2900               MOVS     R1,R5
   \   00000038   0931               ADDS     R1,R1,#+9
   \   0000003A   7078               LDRB     R0,[R6, #+1]
   \   0000003C   ........           BL       CharToStr
   1957                      gProg.ModyfiData[7]='-'; 
   \   00000040   EF72               STRB     R7,[R5, #+11]
   1958                      CharToStr(DateTime.Day, &(gProg.ModyfiData[8]), 2); 
   \   00000042   0222               MOVS     R2,#+2
   \   00000044   2900               MOVS     R1,R5
   \   00000046   0C31               ADDS     R1,R1,#+12
   \   00000048   B078               LDRB     R0,[R6, #+2]
   \   0000004A   ........           BL       CharToStr
   1959                      gProg.ModyfiData[10]=' ';
   \   0000004E   2020               MOVS     R0,#+32
   \   00000050   A873               STRB     R0,[R5, #+14]
   1960                      CharToStr(DateTime.Hour, &(gProg.ModyfiData[11]), 2); 
   \   00000052   0222               MOVS     R2,#+2
   \   00000054   2900               MOVS     R1,R5
   \   00000056   0F31               ADDS     R1,R1,#+15
   \   00000058   F078               LDRB     R0,[R6, #+3]
   \   0000005A   ........           BL       CharToStr
   1961                      gProg.ModyfiData[13]=':';
   \   0000005E   3A27               MOVS     R7,#+58
   \   00000060   6F74               STRB     R7,[R5, #+17]
   1962                      CharToStr(DateTime.Minute, &(gProg.ModyfiData[14]), 2); 
   \   00000062   0222               MOVS     R2,#+2
   \   00000064   2900               MOVS     R1,R5
   \   00000066   1231               ADDS     R1,R1,#+18
   \   00000068   3079               LDRB     R0,[R6, #+4]
   \   0000006A   ........           BL       CharToStr
   1963                      gProg.ModyfiData[16]=':';
   \   0000006E   2F75               STRB     R7,[R5, #+20]
   1964                      CharToStr(DateTime.Second, &(gProg.ModyfiData[17]), 2); 
   \   00000070   0222               MOVS     R2,#+2
   \   00000072   2900               MOVS     R1,R5
   \   00000074   1531               ADDS     R1,R1,#+21
   \   00000076   7079               LDRB     R0,[R6, #+5]
   \   00000078   ........           BL       CharToStr
   1965                      for (char i=0; i<19; i++) if (gProg.ModyfiData[i]==0) gProg.ModyfiData[i]='0';
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   08E0               B        ??RamToFlash_1
   \                     ??RamToFlash_2:
   \   00000080   6918               ADDS     R1,R5,R1
   \   00000082   0A79               LDRB     R2,[R1, #+4]
   \   00000084   002A               CMP      R2,#+0
   \   00000086   01D1               BNE      ??RamToFlash_3
   \   00000088   3022               MOVS     R2,#+48
   \   0000008A   0A71               STRB     R2,[R1, #+4]
   \                     ??RamToFlash_3:
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   0006               LSLS     R0,R0,#+24
   \   00000090   000E               LSRS     R0,R0,#+24
   \                     ??RamToFlash_1:
   \   00000092   0100               MOVS     R1,R0
   \   00000094   1329               CMP      R1,#+19
   \   00000096   F3D3               BCC      ??RamToFlash_2
   1966          
   1967                        unsigned int Save = __get_interrupt_state();            
   \   00000098   ........           BL       __iar_get_interrupt_state
   \   0000009C   0700               MOVS     R7,R0
   1968                        __disable_interrupt();
   \   0000009E   ........           BL       __iar_disable_interrupt
   1969                        //CleanFlash(AT91C_IFLASH_MEM->FlashProgram,sizeof(gProg));
   1970                          FlashWrite((char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset), (char*)&gProg,sizeof(gProg)); //(char *ptrMem, char *value, int length)
                                 ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   000000A2   0A4A               LDR      R2,??RamToFlash_0+0x8  ;; 0xc670
   \   000000A4   2900               MOVS     R1,R5
   \   000000A6   B06C               LDR      R0,[R6, #+72]
   \   000000A8   0A4B               LDR      R3,??RamToFlash_0+0x10  ;; 0x130100
   \   000000AA   1818               ADDS     R0,R3,R0
   \   000000AC   ........           BL       FlashWrite
   1971                        //at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,(char*)&gProg,sizeof(gProg));
   1972                        __set_interrupt_state(Save);
   \   000000B0   3800               MOVS     R0,R7
   \   000000B2   ........           BL       __iar_set_interrupt_state
   1973                        __enable_interrupt(); 
   \   000000B6   ........           BL       __iar_enable_interrupt
   1974          
   1975           DispWait=DispWaitOff; 
   \   000000BA   0420               MOVS     R0,#+4
   \   000000BC   2070               STRB     R0,[R4, #+0]
   1976          
   1977          
   1978          
   1979          }
   \   000000BE   F8BC               POP      {R3-R7}
   \   000000C0   01BC               POP      {R0}
   \   000000C2   0047               BX       R0               ;; return
   \                     ??RamToFlash_0:
   \   000000C4   ........           DC32     DispWait
   \   000000C8   ........           DC32     gProg
   \   000000CC   70C60000           DC32     0xc670
   \   000000D0   ........           DC32     DateTime
   \   000000D4   00011300           DC32     0x130100
   1980          
   1981          
   1982          
   1983          
   1984          

   \                                 In section .bss, align 4
   1985          int testcount=0;
   \                     testcount:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
   1986          void TestHendel(void)
   1987          {
   \                     TestHendel:
   \   00000000   01B5               PUSH     {R0,LR}
   1988            AT91F_PIO_GetInterruptStatus(AT91C_PIO_VBUS);
   \   00000002   0748               LDR      R0,??TestHendel_0  ;; 0xfffff400
   \   00000004   ........           BL       AT91F_PIO_GetInterruptStatus
   1989            if ((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) testcount++;
   \   00000008   0648               LDR      R0,??TestHendel_0+0x4  ;; 0xfffff43c
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8007               LSLS     R0,R0,#+30
   \   0000000E   03D5               BPL      ??TestHendel_1
   \   00000010   0548               LDR      R0,??TestHendel_0+0x8  ;; testcount
   \   00000012   0168               LDR      R1,[R0, #+0]
   \   00000014   491C               ADDS     R1,R1,#+1
   \   00000016   0160               STR      R1,[R0, #+0]
   1990              
   1991          
   1992          }
   \                     ??TestHendel_1:
   \   00000018   08BC               POP      {R3}
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
   \   0000001E   C046               Nop      
   \                     ??TestHendel_0:
   \   00000020   00F4FFFF           DC32     0xfffff400
   \   00000024   3CF4FFFF           DC32     0xfffff43c
   \   00000028   ........           DC32     testcount
   1993          
   1994          

   \                                 In section Debug.txt, align 4, keep-with-next
   1995          void TestInit(void)
   1996          {
   \                     TestInit:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   1997          //#ifndef USB_BUS_POWERED
   1998              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   00000002   154C               LDR      R4,??TestInit_0  ;; 0xfffff400
   \   00000004   0221               MOVS     R1,#+2
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       AT91F_PIO_CfgInput
   1999              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   0000000C   1348               LDR      R0,??TestInit_0+0x4  ;; 0xfffff460
   \   0000000E   0221               MOVS     R1,#+2
   \   00000010   0160               STR      R1,[R0, #+0]
   2000              
   2001              // Configure VBus monitoring
   2002                  AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, 1 << AT91C_ID_VBUS);
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   1248               LDR      R0,??TestInit_0+0x8  ;; 0xfffffc00
   \   00000016   ........           BL       AT91F_PMC_EnablePeriphClock
   2003              AT91F_PIO_CfgPullup(AT91C_PIO_VBUS, ~AT91C_VBUS);
   \   0000001A   0221               MOVS     R1,#+2
   \   0000001C   C943               MVNS     R1,R1            ;; #-3
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       AT91F_PIO_CfgPullup
   2004              AT91F_PIO_CfgInput(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000024   0221               MOVS     R1,#+2
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       AT91F_PIO_CfgInput
   2005          
   2006              // Configure and enable the Vbus detection interrupt
   2007              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
   2008                                    AT91C_ID_VBUS,
   2009                                    5, //AT91C_AIC_PRIOR_LOWEST,
   2010                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
   2011                                    ISR_VBus);
   \   0000002C   0D4D               LDR      R5,??TestInit_0+0xC  ;; 0xfffff000
   \   0000002E   82B0               SUB      SP,SP,#+8
   \   00000030   0D48               LDR      R0,??TestInit_0+0x10  ;; ISR_VBus
   \   00000032   0090               STR      R0,[SP, #+0]
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   0522               MOVS     R2,#+5
   \   00000038   0221               MOVS     R1,#+2
   \   0000003A   2800               MOVS     R0,R5
   \   0000003C   ........           BL       AT91F_AIC_ConfigureIt
   \   00000040   02B0               ADD      SP,SP,#+8
   2012          
   2013              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   2000               MOVS     R0,R4
   \   00000046   ........           BL       AT91F_PIO_InterruptEnable
   2014              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
   \   0000004A   0221               MOVS     R1,#+2
   \   0000004C   2800               MOVS     R0,R5
   \   0000004E   ........           BL       AT91F_AIC_EnableIt
   2015          }
   \   00000052   38BC               POP      {R3-R5}
   \   00000054   01BC               POP      {R0}
   \   00000056   0047               BX       R0               ;; return
   \                     ??TestInit_0:
   \   00000058   00F4FFFF           DC32     0xfffff400
   \   0000005C   60F4FFFF           DC32     0xfffff460
   \   00000060   00FCFFFF           DC32     0xfffffc00
   \   00000064   00F0FFFF           DC32     0xfffff000
   \   00000068   ........           DC32     ISR_VBus
   2016          
   2017          
   2018          
   2019          
   2020          
   2021          
   2022          //------------------------------------------------------------------------------
   2023          //!          Main
   2024          //------------------------------------------------------------------------------
   2025          
   2026          //char ekran_tab[8][128]; 
   2027          

   \                                 In section .bss, align 4
   2028          char string[25];
   \                     string:
   \   00000000                      DS8 28
   2029          

   \                                 In section Debug.txt, align 4, keep-with-next
   2030          void watchdogEnable(int millis)
   2031          {
   \                     watchdogEnable:
   \   00000000   01B5               PUSH     {R0,LR}
   2032            int period = (millis * 256) / 1000;
   \   00000002   0002               LSLS     R0,R0,#+8
   \   00000004   FA21               MOVS     R1,#+250
   \   00000006   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000008   ........           BL       __aeabi_idivmod
   2033            AT91C_BASE_WDTC->WDTC_WDMR =  AT91C_WDTC_WDRSTEN |        // enable reset on timeout
   2034                                          AT91C_WDTC_WDDBGHLT |       // respect debug mode
   2035                                          AT91C_WDTC_WDIDLEHLT |      // respect idle mode
   2036                                          ((period << 16 ) & AT91C_WDTC_WDD) | // delta is as wide as the period, so we can restart anytime
   2037                                          (period & AT91C_WDTC_WDV);  // set the period
   \   0000000C   0649               LDR      R1,??watchdogEnable_0  ;; 0xfffffd44
   \   0000000E   0204               LSLS     R2,R0,#+16
   \   00000010   064B               LDR      R3,??watchdogEnable_0+0x4  ;; 0xfff0000
   \   00000012   1340               ANDS     R3,R3,R2
   \   00000014   0005               LSLS     R0,R0,#+20
   \   00000016   000D               LSRS     R0,R0,#+20
   \   00000018   1843               ORRS     R0,R0,R3
   \   0000001A   054A               LDR      R2,??watchdogEnable_0+0x8  ;; 0x30002000
   \   0000001C   0243               ORRS     R2,R2,R0
   \   0000001E   0A60               STR      R2,[R1, #+0]
   2038          }
   \   00000020   08BC               POP      {R3}
   \   00000022   01BC               POP      {R0}
   \   00000024   0047               BX       R0               ;; return
   \   00000026   C046               Nop      
   \                     ??watchdogEnable_0:
   \   00000028   44FDFFFF           DC32     0xfffffd44
   \   0000002C   0000FF0F           DC32     0xfff0000
   \   00000030   00200030           DC32     0x30002000

   \                                 In section .data, align 8
   \                     DateTime:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     Speaker:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     g_PC_Connected:
   \   0000000C   00                 DC8 0
   \                     g_LightLCDEnable:
   \   0000000D   00                 DC8 0
   \                     g_ScreenSever_On:
   \   0000000E   00                 DC8 0
   \                     g_ScreenSever_Time_On:
   \   0000000F   00                 DC8 0
   \                     g_ScreenSever_Time_Off:
   \   00000010   00                 DC8 0
   \                     g_Stop_Program:
   \   00000011   00                 DC8 0
   \                     g_NeedPass:
   \   00000012   00                 DC8 0
   \                     AlarmOn:
   \   00000013   00                 DC8 0
   \                     ChangeingIdMode:
   \   00000014   00                 DC8 0
   \                     WypMaxJasnosci:
   \   00000015   00                 DC8 0
   \                     WypMinJasnosci:
   \   00000016   00                 DC8 0
   \                     gWypMinJasnosciTest:
   \   00000017   00                 DC8 0
   \                     ChangeStageFlag:
   \   00000018   0A                 DC8 10
   \                     SlaveMode:
   \   00000019   00                 DC8 0
   \                     ForwardUSB2Serialferst:
   \   0000001A   00                 DC8 0
   \                     FlagChangeTime:
   \   0000001B   00                 DC8 0
   \   0000001C   00                 DC8 0
   \   0000001D   00                 DC8 0
   \   0000001E   00                 DC8 0
   \   0000001F   64                 DC8 100
   \                     g_Password_1:
   \   00000020   3131313100         DC8 "1111"
   \   00000025   000000             DC8 0, 0, 0
   \                     Y_down:
   \   00000028   FFFF               DC16 -1
   \                     X_down:
   \   0000002A   FFFF               DC16 -1
   \                     Y_up:
   \   0000002C   FFFF               DC16 -1
   \                     X_up:
   \   0000002E   FFFF               DC16 -1
   \                     g_counter:
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     g_NextTimeProgram:
   \   00000038   000000000000       DC32 0, 0
   \              0000        
   \                     FuseLastWiFiDataIn:
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     FlashProgramOfset:
   \   00000048   00010000           DC32 256
   \                     g_seconds_counter:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     g_LightCouterLCD:
   \   00000050   00000000           DC32 0
   \                     pAT91C_IFLASH_MEM:
   \   00000054   00001300           DC32 130000H
   \                     SourRam:
   \   00000058   00000000           DC8 0, 0, 0, 0
   \                     siz:
   \   0000005C   00000000           DC8 0, 0, 0, 0
   \                     LiczOds:
   \   00000060   00000000           DC32 0
   \                     CyklPerSekCount:
   \   00000064   00000000           DC32 0
   \                     TransLoopTime:
   \   00000068   00000000           DC32 0
   \                     CyklPerSek:
   \   0000006C   01000000           DC32 1
   \                     MenuLevel_old:
   \   00000070   00000000           DC8 0, 0, 0, 0
   \   00000074   00000000           DC8 0, 0, 0, 0
   2039          
   2040          
   2041          
   2042          
   2043          
   2044          
   2045          
   2046          
   2047          
   2048          
   2049          #define WATCHDOG_KEY (0xA5 << 24)
   2050          
   2051          char TimeCompil[]= __TIME__;
   2052          char DateCompil[]= __DATE__;
   2053          
   2054          extern  char VBUS_old;
   2055          
   2056          
   2057          #ifdef _LIVE_RJESTR 
   2058          int LIVE_TAB_IDX=0;  
   2059          unsigned short LIVE_TAB[LIVE_TAB_SIZE];  //   | A-Odczyt, B-potwierdzenie odczytu, C-Zapis F-flaga priorytetu | Nr wêz³a |  wartoœæ | | 
   2060          #endif
   2061             
   2062          
   2063          AT91PS_MEM FLASH;  
   \                     FLASH:
   \   00000078   00000000           DC8 0, 0, 0, 0
   \   0000007C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000190   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \   000001BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000020C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000021C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000022C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000023C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000024C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000025C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000026C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000027C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000028C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000029C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000030C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000031C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000032C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000033C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000034C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000035C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000036C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000037C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000038C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000039C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000040C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000041C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000042C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000043C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000044C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000045C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000046C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000047C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000048C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000049C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004AC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004BC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004CC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004DC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004EC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004FC   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000050C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000051C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   0000052C   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        

   \                                 In section .data, align 4
   \                     FlashProgramReserveOfset:
   \   00000000   D8D70000           DC32 55256

   \                                 In section .data, align 4
   \                     g_Password_2:
   \   00000000   3232323200         DC8 "2222"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .data, align 1
   \                     AdressModbus:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 4
   \                     g_SlaveConnect:
   \   00000000   00                 DC8 0
   \   00000001   FF                 DC8 255
   \                     CurTimeQual:
   \   00000002   0000               DC16 0
   \   00000004   0000               DC8 0, 0
   \   00000006   0000               DC8 0, 0
   \   00000008   00000000           DC8 0, 0, 0, 0

   \                                 In section .data, align 1
   \                     g_Restart_Program:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 8
   \                     AlarmScreenAction:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     out:
   \   00000010   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
   \              010101010000
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In section .data, align 4
   \                     pEndpoints:
   \   00000000   000000000000       DC32 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000020   01000000           DC8 1, 0, 0, 0
   \   00000024   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000048   02000000           DC8 2, 0, 0, 0
   \   0000004C   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000070   02000000           DC8 2, 0, 0, 0
   \   00000074   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000098   01000000           DC8 1, 0, 0, 0
   \   0000009C   00000000           DC32 0

   \                                 In section .data, align 4
   \                     tProgramTabSize:
   \   00000000   70C60000           DC32 50800

   \                                 In section .data, align 4
   \                     stop:
   \   00000000   D0070000           DC32 2000

   \                                 In section .data, align 4
   \                     ??Out:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   30D81300           DC32 13D830H

   \                                 In section .data, align 4
   \                     X_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     X_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 1
   \                     g_PC_Connected_timeout:
   \   00000000   05                 DC8 5

   \                                 In section .data, align 4
   \                     TimeCompil:
   \   00000000   31393A35303A       DC8 "19:50:46"
   \              343600      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .data, align 4
   \                     DateCompil:
   \   00000000   4A756E203132       DC8 "Jun 12 2013"
   \              203230313300
   2064          

   \                                 In section Debug.txt, align 4, keep-with-next
   2065          void main()
   2066          {
   \                     main:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   2067              FLASH=AT91C_IFLASH_MEM;  
   \   00000002   A84C               LDR      R4,??main_0      ;; DateTime
   \   00000004   9820               MOVS     R0,#+152
   \   00000006   4003               LSLS     R0,R0,#+13       ;; #+1245184
   \   00000008   A067               STR      R0,[R4, #+120]
   2068            
   2069              LCD_INIT();
   \   0000000A   ........           BL       AT91F_LCD_Init
   2070              Init_LCD_TS();           //inicjalizacja Touchpanel`a
   \   0000000E   ........           BL       Init_LCD_TS
   2071              CheckLCD();
   \   00000012   ........           BL       CheckLCD
   2072              
   2073              CleanCanvas(); 
   \   00000016   ........           BL       CleanCanvas
   2074              MenuPaint();    
   \   0000001A   ........           BL       MenuPaint
   2075              RepaintLCD();
   \   0000001E   ........           BL       RepaintLCD
   2076              RepaintLCD();     
   \   00000022   ........           BL       RepaintLCD
   \   00000026   A048               LDR      R0,??main_0+0x4  ;; RF_Status
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   0170               STRB     R1,[R0, #+0]
   \   0000002C   6846               MOV      R0,SP
   \   0000002E   0221               MOVS     R1,#+2
   \   00000030   0170               STRB     R1,[R0, #+0]
   2077            
   2078              RF_Status.Init=1;
   2079              
   2080              
   2081              _NodeInfo  NodeInfo;
   2082              #ifdef S300
   2083                NodeInfo.Model=mS300;
   2084              #endif
   2085              #ifdef S300i  
   2086                NodeInfo.Model=mS300i;
   2087              #endif
   2088              #ifdef S300iMax 
   2089                NodeInfo.Model=mS300iMax;  
   2090              #endif  
   2091              #ifdef S300iOld  
   2092                NodeInfo.Model=mS300i;
   2093              #endif  
   2094              
   2095              //char SysV=(system[0])-0x30;  
   2096              NodeInfo.SoftVersion=(system[0])-0x30;  
   2097              //SysV=(system[2])-0x30;  
   2098              NodeInfo.SoftSubVersion=(system[2])-0x30;  
   \   00000032   3121               MOVS     R1,#+49
   \   00000034   4170               STRB     R1,[R0, #+1]
   \   00000036   9D48               LDR      R0,??main_0+0x8  ;; MainStage + 950
   \   00000038   6946               MOV      R1,SP
   \   0000003A   0988               LDRH     R1,[R1, #+0]
   \   0000003C   0180               STRH     R1,[R0, #+0]
   2099              MainStage.StageQ[0].Value[0xA]=NodeInfo.NodeInfoWord;  
   2100              
   2101              
   2102              AT91F_PIO_CfgOutput(AT91C_BASE_PIOA, SpeakerPin);
                                                          ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000003E   8025               MOVS     R5,#+128
   \   00000040   2D06               LSLS     R5,R5,#+24       ;; #-2147483648
   \   00000042   2900               MOVS     R1,R5
   \   00000044   9A48               LDR      R0,??main_0+0xC  ;; 0xfffff400
   \   00000046   ........           BL       AT91F_PIO_CfgOutput
   2103              AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000004A   9A48               LDR      R0,??main_0+0x10  ;; 0xfffff434
   \   0000004C   0560               STR      R5,[R0, #+0]
   2104              
   2105              //uruchomienie Watchdog`a na 60s 
   2106              /*watchdogEnable(60000);  
   2107              AT91F_WDTRestart(AT91C_BASE_WDTC);
   2108              AT91C_BASE_WDTC->WDTC_WDMR=(unsigned int) AT91C_WDTC_WDV|AT91C_WDTC_WDRSTEN | AT91C_WDTC_WDD|0x0<<15;
   2109          
   2110              AT91C_BASE_WDTC->WDTC_WDMR=AT91C_WDTC_WDDIS; 
   2111              */
   2112             
   2113              
   2114              SpiMaster_Init();
   \   0000004E   ........           BL       SpiMaster_Init
   2115              
   2116              __enable_interrupt(); 
   \   00000052   ........           BL       __iar_enable_interrupt
   2117          
   2118             InitRTC();  
   \   00000056   ........           BL       InitRTC
   2119              GetDateTimeFromRTC(); 
   \   0000005A   ........           BL       GetDateTimeFromRTC
   2120           
   2121              InitFramework();
   \   0000005E   ........           BL       InitFramework
   \   00000062   9549               LDR      R1,??main_0+0x14  ;; `?<Constant "Bezpiecznik RF">` + 16
   \   00000064   2000               MOVS     R0,R4
   \   00000066   7C30               ADDS     R0,R0,#+124
   2122          
   2123              SER_Init(&sSer, &sUsb);  // Initialize the serial driver
   \   00000068   ........           BL       SER_Init
   2124          
   2125              InitFlash();  
   \   0000006C   ........           BL       InitFlash
   2126            
   2127              
   2128              Init_LCD_Light_PWM(WypMaxJasnosci);
                     ^
Warning[Pe223]: function "Init_LCD_Light_PWM" declared implicitly
   \   00000070   607D               LDRB     R0,[R4, #+21]
   \   00000072   ........           BL       Init_LCD_Light_PWM
   2129              
   2130              __enable_interrupt();    
   \   00000076   ........           BL       __iar_enable_interrupt
   \   0000007A   9048               LDR      R0,??main_0+0x18  ;; gProg
   2131           
   2132            
   2133                
   2134              #ifndef _DEBUG_
   2135              //******************************************************************************
   2136              //Ustawienia dla pierwszego uruchomienia starownika ****************************
   2137                if (pAT91C_IFLASH_MEM->Config.FerstRun!=0x0A)
   2138                {
   2139                  char WriteTmp;
   2140                 //zapis ustawieñ do flasha 
   2141                
   2142                 unsigned int Save = __get_interrupt_state();            
   2143                 __disable_interrupt();
   2144                     //uruchomiono sterownik  
   2145                     WriteTmp=0xA;    FlashWrite((char*)&(AT91C_IFLASH_MEM->Config.FerstRun),&WriteTmp,1);
   2146                 __set_interrupt_state(Save);
   2147                 __enable_interrupt(); 
   2148            
   2149          
   2150                  }
   2151              #endif 
   2152           
   2153               
   2154                
   2155              //Koniec ustawieñ dla pierwszego uruchomienia starownika ***********************
   2156              //******************************************************************************
   2157          
   2158              ProgramChangeExecute(&gProg); 
   \   0000007C   ........           BL       ProgramChangeExecute
   2159              ThermostatsTimeChartExecute();
   \   00000080   ........           BL       ThermostatsTimeChartExecute
   2160              
   2161              
   2162           //   US0_init();                                                                //inicjalizacja USART0
   2163             
   2164          #ifdef __WIFI_MODULE    
   2165              US1_init();                                                                 //inicjalizacja USART1
   \   00000084   ........           BL       US1_init
   2166          #endif
   2167              
   2168           //   Timer_10us_Setup();
   2169              Timer_1ms_Setup();
   \   00000088   ........           BL       Timer_1ms_Setup
   2170              Timer_10ms_Setup();
   \   0000008C   ........           BL       Timer_10ms_Setup
   \   00000090   0020               MOVS     R0,#+0
   \   00000092   8B49               LDR      R1,??main_0+0x1C  ;; 0xefffff
   \   00000094   01E0               B        ??main_1
   2171              
   2172              //Timer_1s();   
   2173                
   2174              for (int aaa=0; aaa<0xEFFFFF; aaa++)
   2175                      {
   2176                        asm( "nop" );
   \                     ??main_2:
   \   00000096   C046               nop              
   2177                      }       
   \   00000098   401C               ADDS     R0,R0,#+1
   \                     ??main_1:
   \   0000009A   8842               CMP      R0,R1
   \   0000009C   FBDB               BLT      ??main_2
   2178          
   2179              g_ScreenSever_On=pAT91C_IFLASH_MEM->Config.ScreenSever_On;
   \   0000009E   8948               LDR      R0,??main_0+0x20  ;; 0xd7e6
   \   000000A0   616D               LDR      R1,[R4, #+84]
   \   000000A2   0D18               ADDS     R5,R1,R0
   \   000000A4   2879               LDRB     R0,[R5, #+4]
   \   000000A6   A073               STRB     R0,[R4, #+14]
   2180              g_ScreenSever_Time_On=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_On;
   \   000000A8   6879               LDRB     R0,[R5, #+5]
   \   000000AA   E073               STRB     R0,[R4, #+15]
   2181              g_ScreenSever_Time_Off=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_Off;
   \   000000AC   A879               LDRB     R0,[R5, #+6]
   \   000000AE   2074               STRB     R0,[R4, #+16]
   2182              
   2183          
   2184          
   2185              
   2186              //odczyt NODE_ID
   2187              if ((AT91C_IFLASH_MEM->NODE_ID!=0) && (AT91C_IFLASH_MEM->NODE_ID!=0xFFFFFFFF))
   \   000000B0   8548               LDR      R0,??main_0+0x24  ;; 0x13d95c
   \   000000B2   0168               LDR      R1,[R0, #+0]
   \   000000B4   0029               CMP      R1,#+0
   \   000000B6   12D0               BEQ      ??main_3
   \   000000B8   0168               LDR      R1,[R0, #+0]
   \   000000BA   0022               MOVS     R2,#+0
   \   000000BC   D243               MVNS     R2,R2            ;; #-1
   \   000000BE   9142               CMP      R1,R2
   \   000000C0   0DD0               BEQ      ??main_3
   2188              {
   2189                RF_Status.RF_ID_R=AT91C_IFLASH_MEM->NODE_ID;//pe³ne id
   \   000000C2   C949               LDR      R1,??main_4      ;; RF_Status + 28
   \   000000C4   0268               LDR      R2,[R0, #+0]
   \   000000C6   0A60               STR      R2,[R1, #+0]
   2190                RF_Status.RF_ID=AT91C_IFLASH_MEM->NODE_ID-(AT91C_IFLASH_MEM->NODE_ID/1000000)*1000000;
   \   000000C8   C84E               LDR      R6,??main_4+0x4  ;; 0xf4240
   \   000000CA   0768               LDR      R7,[R0, #+0]
   \   000000CC   3800               MOVS     R0,R7
   \   000000CE   3100               MOVS     R1,R6
   \   000000D0   ........           BL       __aeabi_idivmod
   \   000000D4   7043               MULS     R0,R6,R0
   \   000000D6   381A               SUBS     R0,R7,R0
   \   000000D8   C549               LDR      R1,??main_4+0x8  ;; RF_Status + 24
   \   000000DA   0860               STR      R0,[R1, #+0]
   \   000000DC   05E0               B        ??main_5
   2191              }else{
   2192                RF_Status.RF_ID_R=9999999; //pe³ne id
   \                     ??main_3:
   \   000000DE   C248               LDR      R0,??main_4      ;; RF_Status + 28
   \   000000E0   C449               LDR      R1,??main_4+0xC  ;; 0x98967f
   \   000000E2   0160               STR      R1,[R0, #+0]
   2193                RF_Status.RF_ID=999999;  //skrócone id (rejestrowe)
   \   000000E4   C248               LDR      R0,??main_4+0x8  ;; RF_Status + 24
   \   000000E6   C449               LDR      R1,??main_4+0x10  ;; 0xf423f
   \   000000E8   0160               STR      R1,[R0, #+0]
   2194              }
   2195              
   2196              
   2197           
   2198          //uruchomienie RF
   2199              
   2200              //odczyt kanalu z flasha ------------------------------ 
   2201              
   2202              SlaveMode=pAT91C_IFLASH_MEM->Config.SlaveMode;
   \                     ??main_5:
   \   000000EA   A878               LDRB     R0,[R5, #+2]
   \   000000EC   6076               STRB     R0,[R4, #+25]
   2203              RF_Status.Ch=pAT91C_IFLASH_MEM->Config.RF_channel;
   \   000000EE   2878               LDRB     R0,[R5, #+0]
   \   000000F0   C249               LDR      R1,??main_4+0x14  ;; RF_Status + 14
   \   000000F2   0870               STRB     R0,[R1, #+0]
   2204              if (RF_Status.Ch==0) RF_Status.Ch=1;
   \   000000F4   0028               CMP      R0,#+0
   \   000000F6   02D1               BNE      ??main_6
   \   000000F8   C048               LDR      R0,??main_4+0x14  ;; RF_Status + 14
   \   000000FA   0121               MOVS     R1,#+1
   \   000000FC   0170               STRB     R1,[R0, #+0]
   2205              
   2206              
   2207              InitPioInterrupt();
                     ^
Warning[Pe223]: function "InitPioInterrupt" declared implicitly
   \                     ??main_6:
   \   000000FE   ........           BL       InitPioInterrupt
   2208              
   2209              RF_Init();
   \   00000102   ........           BL       RF_Init
   2210              
   2211              
   2212              char InitRF=1;
   \   00000106   0125               MOVS     R5,#+1
   \   00000108   04E0               B        ??main_7
   2213              
   2214              while (InitRF==1)
   2215              { 
   2216                  InitRF=RF_Status.Init;
   \                     ??main_8:
   \   0000010A   6748               LDR      R0,??main_0+0x4  ;; RF_Status
   \   0000010C   0578               LDRB     R5,[R0, #+0]
   2217                  Delay(0x1);
   \   0000010E   0120               MOVS     R0,#+1
   \   00000110   ........           BL       Delay
   2218              };
   \                     ??main_7:
   \   00000114   012D               CMP      R5,#+1
   \   00000116   F8D0               BEQ      ??main_8
   2219          
   2220              
   2221          
   2222              //sprawdzenie kana³u transmisji radiowej
   2223              if (!SlaveMode) //je¿eli master
   \   00000118   607E               LDRB     R0,[R4, #+25]
   \   0000011A   0028               CMP      R0,#+0
   \   0000011C   66D1               BNE      ??main_9
   2224              {
   2225                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   0000011E   A026               MOVS     R6,#+160
   \   00000120   3602               LSLS     R6,R6,#+8        ;; #+40960
   \   00000122   0221               MOVS     R1,#+2
   \   00000124   0D00               MOVS     R5,R1
   \   00000126   B548               LDR      R0,??main_4+0x14  ;; RF_Status + 14
   \   00000128   0078               LDRB     R0,[R0, #+0]
   \   0000012A   ........           BL       __aeabi_ui2d
   \   0000012E   0200               MOVS     R2,R0
   \   00000130   0B00               MOVS     R3,R1
   \   00000132   B348               LDR      R0,??main_4+0x18  ;; 0x33333333
   \   00000134   B349               LDR      R1,??main_4+0x1C  ;; 0x3fd33333
   \   00000136   ........           BL       __aeabi_dmul
   \   0000013A   0200               MOVS     R2,R0
   \   0000013C   0B00               MOVS     R3,R1
   \   0000013E   B248               LDR      R0,??main_4+0x20  ;; 0x5c28f5c3
   \   00000140   B249               LDR      R1,??main_4+0x24  ;; 0x408ae28f
   \   00000142   ........           BL       __aeabi_dadd
   \   00000146   0200               MOVS     R2,R0
   \   00000148   0B00               MOVS     R3,R1
   \   0000014A   0020               MOVS     R0,#+0
   \   0000014C   B049               LDR      R1,??main_4+0x28  ;; 0x40690000
   \   0000014E   ........           BL       __aeabi_dmul
   \   00000152   0200               MOVS     R2,R0
   \   00000154   0B00               MOVS     R3,R1
   \   00000156   0020               MOVS     R0,#+0
   \   00000158   AE49               LDR      R1,??main_4+0x2C  ;; 0xc104ff00
   \   0000015A   ........           BL       __aeabi_dadd
   \   0000015E   ........           BL       __aeabi_d2iz
   \   00000162   0004               LSLS     R0,R0,#+16
   \   00000164   0014               ASRS     R0,R0,#+16
   \   00000166   3043               ORRS     R0,R0,R6
   \   00000168   2900               MOVS     R1,R5
   \   0000016A   ........           BL       SPI_SendWord
   2226                  RF_Status.EnableRX();
   \   0000016E   AA48               LDR      R0,??main_4+0x30  ;; RF_Status + 40
   \   00000170   0068               LDR      R0,[R0, #+0]
   \   00000172   ........           BL       __iar_via_R0
   2227                  Delay(0x100000);
   \   00000176   E804               LSLS     R0,R5,#+19
   \   00000178   ........           BL       Delay
   \   0000017C   26E0               B        ??main_10
   2228                  while (RF_CheckChannel())                                                                                            
   2229                  {
   2230                    
   2231                      if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   \                     ??main_11:
   \   0000017E   9F48               LDR      R0,??main_4+0x14  ;; RF_Status + 14
   \   00000180   0121               MOVS     R1,#+1
   \   00000182   0170               STRB     R1,[R0, #+0]
   2232                      SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   \                     ??main_12:
   \   00000184   9D48               LDR      R0,??main_4+0x14  ;; RF_Status + 14
   \   00000186   0078               LDRB     R0,[R0, #+0]
   \   00000188   ........           BL       __aeabi_ui2d
   \   0000018C   0200               MOVS     R2,R0
   \   0000018E   0B00               MOVS     R3,R1
   \   00000190   9B48               LDR      R0,??main_4+0x18  ;; 0x33333333
   \   00000192   9C49               LDR      R1,??main_4+0x1C  ;; 0x3fd33333
   \   00000194   ........           BL       __aeabi_dmul
   \   00000198   0200               MOVS     R2,R0
   \   0000019A   0B00               MOVS     R3,R1
   \   0000019C   9A48               LDR      R0,??main_4+0x20  ;; 0x5c28f5c3
   \   0000019E   9B49               LDR      R1,??main_4+0x24  ;; 0x408ae28f
   \   000001A0   ........           BL       __aeabi_dadd
   \   000001A4   0200               MOVS     R2,R0
   \   000001A6   0B00               MOVS     R3,R1
   \   000001A8   0020               MOVS     R0,#+0
   \   000001AA   9949               LDR      R1,??main_4+0x28  ;; 0x40690000
   \   000001AC   ........           BL       __aeabi_dmul
   \   000001B0   0200               MOVS     R2,R0
   \   000001B2   0B00               MOVS     R3,R1
   \   000001B4   0020               MOVS     R0,#+0
   \   000001B6   9749               LDR      R1,??main_4+0x2C  ;; 0xc104ff00
   \   000001B8   ........           BL       __aeabi_dadd
   \   000001BC   ........           BL       __aeabi_d2iz
   \   000001C0   0004               LSLS     R0,R0,#+16
   \   000001C2   0014               ASRS     R0,R0,#+16
   \   000001C4   3043               ORRS     R0,R0,R6
   \   000001C6   2900               MOVS     R1,R5
   \   000001C8   ........           BL       SPI_SendWord
   \                     ??main_10:
   \   000001CC   ........           BL       RF_CheckChannel
   \   000001D0   0028               CMP      R0,#+0
   \   000001D2   07D0               BEQ      ??main_13
   \   000001D4   8948               LDR      R0,??main_4+0x14  ;; RF_Status + 14
   \   000001D6   0078               LDRB     R0,[R0, #+0]
   \   000001D8   2728               CMP      R0,#+39
   \   000001DA   D0D2               BCS      ??main_11
   \   000001DC   8749               LDR      R1,??main_4+0x14  ;; RF_Status + 14
   \   000001DE   401C               ADDS     R0,R0,#+1
   \   000001E0   0870               STRB     R0,[R1, #+0]
   \   000001E2   CFE7               B        ??main_12
   2233                  }  
   2234                  RF_Status.MasterMode=1;
   \                     ??main_13:
   \   000001E4   8D48               LDR      R0,??main_4+0x34  ;; RF_Status + 13
   \   000001E6   0121               MOVS     R1,#+1
   \   000001E8   0170               STRB     R1,[R0, #+0]
   \   000001EA   0DE0               B        ??main_14
   2235              }else{  //je¿eli slave
   2236                
   2237                /*
   2238                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   2239                  RF_Status.EnableRX();
   2240                  Delay(0x100000);
   2241                  while (RF_CheckChannel())                                                                                            
   2242                  {
   2243                    
   2244                      if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   2245                      SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   2246                  }  
   2247                */
   2248                
   2249                  RF_Status.ChSlave=1;
   \                     ??main_9:
   \   000001EC   8C48               LDR      R0,??main_4+0x38  ;; RF_Status + 15
   \   000001EE   0121               MOVS     R1,#+1
   \   000001F0   0170               STRB     R1,[R0, #+0]
   2250                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   000001F2   0221               MOVS     R1,#+2
   \   000001F4   8B48               LDR      R0,??main_4+0x3C  ;; 0xa07c
   \   000001F6   ........           BL       SPI_SendWord
   2251                  RF_Status.MasterMode=0;  
   \   000001FA   8848               LDR      R0,??main_4+0x34  ;; RF_Status + 13
   \   000001FC   0021               MOVS     R1,#+0
   \   000001FE   0170               STRB     R1,[R0, #+0]
   2252                  RF_Status.EnableRX();
   \   00000200   8548               LDR      R0,??main_4+0x30  ;; RF_Status + 40
   \   00000202   0068               LDR      R0,[R0, #+0]
   \   00000204   ........           BL       __iar_via_R0
   2253              }
   2254          
   2255              RF_Status.AllReady=1;
   \                     ??main_14:
   \   00000208   8748               LDR      R0,??main_4+0x40  ;; RF_Status + 16
   \   0000020A   0121               MOVS     R1,#+1
   \   0000020C   0170               STRB     R1,[R0, #+0]
   2256              
   2257              
   2258              
   2259          
   2260          
   2261              
   2262              
   2263              //odczyt has³a------------------------------------------    
   2264              if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEC)
   \   0000020E   606D               LDR      R0,[R4, #+84]
   \   00000210   8649               LDR      R1,??main_4+0x44  ;; 0xd7dc
   \   00000212   4118               ADDS     R1,R0,R1
   \   00000214   0A78               LDRB     R2,[R1, #+0]
   \   00000216   EC2A               CMP      R2,#+236
   \   00000218   0ED1               BNE      ??main_15
   2265              {//je¿eli nie wymagane has³o
   2266               g_NeedPass=0; 
   \   0000021A   0021               MOVS     R1,#+0
   \   0000021C   A174               STRB     R1,[R4, #+18]
   2267               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   0000021E   844D               LDR      R5,??main_4+0x48  ;; 0xd7dd
   \                     ??main_16:
   \   00000220   0A00               MOVS     R2,R1
   \   00000222   082A               CMP      R2,#+8
   \   00000224   33D2               BCS      ??main_17
   \   00000226   A318               ADDS     R3,R4,R2
   \   00000228   2033               ADDS     R3,R3,#+32
   \   0000022A   8218               ADDS     R2,R0,R2
   \   0000022C   525D               LDRB     R2,[R2, R5]
   \   0000022E   1A70               STRB     R2,[R3, #+0]
   \   00000230   491C               ADDS     R1,R1,#+1
   \   00000232   0906               LSLS     R1,R1,#+24
   \   00000234   090E               LSRS     R1,R1,#+24
   \   00000236   F3E7               B        ??main_16
   2268              }else if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEB)
   \                     ??main_15:
   \   00000238   0978               LDRB     R1,[R1, #+0]
   \   0000023A   EB29               CMP      R1,#+235
   \   0000023C   0FD1               BNE      ??main_18
   2269              {//je¿eli nie wymagane has³o
   2270               g_NeedPass=1; 
   \   0000023E   0121               MOVS     R1,#+1
   \   00000240   A174               STRB     R1,[R4, #+18]
   2271               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   00000242   0021               MOVS     R1,#+0
   \   00000244   7A4D               LDR      R5,??main_4+0x48  ;; 0xd7dd
   \                     ??main_19:
   \   00000246   0A00               MOVS     R2,R1
   \   00000248   082A               CMP      R2,#+8
   \   0000024A   20D2               BCS      ??main_17
   \   0000024C   A318               ADDS     R3,R4,R2
   \   0000024E   2033               ADDS     R3,R3,#+32
   \   00000250   8218               ADDS     R2,R0,R2
   \   00000252   525D               LDRB     R2,[R2, R5]
   \   00000254   1A70               STRB     R2,[R3, #+0]
   \   00000256   491C               ADDS     R1,R1,#+1
   \   00000258   0906               LSLS     R1,R1,#+24
   \   0000025A   090E               LSRS     R1,R1,#+24
   \   0000025C   F3E7               B        ??main_19
   2272              }else
   2273              {//jezeli nie zdefiniowano  - zdefiniuj i zapisz has³o domyœlne i ustaw jako nie wymagane
   2274               
   2275               //zapis has³a do flash
   2276               unsigned int Save = __get_interrupt_state();  
   \                     ??main_18:
   \   0000025E   ........           BL       __iar_get_interrupt_state
   \   00000262   0500               MOVS     R5,R0
   2277               __disable_interrupt();
   \   00000264   ........           BL       __iar_disable_interrupt
   2278               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])),0,g_Password_1,9);
   2279               
   2280                FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])), g_Password_1, 9);
                       ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   00000268   0922               MOVS     R2,#+9
   \   0000026A   2100               MOVS     R1,R4
   \   0000026C   2031               ADDS     R1,R1,#+32
   \   0000026E   7148               LDR      R0,??main_4+0x4C  ;; 0x13d7dd
   \   00000270   ........           BL       FlashWrite
   2281               char NeedPassFlag=0xEC;
   \   00000274   6846               MOV      R0,SP
   \   00000276   EC21               MOVS     R1,#+236
   \   00000278   0171               STRB     R1,[R0, #+4]
   2282               g_NeedPass=0; 
   \   0000027A   0020               MOVS     R0,#+0
   \   0000027C   A074               STRB     R0,[R4, #+18]
   2283               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)),0,&NeedPassFlag,1);
   2284               FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)), &NeedPassFlag, 1);
   \   0000027E   0122               MOVS     R2,#+1
   \   00000280   01A9               ADD      R1,SP,#+4
   \   00000282   6D48               LDR      R0,??main_4+0x50  ;; 0x13d7dc
   \   00000284   ........           BL       FlashWrite
   2285               __set_interrupt_state(Save);
   \   00000288   2800               MOVS     R0,R5
   \   0000028A   ........           BL       __iar_set_interrupt_state
   2286               //koniec zapisu do flash
   2287              }
   2288              //koniec odczytu has³a ---------------------------------------- 
   2289          
   2290          
   2291              
   2292              
   2293              
   2294              
   2295              USB_Connect(&sUsb);    
   \                     ??main_17:
   \   0000028E   0A48               LDR      R0,??main_0+0x14  ;; `?<Constant "Bezpiecznik RF">` + 16
   \   00000290   ........           BL       USB_Connect
   2296             __enable_interrupt();   
   \   00000294   ........           BL       __iar_enable_interrupt
   \   00000298   6849               LDR      R1,??main_4+0x54  ;; NET
   \   0000029A   6948               LDR      R0,??main_4+0x58  ;; 0xfffc4000
   2297             
   2298             
   2299           
   2300          #ifdef __WIFI_MODULE   
   2301             InitWizFi(AT91C_BASE_US1, &NET);
   \   0000029C   ........           BL       InitWizFi
   \   000002A0   65E0               B        ??main_20
   \   000002A2   C046               Nop      
   \                     ??main_0:
   \   000002A4   ........           DC32     DateTime
   \   000002A8   ........           DC32     RF_Status
   \   000002AC   ........           DC32     MainStage + 950
   \   000002B0   00F4FFFF           DC32     0xfffff400
   \   000002B4   34F4FFFF           DC32     0xfffff434
   \   000002B8   ........           DC32     `?<Constant "Bezpiecznik RF">` + 16
   \   000002BC   ........           DC32     gProg
   \   000002C0   FFFFEF00           DC32     0xefffff
   \   000002C4   E6D70000           DC32     0xd7e6
   \   000002C8   5CD91300           DC32     0x13d95c
   2302          #endif
   2303          
   2304             
   2305             
   2306              /*
   2307             //ustawienie wys³ania stanów  do wszystkich wêz³ów po restarcie
   2308              for (char i=0; i<NumberNeurons; i++)
   2309              {
   2310                MainStage.SendStageChange[i]=ChangeStageFlag; 
   2311              }
   2312             */
   2313             
   2314             
   2315              while (1) 
   2316              {
   2317                  AT91F_WDTRestart(AT91C_BASE_WDTC);
   2318                  
   2319                  
   2320                  if (ForwardUSB2Serialferst==1)
   2321                  {
   2322                      // Start USB->Serial forward mechanism
   2323                      ForwardUSB2Serial(0, 0, 0, 0);
   2324                      ForwardUSB2Serialferst=2;
   2325                  }
   2326                
   2327                 
   2328                  
   2329                 
   2330                 if ((!((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)) && (VBUS_old==1))
   2331                 {
   2332                   VBUS_old=0;
   2333                   ISR_VBus();
   2334                 }
   2335                 /*
   2336                 if (((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) && (VBUS_old==0))
   2337                 {
   2338                   VBUS_old=1;
   2339                   ISR_VBus();
   2340                 } 
   2341                 */
   2342                 
   2343                  
   2344                  
   2345                   
   2346                  if ((g_NextTimeProgram<=g_counter) || (g_NextTimeProgram>g_counter+ProgramPeriod))
   2347                   {
   2348                    
   2349                     
   2350                       char WaitingRF_WrTask=0;
   2351                       if (g_NextTimeProgram<g_counter+1000)    //blokowanie wykonania programu jezeli istnieje oczekuj¹ce ¿¹danie wys³ania stanu do któregokolwiek wêz³a. Blokowanie nie mo¿e przekroczyæ 1s. 
   2352                       {
   2353                           char Nd=1;
   2354                           while ((Nd<NumberNeurons) && (WaitingRF_WrTask==0))
   2355                            {
   2356                                if ((MainStage.SendStageChange[Nd]>0))    
   \                     ??main_21:
   \   000002CC   5D49               LDR      R1,??main_4+0x5C  ;; 0x6eb
   \   000002CE   0200               MOVS     R2,R0
   \   000002D0   5D4B               LDR      R3,??main_4+0x60  ;; MainStage
   \   000002D2   9A18               ADDS     R2,R3,R2
   \   000002D4   515C               LDRB     R1,[R2, R1]
   \   000002D6   0029               CMP      R1,#+0
   \   000002D8   00D0               BEQ      ??main_22
   2357                                {
   2358                                    WaitingRF_WrTask=1;
   \   000002DA   0125               MOVS     R5,#+1
   2359                                }
   2360                                Nd++;  
   \                     ??main_22:
   \   000002DC   401C               ADDS     R0,R0,#+1
   \   000002DE   0006               LSLS     R0,R0,#+24
   \   000002E0   000E               LSRS     R0,R0,#+24
   2361                            } 
   \                     ??main_23:
   \   000002E2   0100               MOVS     R1,R0
   \   000002E4   2329               CMP      R1,#+35
   \   000002E6   01D2               BCS      ??main_24
   \   000002E8   2900               MOVS     R1,R5
   \   000002EA   EFD0               BEQ      ??main_21
   2362                       }
   2363          
   2364                      if (WaitingRF_WrTask==0)
   \                     ??main_24:
   \   000002EC   002D               CMP      R5,#+0
   \   000002EE   0AD1               BNE      ??main_25
   2365                      {
   2366                        g_NextTimeProgram=g_counter+ProgramPeriod;
   \   000002F0   2200               MOVS     R2,R4
   \   000002F2   3832               ADDS     R2,R2,#+56
   \   000002F4   AF20               MOVS     R0,#+175
   \   000002F6   4000               LSLS     R0,R0,#+1        ;; #+350
   \   000002F8   0021               MOVS     R1,#+0
   \   000002FA   8019               ADDS     R0,R0,R6
   \   000002FC   7941               ADCS     R1,R1,R7
   \   000002FE   03C2               STM      R2!,{R0,R1}
   2367                        Program(&gProg);
   \   00000300   5248               LDR      R0,??main_4+0x64  ;; gProg
   \   00000302   ........           BL       Program
   2368                      }
   2369                      
   2370                      
   2371                      
   2372                      
   2373                   }
   2374                   
   2375                  
   2376                  if ((g_counter>4000) && (MenuLevel==0)) 
   \                     ??main_25:
   \   00000306   2000               MOVS     R0,R4
   \   00000308   3030               ADDS     R0,R0,#+48
   \   0000030A   03C8               LDM      R0!,{R0,R1}
   \   0000030C   504A               LDR      R2,??main_4+0x68  ;; 0xfa1
   \   0000030E   0023               MOVS     R3,#+0
   \   00000310   9942               CMP      R1,R3
   \   00000312   0AD3               BCC      ??main_26
   \   00000314   01D8               BHI      ??main_27
   \   00000316   9042               CMP      R0,R2
   \   00000318   07D3               BCC      ??main_26
   \                     ??main_27:
   \   0000031A   4E48               LDR      R0,??main_4+0x6C  ;; MenuLevel
   \   0000031C   0168               LDR      R1,[R0, #+0]
   \   0000031E   0029               CMP      R1,#+0
   \   00000320   03D1               BNE      ??main_26
   2377                  { 
   2378                      MenuLevel=1;   
   2379                    #ifdef _TESTER_ 
   2380          
   2381                      MenuLevel=1134;
   \   00000322   4D49               LDR      R1,??main_4+0x70  ;; 0x46e
   \   00000324   0160               STR      R1,[R0, #+0]
   2382                    #endif   
   2383                    MenuPaint();
   \   00000326   ........           BL       MenuPaint
   2384                  }
   2385                  
   2386          
   2387                    
   2388          #ifdef __WIFI_MODULE     
   2389                  if (NET.WiFi.On)
   \                     ??main_26:
   \   0000032A   4C48               LDR      R0,??main_4+0x74  ;; NET + 80
   \   0000032C   0078               LDRB     R0,[R0, #+0]
   \   0000032E   0028               CMP      R0,#+0
   \   00000330   14D0               BEQ      ??main_28
   2390                  {
   2391                      //wifi-------------------------------------------------------------------
   2392                      if ((g_counter>6000) /*&&  (g_counter%200==0)*/)
   \   00000332   2000               MOVS     R0,R4
   \   00000334   3030               ADDS     R0,R0,#+48
   \   00000336   03C8               LDM      R0!,{R0,R1}
   \   00000338   494A               LDR      R2,??main_4+0x78  ;; 0x1771
   \   0000033A   0023               MOVS     R3,#+0
   \   0000033C   9942               CMP      R1,R3
   \   0000033E   07D3               BCC      ??main_29
   \   00000340   01D8               BHI      ??main_30
   \   00000342   9042               CMP      R0,R2
   \   00000344   04D3               BCC      ??main_29
   2393                      {
   2394                        CheckVarChangeHTTP(Buff_TX_1 ,AT91C_BASE_US1, &NET);
   \                     ??main_30:
   \   00000346   3D4A               LDR      R2,??main_4+0x54  ;; NET
   \   00000348   3D49               LDR      R1,??main_4+0x58  ;; 0xfffc4000
   \   0000034A   4648               LDR      R0,??main_4+0x7C  ;; Buff_TX_1
   \   0000034C   ........           BL       CheckVarChangeHTTP
   2395                      }
   2396                  
   2397                      WiFi(US1_Buffer, Buff_TX_1 ,AT91C_BASE_US1, &NET);
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

  static void CBK_Suspend(const S_usb *pUsb)
              ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\main.c",535  Warning[Pe177]: 
          function "CBK_Suspend" was declared but never referenced
   \                     ??main_29:
   \   00000350   3A4B               LDR      R3,??main_4+0x54  ;; NET
   \   00000352   3B4A               LDR      R2,??main_4+0x58  ;; 0xfffc4000
   \   00000354   4349               LDR      R1,??main_4+0x7C  ;; Buff_TX_1
   \   00000356   4448               LDR      R0,??main_4+0x80  ;; US1_Buffer
   \   00000358   ........           BL       WiFi
   2398                  }
   2399                  //CheckConnectionStatus();
   2400          #endif  
   2401            
   2402                  
   2403                  
   2404                  //bezpiecznik RF zabezpiecza przed zablokowaniem RFa
   2405                  if (RF_Status.RfFuse>=60) 
   \                     ??main_28:
   \   0000035C   4348               LDR      R0,??main_4+0x84  ;; RF_Status + 17
   \   0000035E   0078               LDRB     R0,[R0, #+0]
   \   00000360   3C28               CMP      R0,#+60
   \   00000362   04D3               BCC      ??main_20
   2406                  {
   2407                      #ifdef _DEBUG_
   2408                               MESSAGE("Bezpiecznik RF"); 
   \   00000364   4248               LDR      R0,??main_4+0x88  ;; `?<Constant "Bezpiecznik RF">`
   \   00000366   ........           BL       MESSAGE
   2409                      #endif
   2410                                
   2411                      RF_Init();          
   \   0000036A   ........           BL       RF_Init
   2412                  }   
   \                     ??main_20:
   \   0000036E   4148               LDR      R0,??main_4+0x8C  ;; 0xfffffd40
   \   00000370   ........           BL       AT91F_WDTRestart
   \   00000374   A07E               LDRB     R0,[R4, #+26]
   \   00000376   0128               CMP      R0,#+1
   \   00000378   07D1               BNE      ??main_31
   \   0000037A   0023               MOVS     R3,#+0
   \   0000037C   1A00               MOVS     R2,R3
   \   0000037E   1100               MOVS     R1,R2
   \   00000380   0800               MOVS     R0,R1
   \   00000382   ........           BL       ForwardUSB2Serial
   \   00000386   0220               MOVS     R0,#+2
   \   00000388   A076               STRB     R0,[R4, #+26]
   \                     ??main_31:
   \   0000038A   3B48               LDR      R0,??main_4+0x90  ;; 0xfffff43c
   \   0000038C   0068               LDR      R0,[R0, #+0]
   \   0000038E   0221               MOVS     R1,#+2
   \   00000390   0842               TST      R0,R1
   \   00000392   07D1               BNE      ??main_32
   \   00000394   3948               LDR      R0,??main_4+0x94  ;; VBUS_old
   \   00000396   0178               LDRB     R1,[R0, #+0]
   \   00000398   0129               CMP      R1,#+1
   \   0000039A   03D1               BNE      ??main_32
   \   0000039C   0021               MOVS     R1,#+0
   \   0000039E   0170               STRB     R1,[R0, #+0]
   \   000003A0   ........           BL       ISR_VBus
   \                     ??main_32:
   \   000003A4   2000               MOVS     R0,R4
   \   000003A6   3830               ADDS     R0,R0,#+56
   \   000003A8   0CC8               LDM      R0!,{R2,R3}
   \   000003AA   2000               MOVS     R0,R4
   \   000003AC   3030               ADDS     R0,R0,#+48
   \   000003AE   C0C8               LDM      R0!,{R6,R7}
   \   000003B0   9F42               CMP      R7,R3
   \   000003B2   0CD8               BHI      ??main_33
   \   000003B4   01D3               BCC      ??main_34
   \   000003B6   9642               CMP      R6,R2
   \   000003B8   09D2               BCS      ??main_33
   \                     ??main_34:
   \   000003BA   AF20               MOVS     R0,#+175
   \   000003BC   4000               LSLS     R0,R0,#+1        ;; #+350
   \   000003BE   0021               MOVS     R1,#+0
   \   000003C0   8019               ADDS     R0,R0,R6
   \   000003C2   7941               ADCS     R1,R1,R7
   \   000003C4   9942               CMP      R1,R3
   \   000003C6   9ED8               BHI      ??main_25
   \   000003C8   01D3               BCC      ??main_33
   \   000003CA   9042               CMP      R0,R2
   \   000003CC   9BD2               BCS      ??main_25
   \                     ??main_33:
   \   000003CE   0025               MOVS     R5,#+0
   \   000003D0   FA20               MOVS     R0,#+250
   \   000003D2   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   000003D4   2900               MOVS     R1,R5
   \   000003D6   8019               ADDS     R0,R0,R6
   \   000003D8   7941               ADCS     R1,R1,R7
   \   000003DA   8B42               CMP      R3,R1
   \   000003DC   86D8               BHI      ??main_24
   \   000003DE   01D3               BCC      ??main_35
   \   000003E0   8242               CMP      R2,R0
   \   000003E2   83D2               BCS      ??main_24
   \                     ??main_35:
   \   000003E4   0120               MOVS     R0,#+1
   \   000003E6   7CE7               B        ??main_23
   \                     ??main_4:
   \   000003E8   ........           DC32     RF_Status + 28
   \   000003EC   40420F00           DC32     0xf4240
   \   000003F0   ........           DC32     RF_Status + 24
   \   000003F4   7F969800           DC32     0x98967f
   \   000003F8   3F420F00           DC32     0xf423f
   \   000003FC   ........           DC32     RF_Status + 14
   \   00000400   33333333           DC32     0x33333333
   \   00000404   3333D33F           DC32     0x3fd33333
   \   00000408   C3F5285C           DC32     0x5c28f5c3
   \   0000040C   8FE28A40           DC32     0x408ae28f
   \   00000410   00006940           DC32     0x40690000
   \   00000414   00FF04C1           DC32     0xc104ff00
   \   00000418   ........           DC32     RF_Status + 40
   \   0000041C   ........           DC32     RF_Status + 13
   \   00000420   ........           DC32     RF_Status + 15
   \   00000424   7CA00000           DC32     0xa07c
   \   00000428   ........           DC32     RF_Status + 16
   \   0000042C   DCD70000           DC32     0xd7dc
   \   00000430   DDD70000           DC32     0xd7dd
   \   00000434   DDD71300           DC32     0x13d7dd
   \   00000438   DCD71300           DC32     0x13d7dc
   \   0000043C   ........           DC32     NET
   \   00000440   0040FCFF           DC32     0xfffc4000
   \   00000444   EB060000           DC32     0x6eb
   \   00000448   ........           DC32     MainStage
   \   0000044C   ........           DC32     gProg
   \   00000450   A10F0000           DC32     0xfa1
   \   00000454   ........           DC32     MenuLevel
   \   00000458   6E040000           DC32     0x46e
   \   0000045C   ........           DC32     NET + 80
   \   00000460   71170000           DC32     0x1771
   \   00000464   ........           DC32     Buff_TX_1
   \   00000468   ........           DC32     US1_Buffer
   \   0000046C   ........           DC32     RF_Status + 17
   \   00000470   ........           DC32     `?<Constant "Bezpiecznik RF">`
   \   00000474   40FDFFFF           DC32     0xfffffd40
   \   00000478   3CF4FFFF           DC32     0xfffff43c
   \   0000047C   ........           DC32     VBUS_old
   2413              }
   2414             
   2415              
   2416          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   3CF4FFFF           DC32     0xfffff43c

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   ........           DC32     MenuLevel

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   ........           DC32     `?<Constant "Bezpiecznik RF">` + 16

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   00F0FFFF           DC32     0xfffff000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   00F4FFFF           DC32     0xfffff400

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   60F4FFFF           DC32     0xfffff460

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     DateTime + 124

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   40FDFFFF           DC32     0xfffffd40

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     DateTime

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     gProg

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   70C60000           DC32     0xc670

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   00011300           DC32     0x130100

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   26BC0000           DC32     0xbc26

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   30BC0000           DC32     0xbc30

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   ........           DC32     MainStage

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   AA8AFFFF           DC32     0xffff8aaa

   \                                 In section .rodata, align 4
   \                     `?<Constant "Wyladowana">`:
   \   00000000   57796C61646F       DC8 "Wyladowana"
   \              77616E6100  
   \   0000000B   00                 DC8 0
   \   0000000C   626174657269       DC8 "bateria"
   \              6100        
   \   00000014   57657A656C3A       DC8 "Wezel:"
   \              00          
   \   0000001B   00                 DC8 0

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "
   2417          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     AT91F_AIC_ConfigureIt            24
     AT91F_AIC_EnableIt                0
     AT91F_LCD_Init                    8
     AT91F_PIO_CfgInput                0
     AT91F_PIO_CfgOutput               0
     AT91F_PIO_CfgPullup               0
     AT91F_PIO_GetInterruptStatus      0
     AT91F_PIO_InterruptEnable         0
     AT91F_PMC_EnablePeriphClock       0
     AT91F_WDTRestart                  0
     AlarmExecute                     32
     CBK_Init                         24
     CBK_NewRequest                    8
     CBK_Resume                        8
     Delay                             8
     ForwardUSB2Serial                24
     ISR_Driver                        8
     ISR_VBus                         24
     InitFramework                    24
     RamToFlash                       24
     SendViaUSB                       16
     TestHendel                        8
     TestInit                         24
     ThermostatsExecute               24
     ThermostatsTimeChartExecute      24
     Timer_10ms                        8
     Timer_10ms_Setup                  0
     Timer_10us                        0
     Timer_10us_Setup                  0
     Timer_1h                          8
     Timer_1min                        8
     Timer_1ms                        16
     Timer_1ms_Setup                   0
     Timer_1s                         56
     TimetableExecute                 32
     USB_Attach                        8
     USB_Connect                       8
     USB_Disconnect                    8
     USB_GetDriverID                   0
     USB_GetDriverInterface            0
     USB_GetState                      0
     USB_Handler                       8
     main                             32
     watchdogEnable                    8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     identyfikacja                  16
     system                          4
     AT91F_AIC_ConfigureIt          44
     AT91F_AIC_EnableIt             12
     AT91F_PIO_CfgOutput             6
     AT91F_PIO_CfgInput              6
     AT91F_PIO_CfgPullup             8
     AT91F_PIO_InterruptEnable       4
     AT91F_PIO_GetInterruptStatus    4
     AT91F_PMC_EnablePeriphClock     4
     AT91F_WDTRestart               12
     AT91F_LCD_Init                164
     USB_GetDriverInterface          6
     USB_GetDriverID                 6
     USB_Handler                    18
     USB_Attach                     18
     USB_Connect                    18
     USB_Disconnect                 18
     USB_GetState                   10
     APC                             1
     g_czas_petli                    1
     komunikacja_ok                  4
     rej_prog                       40
     LifeCouter                      4
     LifeCouterMax                   4
     USB_busy                        1
     advY                            4
     advX                            4
     g_leng                          4
     g_level                         1
     g_Message                       4
     g_info                          4
     NET                           448
     LightLCD_OFF_Counter            1
     LightLCD_OFF_Counter2           1
     LightLCD_OFF_Curent             1
     TimeInMasterMode                8
     ReciveFrameToMe                 1
     tmp_i                           1
     licznik                         4
     licznik2                        4
     licznik3                        4
     memory                          4
     sss                             4
     int1                            4
     sSetup                          8
     dState                          4
     sCallbacks                     24
     ?<Constant "Bezpiecznik RF">   40
     ISR_Driver                     14
     ISR_VBus                      176
     CBK_Init                       80
     CBK_Resume                     12
     CBK_NewRequest                 14
     SendViaUSB                     28
     ForwardUSB2Serial              96
     Delay                          18
     memory_read                     4
     InitFramework                 272
     Timer_10us                     12
     Timer_10us_Setup              128
     TimetableExecute              440
     ThermostatsTimeChartExecute   200
     LastTemp                       16
     ThermostatsExecute            364
     Hysteresis                      8
     AlarmExecute                  536
     Timer_1h                       12
     Timer_1min                     16
     XY_Tab                         44
     display_cykl                    1
     Timer_1s                     1416
     Timer_10ms                    288
     Timer_10ms_Setup              132
     Counter                         4
     US0_Counter                     4
     US1_Counter                     4
     CounterForTimer10ms             1
     Timer_1ms                     556
     Timer_1ms_Setup               132
     RamToFlash                    216
     testcount                       4
     TestHendel                     44
     TestInit                      108
     string                         28
     watchdogEnable                 52
     DateTime                     1344
     FlashProgramReserveOfset        4
     g_Password_2                    8
     AdressModbus                    1
     g_SlaveConnect                 12
     g_Restart_Program               1
     AlarmScreenAction             160
     pEndpoints                    160
     tProgramTabSize                 4
     stop                            4
     Out                            36
     X_up_old                        4
     Y_up_old                        4
     X_down_old                      4
     Y_down_old                      4
     g_PC_Connected_timeout          1
     TimeCompil                     12
     DateCompil                     12
     main                         1152
     ??DataTable3                    4
     ??DataTable5                    4
     ??DataTable8                    4
     ??DataTable9                    4
     ??DataTable10                   4
     ??DataTable11                   4
     ??DataTable13                   4
     ??DataTable16                   4
     ??DataTable17                   4
     ??DataTable18                   4
     ??DataTable19                   4
     ??DataTable20                   4
     ??DataTable21                   4
     ??DataTable22                   4
     ??DataTable23                   4
     ??DataTable24                   4
     ?<Constant "Wyladowana">       28
     ?<Constant "   ">               4
      Others                        68

 
   690 bytes in section .bss
 1 776 bytes in section .data
   116 bytes in section .rodata
 7 004 bytes in section Debug.txt
 
 6 578 bytes of CODE  memory (+ 426 bytes shared)
   116 bytes of CONST memory
 2 466 bytes of DATA  memory

Errors: none
Warnings: 33
