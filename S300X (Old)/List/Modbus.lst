###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           11/Sep/2013  19:44:44 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\Modbus.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Modbus.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_ -D __ALARM -D     #
#                    __WIFI_MODULE -D _DEBUG_ -D S300iOld -D _ADMINISTRATOR_  #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.4 -         #
#                    12.06.2013\S300X (Old)\List\" --diag_suppress Pa082 -o   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\S300X (Old)\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.4 -     #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Ol                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\List\Modbus.lst                   #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\Obj\Modbus.o                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Modbus.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : Modbus.c                                 *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 16.01.2008                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*//
     19          //****************************************************************************//
     20          //
     21          // Typowe funkcje zdefiniowane w protokole Modbus:
     22          //    1  - Read Coil Status           - odczyt biezacego stanu grupy wyjsc cyfrowych,
     23          //    2  - Read Input Status          - odczyt stanu grupy wejsc cyfrowych,
     24          //    3  - Read Holding Register      - odczyt zawartosci grupy rejestrów/analogów wyjsciowych,
     25          //    4  - Read Input Register        - odczyt zawartosci grupy rejestrów/analogów wejsciowych,
     26          //    5  - Force Single Coil          - ustawienie stanu jednego wyjscia cyfrowego,
     27          //    6  - Preset Single Register     - zapis do pojedynczego rejestru/analogu wyjsciowego,
     28          //    7  - Read Exception Status      - odczyt statusu urzadzenia Slave,
     29          //    8  - Diagnostics                - test diagnostyczny,
     30          //    9  - Force Multiple Coils       - ustawienie stanu grupy wyjsc cyfrowych,
     31          //    10 - Preset Multiple Register   - zapis do grupy rejestrów/analogów wyjsciowych,
     32          //    11 - Report Slave ID            - odczyt ID jednostki Slave,
     33          //    12 - Reset Communication Link   - resetowanie polaczenia,
     34          //    13 - Read General Reference     - odczyt rejestrów w pamieci rozszerzonej,
     35          //    14 - Write General Reference    - zapis do rejestrów w pamieci rozszerzonej,
     36          //    15 - Write Multiple Coils       - grupowy zapis wyjœæ cyfrowych / bitów w rejestrach,
     37          //    16 - Write Register             - odczyt/zapis grupy rejestrów,
     38          //    17 - Read FIFO Queue            - odczyt kolejki FIFO.
     39          //****************************************************************************//
     40          //****************************************************************************//
     41          
     42          
     43          
     44          
     45          
     46          #include "Modbus.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetNextTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetNextTx:
   \   00000000   8161               STR      R1,[R0, #+24]
   \   00000002   C261               STR      R2,[R0, #+28]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PDC_SetTx(AT91PS_PDC, char *, unsigned int)
   \                     AT91F_PDC_SetTx:
   \   00000000   8160               STR      R1,[R0, #+8]
   \   00000002   C260               STR      R2,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsTxEmpty:
   \   00000000   C068               LDR      R0,[R0, #+12]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000000A   000E               LSRS     R0,R0,#+24
   \   0000000C   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork int AT91F_PDC_IsNextTxEmpty(AT91PS_PDC)
   \                     AT91F_PDC_IsNextTxEmpty:
   \   00000000   C069               LDR      R0,[R0, #+28]
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   8041               SBCS     R0,R0,R0
   \   00000006   C00F               LSRS     R0,R0,#+31
   \   00000008   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000000A   000E               LSRS     R0,R0,#+24
   \   0000000C   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PDC_SendFrame(AT91PS_PDC, char *, unsigned int, char *, unsigned int)
   \                     AT91F_PDC_SendFrame:
   \   00000000   F8B5               PUSH     {R3-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
   \   00000008   069F               LDR      R7,[SP, #+24]
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       AT91F_PDC_IsTxEmpty
   \   00000010   0028               CMP      R0,#+0
   \   00000012   0BD0               BEQ      ??AT91F_PDC_SendFrame_0
   \   00000014   3200               MOVS     R2,R6
   \   00000016   2900               MOVS     R1,R5
   \   00000018   2000               MOVS     R0,R4
   \   0000001A   ........           BL       AT91F_PDC_SetTx
   \   0000001E   3A00               MOVS     R2,R7
   \   00000020   0099               LDR      R1,[SP, #+0]
   \   00000022   2000               MOVS     R0,R4
   \   00000024   ........           BL       AT91F_PDC_SetNextTx
   \   00000028   0220               MOVS     R0,#+2
   \   0000002A   0CE0               B        ??AT91F_PDC_SendFrame_1
   \                     ??AT91F_PDC_SendFrame_0:
   \   0000002C   2000               MOVS     R0,R4
   \   0000002E   ........           BL       AT91F_PDC_IsNextTxEmpty
   \   00000032   0028               CMP      R0,#+0
   \   00000034   06D0               BEQ      ??AT91F_PDC_SendFrame_2
   \   00000036   3200               MOVS     R2,R6
   \   00000038   2900               MOVS     R1,R5
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       AT91F_PDC_SetNextTx
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   00E0               B        ??AT91F_PDC_SendFrame_1
   \                     ??AT91F_PDC_SendFrame_2:
   \   00000044   0020               MOVS     R0,#+0
   \                     ??AT91F_PDC_SendFrame_1:
   \   00000046   01B0               ADD      SP,SP,#+4
   \   00000048   F0BC               POP      {R4-R7}
   \   0000004A   02BC               POP      {R1}
   \   0000004C   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_US_SendFrame(AT91PS_USART, unsigned char *, unsigned int, unsigned char *, unsigned int)
   \                     AT91F_US_SendFrame:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   029C               LDR      R4,[SP, #+8]
   \   00000004   82B0               SUB      SP,SP,#+8
   \   00000006   0094               STR      R4,[SP, #+0]
   \   00000008   8024               MOVS     R4,#+128
   \   0000000A   6400               LSLS     R4,R4,#+1        ;; #+256
   \   0000000C   0019               ADDS     R0,R0,R4
   \   0000000E   ........           BL       AT91F_PDC_SendFrame
   \   00000012   02B0               ADD      SP,SP,#+8
   \   00000014   10BC               POP      {R4}
   \   00000016   02BC               POP      {R1}
   \   00000018   0847               BX       R1               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     47          
     48          
     49          
     50          /*
     51          _ModTaskTab ModTaskTab;
     52          
     53          
     54          
     55          ModTaskTab.Scene[1].Order=1;
     56          ModTaskTab.Scene[1].Q=0;
     57          ModTaskTab.Scene[1].Port=1;
     58          */
     59          
     60          
     61          //Zmienne konfiguracyjne -------------------------------------------------------     
     62          
     63              //MODBUS_0----------------------

   \                                 In section .data, align 1
     64               char US0_MasterMODBUS_ENABLE    = 1;                                      //1 -US0 jako MASTER (komunikacja MODBUS)
   \                     US0_MasterMODBUS_ENABLE:
   \   00000000   01                 DC8 1

   \                                 In section .bss, align 1
     65               char US1_MasterMODBUS_ENABLE    = 0;                                      //1 -US0 jako MASTER (komunikacja MODBUS) 
   \                     US1_MasterMODBUS_ENABLE:
   \   00000000                      DS8 1
     66          //______________________________________________________________________________
     67          
     68          
     69               
     70          
     71          
     72          //Zmienne  ---------------------------------------------------------------------     

   \                                 In section .bss, align 4
     73              _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];                                  //tablica zadañ modbus 0
   \                     ZD_MODBUS_0:
   \   00000000                      DS8 260

   \                                 In section .bss, align 1
     74              char g_Current_ZD_MODBUS_0=0;                                               //bierz¹ce zadanie modbus wed³ug tablicy ZD_MODBUS_0
   \                     g_Current_ZD_MODBUS_0:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     75              char g_ERR_ZD_MODBUS_0=0;                                                   //b³¹d zadañ MODBUS 0 
   \                     g_ERR_ZD_MODBUS_0:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     76              char g_Ans_ZD_MODBUS_0=0;                                                   //1- odebrano odpowiedz na pytanie 
   \                     g_Ans_ZD_MODBUS_0:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     77              BYTE Buff_TX_0[US0_BUFFER_Tx_SIZE];                                                        //bufor nadawczy USART 0 
   \                     Buff_TX_0:
   \   00000000                      DS8 20
     78              

   \                                 In section .bss, align 4
     79              _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];                                  //tablica zadañ modbus 0
   \                     ZD_MODBUS_1:
   \   00000000                      DS8 260

   \                                 In section .bss, align 1
     80              char g_Current_ZD_MODBUS_1=0;                                               //bierz¹ce zadanie modbus wed³ug tablicy ZD_MODBUS_0
   \                     g_Current_ZD_MODBUS_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     81              char g_ERR_ZD_MODBUS_1=0;                                                   //b³¹d zadañ MODBUS 0 
   \                     g_ERR_ZD_MODBUS_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     82              char g_Ans_ZD_MODBUS_1=0;                                                   //1- odebrano odpowiedz na pytanie 
   \                     g_Ans_ZD_MODBUS_1:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     83              char Buff_TX_1[US1_BUFFER_Tx_SIZE];                                         //bufor nadawczy USART 0 
   \                     Buff_TX_1:
   \   00000000                      DS8 580
     84          //______________________________________________________________________________
     85          
     86          
     87              
     88              
     89              
     90          //Zmienne zewnêtrzne -----------------------------------------------------------    
     91              extern RAM ram;
     92              extern char AdressModbus;
     93              extern int SendModbusEnable;
     94              extern int g_US0_Comm_TIMEOUT;
     95              extern float g_US0_OneByteTxTime;
     96              extern int g_US0_Comm_MinCykle;
     97              extern _MainStage  MainStage; 
     98          //___________________________Koniec zmiennych zewnêtrznych______________________    
     99              
    100              
    101          //void GetBinVarComm(int adr, unsigned int Length, char *Tab );
    102              
    103              
    104          //Sta³e ------------------------------------------------------------------------   
    105          

   \                                 In section .rodata, align 4
    106          const BYTE   bCRC_Hi[] = {0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
   \                     bCRC_Hi:
   \   00000000   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000010   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000020   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000030   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000040   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000050   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000060   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   00000070   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000080   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   00000090   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   000000A0   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   000000B0   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   000000C0   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
   \   000000D0   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   000000E0   01C0804100C1       DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              814000C18140
   \              01C08041    
   \   000000F0   00C1814001C0       DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              804101C08041
   \              00C18140    
    107                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    108                                    0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,
    109                                   0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,
    110                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x0,0xC1,
    111                                   0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,0x80,0x41,
    112                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x0,0xC1,
    113                                   0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    114                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    115                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,
    116                                    0x1,0xC0,0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,
    117                                   0x81,0x40,0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,
    118                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    119                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,
    120                                    0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,
    121                                   0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,
    122                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    123                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    124                                    0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,
    125                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    126                                    0x1,0xC0,0x80,0x41,0x0,0xC1,0x81,0x40,0x1,0xC0,
    127                                   0x80,0x41,0x0,0xC1,0x81,0x40,0x0,0xC1,0x81,0x40,
    128                                    0x1,0xC0,0x80,0x41,0x1,0xC0,0x80,0x41,0x0,0xC1,
    129                                   0x81,0x40,0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,
    130                                    0x0,0xC1,0x81,0x40,0x1,0xC0,0x80,0x41,0x1,0xC0,
    131                                   0x80,0x41,0x0,0xC1,0x81,0x40};
    132          

   \                                 In section .rodata, align 4
    133          const BYTE  bCRC_Lo[] = { 0x0,0xC0,0xC1,0x1,0xC3,0x3,0x2,0xC2,0xC6,0x6,
   \                     bCRC_Lo:
   \   00000000   00C0C101C303       DC8 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              02C2C60607C7
   \              05C5C404CC  
   \   00000011   0C0DCD0FCFCE       DC8 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200
   \              0E0ACACB0BC9
   \              0908C8      
   \   00000020   D81819D91BDB       DC8 216, 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28
   \              DA1A1EDEDF1F
   \              DD1D1C      
   \   0000002F   DC14D4D515D7       DC8 220, 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209
   \              1716D6D21213
   \              D311D1      
   \   0000003E   D010F03031F1       DC8 208, 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245
   \              33F3F23236F6
   \              F737F5      
   \   0000004D   3534F43CFCFD       DC8 53, 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251
   \              3DFF3F3EFEFA
   \              3A3BFB      
   \   0000005C   39F9F83828E8       DC8 57, 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47
   \              E929EB2B2AEA
   \              EE2E2F      
   \   0000006B   EF2DEDEC2CE4       DC8 239, 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226
   \              2425E527E7E6
   \              2622E2      
   \   0000007A   E323E12120E0       DC8 227, 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102
   \              A06061A163A3
   \              A26266      
   \   00000089   A6A767A56564       DC8 166, 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111
   \              A46CACAD6DAF
   \              6F          
   \   00000096   6EAEAA6A6BAB       DC8 110, 174, 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185
   \              69A9A86878B8
   \              B9          
   \   000000A3   79BB7B7ABABE       DC8 121, 187, 123, 122, 186, 190, 126, 127, 191, 125, 189, 188, 124
   \              7E7FBF7DBDBC
   \              7C          
   \   000000B0   B47475B577B7       DC8 180, 116, 117, 181, 119, 183, 182, 118, 114, 178, 179, 115, 177
   \              B67672B2B373
   \              B1          
   \   000000BD   7170B0509091       DC8 113, 112, 176, 80, 144, 145, 81, 147, 83, 82, 146, 150, 86, 87, 151
   \              519353529296
   \              565797      
   \   000000CC   559594549C5C       DC8 85, 149, 148, 84, 156, 92, 93, 157, 95, 159, 158, 94, 90, 154, 155
   \              5D9D5F9F9E5E
   \              5A9A9B      
   \   000000DB   5B9959589888       DC8 91, 153, 89, 88, 152, 136, 72, 73, 137, 75, 139, 138, 74, 78, 142
   \              4849894B8B8A
   \              4A4E8E      
   \   000000EA   8F4F8D4D4C8C       DC8 143, 79, 141, 77, 76, 140, 68, 132, 133, 69, 135, 71, 70, 134, 130
   \              448485458747
   \              468682      
   \   000000F9   424383418180       DC8 66, 67, 131, 65, 129, 128, 64
   \              40          
    134                                    0x7,0xC7,0x5,0xC5,0xC4,0x4,0xCC,0xC,0xD,0xCD,
    135                                    0xF,0xCF,0xCE,0xE,0xA,0xCA,0xCB,0xB,0xC9,0x9,
    136                                    0x8,0xC8,0xD8,0x18,0x19,0xD9,0x1B,0xDB,0xDA,0x1A,
    137                                   0x1E,0xDE,0xDF,0x1F,0xDD,0x1D,0x1C,0xDC,0x14,0xD4,
    138                                   0xD5,0x15,0xD7,0x17,0x16,0xD6,0xD2,0x12,0x13,0xD3,
    139                                   0x11,0xD1,0xD0,0x10,0xF0,0x30,0x31,0xF1,0x33,0xF3,
    140                                   0xF2,0x32,0x36,0xF6,0xF7,0x37,0xF5,0x35,0x34,0xF4,
    141                                   0x3C,0xFC,0xFD,0x3D,0xFF,0x3F,0x3E,0xFE,0xFA,0x3A,
    142                                   0x3B,0xFB,0x39,0xF9,0xF8,0x38,0x28,0xE8,0xE9,0x29,
    143                                   0xEB,0x2B,0x2A,0xEA,0xEE,0x2E,0x2F,0xEF,0x2D,0xED,
    144                                   0xEC,0x2C,0xE4,0x24,0x25,0xE5,0x27,0xE7,0xE6,0x26,
    145                                   0x22,0xE2,0xE3,0x23,0xE1,0x21,0x20,0xE0,0xA0,0x60,
    146                                   0x61,0xA1,0x63,0xA3,0xA2,0x62,0x66,0xA6,0xA7,0x67,
    147                                   0xA5,0x65,0x64,0xA4,0x6C,0xAC,0xAD,0x6D,0xAF,0x6F,
    148                                   0x6E,0xAE,0xAA,0x6A,0x6B,0xAB,0x69,0xA9,0xA8,0x68,
    149                                   0x78,0xB8,0xB9,0x79,0xBB,0x7B,0x7A,0xBA,0xBE,0x7E,
    150                                   0x7F,0xBF,0x7D,0xBD,0xBC,0x7C,0xB4,0x74,0x75,0xB5,
    151                                   0x77,0xB7,0xB6,0x76,0x72,0xB2,0xB3,0x73,0xB1,0x71,
    152                                   0x70,0xB0,0x50,0x90,0x91,0x51,0x93,0x53,0x52,0x92,
    153                                   0x96,0x56,0x57,0x97,0x55,0x95,0x94,0x54,0x9C,0x5C,
    154                                   0x5D,0x9D,0x5F,0x9F,0x9E,0x5E,0x5A,0x9A,0x9B,0x5B,
    155                                   0x99,0x59,0x58,0x98,0x88,0x48,0x49,0x89,0x4B,0x8B,
    156                                   0x8A,0x4A,0x4E,0x8E,0x8F,0x4F,0x8D,0x4D,0x4C,0x8C,
    157                                   0x44,0x84,0x85,0x45,0x87,0x47,0x46,0x86,0x82,0x42,
    158                                   0x43,0x83,0x41,0x81,0x80,0x40};
    159                                   
    160          //___________________________Koniec sta³ych ____________________________________    
    161              
    162          
    163          
    164          
    165          
    166          
    167          //!-----------------------------------------------------------------------------
    168          //!  Nazwa funkcji :    crc16
    169          //!  Opis:              Oblicza sumê kontroln¹ CRC 16
    170          //!-----------------------------------------------------------------------------
    171          //!  modbusframe  - adres pierwszej cyfry
    172          //!  Length       - zakres liczb do wyliczenia CRC
    173          //!----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    174          WORD crc16(BYTE* modbusframe,int Length)
    175          {
   \                     crc16:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0200               MOVS     R2,R0
    176              int index;
    177              BYTE crc_Low = 0xFF;
   \   00000004   FF20               MOVS     R0,#+255
    178              BYTE crc_High = 0xFF;
   \   00000006   FF24               MOVS     R4,#+255
    179          
    180              for (int i_tmp = 0; i_tmp<Length; i_tmp++)
   \   00000008   0025               MOVS     R5,#+0
   \   0000000A   09E0               B        ??crc16_0
    181              {
    182              index = crc_High ^ modbusframe[i_tmp];
   \                     ??crc16_1:
   \   0000000C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000000E   240E               LSRS     R4,R4,#+24
   \   00000010   535D               LDRB     R3,[R2, R5]
   \   00000012   6340               EORS     R3,R3,R4
    183              crc_High = crc_Low ^ bCRC_Hi[index] ;
   \   00000014   094C               LDR      R4,??crc16_2     ;; bCRC_Hi
   \   00000016   E45C               LDRB     R4,[R4, R3]
   \   00000018   4440               EORS     R4,R4,R0
    184              crc_Low = bCRC_Lo[index];
   \   0000001A   0948               LDR      R0,??crc16_2+0x4  ;; bCRC_Lo
   \   0000001C   C05C               LDRB     R0,[R0, R3]
    185              }
   \   0000001E   6D1C               ADDS     R5,R5,#+1
   \                     ??crc16_0:
   \   00000020   8D42               CMP      R5,R1
   \   00000022   F3DB               BLT      ??crc16_1
    186              
    187              return (crc_High << 8 | crc_Low);  
   \   00000024   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000026   240E               LSRS     R4,R4,#+24
   \   00000028   2102               LSLS     R1,R4,#+8
   \   0000002A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000002C   000E               LSRS     R0,R0,#+24
   \   0000002E   0843               ORRS     R0,R0,R1
   \   00000030   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000032   000C               LSRS     R0,R0,#+16
   \   00000034   01B0               ADD      SP,SP,#+4
   \   00000036   30BC               POP      {R4,R5}
   \   00000038   02BC               POP      {R1}
   \   0000003A   0847               BX       R1               ;; return
   \                     ??crc16_2:
   \   0000003C   ........           DC32     bCRC_Hi
   \   00000040   ........           DC32     bCRC_Lo
    188          }//_______________________ Koniec funkcji crc16 ________________________________
    189                
    190          
    191          
    192          
    193          
    194          
    195          
    196          
    197          //!-----------------------------------------------------------------------------
    198          //!  Nazwa funkcji :    SetWordToBytes
    199          //!  Opis:              Funkcja konwertuje wartoœæ w WORD na 2 kolejne bajty
    200          //!-----------------------------------------------------------------------------
    201          //!  tmp          - liczba w formacie WORD
    202          //!  *ptr         - wskaŸnik do pierwszego bajtu
    203          //!----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    204          void SetWordToBytes(WORD tmp, BYTE *ptr){ 
    205              *(ptr+1) = 0x00ff & tmp;
   \                     SetWordToBytes:
   \   00000000   0200               MOVS     R2,R0
   \   00000002   4A70               STRB     R2,[R1, #+1]
    206              *ptr = (0x00ff & tmp>>8);
   \   00000004   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000006   000C               LSRS     R0,R0,#+16
   \   00000008   000A               LSRS     R0,R0,#+8
   \   0000000A   0870               STRB     R0,[R1, #+0]
    207          }//_______________________ Koniec funkcji SetWordToBytes _______________________
   \   0000000C   7047               BX       LR               ;; return
    208          
    209          
    210          
    211          
    212          //!-----------------------------------------------------------------------------
    213          //!  Nazwa funkcji :    ModBus_CommS
    214          //!  Opis:              funkcja komunikacji MODBUS (slave). Interpretuje otrzymane dane i wysy³a odpowiedŸ
    215          //!-----------------------------------------------------------------------------
    216          //!  modbusframe  - otrzymana ramka danych
    217          //!----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    218          BYTE ModBus_CommS(BYTE* modbusframe, char US_Nr)
    219          {
   \                     ModBus_CommS:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
    220            
    221                AT91PS_USART AT91C_BASE_US;
    222                BYTE* Buff_TX;
    223                
    224                
    225                //wybór USARTa
    226                if (US_Nr) 
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   03D0               BEQ      ??ModBus_CommS_0
    227                {
    228                    AT91C_BASE_US     =   AT91C_BASE_US1;
   \   0000000C   CA48               LDR      R0,??ModBus_CommS_1  ;; 0xfffc4000
   \   0000000E   0290               STR      R0,[SP, #+8]
    229                    Buff_TX           =   Buff_TX_1; 
                                             ^
Warning[Pe513]: a value of type "char *" cannot be assigned to an entity of
          type "BYTE *"
   \   00000010   CA4D               LDR      R5,??ModBus_CommS_1+0x4  ;; Buff_TX_1
   \   00000012   02E0               B        ??ModBus_CommS_2
    230          
    231                } 
    232                else 
    233                {
    234                    AT91C_BASE_US     =   AT91C_BASE_US0;
   \                     ??ModBus_CommS_0:
   \   00000014   CA48               LDR      R0,??ModBus_CommS_1+0x8  ;; 0xfffc0000
   \   00000016   0290               STR      R0,[SP, #+8]
    235                    Buff_TX           =   Buff_TX_0; 
   \   00000018   CA4D               LDR      R5,??ModBus_CommS_1+0xC  ;; Buff_TX_0
    236          
    237                }
    238                
    239                
    240            
    241            
    242            
    243            
    244            for (int i=0; i<256; i++) {Buff_TX[i]=0x0;}                                 //czyœci bufor nadawczy
   \                     ??ModBus_CommS_2:
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   02E0               B        ??ModBus_CommS_3
   \                     ??ModBus_CommS_4:
   \   0000001E   0021               MOVS     R1,#+0
   \   00000020   2954               STRB     R1,[R5, R0]
   \   00000022   401C               ADDS     R0,R0,#+1
   \                     ??ModBus_CommS_3:
   \   00000024   FF28               CMP      R0,#+255
   \   00000026   FADD               BLE      ??ModBus_CommS_4
    245            
    246          
    247            
    248            if ((modbusframe[0]) != AdressModbus) return 0;                               //wyjdz jezeli zly adres
   \   00000028   2078               LDRB     R0,[R4, #+0]
   \   0000002A   C749               LDR      R1,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   0000002C   0978               LDRB     R1,[R1, #+0]
   \   0000002E   8842               CMP      R0,R1
   \   00000030   01D0               BEQ      ??ModBus_CommS_5
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   BEE2               B        ??ModBus_CommS_6
    249            
    250          //  g_transmit_ok=1;
    251            
    252            
    253            WORD  RamByte=(((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])))/8);
   \                     ??ModBus_CommS_5:
   \   00000036   A078               LDRB     R0,[R4, #+2]
   \   00000038   0102               LSLS     R1,R0,#+8
   \   0000003A   E078               LDRB     R0,[R4, #+3]
   \   0000003C   0843               ORRS     R0,R0,R1
   \   0000003E   0821               MOVS     R1,#+8
   \   00000040   ........           BL       __aeabi_idivmod
   \   00000044   0600               MOVS     R6,R0
    254            WORD  RamCall=((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])));
   \   00000046   6846               MOV      R0,SP
   \   00000048   A178               LDRB     R1,[R4, #+2]
   \   0000004A   0902               LSLS     R1,R1,#+8
   \   0000004C   E278               LDRB     R2,[R4, #+3]
   \   0000004E   0A43               ORRS     R2,R2,R1
   \   00000050   8280               STRH     R2,[R0, #+4]
    255            BYTE  RamBit= ((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+0) % 8;
   \   00000052   6846               MOV      R0,SP
   \   00000054   01B5               PUSH     {R0,LR}
   \   00000056   A078               LDRB     R0,[R4, #+2]
   \   00000058   0102               LSLS     R1,R0,#+8
   \   0000005A   E078               LDRB     R0,[R4, #+3]
   \   0000005C   0843               ORRS     R0,R0,R1
   \   0000005E   0821               MOVS     R1,#+8
   \   00000060   ........           BL       __aeabi_idivmod
   \   00000064   0098               LDR      R0,[SP, #0]
   \   00000066   02B0               ADD      SP,SP,#+8
   \   00000068   4170               STRB     R1,[R0, #+1]
    256            BYTE  ByteCount=(((((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]))-1)/8)+1;
   \   0000006A   2079               LDRB     R0,[R4, #+4]
   \   0000006C   0102               LSLS     R1,R0,#+8
   \   0000006E   6079               LDRB     R0,[R4, #+5]
   \   00000070   0843               ORRS     R0,R0,R1
   \   00000072   401E               SUBS     R0,R0,#+1
   \   00000074   0821               MOVS     R1,#+8
   \   00000076   ........           BL       __aeabi_idivmod
   \   0000007A   401C               ADDS     R0,R0,#+1
   \   0000007C   6946               MOV      R1,SP
   \   0000007E   C870               STRB     R0,[R1, #+3]
    257            BYTE  WordCount=(((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]));
   \   00000080   6846               MOV      R0,SP
   \   00000082   6179               LDRB     R1,[R4, #+5]
   \   00000084   8170               STRB     R1,[R0, #+2]
    258            WORD  BitCount=(((WORD)modbusframe[4])<<8) | (((WORD)modbusframe[5]));
   \   00000086   6846               MOV      R0,SP
   \   00000088   2179               LDRB     R1,[R4, #+4]
   \   0000008A   0902               LSLS     R1,R1,#+8
   \   0000008C   6279               LDRB     R2,[R4, #+5]
   \   0000008E   0A43               ORRS     R2,R2,R1
   \   00000090   C280               STRH     R2,[R0, #+6]
    259            char  CurentByteBufTX;
    260            char  CurentBitBufTX;
    261            
    262            if (modbusframe[1]==1)
   \   00000092   6078               LDRB     R0,[R4, #+1]
   \   00000094   0128               CMP      R0,#+1
   \   00000096   72D1               BNE      ??ModBus_CommS_7
    263                    {
    264                      //Read Coil Status  (odczyt zmiennych dwustanowych DA00-DDFF)
    265               
    266                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   00000098   A079               LDRB     R0,[R4, #+6]
   \   0000009A   0002               LSLS     R0,R0,#+8
   \   0000009C   E779               LDRB     R7,[R4, #+7]
   \   0000009E   0743               ORRS     R7,R7,R0
   \   000000A0   0621               MOVS     R1,#+6
   \   000000A2   2000               MOVS     R0,R4
   \   000000A4   ........           BL       crc16
   \   000000A8   8742               CMP      R7,R0
   \   000000AA   01D0               BEQ      ??ModBus_CommS_8
   \   000000AC   0020               MOVS     R0,#+0
   \   000000AE   81E2               B        ??ModBus_CommS_6
    267                               
    268                                //OdpowiedŸ ----------------------------------------------
    269                                
    270                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \                     ??ModBus_CommS_8:
   \   000000B0   A548               LDR      R0,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   000000B2   0078               LDRB     R0,[R0, #+0]
   \   000000B4   2870               STRB     R0,[R5, #+0]
    271                                Buff_TX[1]=0x1;
   \   000000B6   0120               MOVS     R0,#+1
   \   000000B8   6870               STRB     R0,[R5, #+1]
    272                                Buff_TX[2]=ByteCount;    
   \   000000BA   6846               MOV      R0,SP
   \   000000BC   C078               LDRB     R0,[R0, #+3]
   \   000000BE   A870               STRB     R0,[R5, #+2]
    273                                
    274                                CurentByteBufTX=3;
   \   000000C0   0327               MOVS     R7,#+3
    275                                CurentBitBufTX=0;
   \   000000C2   6846               MOV      R0,SP
   \   000000C4   0021               MOVS     R1,#+0
   \   000000C6   0170               STRB     R1,[R0, #+0]
    276                                
    277                                for (int i=0; i<BitCount; i++)
   \   000000C8   0021               MOVS     R1,#+0
   \   000000CA   04E0               B        ??ModBus_CommS_9
    278                                {
    279                                   Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
    280                                   Buff_TX[CurentByteBufTX] |=  (((ram.VarCom_Byte[RamByte]>>RamBit) & 0x1)<< CurentBitBufTX);
    281                                   
    282                                   if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
    283                                   if (RamBit<7) {RamBit++;} else {RamBit=0; RamByte++;}
   \                     ??ModBus_CommS_10:
   \   000000CC   6846               MOV      R0,SP
   \   000000CE   0022               MOVS     R2,#+0
   \   000000D0   4270               STRB     R2,[R0, #+1]
   \   000000D2   761C               ADDS     R6,R6,#+1
   \                     ??ModBus_CommS_11:
   \   000000D4   491C               ADDS     R1,R1,#+1
   \                     ??ModBus_CommS_9:
   \   000000D6   6846               MOV      R0,SP
   \   000000D8   C088               LDRH     R0,[R0, #+6]
   \   000000DA   8142               CMP      R1,R0
   \   000000DC   35DA               BGE      ??ModBus_CommS_12
   \   000000DE   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000000E0   3F0E               LSRS     R7,R7,#+24
   \   000000E2   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000000E4   3F0E               LSRS     R7,R7,#+24
   \   000000E6   EA5D               LDRB     R2,[R5, R7]
   \   000000E8   0120               MOVS     R0,#+1
   \   000000EA   6B46               MOV      R3,SP
   \   000000EC   1B78               LDRB     R3,[R3, #+0]
   \   000000EE   9840               LSLS     R0,R0,R3
   \   000000F0   8243               BICS     R2,R2,R0
   \   000000F2   EA55               STRB     R2,[R5, R7]
   \   000000F4   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000000F6   3F0E               LSRS     R7,R7,#+24
   \   000000F8   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000000FA   3F0E               LSRS     R7,R7,#+24
   \   000000FC   E85D               LDRB     R0,[R5, R7]
   \   000000FE   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   00000100   360C               LSRS     R6,R6,#+16
   \   00000102   924A               LDR      R2,??ModBus_CommS_1+0x14  ;; ram
   \   00000104   935D               LDRB     R3,[R2, R6]
   \   00000106   6A46               MOV      R2,SP
   \   00000108   5278               LDRB     R2,[R2, #+1]
   \   0000010A   1341               ASRS     R3,R3,R2
   \   0000010C   0122               MOVS     R2,#+1
   \   0000010E   1A40               ANDS     R2,R2,R3
   \   00000110   6B46               MOV      R3,SP
   \   00000112   1B78               LDRB     R3,[R3, #+0]
   \   00000114   9A40               LSLS     R2,R2,R3
   \   00000116   0243               ORRS     R2,R2,R0
   \   00000118   EA55               STRB     R2,[R5, R7]
   \   0000011A   6846               MOV      R0,SP
   \   0000011C   0078               LDRB     R0,[R0, #+0]
   \   0000011E   0728               CMP      R0,#+7
   \   00000120   05D2               BCS      ??ModBus_CommS_13
   \   00000122   6846               MOV      R0,SP
   \   00000124   6A46               MOV      R2,SP
   \   00000126   1278               LDRB     R2,[R2, #+0]
   \   00000128   521C               ADDS     R2,R2,#+1
   \   0000012A   0270               STRB     R2,[R0, #+0]
   \   0000012C   03E0               B        ??ModBus_CommS_14
   \                     ??ModBus_CommS_13:
   \   0000012E   6846               MOV      R0,SP
   \   00000130   0022               MOVS     R2,#+0
   \   00000132   0270               STRB     R2,[R0, #+0]
   \   00000134   7F1C               ADDS     R7,R7,#+1
   \                     ??ModBus_CommS_14:
   \   00000136   6846               MOV      R0,SP
   \   00000138   4078               LDRB     R0,[R0, #+1]
   \   0000013A   0728               CMP      R0,#+7
   \   0000013C   C6D2               BCS      ??ModBus_CommS_10
   \   0000013E   6846               MOV      R0,SP
   \   00000140   6A46               MOV      R2,SP
   \   00000142   5278               LDRB     R2,[R2, #+1]
   \   00000144   521C               ADDS     R2,R2,#+1
   \   00000146   4270               STRB     R2,[R0, #+1]
   \   00000148   C4E7               B        ??ModBus_CommS_11
    284                                }
    285          
    286                                SetWordToBytes(crc16(Buff_TX,ByteCount+3),&Buff_TX[ByteCount+3] );  //wstawia sumê kontroln¹
   \                     ??ModBus_CommS_12:
   \   0000014A   6846               MOV      R0,SP
   \   0000014C   C178               LDRB     R1,[R0, #+3]
   \   0000014E   C91C               ADDS     R1,R1,#+3
   \   00000150   2800               MOVS     R0,R5
   \   00000152   ........           BL       crc16
   \   00000156   6946               MOV      R1,SP
   \   00000158   C978               LDRB     R1,[R1, #+3]
   \   0000015A   6918               ADDS     R1,R5,R1
   \   0000015C   C91C               ADDS     R1,R1,#+3
   \   0000015E   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000160   000C               LSRS     R0,R0,#+16
   \   00000162   ........           BL       SetWordToBytes
    287                                
    288                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, ByteCount+5,0, 0);  //Wysyla ramke
   \   00000166   82B0               SUB      SP,SP,#+8
   \   00000168   0020               MOVS     R0,#+0
   \   0000016A   0090               STR      R0,[SP, #+0]
   \   0000016C   0023               MOVS     R3,#+0
   \   0000016E   02A8               ADD      R0,SP,#+8
   \   00000170   C278               LDRB     R2,[R0, #+3]
   \   00000172   521D               ADDS     R2,R2,#+5
   \   00000174   2900               MOVS     R1,R5
   \   00000176   0498               LDR      R0,[SP, #+16]
   \   00000178   ........           BL       AT91F_US_SendFrame
   \   0000017C   02B0               ADD      SP,SP,#+8
    289                                                        
    290                    }
    291             if (modbusframe[1]==2)
   \                     ??ModBus_CommS_7:
   \   0000017E   6078               LDRB     R0,[R4, #+1]
   \   00000180   0228               CMP      R0,#+2
   \   00000182   0ED1               BNE      ??ModBus_CommS_15
    292             {
    293                                
    294                    
    295                      ////Read discrete input  (odczyt zmiennych dwustanowych B000-B5FF)
    296                
    297                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   00000184   A079               LDRB     R0,[R4, #+6]
   \   00000186   0002               LSLS     R0,R0,#+8
   \   00000188   E179               LDRB     R1,[R4, #+7]
   \   0000018A   0143               ORRS     R1,R1,R0
   \   0000018C   02B5               PUSH     {R1,LR}
   \   0000018E   0621               MOVS     R1,#+6
   \   00000190   2000               MOVS     R0,R4
   \   00000192   ........           BL       crc16
   \   00000196   0099               LDR      R1,[SP, #0]
   \   00000198   02B0               ADD      SP,SP,#+8
   \   0000019A   8142               CMP      R1,R0
   \   0000019C   01D0               BEQ      ??ModBus_CommS_15
   \   0000019E   0020               MOVS     R0,#+0
   \   000001A0   08E2               B        ??ModBus_CommS_6
    298                               /*
    299                                //OdpowiedŸ ----------------------------------------------                      
    300                                Buff_TX[0]=AdressModbus;                              //adres                                           
    301                                Buff_TX[1]=0x2;
    302                                Buff_TX[2]=ByteCount;    
    303                                
    304                                CurentByteBufTX=3;
    305                                CurentBitBufTX=0;
    306                                
    307                                for (int i=0; i<BitCount; i++)
    308                                {
    309                                   Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
    310                                   Buff_TX[CurentByteBufTX] |=  (((ram.BinVarRAM[RamByte]>>RamBit) & 0x1)<< CurentBitBufTX);
    311                                   
    312                                   if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
    313                                   if (RamBit<7) {RamBit++;} else {RamBit=0; RamByte++;}
    314                                }
    315          
    316                                SetWordToBytes(crc16(Buff_TX,ByteCount+3),&Buff_TX[ByteCount+3] );  //wstawia sumê kontroln¹
    317                                
    318                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, ByteCount+5,0, 0);  //Wysyla ramke
    319                                                         
    320                   
    321                                
    322                      //Holding Register (odczyt zmiennych analogowych DA00-DDFF)
    323                                */
    324                    }
    325             if (modbusframe[1]==3)
   \                     ??ModBus_CommS_15:
   \   000001A2   6078               LDRB     R0,[R4, #+1]
   \   000001A4   0328               CMP      R0,#+3
   \   000001A6   5AD1               BNE      ??ModBus_CommS_16
    326             {
    327                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   000001A8   A079               LDRB     R0,[R4, #+6]
   \   000001AA   0002               LSLS     R0,R0,#+8
   \   000001AC   E779               LDRB     R7,[R4, #+7]
   \   000001AE   0743               ORRS     R7,R7,R0
   \   000001B0   0621               MOVS     R1,#+6
   \   000001B2   2000               MOVS     R0,R4
   \   000001B4   ........           BL       crc16
   \   000001B8   8742               CMP      R7,R0
   \   000001BA   01D0               BEQ      ??ModBus_CommS_17
   \   000001BC   0020               MOVS     R0,#+0
   \   000001BE   F9E1               B        ??ModBus_CommS_6
    328                               
    329                                //OdpowiedŸ ----------------------------------------------                      
    330                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \                     ??ModBus_CommS_17:
   \   000001C0   6148               LDR      R0,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   000001C2   0078               LDRB     R0,[R0, #+0]
   \   000001C4   2870               STRB     R0,[R5, #+0]
    331                                Buff_TX[1]=0x3;
   \   000001C6   0320               MOVS     R0,#+3
   \   000001C8   6870               STRB     R0,[R5, #+1]
    332                                Buff_TX[2]=(WordCount*2);    
   \   000001CA   6846               MOV      R0,SP
   \   000001CC   8078               LDRB     R0,[R0, #+2]
   \   000001CE   0221               MOVS     R1,#+2
   \   000001D0   4843               MULS     R0,R1,R0
   \   000001D2   A870               STRB     R0,[R5, #+2]
    333                                
    334                                CurentByteBufTX=3;
   \   000001D4   0327               MOVS     R7,#+3
    335                                CurentBitBufTX=0;
   \   000001D6   6846               MOV      R0,SP
   \   000001D8   0021               MOVS     R1,#+0
   \   000001DA   0170               STRB     R1,[R0, #+0]
    336                                
    337                                for (int i=0; i<WordCount; i++)
   \   000001DC   0020               MOVS     R0,#+0
   \   000001DE   1AE0               B        ??ModBus_CommS_18
    338                                {
    339          
    340                                   Buff_TX[CurentByteBufTX] = ram.VarCom_Byte[(RamCall*2)];
   \                     ??ModBus_CommS_19:
   \   000001E0   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000001E2   3F0E               LSRS     R7,R7,#+24
   \   000001E4   6946               MOV      R1,SP
   \   000001E6   8988               LDRH     R1,[R1, #+4]
   \   000001E8   0222               MOVS     R2,#+2
   \   000001EA   5143               MULS     R1,R2,R1
   \   000001EC   574A               LDR      R2,??ModBus_CommS_1+0x14  ;; ram
   \   000001EE   515C               LDRB     R1,[R2, R1]
   \   000001F0   E955               STRB     R1,[R5, R7]
    341                                   Buff_TX[CurentByteBufTX+1] = ram.VarCom_Byte[(RamCall*2)+1];
   \   000001F2   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000001F4   3F0E               LSRS     R7,R7,#+24
   \   000001F6   E919               ADDS     R1,R5,R7
   \   000001F8   6A46               MOV      R2,SP
   \   000001FA   9288               LDRH     R2,[R2, #+4]
   \   000001FC   0223               MOVS     R3,#+2
   \   000001FE   5A43               MULS     R2,R3,R2
   \   00000200   524B               LDR      R3,??ModBus_CommS_1+0x14  ;; ram
   \   00000202   9A18               ADDS     R2,R3,R2
   \   00000204   5278               LDRB     R2,[R2, #+1]
   \   00000206   4A70               STRB     R2,[R1, #+1]
    342                                   
    343                                   CurentByteBufTX=CurentByteBufTX+2;
   \   00000208   BF1C               ADDS     R7,R7,#+2
    344                                   RamCall++;
   \   0000020A   6946               MOV      R1,SP
   \   0000020C   6A46               MOV      R2,SP
   \   0000020E   9288               LDRH     R2,[R2, #+4]
   \   00000210   521C               ADDS     R2,R2,#+1
   \   00000212   8A80               STRH     R2,[R1, #+4]
    345          
    346                                }
   \   00000214   401C               ADDS     R0,R0,#+1
   \                     ??ModBus_CommS_18:
   \   00000216   6946               MOV      R1,SP
   \   00000218   8978               LDRB     R1,[R1, #+2]
   \   0000021A   8842               CMP      R0,R1
   \   0000021C   E0DB               BLT      ??ModBus_CommS_19
    347          
    348                                SetWordToBytes(crc16(Buff_TX,(WordCount*2)+3),&Buff_TX[(WordCount*2)+3] );  //wstawia sumê kontroln¹
   \   0000021E   6846               MOV      R0,SP
   \   00000220   8178               LDRB     R1,[R0, #+2]
   \   00000222   0220               MOVS     R0,#+2
   \   00000224   4143               MULS     R1,R0,R1
   \   00000226   C91C               ADDS     R1,R1,#+3
   \   00000228   2800               MOVS     R0,R5
   \   0000022A   ........           BL       crc16
   \   0000022E   6946               MOV      R1,SP
   \   00000230   8978               LDRB     R1,[R1, #+2]
   \   00000232   0222               MOVS     R2,#+2
   \   00000234   5143               MULS     R1,R2,R1
   \   00000236   6918               ADDS     R1,R5,R1
   \   00000238   C91C               ADDS     R1,R1,#+3
   \   0000023A   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000023C   000C               LSRS     R0,R0,#+16
   \   0000023E   ........           BL       SetWordToBytes
    349                                
    350                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, (WordCount*2)+5, 0, 0);  //Wysyla ramke
   \   00000242   82B0               SUB      SP,SP,#+8
   \   00000244   0020               MOVS     R0,#+0
   \   00000246   0090               STR      R0,[SP, #+0]
   \   00000248   0023               MOVS     R3,#+0
   \   0000024A   02A8               ADD      R0,SP,#+8
   \   0000024C   8278               LDRB     R2,[R0, #+2]
   \   0000024E   0220               MOVS     R0,#+2
   \   00000250   4243               MULS     R2,R0,R2
   \   00000252   521D               ADDS     R2,R2,#+5
   \   00000254   2900               MOVS     R1,R5
   \   00000256   0498               LDR      R0,[SP, #+16]
   \   00000258   ........           BL       AT91F_US_SendFrame
   \   0000025C   02B0               ADD      SP,SP,#+8
    351                                                         
    352                    
    353                            
    354                        //Input Register (odczyt zmiennych analogowych A000-A5FF)      
    355                    }
    356             if (modbusframe[1]==4)
    357             {
    358                /*
    359                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
    360                               
    361                                //OdpowiedŸ ----------------------------------------------                      
    362                                Buff_TX[0]=AdressModbus;                              //adres                                           
    363                                Buff_TX[1]=0x4;
    364                                Buff_TX[2]=(WordCount*2);    
    365                                
    366                                CurentByteBufTX=3;
    367                                CurentBitBufTX=0;
    368                                
    369                                for (int i=0; i<WordCount; i++)
    370                                {
    371          
    372                                   Buff_TX[CurentByteBufTX]   = (((WORD)(ram.AnaVarRAM[RamCall]))>>8) & 0xFF;
    373                                   Buff_TX[CurentByteBufTX+1] = ((WORD)(ram.AnaVarRAM[RamCall])) & 0xFF;
    374                                   
    375                                   CurentByteBufTX=CurentByteBufTX+2;
    376                                   RamCall++;
    377                                }
    378          
    379                                SetWordToBytes(crc16(Buff_TX,(WordCount*2)+3),&Buff_TX[(WordCount*2)+3] );  //wstawia sumê kontroln¹
    380                                
    381                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX, (WordCount*2)+5, 0, 0);  //Wysyla ramke
    382                                                         
    383                          
    384                      //Write Coil Status  (zapis zmiennych dwustanowych - pojedynczo DA00-DDFF)
    385                 */
    386                    }
    387             if (modbusframe[1]==5)
   \                     ??ModBus_CommS_16:
   \   0000025E   6078               LDRB     R0,[R4, #+1]
   \   00000260   0528               CMP      R0,#+5
   \   00000262   5AD1               BNE      ??ModBus_CommS_20
    388             {
    389                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   00000264   A079               LDRB     R0,[R4, #+6]
   \   00000266   0002               LSLS     R0,R0,#+8
   \   00000268   E179               LDRB     R1,[R4, #+7]
   \   0000026A   0143               ORRS     R1,R1,R0
   \   0000026C   02B5               PUSH     {R1,LR}
   \   0000026E   0621               MOVS     R1,#+6
   \   00000270   2000               MOVS     R0,R4
   \   00000272   ........           BL       crc16
   \   00000276   0099               LDR      R1,[SP, #0]
   \   00000278   02B0               ADD      SP,SP,#+8
   \   0000027A   8142               CMP      R1,R0
   \   0000027C   01D0               BEQ      ??ModBus_CommS_21
   \   0000027E   0020               MOVS     R0,#+0
   \   00000280   98E1               B        ??ModBus_CommS_6
    390                                
    391                                //if ((modbusframe[4]!=0xFF) && (modbusframe[4]!=0x00)) return 0;
    392                                
    393                                Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
   \                     ??ModBus_CommS_21:
   \   00000282   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000284   3F0E               LSRS     R7,R7,#+24
   \   00000286   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000288   3F0E               LSRS     R7,R7,#+24
   \   0000028A   E85D               LDRB     R0,[R5, R7]
   \   0000028C   0121               MOVS     R1,#+1
   \   0000028E   6A46               MOV      R2,SP
   \   00000290   1278               LDRB     R2,[R2, #+0]
   \   00000292   9140               LSLS     R1,R1,R2
   \   00000294   8843               BICS     R0,R0,R1
   \   00000296   E855               STRB     R0,[R5, R7]
    394                                if (modbusframe[4])
   \   00000298   2079               LDRB     R0,[R4, #+4]
   \   0000029A   0028               CMP      R0,#+0
   \   0000029C   0ED0               BEQ      ??ModBus_CommS_22
    395                                {
    396                                   ram.VarCom_Byte[RamByte] |= 0x1 << RamBit;
   \   0000029E   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   000002A0   360C               LSRS     R6,R6,#+16
   \   000002A2   2A48               LDR      R0,??ModBus_CommS_1+0x14  ;; ram
   \   000002A4   3100               MOVS     R1,R6
   \   000002A6   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   000002A8   090C               LSRS     R1,R1,#+16
   \   000002AA   284A               LDR      R2,??ModBus_CommS_1+0x14  ;; ram
   \   000002AC   525C               LDRB     R2,[R2, R1]
   \   000002AE   0121               MOVS     R1,#+1
   \   000002B0   6B46               MOV      R3,SP
   \   000002B2   5B78               LDRB     R3,[R3, #+1]
   \   000002B4   9940               LSLS     R1,R1,R3
   \   000002B6   1143               ORRS     R1,R1,R2
   \   000002B8   8155               STRB     R1,[R0, R6]
   \   000002BA   0DE0               B        ??ModBus_CommS_23
    397                                }
    398                                else
    399                                {
    400                                   ram.VarCom_Byte[RamByte] &= ~(0x1 << RamBit);
   \                     ??ModBus_CommS_22:
   \   000002BC   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   000002BE   360C               LSRS     R6,R6,#+16
   \   000002C0   2248               LDR      R0,??ModBus_CommS_1+0x14  ;; ram
   \   000002C2   3100               MOVS     R1,R6
   \   000002C4   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   000002C6   090C               LSRS     R1,R1,#+16
   \   000002C8   204A               LDR      R2,??ModBus_CommS_1+0x14  ;; ram
   \   000002CA   525C               LDRB     R2,[R2, R1]
   \   000002CC   0121               MOVS     R1,#+1
   \   000002CE   6B46               MOV      R3,SP
   \   000002D0   5B78               LDRB     R3,[R3, #+1]
   \   000002D2   9940               LSLS     R1,R1,R3
   \   000002D4   8A43               BICS     R2,R2,R1
   \   000002D6   8255               STRB     R2,[R0, R6]
    401                                }               
    402                                
    403                                //odpowiedz ----------------------------------------------
    404                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \                     ??ModBus_CommS_23:
   \   000002D8   1B48               LDR      R0,??ModBus_CommS_1+0x10  ;; AdressModbus
   \   000002DA   0078               LDRB     R0,[R0, #+0]
   \   000002DC   2870               STRB     R0,[R5, #+0]
    405                                Buff_TX[1]=0x5;   
   \   000002DE   0520               MOVS     R0,#+5
   \   000002E0   6870               STRB     R0,[R5, #+1]
    406                                Buff_TX[2]=modbusframe[2];
   \   000002E2   A078               LDRB     R0,[R4, #+2]
   \   000002E4   A870               STRB     R0,[R5, #+2]
    407                                Buff_TX[3]=modbusframe[3];
   \   000002E6   E078               LDRB     R0,[R4, #+3]
   \   000002E8   E870               STRB     R0,[R5, #+3]
    408                                Buff_TX[4]=modbusframe[4];
   \   000002EA   2079               LDRB     R0,[R4, #+4]
   \   000002EC   2871               STRB     R0,[R5, #+4]
    409                                Buff_TX[5]=modbusframe[5];
   \   000002EE   6079               LDRB     R0,[R4, #+5]
   \   000002F0   6871               STRB     R0,[R5, #+5]
    410                                                      
    411                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   000002F2   0621               MOVS     R1,#+6
   \   000002F4   2800               MOVS     R0,R5
   \   000002F6   ........           BL       crc16
   \   000002FA   2900               MOVS     R1,R5
   \   000002FC   891D               ADDS     R1,R1,#+6
   \   000002FE   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000300   000C               LSRS     R0,R0,#+16
   \   00000302   ........           BL       SetWordToBytes
    412                                
    413                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   00000306   82B0               SUB      SP,SP,#+8
   \   00000308   0020               MOVS     R0,#+0
   \   0000030A   0090               STR      R0,[SP, #+0]
   \   0000030C   0023               MOVS     R3,#+0
   \   0000030E   0822               MOVS     R2,#+8
   \   00000310   2900               MOVS     R1,R5
   \   00000312   0498               LDR      R0,[SP, #+16]
   \   00000314   ........           BL       AT91F_US_SendFrame
   \   00000318   02B0               ADD      SP,SP,#+8
    414                                                         
    415                   
    416          
    417                      //Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
    418                    }
    419             if (modbusframe[1]==6)
   \                     ??ModBus_CommS_20:
   \   0000031A   6078               LDRB     R0,[R4, #+1]
   \   0000031C   0628               CMP      R0,#+6
   \   0000031E   53D1               BNE      ??ModBus_CommS_24
    420             {
    421                                if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   00000320   A079               LDRB     R0,[R4, #+6]
   \   00000322   0002               LSLS     R0,R0,#+8
   \   00000324   E679               LDRB     R6,[R4, #+7]
   \   00000326   0643               ORRS     R6,R6,R0
   \   00000328   0621               MOVS     R1,#+6
   \   0000032A   2000               MOVS     R0,R4
   \   0000032C   ........           BL       crc16
   \   00000330   8642               CMP      R6,R0
   \   00000332   0DD0               BEQ      ??ModBus_CommS_25
   \   00000334   0020               MOVS     R0,#+0
   \   00000336   3DE1               B        ??ModBus_CommS_6
   \                     ??ModBus_CommS_1:
   \   00000338   0040FCFF           DC32     0xfffc4000
   \   0000033C   ........           DC32     Buff_TX_1
   \   00000340   0000FCFF           DC32     0xfffc0000
   \   00000344   ........           DC32     Buff_TX_0
   \   00000348   ........           DC32     AdressModbus
   \   0000034C   ........           DC32     ram
    422                                
    423                                Buff_TX[CurentByteBufTX] &= ~(1<<CurentBitBufTX);
   \                     ??ModBus_CommS_25:
   \   00000350   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000352   3F0E               LSRS     R7,R7,#+24
   \   00000354   3800               MOVS     R0,R7
   \   00000356   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000358   000E               LSRS     R0,R0,#+24
   \   0000035A   285C               LDRB     R0,[R5, R0]
   \   0000035C   0121               MOVS     R1,#+1
   \   0000035E   6A46               MOV      R2,SP
   \   00000360   1278               LDRB     R2,[R2, #+0]
   \   00000362   9140               LSLS     R1,R1,R2
   \   00000364   8843               BICS     R0,R0,R1
   \   00000366   E855               STRB     R0,[R5, R7]
    424                                
    425                                ram.VarCom_Byte[(RamCall*2)]   = modbusframe[4] ;
   \   00000368   6846               MOV      R0,SP
   \   0000036A   8088               LDRH     R0,[R0, #+4]
   \   0000036C   0221               MOVS     R1,#+2
   \   0000036E   4843               MULS     R0,R1,R0
   \   00000370   ....               LDR      R1,??DataTable7  ;; ram
   \   00000372   2279               LDRB     R2,[R4, #+4]
   \   00000374   0A54               STRB     R2,[R1, R0]
    426                                ram.VarCom_Byte[(RamCall*2)+1] = modbusframe[5] ;
   \   00000376   6846               MOV      R0,SP
   \   00000378   8088               LDRH     R0,[R0, #+4]
   \   0000037A   0221               MOVS     R1,#+2
   \   0000037C   4843               MULS     R0,R1,R0
   \   0000037E   ....               LDR      R1,??DataTable7  ;; ram
   \   00000380   0818               ADDS     R0,R1,R0
   \   00000382   6179               LDRB     R1,[R4, #+5]
   \   00000384   4170               STRB     R1,[R0, #+1]
    427                                                                        
    428                                //odpowiedz ----------------------------------------------
    429                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \   00000386   8D48               LDR      R0,??ModBus_CommS_26  ;; AdressModbus
   \   00000388   0078               LDRB     R0,[R0, #+0]
   \   0000038A   2870               STRB     R0,[R5, #+0]
    430                                Buff_TX[1]=0x6;   
   \   0000038C   0620               MOVS     R0,#+6
   \   0000038E   6870               STRB     R0,[R5, #+1]
    431                                Buff_TX[2]=modbusframe[2];
   \   00000390   A078               LDRB     R0,[R4, #+2]
   \   00000392   A870               STRB     R0,[R5, #+2]
    432                                Buff_TX[3]=modbusframe[3];
   \   00000394   E078               LDRB     R0,[R4, #+3]
   \   00000396   E870               STRB     R0,[R5, #+3]
    433                                Buff_TX[4]=modbusframe[4];
   \   00000398   2079               LDRB     R0,[R4, #+4]
   \   0000039A   2871               STRB     R0,[R5, #+4]
    434                                Buff_TX[5]=modbusframe[5];
   \   0000039C   6079               LDRB     R0,[R4, #+5]
   \   0000039E   6871               STRB     R0,[R5, #+5]
    435                                                      
    436                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   000003A0   0621               MOVS     R1,#+6
   \   000003A2   2800               MOVS     R0,R5
   \   000003A4   ........           BL       crc16
   \   000003A8   2900               MOVS     R1,R5
   \   000003AA   891D               ADDS     R1,R1,#+6
   \   000003AC   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000003AE   000C               LSRS     R0,R0,#+16
   \   000003B0   ........           BL       SetWordToBytes
    437                                
    438                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   000003B4   82B0               SUB      SP,SP,#+8
   \   000003B6   0020               MOVS     R0,#+0
   \   000003B8   0090               STR      R0,[SP, #+0]
   \   000003BA   0023               MOVS     R3,#+0
   \   000003BC   0822               MOVS     R2,#+8
   \   000003BE   2900               MOVS     R1,R5
   \   000003C0   0498               LDR      R0,[SP, #+16]
   \   000003C2   ........           BL       AT91F_US_SendFrame
   \   000003C6   02B0               ADD      SP,SP,#+8
    439                                                         
    440                         
    441                                
    442                      //Write Multiple Status  (zapis zmiennych dwustanowych - grupowo DA00-DDFF)
    443                    }
    444             if (modbusframe[1]==15)
   \                     ??ModBus_CommS_24:
   \   000003C8   6078               LDRB     R0,[R4, #+1]
   \   000003CA   0F28               CMP      R0,#+15
   \   000003CC   00D0               BEQ      .+4
   \   000003CE   97E0               B        ??ModBus_CommS_27
    445             {
    446                                if ((((WORD)modbusframe[modbusframe[6]+7])<<8 | ((WORD)modbusframe[modbusframe[6]+8])) != crc16(modbusframe,modbusframe[6]+7)) return 0;   //sprawdzenie CRC
   \   000003D0   A079               LDRB     R0,[R4, #+6]
   \   000003D2   2018               ADDS     R0,R4,R0
   \   000003D4   C079               LDRB     R0,[R0, #+7]
   \   000003D6   0002               LSLS     R0,R0,#+8
   \   000003D8   A179               LDRB     R1,[R4, #+6]
   \   000003DA   6118               ADDS     R1,R4,R1
   \   000003DC   0E7A               LDRB     R6,[R1, #+8]
   \   000003DE   0643               ORRS     R6,R6,R0
   \   000003E0   A179               LDRB     R1,[R4, #+6]
   \   000003E2   C91D               ADDS     R1,R1,#+7
   \   000003E4   2000               MOVS     R0,R4
   \   000003E6   ........           BL       crc16
   \   000003EA   8642               CMP      R6,R0
   \   000003EC   01D0               BEQ      ??ModBus_CommS_28
   \   000003EE   0020               MOVS     R0,#+0
   \   000003F0   E0E0               B        ??ModBus_CommS_6
    447                 
    448                                
    449          
    450                                CurentByteBufTX=7;
   \                     ??ModBus_CommS_28:
   \   000003F2   0727               MOVS     R7,#+7
    451                                CurentBitBufTX=0;
   \   000003F4   6846               MOV      R0,SP
   \   000003F6   0021               MOVS     R1,#+0
   \   000003F8   0170               STRB     R1,[R0, #+0]
    452                                   
    453                                RamByte=(((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+1)/8);
   \   000003FA   A078               LDRB     R0,[R4, #+2]
   \   000003FC   0102               LSLS     R1,R0,#+8
   \   000003FE   E078               LDRB     R0,[R4, #+3]
   \   00000400   0843               ORRS     R0,R0,R1
   \   00000402   401C               ADDS     R0,R0,#+1
   \   00000404   0821               MOVS     R1,#+8
   \   00000406   ........           BL       __aeabi_idivmod
   \   0000040A   0600               MOVS     R6,R0
    454                                RamBit= ((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+1) % 8;
   \   0000040C   6846               MOV      R0,SP
   \   0000040E   01B5               PUSH     {R0,LR}
   \   00000410   A078               LDRB     R0,[R4, #+2]
   \   00000412   0102               LSLS     R1,R0,#+8
   \   00000414   E078               LDRB     R0,[R4, #+3]
   \   00000416   0843               ORRS     R0,R0,R1
   \   00000418   401C               ADDS     R0,R0,#+1
   \   0000041A   0821               MOVS     R1,#+8
   \   0000041C   ........           BL       __aeabi_idivmod
   \   00000420   0098               LDR      R0,[SP, #0]
   \   00000422   02B0               ADD      SP,SP,#+8
   \   00000424   4170               STRB     R1,[R0, #+1]
    455                                
    456                                for (int i=0; i<BitCount; i++)
   \   00000426   0021               MOVS     R1,#+0
   \   00000428   04E0               B        ??ModBus_CommS_29
    457                                { 
    458                                  if ((modbusframe[CurentByteBufTX]>>CurentBitBufTX)&0x1)
    459                                  {
    460                                    ram.VarCom_Byte[RamByte] |= 0x1 << RamBit;
    461                                  }
    462                                  else
    463                                  {
    464                                    ram.VarCom_Byte[RamByte] &= ~(0x1 << RamBit);
    465                                  }   
    466                                 
    467                                  if (RamBit<=6) {RamBit++;} else {RamBit=0; RamByte++;}
    468                                  if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
   \                     ??ModBus_CommS_30:
   \   0000042A   6846               MOV      R0,SP
   \   0000042C   0022               MOVS     R2,#+0
   \   0000042E   0270               STRB     R2,[R0, #+0]
   \   00000430   7F1C               ADDS     R7,R7,#+1
   \                     ??ModBus_CommS_31:
   \   00000432   491C               ADDS     R1,R1,#+1
   \                     ??ModBus_CommS_29:
   \   00000434   6846               MOV      R0,SP
   \   00000436   C088               LDRH     R0,[R0, #+6]
   \   00000438   8142               CMP      R1,R0
   \   0000043A   3EDA               BGE      ??ModBus_CommS_32
   \   0000043C   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000043E   3F0E               LSRS     R7,R7,#+24
   \   00000440   E05D               LDRB     R0,[R4, R7]
   \   00000442   6A46               MOV      R2,SP
   \   00000444   1278               LDRB     R2,[R2, #+0]
   \   00000446   1041               ASRS     R0,R0,R2
   \   00000448   C007               LSLS     R0,R0,#+31
   \   0000044A   0FD5               BPL      ??ModBus_CommS_33
   \   0000044C   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   0000044E   360C               LSRS     R6,R6,#+16
   \   00000450   ....               LDR      R2,??DataTable7  ;; ram
   \   00000452   9446               MOV      R12,R2
   \   00000454   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   00000456   360C               LSRS     R6,R6,#+16
   \   00000458   ....               LDR      R0,??DataTable7  ;; ram
   \   0000045A   835D               LDRB     R3,[R0, R6]
   \   0000045C   0120               MOVS     R0,#+1
   \   0000045E   6A46               MOV      R2,SP
   \   00000460   5278               LDRB     R2,[R2, #+1]
   \   00000462   9040               LSLS     R0,R0,R2
   \   00000464   1843               ORRS     R0,R0,R3
   \   00000466   6246               MOV      R2,R12
   \   00000468   9055               STRB     R0,[R2, R6]
   \   0000046A   0EE0               B        ??ModBus_CommS_34
   \                     ??ModBus_CommS_33:
   \   0000046C   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   0000046E   360C               LSRS     R6,R6,#+16
   \   00000470   ....               LDR      R0,??DataTable7  ;; ram
   \   00000472   8446               MOV      R12,R0
   \   00000474   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   00000476   360C               LSRS     R6,R6,#+16
   \   00000478   ....               LDR      R0,??DataTable7  ;; ram
   \   0000047A   835D               LDRB     R3,[R0, R6]
   \   0000047C   0120               MOVS     R0,#+1
   \   0000047E   6A46               MOV      R2,SP
   \   00000480   5278               LDRB     R2,[R2, #+1]
   \   00000482   9040               LSLS     R0,R0,R2
   \   00000484   8343               BICS     R3,R3,R0
   \   00000486   6046               MOV      R0,R12
   \   00000488   8355               STRB     R3,[R0, R6]
   \                     ??ModBus_CommS_34:
   \   0000048A   6846               MOV      R0,SP
   \   0000048C   4078               LDRB     R0,[R0, #+1]
   \   0000048E   0728               CMP      R0,#+7
   \   00000490   05D2               BCS      ??ModBus_CommS_35
   \   00000492   6846               MOV      R0,SP
   \   00000494   6A46               MOV      R2,SP
   \   00000496   5278               LDRB     R2,[R2, #+1]
   \   00000498   521C               ADDS     R2,R2,#+1
   \   0000049A   4270               STRB     R2,[R0, #+1]
   \   0000049C   03E0               B        ??ModBus_CommS_36
   \                     ??ModBus_CommS_35:
   \   0000049E   6846               MOV      R0,SP
   \   000004A0   0022               MOVS     R2,#+0
   \   000004A2   4270               STRB     R2,[R0, #+1]
   \   000004A4   761C               ADDS     R6,R6,#+1
   \                     ??ModBus_CommS_36:
   \   000004A6   6846               MOV      R0,SP
   \   000004A8   0078               LDRB     R0,[R0, #+0]
   \   000004AA   0728               CMP      R0,#+7
   \   000004AC   BDD2               BCS      ??ModBus_CommS_30
   \   000004AE   6846               MOV      R0,SP
   \   000004B0   6A46               MOV      R2,SP
   \   000004B2   1278               LDRB     R2,[R2, #+0]
   \   000004B4   521C               ADDS     R2,R2,#+1
   \   000004B6   0270               STRB     R2,[R0, #+0]
   \   000004B8   BBE7               B        ??ModBus_CommS_31
    469                                  
    470                                }
    471                               
    472                                
    473                                //odpowiedz ----------------------------------------------
    474                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \                     ??ModBus_CommS_32:
   \   000004BA   4048               LDR      R0,??ModBus_CommS_26  ;; AdressModbus
   \   000004BC   0078               LDRB     R0,[R0, #+0]
   \   000004BE   2870               STRB     R0,[R5, #+0]
    475                                Buff_TX[1]=0xF;   
   \   000004C0   0F20               MOVS     R0,#+15
   \   000004C2   6870               STRB     R0,[R5, #+1]
    476                                Buff_TX[2]=modbusframe[2];
   \   000004C4   A078               LDRB     R0,[R4, #+2]
   \   000004C6   A870               STRB     R0,[R5, #+2]
    477                                Buff_TX[3]=modbusframe[3];
   \   000004C8   E078               LDRB     R0,[R4, #+3]
   \   000004CA   E870               STRB     R0,[R5, #+3]
    478                                Buff_TX[4]=modbusframe[4];
   \   000004CC   2079               LDRB     R0,[R4, #+4]
   \   000004CE   2871               STRB     R0,[R5, #+4]
    479                                Buff_TX[5]=modbusframe[5];
   \   000004D0   6079               LDRB     R0,[R4, #+5]
   \   000004D2   6871               STRB     R0,[R5, #+5]
    480                                                      
    481                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   000004D4   0621               MOVS     R1,#+6
   \   000004D6   2800               MOVS     R0,R5
   \   000004D8   ........           BL       crc16
   \   000004DC   2900               MOVS     R1,R5
   \   000004DE   891D               ADDS     R1,R1,#+6
   \   000004E0   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000004E2   000C               LSRS     R0,R0,#+16
   \   000004E4   ........           BL       SetWordToBytes
    482                                
    483                                Buff_TX[8]=0;
   \   000004E8   0020               MOVS     R0,#+0
   \   000004EA   2872               STRB     R0,[R5, #+8]
    484                                
    485                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   000004EC   82B0               SUB      SP,SP,#+8
   \   000004EE   0020               MOVS     R0,#+0
   \   000004F0   0090               STR      R0,[SP, #+0]
   \   000004F2   0023               MOVS     R3,#+0
   \   000004F4   0822               MOVS     R2,#+8
   \   000004F6   2900               MOVS     R1,R5
   \   000004F8   0498               LDR      R0,[SP, #+16]
   \   000004FA   ........           BL       AT91F_US_SendFrame
   \   000004FE   02B0               ADD      SP,SP,#+8
    486                                                         
    487                            
    488                                          
    489                                
    490                        //Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
    491                    }
    492             if (modbusframe[1]==16)
   \                     ??ModBus_CommS_27:
   \   00000500   6078               LDRB     R0,[R4, #+1]
   \   00000502   1028               CMP      R0,#+16
   \   00000504   55D1               BNE      ??ModBus_CommS_37
    493             {
    494                                if ((((WORD)modbusframe[modbusframe[6]+7])<<8 | ((WORD)modbusframe[modbusframe[6]+8])) != crc16(modbusframe,modbusframe[6]+7)) return 0;   //sprawdzenie CRC
   \   00000506   A079               LDRB     R0,[R4, #+6]
   \   00000508   2018               ADDS     R0,R4,R0
   \   0000050A   C079               LDRB     R0,[R0, #+7]
   \   0000050C   0002               LSLS     R0,R0,#+8
   \   0000050E   A179               LDRB     R1,[R4, #+6]
   \   00000510   6118               ADDS     R1,R4,R1
   \   00000512   0E7A               LDRB     R6,[R1, #+8]
   \   00000514   0643               ORRS     R6,R6,R0
   \   00000516   A179               LDRB     R1,[R4, #+6]
   \   00000518   C91D               ADDS     R1,R1,#+7
   \   0000051A   2000               MOVS     R0,R4
   \   0000051C   ........           BL       crc16
   \   00000520   8642               CMP      R6,R0
   \   00000522   01D0               BEQ      ??ModBus_CommS_38
   \   00000524   0020               MOVS     R0,#+0
   \   00000526   45E0               B        ??ModBus_CommS_6
    495          
    496                                CurentByteBufTX=7;
   \                     ??ModBus_CommS_38:
   \   00000528   0727               MOVS     R7,#+7
    497                                
    498                                for (int i=0; i<WordCount; i++)
   \   0000052A   0020               MOVS     R0,#+0
   \   0000052C   1AE0               B        ??ModBus_CommS_39
    499                                { 
    500                                  
    501                                  ram.VarCom_Byte[(RamCall*2)]   = modbusframe[CurentByteBufTX] ;
   \                     ??ModBus_CommS_40:
   \   0000052E   6946               MOV      R1,SP
   \   00000530   8988               LDRH     R1,[R1, #+4]
   \   00000532   0222               MOVS     R2,#+2
   \   00000534   5143               MULS     R1,R2,R1
   \   00000536   ....               LDR      R2,??DataTable7  ;; ram
   \   00000538   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000053A   3F0E               LSRS     R7,R7,#+24
   \   0000053C   E35D               LDRB     R3,[R4, R7]
   \   0000053E   5354               STRB     R3,[R2, R1]
    502                                  ram.VarCom_Byte[(RamCall*2)+1] = modbusframe[CurentByteBufTX+1] ;
   \   00000540   6946               MOV      R1,SP
   \   00000542   8988               LDRH     R1,[R1, #+4]
   \   00000544   0222               MOVS     R2,#+2
   \   00000546   5143               MULS     R1,R2,R1
   \   00000548   ....               LDR      R2,??DataTable7  ;; ram
   \   0000054A   5118               ADDS     R1,R2,R1
   \   0000054C   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000054E   3F0E               LSRS     R7,R7,#+24
   \   00000550   E219               ADDS     R2,R4,R7
   \   00000552   5278               LDRB     R2,[R2, #+1]
   \   00000554   4A70               STRB     R2,[R1, #+1]
    503            
    504                                 
    505                                  CurentByteBufTX=CurentByteBufTX+2;
   \   00000556   BF1C               ADDS     R7,R7,#+2
    506                                  RamCall++;
   \   00000558   6946               MOV      R1,SP
   \   0000055A   6A46               MOV      R2,SP
   \   0000055C   9288               LDRH     R2,[R2, #+4]
   \   0000055E   521C               ADDS     R2,R2,#+1
   \   00000560   8A80               STRH     R2,[R1, #+4]
    507                                  
    508                                }
   \   00000562   401C               ADDS     R0,R0,#+1
   \                     ??ModBus_CommS_39:
   \   00000564   6946               MOV      R1,SP
   \   00000566   8978               LDRB     R1,[R1, #+2]
   \   00000568   8842               CMP      R0,R1
   \   0000056A   E0DB               BLT      ??ModBus_CommS_40
    509          
    510                                //odpowiedz ----------------------------------------------
    511                                Buff_TX[0]=AdressModbus;                              //adres                                           
   \   0000056C   1348               LDR      R0,??ModBus_CommS_26  ;; AdressModbus
   \   0000056E   0078               LDRB     R0,[R0, #+0]
   \   00000570   2870               STRB     R0,[R5, #+0]
    512                                Buff_TX[1]=0x10;   
   \   00000572   1020               MOVS     R0,#+16
   \   00000574   6870               STRB     R0,[R5, #+1]
    513                                Buff_TX[2]=modbusframe[2];
   \   00000576   A078               LDRB     R0,[R4, #+2]
   \   00000578   A870               STRB     R0,[R5, #+2]
    514                                Buff_TX[3]=modbusframe[3];
   \   0000057A   E078               LDRB     R0,[R4, #+3]
   \   0000057C   E870               STRB     R0,[R5, #+3]
    515                                Buff_TX[4]=modbusframe[4];
   \   0000057E   2079               LDRB     R0,[R4, #+4]
   \   00000580   2871               STRB     R0,[R5, #+4]
    516                                Buff_TX[5]=modbusframe[5];
   \   00000582   6079               LDRB     R0,[R4, #+5]
   \   00000584   6871               STRB     R0,[R5, #+5]
    517                                                      
    518                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );  //wstawia sumê kontroln¹
   \   00000586   0621               MOVS     R1,#+6
   \   00000588   2800               MOVS     R0,R5
   \   0000058A   ........           BL       crc16
   \   0000058E   2900               MOVS     R1,R5
   \   00000590   891D               ADDS     R1,R1,#+6
   \   00000592   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000594   000C               LSRS     R0,R0,#+16
   \   00000596   ........           BL       SetWordToBytes
    519                                
    520                                Buff_TX[8]=0;
   \   0000059A   0020               MOVS     R0,#+0
   \   0000059C   2872               STRB     R0,[R5, #+8]
    521                                
    522                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);  //Wysyla ramke
   \   0000059E   82B0               SUB      SP,SP,#+8
   \   000005A0   0020               MOVS     R0,#+0
   \   000005A2   0090               STR      R0,[SP, #+0]
   \   000005A4   0023               MOVS     R3,#+0
   \   000005A6   0822               MOVS     R2,#+8
   \   000005A8   2900               MOVS     R1,R5
   \   000005AA   0498               LDR      R0,[SP, #+16]
   \   000005AC   ........           BL       AT91F_US_SendFrame
   \   000005B0   02B0               ADD      SP,SP,#+8
    523                                                         
    524                        
    525                          
    526                    }
    527            
    528            return 1;
   \                     ??ModBus_CommS_37:
   \   000005B2   0120               MOVS     R0,#+1
   \                     ??ModBus_CommS_6:
   \   000005B4   03B0               ADD      SP,SP,#+12
   \   000005B6   F0BC               POP      {R4-R7}
   \   000005B8   02BC               POP      {R1}
   \   000005BA   0847               BX       R1               ;; return
   \                     ??ModBus_CommS_26:
   \   000005BC   ........           DC32     AdressModbus
    529          }//_______________________ Koniec funkcji ModBus_CommS ________________________________
    530          
    531          
    532          
    533          
    534          
    535          
    536          
    537          
    538          //!-----------------------------------------------------------------------------
    539          //!  Nazwa funkcji :    ModBus_MASTER_TX_US0
    540          //!  Opis:              Funkcja realizacji zadañ MODBUS wed³ug zadañ z tabeli ZD_MODBUS_0
    541          //!-----------------------------------------------------------------------------
    542          //!  
    543          //!----------------------------------------------------------------------------- 

   \                                 In section .bss, align 1
    544          char nr_tmp=0;
   \                     nr_tmp:
   \   00000000                      DS8 1

   \                                 In section Debug.txt, align 4, keep-with-next
    545          char ModBus_MASTER_TX(char US_Nr)
    546          {
   \                     ModBus_MASTER_TX:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    547                char il_ptl=0;
   \   00000002   0021               MOVS     R1,#+0
    548                AT91PS_USART AT91C_BASE_US;
    549                ptr_ZD_MODBUS ZD_MODBUS;
    550                char* Current_ZD_MODBUS;
    551                BYTE* Buff_TX;
    552          
    553                //wybór USARTa
    554                if (US_Nr) 
   \   00000004   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000006   000E               LSRS     R0,R0,#+24
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   05D0               BEQ      ??ModBus_MASTER_TX_0
    555                {
    556                    AT91C_BASE_US     =   AT91C_BASE_US1;
   \   0000000C   794A               LDR      R2,??ModBus_MASTER_TX_1  ;; 0xfffc4000
   \   0000000E   0092               STR      R2,[SP, #+0]
    557                    ZD_MODBUS         =   ZD_MODBUS_1;
   \   00000010   794C               LDR      R4,??ModBus_MASTER_TX_1+0x4  ;; ZD_MODBUS_1
    558                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_1;
   \   00000012   7A4D               LDR      R5,??ModBus_MASTER_TX_1+0x8  ;; g_Current_ZD_MODBUS_1
    559                    Buff_TX           =   Buff_TX_1; 
                                             ^
Warning[Pe513]: a value of type "char *" cannot be assigned to an entity of
          type "BYTE *"
   \   00000014   7A4E               LDR      R6,??ModBus_MASTER_TX_1+0xC  ;; Buff_TX_1
   \   00000016   04E0               B        ??ModBus_MASTER_TX_2
    560                }   
    561                else 
    562                {
    563                    AT91C_BASE_US     =   AT91C_BASE_US0;
   \                     ??ModBus_MASTER_TX_0:
   \   00000018   7A4A               LDR      R2,??ModBus_MASTER_TX_1+0x10  ;; 0xfffc0000
   \   0000001A   0092               STR      R2,[SP, #+0]
    564                    ZD_MODBUS         =   ZD_MODBUS_0;
   \   0000001C   7A4C               LDR      R4,??ModBus_MASTER_TX_1+0x14  ;; ZD_MODBUS_0
    565                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_0;
   \   0000001E   7B4D               LDR      R5,??ModBus_MASTER_TX_1+0x18  ;; g_Current_ZD_MODBUS_0
    566                    Buff_TX           =   Buff_TX_0; 
   \   00000020   7B4E               LDR      R6,??ModBus_MASTER_TX_1+0x1C  ;; Buff_TX_0
    567                }
    568               
    569          
    570          
    571          
    572          
    573          
    574          
    575                nr_tmp=US_Nr;
   \                     ??ModBus_MASTER_TX_2:
   \   00000022   7C4A               LDR      R2,??ModBus_MASTER_TX_1+0x20  ;; nr_tmp
   \   00000024   1070               STRB     R0,[R2, #+0]
    576                
    577                Skok:
                       ^
Warning[Pe177]: label "Skok" was declared but never referenced
    578                    
    579                  
    580                      if (il_ptl < ZD_MODBUS_Tab_Max) {il_ptl++;} else {return 0;}
   \   00000026   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000028   090E               LSRS     R1,R1,#+24
   \   0000002A   1429               CMP      R1,#+20
   \   0000002C   25D2               BCS      ??ModBus_MASTER_TX_3
   \   0000002E   491C               ADDS     R1,R1,#+1
    581                      
    582                      if ((ZD_MODBUS[(*Current_ZD_MODBUS)+1].Adress > 0) && ((*Current_ZD_MODBUS)+1 < ZD_MODBUS_Tab_Max) )
   \   00000030   2878               LDRB     R0,[R5, #+0]
   \   00000032   0D22               MOVS     R2,#+13
   \   00000034   5043               MULS     R0,R2,R0
   \   00000036   2018               ADDS     R0,R4,R0
   \   00000038   407B               LDRB     R0,[R0, #+13]
   \   0000003A   0128               CMP      R0,#+1
   \   0000003C   1FD3               BCC      ??ModBus_MASTER_TX_4
   \   0000003E   2878               LDRB     R0,[R5, #+0]
   \   00000040   401C               ADDS     R0,R0,#+1
   \   00000042   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000044   000C               LSRS     R0,R0,#+16
   \   00000046   1428               CMP      R0,#+20
   \   00000048   19D2               BCS      ??ModBus_MASTER_TX_4
    583                      {
    584                        *Current_ZD_MODBUS=(*Current_ZD_MODBUS)+1;
   \   0000004A   2878               LDRB     R0,[R5, #+0]
   \   0000004C   401C               ADDS     R0,R0,#+1
   \   0000004E   2870               STRB     R0,[R5, #+0]
    585                        
    586                            ZD_MODBUS[0].Error=0x0;
   \   00000050   0020               MOVS     R0,#+0
   \   00000052   E072               STRB     R0,[R4, #+11]
   \   00000054   000A               LSRS     R0,R0,#+8
   \   00000056   2073               STRB     R0,[R4, #+12]
    587                            ZD_MODBUS[1].Error=0x0;
   \   00000058   0020               MOVS     R0,#+0
   \   0000005A   2076               STRB     R0,[R4, #+24]
   \   0000005C   000A               LSRS     R0,R0,#+8
   \   0000005E   6076               STRB     R0,[R4, #+25]
    588                            ZD_MODBUS[2].Error=0x0;
   \   00000060   2000               MOVS     R0,R4
   \   00000062   2530               ADDS     R0,R0,#+37
   \   00000064   0021               MOVS     R1,#+0
   \   00000066   0170               STRB     R1,[R0, #+0]
   \   00000068   090A               LSRS     R1,R1,#+8
   \   0000006A   4170               STRB     R1,[R0, #+1]
    589                            ZD_MODBUS[3].Error=0x0;
   \   0000006C   2000               MOVS     R0,R4
   \   0000006E   3230               ADDS     R0,R0,#+50
   \   00000070   0021               MOVS     R1,#+0
   \   00000072   0170               STRB     R1,[R0, #+0]
   \   00000074   090A               LSRS     R1,R1,#+8
   \   00000076   4170               STRB     R1,[R0, #+1]
   \   00000078   03E0               B        ??ModBus_MASTER_TX_5
    590                        
    591                      }
   \                     ??ModBus_MASTER_TX_3:
   \   0000007A   0020               MOVS     R0,#+0
   \   0000007C   B6E0               B        ??ModBus_MASTER_TX_6
    592                      else
    593                      {
    594                        *Current_ZD_MODBUS=0;
   \                     ??ModBus_MASTER_TX_4:
   \   0000007E   0020               MOVS     R0,#+0
   \   00000080   2870               STRB     R0,[R5, #+0]
    595                      } 
    596                      
    597                      /*
    598                      if (ZD_MODBUS[*Current_ZD_MODBUS].Adress == 0) 
    599                      {
    600                        *ERR_ZD_MODBUS=1;
    601                        goto Skok;
    602                      }
    603                        
    604          
    605                      
    606                      if  (ZD_MODBUS[*Current_ZD_MODBUS].Error > 50)
    607                       {
    608                         ZD_MODBUS[*Current_ZD_MODBUS].Error++;
    609                         if  (ZD_MODBUS[*Current_ZD_MODBUS].Error > 5000+(*Current_ZD_MODBUS)*10)
    610                         {
    611                            ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
    612                  
    613                         }
    614                         else
    615                         {
    616                           goto Skok;
    617                           
    618                         }
    619                       }
    620                       Delay(1);
    621                      
    622                      */
    623                      
    624                   char liB15 = (((ZD_MODBUS[*Current_ZD_MODBUS].Coil)-1) / 8)+1;  
   \                     ??ModBus_MASTER_TX_5:
   \   00000082   2878               LDRB     R0,[R5, #+0]
   \   00000084   0D21               MOVS     R1,#+13
   \   00000086   4843               MULS     R0,R1,R0
   \   00000088   2118               ADDS     R1,R4,R0
   \   0000008A   8879               LDRB     R0,[R1, #+6]
   \   0000008C   CA79               LDRB     R2,[R1, #+7]
   \   0000008E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   00000090   120C               LSRS     R2,R2,#+16
   \   00000092   1043               ORRS     R0,R0,R2
   \   00000094   401E               SUBS     R0,R0,#+1
   \   00000096   0821               MOVS     R1,#+8
   \   00000098   ........           BL       __aeabi_idivmod
   \   0000009C   0700               MOVS     R7,R0
   \   0000009E   7F1C               ADDS     R7,R7,#+1
    625                      
    626           //*** Funkcje uproszczone dostosowane do systemu. Nie zawieraj¹ wszystkich mo¿liwoœci modbus
    627                      
    628                      
    629          
    630                   
    631                   
    632                      
    633                      
    634                       //Write Multiple Status  (zapis rejestru)
    635                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==0xf)
   \   000000A0   2878               LDRB     R0,[R5, #+0]
   \   000000A2   0D21               MOVS     R1,#+13
   \   000000A4   4843               MULS     R0,R1,R0
   \   000000A6   2018               ADDS     R0,R4,R0
   \   000000A8   4078               LDRB     R0,[R0, #+1]
   \   000000AA   0F28               CMP      R0,#+15
   \   000000AC   00D0               BEQ      .+4
   \   000000AE   9CE0               B        ??ModBus_MASTER_TX_7
    636                      {
    637                                    
    638                        
    639                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
   \   000000B0   2878               LDRB     R0,[R5, #+0]
   \   000000B2   0D21               MOVS     R1,#+13
   \   000000B4   4843               MULS     R0,R1,R0
   \   000000B6   205C               LDRB     R0,[R4, R0]
   \   000000B8   3070               STRB     R0,[R6, #+0]
    640                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
   \   000000BA   2878               LDRB     R0,[R5, #+0]
   \   000000BC   0D21               MOVS     R1,#+13
   \   000000BE   4843               MULS     R0,R1,R0
   \   000000C0   2018               ADDS     R0,R4,R0
   \   000000C2   4078               LDRB     R0,[R0, #+1]
   \   000000C4   7070               STRB     R0,[R6, #+1]
    641                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)   
   \   000000C6   2878               LDRB     R0,[R5, #+0]
   \   000000C8   0D21               MOVS     R1,#+13
   \   000000CA   4843               MULS     R0,R1,R0
   \   000000CC   2118               ADDS     R1,R4,R0
   \   000000CE   8878               LDRB     R0,[R1, #+2]
   \   000000D0   CA78               LDRB     R2,[R1, #+3]
   \   000000D2   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000000D4   120C               LSRS     R2,R2,#+16
   \   000000D6   1043               ORRS     R0,R0,R2
   \   000000D8   3100               MOVS     R1,R6
   \   000000DA   891C               ADDS     R1,R1,#+2
   \   000000DC   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000000DE   000C               LSRS     R0,R0,#+16
   \   000000E0   ........           BL       SetWordToBytes
    642                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );                                             //il przesy³anych bajtów
   \   000000E4   2878               LDRB     R0,[R5, #+0]
   \   000000E6   0D21               MOVS     R1,#+13
   \   000000E8   4843               MULS     R0,R1,R0
   \   000000EA   2118               ADDS     R1,R4,R0
   \   000000EC   8879               LDRB     R0,[R1, #+6]
   \   000000EE   CA79               LDRB     R2,[R1, #+7]
   \   000000F0   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000000F2   120C               LSRS     R2,R2,#+16
   \   000000F4   1043               ORRS     R0,R0,R2
   \   000000F6   3100               MOVS     R1,R6
   \   000000F8   091D               ADDS     R1,R1,#+4
   \   000000FA   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000000FC   000C               LSRS     R0,R0,#+16
   \   000000FE   ........           BL       SetWordToBytes
    643                                Buff_TX[6]=liB15; 
   \   00000102   B771               STRB     R7,[R6, #+6]
    644                                Buff_TX[7]=(MainStage.StageQ[ZD_MODBUS[*Current_ZD_MODBUS].StartAdr].Value[ZD_MODBUS[*Current_ZD_MODBUS].Target]) & 0xFF; 
   \   00000104   2878               LDRB     R0,[R5, #+0]
   \   00000106   0D21               MOVS     R1,#+13
   \   00000108   4843               MULS     R0,R1,R0
   \   0000010A   2018               ADDS     R0,R4,R0
   \   0000010C   0179               LDRB     R1,[R0, #+4]
   \   0000010E   4279               LDRB     R2,[R0, #+5]
   \   00000110   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   00000112   120C               LSRS     R2,R2,#+16
   \   00000114   1143               ORRS     R1,R1,R2
   \   00000116   2878               LDRB     R0,[R5, #+0]
   \   00000118   0D22               MOVS     R2,#+13
   \   0000011A   5043               MULS     R0,R2,R0
   \   0000011C   2018               ADDS     R0,R4,R0
   \   0000011E   8278               LDRB     R2,[R0, #+2]
   \   00000120   C378               LDRB     R3,[R0, #+3]
   \   00000122   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+16
   \   00000124   1B0C               LSRS     R3,R3,#+16
   \   00000126   1A43               ORRS     R2,R2,R3
   \   00000128   3B48               LDR      R0,??ModBus_MASTER_TX_1+0x24  ;; 0x3a2
   \   0000012A   1204               LSLS     R2,R2,#+16       ;; ZeroExtS R2,R2,#+16,#+16
   \   0000012C   120C               LSRS     R2,R2,#+16
   \   0000012E   0223               MOVS     R3,#+2
   \   00000130   5A43               MULS     R2,R3,R2
   \   00000132   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   00000134   090C               LSRS     R1,R1,#+16
   \   00000136   1623               MOVS     R3,#+22
   \   00000138   5943               MULS     R1,R3,R1
   \   0000013A   384B               LDR      R3,??ModBus_MASTER_TX_1+0x28  ;; MainStage
   \   0000013C   5918               ADDS     R1,R3,R1
   \   0000013E   8918               ADDS     R1,R1,R2
   \   00000140   085A               LDRH     R0,[R1, R0]
   \   00000142   F071               STRB     R0,[R6, #+7]
    645                                Buff_TX[8]=((MainStage.StageQ[ZD_MODBUS[*Current_ZD_MODBUS].StartAdr].Value[ZD_MODBUS[*Current_ZD_MODBUS].Target])>>8) & 0xFF; 
   \   00000144   2878               LDRB     R0,[R5, #+0]
   \   00000146   0D21               MOVS     R1,#+13
   \   00000148   4843               MULS     R0,R1,R0
   \   0000014A   2118               ADDS     R1,R4,R0
   \   0000014C   0879               LDRB     R0,[R1, #+4]
   \   0000014E   4A79               LDRB     R2,[R1, #+5]
   \   00000150   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   00000152   120C               LSRS     R2,R2,#+16
   \   00000154   1043               ORRS     R0,R0,R2
   \   00000156   2978               LDRB     R1,[R5, #+0]
   \   00000158   0D22               MOVS     R2,#+13
   \   0000015A   5143               MULS     R1,R2,R1
   \   0000015C   6218               ADDS     R2,R4,R1
   \   0000015E   9178               LDRB     R1,[R2, #+2]
   \   00000160   D378               LDRB     R3,[R2, #+3]
   \   00000162   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+16
   \   00000164   1B0C               LSRS     R3,R3,#+16
   \   00000166   1943               ORRS     R1,R1,R3
   \   00000168   2B4A               LDR      R2,??ModBus_MASTER_TX_1+0x24  ;; 0x3a2
   \   0000016A   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   0000016C   090C               LSRS     R1,R1,#+16
   \   0000016E   0223               MOVS     R3,#+2
   \   00000170   5943               MULS     R1,R3,R1
   \   00000172   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000174   000C               LSRS     R0,R0,#+16
   \   00000176   1623               MOVS     R3,#+22
   \   00000178   5843               MULS     R0,R3,R0
   \   0000017A   284B               LDR      R3,??ModBus_MASTER_TX_1+0x28  ;; MainStage
   \   0000017C   1818               ADDS     R0,R3,R0
   \   0000017E   4018               ADDS     R0,R0,R1
   \   00000180   805A               LDRH     R0,[R0, R2]
   \   00000182   0012               ASRS     R0,R0,#+8
   \   00000184   3072               STRB     R0,[R6, #+8]
    646                                
    647                                SetWordToBytes(crc16(Buff_TX,liB15+7),&Buff_TX[7+liB15] );                    //wstawia sumê kontroln¹                     
   \   00000186   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000188   3F0E               LSRS     R7,R7,#+24
   \   0000018A   3900               MOVS     R1,R7
   \   0000018C   C91D               ADDS     R1,R1,#+7
   \   0000018E   3000               MOVS     R0,R6
   \   00000190   ........           BL       crc16
   \   00000194   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000196   3F0E               LSRS     R7,R7,#+24
   \   00000198   F119               ADDS     R1,R6,R7
   \   0000019A   C91D               ADDS     R1,R1,#+7
   \   0000019C   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000019E   000C               LSRS     R0,R0,#+16
   \   000001A0   ........           BL       SetWordToBytes
    648                                Buff_TX[9+liB15]=0;
   \   000001A4   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000001A6   3F0E               LSRS     R7,R7,#+24
   \   000001A8   F019               ADDS     R0,R6,R7
   \   000001AA   0021               MOVS     R1,#+0
   \   000001AC   4172               STRB     R1,[R0, #+9]
    649                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,9+liB15,0, 0);                        //Wysyla ramke        
   \   000001AE   82B0               SUB      SP,SP,#+8
   \   000001B0   0020               MOVS     R0,#+0
   \   000001B2   0090               STR      R0,[SP, #+0]
   \   000001B4   0023               MOVS     R3,#+0
   \   000001B6   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000001B8   3F0E               LSRS     R7,R7,#+24
   \   000001BA   3A00               MOVS     R2,R7
   \   000001BC   0932               ADDS     R2,R2,#+9
   \   000001BE   3100               MOVS     R1,R6
   \   000001C0   0298               LDR      R0,[SP, #+8]
   \   000001C2   ........           BL       AT91F_US_SendFrame
   \   000001C6   02B0               ADD      SP,SP,#+8
    650                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * (9+liB15)) +100);   
   \   000001C8   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000001CA   3F0E               LSRS     R7,R7,#+24
   \   000001CC   0937               ADDS     R7,R7,#+9
   \   000001CE   3800               MOVS     R0,R7
   \   000001D0   ........           BL       __aeabi_i2f
   \   000001D4   1249               LDR      R1,??ModBus_MASTER_TX_1+0x2C  ;; g_US0_OneByteTxTime
   \   000001D6   0968               LDR      R1,[R1, #+0]
   \   000001D8   ........           BL       __aeabi_fmul
   \   000001DC   1149               LDR      R1,??ModBus_MASTER_TX_1+0x30  ;; 0x42c80000
   \   000001DE   ........           BL       __aeabi_fadd
   \   000001E2   ........           BL       __aeabi_f2iz
   \   000001E6   1049               LDR      R1,??ModBus_MASTER_TX_1+0x34  ;; g_US0_Comm_MinCykle
   \   000001E8   0860               STR      R0,[R1, #+0]
    651                      }
    652                    
    653                      
    654                      
    655                      
    656                      
    657                      
    658                      
    659           //*** Funkcje pe³ne MODBUS         
    660                      
    661                     
    662             /*         
    663                      
    664                      
    665                     
    666                      //Read Coil Status  (odczyt biezacego stanu grupy wyjsc cyfrowych)
    667                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==1)
    668                       {
    669                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    670                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    671                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    672                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    673                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                             //wstawia sumê kontroln¹
    674                                
    675                                Buff_TX[8]=0;
    676                                Buff_TX[9]=0;
    677                                Buff_TX[10]=0;
    678                                
    679                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    680                                
    681                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);    
    682                       }
    683                                
    684                            
    685                      //Read discrete input  (odczyt stanu grupy wejsc cyfrowych)
    686                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==2)
    687                      {
    688                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    689                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    690                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    691                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    692                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹
    693                                
    694                                Buff_TX[8]=0;
    695                                
    696                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    697                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +10);   
    698                      }   
    699                                
    700                      //Holding Register (odczyt zawartosci grupy rejestrów/analogów wyjsciowych)
    701                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==3)
    702                      {
    703                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    704                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    705                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    706                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    707                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹
    708                                
    709                                Buff_TX[8]=0;
    710                                
    711                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    712                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);   
    713                      } 
    714                                
    715                        //Input Register (odczyt zawartosci grupy rejestrów/analogów wejsciowych)      
    716                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==4)
    717                      {
    718                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    719                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    720                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr,&Buff_TX[2] );       //Pocz¹tkowy adres danych (w urz¹dzeniu)
    721                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //Iloœæ danych do pobrania
    722                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹
    723                                
    724                                Buff_TX[8]=0;
    725                                
    726                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke
    727                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);   
    728                      }            
    729                                
    730                      //Write Coil Status  (ustawienie stanu jednego wyjscia cyfrowego)
    731                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==5)
    732                      {
    733                                TmpWalue = (ram.VarCom_Word[ZD_MODBUS[*Current_ZD_MODBUS].StartAdr]) & 0x1;
    734                                                      
    735                                if ((TmpWalue==ZD_MODBUS[*Current_ZD_MODBUS].LastSend) && (ZD_MODBUS[*Current_ZD_MODBUS].Confirm==1) )     return 0;
    736                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=0;
    737                                ZD_MODBUS[*Current_ZD_MODBUS].LastSend=TmpWalue;
    738                                  
    739                                GetBinVarPackComm(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr, 1, &Buff_TX[4]);
    740                               
    741                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    742                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    743                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)                          
    744                                
    745                                
    746                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                              //wstawia sumê kontroln¹                     
    747                                Buff_TX[8]=0;
    748                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);                           //Wysyla ramke        
    749                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1)+100;   
    750                      }
    751          
    752                      //Write Single Register  (zapis do pojedynczego rejestru/analogu wyjsciowego)
    753                      if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==6)
    754                      { 
    755                               
    756                        
    757                        
    758                        
    759                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    760                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    761                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)                         
    762                                
    763                                SetWordToBytes(ram.VarCom_Byte[(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr*2)],&Buff_TX[4] ); 
    764                                
    765                                SetWordToBytes(crc16(Buff_TX,6),&Buff_TX[6] );                                //wstawia sumê kontroln¹                     
    766                                
    767                                Buff_TX[8]=0;
    768                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,8,0, 0);        //Wysyla ramke        
    769                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * 8) +1);   
    770                      }
    771                                
    772                      //Write Multiple Status  (zapis zmiennych dwustanowych - grupowo DA00-DDFF)
    773                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==0xf)
    774                      {
    775                                    
    776                        
    777                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    778                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    779                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)   
    780                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );                                             //il przesy³anych bajtów
    781                                Buff_TX[6]=liB15;
    782                                //GetBinVarPackComm(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr, (ZD_MODBUS[*Current_ZD_MODBUS].Coil), &Buff_TX[7]);  //void GetBinVarPackComm(WORD adr, WORD Length, char *Tab )
    783                                GetRegPackComm(ZD_MODBUS[*Current_ZD_MODBUS].StartAdr, ZD_MODBUS[*Current_ZD_MODBUS].Target,  (ZD_MODBUS[*Current_ZD_MODBUS].Coil), &Buff_TX[7]);//(WORD Adr, char Reg, char LengthBit, unsigned char* Tab )
    784                                
    785                                //Buff_TX[7]  =0x01;
    786                                
    787                                SetWordToBytes(crc16(Buff_TX,liB15+7),&Buff_TX[7+liB15] );                    //wstawia sumê kontroln¹                     
    788                                Buff_TX[9+liB15]=0;
    789                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,9+liB15,0, 0);                        //Wysyla ramke        
    790                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * (9+liB15)) +100);   
    791                      }
    792                                          
    793                                
    794                        //Write Single Register  (zapis zmiennych analogowych - grupowo DA00-DDFF)
    795                       if ((ZD_MODBUS[*Current_ZD_MODBUS].Function)==0x10)
    796                      {
    797                        
    798                                Buff_TX[0]  = ZD_MODBUS[*Current_ZD_MODBUS].Adress;                        //Adres
    799                                Buff_TX[1]  = ZD_MODBUS[*Current_ZD_MODBUS].Function;                      //Funkcja                                                      
    800                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Target,&Buff_TX[2] );         //Adres zmiennej (w urz¹dzeniu)   
    801                                SetWordToBytes(ZD_MODBUS[*Current_ZD_MODBUS].Coil,&Buff_TX[4] );           //il przesy³anych komórek
    802                                Buff_TX[6]  =(ZD_MODBUS[*Current_ZD_MODBUS].Coil) *2;                      //il przesy³anych bajtów     
    803                                for(int i = 0; i < ZD_MODBUS[*Current_ZD_MODBUS].Coil; ++i)
    804                                {
    805                                  Buff_TX[7+(i*2)]=ram.VarCom_Byte[((ZD_MODBUS[*Current_ZD_MODBUS].StartAdr)*2)+(i*2)];
    806                                  Buff_TX[8+(i*2)]=ram.VarCom_Byte[((ZD_MODBUS[*Current_ZD_MODBUS].StartAdr)*2)+(i*2)+1];
    807                                }
    808                                
    809                                SetWordToBytes(crc16(Buff_TX,(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 )+7),&Buff_TX[7+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 )] );                    //wstawia sumê kontroln¹                     
    810                                Buff_TX[9+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 )]=0;
    811                                AT91F_US_SendFrame(AT91C_BASE_US,Buff_TX,9+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 ),0, 0);                        //Wysyla ramke        
    812                                g_US0_Comm_MinCykle =  (int)((g_US0_OneByteTxTime * (9+(ZD_MODBUS[*Current_ZD_MODBUS].Coil *2 ))) +10);   
    813                                                         
    814                      }    
    815                          
    816                    
    817                         
    818          */
    819          
    820                 return 1;
   \                     ??ModBus_MASTER_TX_7:
   \   000001EA   0120               MOVS     R0,#+1
   \                     ??ModBus_MASTER_TX_6:
   \   000001EC   01B0               ADD      SP,SP,#+4
   \   000001EE   F0BC               POP      {R4-R7}
   \   000001F0   02BC               POP      {R1}
   \   000001F2   0847               BX       R1               ;; return
   \                     ??ModBus_MASTER_TX_1:
   \   000001F4   0040FCFF           DC32     0xfffc4000
   \   000001F8   ........           DC32     ZD_MODBUS_1
   \   000001FC   ........           DC32     g_Current_ZD_MODBUS_1
   \   00000200   ........           DC32     Buff_TX_1
   \   00000204   0000FCFF           DC32     0xfffc0000
   \   00000208   ........           DC32     ZD_MODBUS_0
   \   0000020C   ........           DC32     g_Current_ZD_MODBUS_0
   \   00000210   ........           DC32     Buff_TX_0
   \   00000214   ........           DC32     nr_tmp
   \   00000218   A2030000           DC32     0x3a2
   \   0000021C   ........           DC32     MainStage
   \   00000220   ........           DC32     g_US0_OneByteTxTime
   \   00000224   0000C842           DC32     0x42c80000
   \   00000228   ........           DC32     g_US0_Comm_MinCykle
    821          }//_______________________ Koniec funkcji ModBus_MASTER_TX_US0 _______________________
    822          
    823          
    824          
    825                                          
    826          
    827          
    828          
    829          //!-----------------------------------------------------------------------------
    830          //!  Nazwa funkcji :    ModBus_MASTER_Return
    831          //!  Opis:              Funkcja konwertuje wartoœæ w WORD na 2 kolejne bajty
    832          //!-----------------------------------------------------------------------------
    833          //!  modbusframe  - otrzymana ramka danych
    834          //!----------------------------------------------------------------------------- 
    835          

   \                                 In section Debug.txt, align 4, keep-with-next
    836          BYTE ModBus_MASTER_Return(BYTE* modbusframe, char US_Nr)
    837          {
   \                     ModBus_MASTER_Return:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   85B0               SUB      SP,SP,#+20
   \   00000004   0400               MOVS     R4,R0
   \   00000006   0800               MOVS     R0,R1
    838            //WORD  RamByte=(((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])))/8);
    839            //WORD  RamCall=((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3])));
    840            //BYTE  RamBit= ((((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))+0) % 8;
    841            //BYTE  ByteCount=(((((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]))-1)/8)+1;
    842            //BYTE  WordCount=(((WORD)modbusframe[4])<<8 | ((WORD)modbusframe[5]));
    843            //WORD  BitCount = 0;
    844            
    845          
    846            char  CurentByteBufTX = 0;
   \   00000008   0025               MOVS     R5,#+0
    847            char  CurentBitBufTX = 0;
   \   0000000A   0026               MOVS     R6,#+0
    848            WORD ByteCount =0;
   \   0000000C   0027               MOVS     R7,#+0
    849            WORD WordCount =0;
   \   0000000E   0022               MOVS     R2,#+0
    850            WORD BitCount = 0;
   \   00000010   6946               MOV      R1,SP
   \   00000012   0023               MOVS     R3,#+0
   \   00000014   8B81               STRH     R3,[R1, #+12]
    851            unsigned short RamByteTMP;
    852          
    853            WORD RamBit = 0;
   \   00000016   0021               MOVS     R1,#+0
    854            
    855                ptr_ZD_MODBUS ZD_MODBUS;
    856                char* Current_ZD_MODBUS;
    857                //char* ERR_ZD_MODBUS;
    858                //BYTE* Buff_TX;
    859                
    860              
    861                //wybór USARTa
    862                if (US_Nr) 
   \   00000018   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000001A   000E               LSRS     R0,R0,#+24
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   04D0               BEQ      ??ModBus_MASTER_Return_0
    863                {
    864                    ZD_MODBUS         =   ZD_MODBUS_1;
   \   00000020   D648               LDR      R0,??ModBus_MASTER_Return_1  ;; ZD_MODBUS_1
   \   00000022   0090               STR      R0,[SP, #+0]
    865                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_1;
   \   00000024   D648               LDR      R0,??ModBus_MASTER_Return_1+0x4  ;; g_Current_ZD_MODBUS_1
   \   00000026   0190               STR      R0,[SP, #+4]
   \   00000028   03E0               B        ??ModBus_MASTER_Return_2
    866                   // ERR_ZD_MODBUS     =   &g_ERR_ZD_MODBUS_1;
    867                   // Buff_TX           =   Buff_TX_1; 
    868                }   
    869                else 
    870                {
    871                    ZD_MODBUS         =   ZD_MODBUS_0;
   \                     ??ModBus_MASTER_Return_0:
   \   0000002A   D648               LDR      R0,??ModBus_MASTER_Return_1+0x8  ;; ZD_MODBUS_0
   \   0000002C   0090               STR      R0,[SP, #+0]
    872                    Current_ZD_MODBUS =   &g_Current_ZD_MODBUS_0;
   \   0000002E   D648               LDR      R0,??ModBus_MASTER_Return_1+0xC  ;; g_Current_ZD_MODBUS_0
   \   00000030   0190               STR      R0,[SP, #+4]
    873                    //ERR_ZD_MODBUS     =   &g_ERR_ZD_MODBUS_0;
    874                    //Buff_TX           =   Buff_TX_0; 
    875                }
    876                  
    877            
    878              g_Ans_ZD_MODBUS_0 = g_US0_Comm_TIMEOUT+1; 
   \                     ??ModBus_MASTER_Return_2:
   \   00000032   D648               LDR      R0,??ModBus_MASTER_Return_1+0x10  ;; g_Ans_ZD_MODBUS_0
   \   00000034   D649               LDR      R1,??ModBus_MASTER_Return_1+0x14  ;; g_US0_Comm_TIMEOUT
   \   00000036   0968               LDR      R1,[R1, #+0]
   \   00000038   491C               ADDS     R1,R1,#+1
   \   0000003A   0170               STRB     R1,[R0, #+0]
    879               
    880              
    881              if ((modbusframe[0]) != ZD_MODBUS[*Current_ZD_MODBUS].Adress) 
   \   0000003C   2078               LDRB     R0,[R4, #+0]
   \   0000003E   0199               LDR      R1,[SP, #+4]
   \   00000040   0978               LDRB     R1,[R1, #+0]
   \   00000042   0D22               MOVS     R2,#+13
   \   00000044   5143               MULS     R1,R2,R1
   \   00000046   009A               LDR      R2,[SP, #+0]
   \   00000048   515C               LDRB     R1,[R2, R1]
   \   0000004A   8842               CMP      R0,R1
   \   0000004C   16D0               BEQ      ??ModBus_MASTER_Return_3
    882                {
    883                    ZD_MODBUS[*Current_ZD_MODBUS].Error++;
   \   0000004E   0198               LDR      R0,[SP, #+4]
   \   00000050   0078               LDRB     R0,[R0, #+0]
   \   00000052   0D21               MOVS     R1,#+13
   \   00000054   4843               MULS     R0,R1,R0
   \   00000056   0099               LDR      R1,[SP, #+0]
   \   00000058   0918               ADDS     R1,R1,R0
   \   0000005A   C87A               LDRB     R0,[R1, #+11]
   \   0000005C   0A7B               LDRB     R2,[R1, #+12]
   \   0000005E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   00000060   120C               LSRS     R2,R2,#+16
   \   00000062   1043               ORRS     R0,R0,R2
   \   00000064   0199               LDR      R1,[SP, #+4]
   \   00000066   0978               LDRB     R1,[R1, #+0]
   \   00000068   0D22               MOVS     R2,#+13
   \   0000006A   5143               MULS     R1,R2,R1
   \   0000006C   009A               LDR      R2,[SP, #+0]
   \   0000006E   5118               ADDS     R1,R2,R1
   \   00000070   401C               ADDS     R0,R0,#+1
   \   00000072   C872               STRB     R0,[R1, #+11]
   \   00000074   000A               LSRS     R0,R0,#+8
   \   00000076   0873               STRB     R0,[R1, #+12]
    884                    //TRACE_INFO("\n\r ODP : Blad adresu \n\r");
    885                    return 0;                                                                   //wyjdz jezeli zly adres 
   \   00000078   0020               MOVS     R0,#+0
   \   0000007A   27E2               B        ??ModBus_MASTER_Return_4
    886                }
    887          
    888          
    889            
    890          
    891                
    892                      
    893                      //Response to question: Read Coil Status  (odczyt zmiennych dwustanowych do DA00-DDFF)
    894              
    895                      if(modbusframe[1]==1)
   \                     ??ModBus_MASTER_Return_3:
   \   0000007C   6078               LDRB     R0,[R4, #+1]
   \   0000007E   0128               CMP      R0,#+1
   \   00000080   00D0               BEQ      .+4
   \   00000082   7EE0               B        ??ModBus_MASTER_Return_5
    896                      {
    897                                ByteCount = ((WORD)modbusframe[2]);
   \   00000084   A778               LDRB     R7,[R4, #+2]
    898                                BitCount =  ((WORD)modbusframe[2]) * 8;
   \   00000086   6846               MOV      R0,SP
   \   00000088   A178               LDRB     R1,[R4, #+2]
   \   0000008A   0822               MOVS     R2,#+8
   \   0000008C   5143               MULS     R1,R2,R1
   \   0000008E   8181               STRH     R1,[R0, #+12]
    899                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   00000090   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   00000092   3F0C               LSRS     R7,R7,#+16
   \   00000094   E019               ADDS     R0,R4,R7
   \   00000096   C078               LDRB     R0,[R0, #+3]
   \   00000098   0002               LSLS     R0,R0,#+8
   \   0000009A   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   0000009C   3F0C               LSRS     R7,R7,#+16
   \   0000009E   E119               ADDS     R1,R4,R7
   \   000000A0   0D79               LDRB     R5,[R1, #+4]
   \   000000A2   0543               ORRS     R5,R5,R0
   \   000000A4   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   000000A6   3F0C               LSRS     R7,R7,#+16
   \   000000A8   FF1C               ADDS     R7,R7,#+3
   \   000000AA   3900               MOVS     R1,R7
   \   000000AC   2000               MOVS     R0,R4
   \   000000AE   ........           BL       crc16
   \   000000B2   8542               CMP      R5,R0
   \   000000B4   01D0               BEQ      ??ModBus_MASTER_Return_6
   \   000000B6   0020               MOVS     R0,#+0
   \   000000B8   08E2               B        ??ModBus_MASTER_Return_4
    900          
    901                                CurentByteBufTX=3;
   \                     ??ModBus_MASTER_Return_6:
   \   000000BA   0325               MOVS     R5,#+3
    902                                CurentBitBufTX=0;
   \   000000BC   0026               MOVS     R6,#+0
    903          
    904                                RamByteTMP = ZD_MODBUS[*Current_ZD_MODBUS].Target;
   \   000000BE   0198               LDR      R0,[SP, #+4]
   \   000000C0   0078               LDRB     R0,[R0, #+0]
   \   000000C2   0D21               MOVS     R1,#+13
   \   000000C4   4843               MULS     R0,R1,R0
   \   000000C6   0099               LDR      R1,[SP, #+0]
   \   000000C8   0918               ADDS     R1,R1,R0
   \   000000CA   8878               LDRB     R0,[R1, #+2]
   \   000000CC   CA78               LDRB     R2,[R1, #+3]
   \   000000CE   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000000D0   120C               LSRS     R2,R2,#+16
   \   000000D2   1043               ORRS     R0,R0,R2
    905                                RamBit  = 0;
   \   000000D4   0021               MOVS     R1,#+0
    906                                
    907                                for (int i=0; i<BitCount; i++)
   \   000000D6   0022               MOVS     R2,#+0
   \   000000D8   0292               STR      R2,[SP, #+8]
   \   000000DA   04E0               B        ??ModBus_MASTER_Return_7
    908                                { 
    909                                  if ((modbusframe[CurentByteBufTX]>>CurentBitBufTX)&0x1)
    910                                  {
    911                                    ram.VarCom_Word[RamByteTMP] |= 0x1 << RamBit;
    912                                  }
    913                                  else
    914                                  {
    915                                    ram.VarCom_Word[RamByteTMP] &= ~(0x1 << RamBit);
    916                                  }   
    917                                 
    918                                  if (RamBit<=6) {RamBit++;} else {RamBit=0; RamByteTMP++;}
    919                                  if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
   \                     ??ModBus_MASTER_Return_8:
   \   000000DC   0026               MOVS     R6,#+0
   \   000000DE   6D1C               ADDS     R5,R5,#+1
   \                     ??ModBus_MASTER_Return_9:
   \   000000E0   029A               LDR      R2,[SP, #+8]
   \   000000E2   521C               ADDS     R2,R2,#+1
   \   000000E4   0292               STR      R2,[SP, #+8]
   \                     ??ModBus_MASTER_Return_7:
   \   000000E6   029A               LDR      R2,[SP, #+8]
   \   000000E8   6B46               MOV      R3,SP
   \   000000EA   9B89               LDRH     R3,[R3, #+12]
   \   000000EC   9A42               CMP      R2,R3
   \   000000EE   36DA               BGE      ??ModBus_MASTER_Return_10
   \   000000F0   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000F2   2D0E               LSRS     R5,R5,#+24
   \   000000F4   625D               LDRB     R2,[R4, R5]
   \   000000F6   3241               ASRS     R2,R2,R6
   \   000000F8   D207               LSLS     R2,R2,#+31
   \   000000FA   11D5               BPL      ??ModBus_MASTER_Return_11
   \   000000FC   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000000FE   000C               LSRS     R0,R0,#+16
   \   00000100   0227               MOVS     R7,#+2
   \   00000102   4743               MULS     R7,R0,R7
   \   00000104   A34A               LDR      R2,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   00000106   BC46               MOV      R12,R7
   \   00000108   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000010A   000C               LSRS     R0,R0,#+16
   \   0000010C   0227               MOVS     R7,#+2
   \   0000010E   4743               MULS     R7,R0,R7
   \   00000110   A04B               LDR      R3,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   00000112   DF5B               LDRH     R7,[R3, R7]
   \   00000114   0123               MOVS     R3,#+1
   \   00000116   8B40               LSLS     R3,R3,R1
   \   00000118   3B43               ORRS     R3,R3,R7
   \   0000011A   6746               MOV      R7,R12
   \   0000011C   D353               STRH     R3,[R2, R7]
   \   0000011E   10E0               B        ??ModBus_MASTER_Return_12
   \                     ??ModBus_MASTER_Return_11:
   \   00000120   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000122   000C               LSRS     R0,R0,#+16
   \   00000124   0223               MOVS     R3,#+2
   \   00000126   4343               MULS     R3,R0,R3
   \   00000128   9A4A               LDR      R2,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   0000012A   9C46               MOV      R12,R3
   \   0000012C   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000012E   000C               LSRS     R0,R0,#+16
   \   00000130   0227               MOVS     R7,#+2
   \   00000132   4743               MULS     R7,R0,R7
   \   00000134   974B               LDR      R3,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   00000136   DF5B               LDRH     R7,[R3, R7]
   \   00000138   0123               MOVS     R3,#+1
   \   0000013A   8B40               LSLS     R3,R3,R1
   \   0000013C   9F43               BICS     R7,R7,R3
   \   0000013E   6346               MOV      R3,R12
   \   00000140   D752               STRH     R7,[R2, R3]
   \                     ??ModBus_MASTER_Return_12:
   \   00000142   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   00000144   090C               LSRS     R1,R1,#+16
   \   00000146   0729               CMP      R1,#+7
   \   00000148   01D2               BCS      ??ModBus_MASTER_Return_13
   \   0000014A   491C               ADDS     R1,R1,#+1
   \   0000014C   01E0               B        ??ModBus_MASTER_Return_14
   \                     ??ModBus_MASTER_Return_13:
   \   0000014E   0021               MOVS     R1,#+0
   \   00000150   401C               ADDS     R0,R0,#+1
   \                     ??ModBus_MASTER_Return_14:
   \   00000152   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000154   360E               LSRS     R6,R6,#+24
   \   00000156   072E               CMP      R6,#+7
   \   00000158   C0D2               BCS      ??ModBus_MASTER_Return_8
   \   0000015A   761C               ADDS     R6,R6,#+1
   \   0000015C   C0E7               B        ??ModBus_MASTER_Return_9
    920                                  
    921                                }
    922                       
    923                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \                     ??ModBus_MASTER_Return_10:
   \   0000015E   0198               LDR      R0,[SP, #+4]
   \   00000160   0078               LDRB     R0,[R0, #+0]
   \   00000162   0D21               MOVS     R1,#+13
   \   00000164   4843               MULS     R0,R1,R0
   \   00000166   0099               LDR      R1,[SP, #+0]
   \   00000168   0818               ADDS     R0,R1,R0
   \   0000016A   0021               MOVS     R1,#+0
   \   0000016C   C172               STRB     R1,[R0, #+11]
   \   0000016E   090A               LSRS     R1,R1,#+8
   \   00000170   0173               STRB     R1,[R0, #+12]
    924                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   00000172   0198               LDR      R0,[SP, #+4]
   \   00000174   0078               LDRB     R0,[R0, #+0]
   \   00000176   0D21               MOVS     R1,#+13
   \   00000178   4843               MULS     R0,R1,R0
   \   0000017A   0099               LDR      R1,[SP, #+0]
   \   0000017C   0818               ADDS     R0,R1,R0
   \   0000017E   0121               MOVS     R1,#+1
   \   00000180   8172               STRB     R1,[R0, #+10]
    925                                
    926                      }
    927                                
    928                            
    929                       //Response to question: Read discrete input  (odczyt zmiennych dyskretnych B000-B5FF)
    930                      if(modbusframe[1]==2)
   \                     ??ModBus_MASTER_Return_5:
   \   00000182   6078               LDRB     R0,[R4, #+1]
   \   00000184   0228               CMP      R0,#+2
   \   00000186   00D0               BEQ      .+4
   \   00000188   81E0               B        ??ModBus_MASTER_Return_15
    931                      {
    932                                       ByteCount = ((WORD)modbusframe[2]);
   \   0000018A   A778               LDRB     R7,[R4, #+2]
    933                                BitCount =  ((WORD)modbusframe[2])*8;
   \   0000018C   6846               MOV      R0,SP
   \   0000018E   A178               LDRB     R1,[R4, #+2]
   \   00000190   0822               MOVS     R2,#+8
   \   00000192   5143               MULS     R1,R2,R1
   \   00000194   8181               STRH     R1,[R0, #+12]
    934                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   00000196   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   00000198   3F0C               LSRS     R7,R7,#+16
   \   0000019A   E019               ADDS     R0,R4,R7
   \   0000019C   C078               LDRB     R0,[R0, #+3]
   \   0000019E   0002               LSLS     R0,R0,#+8
   \   000001A0   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   000001A2   3F0C               LSRS     R7,R7,#+16
   \   000001A4   E119               ADDS     R1,R4,R7
   \   000001A6   0D79               LDRB     R5,[R1, #+4]
   \   000001A8   0543               ORRS     R5,R5,R0
   \   000001AA   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   000001AC   3F0C               LSRS     R7,R7,#+16
   \   000001AE   FF1C               ADDS     R7,R7,#+3
   \   000001B0   3900               MOVS     R1,R7
   \   000001B2   2000               MOVS     R0,R4
   \   000001B4   ........           BL       crc16
   \   000001B8   8542               CMP      R5,R0
   \   000001BA   01D0               BEQ      ??ModBus_MASTER_Return_16
   \   000001BC   0020               MOVS     R0,#+0
   \   000001BE   85E1               B        ??ModBus_MASTER_Return_4
    935          
    936                                CurentByteBufTX=3;
   \                     ??ModBus_MASTER_Return_16:
   \   000001C0   0325               MOVS     R5,#+3
    937                                CurentBitBufTX=0;
   \   000001C2   0026               MOVS     R6,#+0
    938          
    939                                
    940                                RamByteTMP = ZD_MODBUS[*Current_ZD_MODBUS].Target/8;
   \   000001C4   0198               LDR      R0,[SP, #+4]
   \   000001C6   0078               LDRB     R0,[R0, #+0]
   \   000001C8   0D21               MOVS     R1,#+13
   \   000001CA   4843               MULS     R0,R1,R0
   \   000001CC   0099               LDR      R1,[SP, #+0]
   \   000001CE   0918               ADDS     R1,R1,R0
   \   000001D0   8878               LDRB     R0,[R1, #+2]
   \   000001D2   CA78               LDRB     R2,[R1, #+3]
   \   000001D4   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000001D6   120C               LSRS     R2,R2,#+16
   \   000001D8   1043               ORRS     R0,R0,R2
   \   000001DA   0821               MOVS     R1,#+8
   \   000001DC   ........           BL       __aeabi_idivmod
    941                                RamBit  = 0;
   \   000001E0   0021               MOVS     R1,#+0
    942                                
    943                                for (int i=0; i<BitCount; i++)
   \   000001E2   0022               MOVS     R2,#+0
   \   000001E4   0292               STR      R2,[SP, #+8]
   \   000001E6   04E0               B        ??ModBus_MASTER_Return_17
    944                                { 
    945                                  if ((modbusframe[CurentByteBufTX]>>CurentBitBufTX)&0x1)
    946                                  {
    947                                    ram.VarCom_Word[RamByteTMP] |= 0x1 << RamBit;
    948                                  }
    949                                  else
    950                                  {
    951                                    ram.VarCom_Word[RamByteTMP] &= ~(0x1 << RamBit);
    952                                  }   
    953                                 
    954                                  if (RamBit<=6) {RamBit++;} else {RamBit=0; RamByteTMP++;}
    955                                  if (CurentBitBufTX<7) {CurentBitBufTX++;} else {CurentBitBufTX=0; CurentByteBufTX++;}
   \                     ??ModBus_MASTER_Return_18:
   \   000001E8   0026               MOVS     R6,#+0
   \   000001EA   6D1C               ADDS     R5,R5,#+1
   \                     ??ModBus_MASTER_Return_19:
   \   000001EC   029A               LDR      R2,[SP, #+8]
   \   000001EE   521C               ADDS     R2,R2,#+1
   \   000001F0   0292               STR      R2,[SP, #+8]
   \                     ??ModBus_MASTER_Return_17:
   \   000001F2   029A               LDR      R2,[SP, #+8]
   \   000001F4   6B46               MOV      R3,SP
   \   000001F6   9B89               LDRH     R3,[R3, #+12]
   \   000001F8   9A42               CMP      R2,R3
   \   000001FA   36DA               BGE      ??ModBus_MASTER_Return_20
   \   000001FC   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000001FE   2D0E               LSRS     R5,R5,#+24
   \   00000200   625D               LDRB     R2,[R4, R5]
   \   00000202   3241               ASRS     R2,R2,R6
   \   00000204   D207               LSLS     R2,R2,#+31
   \   00000206   11D5               BPL      ??ModBus_MASTER_Return_21
   \   00000208   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000020A   000C               LSRS     R0,R0,#+16
   \   0000020C   0227               MOVS     R7,#+2
   \   0000020E   4743               MULS     R7,R0,R7
   \   00000210   604A               LDR      R2,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   00000212   BC46               MOV      R12,R7
   \   00000214   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000216   000C               LSRS     R0,R0,#+16
   \   00000218   0227               MOVS     R7,#+2
   \   0000021A   4743               MULS     R7,R0,R7
   \   0000021C   5D4B               LDR      R3,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   0000021E   DF5B               LDRH     R7,[R3, R7]
   \   00000220   0123               MOVS     R3,#+1
   \   00000222   8B40               LSLS     R3,R3,R1
   \   00000224   3B43               ORRS     R3,R3,R7
   \   00000226   6746               MOV      R7,R12
   \   00000228   D353               STRH     R3,[R2, R7]
   \   0000022A   10E0               B        ??ModBus_MASTER_Return_22
   \                     ??ModBus_MASTER_Return_21:
   \   0000022C   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000022E   000C               LSRS     R0,R0,#+16
   \   00000230   0223               MOVS     R3,#+2
   \   00000232   4343               MULS     R3,R0,R3
   \   00000234   574A               LDR      R2,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   00000236   9C46               MOV      R12,R3
   \   00000238   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000023A   000C               LSRS     R0,R0,#+16
   \   0000023C   0227               MOVS     R7,#+2
   \   0000023E   4743               MULS     R7,R0,R7
   \   00000240   544B               LDR      R3,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   00000242   DF5B               LDRH     R7,[R3, R7]
   \   00000244   0123               MOVS     R3,#+1
   \   00000246   8B40               LSLS     R3,R3,R1
   \   00000248   9F43               BICS     R7,R7,R3
   \   0000024A   6346               MOV      R3,R12
   \   0000024C   D752               STRH     R7,[R2, R3]
   \                     ??ModBus_MASTER_Return_22:
   \   0000024E   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   00000250   090C               LSRS     R1,R1,#+16
   \   00000252   0729               CMP      R1,#+7
   \   00000254   01D2               BCS      ??ModBus_MASTER_Return_23
   \   00000256   491C               ADDS     R1,R1,#+1
   \   00000258   01E0               B        ??ModBus_MASTER_Return_24
   \                     ??ModBus_MASTER_Return_23:
   \   0000025A   0021               MOVS     R1,#+0
   \   0000025C   401C               ADDS     R0,R0,#+1
   \                     ??ModBus_MASTER_Return_24:
   \   0000025E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000260   360E               LSRS     R6,R6,#+24
   \   00000262   072E               CMP      R6,#+7
   \   00000264   C0D2               BCS      ??ModBus_MASTER_Return_18
   \   00000266   761C               ADDS     R6,R6,#+1
   \   00000268   C0E7               B        ??ModBus_MASTER_Return_19
    956                                  
    957                                }
    958                       
    959                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \                     ??ModBus_MASTER_Return_20:
   \   0000026A   0198               LDR      R0,[SP, #+4]
   \   0000026C   0078               LDRB     R0,[R0, #+0]
   \   0000026E   0D21               MOVS     R1,#+13
   \   00000270   4843               MULS     R0,R1,R0
   \   00000272   0099               LDR      R1,[SP, #+0]
   \   00000274   0818               ADDS     R0,R1,R0
   \   00000276   0021               MOVS     R1,#+0
   \   00000278   C172               STRB     R1,[R0, #+11]
   \   0000027A   090A               LSRS     R1,R1,#+8
   \   0000027C   0173               STRB     R1,[R0, #+12]
    960                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   0000027E   0198               LDR      R0,[SP, #+4]
   \   00000280   0078               LDRB     R0,[R0, #+0]
   \   00000282   0D21               MOVS     R1,#+13
   \   00000284   4843               MULS     R0,R1,R0
   \   00000286   0099               LDR      R1,[SP, #+0]
   \   00000288   0818               ADDS     R0,R1,R0
   \   0000028A   0121               MOVS     R1,#+1
   \   0000028C   8172               STRB     R1,[R0, #+10]
    961                        
    962                      }     
    963                                
    964                      //Response to question: Holding Register (odczyt zmiennych analogowych DA00-DDFF)
    965                      if(modbusframe[1]==3)
   \                     ??ModBus_MASTER_Return_15:
   \   0000028E   6078               LDRB     R0,[R4, #+1]
   \   00000290   0328               CMP      R0,#+3
   \   00000292   5AD1               BNE      ??ModBus_MASTER_Return_25
    966                      {
    967                          
    968                                
    969                                //BitCount =  ((WORD)modbusframe[2]) * 8;
    970                                ByteCount = (modbusframe[2]);        
   \   00000294   A778               LDRB     R7,[R4, #+2]
    971                        
    972                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   00000296   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   00000298   3F0C               LSRS     R7,R7,#+16
   \   0000029A   E019               ADDS     R0,R4,R7
   \   0000029C   C078               LDRB     R0,[R0, #+3]
   \   0000029E   0002               LSLS     R0,R0,#+8
   \   000002A0   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   000002A2   3F0C               LSRS     R7,R7,#+16
   \   000002A4   E119               ADDS     R1,R4,R7
   \   000002A6   0D79               LDRB     R5,[R1, #+4]
   \   000002A8   0543               ORRS     R5,R5,R0
   \   000002AA   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   000002AC   3F0C               LSRS     R7,R7,#+16
   \   000002AE   3900               MOVS     R1,R7
   \   000002B0   C91C               ADDS     R1,R1,#+3
   \   000002B2   2000               MOVS     R0,R4
   \   000002B4   ........           BL       crc16
   \   000002B8   8542               CMP      R5,R0
   \   000002BA   01D0               BEQ      ??ModBus_MASTER_Return_26
   \   000002BC   0020               MOVS     R0,#+0
   \   000002BE   05E1               B        ??ModBus_MASTER_Return_4
    973                          
    974                                WordCount=ByteCount/2;
   \                     ??ModBus_MASTER_Return_26:
   \   000002C0   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   000002C2   3F0C               LSRS     R7,R7,#+16
   \   000002C4   3800               MOVS     R0,R7
   \   000002C6   0221               MOVS     R1,#+2
   \   000002C8   ........           BL       __aeabi_idivmod
   \   000002CC   0200               MOVS     R2,R0
    975                                
    976                                CurentByteBufTX=3;
   \   000002CE   0325               MOVS     R5,#+3
    977                                
    978                                RamByteTMP = 0;
   \   000002D0   0020               MOVS     R0,#+0
    979                                
    980                                RamByteTMP = (ZD_MODBUS[*Current_ZD_MODBUS].Target)*2;
   \   000002D2   0199               LDR      R1,[SP, #+4]
   \   000002D4   0978               LDRB     R1,[R1, #+0]
   \   000002D6   0D23               MOVS     R3,#+13
   \   000002D8   5943               MULS     R1,R3,R1
   \   000002DA   009B               LDR      R3,[SP, #+0]
   \   000002DC   5918               ADDS     R1,R3,R1
   \   000002DE   8E78               LDRB     R6,[R1, #+2]
   \   000002E0   CB78               LDRB     R3,[R1, #+3]
   \   000002E2   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+16
   \   000002E4   1B0C               LSRS     R3,R3,#+16
   \   000002E6   1E43               ORRS     R6,R6,R3
   \   000002E8   0221               MOVS     R1,#+2
   \   000002EA   4E43               MULS     R6,R1,R6
   \   000002EC   3000               MOVS     R0,R6
    981                                RamBit  = 0;
   \   000002EE   0021               MOVS     R1,#+0
    982                                
    983                                for (WORD i=0; i<WordCount; i++)
   \   000002F0   0023               MOVS     R3,#+0
   \   000002F2   12E0               B        ??ModBus_MASTER_Return_27
    984                                { 
    985                                  ram.VarCom_Byte[RamByteTMP+1]   = modbusframe[CurentByteBufTX];
   \                     ??ModBus_MASTER_Return_28:
   \   000002F4   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000002F6   000C               LSRS     R0,R0,#+16
   \   000002F8   2649               LDR      R1,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   000002FA   0918               ADDS     R1,R1,R0
   \   000002FC   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000002FE   2D0E               LSRS     R5,R5,#+24
   \   00000300   665D               LDRB     R6,[R4, R5]
   \   00000302   4E70               STRB     R6,[R1, #+1]
    986                                  ram.VarCom_Byte[RamByteTMP] = modbusframe[CurentByteBufTX+1];
   \   00000304   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000306   000C               LSRS     R0,R0,#+16
   \   00000308   2249               LDR      R1,??ModBus_MASTER_Return_1+0x18  ;; ram
   \   0000030A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000030C   2D0E               LSRS     R5,R5,#+24
   \   0000030E   6619               ADDS     R6,R4,R5
   \   00000310   7678               LDRB     R6,[R6, #+1]
   \   00000312   0E54               STRB     R6,[R1, R0]
    987                                  
    988                                  CurentByteBufTX +=2;
   \   00000314   AD1C               ADDS     R5,R5,#+2
    989                                  RamByteTMP      +=2;
   \   00000316   801C               ADDS     R0,R0,#+2
    990                                }            
   \   00000318   5B1C               ADDS     R3,R3,#+1
   \                     ??ModBus_MASTER_Return_27:
   \   0000031A   1B04               LSLS     R3,R3,#+16       ;; ZeroExtS R3,R3,#+16,#+16
   \   0000031C   1B0C               LSRS     R3,R3,#+16
   \   0000031E   1204               LSLS     R2,R2,#+16       ;; ZeroExtS R2,R2,#+16,#+16
   \   00000320   120C               LSRS     R2,R2,#+16
   \   00000322   9342               CMP      R3,R2
   \   00000324   E6D3               BCC      ??ModBus_MASTER_Return_28
    991                                
    992                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \   00000326   0198               LDR      R0,[SP, #+4]
   \   00000328   0078               LDRB     R0,[R0, #+0]
   \   0000032A   0D21               MOVS     R1,#+13
   \   0000032C   4843               MULS     R0,R1,R0
   \   0000032E   0099               LDR      R1,[SP, #+0]
   \   00000330   0818               ADDS     R0,R1,R0
   \   00000332   0021               MOVS     R1,#+0
   \   00000334   C172               STRB     R1,[R0, #+11]
   \   00000336   090A               LSRS     R1,R1,#+8
   \   00000338   0173               STRB     R1,[R0, #+12]
    993                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   0000033A   0198               LDR      R0,[SP, #+4]
   \   0000033C   0078               LDRB     R0,[R0, #+0]
   \   0000033E   0D21               MOVS     R1,#+13
   \   00000340   4843               MULS     R0,R1,R0
   \   00000342   0099               LDR      R1,[SP, #+0]
   \   00000344   0818               ADDS     R0,R1,R0
   \   00000346   0121               MOVS     R1,#+1
   \   00000348   8172               STRB     R1,[R0, #+10]
    994                                
    995                      }
    996                                
    997                      //Response to question: Input Register (odczyt analogów wejœciowych A000-A5FF)      
    998                     if(modbusframe[1]==4)
   \                     ??ModBus_MASTER_Return_25:
   \   0000034A   6078               LDRB     R0,[R4, #+1]
   \   0000034C   0428               CMP      R0,#+4
   \   0000034E   68D1               BNE      ??ModBus_MASTER_Return_29
    999                      {
   1000          
   1001                                //BitCount =  ((WORD)modbusframe[2]) * 8;
   1002                                ByteCount = (modbusframe[2]);        
   \   00000350   A778               LDRB     R7,[R4, #+2]
   1003                        
   1004                                if ((((WORD)modbusframe[ByteCount+3])<<8 | ((WORD)modbusframe[ByteCount+4])) != crc16(modbusframe,ByteCount+3)) return 0;   //sprawdzenie CRC
   \   00000352   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   00000354   3F0C               LSRS     R7,R7,#+16
   \   00000356   E019               ADDS     R0,R4,R7
   \   00000358   C078               LDRB     R0,[R0, #+3]
   \   0000035A   0002               LSLS     R0,R0,#+8
   \   0000035C   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   0000035E   3F0C               LSRS     R7,R7,#+16
   \   00000360   E119               ADDS     R1,R4,R7
   \   00000362   0D79               LDRB     R5,[R1, #+4]
   \   00000364   0543               ORRS     R5,R5,R0
   \   00000366   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   00000368   3F0C               LSRS     R7,R7,#+16
   \   0000036A   3900               MOVS     R1,R7
   \   0000036C   C91C               ADDS     R1,R1,#+3
   \   0000036E   2000               MOVS     R0,R4
   \   00000370   ........           BL       crc16
   \   00000374   8542               CMP      R5,R0
   \   00000376   0FD0               BEQ      ??ModBus_MASTER_Return_30
   \   00000378   0020               MOVS     R0,#+0
   \   0000037A   A7E0               B        ??ModBus_MASTER_Return_4
   \                     ??ModBus_MASTER_Return_1:
   \   0000037C   ........           DC32     ZD_MODBUS_1
   \   00000380   ........           DC32     g_Current_ZD_MODBUS_1
   \   00000384   ........           DC32     ZD_MODBUS_0
   \   00000388   ........           DC32     g_Current_ZD_MODBUS_0
   \   0000038C   ........           DC32     g_Ans_ZD_MODBUS_0
   \   00000390   ........           DC32     g_US0_Comm_TIMEOUT
   \   00000394   ........           DC32     ram
   1005                          
   1006                                WordCount=ByteCount/2;
   \                     ??ModBus_MASTER_Return_30:
   \   00000398   3F04               LSLS     R7,R7,#+16       ;; ZeroExtS R7,R7,#+16,#+16
   \   0000039A   3F0C               LSRS     R7,R7,#+16
   \   0000039C   3800               MOVS     R0,R7
   \   0000039E   0221               MOVS     R1,#+2
   \   000003A0   ........           BL       __aeabi_idivmod
   \   000003A4   0200               MOVS     R2,R0
   1007                                
   1008                                CurentByteBufTX=3;
   \   000003A6   0325               MOVS     R5,#+3
   1009                                
   1010                                RamByteTMP = 0;
   \   000003A8   0020               MOVS     R0,#+0
   1011                                
   1012                                RamByteTMP = (ZD_MODBUS[*Current_ZD_MODBUS].Target)*2;
   \   000003AA   0199               LDR      R1,[SP, #+4]
   \   000003AC   0978               LDRB     R1,[R1, #+0]
   \   000003AE   0D23               MOVS     R3,#+13
   \   000003B0   5943               MULS     R1,R3,R1
   \   000003B2   009B               LDR      R3,[SP, #+0]
   \   000003B4   5918               ADDS     R1,R3,R1
   \   000003B6   8E78               LDRB     R6,[R1, #+2]
   \   000003B8   CB78               LDRB     R3,[R1, #+3]
   \   000003BA   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+16
   \   000003BC   1B0C               LSRS     R3,R3,#+16
   \   000003BE   1E43               ORRS     R6,R6,R3
   \   000003C0   0221               MOVS     R1,#+2
   \   000003C2   4E43               MULS     R6,R1,R6
   \   000003C4   3000               MOVS     R0,R6
   1013                                RamBit  = 0;
   \   000003C6   0021               MOVS     R1,#+0
   1014                                
   1015                                for (WORD i=0; i<WordCount; i++)
   \   000003C8   0023               MOVS     R3,#+0
   \   000003CA   12E0               B        ??ModBus_MASTER_Return_31
   1016                                { 
   1017                                  ram.VarCom_Byte[RamByteTMP+1]   = modbusframe[CurentByteBufTX];
   \                     ??ModBus_MASTER_Return_32:
   \   000003CC   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000003CE   000C               LSRS     R0,R0,#+16
   \   000003D0   4049               LDR      R1,??ModBus_MASTER_Return_33  ;; ram
   \   000003D2   0918               ADDS     R1,R1,R0
   \   000003D4   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000003D6   2D0E               LSRS     R5,R5,#+24
   \   000003D8   665D               LDRB     R6,[R4, R5]
   \   000003DA   4E70               STRB     R6,[R1, #+1]
   1018                                  ram.VarCom_Byte[RamByteTMP] = modbusframe[CurentByteBufTX+1];
   \   000003DC   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000003DE   000C               LSRS     R0,R0,#+16
   \   000003E0   3C49               LDR      R1,??ModBus_MASTER_Return_33  ;; ram
   \   000003E2   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000003E4   2D0E               LSRS     R5,R5,#+24
   \   000003E6   6619               ADDS     R6,R4,R5
   \   000003E8   7678               LDRB     R6,[R6, #+1]
   \   000003EA   0E54               STRB     R6,[R1, R0]
   1019                                  
   1020                                  CurentByteBufTX +=2;
   \   000003EC   AD1C               ADDS     R5,R5,#+2
   1021                                  RamByteTMP      +=2;
   \   000003EE   801C               ADDS     R0,R0,#+2
   1022                                }       
   \   000003F0   5B1C               ADDS     R3,R3,#+1
   \                     ??ModBus_MASTER_Return_31:
   \   000003F2   1B04               LSLS     R3,R3,#+16       ;; ZeroExtS R3,R3,#+16,#+16
   \   000003F4   1B0C               LSRS     R3,R3,#+16
   \   000003F6   1204               LSLS     R2,R2,#+16       ;; ZeroExtS R2,R2,#+16,#+16
   \   000003F8   120C               LSRS     R2,R2,#+16
   \   000003FA   9342               CMP      R3,R2
   \   000003FC   E6D3               BCC      ??ModBus_MASTER_Return_32
   1023                                
   1024                                ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \   000003FE   0198               LDR      R0,[SP, #+4]
   \   00000400   0078               LDRB     R0,[R0, #+0]
   \   00000402   0D21               MOVS     R1,#+13
   \   00000404   4843               MULS     R0,R1,R0
   \   00000406   0099               LDR      R1,[SP, #+0]
   \   00000408   0818               ADDS     R0,R1,R0
   \   0000040A   0021               MOVS     R1,#+0
   \   0000040C   C172               STRB     R1,[R0, #+11]
   \   0000040E   090A               LSRS     R1,R1,#+8
   \   00000410   0173               STRB     R1,[R0, #+12]
   1025                                ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   00000412   0198               LDR      R0,[SP, #+4]
   \   00000414   0078               LDRB     R0,[R0, #+0]
   \   00000416   0D21               MOVS     R1,#+13
   \   00000418   4843               MULS     R0,R1,R0
   \   0000041A   0099               LDR      R1,[SP, #+0]
   \   0000041C   0818               ADDS     R0,R1,R0
   \   0000041E   0121               MOVS     R1,#+1
   \   00000420   8172               STRB     R1,[R0, #+10]
   1026                                
   1027                      }
   1028                                
   1029                      //Response to question: Read Coil Status  (odczyt zmiennych dwustanowych do DA00-DDFF)
   1030                      if(modbusframe[1]==5)
   \                     ??ModBus_MASTER_Return_29:
   \   00000422   6078               LDRB     R0,[R4, #+1]
   \   00000424   0528               CMP      R0,#+5
   \   00000426   30D1               BNE      ??ModBus_MASTER_Return_34
   1031                      {
   1032                        
   1033                            if ((((WORD)modbusframe[6])<<8 | ((WORD)modbusframe[7])) != crc16(modbusframe,6)) return 0;   //sprawdzenie CRC
   \   00000428   A079               LDRB     R0,[R4, #+6]
   \   0000042A   0002               LSLS     R0,R0,#+8
   \   0000042C   E579               LDRB     R5,[R4, #+7]
   \   0000042E   0543               ORRS     R5,R5,R0
   \   00000430   0621               MOVS     R1,#+6
   \   00000432   2000               MOVS     R0,R4
   \   00000434   ........           BL       crc16
   \   00000438   8542               CMP      R5,R0
   \   0000043A   01D0               BEQ      ??ModBus_MASTER_Return_35
   \   0000043C   0020               MOVS     R0,#+0
   \   0000043E   45E0               B        ??ModBus_MASTER_Return_4
   1034                            if (ZD_MODBUS[*Current_ZD_MODBUS].Target!=(((WORD)modbusframe[2])<<8 | ((WORD)modbusframe[3]))) return 0; //sprawdzenie poprawnoœci adresu
   \                     ??ModBus_MASTER_Return_35:
   \   00000440   0198               LDR      R0,[SP, #+4]
   \   00000442   0078               LDRB     R0,[R0, #+0]
   \   00000444   0D21               MOVS     R1,#+13
   \   00000446   4843               MULS     R0,R1,R0
   \   00000448   0099               LDR      R1,[SP, #+0]
   \   0000044A   0818               ADDS     R0,R1,R0
   \   0000044C   8278               LDRB     R2,[R0, #+2]
   \   0000044E   C178               LDRB     R1,[R0, #+3]
   \   00000450   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+16
   \   00000452   090C               LSRS     R1,R1,#+16
   \   00000454   0A43               ORRS     R2,R2,R1
   \   00000456   A078               LDRB     R0,[R4, #+2]
   \   00000458   0002               LSLS     R0,R0,#+8
   \   0000045A   E178               LDRB     R1,[R4, #+3]
   \   0000045C   0143               ORRS     R1,R1,R0
   \   0000045E   8A42               CMP      R2,R1
   \   00000460   01D0               BEQ      ??ModBus_MASTER_Return_36
   \   00000462   0020               MOVS     R0,#+0
   \   00000464   32E0               B        ??ModBus_MASTER_Return_4
   1035          
   1036                            ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \                     ??ModBus_MASTER_Return_36:
   \   00000466   0198               LDR      R0,[SP, #+4]
   \   00000468   0078               LDRB     R0,[R0, #+0]
   \   0000046A   0D21               MOVS     R1,#+13
   \   0000046C   4843               MULS     R0,R1,R0
   \   0000046E   0099               LDR      R1,[SP, #+0]
   \   00000470   0818               ADDS     R0,R1,R0
   \   00000472   0021               MOVS     R1,#+0
   \   00000474   C172               STRB     R1,[R0, #+11]
   \   00000476   090A               LSRS     R1,R1,#+8
   \   00000478   0173               STRB     R1,[R0, #+12]
   1037                            ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   0000047A   0198               LDR      R0,[SP, #+4]
   \   0000047C   0078               LDRB     R0,[R0, #+0]
   \   0000047E   0D21               MOVS     R1,#+13
   \   00000480   4843               MULS     R0,R1,R0
   \   00000482   0099               LDR      R1,[SP, #+0]
   \   00000484   0818               ADDS     R0,R1,R0
   \   00000486   0121               MOVS     R1,#+1
   \   00000488   8172               STRB     R1,[R0, #+10]
   1038                            
   1039                        
   1040                      }
   1041                      //Response to question: Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
   1042                      if(modbusframe[1]==6)
   1043                      {
   1044                        
   1045                      }
   1046                                
   1047                      //Response to question: Write Multiple Status  (zapis zmiennych dwustanowych - grupowo DA00-DDFF)
   1048                      if(modbusframe[1]==15)
   \                     ??ModBus_MASTER_Return_34:
   \   0000048A   6078               LDRB     R0,[R4, #+1]
   \   0000048C   0F28               CMP      R0,#+15
   \   0000048E   11D1               BNE      ??ModBus_MASTER_Return_37
   1049                      {
   1050                                 
   1051                              ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   00000490   0198               LDR      R0,[SP, #+4]
   \   00000492   0078               LDRB     R0,[R0, #+0]
   \   00000494   0D21               MOVS     R1,#+13
   \   00000496   4843               MULS     R0,R1,R0
   \   00000498   0099               LDR      R1,[SP, #+0]
   \   0000049A   0818               ADDS     R0,R1,R0
   \   0000049C   0121               MOVS     R1,#+1
   \   0000049E   8172               STRB     R1,[R0, #+10]
   1052                              ZD_MODBUS[*Current_ZD_MODBUS].Error=0;
   \   000004A0   0198               LDR      R0,[SP, #+4]
   \   000004A2   0078               LDRB     R0,[R0, #+0]
   \   000004A4   0D21               MOVS     R1,#+13
   \   000004A6   4843               MULS     R0,R1,R0
   \   000004A8   0099               LDR      R1,[SP, #+0]
   \   000004AA   0818               ADDS     R0,R1,R0
   \   000004AC   0021               MOVS     R1,#+0
   \   000004AE   C172               STRB     R1,[R0, #+11]
   \   000004B0   090A               LSRS     R1,R1,#+8
   \   000004B2   0173               STRB     R1,[R0, #+12]
   1053                        
   1054                      } 
   1055                        
   1056                      //Response to question: Write Single Register  (zapis zmiennych analogowych - pojedynczo DA00-DDFF)
   1057                      if(modbusframe[1]==16)
   \                     ??ModBus_MASTER_Return_37:
   \   000004B4   6078               LDRB     R0,[R4, #+1]
   \   000004B6   1028               CMP      R0,#+16
   \   000004B8   07D1               BNE      ??ModBus_MASTER_Return_38
   1058                      {
   1059           
   1060                              ZD_MODBUS[*Current_ZD_MODBUS].Confirm=1;
   \   000004BA   0198               LDR      R0,[SP, #+4]
   \   000004BC   0078               LDRB     R0,[R0, #+0]
   \   000004BE   0D21               MOVS     R1,#+13
   \   000004C0   4843               MULS     R0,R1,R0
   \   000004C2   0099               LDR      R1,[SP, #+0]
   \   000004C4   0818               ADDS     R0,R1,R0
   \   000004C6   0121               MOVS     R1,#+1
   \   000004C8   8172               STRB     R1,[R0, #+10]
   1061                        
   1062                        
   1063                          
   1064                    }
   1065              return 1; 
   \                     ??ModBus_MASTER_Return_38:
   \   000004CA   0120               MOVS     R0,#+1
   \                     ??ModBus_MASTER_Return_4:
   \   000004CC   05B0               ADD      SP,SP,#+20
   \   000004CE   F0BC               POP      {R4-R7}
   \   000004D0   02BC               POP      {R1}
   \   000004D2   0847               BX       R1               ;; return
   \                     ??ModBus_MASTER_Return_33:
   \   000004D4   ........           DC32     ram
   1066              
   1067          }//_________________ Koniec funkcji ModBus_MASTER_Return  __________________

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     ram
   1068          
   1069          

   Maximum stack usage in bytes:

     Function                .cstack
     --------                -------
     AT91F_PDC_IsNextTxEmpty      0
     AT91F_PDC_IsTxEmpty          0
     AT91F_PDC_SendFrame         24
     AT91F_PDC_SetNextTx          0
     AT91F_PDC_SetTx              0
     AT91F_US_SendFrame          16
     ModBus_CommS                40
     ModBus_MASTER_Return        40
     ModBus_MASTER_TX            32
     SetWordToBytes               0
     crc16                       16


   Section sizes:

     Function/Label          Bytes
     --------------          -----
     AT91F_PDC_SetNextTx        6
     AT91F_PDC_SetTx            6
     AT91F_PDC_IsTxEmpty       14
     AT91F_PDC_IsNextTxEmpty   14
     AT91F_PDC_SendFrame       78
     AT91F_US_SendFrame        26
     US0_MasterMODBUS_ENABLE    1
     US1_MasterMODBUS_ENABLE    1
     ZD_MODBUS_0              260
     g_Current_ZD_MODBUS_0      1
     g_ERR_ZD_MODBUS_0          1
     g_Ans_ZD_MODBUS_0          1
     Buff_TX_0                 20
     ZD_MODBUS_1              260
     g_Current_ZD_MODBUS_1      1
     g_ERR_ZD_MODBUS_1          1
     g_Ans_ZD_MODBUS_1          1
     Buff_TX_1                580
     bCRC_Hi                  256
     bCRC_Lo                  256
     crc16                     68
     SetWordToBytes            14
     ModBus_CommS            1472
     nr_tmp                     1
     ModBus_MASTER_TX         556
     ModBus_MASTER_Return    1240
     ??DataTable7               4

 
 1 128 bytes in section .bss
     1 byte  in section .data
   512 bytes in section .rodata
 3 498 bytes in section Debug.txt
 
 3 354 bytes of CODE  memory (+ 144 bytes shared)
   512 bytes of CONST memory
 1 129 bytes of DATA  memory

Errors: none
Warnings: 4
