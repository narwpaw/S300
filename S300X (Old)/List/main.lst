###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           11/Sep/2013  19:44:42 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\main.c                              #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\main.c" -D AT91SAM7S256 -D          #
#                    AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_ -D __ALARM -D     #
#                    __WIFI_MODULE -D _DEBUG_ -D S300iOld -D _ADMINISTRATOR_  #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.4 -         #
#                    12.06.2013\S300X (Old)\List\" --diag_suppress Pa082 -o   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\S300X (Old)\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.4 -     #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Ol                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\List\main.lst                     #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\Obj\main.o                        #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\main.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//                     
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : main.c                                   *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21            
     22          
     23          
     24          //Sta³e ------------------------------------------------------------------------
     25          #ifdef S300
     26              const char identyfikacja[]="S300 ";                                          //nazwa urz¹dzeni 
     27          #endif
     28          #ifdef S300i
     29              const char identyfikacja[]="S300-i ";                                          //nazwa urz¹dzeni 
     30          #endif
     31          #ifdef S300iMax
     32              const char identyfikacja[]="S300-iMax ";                                          //nazwa urz¹dzeni 
     33          #endif
     34          #ifdef S300iOld

   \                                 In section .rodata, align 4
     35              const char identyfikacja[]="S300-i(Old) ";                                          //nazwa urz¹dzeni 
   \                     identyfikacja:
   \   00000000   533330302D69       DC8 "S300-i(Old) "
   \              284F6C642920
   \              00          
   \   0000000D   000000             DC8 0, 0, 0
     36          #endif
     37              

   \                                 In section .rodata, align 4
     38              const char system[]="1.4";                                                  //nazwa urz¹dzeni 
   \                     system:
   \   00000000   312E3400           DC8 "1.4"
     39              
     40          //____________________________Koniec sta³ych ___________________________________
     41          
     42          
     43          
     44          //Konfiguracja -----------------------------------------------------------------
     45              #define LightLCD_Time              20                                       //czas (s sek.) wygaszania podœwietlenia
     46          //___________________________Koniec konfiguracji________________________________
     47          
     48          
     49          
     50          
     51          //Definicje --------------------------------------------------------------------
     52              #define MSG_SIZE 	                1000                                    
     53              #define TAB_SIZE                    1000                                    
     54              #define USB_BUFFER_SIZE             300                                     //bufor odbiorczy USB  
     55             
     56             // #define NOTRACES              `                                              //Wy³¹cza debagowania poprzez US1
     57              
     58          //___________________________Koniec definicji___________________________________
     59          
     60          
     61          
     62          // Pliki do³¹czane -------------------------------------------------------------
     63          
     64               #include "main_H.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_AIC_ConfigureIt(AT91PS_AIC, unsigned int, unsigned int, unsigned int, void (*)())
   \                     AT91F_AIC_ConfigureIt:
   \   00000000   F0B4               PUSH     {R4-R7}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   049D               LDR      R5,[SP, #+16]
   \   00000006   0420               MOVS     R0,#+4
   \   00000008   4843               MULS     R0,R1,R0
   \   0000000A   2018               ADDS     R0,R4,R0
   \   0000000C   8030               ADDS     R0,R0,#+128
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   0126               MOVS     R6,#+1
   \   00000012   8E40               LSLS     R6,R6,R1
   \   00000014   9227               MOVS     R7,#+146
   \   00000016   7F00               LSLS     R7,R7,#+1        ;; #+292
   \   00000018   E651               STR      R6,[R4, R7]
   \   0000001A   0427               MOVS     R7,#+4
   \   0000001C   4F43               MULS     R7,R1,R7
   \   0000001E   E719               ADDS     R7,R4,R7
   \   00000020   8037               ADDS     R7,R7,#+128
   \   00000022   3D60               STR      R5,[R7, #+0]
   \   00000024   0425               MOVS     R5,#+4
   \   00000026   6943               MULS     R1,R5,R1
   \   00000028   1A43               ORRS     R2,R2,R3
   \   0000002A   6250               STR      R2,[R4, R1]
   \   0000002C   9421               MOVS     R1,#+148
   \   0000002E   4900               LSLS     R1,R1,#+1        ;; #+296
   \   00000030   6650               STR      R6,[R4, R1]
   \   00000032   F0BC               POP      {R4-R7}
   \   00000034   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_AIC_EnableIt(AT91PS_AIC, unsigned int)
   \                     AT91F_AIC_EnableIt:
   \   00000000   9022               MOVS     R2,#+144
   \   00000002   5200               LSLS     R2,R2,#+1        ;; #+288
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   8B40               LSLS     R3,R3,R1
   \   00000008   8350               STR      R3,[R0, R2]
   \   0000000A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgOutput:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   0161               STR      R1,[R0, #+16]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgInput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgInput:
   \   00000000   4161               STR      R1,[R0, #+20]
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPullup(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgPullup:
   \   00000000   CA43               MVNS     R2,R1
   \   00000002   0266               STR      R2,[R0, #+96]
   \   00000004   4166               STR      R1,[R0, #+100]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_InterruptEnable(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_InterruptEnable:
   \   00000000   0164               STR      R1,[R0, #+64]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PIO_GetInterruptStatus(AT91PS_PIO)
   \                     AT91F_PIO_GetInterruptStatus:
   \   00000000   C06C               LDR      R0,[R0, #+76]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_WDTRestart(AT91PS_WDTC)
   \                     AT91F_WDTRestart:
   \   00000000   0149               LDR      R1,??AT91F_WDTRestart_0  ;; 0xa5000001
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??AT91F_WDTRestart_0:
   \   00000008   010000A5           DC32     0xa5000001

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_LCD_Init()
   \                     AT91F_LCD_Init:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   2348               LDR      R0,??AT91F_LCD_Init_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   0421               MOVS     R1,#+4
   \   0000000C   2248               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000000E   ........           BL       AT91F_PIO_CfgOutput
   \   00000012   8021               MOVS     R1,#+128
   \   00000014   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000016   2048               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000018   ........           BL       AT91F_PIO_CfgOutput
   \   0000001C   8021               MOVS     R1,#+128
   \   0000001E   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   00000020   1D48               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000022   ........           BL       AT91F_PIO_CfgOutput
   \   00000026   8021               MOVS     R1,#+128
   \   00000028   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   0000002A   1B48               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000002C   ........           BL       AT91F_PIO_CfgOutput
   \   00000030   8021               MOVS     R1,#+128
   \   00000032   0905               LSLS     R1,R1,#+20       ;; #+134217728
   \   00000034   1848               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000036   ........           BL       AT91F_PIO_CfgOutput
   \   0000003A   1021               MOVS     R1,#+16
   \   0000003C   1648               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000003E   ........           BL       AT91F_PIO_CfgOutput
   \   00000042   8021               MOVS     R1,#+128
   \   00000044   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000046   1448               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000048   ........           BL       AT91F_PIO_CfgOutput
   \   0000004C   8021               MOVS     R1,#+128
   \   0000004E   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   00000050   1148               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000052   ........           BL       AT91F_PIO_CfgOutput
   \   00000056   8021               MOVS     R1,#+128
   \   00000058   8904               LSLS     R1,R1,#+18       ;; #+33554432
   \   0000005A   0F48               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000005C   ........           BL       AT91F_PIO_CfgOutput
   \   00000060   8021               MOVS     R1,#+128
   \   00000062   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000064   0C48               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000066   ........           BL       AT91F_PIO_CfgOutput
   \   0000006A   8021               MOVS     R1,#+128
   \   0000006C   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   0000006E   0A48               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000070   ........           BL       AT91F_PIO_CfgOutput
   \   00000074   8021               MOVS     R1,#+128
   \   00000076   0904               LSLS     R1,R1,#+16       ;; #+8388608
   \   00000078   0748               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000007A   ........           BL       AT91F_PIO_CfgOutput
   \   0000007E   0121               MOVS     R1,#+1
   \   00000080   0548               LDR      R0,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   00000082   ........           BL       AT91F_PIO_CfgOutput
   \   00000086   0548               LDR      R0,??AT91F_LCD_Init_0+0x8  ;; 0xfffff430
   \   00000088   0549               LDR      R1,??AT91F_LCD_Init_0+0xC  ;; 0x7e00811c
   \   0000008A   0160               STR      R1,[R0, #+0]
   \   0000008C   01B0               ADD      SP,SP,#+4
   \   0000008E   01BC               POP      {R0}
   \   00000090   0047               BX       R0               ;; return
   \   00000092   C046               Nop      
   \                     ??AT91F_LCD_Init_0:
   \   00000094   00FCFFFF           DC32     0xfffffc00
   \   00000098   00F4FFFF           DC32     0xfffff400
   \   0000009C   30F4FFFF           DC32     0xfffff430
   \   000000A0   1C81007E           DC32     0x7e00811c

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void *USB_GetDriverInterface(S_usb const *)
   \                     USB_GetDriverInterface:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetDriverID(S_usb const *)
   \                     USB_GetDriverID:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   C068               LDR      R0,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Handler(S_usb const *)
   \                     USB_Handler:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   896A               LDR      R1,[R1, #+40]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   01B0               ADD      SP,SP,#+4
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork bool USB_Attach(S_usb const *)
   \                     USB_Attach:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C969               LDR      R1,[R1, #+28]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   01B0               ADD      SP,SP,#+4
   \   0000000E   02BC               POP      {R1}
   \   00000010   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Connect(S_usb const *)
   \                     USB_Connect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C96A               LDR      R1,[R1, #+44]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   01B0               ADD      SP,SP,#+4
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Disconnect(S_usb const *)
   \                     USB_Disconnect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   096B               LDR      R1,[R1, #+48]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   01B0               ADD      SP,SP,#+4
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetState(S_usb const *)
   \                     USB_GetState:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000006   000C               LSRS     R0,R0,#+16
   \   00000008   7047               BX       LR               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     65               #include "WizFi.h"

   
   ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\WizFi.h",172  Warning[Pe001]: 
          last line of file ends without a newline
     66          
     67          
     68          
     69          //-----------------------Koniec plików do³¹czanych -----------------------------
     70          
     71          
     72          
     73          
     74          
     75          
     76          
     77          
     78          
     79          

   \                                 In section .bss, align 1
     80          char APC;
   \                     APC:
   \   00000000                      DS8 1
     81          
     82          
     83          
     84          
     85          
     86          //Zmienne globalne -------------------------------------------------------------

   \                                 In section .data, align 1
     87              char g_czas_petli = 10;                                                     //  Czas przebiegu pêtli programu w ms
   \                     g_czas_petli:
   \   00000000   0A                 DC8 10

   \                                 In section .bss, align 4
     88              unsigned int komunikacja_ok=0;                                              //1-ok, 0-brak
   \                     komunikacja_ok:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     89              int  rej_prog[10];
   \                     rej_prog:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     90              int LifeCouter = 0, LifeCouterMax = 0;                                      // Zmienne funkcji LifeBlinking
   \                     LifeCouter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     LifeCouterMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     91              byte USB_busy;
   \                     USB_busy:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
     92              int FlashProgramOfset =  256;                                               //0-wykonywany program A, 
   \                     FlashProgramOfset:
   \   00000000   00010000           DC32 256

   \                                 In section .data, align 4
     93              int FlashProgramReserveOfset =  256+UseProgramSize;                         //0-wykonywany program A, 
   \                     FlashProgramReserveOfset:
   \   00000000   D8D70000           DC32 55256

   \                                 In section .bss, align 4
     94              int  advY =0;                                                                  //chwilowa wspolzedna Y TP
   \                     advY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     95              int  advX =0;                                                                  //chwilowa wspolzedna X TP
   \                     advX:
   \   00000000                      DS8 4

   \                                 In section .data, align 2
     96               signed short  Y_down  =-1;                                                           //wspolzedna Y TP (naciœniêcie)
   \                     Y_down:
   \   00000000   FFFF               DC16 -1

   \                                 In section .data, align 2
     97               signed short  X_down  =-1;                                                           //wspolzedna X TP (naciœniêcie)
   \                     X_down:
   \   00000000   FFFF               DC16 -1

   \                                 In section .data, align 2
     98               signed short  Y_up    =-1;                                                           //wspolzedna Y TP (puszczenie)
   \                     Y_up:
   \   00000000   FFFF               DC16 -1

   \                                 In section .data, align 2
     99               signed short  X_up    =-1;                                                           //wspolzedna X TP (puszczenie)
   \                     X_up:
   \   00000000   FFFF               DC16 -1

   \                                 In section .bss, align 4
    100              int  g_leng  =0;                                                            //jêzyk 1-polski, 2 angielski
   \                     g_leng:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    101              char g_level =0;                                                            //poziom dostêpu 0-ograniczony, 1- operator, 2-administrator
   \                     g_level:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
    102              char g_Password_1[8]={"1111"};                                              //haslo poziomu 1  
   \                     g_Password_1:
   \   00000000   3131313100         DC8 "1111"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .data, align 4
    103              char g_Password_2[8]={"2222"};                                              //haslo poziomu 1  
   \                     g_Password_2:
   \   00000000   3232323200         DC8 "2222"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .bss, align 4
    104              long int g_Message =0;                                                             //1-wiadomosc ekranowa
   \                     g_Message:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    105              int g_info=0;                                                                   
   \                     g_info:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    106              char g_PC_Connected;                                                       //1-pod³aczony komputer
   \                     g_PC_Connected:
   \   00000000                      DS8 1

   \                                 In section .bss, align 8
    107              unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
   \                     g_counter:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
    108              unsigned long       g_seconds_counter;                                      //globalny licznik sekundowy od w³¹czenia/restartu sterownika
   \                     g_seconds_counter:
   \   00000000                      DS8 4
    109              
    110          //    static char US0_Buffer[US_BUFFER_SIZE];                                    //bufor odbiorczy USART 0
    111          //    static char US0_Buffer2[US_BUFFER_SIZE];                                   //zapasowy bufor odbiorczy USART 0

   \                                 In section .data, align 1
    112              char AdressModbus = 1;                                                      //Adres urz¹dzenia dla protoko³u modbus
   \                     AdressModbus:
   \   00000000   01                 DC8 1

   \                                 In section .bss, align 4
    113              int g_LightCouterLCD = 0;                                                   //licznik podœwietlenia lcd
   \                     g_LightCouterLCD:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    114              char g_LightLCDEnable = 0;                                                   //podœwietlenia lcd
   \                     g_LightLCDEnable:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    115              char g_ScreenSever_On;                                                      //1-Wygaszacz aktywny
   \                     g_ScreenSever_On:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    116              char g_ScreenSever_Time_On;                                                 //godzina w³¹czenia wygaszacz
   \                     g_ScreenSever_Time_On:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    117              char g_ScreenSever_Time_Off;                                                //godzina wy³¹czenia wygaszacza
   \                     g_ScreenSever_Time_Off:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    118              char g_SlaveConnect=0;                                                   //
   \                     g_SlaveConnect:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    119              char g_Stop_Program = 0;                                                    //1- zatrzymuje program
   \                     g_Stop_Program:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
    120              char g_Restart_Program = 1;                                                 //1- restartuje program
   \                     g_Restart_Program:
   \   00000000   01                 DC8 1

   \                                 In section .bss, align 8
    121              unsigned long long g_NextTimeProgram = 0;                                                    //
   \                     g_NextTimeProgram:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
    122              char g_NeedPass=0;  //wymóg has³a
   \                     g_NeedPass:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    123              char AlarmOn=0;                                                             //1=alarm dzwiêkowy
   \                     AlarmOn:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    124              char Speaker[SPK_Amount];                                                   //sygna³ dŸwiêkowy
   \                     Speaker:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    125              _AlarmScreenActionType AlarmScreenAction;
   \                     AlarmScreenAction:
   \   00000000                      DS8 16

   \                                 In section .bss, align 1
    126              char ChangeingIdMode=0;                                                     //tryb zmiany ID blokuje ustanawianie po³¹czeñ mostowych
   \                     ChangeingIdMode:
   \   00000000                      DS8 1

   \                                 In section .bss, align 8
    127              _Net NET; 
   \                     NET:
   \   00000000                      DS8 448

   \                                 In section .bss, align 1
    128              char WypMaxJasnosci;                                                        //jasnoœc ekranu przy aktywnym ekranie
   \                     WypMaxJasnosci:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    129              char WypMinJasnosci;                                                        //jasnoœc ekranu przy nieaktywnym ekranie
   \                     WypMinJasnosci:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    130              char gWypMinJasnosciTest;                                                   //test wygl¹du ekranu z  jsnoœci¹ WypMinJasnosci   
   \                     gWypMinJasnosciTest:
   \   00000000                      DS8 1

   \                                 In section .bss, align 8
    131              long long FuseLastWiFiDataIn;                                               //zabezpieczenie przed blokad¹ DMA USART. FuseLastWiFiDataIn zawiera czas ostatniej odpowiedzi od usarta. Je¿eli WiFi jest w³¹czone a USART milczy od 30s to restartuj mikroprocesor
   \                     FuseLastWiFiDataIn:
   \   00000000                      DS8 8

   \                                 In section .data, align 1
    132              unsigned char ChangeStageFlag=10;                                           //ile razy (maksymalnie) sterownik ma wys³aæ zmiane stanu wyjœcia
   \                     ChangeStageFlag:
   \   00000000   0A                 DC8 10
    133              //___________________________Koniec zmiennych globalnych________________________
    134          
    135          
    136          
    137          
    138          
    139          //Zmienne lokalne -------------------------------------------------------------

   \                                 In section .bss, align 1
    140              char LightLCD_OFF_Counter;                                                  //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    141              char LightLCD_OFF_Counter2;                                                 //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    142              char LightLCD_OFF_Curent;                                                   //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Curent:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    143              volatile char SlaveMode=0;
   \                     SlaveMode:
   \   00000000                      DS8 1
    144             // volatile char SwitchToMasterBlock;

   \                                 In section .bss, align 8
    145              volatile long long TimeInMasterMode;                                         //zmienna dla kontroli czasu w trybie slave
   \                     TimeInMasterMode:
   \   00000000                      DS8 8

   \                                 In section .bss, align 1
    146              volatile char ReciveFrameToMe=0;                                            //zmienna u¿ywana do prze³¹czania w tryb tymczasowy master po odebraniu ramki pobrania statusu z poprawnym id a nastêpnie ramki do obcego lub ponownym odebraniu ramki z poprawnym id i rozkazem pobrania statusu. Ramka pobrania statusu (odczyt rej. 0) zawsze wystêpuje na pocz¹tku kolejki ramek do pojedyñczego wêz³a 
   \                     ReciveFrameToMe:
   \   00000000                      DS8 1
    147          //___________________________Koniec zmiennych lplkalnych________________________
    148          
    149          
    150              
    151               
    152          
    153              
    154          
    155          //Zmienne zewnêtrzne -------------------------------------------------------------    
    156              extern char       LCD_Canvas[8][128];
    157              extern char       Label_move;
    158              extern int        MenuLevel;      //poziom menu
    159              extern int        Suw_poz_analog;  
    160              extern int        ScrollMenu_poz;
    161              extern char       g_US0_Connect_OK;
    162              extern char       g_US1_Connect_OK;
    163              extern char       g_US0_Comm_TIMEOUT;
    164              extern _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];
    165              extern char       g_Ans_ZD_MODBUS_0;
    166              extern char       g_Current_ZD_MODBUS_0;
    167              extern char       g_ERR_ZD_MODBUS_0;
    168              extern int        g_US0_Comm_MinCykle;
    169              extern char       US0_MasterMODBUS_ENABLE;
    170              extern char       g_US1_Comm_TIMEOUT;
    171              extern _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];
    172              extern char       g_Ans_ZD_MODBUS_1;
    173              extern char       g_Current_ZD_MODBUS_1;
    174              extern char       g_ERR_ZD_MODBUS_1;
    175              extern int        g_US1_Comm_MinCykle;
    176              extern char       US1_MasterMODBUS_ENABLE;
    177              extern char       Busy_program;
    178              extern _Trap      Trap;
    179              extern _Correct korekta_Y;
    180              extern _Correct korekta_X;
    181              extern  char Synchronizacja;
    182              extern char         RF_CurrentTask;
    183              //extern unsigned char  SPI_Buffer_Rx[SPI_Read_BUFFER_SIZE];                         //bufor odbiorczy SPI
    184              //extern unsigned char  SPI_Buffer_Tx[SPI_Write_BUFFER_SIZE];                        //bufor odbiorczy SPI
    185              extern void ReadWriteSpi (unsigned char* pReadBuffer, int nReadLen, unsigned char* pWriteBuffer, int nWriteLen, bool bHoldCS);
    186              extern void SPI_init(void) ;
    187              
    188              extern _MainStage  MainStage; 
    189              extern _ProgramTab gProg;
    190              extern void RF_Init(void);
    191              extern _RF_Status RF_Status;
    192              extern char g_RF_TimeOutCounter;
    193              extern   _RF_TaskTab  RF_TaskTab;
    194              extern _TransQuality TransQuality;
    195              extern _DateTime  *pDateTime;
    196              extern char Variables[];
    197              extern unsigned int CyklPerSek;
    198              extern char Buff_TX_1[];

   \                                 In section .data, align 4
    199              AT91PS_MEM pAT91C_IFLASH_MEM=AT91C_IFLASH_MEM;
   \                     pAT91C_IFLASH_MEM:
   \   00000000   00001300           DC32 130000H
    200              extern short int VariablesAnal[];
    201              extern char Variables[];
    202              extern unsigned char  US1_Buffer[];
    203              extern  unsigned  short  TimeToSwithToMaster;
    204              extern _NeuronsListUnit NeuronsList[];
    205              extern  const unsigned int NODE_ID;
    206          //___________________________Koniec zmiennych zewnêtrznych________________________    
    207              
    208              
    209              
    210          //Zmienne tymczasowe -----------------------------------------------------------

   \                                 In section .bss, align 1
    211              char tmp_i =0; 
   \                     tmp_i:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    212              float licznik = 0.0;
   \                     licznik:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    213              int licznik2 = 0;
   \                     licznik2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    214              int licznik3 = 0;
   \                     licznik3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    215              char *memory;
   \                     memory:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    216              unsigned long sss;
   \                     sss:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    217              int int1 =0;
   \                     int1:
   \   00000000                      DS8 4
    218              
    219          

   \                                 In section .bss, align 4
    220              _DateTime DateTime;
   \                     DateTime:
   \   00000000                      DS8 8
    221              
    222               
    223              //___________________________Koniec zmiennych tymczasowych______________________
    224          
    225          
    226              
    227          
    228          //Funkcje zewnêtrzne -----------------------------------------------------------
    229              extern RAM ram;
    230              extern ConversFC Convers_DW_B;
    231              extern void InitFlash(void);
    232              extern void Program (_ProgramTab *ProgTab);
    233              extern void at91flashWriteDW(int sektor, int nr_DW, unsigned long wartDW );
    234              extern void ScreenEvent(void);
    235              extern int Suw_poz;
    236              extern void MenuPaint(void);
    237              extern void at91flashWrite();
    238              extern void ConfigureIrBus(void);
    239              extern void MenuRefresh();
    240              //extern unsigned short crc16(unsigned char* modbusframe,int Length);
    241              //extern unsigned char ModBus_CommS(unsigned char* modbusframe);
    242              //extern void ModBus_CommS_US0();
    243              extern void US0_init(void);
    244              extern void US1_init(void);
    245              extern char ModBus_MASTER_TX(char US_Nr);
    246              extern void ReadTP(_TPoint *Point);
    247              //extern BYTE ModBus_MASTER_Return(BYTE* modbusframe);
    248          //_______________________ Koniec funkcji zewnêtrznych __________________________
    249              
    250          
    251          /*
    252          $Id: serial_example.c,v 1.1.2.1 2006/12/05 08:33:25 danielru Exp $
    253          */
    254          
    255          
    256          
    257          
    258          //------------------------------------------------------------------------------
    259          //      Prototypes
    260          //------------------------------------------------------------------------------
    261          
    262          //! \brief  Initialization callback
    263          static void CBK_Init(const S_usb *pUsb);
    264          
    265          //! \brief  Suspend callback
    266          static void CBK_Suspend(const S_usb *pUsb);
    267          
    268          //! \brief  Resume callback
    269          static void CBK_Resume(const S_usb *pUsb);
    270          
    271          //! \brief  New request callback
    272          static void CBK_NewRequest(const S_usb *pUsb);
    273          
    274          //! \brief  New reset callback
    275          //static void CBK_Reset(const S_usb *pUsb);
    276          
    277          //! \brief  New SOF callback
    278          //static void CBK_SOF(const S_usb *pUsb);
    279          
    280          //------------------------------------------------------------------------------
    281          //      Internal variables
    282          //------------------------------------------------------------------------------
    283          
    284          //! \brief  List of endpoints (including endpoint 0) used by the device.
    285          //! \see    S_usb_endpoint

   \                                 In section .data, align 4
    286          static S_usb_endpoint pEndpoints[] = {
   \                     pEndpoints:
   \   00000000   000000000000       DC32 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000020   01000000           DC8 1, 0, 0, 0
   \   00000024   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000048   02000000           DC8 2, 0, 0, 0
   \   0000004C   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000070   02000000           DC8 2, 0, 0, 0
   \   00000074   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000098   01000000           DC8 1, 0, 0, 0
   \   0000009C   00000000           DC32 0
    287          
    288              USB_ENDPOINT_SINGLEBANK, // Control endpoint 0
    289              USB_ENDPOINT_DUALBANK,   // Data out endpoint
    290              USB_ENDPOINT_DUALBANK,   // Data in endpoint
    291              USB_ENDPOINT_SINGLEBANK, // Notification endpoint
    292          };
    293          
    294          //! \brief  Variable used to store the last received SETUP packet.
    295          //! \see    S_usb_request
    296          //! \see    S_usb

   \                                 In section .bss, align 4
    297          static S_usb_request sSetup;
   \                     sSetup:
   \   00000000                      DS8 8
    298          
    299          //! \brief  Variable used to store the current device state
    300          //! \see    S_usb

   \                                 In section .bss, align 4
    301          static unsigned int dState;
   \                     dState:
   \   00000000                      DS8 4
    302          
    303          //! \brief  List of implemented callbacks
    304          //! \see    S_usb_callbacks
    305          //! \see    S_usb

   \                                 In section .rodata, align 4
    306          static const S_usb_callbacks sCallbacks = {
   \                     sCallbacks:
   \   00000000   ........0000       DC32 CBK_Init, 0H, 0H, CBK_Resume, CBK_NewRequest, 0H
   \              000000000000
   \              ............
   \              ....00000000
    307          
    308              CBK_Init,
    309              0, // CBK_Reset
    310              0, //CBK_Suspend,
    311              CBK_Resume,
    312              CBK_NewRequest,
    313              0  // CBK_SOF
    314          };
    315          
    316          //! \brief  USB driver instance
    317          //! \see    S_usb

   \                                 In section .rodata, align 4
    318          static const S_usb sUsb = {
   \                     sUsb:
   \   00000000   ............       DC32 sDefaultDriver, pEndpoints, 4, sCallbacks, sSetup, dState
   \              ....04000000
   \              ............
   \              ............
    319          
    320              &sDefaultDriver,
    321              pEndpoints,
    322              SER_NUM_ENDPOINTS,
    323              &sCallbacks,
    324              &sSetup,
    325              &dState
    326          };
    327          
    328          //! \brief  CDC serial class driver instance
    329          //! \see    S_ser

   \                                 In section .bss, align 4
    330          static S_ser sSer;
   \                     sSer:
   \   00000000                      DS8 20
    331          
    332          // Buffer for receiving data from the USB

   \                                 In section .bss, align 4
    333          static unsigned char pUsbBuffer[USB_BUFFER_SIZE];
   \                     pUsbBuffer:
   \   00000000                      DS8 300
    334          
    335          
    336          //------------------------------------------------------------------------------
    337          //      Internal Functions
    338          //------------------------------------------------------------------------------
    339          
    340          // Interrupt Service Routines
    341          //------------------------------------------------------------------------------
    342          
    343          //------------------------------------------------------------------------------
    344          //! \brief  Handler for the USB controller interrupt
    345          //!
    346          //!         Defers the call to the USB_Handler function.
    347          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    348          void ISR_Driver(void)
    349          {
   \                     ISR_Driver:
   \   00000000   01B5               PUSH     {R0,LR}
    350              USB_Handler(&sUsb);
   \   00000002   ....               LDR      R0,??DataTable19  ;; sUsb
   \   00000004   ........           BL       USB_Handler
    351          }//_______________________ Koniec funkcji ISR_Driver ____________________________
   \   00000008   01B0               ADD      SP,SP,#+4
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    352          
    353          
    354          
    355          
    356          //------------------------------------------------------------------------------
    357          //! \brief  Handler for the VBus state change interrupt
    358          //!
    359          //! This method calls the USB_Attach function to perform the necessary
    360          //! operations.
    361          //------------------------------------------------------------------------------
    362          //#if !defined(USB_BUS_POWERED)

   \                                 In section .bss, align 1
    363          char ForwardUSB2Serialferst=0;
   \                     ForwardUSB2Serialferst:
   \   00000000                      DS8 1
    364          
    365          
    366           
    367          

   \                                 In section Debug.txt, align 4, keep-with-next
    368          void ISR_VBus(void)
    369          {
   \                     ISR_VBus:
   \   00000000   01B5               PUSH     {R0,LR}
    370            
    371            
    372            USB_Attach(&sUsb);
   \   00000002   ....               LDR      R0,??DataTable19  ;; sUsb
   \   00000004   ........           BL       USB_Attach
    373          
    374            if ((( AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)>0)
   \   00000008   ....               LDR      R0,??DataTable2  ;; 0xfffff43c
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8007               LSLS     R0,R0,#+30
   \   0000000E   4BD5               BPL      ??ISR_VBus_0
    375            {
    376              g_PC_Connected=1;
   \   00000010   ....               LDR      R0,??DataTable20  ;; g_PC_Connected
   \   00000012   0121               MOVS     R1,#+1
   \   00000014   0170               STRB     R1,[R0, #+0]
    377              g_Stop_Program=1;
   \   00000016   ....               LDR      R0,??DataTable21  ;; g_Stop_Program
   \   00000018   0121               MOVS     R1,#+1
   \   0000001A   0170               STRB     R1,[R0, #+0]
    378              
    379              if (ISSET(USB_GetState(&sUsb), USB_STATE_POWERED)) 
   \   0000001C   ....               LDR      R0,??DataTable19  ;; sUsb
   \   0000001E   ........           BL       USB_GetState
   \   00000022   8007               LSLS     R0,R0,#+30
   \   00000024   1CD5               BPL      ??ISR_VBus_1
    380              {
    381                MenuLevel=1;
   \   00000026   ....               LDR      R0,??DataTable6  ;; MenuLevel
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   0160               STR      R1,[R0, #+0]
    382                g_PC_Connected=1;
   \   0000002C   ....               LDR      R0,??DataTable20  ;; g_PC_Connected
   \   0000002E   0121               MOVS     R1,#+1
   \   00000030   0170               STRB     R1,[R0, #+0]
    383                MenuPaint();
   \   00000032   ........           BL       MenuPaint
    384                RepaintLCD();
   \   00000036   ........           BL       RepaintLCD
    385                RepaintLCD();
   \   0000003A   ........           BL       RepaintLCD
    386               
    387                USB_Connect(&sUsb);   
   \   0000003E   ....               LDR      R0,??DataTable19  ;; sUsb
   \   00000040   ........           BL       USB_Connect
    388                
    389          
    390               // if (ForwardUSB2Serialferst!=1)
    391               // {
    392                  ForwardUSB2Serialferst=1; 
   \   00000044   ....               LDR      R0,??DataTable9  ;; ForwardUSB2Serialferst
   \   00000046   0121               MOVS     R1,#+1
   \   00000048   0170               STRB     R1,[R0, #+0]
    393               // }
    394                
    395                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000004A   ....               LDR      R0,??DataTable22  ;; g_LightCouterLCD
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   0160               STR      R1,[R0, #+0]
    396                if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000050   ....               LDR      R0,??DataTable24  ;; g_LightLCDEnable
   \   00000052   0078               LDRB     R0,[R0, #+0]
   \   00000054   0028               CMP      R0,#+0
   \   00000056   24D1               BNE      ??ISR_VBus_2
   \   00000058   ....               LDR      R0,??DataTable24  ;; g_LightLCDEnable
   \   0000005A   0121               MOVS     R1,#+1
   \   0000005C   0170               STRB     R1,[R0, #+0]
   \   0000005E   20E0               B        ??ISR_VBus_2
    397          
    398              }
    399                else
    400              {
    401          
    402                USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_1:
   \   00000060   ....               LDR      R0,??DataTable19  ;; sUsb
   \   00000062   ........           BL       USB_Disconnect
    403                g_PC_Connected=0;
   \   00000066   ....               LDR      R0,??DataTable20  ;; g_PC_Connected
   \   00000068   0021               MOVS     R1,#+0
   \   0000006A   0170               STRB     R1,[R0, #+0]
    404                MenuPaint();
   \   0000006C   ........           BL       MenuPaint
    405                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000070   ....               LDR      R0,??DataTable22  ;; g_LightCouterLCD
   \   00000072   0021               MOVS     R1,#+0
   \   00000074   0160               STR      R1,[R0, #+0]
    406                if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000076   ....               LDR      R0,??DataTable24  ;; g_LightLCDEnable
   \   00000078   0078               LDRB     R0,[R0, #+0]
   \   0000007A   0028               CMP      R0,#+0
   \   0000007C   02D1               BNE      ??ISR_VBus_3
   \   0000007E   ....               LDR      R0,??DataTable24  ;; g_LightLCDEnable
   \   00000080   0121               MOVS     R1,#+1
   \   00000082   0170               STRB     R1,[R0, #+0]
    407                Trap.Enable=0;
   \                     ??ISR_VBus_3:
   \   00000084   1A48               LDR      R0,??ISR_VBus_4  ;; Trap
   \   00000086   0021               MOVS     R1,#+0
   \   00000088   0170               STRB     R1,[R0, #+0]
    408                Trap.Row=0;
   \   0000008A   1A48               LDR      R0,??ISR_VBus_4+0x4  ;; Trap + 1
   \   0000008C   0021               MOVS     R1,#+0
   \   0000008E   0170               STRB     R1,[R0, #+0]
    409                Trap.Col=0;
   \   00000090   1948               LDR      R0,??ISR_VBus_4+0x8  ;; Trap + 2
   \   00000092   0021               MOVS     R1,#+0
   \   00000094   0170               STRB     R1,[R0, #+0]
    410                Trap.Activ=0;
   \   00000096   1948               LDR      R0,??ISR_VBus_4+0xC  ;; Trap + 3
   \   00000098   0021               MOVS     R1,#+0
   \   0000009A   0170               STRB     R1,[R0, #+0]
    411                g_Stop_Program=0;
   \   0000009C   ....               LDR      R0,??DataTable21  ;; g_Stop_Program
   \   0000009E   0021               MOVS     R1,#+0
   \   000000A0   0170               STRB     R1,[R0, #+0]
    412                
    413          
    414              }
    415              MenuPaint();
   \                     ??ISR_VBus_2:
   \   000000A2   ........           BL       MenuPaint
   \   000000A6   20E0               B        ??ISR_VBus_5
    416            }
    417            else
    418            {
    419              USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_0:
   \   000000A8   ....               LDR      R0,??DataTable19  ;; sUsb
   \   000000AA   ........           BL       USB_Disconnect
    420              g_PC_Connected=0;
   \   000000AE   ....               LDR      R0,??DataTable20  ;; g_PC_Connected
   \   000000B0   0021               MOVS     R1,#+0
   \   000000B2   0170               STRB     R1,[R0, #+0]
    421              g_Stop_Program=0;
   \   000000B4   ....               LDR      R0,??DataTable21  ;; g_Stop_Program
   \   000000B6   0021               MOVS     R1,#+0
   \   000000B8   0170               STRB     R1,[R0, #+0]
    422              MenuPaint();
   \   000000BA   ........           BL       MenuPaint
    423              g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   000000BE   ....               LDR      R0,??DataTable22  ;; g_LightCouterLCD
   \   000000C0   0021               MOVS     R1,#+0
   \   000000C2   0160               STR      R1,[R0, #+0]
    424              if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   000000C4   ....               LDR      R0,??DataTable24  ;; g_LightLCDEnable
   \   000000C6   0078               LDRB     R0,[R0, #+0]
   \   000000C8   0028               CMP      R0,#+0
   \   000000CA   02D1               BNE      ??ISR_VBus_6
   \   000000CC   ....               LDR      R0,??DataTable24  ;; g_LightLCDEnable
   \   000000CE   0121               MOVS     R1,#+1
   \   000000D0   0170               STRB     R1,[R0, #+0]
    425              
    426              Trap.Enable=0;
   \                     ??ISR_VBus_6:
   \   000000D2   0748               LDR      R0,??ISR_VBus_4  ;; Trap
   \   000000D4   0021               MOVS     R1,#+0
   \   000000D6   0170               STRB     R1,[R0, #+0]
    427              Trap.Row=0;
   \   000000D8   0648               LDR      R0,??ISR_VBus_4+0x4  ;; Trap + 1
   \   000000DA   0021               MOVS     R1,#+0
   \   000000DC   0170               STRB     R1,[R0, #+0]
    428              Trap.Col=0;
   \   000000DE   0648               LDR      R0,??ISR_VBus_4+0x8  ;; Trap + 2
   \   000000E0   0021               MOVS     R1,#+0
   \   000000E2   0170               STRB     R1,[R0, #+0]
    429              Trap.Activ=0;
   \   000000E4   0548               LDR      R0,??ISR_VBus_4+0xC  ;; Trap + 3
   \   000000E6   0021               MOVS     R1,#+0
   \   000000E8   0170               STRB     R1,[R0, #+0]
    430              
    431          
    432            } 
    433          
    434          }//_____________________________________________________________________________
   \                     ??ISR_VBus_5:
   \   000000EA   01B0               ADD      SP,SP,#+4
   \   000000EC   01BC               POP      {R0}
   \   000000EE   0047               BX       R0               ;; return
   \                     ??ISR_VBus_4:
   \   000000F0   ........           DC32     Trap
   \   000000F4   ........           DC32     Trap + 1
   \   000000F8   ........           DC32     Trap + 2
   \   000000FC   ........           DC32     Trap + 3
    435          //#endif // !defined(USB_BUS_POWERED)
    436          
    437          
    438          
    439          
    440          
    441          // Callbacks
    442          //------------------------------------------------------------------------------
    443          //------------------------------------------------------------------------------
    444          //! \brief  Callback invoked during the initialization of the USB driver
    445          //!
    446          //!         Configures and enables USB controller and VBus monitoring interrupts
    447          //! \param  pUsb    Pointer to a S_usb instance
    448          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    449          static void CBK_Init(const S_usb *pUsb)
    450          {
   \                     CBK_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
    451          
    452            TRACE_INFO("\n\rInicjalizacja przerwania VBUS od podlaczenia USB  \n\r" ); 
    453              
    454              // Configure and enable the USB controller interrupt
    455              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    456                                    USB_GetDriverID(pUsb),
    457                                    USB_CON_PRIOR,
    458                                    0, //AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    459                                    ISR_Driver);
   \   00000004   2000               MOVS     R0,R4
   \   00000006   ........           BL       USB_GetDriverID
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0F49               LDR      R1,??CBK_Init_0  ;; ISR_Driver
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   0522               MOVS     R2,#+5
   \   00000014   0100               MOVS     R1,R0
   \   00000016   ....               LDR      R0,??DataTable26  ;; 0xfffff000
   \   00000018   ........           BL       AT91F_AIC_ConfigureIt
   \   0000001C   02B0               ADD      SP,SP,#+8
    460          
    461              AT91F_AIC_EnableIt(AT91C_BASE_AIC, USB_GetDriverID(pUsb));
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       USB_GetDriverID
   \   00000024   0100               MOVS     R1,R0
   \   00000026   ....               LDR      R0,??DataTable26  ;; 0xfffff000
   \   00000028   ........           BL       AT91F_AIC_EnableIt
    462          
    463          //#ifndef USB_BUS_POWERED
    464             
    465              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   0000002C   0221               MOVS     R1,#+2
   \   0000002E   ....               LDR      R0,??DataTable27  ;; 0xfffff400
   \   00000030   ........           BL       AT91F_PIO_CfgInput
    466              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   00000034   ....               LDR      R0,??DataTable28  ;; 0xfffff460
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   0160               STR      R1,[R0, #+0]
    467             
    468              // Configure VBus monitoring
    469              BRD_ConfigureVBus(USB_GetDriverInterface(pUsb));
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USB_GetDriverInterface
   \   00000040   ........           BL       BRD_ConfigureVBus
    470          
    471              
    472              
    473              
    474              
    475            /*  
    476              // Configure and enable the Vbus detection interrupt
    477              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    478                                    AT91C_ID_VBUS,
    479                                    USB_CON_PRIOR, //AT91C_AIC_PRIOR_LOWEST,
    480                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    481                                    ISR_VBus);
    482          
    483              
    484              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
    485              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
    486            
    487             
    488              
    489              
    490              
    491              
    492              */
    493              
    494              
    495          /*
    496          #else
    497              // Power up the USB controller
    498              USB_Attach(pUsb);
    499            
    500          #endif
    501          */
    502          
    503          }//_____________________________________________________________________________
   \   00000044   10BC               POP      {R4}
   \   00000046   01BC               POP      {R0}
   \   00000048   0047               BX       R0               ;; return
   \   0000004A   C046               Nop      
   \                     ??CBK_Init_0:
   \   0000004C   ........           DC32     ISR_Driver
    504          
    505          
    506          
    507          
    508          
    509          
    510          
    511          
    512          
    513          
    514          
    515          
    516          
    517          
    518          
    519          
    520          
    521          
    522          
    523          
    524          
    525          
    526          
    527          //------------------------------------------------------------------------------
    528          //! \brief  Callback invoked when the device becomes suspended
    529          //!
    530          //!         Disables LEDs (if they are used) and then puts the device into
    531          //!         low-power mode. When traces are used, the device does not enter
    532          //!         low-power mode to avoid losing some outputs.
    533          //! \param  pUsb    Pointer to a S_usb instance
    534          //------------------------------------------------------------------------------
    535          static void CBK_Suspend(const S_usb *pUsb)
    536          {
    537          
    538          #if defined(NOTRACES)
    539              DEV_Suspend();
    540          #endif
    541          }//_____________________________________________________________________________
    542          
    543          
    544          
    545          
    546          
    547          
    548          //------------------------------------------------------------------------------
    549          //! \brief  Callback invoked when the device leaves the suspended state
    550          //!
    551          //!         The device is first returned to a normal operating mode and LEDs are
    552          //!         re-enabled. When traces are used, the device does not enter
    553          //!         low-power mode to avoid losing some outputs.
    554          //! \param  pUsb    Pointer to a S_usb instance
    555          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    556          static void CBK_Resume(const S_usb *pUsb)
    557          {
   \                     CBK_Resume:
   \   00000000   01B5               PUSH     {R0,LR}
    558          #if defined(NOTRACES)
    559              DEV_Resume();
   \   00000002   ........           BL       DEV_Resume
    560          #endif
    561          
    562          }//_____________________________________________________________________________
   \   00000006   01B0               ADD      SP,SP,#+4
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    563          
    564          
    565          
    566          
    567          
    568          
    569          //------------------------------------------------------------------------------
    570          //! \brief  Callback invoked when a new SETUP request is received
    571          //!
    572          //!         The new request if forwarded to the standard request handler,
    573          //!         which performs the enumeration of the device.
    574          //! \param  pUsb   Pointer to a S_usb instance
    575          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    576          static void CBK_NewRequest(const S_usb *pUsb)
    577          {
   \                     CBK_NewRequest:
   \   00000000   01B5               PUSH     {R0,LR}
    578              SER_RequestHandler(&sSer);
   \   00000002   ....               LDR      R0,??DataTable32  ;; sSer
   \   00000004   ........           BL       SER_RequestHandler
    579          }//_____________________________________________________________________________
   \   00000008   01B0               ADD      SP,SP,#+4
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    580          
    581          
    582          
    583          
    584          
    585          
    586          //------------------------------------------------------------------------------
    587          //! \brief  Callback invoked when a Reset request is received
    588          //!
    589          //! \param  pUsb   Pointer to a S_usb instance
    590          //------------------------------------------------------------------------------
    591          //static void CBK_Reset(const S_usb *pUsb)
    592          //{
    593              // Put your reset handler here
    594          //}//_____________________________________________________________________________
    595          
    596          
    597          
    598          
    599          //------------------------------------------------------------------------------
    600          //! \brief  Callback invoked when a SOF is received
    601          //!
    602          //! \param  pUsb   Pointer to a S_usb instance
    603          //------------------------------------------------------------------------------
    604          //static void CBK_SOF(const S_usb *pUsb)
    605          //{
    606              // Put your SOF handler here
    607          //}//_____________________________________________________________________________
    608          
    609          
    610          
    611          

   \                                 In section Debug.txt, align 4, keep-with-next
    612          void SendViaUSB(unsigned char *Buff, unsigned short Size)
    613          {
   \                     SendViaUSB:
   \   00000000   01B5               PUSH     {R0,LR}
    614            SER_Write(&sSer, Buff,Size,0, 0); 
   \   00000002   82B0               SUB      SP,SP,#+8
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   0092               STR      R2,[SP, #+0]
   \   00000008   0023               MOVS     R3,#+0
   \   0000000A   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   0000000C   090C               LSRS     R1,R1,#+16
   \   0000000E   0A00               MOVS     R2,R1
   \   00000010   0100               MOVS     R1,R0
   \   00000012   ....               LDR      R0,??DataTable32  ;; sSer
   \   00000014   ........           BL       SER_Write
   \   00000018   02B0               ADD      SP,SP,#+8
    615          }
   \   0000001A   01B0               ADD      SP,SP,#+4
   \   0000001C   01BC               POP      {R0}
   \   0000001E   0047               BX       R0               ;; return
    616          
    617          
    618          // Other functions
    619          //------------------------------------------------------------------------------
    620          //------------------------------------------------------------------------------
    621          //! \brief  Forwards data receiving from the USB host through the USART
    622          //!
    623          //!         This function operates asynchronously.
    624          //! \param  pBuffer           Must be 0 when function is first called
    625          //! \param  bStatus           Same as above
    626          //! \param  dBytesTransferred Same as above
    627          //! \param  dBytesRemaining   Same as above
    628          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    629          static void ForwardUSB2Serial(unsigned char *pBuffer,
    630                                        unsigned char bStatus,
    631                                        unsigned int dBytesTransferred,
    632                                        unsigned int dBytesRemaining)
    633          {
   \                     ForwardUSB2Serial:
   \   00000000   01B5               PUSH     {R0,LR}
    634              //Zmienne lokalne ----------------------------------------------------
    635                      static char buff_tx[900];                                          //Bufor danych wysy³anych do USB
    636                   
    637                      unsigned int rozmiar_tx=0;                                          //Iloœæ danych do wys³ania przez USB
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0093               STR      R3,[SP, #+0]
    638                    //---------------------koniec zmiennych lokalnych--------------------
    639                  
    640          
    641              if (pBuffer != 0) {                                                                   
   \   00000006   0028               CMP      R0,#+0
   \   00000008   13D0               BEQ      ??ForwardUSB2Serial_0
    642                  if (bStatus != SER_STATUS_SUCCESS) 
   \   0000000A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000000C   090E               LSRS     R1,R1,#+24
   \   0000000E   0029               CMP      R1,#+0
   \   00000010   0FD1               BNE      ??ForwardUSB2Serial_0
    643                  {
    644                    
    645                    TRACE_WARNING("\n\r W: ForwardUSB2Serial: B³¹d transmisji USB\n\r");
    646                  }
    647                  else 
    648                  {
    649          
    650                      pBuffer[dBytesTransferred] = 0;
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   8154               STRB     R1,[R0, R2]
    651                     komunikcja_RSwin((char *)pBuffer,buff_tx,&rozmiar_tx);
   \   00000016   6A46               MOV      R2,SP
   \   00000018   0F49               LDR      R1,??ForwardUSB2Serial_1  ;; ??buff_tx
   \   0000001A   ........           BL       komunikcja_RSwin
    652                     SER_Write(&sSer, buff_tx,rozmiar_tx,0, 0);                                                                        
   \   0000001E   82B0               SUB      SP,SP,#+8
   \   00000020   0020               MOVS     R0,#+0
   \   00000022   0090               STR      R0,[SP, #+0]
   \   00000024   0023               MOVS     R3,#+0
   \   00000026   029A               LDR      R2,[SP, #+8]
   \   00000028   0B49               LDR      R1,??ForwardUSB2Serial_1  ;; ??buff_tx
   \   0000002A   ....               LDR      R0,??DataTable32  ;; sSer
   \   0000002C   ........           BL       SER_Write
   \   00000030   02B0               ADD      SP,SP,#+8
    653                  }
    654              }
    655          
    656          
    657              do {
    658          
    659                  bStatus = SER_Read(&sSer,
    660                                     pUsbBuffer,
    661              
    662                                     USB_BUFFER_SIZE,
    663                                     (Callback_f) ForwardUSB2Serial,
    664                                     pUsbBuffer);
   \                     ??ForwardUSB2Serial_0:
   \   00000032   82B0               SUB      SP,SP,#+8
   \   00000034   0948               LDR      R0,??ForwardUSB2Serial_1+0x4  ;; pUsbBuffer
   \   00000036   0090               STR      R0,[SP, #+0]
   \   00000038   094B               LDR      R3,??ForwardUSB2Serial_1+0x8  ;; ForwardUSB2Serial
   \   0000003A   9622               MOVS     R2,#+150
   \   0000003C   5200               LSLS     R2,R2,#+1        ;; #+300
   \   0000003E   0749               LDR      R1,??ForwardUSB2Serial_1+0x4  ;; pUsbBuffer
   \   00000040   ....               LDR      R0,??DataTable32  ;; sSer
   \   00000042   ........           BL       SER_Read
   \   00000046   02B0               ADD      SP,SP,#+8
   \   00000048   0100               MOVS     R1,R0
    665              }
    666              while (bStatus != SER_STATUS_SUCCESS);
   \   0000004A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000004C   090E               LSRS     R1,R1,#+24
   \   0000004E   0029               CMP      R1,#+0
   \   00000050   EFD1               BNE      ??ForwardUSB2Serial_0
    667           
    668          }//_____________________________________________________________________________
   \   00000052   01B0               ADD      SP,SP,#+4
   \   00000054   01BC               POP      {R0}
   \   00000056   0047               BX       R0               ;; return
   \                     ??ForwardUSB2Serial_1:
   \   00000058   ........           DC32     ??buff_tx
   \   0000005C   ........           DC32     pUsbBuffer
   \   00000060   ........           DC32     ForwardUSB2Serial

   \                                 In section .bss, align 4
   \                     ??buff_tx:
   \   00000000                      DS8 900
    669          
    670          
    671          
    672          
    673          
    674          
    675          //-----------------------------------------------------------------------------
    676          //!  Nazwa funkcji :    Delay
    677          //!  Funkcja opóŸnienia
    678          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    679          void Delay (unsigned long a) 
    680          { 
   \                     Delay:
   \   00000000   01B5               PUSH     {R0,LR}
    681              while (--a!=0);   AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Delay_0:
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   0028               CMP      R0,#+0
   \   00000006   FCD1               BNE      ??Delay_0
   \   00000008   ....               LDR      R0,??DataTable33  ;; 0xfffffd40
   \   0000000A   ........           BL       AT91F_WDTRestart
    682          }//_______________________ Koniec funkcji opóŸnienia ____________________________
   \   0000000E   01B0               ADD      SP,SP,#+4
   \   00000010   01BC               POP      {R0}
   \   00000012   0047               BX       R0               ;; return
    683          
    684          
    685          
    686          

   \                                 In section .bss, align 4
    687          char *memory_read;
   \                     memory_read:
   \   00000000                      DS8 4
    688          
    689          //-----------------------------------------------------------------------------
    690          //! Nazwa funkcji :    InitFramework
    691          //! Funkcja ustawieñ wstêpnych systemu
    692          //-----------------------------------------------------------------------------

   \                                 In section .data, align 4
    693          int tProgramTabSize=ProgramTabSize;
   \                     tProgramTabSize:
   \   00000000   70C60000           DC32 50800

   \                                 In section .bss, align 4
    694          char *SourRam;
   \                     SourRam:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
    695          unsigned int  stop=2000;
   \                     stop:
   \   00000000   D0070000           DC32 2000

   \                                 In section .bss, align 4
    696          unsigned int  siz;
   \                     siz:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
    697          void InitFramework (void) 
    698          { 
   \                     InitFramework:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    699             
    700           //  TRACE_INFO("\n\ InitFramework \n\r");
    701              
    702          
    703          
    704                                            FlashProgramOfset=FlashProgram_A_Ofset;
   \   00000002   8348               LDR      R0,??InitFramework_0  ;; FlashProgramOfset
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0160               STR      R1,[R0, #+0]
    705                                 
    706                                            
    707                                          //  TRACE_INFO("\n\r---  Strona flash = A  \n\r" ); 
    708          
    709              
    710              
    711          //    TRACE_INFO(" ---  Przepisuje program z FLASH do RAM     -Ofset : %d\n\r",AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    712              //przepisz program z flash do ram
    713              char *memory_read_prog;
    714              memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
   \   00000008   8148               LDR      R0,??InitFramework_0  ;; FlashProgramOfset
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8149               LDR      R1,??InitFramework_0+0x4  ;; 0x130100
   \   0000000E   0818               ADDS     R0,R1,R0
    715          
    716            
    717               SourRam= (char*)&gProg;
   \   00000010   8149               LDR      R1,??InitFramework_0+0x8  ;; SourRam
   \   00000012   824A               LDR      R2,??InitFramework_0+0xC  ;; gProg
   \   00000014   0A60               STR      R2,[R1, #+0]
    718          
    719             
    720              siz=sizeof(gProg);
   \   00000016   8249               LDR      R1,??InitFramework_0+0x10  ;; siz
   \   00000018   824A               LDR      R2,??InitFramework_0+0x14  ;; 0xc670
   \   0000001A   0A60               STR      R2,[R1, #+0]
    721              for (unsigned int k = 0 ; k <siz; k++) 
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   04E0               B        ??InitFramework_1
    722              {      
    723                    SourRam[k]=memory_read_prog[k]; 
   \                     ??InitFramework_2:
   \   00000020   7D4A               LDR      R2,??InitFramework_0+0x8  ;; SourRam
   \   00000022   1268               LDR      R2,[R2, #+0]
   \   00000024   435C               LDRB     R3,[R0, R1]
   \   00000026   5354               STRB     R3,[R2, R1]
    724              }
   \   00000028   491C               ADDS     R1,R1,#+1
   \                     ??InitFramework_1:
   \   0000002A   7D4A               LDR      R2,??InitFramework_0+0x10  ;; siz
   \   0000002C   1268               LDR      R2,[R2, #+0]
   \   0000002E   9142               CMP      R1,R2
   \   00000030   F6D3               BCC      ??InitFramework_2
    725              
    726             
    727            
    728              for (char i=0; i<ScreenNr; i++) 
   \   00000032   0020               MOVS     R0,#+0
   \   00000034   10E0               B        ??InitFramework_3
    729             {
    730               //je¿eli ustawienie automatyczne temperatury
    731               if (gProg.Screen[i].Thermo.AutoOn) 
    732               {
    733                 
    734                   //je¿eli dzieñ typu pierwszego
    735                   if (((gProg.Screen[i].Thermo.Week>>DateTime.DayOfWeek) & 0x1)==1)       
    736                   {
    737                      if (((gProg.Screen[i].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    738                      {                 
    739                        //ustaw wy¿sz¹ temperaturê
    740                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    741                        {
    742                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
    743                        }else{
    744                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    745                        }
    746                      }else{
    747                        //ustaw ni¿sz¹ temperaturê
    748                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    749                        {
    750                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    751                        }else{
    752                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
   \                     ??InitFramework_4:
   \   00000036   7C49               LDR      R1,??InitFramework_0+0x18  ;; 0xbc2e
   \   00000038   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000003A   000E               LSRS     R0,R0,#+24
   \   0000003C   A022               MOVS     R2,#+160
   \   0000003E   4243               MULS     R2,R0,R2
   \   00000040   764B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   00000042   9A18               ADDS     R2,R3,R2
   \   00000044   794B               LDR      R3,??InitFramework_0+0x1C  ;; 0xbc2a
   \   00000046   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000048   000E               LSRS     R0,R0,#+24
   \   0000004A   A024               MOVS     R4,#+160
   \   0000004C   4443               MULS     R4,R0,R4
   \   0000004E   734D               LDR      R5,??InitFramework_0+0xC  ;; gProg
   \   00000050   2C19               ADDS     R4,R5,R4
   \   00000052   E35A               LDRH     R3,[R4, R3]
   \   00000054   5352               STRH     R3,[R2, R1]
    753                        }
   \                     ??InitFramework_5:
   \   00000056   401C               ADDS     R0,R0,#+1
   \                     ??InitFramework_3:
   \   00000058   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000005A   000E               LSRS     R0,R0,#+24
   \   0000005C   0828               CMP      R0,#+8
   \   0000005E   7BD2               BCS      ??InitFramework_6
   \   00000060   7349               LDR      R1,??InitFramework_0+0x20  ;; 0xbc26
   \   00000062   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000064   000E               LSRS     R0,R0,#+24
   \   00000066   A022               MOVS     R2,#+160
   \   00000068   4243               MULS     R2,R0,R2
   \   0000006A   6C4B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   0000006C   9A18               ADDS     R2,R3,R2
   \   0000006E   515C               LDRB     R1,[R2, R1]
   \   00000070   0029               CMP      R1,#+0
   \   00000072   F0D0               BEQ      ??InitFramework_5
   \   00000074   6F49               LDR      R1,??InitFramework_0+0x24  ;; 0xbc29
   \   00000076   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000078   000E               LSRS     R0,R0,#+24
   \   0000007A   A022               MOVS     R2,#+160
   \   0000007C   4243               MULS     R2,R0,R2
   \   0000007E   674B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   00000080   9A18               ADDS     R2,R3,R2
   \   00000082   515C               LDRB     R1,[R2, R1]
   \   00000084   6C4A               LDR      R2,??InitFramework_0+0x28  ;; DateTime + 6
   \   00000086   1278               LDRB     R2,[R2, #+0]
   \   00000088   1141               ASRS     R1,R1,R2
   \   0000008A   C907               LSLS     R1,R1,#+31
   \   0000008C   E3D5               BPL      ??InitFramework_5
   \   0000008E   6B49               LDR      R1,??InitFramework_0+0x2C  ;; 0xbc30
   \   00000090   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000092   000E               LSRS     R0,R0,#+24
   \   00000094   A022               MOVS     R2,#+160
   \   00000096   4243               MULS     R2,R0,R2
   \   00000098   604B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   0000009A   9A18               ADDS     R2,R3,R2
   \   0000009C   5158               LDR      R1,[R2, R1]
   \   0000009E   684A               LDR      R2,??InitFramework_0+0x30  ;; DateTime + 3
   \   000000A0   1278               LDRB     R2,[R2, #+0]
   \   000000A2   D140               LSRS     R1,R1,R2
   \   000000A4   C907               LSLS     R1,R1,#+31
   \   000000A6   33D5               BPL      ??InitFramework_7
   \   000000A8   6649               LDR      R1,??InitFramework_0+0x34  ;; 0xbc2c
   \   000000AA   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000AC   000E               LSRS     R0,R0,#+24
   \   000000AE   A022               MOVS     R2,#+160
   \   000000B0   4243               MULS     R2,R0,R2
   \   000000B2   5A4B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   000000B4   9A18               ADDS     R2,R3,R2
   \   000000B6   515E               LDRSH    R1,[R2, R1]
   \   000000B8   5C4A               LDR      R2,??InitFramework_0+0x1C  ;; 0xbc2a
   \   000000BA   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000BC   000E               LSRS     R0,R0,#+24
   \   000000BE   A023               MOVS     R3,#+160
   \   000000C0   4343               MULS     R3,R0,R3
   \   000000C2   564C               LDR      R4,??InitFramework_0+0xC  ;; gProg
   \   000000C4   E318               ADDS     R3,R4,R3
   \   000000C6   9A5E               LDRSH    R2,[R3, R2]
   \   000000C8   9142               CMP      R1,R2
   \   000000CA   10DA               BGE      ??InitFramework_8
   \   000000CC   5649               LDR      R1,??InitFramework_0+0x18  ;; 0xbc2e
   \   000000CE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000D0   000E               LSRS     R0,R0,#+24
   \   000000D2   A022               MOVS     R2,#+160
   \   000000D4   4243               MULS     R2,R0,R2
   \   000000D6   514B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   000000D8   9A18               ADDS     R2,R3,R2
   \   000000DA   544B               LDR      R3,??InitFramework_0+0x1C  ;; 0xbc2a
   \   000000DC   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000DE   000E               LSRS     R0,R0,#+24
   \   000000E0   A024               MOVS     R4,#+160
   \   000000E2   4443               MULS     R4,R0,R4
   \   000000E4   4D4D               LDR      R5,??InitFramework_0+0xC  ;; gProg
   \   000000E6   2C19               ADDS     R4,R5,R4
   \   000000E8   E35A               LDRH     R3,[R4, R3]
   \   000000EA   5352               STRH     R3,[R2, R1]
   \   000000EC   B3E7               B        ??InitFramework_5
   \                     ??InitFramework_8:
   \   000000EE   4E49               LDR      R1,??InitFramework_0+0x18  ;; 0xbc2e
   \   000000F0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000F2   000E               LSRS     R0,R0,#+24
   \   000000F4   A022               MOVS     R2,#+160
   \   000000F6   4243               MULS     R2,R0,R2
   \   000000F8   484B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   000000FA   9A18               ADDS     R2,R3,R2
   \   000000FC   514B               LDR      R3,??InitFramework_0+0x34  ;; 0xbc2c
   \   000000FE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000100   000E               LSRS     R0,R0,#+24
   \   00000102   A024               MOVS     R4,#+160
   \   00000104   4443               MULS     R4,R0,R4
   \   00000106   454D               LDR      R5,??InitFramework_0+0xC  ;; gProg
   \   00000108   2C19               ADDS     R4,R5,R4
   \   0000010A   E35A               LDRH     R3,[R4, R3]
   \   0000010C   5352               STRH     R3,[R2, R1]
   \   0000010E   A2E7               B        ??InitFramework_5
   \                     ??InitFramework_7:
   \   00000110   4C49               LDR      R1,??InitFramework_0+0x34  ;; 0xbc2c
   \   00000112   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000114   000E               LSRS     R0,R0,#+24
   \   00000116   A022               MOVS     R2,#+160
   \   00000118   4243               MULS     R2,R0,R2
   \   0000011A   404B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   0000011C   9A18               ADDS     R2,R3,R2
   \   0000011E   515E               LDRSH    R1,[R2, R1]
   \   00000120   424A               LDR      R2,??InitFramework_0+0x1C  ;; 0xbc2a
   \   00000122   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000124   000E               LSRS     R0,R0,#+24
   \   00000126   A023               MOVS     R3,#+160
   \   00000128   4343               MULS     R3,R0,R3
   \   0000012A   3C4C               LDR      R4,??InitFramework_0+0xC  ;; gProg
   \   0000012C   E318               ADDS     R3,R4,R3
   \   0000012E   9A5E               LDRSH    R2,[R3, R2]
   \   00000130   9142               CMP      R1,R2
   \   00000132   00DB               BLT      .+4
   \   00000134   7FE7               B        ??InitFramework_4
   \   00000136   3C49               LDR      R1,??InitFramework_0+0x18  ;; 0xbc2e
   \   00000138   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000013A   000E               LSRS     R0,R0,#+24
   \   0000013C   A022               MOVS     R2,#+160
   \   0000013E   4243               MULS     R2,R0,R2
   \   00000140   364B               LDR      R3,??InitFramework_0+0xC  ;; gProg
   \   00000142   9A18               ADDS     R2,R3,R2
   \   00000144   3F4B               LDR      R3,??InitFramework_0+0x34  ;; 0xbc2c
   \   00000146   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000148   000E               LSRS     R0,R0,#+24
   \   0000014A   A024               MOVS     R4,#+160
   \   0000014C   4443               MULS     R4,R0,R4
   \   0000014E   334D               LDR      R5,??InitFramework_0+0xC  ;; gProg
   \   00000150   2C19               ADDS     R4,R5,R4
   \   00000152   E35A               LDRH     R3,[R4, R3]
   \   00000154   5352               STRH     R3,[R2, R1]
   \   00000156   7EE7               B        ??InitFramework_5
    754                      }
    755                   }
    756               }
    757             }
    758           
    759              
    760           
    761              //koniec
    762             
    763             
    764             
    765             
    766             //czyszczenie zmiennych programowych
    767                for (int LineNr=0; LineNr<MaxPrcLines; LineNr++)
   \                     ??InitFramework_6:
   \   00000158   0020               MOVS     R0,#+0
   \   0000015A   16E0               B        ??InitFramework_9
    768                {
    769                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
    770                  {
    771                    gProg.Line[LineNr].Proc[PrcInLine].LastIn=0;
   \                     ??InitFramework_10:
   \   0000015C   1822               MOVS     R2,#+24
   \   0000015E   4A43               MULS     R2,R1,R2
   \   00000160   F023               MOVS     R3,#+240
   \   00000162   4343               MULS     R3,R0,R3
   \   00000164   2D4C               LDR      R4,??InitFramework_0+0xC  ;; gProg
   \   00000166   E318               ADDS     R3,R4,R3
   \   00000168   9A18               ADDS     R2,R3,R2
   \   0000016A   2832               ADDS     R2,R2,#+40
   \   0000016C   0023               MOVS     R3,#+0
   \   0000016E   1370               STRB     R3,[R2, #+0]
    772                    gProg.Line[LineNr].Proc[PrcInLine].Out=0;
   \   00000170   1822               MOVS     R2,#+24
   \   00000172   4A43               MULS     R2,R1,R2
   \   00000174   F023               MOVS     R3,#+240
   \   00000176   4343               MULS     R3,R0,R3
   \   00000178   284C               LDR      R4,??InitFramework_0+0xC  ;; gProg
   \   0000017A   E318               ADDS     R3,R4,R3
   \   0000017C   9A18               ADDS     R2,R3,R2
   \   0000017E   0023               MOVS     R3,#+0
   \   00000180   5385               STRH     R3,[R2, #+42]
    773                  }
   \   00000182   491C               ADDS     R1,R1,#+1
   \                     ??InitFramework_11:
   \   00000184   0A29               CMP      R1,#+10
   \   00000186   E9DB               BLT      ??InitFramework_10
   \   00000188   401C               ADDS     R0,R0,#+1
   \                     ??InitFramework_9:
   \   0000018A   C828               CMP      R0,#+200
   \   0000018C   01DA               BGE      ??InitFramework_12
   \   0000018E   0021               MOVS     R1,#+0
   \   00000190   F8E7               B        ??InitFramework_11
    774                }
    775           
    776          
    777                //Ustawienie wartoœci analogowych wêz³ów na niewiarygodne (0x8AAA)
    778                for (char NN=1; NN<NumberNeurons; NN++)
   \                     ??InitFramework_12:
   \   00000192   0120               MOVS     R0,#+1
   \   00000194   13E0               B        ??InitFramework_13
    779                {
    780                  for (char NR=0; NR<NumberReg; NR++)
    781                  {
    782                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   \                     ??InitFramework_14:
   \   00000196   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000198   090E               LSRS     R1,R1,#+24
   \   0000019A   0222               MOVS     R2,#+2
   \   0000019C   4A43               MULS     R2,R1,R2
   \   0000019E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000001A0   000E               LSRS     R0,R0,#+24
   \   000001A2   1623               MOVS     R3,#+22
   \   000001A4   4343               MULS     R3,R0,R3
   \   000001A6   284C               LDR      R4,??InitFramework_0+0x38  ;; MainStage
   \   000001A8   E318               ADDS     R3,R4,R3
   \   000001AA   9A18               ADDS     R2,R3,R2
   \   000001AC   A032               ADDS     R2,R2,#+160
   \   000001AE   274B               LDR      R3,??InitFramework_0+0x3C  ;; 0xffff8aaa
   \   000001B0   1380               STRH     R3,[R2, #+0]
    783                  }
   \   000001B2   491C               ADDS     R1,R1,#+1
   \                     ??InitFramework_15:
   \   000001B4   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000001B6   090E               LSRS     R1,R1,#+24
   \   000001B8   0B29               CMP      R1,#+11
   \   000001BA   ECD3               BCC      ??InitFramework_14
   \   000001BC   401C               ADDS     R0,R0,#+1
   \                     ??InitFramework_13:
   \   000001BE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000001C0   000E               LSRS     R0,R0,#+24
   \   000001C2   2328               CMP      R0,#+35
   \   000001C4   01D2               BCS      ??InitFramework_16
   \   000001C6   0021               MOVS     R1,#+0
   \   000001C8   F4E7               B        ??InitFramework_15
    784                }
    785              
    786              
    787                 //przepisanie wartoœci konfiguracyjnych
    788              WypMaxJasnosci=pAT91C_IFLASH_MEM->Config.ScreenBrightActive;
   \                     ??InitFramework_16:
   \   000001CA   2148               LDR      R0,??InitFramework_0+0x40  ;; WypMaxJasnosci
   \   000001CC   2149               LDR      R1,??InitFramework_0+0x44  ;; 0xd80e
   \   000001CE   224A               LDR      R2,??InitFramework_0+0x48  ;; pAT91C_IFLASH_MEM
   \   000001D0   1268               LDR      R2,[R2, #+0]
   \   000001D2   515C               LDRB     R1,[R2, R1]
   \   000001D4   0170               STRB     R1,[R0, #+0]
    789              WypMinJasnosci=pAT91C_IFLASH_MEM->Config.ScreenBrightInactive;
   \   000001D6   2148               LDR      R0,??InitFramework_0+0x4C  ;; WypMinJasnosci
   \   000001D8   2149               LDR      R1,??InitFramework_0+0x50  ;; 0xd80f
   \   000001DA   1F4A               LDR      R2,??InitFramework_0+0x48  ;; pAT91C_IFLASH_MEM
   \   000001DC   1268               LDR      R2,[R2, #+0]
   \   000001DE   515C               LDRB     R1,[R2, R1]
   \   000001E0   0170               STRB     R1,[R0, #+0]
    790              if ((WypMaxJasnosci<10) || (WypMaxJasnosci>100)) WypMaxJasnosci=100;
   \   000001E2   1B48               LDR      R0,??InitFramework_0+0x40  ;; WypMaxJasnosci
   \   000001E4   0078               LDRB     R0,[R0, #+0]
   \   000001E6   0A28               CMP      R0,#+10
   \   000001E8   03D3               BCC      ??InitFramework_17
   \   000001EA   1948               LDR      R0,??InitFramework_0+0x40  ;; WypMaxJasnosci
   \   000001EC   0078               LDRB     R0,[R0, #+0]
   \   000001EE   6528               CMP      R0,#+101
   \   000001F0   02D3               BCC      ??InitFramework_18
   \                     ??InitFramework_17:
   \   000001F2   1748               LDR      R0,??InitFramework_0+0x40  ;; WypMaxJasnosci
   \   000001F4   6421               MOVS     R1,#+100
   \   000001F6   0170               STRB     R1,[R0, #+0]
    791              if (WypMinJasnosci==0) WypMinJasnosci=14;
   \                     ??InitFramework_18:
   \   000001F8   1848               LDR      R0,??InitFramework_0+0x4C  ;; WypMinJasnosci
   \   000001FA   0078               LDRB     R0,[R0, #+0]
   \   000001FC   0028               CMP      R0,#+0
   \   000001FE   02D1               BNE      ??InitFramework_19
   \   00000200   1648               LDR      R0,??InitFramework_0+0x4C  ;; WypMinJasnosci
   \   00000202   0E21               MOVS     R1,#+14
   \   00000204   0170               STRB     R1,[R0, #+0]
    792               
    793          }//_______________________ Koniec funkcji InitFramework ____________________________
   \                     ??InitFramework_19:
   \   00000206   01B0               ADD      SP,SP,#+4
   \   00000208   30BC               POP      {R4,R5}
   \   0000020A   01BC               POP      {R0}
   \   0000020C   0047               BX       R0               ;; return
   \   0000020E   C046               Nop      
   \                     ??InitFramework_0:
   \   00000210   ........           DC32     FlashProgramOfset
   \   00000214   00011300           DC32     0x130100
   \   00000218   ........           DC32     SourRam
   \   0000021C   ........           DC32     gProg
   \   00000220   ........           DC32     siz
   \   00000224   70C60000           DC32     0xc670
   \   00000228   2EBC0000           DC32     0xbc2e
   \   0000022C   2ABC0000           DC32     0xbc2a
   \   00000230   26BC0000           DC32     0xbc26
   \   00000234   29BC0000           DC32     0xbc29
   \   00000238   ........           DC32     DateTime + 6
   \   0000023C   30BC0000           DC32     0xbc30
   \   00000240   ........           DC32     DateTime + 3
   \   00000244   2CBC0000           DC32     0xbc2c
   \   00000248   ........           DC32     MainStage
   \   0000024C   AA8AFFFF           DC32     0xffff8aaa
   \   00000250   ........           DC32     WypMaxJasnosci
   \   00000254   0ED80000           DC32     0xd80e
   \   00000258   ........           DC32     pAT91C_IFLASH_MEM
   \   0000025C   ........           DC32     WypMinJasnosci
   \   00000260   0FD80000           DC32     0xd80f
    794          
    795          
    796          
    797          
    798          
    799          
    800          //char gLcdLightDuty=2;

   \                                 In section Debug.txt, align 4, keep-with-next
    801          void Timer_10us(void)                        //timer isr 
    802          { 
    803              unsigned int dummy0 = AT91C_BASE_TC1->TC_SR;      
   \                     Timer_10us:
   \   00000000   0148               LDR      R0,??Timer_10us_0  ;; 0xfffa0060
   \   00000002   0068               LDR      R0,[R0, #+0]
    804            
    805           /*
    806            
    807            //PWM podœwietlenia
    808            static char LcdLightCounterPWM=6;        //licznik podœwietlenia
    809            
    810            
    811          AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD); 
    812            
    813            /*
                   ^
Warning[Pe009]: nested comment is not allowed
    814            static long long ScreenSaverCounter=0;
    815            if (g_LightLCDEnable)
    816            {
    817              AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);    
    818              ScreenSaverCounter=0;
    819            }else{
    820            
    821              if (LcdLightCounterPWM<6)
    822            {
    823              LcdLightCounterPWM++;
    824             
    825            }else{
    826              LcdLightCounterPWM=0; 
    827              
    828              if ((ScreenSaverCounter<500000) && (g_ScreenSever_On) ) 
    829              {
    830                ScreenSaverCounter++;  
    831                AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    832              }
    833              if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))   AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    834            }
    835            if  (LcdLightCounterPWM==gLcdLightDuty) AT91F_PIO_ClearOutput(LCD_PIO,(unsigned int)LightLCD);
    836            }
    837            */
    838            
    839          
    840            //----koniec PWM podœwietlenia ------
    841            
    842          
    843            
    844          }//_____________________________________________________________________________
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??Timer_10us_0:
   \   00000008   6000FAFF           DC32     0xfffa0060
    845          
    846          
    847          
    848          
    849          
    850          
    851          
    852          
    853          //-----------------------------------------------------------------------------
    854          //!  Nazwa funkcji :    Timer_1_Setup
    855          //!  Funkcja inicjalizacji Timer1 - 1ms
    856          //-----------------------------------------------------------------------------
    857          //! 
    858          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    859          void Timer_10us_Setup(void) 
    860          { 
    861          
    862            
    863           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
    864           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
    865           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC1] = (unsigned int)Timer_10us;  //set AIC             
   \                     Timer_10us_Setup:
   \   00000000   1448               LDR      R0,??Timer_10us_Setup_0  ;; 0xfffff0b4
   \   00000002   1549               LDR      R1,??Timer_10us_Setup_0+0x4  ;; Timer_10us
   \   00000004   0160               STR      R1,[R0, #+0]
    866           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC1] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10US_PRIOR); 
   \   00000006   1548               LDR      R0,??Timer_10us_Setup_0+0x8  ;; 0xfffff034
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0160               STR      R1,[R0, #+0]
    867           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC1);      //enable clock 
   \   0000000C   1448               LDR      R0,??Timer_10us_Setup_0+0xC  ;; 0xfffffc10
   \   0000000E   8021               MOVS     R1,#+128
   \   00000010   8901               LSLS     R1,R1,#+6        ;; #+8192
   \   00000012   0160               STR      R1,[R0, #+0]
    868           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1348               LDR      R0,??Timer_10us_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   0160               STR      R1,[R0, #+0]
    869           //no external clocks 
    870           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1348               LDR      R0,??Timer_10us_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1521               MOVS     R1,#+21
   \   0000001E   0160               STR      R1,[R0, #+0]
    871           AT91C_BASE_TC1->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1248               LDR      R0,??Timer_10us_Setup_0+0x18  ;; 0xfffa0040
   \   00000022   0521               MOVS     R1,#+5
   \   00000024   0160               STR      R1,[R0, #+0]
    872           AT91C_BASE_TC1->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000026   1248               LDR      R0,??Timer_10us_Setup_0+0x1C  ;; 0xfffa0044
   \   00000028   1249               LDR      R1,??Timer_10us_Setup_0+0x20  ;; 0xcc001
   \   0000002A   0160               STR      R1,[R0, #+0]
    873           //clock: MCK/1024  = 48054841/ DIV
    874           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
    875           //! DIV5 - 1024
    876           //! DIV4 - 128
    877           //! DIV3 - 32
    878           //! DIV2 - 8
    879           
    880           //AT91C_BASE_TC3->TC_RC = 5090;                  //1ms  (z wyliczeñ 6007)
    881           //AT91C_BASE_TC0->TC_RC = 5286;                    //880us 
    882           AT91C_BASE_TC1->TC_RC = 200;                    //440us  
   \   0000002C   1248               LDR      R0,??Timer_10us_Setup_0+0x24  ;; 0xfffa005c
   \   0000002E   C821               MOVS     R1,#+200
   \   00000030   0160               STR      R1,[R0, #+0]
    883           AT91C_BASE_TC1->TC_IER = AT91C_TC_CPCS;          //enable RC compare int 
   \   00000032   1248               LDR      R0,??Timer_10us_Setup_0+0x28  ;; 0xfffa0064
   \   00000034   1021               MOVS     R1,#+16
   \   00000036   0160               STR      R1,[R0, #+0]
    884           AT91C_BASE_TC1->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000038   1148               LDR      R0,??Timer_10us_Setup_0+0x2C  ;; 0xfffa0068
   \   0000003A   1021               MOVS     R1,#+16
   \   0000003C   C943               MVNS     R1,R1            ;; #-17
   \   0000003E   0160               STR      R1,[R0, #+0]
    885           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC1);       //enable int 
   \   00000040   1048               LDR      R0,??Timer_10us_Setup_0+0x30  ;; 0xfffff120
   \   00000042   8021               MOVS     R1,#+128
   \   00000044   8901               LSLS     R1,R1,#+6        ;; #+8192
   \   00000046   0160               STR      R1,[R0, #+0]
    886           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC1);       //clear int 
   \   00000048   0F48               LDR      R0,??Timer_10us_Setup_0+0x34  ;; 0xfffff128
   \   0000004A   8021               MOVS     R1,#+128
   \   0000004C   8901               LSLS     R1,R1,#+6        ;; #+8192
   \   0000004E   0160               STR      R1,[R0, #+0]
    887           
    888           
    889           //AT91C_BASE_TC1->TC_CMR |= 1<<6;
    890          }//_____________________________________________________________________________
   \   00000050   7047               BX       LR               ;; return
   \   00000052   C046               Nop      
   \                     ??Timer_10us_Setup_0:
   \   00000054   B4F0FFFF           DC32     0xfffff0b4
   \   00000058   ........           DC32     Timer_10us
   \   0000005C   34F0FFFF           DC32     0xfffff034
   \   00000060   10FCFFFF           DC32     0xfffffc10
   \   00000064   C000FAFF           DC32     0xfffa00c0
   \   00000068   C400FAFF           DC32     0xfffa00c4
   \   0000006C   4000FAFF           DC32     0xfffa0040
   \   00000070   4400FAFF           DC32     0xfffa0044
   \   00000074   01C00C00           DC32     0xcc001
   \   00000078   5C00FAFF           DC32     0xfffa005c
   \   0000007C   6400FAFF           DC32     0xfffa0064
   \   00000080   6800FAFF           DC32     0xfffa0068
   \   00000084   20F1FFFF           DC32     0xfffff120
   \   00000088   28F1FFFF           DC32     0xfffff128
    891          
    892          
    893          
    894          

   \                                 In section Debug.txt, align 4, keep-with-next
    895          void TimetableExecute(void)
    896          {
   \                     TimetableExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    897          
    898            
    899            volatile static __Timetable *Timetable=AT91C_IFLASH_MEM->Config.Timetable;
    900            
    901            static  char Out[ScreenNr][TimetableTasks];
    902            char Hour;
    903            for (char sc=0; sc<ScreenNr; sc++)
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   00E0               B        ??TimetableExecute_0
   \                     ??TimetableExecute_1:
   \   00000006   641C               ADDS     R4,R4,#+1
   \                     ??TimetableExecute_0:
   \   00000008   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000000A   240E               LSRS     R4,R4,#+24
   \   0000000C   082C               CMP      R4,#+8
   \   0000000E   00D3               BCC      .+4
   \   00000010   06E2               B        ??TimetableExecute_2
    904            {
    905               for (char tn=0; tn<4; tn++)
   \   00000012   0025               MOVS     R5,#+0
   \   00000014   31E0               B        ??TimetableExecute_3
    906               {
    907                   
    908          
    909                  
    910                   if (Timetable[sc].Task[tn].Enable==1) 
    911                   {    
    912                     
    913                             if (gProg.Screen[sc].Timetable.Min1h)
    914                             {
    915                               if(Timetable[sc].Task[tn].Hour>0) {
    916                                 Hour=Timetable[sc].Task[tn].Hour-1;
    917                               }else{
    918                                 Hour=23;
    919                               }
    920                             }else{
    921                               Hour=Timetable[sc].Task[tn].Hour;
    922                             }
    923                  
    924                     
    925                       if ((Hour==DateTime.Hour)&& (Timetable[sc].Task[tn].Minute==DateTime.Minute) && ((Timetable[sc].Task[tn].Week) & (1<<DateTime.DayOfWeek-1))  && (DateTime.Second==0))
    926                       {
    927                         if (gProg.Screen[sc].Timetable.ActionType==2)
    928                         {
    929                           if (Out[sc][tn])
    930                           {
    931                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    932                             {
    933                                Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
    934                             }else{  //je¿eli wêze³
    935                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);  
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
    936                                MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
    937                             }
    938                             Out[sc][tn]=0;
    939                           }
    940                         }else{
    941                           
    942                           if (Out[sc][tn]==0) {
    943                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    944                             {
    945                                Variables[gProg.Screen[sc].Timetable.ActorPort/8] |= 1<<(gProg.Screen[sc].Timetable.ActorPort%8);
    946                             }else{  //je¿eli wêze³
    947                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 1);  
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
    948                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;}
    949                             }
    950                           Out[sc][tn]=1;
    951                           
    952                         }
    953                       }else{
    954                         if ((gProg.Screen[sc].Timetable.ActionType==0) && (Out[sc][tn]==1)) 
    955                         {
    956                           if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    957                             {
    958                               Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
    959                             }else{  //je¿eli wêze³
    960                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \                     ??TimetableExecute_4:
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   D148               LDR      R0,??TimetableExecute_5  ;; 0xbc25
   \   0000001A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000001C   240E               LSRS     R4,R4,#+24
   \   0000001E   A021               MOVS     R1,#+160
   \   00000020   6143               MULS     R1,R4,R1
   \   00000022   D04B               LDR      R3,??TimetableExecute_5+0x4  ;; gProg
   \   00000024   5918               ADDS     R1,R3,R1
   \   00000026   095C               LDRB     R1,[R1, R0]
   \   00000028   CF4B               LDR      R3,??TimetableExecute_5+0x8  ;; 0x3a2
   \   0000002A   D048               LDR      R0,??TimetableExecute_5+0xC  ;; 0xbc24
   \   0000002C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000002E   240E               LSRS     R4,R4,#+24
   \   00000030   A026               MOVS     R6,#+160
   \   00000032   6643               MULS     R6,R4,R6
   \   00000034   CB4F               LDR      R7,??TimetableExecute_5+0x4  ;; gProg
   \   00000036   BE19               ADDS     R6,R7,R6
   \   00000038   3056               LDRSB    R0,[R6, R0]
   \   0000003A   1626               MOVS     R6,#+22
   \   0000003C   7043               MULS     R0,R6,R0
   \   0000003E   CC4E               LDR      R6,??TimetableExecute_5+0x10  ;; MainStage
   \   00000040   3018               ADDS     R0,R6,R0
   \   00000042   C018               ADDS     R0,R0,R3
   \   00000044   ........           BL       PortStageSet
    961                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
   \   00000048   CA48               LDR      R0,??TimetableExecute_5+0x14  ;; 0x6eb
   \   0000004A   C849               LDR      R1,??TimetableExecute_5+0xC  ;; 0xbc24
   \   0000004C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000004E   240E               LSRS     R4,R4,#+24
   \   00000050   A022               MOVS     R2,#+160
   \   00000052   6243               MULS     R2,R4,R2
   \   00000054   C34B               LDR      R3,??TimetableExecute_5+0x4  ;; gProg
   \   00000056   9A18               ADDS     R2,R3,R2
   \   00000058   5156               LDRSB    R1,[R2, R1]
   \   0000005A   C54A               LDR      R2,??TimetableExecute_5+0x10  ;; MainStage
   \   0000005C   5118               ADDS     R1,R2,R1
   \   0000005E   C64A               LDR      R2,??TimetableExecute_5+0x18  ;; ChangeStageFlag
   \   00000060   1278               LDRB     R2,[R2, #+0]
   \   00000062   0A54               STRB     R2,[R1, R0]
    962                             }
    963                         }
    964                         Out[sc][tn]=0;
   \                     ??TimetableExecute_6:
   \   00000064   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000066   2D0E               LSRS     R5,R5,#+24
   \   00000068   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000006A   240E               LSRS     R4,R4,#+24
   \   0000006C   0420               MOVS     R0,#+4
   \   0000006E   6043               MULS     R0,R4,R0
   \   00000070   C249               LDR      R1,??TimetableExecute_5+0x1C  ;; ??Out
   \   00000072   0818               ADDS     R0,R1,R0
   \   00000074   0021               MOVS     R1,#+0
   \   00000076   4155               STRB     R1,[R0, R5]
   \                     ??TimetableExecute_7:
   \   00000078   6D1C               ADDS     R5,R5,#+1
   \                     ??TimetableExecute_3:
   \   0000007A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000007C   2D0E               LSRS     R5,R5,#+24
   \   0000007E   042D               CMP      R5,#+4
   \   00000080   C1D2               BCS      ??TimetableExecute_1
   \   00000082   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000084   2D0E               LSRS     R5,R5,#+24
   \   00000086   0420               MOVS     R0,#+4
   \   00000088   6843               MULS     R0,R5,R0
   \   0000008A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000008C   240E               LSRS     R4,R4,#+24
   \   0000008E   1121               MOVS     R1,#+17
   \   00000090   6143               MULS     R1,R4,R1
   \   00000092   E54A               LDR      R2,??TimetableExecute_8  ;; ??Timetable
   \   00000094   1268               LDR      R2,[R2, #+0]
   \   00000096   5118               ADDS     R1,R2,R1
   \   00000098   0818               ADDS     R0,R1,R0
   \   0000009A   4078               LDRB     R0,[R0, #+1]
   \   0000009C   0128               CMP      R0,#+1
   \   0000009E   EBD1               BNE      ??TimetableExecute_7
   \   000000A0   E248               LDR      R0,??TimetableExecute_8+0x4  ;; 0xbc27
   \   000000A2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000A4   240E               LSRS     R4,R4,#+24
   \   000000A6   A021               MOVS     R1,#+160
   \   000000A8   6143               MULS     R1,R4,R1
   \   000000AA   AE4A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   000000AC   5118               ADDS     R1,R2,R1
   \   000000AE   085C               LDRB     R0,[R1, R0]
   \   000000B0   0028               CMP      R0,#+0
   \   000000B2   1FD0               BEQ      ??TimetableExecute_9
   \   000000B4   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000B6   2D0E               LSRS     R5,R5,#+24
   \   000000B8   0420               MOVS     R0,#+4
   \   000000BA   6843               MULS     R0,R5,R0
   \   000000BC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000BE   240E               LSRS     R4,R4,#+24
   \   000000C0   1121               MOVS     R1,#+17
   \   000000C2   6143               MULS     R1,R4,R1
   \   000000C4   D84A               LDR      R2,??TimetableExecute_8  ;; ??Timetable
   \   000000C6   1268               LDR      R2,[R2, #+0]
   \   000000C8   5118               ADDS     R1,R2,R1
   \   000000CA   0818               ADDS     R0,R1,R0
   \   000000CC   C078               LDRB     R0,[R0, #+3]
   \   000000CE   0128               CMP      R0,#+1
   \   000000D0   0ED3               BCC      ??TimetableExecute_10
   \   000000D2   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000D4   2D0E               LSRS     R5,R5,#+24
   \   000000D6   0420               MOVS     R0,#+4
   \   000000D8   6843               MULS     R0,R5,R0
   \   000000DA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000DC   240E               LSRS     R4,R4,#+24
   \   000000DE   1121               MOVS     R1,#+17
   \   000000E0   6143               MULS     R1,R4,R1
   \   000000E2   D14A               LDR      R2,??TimetableExecute_8  ;; ??Timetable
   \   000000E4   1268               LDR      R2,[R2, #+0]
   \   000000E6   5118               ADDS     R1,R2,R1
   \   000000E8   0818               ADDS     R0,R1,R0
   \   000000EA   C078               LDRB     R0,[R0, #+3]
   \   000000EC   401E               SUBS     R0,R0,#+1
   \   000000EE   0EE0               B        ??TimetableExecute_11
   \                     ??TimetableExecute_10:
   \   000000F0   1720               MOVS     R0,#+23
   \   000000F2   0CE0               B        ??TimetableExecute_11
   \                     ??TimetableExecute_9:
   \   000000F4   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000F6   2D0E               LSRS     R5,R5,#+24
   \   000000F8   0420               MOVS     R0,#+4
   \   000000FA   6843               MULS     R0,R5,R0
   \   000000FC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000FE   240E               LSRS     R4,R4,#+24
   \   00000100   1121               MOVS     R1,#+17
   \   00000102   6143               MULS     R1,R4,R1
   \   00000104   C84A               LDR      R2,??TimetableExecute_8  ;; ??Timetable
   \   00000106   1268               LDR      R2,[R2, #+0]
   \   00000108   5118               ADDS     R1,R2,R1
   \   0000010A   0818               ADDS     R0,R1,R0
   \   0000010C   C078               LDRB     R0,[R0, #+3]
   \                     ??TimetableExecute_11:
   \   0000010E   C849               LDR      R1,??TimetableExecute_8+0x8  ;; DateTime + 3
   \   00000110   0978               LDRB     R1,[R1, #+0]
   \   00000112   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000114   000E               LSRS     R0,R0,#+24
   \   00000116   8842               CMP      R0,R1
   \   00000118   00D0               BEQ      .+4
   \   0000011A   31E1               B        ??TimetableExecute_12
   \   0000011C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000011E   2D0E               LSRS     R5,R5,#+24
   \   00000120   0420               MOVS     R0,#+4
   \   00000122   6843               MULS     R0,R5,R0
   \   00000124   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000126   240E               LSRS     R4,R4,#+24
   \   00000128   1121               MOVS     R1,#+17
   \   0000012A   6143               MULS     R1,R4,R1
   \   0000012C   BE4A               LDR      R2,??TimetableExecute_8  ;; ??Timetable
   \   0000012E   1268               LDR      R2,[R2, #+0]
   \   00000130   5118               ADDS     R1,R2,R1
   \   00000132   0818               ADDS     R0,R1,R0
   \   00000134   0079               LDRB     R0,[R0, #+4]
   \   00000136   BF49               LDR      R1,??TimetableExecute_8+0xC  ;; DateTime + 4
   \   00000138   0978               LDRB     R1,[R1, #+0]
   \   0000013A   8842               CMP      R0,R1
   \   0000013C   00D0               BEQ      .+4
   \   0000013E   1FE1               B        ??TimetableExecute_12
   \   00000140   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000142   2D0E               LSRS     R5,R5,#+24
   \   00000144   0420               MOVS     R0,#+4
   \   00000146   6843               MULS     R0,R5,R0
   \   00000148   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000014A   240E               LSRS     R4,R4,#+24
   \   0000014C   1121               MOVS     R1,#+17
   \   0000014E   6143               MULS     R1,R4,R1
   \   00000150   B54A               LDR      R2,??TimetableExecute_8  ;; ??Timetable
   \   00000152   1268               LDR      R2,[R2, #+0]
   \   00000154   5118               ADDS     R1,R2,R1
   \   00000156   0818               ADDS     R0,R1,R0
   \   00000158   8078               LDRB     R0,[R0, #+2]
   \   0000015A   0121               MOVS     R1,#+1
   \   0000015C   B64A               LDR      R2,??TimetableExecute_8+0x10  ;; DateTime + 6
   \   0000015E   1278               LDRB     R2,[R2, #+0]
   \   00000160   521E               SUBS     R2,R2,#+1
   \   00000162   9140               LSLS     R1,R1,R2
   \   00000164   0842               TST      R0,R1
   \   00000166   00D1               BNE      .+4
   \   00000168   0AE1               B        ??TimetableExecute_12
   \   0000016A   B448               LDR      R0,??TimetableExecute_8+0x14  ;; DateTime + 5
   \   0000016C   0078               LDRB     R0,[R0, #+0]
   \   0000016E   0028               CMP      R0,#+0
   \   00000170   00D0               BEQ      .+4
   \   00000172   05E1               B        ??TimetableExecute_12
   \   00000174   B248               LDR      R0,??TimetableExecute_8+0x18  ;; 0xbc26
   \   00000176   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000178   240E               LSRS     R4,R4,#+24
   \   0000017A   A021               MOVS     R1,#+160
   \   0000017C   6143               MULS     R1,R4,R1
   \   0000017E   794A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   00000180   5118               ADDS     R1,R2,R1
   \   00000182   085C               LDRB     R0,[R1, R0]
   \   00000184   0228               CMP      R0,#+2
   \   00000186   75D1               BNE      ??TimetableExecute_13
   \   00000188   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000018A   2D0E               LSRS     R5,R5,#+24
   \   0000018C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000018E   240E               LSRS     R4,R4,#+24
   \   00000190   0420               MOVS     R0,#+4
   \   00000192   6043               MULS     R0,R4,R0
   \   00000194   7949               LDR      R1,??TimetableExecute_5+0x1C  ;; ??Out
   \   00000196   0818               ADDS     R0,R1,R0
   \   00000198   405D               LDRB     R0,[R0, R5]
   \   0000019A   0028               CMP      R0,#+0
   \   0000019C   00D1               BNE      .+4
   \   0000019E   6BE7               B        ??TimetableExecute_7
   \   000001A0   7248               LDR      R0,??TimetableExecute_5+0xC  ;; 0xbc24
   \   000001A2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001A4   240E               LSRS     R4,R4,#+24
   \   000001A6   A021               MOVS     R1,#+160
   \   000001A8   6143               MULS     R1,R4,R1
   \   000001AA   6E4A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   000001AC   5118               ADDS     R1,R2,R1
   \   000001AE   0856               LDRSB    R0,[R1, R0]
   \   000001B0   0028               CMP      R0,#+0
   \   000001B2   2DD5               BPL      ??TimetableExecute_14
   \   000001B4   6A48               LDR      R0,??TimetableExecute_5  ;; 0xbc25
   \   000001B6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001B8   240E               LSRS     R4,R4,#+24
   \   000001BA   A021               MOVS     R1,#+160
   \   000001BC   6143               MULS     R1,R4,R1
   \   000001BE   694A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   000001C0   5118               ADDS     R1,R2,R1
   \   000001C2   085C               LDRB     R0,[R1, R0]
   \   000001C4   0821               MOVS     R1,#+8
   \   000001C6   ........           BL       __aeabi_idivmod
   \   000001CA   9E49               LDR      R1,??TimetableExecute_8+0x1C  ;; Variables
   \   000001CC   01B5               PUSH     {R0,LR}
   \   000001CE   0191               STR      R1,[SP, #+4]
   \   000001D0   6348               LDR      R0,??TimetableExecute_5  ;; 0xbc25
   \   000001D2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001D4   240E               LSRS     R4,R4,#+24
   \   000001D6   A021               MOVS     R1,#+160
   \   000001D8   6143               MULS     R1,R4,R1
   \   000001DA   624A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   000001DC   5118               ADDS     R1,R2,R1
   \   000001DE   085C               LDRB     R0,[R1, R0]
   \   000001E0   0821               MOVS     R1,#+8
   \   000001E2   ........           BL       __aeabi_idivmod
   \   000001E6   9749               LDR      R1,??TimetableExecute_8+0x1C  ;; Variables
   \   000001E8   0E5C               LDRB     R6,[R1, R0]
   \   000001EA   0127               MOVS     R7,#+1
   \   000001EC   5C4A               LDR      R2,??TimetableExecute_5  ;; 0xbc25
   \   000001EE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001F0   240E               LSRS     R4,R4,#+24
   \   000001F2   A021               MOVS     R1,#+160
   \   000001F4   6143               MULS     R1,R4,R1
   \   000001F6   5B48               LDR      R0,??TimetableExecute_5+0x4  ;; gProg
   \   000001F8   4018               ADDS     R0,R0,R1
   \   000001FA   805C               LDRB     R0,[R0, R2]
   \   000001FC   0821               MOVS     R1,#+8
   \   000001FE   ........           BL       __aeabi_idivmod
   \   00000202   8F40               LSLS     R7,R7,R1
   \   00000204   BE43               BICS     R6,R6,R7
   \   00000206   0199               LDR      R1,[SP, #+4]
   \   00000208   0098               LDR      R0,[SP, #0]
   \   0000020A   02B0               ADD      SP,SP,#+8
   \   0000020C   0E54               STRB     R6,[R1, R0]
   \   0000020E   26E0               B        ??TimetableExecute_15
   \                     ??TimetableExecute_14:
   \   00000210   0022               MOVS     R2,#+0
   \   00000212   5348               LDR      R0,??TimetableExecute_5  ;; 0xbc25
   \   00000214   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000216   240E               LSRS     R4,R4,#+24
   \   00000218   A021               MOVS     R1,#+160
   \   0000021A   6143               MULS     R1,R4,R1
   \   0000021C   514B               LDR      R3,??TimetableExecute_5+0x4  ;; gProg
   \   0000021E   5918               ADDS     R1,R3,R1
   \   00000220   095C               LDRB     R1,[R1, R0]
   \   00000222   514B               LDR      R3,??TimetableExecute_5+0x8  ;; 0x3a2
   \   00000224   5148               LDR      R0,??TimetableExecute_5+0xC  ;; 0xbc24
   \   00000226   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000228   240E               LSRS     R4,R4,#+24
   \   0000022A   A026               MOVS     R6,#+160
   \   0000022C   6643               MULS     R6,R4,R6
   \   0000022E   4D4F               LDR      R7,??TimetableExecute_5+0x4  ;; gProg
   \   00000230   BE19               ADDS     R6,R7,R6
   \   00000232   3056               LDRSB    R0,[R6, R0]
   \   00000234   1626               MOVS     R6,#+22
   \   00000236   7043               MULS     R0,R6,R0
   \   00000238   4D4E               LDR      R6,??TimetableExecute_5+0x10  ;; MainStage
   \   0000023A   3018               ADDS     R0,R6,R0
   \   0000023C   C018               ADDS     R0,R0,R3
   \   0000023E   ........           BL       PortStageSet
   \   00000242   4C48               LDR      R0,??TimetableExecute_5+0x14  ;; 0x6eb
   \   00000244   4949               LDR      R1,??TimetableExecute_5+0xC  ;; 0xbc24
   \   00000246   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000248   240E               LSRS     R4,R4,#+24
   \   0000024A   A022               MOVS     R2,#+160
   \   0000024C   6243               MULS     R2,R4,R2
   \   0000024E   454B               LDR      R3,??TimetableExecute_5+0x4  ;; gProg
   \   00000250   9A18               ADDS     R2,R3,R2
   \   00000252   5156               LDRSB    R1,[R2, R1]
   \   00000254   464A               LDR      R2,??TimetableExecute_5+0x10  ;; MainStage
   \   00000256   5118               ADDS     R1,R2,R1
   \   00000258   474A               LDR      R2,??TimetableExecute_5+0x18  ;; ChangeStageFlag
   \   0000025A   1278               LDRB     R2,[R2, #+0]
   \   0000025C   0A54               STRB     R2,[R1, R0]
   \                     ??TimetableExecute_15:
   \   0000025E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000260   2D0E               LSRS     R5,R5,#+24
   \   00000262   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000264   240E               LSRS     R4,R4,#+24
   \   00000266   0420               MOVS     R0,#+4
   \   00000268   6043               MULS     R0,R4,R0
   \   0000026A   4449               LDR      R1,??TimetableExecute_5+0x1C  ;; ??Out
   \   0000026C   0818               ADDS     R0,R1,R0
   \   0000026E   0021               MOVS     R1,#+0
   \   00000270   4155               STRB     R1,[R0, R5]
   \   00000272   01E7               B        ??TimetableExecute_7
   \                     ??TimetableExecute_13:
   \   00000274   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000276   2D0E               LSRS     R5,R5,#+24
   \   00000278   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000027A   240E               LSRS     R4,R4,#+24
   \   0000027C   0420               MOVS     R0,#+4
   \   0000027E   6043               MULS     R0,R4,R0
   \   00000280   3E49               LDR      R1,??TimetableExecute_5+0x1C  ;; ??Out
   \   00000282   0818               ADDS     R0,R1,R0
   \   00000284   405D               LDRB     R0,[R0, R5]
   \   00000286   0028               CMP      R0,#+0
   \   00000288   5ED1               BNE      ??TimetableExecute_16
   \   0000028A   3848               LDR      R0,??TimetableExecute_5+0xC  ;; 0xbc24
   \   0000028C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000028E   240E               LSRS     R4,R4,#+24
   \   00000290   A021               MOVS     R1,#+160
   \   00000292   6143               MULS     R1,R4,R1
   \   00000294   334A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   00000296   5118               ADDS     R1,R2,R1
   \   00000298   0856               LDRSB    R0,[R1, R0]
   \   0000029A   0028               CMP      R0,#+0
   \   0000029C   2DD5               BPL      ??TimetableExecute_17
   \   0000029E   3048               LDR      R0,??TimetableExecute_5  ;; 0xbc25
   \   000002A0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002A2   240E               LSRS     R4,R4,#+24
   \   000002A4   A021               MOVS     R1,#+160
   \   000002A6   6143               MULS     R1,R4,R1
   \   000002A8   2E4A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   000002AA   5118               ADDS     R1,R2,R1
   \   000002AC   085C               LDRB     R0,[R1, R0]
   \   000002AE   0821               MOVS     R1,#+8
   \   000002B0   ........           BL       __aeabi_idivmod
   \   000002B4   6349               LDR      R1,??TimetableExecute_8+0x1C  ;; Variables
   \   000002B6   01B5               PUSH     {R0,LR}
   \   000002B8   0191               STR      R1,[SP, #+4]
   \   000002BA   2948               LDR      R0,??TimetableExecute_5  ;; 0xbc25
   \   000002BC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002BE   240E               LSRS     R4,R4,#+24
   \   000002C0   A021               MOVS     R1,#+160
   \   000002C2   6143               MULS     R1,R4,R1
   \   000002C4   274A               LDR      R2,??TimetableExecute_5+0x4  ;; gProg
   \   000002C6   5118               ADDS     R1,R2,R1
   \   000002C8   085C               LDRB     R0,[R1, R0]
   \   000002CA   0821               MOVS     R1,#+8
   \   000002CC   ........           BL       __aeabi_idivmod
   \   000002D0   5C49               LDR      R1,??TimetableExecute_8+0x1C  ;; Variables
   \   000002D2   0E5C               LDRB     R6,[R1, R0]
   \   000002D4   0127               MOVS     R7,#+1
   \   000002D6   224A               LDR      R2,??TimetableExecute_5  ;; 0xbc25
   \   000002D8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002DA   240E               LSRS     R4,R4,#+24
   \   000002DC   A021               MOVS     R1,#+160
   \   000002DE   6143               MULS     R1,R4,R1
   \   000002E0   2048               LDR      R0,??TimetableExecute_5+0x4  ;; gProg
   \   000002E2   4018               ADDS     R0,R0,R1
   \   000002E4   805C               LDRB     R0,[R0, R2]
   \   000002E6   0821               MOVS     R1,#+8
   \   000002E8   ........           BL       __aeabi_idivmod
   \   000002EC   8F40               LSLS     R7,R7,R1
   \   000002EE   3743               ORRS     R7,R7,R6
   \   000002F0   0199               LDR      R1,[SP, #+4]
   \   000002F2   0098               LDR      R0,[SP, #0]
   \   000002F4   02B0               ADD      SP,SP,#+8
   \   000002F6   0F54               STRB     R7,[R1, R0]
   \   000002F8   26E0               B        ??TimetableExecute_16
   \                     ??TimetableExecute_17:
   \   000002FA   0122               MOVS     R2,#+1
   \   000002FC   1848               LDR      R0,??TimetableExecute_5  ;; 0xbc25
   \   000002FE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000300   240E               LSRS     R4,R4,#+24
   \   00000302   A021               MOVS     R1,#+160
   \   00000304   6143               MULS     R1,R4,R1
   \   00000306   174B               LDR      R3,??TimetableExecute_5+0x4  ;; gProg
   \   00000308   5918               ADDS     R1,R3,R1
   \   0000030A   095C               LDRB     R1,[R1, R0]
   \   0000030C   164B               LDR      R3,??TimetableExecute_5+0x8  ;; 0x3a2
   \   0000030E   1748               LDR      R0,??TimetableExecute_5+0xC  ;; 0xbc24
   \   00000310   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000312   240E               LSRS     R4,R4,#+24
   \   00000314   A026               MOVS     R6,#+160
   \   00000316   6643               MULS     R6,R4,R6
   \   00000318   124F               LDR      R7,??TimetableExecute_5+0x4  ;; gProg
   \   0000031A   BE19               ADDS     R6,R7,R6
   \   0000031C   3056               LDRSB    R0,[R6, R0]
   \   0000031E   1626               MOVS     R6,#+22
   \   00000320   7043               MULS     R0,R6,R0
   \   00000322   134E               LDR      R6,??TimetableExecute_5+0x10  ;; MainStage
   \   00000324   3018               ADDS     R0,R6,R0
   \   00000326   C018               ADDS     R0,R0,R3
   \   00000328   ........           BL       PortStageSet
   \   0000032C   1148               LDR      R0,??TimetableExecute_5+0x14  ;; 0x6eb
   \   0000032E   0F49               LDR      R1,??TimetableExecute_5+0xC  ;; 0xbc24
   \   00000330   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000332   240E               LSRS     R4,R4,#+24
   \   00000334   A022               MOVS     R2,#+160
   \   00000336   6243               MULS     R2,R4,R2
   \   00000338   0A4B               LDR      R3,??TimetableExecute_5+0x4  ;; gProg
   \   0000033A   9A18               ADDS     R2,R3,R2
   \   0000033C   5156               LDRSB    R1,[R2, R1]
   \   0000033E   0C4A               LDR      R2,??TimetableExecute_5+0x10  ;; MainStage
   \   00000340   5118               ADDS     R1,R2,R1
   \   00000342   0D4A               LDR      R2,??TimetableExecute_5+0x18  ;; ChangeStageFlag
   \   00000344   1278               LDRB     R2,[R2, #+0]
   \   00000346   0A54               STRB     R2,[R1, R0]
   \                     ??TimetableExecute_16:
   \   00000348   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000034A   2D0E               LSRS     R5,R5,#+24
   \   0000034C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000034E   240E               LSRS     R4,R4,#+24
   \   00000350   0420               MOVS     R0,#+4
   \   00000352   6043               MULS     R0,R4,R0
   \   00000354   0949               LDR      R1,??TimetableExecute_5+0x1C  ;; ??Out
   \   00000356   0818               ADDS     R0,R1,R0
   \   00000358   0121               MOVS     R1,#+1
   \   0000035A   4155               STRB     R1,[R0, R5]
   \   0000035C   8CE6               B        ??TimetableExecute_7
   \   0000035E   C046               Nop      
   \                     ??TimetableExecute_5:
   \   00000360   25BC0000           DC32     0xbc25
   \   00000364   ........           DC32     gProg
   \   00000368   A2030000           DC32     0x3a2
   \   0000036C   24BC0000           DC32     0xbc24
   \   00000370   ........           DC32     MainStage
   \   00000374   EB060000           DC32     0x6eb
   \   00000378   ........           DC32     ChangeStageFlag
   \   0000037C   ........           DC32     ??Out
   \                     ??TimetableExecute_12:
   \   00000380   2F48               LDR      R0,??TimetableExecute_8+0x18  ;; 0xbc26
   \   00000382   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000384   240E               LSRS     R4,R4,#+24
   \   00000386   A021               MOVS     R1,#+160
   \   00000388   6143               MULS     R1,R4,R1
   \   0000038A   2F4A               LDR      R2,??TimetableExecute_8+0x20  ;; gProg
   \   0000038C   5118               ADDS     R1,R2,R1
   \   0000038E   085C               LDRB     R0,[R1, R0]
   \   00000390   0028               CMP      R0,#+0
   \   00000392   00D0               BEQ      .+4
   \   00000394   66E6               B        ??TimetableExecute_6
   \   00000396   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000398   2D0E               LSRS     R5,R5,#+24
   \   0000039A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000039C   240E               LSRS     R4,R4,#+24
   \   0000039E   0420               MOVS     R0,#+4
   \   000003A0   6043               MULS     R0,R4,R0
   \   000003A2   2A49               LDR      R1,??TimetableExecute_8+0x24  ;; ??Out
   \   000003A4   0818               ADDS     R0,R1,R0
   \   000003A6   405D               LDRB     R0,[R0, R5]
   \   000003A8   0128               CMP      R0,#+1
   \   000003AA   00D0               BEQ      .+4
   \   000003AC   5AE6               B        ??TimetableExecute_6
   \   000003AE   2848               LDR      R0,??TimetableExecute_8+0x28  ;; 0xbc24
   \   000003B0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003B2   240E               LSRS     R4,R4,#+24
   \   000003B4   A021               MOVS     R1,#+160
   \   000003B6   6143               MULS     R1,R4,R1
   \   000003B8   234A               LDR      R2,??TimetableExecute_8+0x20  ;; gProg
   \   000003BA   5118               ADDS     R1,R2,R1
   \   000003BC   0856               LDRSB    R0,[R1, R0]
   \   000003BE   0028               CMP      R0,#+0
   \   000003C0   00D4               BMI      .+4
   \   000003C2   28E6               B        ??TimetableExecute_4
   \   000003C4   2348               LDR      R0,??TimetableExecute_8+0x2C  ;; 0xbc25
   \   000003C6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003C8   240E               LSRS     R4,R4,#+24
   \   000003CA   A021               MOVS     R1,#+160
   \   000003CC   6143               MULS     R1,R4,R1
   \   000003CE   1E4A               LDR      R2,??TimetableExecute_8+0x20  ;; gProg
   \   000003D0   5118               ADDS     R1,R2,R1
   \   000003D2   085C               LDRB     R0,[R1, R0]
   \   000003D4   0821               MOVS     R1,#+8
   \   000003D6   ........           BL       __aeabi_idivmod
   \   000003DA   1A49               LDR      R1,??TimetableExecute_8+0x1C  ;; Variables
   \   000003DC   01B5               PUSH     {R0,LR}
   \   000003DE   0191               STR      R1,[SP, #+4]
   \   000003E0   1C48               LDR      R0,??TimetableExecute_8+0x2C  ;; 0xbc25
   \   000003E2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003E4   240E               LSRS     R4,R4,#+24
   \   000003E6   A021               MOVS     R1,#+160
   \   000003E8   6143               MULS     R1,R4,R1
   \   000003EA   174A               LDR      R2,??TimetableExecute_8+0x20  ;; gProg
   \   000003EC   5118               ADDS     R1,R2,R1
   \   000003EE   085C               LDRB     R0,[R1, R0]
   \   000003F0   0821               MOVS     R1,#+8
   \   000003F2   ........           BL       __aeabi_idivmod
   \   000003F6   1349               LDR      R1,??TimetableExecute_8+0x1C  ;; Variables
   \   000003F8   0E5C               LDRB     R6,[R1, R0]
   \   000003FA   0127               MOVS     R7,#+1
   \   000003FC   154A               LDR      R2,??TimetableExecute_8+0x2C  ;; 0xbc25
   \   000003FE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000400   240E               LSRS     R4,R4,#+24
   \   00000402   A021               MOVS     R1,#+160
   \   00000404   6143               MULS     R1,R4,R1
   \   00000406   1048               LDR      R0,??TimetableExecute_8+0x20  ;; gProg
   \   00000408   4018               ADDS     R0,R0,R1
   \   0000040A   805C               LDRB     R0,[R0, R2]
   \   0000040C   0821               MOVS     R1,#+8
   \   0000040E   ........           BL       __aeabi_idivmod
   \   00000412   8F40               LSLS     R7,R7,R1
   \   00000414   BE43               BICS     R6,R6,R7
   \   00000416   0199               LDR      R1,[SP, #+4]
   \   00000418   0098               LDR      R0,[SP, #0]
   \   0000041A   02B0               ADD      SP,SP,#+8
   \   0000041C   0E54               STRB     R6,[R1, R0]
   \   0000041E   21E6               B        ??TimetableExecute_6
    965                         
    966                       }
    967                   
    968                   }
    969                   
    970                   
    971               }
    972               
    973            }
    974          }
   \                     ??TimetableExecute_2:
   \   00000420   01B0               ADD      SP,SP,#+4
   \   00000422   F0BC               POP      {R4-R7}
   \   00000424   01BC               POP      {R0}
   \   00000426   0047               BX       R0               ;; return
   \                     ??TimetableExecute_8:
   \   00000428   ........           DC32     ??Timetable
   \   0000042C   27BC0000           DC32     0xbc27
   \   00000430   ........           DC32     DateTime + 3
   \   00000434   ........           DC32     DateTime + 4
   \   00000438   ........           DC32     DateTime + 6
   \   0000043C   ........           DC32     DateTime + 5
   \   00000440   26BC0000           DC32     0xbc26
   \   00000444   ........           DC32     Variables
   \   00000448   ........           DC32     gProg
   \   0000044C   ........           DC32     ??Out
   \   00000450   24BC0000           DC32     0xbc24
   \   00000454   25BC0000           DC32     0xbc25

   \                                 In section .data, align 4
   \                     ??Timetable:
   \   00000000   30D81300           DC32 13D830H

   \                                 In section .bss, align 4
   \                     ??Out:
   \   00000000                      DS8 32
    975          
    976          
    977          

   \                                 In section Debug.txt, align 4, keep-with-next
    978          void ThermostatsTimeChartExecute(void)
    979          {
   \                     ThermostatsTimeChartExecute:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    980            
    981            signed   short H_Tmp;
    982            signed   short L_Tmp;
    983            signed   short New_Temp;
    984            static  signed short LastTemp[ScreenNr];
    985              
    986            for (signed int sc=0; sc<ScreenNr; )
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   05E0               B        ??ThermostatsTimeChartExecute_0
    987            {
    988              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
    989                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
    990              {
    991                     //je¿eli ustawienie automatyczne temperatury
    992                     if (gProg.Screen[sc].Thermo.AutoOn) 
    993                     {                       
    994                          if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    995                              {
    996                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    997                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[1]; 
    998                              }else{
    999                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[1];
   1000                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
   1001                              }
   1002                          
   1003                         //je¿eli dzieñ wykresu pierwszego
   1004                         if (((gProg.Screen[sc].Thermo.Week>>(DateTime.DayOfWeek-1)) & 0x1)==1)       
   1005                         {
   1006          
   1007                           
   1008                              if (((gProg.Screen[sc].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
   1009                              {                 
   1010                                //ustaw wy¿sz¹ temperaturê
   1011                                  New_Temp=H_Tmp; 
   1012                              }else{
   1013                                //ustaw ni¿sz¹ temperaturê
   1014                                  New_Temp=L_Tmp;
   1015                              }
   1016                         }else{
   1017          
   1018                              if (((gProg.Screen[sc].Thermo.Chart[1]>>DateTime.Hour) & 0x1)==1)
   1019                              {                 
   1020                                //ustaw wy¿sz¹ temperaturê
   1021                                  New_Temp=H_Tmp; 
   1022                              }else{
   1023                                //ustaw ni¿sz¹ temperaturê
   1024                                  New_Temp=L_Tmp;
   1025                              }
   1026                         }
   1027                         if (LastTemp[sc]!=New_Temp)  
   1028                            {
   1029                                gProg.Screen[sc].Thermo.SetTemperature=New_Temp;
   1030                                LastTemp[sc]=gProg.Screen[sc].Thermo.SetTemperature;
   1031                            }
   1032                     }else{
   1033                        LastTemp[sc]=-9999;
   \                     ??ThermostatsTimeChartExecute_1:
   \   00000006   0221               MOVS     R1,#+2
   \   00000008   4143               MULS     R1,R0,R1
   \   0000000A   464A               LDR      R2,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   0000000C   464B               LDR      R3,??ThermostatsTimeChartExecute_2+0x4  ;; 0xffffd8f1
   \   0000000E   5352               STRH     R3,[R2, R1]
   1034                     }
   1035               }
   1036              sc++;
   \                     ??ThermostatsTimeChartExecute_3:
   \   00000010   401C               ADDS     R0,R0,#+1
   \                     ??ThermostatsTimeChartExecute_0:
   \   00000012   0828               CMP      R0,#+8
   \   00000014   00DB               BLT      .+4
   \   00000016   80E0               B        ??ThermostatsTimeChartExecute_4
   \   00000018   0028               CMP      R0,#+0
   \   0000001A   07D1               BNE      ??ThermostatsTimeChartExecute_5
   \   0000001C   4349               LDR      R1,??ThermostatsTimeChartExecute_2+0x8  ;; 0xbb98
   \   0000001E   A022               MOVS     R2,#+160
   \   00000020   4243               MULS     R2,R0,R2
   \   00000022   434B               LDR      R3,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000024   9A18               ADDS     R2,R3,R2
   \   00000026   515C               LDRB     R1,[R2, R1]
   \   00000028   0829               CMP      R1,#+8
   \   0000002A   09D0               BEQ      ??ThermostatsTimeChartExecute_6
   \                     ??ThermostatsTimeChartExecute_5:
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   EFD0               BEQ      ??ThermostatsTimeChartExecute_3
   \   00000030   3E49               LDR      R1,??ThermostatsTimeChartExecute_2+0x8  ;; 0xbb98
   \   00000032   A022               MOVS     R2,#+160
   \   00000034   4243               MULS     R2,R0,R2
   \   00000036   3E4B               LDR      R3,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000038   9A18               ADDS     R2,R3,R2
   \   0000003A   515C               LDRB     R1,[R2, R1]
   \   0000003C   0529               CMP      R1,#+5
   \   0000003E   E7D1               BNE      ??ThermostatsTimeChartExecute_3
   \                     ??ThermostatsTimeChartExecute_6:
   \   00000040   3C49               LDR      R1,??ThermostatsTimeChartExecute_2+0x10  ;; 0xbc26
   \   00000042   A022               MOVS     R2,#+160
   \   00000044   4243               MULS     R2,R0,R2
   \   00000046   3A4B               LDR      R3,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000048   9A18               ADDS     R2,R3,R2
   \   0000004A   515C               LDRB     R1,[R2, R1]
   \   0000004C   0029               CMP      R1,#+0
   \   0000004E   DAD0               BEQ      ??ThermostatsTimeChartExecute_1
   \   00000050   3949               LDR      R1,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc2c
   \   00000052   A022               MOVS     R2,#+160
   \   00000054   4243               MULS     R2,R0,R2
   \   00000056   364B               LDR      R3,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000058   9A18               ADDS     R2,R3,R2
   \   0000005A   515E               LDRSH    R1,[R2, R1]
   \   0000005C   374A               LDR      R2,??ThermostatsTimeChartExecute_2+0x18  ;; 0xbc2a
   \   0000005E   A023               MOVS     R3,#+160
   \   00000060   4343               MULS     R3,R0,R3
   \   00000062   334C               LDR      R4,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000064   E318               ADDS     R3,R4,R3
   \   00000066   9A5E               LDRSH    R2,[R3, R2]
   \   00000068   9142               CMP      R1,R2
   \   0000006A   0CDA               BGE      ??ThermostatsTimeChartExecute_7
   \   0000006C   3349               LDR      R1,??ThermostatsTimeChartExecute_2+0x18  ;; 0xbc2a
   \   0000006E   A022               MOVS     R2,#+160
   \   00000070   4243               MULS     R2,R0,R2
   \   00000072   2F4B               LDR      R3,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000074   9A18               ADDS     R2,R3,R2
   \   00000076   515E               LDRSH    R1,[R2, R1]
   \   00000078   2F4A               LDR      R2,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc2c
   \   0000007A   A023               MOVS     R3,#+160
   \   0000007C   4343               MULS     R3,R0,R3
   \   0000007E   2C4C               LDR      R4,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000080   E318               ADDS     R3,R4,R3
   \   00000082   9A5E               LDRSH    R2,[R3, R2]
   \   00000084   0BE0               B        ??ThermostatsTimeChartExecute_8
   \                     ??ThermostatsTimeChartExecute_7:
   \   00000086   2C49               LDR      R1,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc2c
   \   00000088   A022               MOVS     R2,#+160
   \   0000008A   4243               MULS     R2,R0,R2
   \   0000008C   284B               LDR      R3,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   0000008E   9A18               ADDS     R2,R3,R2
   \   00000090   515E               LDRSH    R1,[R2, R1]
   \   00000092   2A4A               LDR      R2,??ThermostatsTimeChartExecute_2+0x18  ;; 0xbc2a
   \   00000094   A023               MOVS     R3,#+160
   \   00000096   4343               MULS     R3,R0,R3
   \   00000098   254C               LDR      R4,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   0000009A   E318               ADDS     R3,R4,R3
   \   0000009C   9A5E               LDRSH    R2,[R3, R2]
   \                     ??ThermostatsTimeChartExecute_8:
   \   0000009E   284B               LDR      R3,??ThermostatsTimeChartExecute_2+0x1C  ;; 0xbc29
   \   000000A0   A024               MOVS     R4,#+160
   \   000000A2   4443               MULS     R4,R0,R4
   \   000000A4   224D               LDR      R5,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   000000A6   2C19               ADDS     R4,R5,R4
   \   000000A8   E35C               LDRB     R3,[R4, R3]
   \   000000AA   264C               LDR      R4,??ThermostatsTimeChartExecute_2+0x20  ;; DateTime + 6
   \   000000AC   2478               LDRB     R4,[R4, #+0]
   \   000000AE   641E               SUBS     R4,R4,#+1
   \   000000B0   2341               ASRS     R3,R3,R4
   \   000000B2   DB07               LSLS     R3,R3,#+31
   \   000000B4   0CD5               BPL      ??ThermostatsTimeChartExecute_9
   \   000000B6   244B               LDR      R3,??ThermostatsTimeChartExecute_2+0x24  ;; 0xbc30
   \   000000B8   A024               MOVS     R4,#+160
   \   000000BA   4443               MULS     R4,R0,R4
   \   000000BC   1C4D               LDR      R5,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   000000BE   2C19               ADDS     R4,R5,R4
   \   000000C0   E358               LDR      R3,[R4, R3]
   \   000000C2   224C               LDR      R4,??ThermostatsTimeChartExecute_2+0x28  ;; DateTime + 3
   \   000000C4   2478               LDRB     R4,[R4, #+0]
   \   000000C6   E340               LSRS     R3,R3,R4
   \   000000C8   DB07               LSLS     R3,R3,#+31
   \   000000CA   0DD4               BMI      ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_11:
   \   000000CC   1100               MOVS     R1,R2
   \   000000CE   0BE0               B        ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_9:
   \   000000D0   1F4B               LDR      R3,??ThermostatsTimeChartExecute_2+0x2C  ;; 0xbc34
   \   000000D2   A024               MOVS     R4,#+160
   \   000000D4   4443               MULS     R4,R0,R4
   \   000000D6   164D               LDR      R5,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   000000D8   2C19               ADDS     R4,R5,R4
   \   000000DA   E358               LDR      R3,[R4, R3]
   \   000000DC   1B4C               LDR      R4,??ThermostatsTimeChartExecute_2+0x28  ;; DateTime + 3
   \   000000DE   2478               LDRB     R4,[R4, #+0]
   \   000000E0   E340               LSRS     R3,R3,R4
   \   000000E2   DB07               LSLS     R3,R3,#+31
   \   000000E4   00D4               BMI      ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_12:
   \   000000E6   1100               MOVS     R1,R2
   \                     ??ThermostatsTimeChartExecute_10:
   \   000000E8   0222               MOVS     R2,#+2
   \   000000EA   4243               MULS     R2,R0,R2
   \   000000EC   0D4B               LDR      R3,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   000000EE   9A5E               LDRSH    R2,[R3, R2]
   \   000000F0   0904               LSLS     R1,R1,#+16       ;; SignExtS R1,R1,#+16,#+16
   \   000000F2   0914               ASRS     R1,R1,#+16
   \   000000F4   8A42               CMP      R2,R1
   \   000000F6   8BD0               BEQ      ??ThermostatsTimeChartExecute_3
   \   000000F8   164A               LDR      R2,??ThermostatsTimeChartExecute_2+0x30  ;; 0xbc2e
   \   000000FA   A023               MOVS     R3,#+160
   \   000000FC   4343               MULS     R3,R0,R3
   \   000000FE   0C4C               LDR      R4,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000100   E318               ADDS     R3,R4,R3
   \   00000102   9952               STRH     R1,[R3, R2]
   \   00000104   0221               MOVS     R1,#+2
   \   00000106   4143               MULS     R1,R0,R1
   \   00000108   064A               LDR      R2,??ThermostatsTimeChartExecute_2  ;; ??LastTemp
   \   0000010A   124B               LDR      R3,??ThermostatsTimeChartExecute_2+0x30  ;; 0xbc2e
   \   0000010C   A024               MOVS     R4,#+160
   \   0000010E   4443               MULS     R4,R0,R4
   \   00000110   074D               LDR      R5,??ThermostatsTimeChartExecute_2+0xC  ;; gProg
   \   00000112   2C19               ADDS     R4,R5,R4
   \   00000114   E35A               LDRH     R3,[R4, R3]
   \   00000116   5352               STRH     R3,[R2, R1]
   \   00000118   7AE7               B        ??ThermostatsTimeChartExecute_3
   1037            }
   1038          }
   \                     ??ThermostatsTimeChartExecute_4:
   \   0000011A   01B0               ADD      SP,SP,#+4
   \   0000011C   30BC               POP      {R4,R5}
   \   0000011E   01BC               POP      {R0}
   \   00000120   0047               BX       R0               ;; return
   \   00000122   C046               Nop      
   \                     ??ThermostatsTimeChartExecute_2:
   \   00000124   ........           DC32     ??LastTemp
   \   00000128   F1D8FFFF           DC32     0xffffd8f1
   \   0000012C   98BB0000           DC32     0xbb98
   \   00000130   ........           DC32     gProg
   \   00000134   26BC0000           DC32     0xbc26
   \   00000138   2CBC0000           DC32     0xbc2c
   \   0000013C   2ABC0000           DC32     0xbc2a
   \   00000140   29BC0000           DC32     0xbc29
   \   00000144   ........           DC32     DateTime + 6
   \   00000148   30BC0000           DC32     0xbc30
   \   0000014C   ........           DC32     DateTime + 3
   \   00000150   34BC0000           DC32     0xbc34
   \   00000154   2EBC0000           DC32     0xbc2e

   \                                 In section .bss, align 4
   \                     ??LastTemp:
   \   00000000                      DS8 16
   1039          
   1040          
   1041           // int MainScreenTermo=ScreenSetTab_0_Nr;
   1042           // int SubScreenTermo=ScreenSetTab_1_Nr;
   1043            //int MainScreenTimetable=ScreenSetTab_0_Nr+1;
   1044            //int SubScreenTimetable=ScreenSetTab_1_Nr+1;

   \                                 In section Debug.txt, align 4, keep-with-next
   1045          void ThermostatsExecute(void)
   1046          {
   \                     ThermostatsExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1047            short  SensorNodeValue;
   1048           
   1049            static char Hysteresis[ScreenNr];
   1050            
   1051            for (char sc=0; sc<ScreenNr; sc++)
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   27E0               B        ??ThermostatsExecute_0
   1052            {
   1053              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
   1054                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
   1055              {
   1056                     SensorNodeValue=0;
   1057                     if (gProg.Screen[sc].Thermo.SensorNode<0) //je¿eli zmienna
   1058                     {
   1059                       SensorNodeValue=VariablesAnal[gProg.Screen[sc].Thermo.SensorReg];
   1060                     }else{
   1061                       SensorNodeValue=MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg];
   1062                     }
   1063                
   1064                     //zeruje stan wyjœcia je¿eli temperatura wy¿sza od za³o¿onej 
   1065                     if (SensorNodeValue>=gProg.Screen[sc].Thermo.SetTemperature)
   1066                     {
   1067                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   1068                       {
   1069                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] &= ~(1<<(gProg.Screen[sc].Thermo.ActorPort%8));
   1070                       }else{
   1071                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 0);  
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1072                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   1073                       }
   1074                       Hysteresis[sc]=ThermostatHysteresis; //ustawia histerezê
   1075                     }
   1076                     
   1077                     //ustawia na 1 stan wyjœcia je¿eli temperatura ni¿sza od za³o¿onej - histereza
   1078                     if (SensorNodeValue>0)
   1079                     if (SensorNodeValue<=gProg.Screen[sc].Thermo.SetTemperature-Hysteresis[sc])
   1080                     {
   1081                       Hysteresis[sc]=0;
   1082                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   1083                       {
   1084                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] |= 1<<(gProg.Screen[sc].Thermo.ActorPort%8);
   1085                       }else{
   1086                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 1);   
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \                     ??ThermostatsExecute_1:
   \   00000006   0122               MOVS     R2,#+1
   \   00000008   9F48               LDR      R0,??ThermostatsExecute_2  ;; 0xbc25
   \   0000000A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000000C   240E               LSRS     R4,R4,#+24
   \   0000000E   A021               MOVS     R1,#+160
   \   00000010   6143               MULS     R1,R4,R1
   \   00000012   9E4B               LDR      R3,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000014   5918               ADDS     R1,R3,R1
   \   00000016   095C               LDRB     R1,[R1, R0]
   \   00000018   9D48               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0x3a2
   \   0000001A   9E4B               LDR      R3,??ThermostatsExecute_2+0xC  ;; 0xbc24
   \   0000001C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000001E   240E               LSRS     R4,R4,#+24
   \   00000020   A025               MOVS     R5,#+160
   \   00000022   6543               MULS     R5,R4,R5
   \   00000024   994E               LDR      R6,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000026   7519               ADDS     R5,R6,R5
   \   00000028   EB56               LDRSB    R3,[R5, R3]
   \   0000002A   1625               MOVS     R5,#+22
   \   0000002C   6B43               MULS     R3,R5,R3
   \   0000002E   9A4D               LDR      R5,??ThermostatsExecute_2+0x10  ;; MainStage
   \   00000030   EB18               ADDS     R3,R5,R3
   \   00000032   1818               ADDS     R0,R3,R0
   \   00000034   ........           BL       PortStageSet
   1087                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   \   00000038   9848               LDR      R0,??ThermostatsExecute_2+0x14  ;; 0x6eb
   \   0000003A   9649               LDR      R1,??ThermostatsExecute_2+0xC  ;; 0xbc24
   \   0000003C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000003E   240E               LSRS     R4,R4,#+24
   \   00000040   A022               MOVS     R2,#+160
   \   00000042   6243               MULS     R2,R4,R2
   \   00000044   914B               LDR      R3,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000046   9A18               ADDS     R2,R3,R2
   \   00000048   5156               LDRSB    R1,[R2, R1]
   \   0000004A   934A               LDR      R2,??ThermostatsExecute_2+0x10  ;; MainStage
   \   0000004C   5118               ADDS     R1,R2,R1
   \   0000004E   944A               LDR      R2,??ThermostatsExecute_2+0x18  ;; ChangeStageFlag
   \   00000050   1278               LDRB     R2,[R2, #+0]
   \   00000052   0A54               STRB     R2,[R1, R0]
   1088                       }
   \                     ??ThermostatsExecute_3:
   \   00000054   641C               ADDS     R4,R4,#+1
   \                     ??ThermostatsExecute_0:
   \   00000056   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000058   240E               LSRS     R4,R4,#+24
   \   0000005A   082C               CMP      R4,#+8
   \   0000005C   00D3               BCC      .+4
   \   0000005E   0FE1               B        ??ThermostatsExecute_4
   \   00000060   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000062   240E               LSRS     R4,R4,#+24
   \   00000064   002C               CMP      R4,#+0
   \   00000066   09D1               BNE      ??ThermostatsExecute_5
   \   00000068   8E48               LDR      R0,??ThermostatsExecute_2+0x1C  ;; 0xbb98
   \   0000006A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000006C   240E               LSRS     R4,R4,#+24
   \   0000006E   A021               MOVS     R1,#+160
   \   00000070   6143               MULS     R1,R4,R1
   \   00000072   864A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000074   5118               ADDS     R1,R2,R1
   \   00000076   085C               LDRB     R0,[R1, R0]
   \   00000078   0828               CMP      R0,#+8
   \   0000007A   0DD0               BEQ      ??ThermostatsExecute_6
   \                     ??ThermostatsExecute_5:
   \   0000007C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000007E   240E               LSRS     R4,R4,#+24
   \   00000080   002C               CMP      R4,#+0
   \   00000082   E7D0               BEQ      ??ThermostatsExecute_3
   \   00000084   8748               LDR      R0,??ThermostatsExecute_2+0x1C  ;; 0xbb98
   \   00000086   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000088   240E               LSRS     R4,R4,#+24
   \   0000008A   A021               MOVS     R1,#+160
   \   0000008C   6143               MULS     R1,R4,R1
   \   0000008E   7F4A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000090   5118               ADDS     R1,R2,R1
   \   00000092   085C               LDRB     R0,[R1, R0]
   \   00000094   0528               CMP      R0,#+5
   \   00000096   DDD1               BNE      ??ThermostatsExecute_3
   \                     ??ThermostatsExecute_6:
   \   00000098   0025               MOVS     R5,#+0
   \   0000009A   8348               LDR      R0,??ThermostatsExecute_2+0x20  ;; 0xbc27
   \   0000009C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000009E   240E               LSRS     R4,R4,#+24
   \   000000A0   A021               MOVS     R1,#+160
   \   000000A2   6143               MULS     R1,R4,R1
   \   000000A4   794A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   000000A6   5118               ADDS     R1,R2,R1
   \   000000A8   0856               LDRSB    R0,[R1, R0]
   \   000000AA   0028               CMP      R0,#+0
   \   000000AC   0CD5               BPL      ??ThermostatsExecute_7
   \   000000AE   7F48               LDR      R0,??ThermostatsExecute_2+0x24  ;; 0xbc28
   \   000000B0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000B2   240E               LSRS     R4,R4,#+24
   \   000000B4   A021               MOVS     R1,#+160
   \   000000B6   6143               MULS     R1,R4,R1
   \   000000B8   744A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   000000BA   5118               ADDS     R1,R2,R1
   \   000000BC   085C               LDRB     R0,[R1, R0]
   \   000000BE   0221               MOVS     R1,#+2
   \   000000C0   4843               MULS     R0,R1,R0
   \   000000C2   7B49               LDR      R1,??ThermostatsExecute_2+0x28  ;; VariablesAnal
   \   000000C4   0D5E               LDRSH    R5,[R1, R0]
   \   000000C6   18E0               B        ??ThermostatsExecute_8
   \                     ??ThermostatsExecute_7:
   \   000000C8   A020               MOVS     R0,#+160
   \   000000CA   7849               LDR      R1,??ThermostatsExecute_2+0x24  ;; 0xbc28
   \   000000CC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000CE   240E               LSRS     R4,R4,#+24
   \   000000D0   A022               MOVS     R2,#+160
   \   000000D2   6243               MULS     R2,R4,R2
   \   000000D4   6D4B               LDR      R3,??ThermostatsExecute_2+0x4  ;; gProg
   \   000000D6   9A18               ADDS     R2,R3,R2
   \   000000D8   515C               LDRB     R1,[R2, R1]
   \   000000DA   0222               MOVS     R2,#+2
   \   000000DC   5143               MULS     R1,R2,R1
   \   000000DE   724A               LDR      R2,??ThermostatsExecute_2+0x20  ;; 0xbc27
   \   000000E0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000E2   240E               LSRS     R4,R4,#+24
   \   000000E4   A023               MOVS     R3,#+160
   \   000000E6   6343               MULS     R3,R4,R3
   \   000000E8   684D               LDR      R5,??ThermostatsExecute_2+0x4  ;; gProg
   \   000000EA   EB18               ADDS     R3,R5,R3
   \   000000EC   9A56               LDRSB    R2,[R3, R2]
   \   000000EE   1623               MOVS     R3,#+22
   \   000000F0   5A43               MULS     R2,R3,R2
   \   000000F2   694B               LDR      R3,??ThermostatsExecute_2+0x10  ;; MainStage
   \   000000F4   9A18               ADDS     R2,R3,R2
   \   000000F6   5118               ADDS     R1,R2,R1
   \   000000F8   0D5E               LDRSH    R5,[R1, R0]
   \                     ??ThermostatsExecute_8:
   \   000000FA   6E48               LDR      R0,??ThermostatsExecute_2+0x2C  ;; 0xbc2e
   \   000000FC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000FE   240E               LSRS     R4,R4,#+24
   \   00000100   A021               MOVS     R1,#+160
   \   00000102   6143               MULS     R1,R4,R1
   \   00000104   614A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000106   5118               ADDS     R1,R2,R1
   \   00000108   085E               LDRSH    R0,[R1, R0]
   \   0000010A   2D04               LSLS     R5,R5,#+16       ;; SignExtS R5,R5,#+16,#+16
   \   0000010C   2D14               ASRS     R5,R5,#+16
   \   0000010E   8542               CMP      R5,R0
   \   00000110   63DB               BLT      ??ThermostatsExecute_9
   \   00000112   6048               LDR      R0,??ThermostatsExecute_2+0xC  ;; 0xbc24
   \   00000114   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000116   240E               LSRS     R4,R4,#+24
   \   00000118   A021               MOVS     R1,#+160
   \   0000011A   6143               MULS     R1,R4,R1
   \   0000011C   5B4A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   0000011E   5118               ADDS     R1,R2,R1
   \   00000120   0856               LDRSB    R0,[R1, R0]
   \   00000122   0028               CMP      R0,#+0
   \   00000124   2DD5               BPL      ??ThermostatsExecute_10
   \   00000126   5848               LDR      R0,??ThermostatsExecute_2  ;; 0xbc25
   \   00000128   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000012A   240E               LSRS     R4,R4,#+24
   \   0000012C   A021               MOVS     R1,#+160
   \   0000012E   6143               MULS     R1,R4,R1
   \   00000130   564A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000132   5118               ADDS     R1,R2,R1
   \   00000134   085C               LDRB     R0,[R1, R0]
   \   00000136   0821               MOVS     R1,#+8
   \   00000138   ........           BL       __aeabi_idivmod
   \   0000013C   5E49               LDR      R1,??ThermostatsExecute_2+0x30  ;; Variables
   \   0000013E   01B5               PUSH     {R0,LR}
   \   00000140   0191               STR      R1,[SP, #+4]
   \   00000142   5148               LDR      R0,??ThermostatsExecute_2  ;; 0xbc25
   \   00000144   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000146   240E               LSRS     R4,R4,#+24
   \   00000148   A021               MOVS     R1,#+160
   \   0000014A   6143               MULS     R1,R4,R1
   \   0000014C   4F4A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   0000014E   5118               ADDS     R1,R2,R1
   \   00000150   085C               LDRB     R0,[R1, R0]
   \   00000152   0821               MOVS     R1,#+8
   \   00000154   ........           BL       __aeabi_idivmod
   \   00000158   5749               LDR      R1,??ThermostatsExecute_2+0x30  ;; Variables
   \   0000015A   0E5C               LDRB     R6,[R1, R0]
   \   0000015C   0127               MOVS     R7,#+1
   \   0000015E   4A4A               LDR      R2,??ThermostatsExecute_2  ;; 0xbc25
   \   00000160   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000162   240E               LSRS     R4,R4,#+24
   \   00000164   A021               MOVS     R1,#+160
   \   00000166   6143               MULS     R1,R4,R1
   \   00000168   4848               LDR      R0,??ThermostatsExecute_2+0x4  ;; gProg
   \   0000016A   4018               ADDS     R0,R0,R1
   \   0000016C   805C               LDRB     R0,[R0, R2]
   \   0000016E   0821               MOVS     R1,#+8
   \   00000170   ........           BL       __aeabi_idivmod
   \   00000174   8F40               LSLS     R7,R7,R1
   \   00000176   BE43               BICS     R6,R6,R7
   \   00000178   0199               LDR      R1,[SP, #+4]
   \   0000017A   0098               LDR      R0,[SP, #0]
   \   0000017C   02B0               ADD      SP,SP,#+8
   \   0000017E   0E54               STRB     R6,[R1, R0]
   \   00000180   26E0               B        ??ThermostatsExecute_11
   \                     ??ThermostatsExecute_10:
   \   00000182   0022               MOVS     R2,#+0
   \   00000184   4048               LDR      R0,??ThermostatsExecute_2  ;; 0xbc25
   \   00000186   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000188   240E               LSRS     R4,R4,#+24
   \   0000018A   A021               MOVS     R1,#+160
   \   0000018C   6143               MULS     R1,R4,R1
   \   0000018E   3F4B               LDR      R3,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000190   5918               ADDS     R1,R3,R1
   \   00000192   095C               LDRB     R1,[R1, R0]
   \   00000194   3E4B               LDR      R3,??ThermostatsExecute_2+0x8  ;; 0x3a2
   \   00000196   3F48               LDR      R0,??ThermostatsExecute_2+0xC  ;; 0xbc24
   \   00000198   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000019A   240E               LSRS     R4,R4,#+24
   \   0000019C   A026               MOVS     R6,#+160
   \   0000019E   6643               MULS     R6,R4,R6
   \   000001A0   3A4F               LDR      R7,??ThermostatsExecute_2+0x4  ;; gProg
   \   000001A2   BE19               ADDS     R6,R7,R6
   \   000001A4   3056               LDRSB    R0,[R6, R0]
   \   000001A6   1626               MOVS     R6,#+22
   \   000001A8   7043               MULS     R0,R6,R0
   \   000001AA   3B4E               LDR      R6,??ThermostatsExecute_2+0x10  ;; MainStage
   \   000001AC   3018               ADDS     R0,R6,R0
   \   000001AE   C018               ADDS     R0,R0,R3
   \   000001B0   ........           BL       PortStageSet
   \   000001B4   3948               LDR      R0,??ThermostatsExecute_2+0x14  ;; 0x6eb
   \   000001B6   3749               LDR      R1,??ThermostatsExecute_2+0xC  ;; 0xbc24
   \   000001B8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001BA   240E               LSRS     R4,R4,#+24
   \   000001BC   A022               MOVS     R2,#+160
   \   000001BE   6243               MULS     R2,R4,R2
   \   000001C0   324B               LDR      R3,??ThermostatsExecute_2+0x4  ;; gProg
   \   000001C2   9A18               ADDS     R2,R3,R2
   \   000001C4   5156               LDRSB    R1,[R2, R1]
   \   000001C6   344A               LDR      R2,??ThermostatsExecute_2+0x10  ;; MainStage
   \   000001C8   5118               ADDS     R1,R2,R1
   \   000001CA   354A               LDR      R2,??ThermostatsExecute_2+0x18  ;; ChangeStageFlag
   \   000001CC   1278               LDRB     R2,[R2, #+0]
   \   000001CE   0A54               STRB     R2,[R1, R0]
   \                     ??ThermostatsExecute_11:
   \   000001D0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001D2   240E               LSRS     R4,R4,#+24
   \   000001D4   3948               LDR      R0,??ThermostatsExecute_2+0x34  ;; ??Hysteresis
   \   000001D6   0221               MOVS     R1,#+2
   \   000001D8   0155               STRB     R1,[R0, R4]
   \                     ??ThermostatsExecute_9:
   \   000001DA   2D04               LSLS     R5,R5,#+16       ;; SignExtS R5,R5,#+16,#+16
   \   000001DC   2D14               ASRS     R5,R5,#+16
   \   000001DE   012D               CMP      R5,#+1
   \   000001E0   00DA               BGE      .+4
   \   000001E2   37E7               B        ??ThermostatsExecute_3
   \   000001E4   3348               LDR      R0,??ThermostatsExecute_2+0x2C  ;; 0xbc2e
   \   000001E6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001E8   240E               LSRS     R4,R4,#+24
   \   000001EA   A021               MOVS     R1,#+160
   \   000001EC   6143               MULS     R1,R4,R1
   \   000001EE   274A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   000001F0   5118               ADDS     R1,R2,R1
   \   000001F2   085E               LDRSH    R0,[R1, R0]
   \   000001F4   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001F6   240E               LSRS     R4,R4,#+24
   \   000001F8   3049               LDR      R1,??ThermostatsExecute_2+0x34  ;; ??Hysteresis
   \   000001FA   095D               LDRB     R1,[R1, R4]
   \   000001FC   401A               SUBS     R0,R0,R1
   \   000001FE   2D04               LSLS     R5,R5,#+16       ;; SignExtS R5,R5,#+16,#+16
   \   00000200   2D14               ASRS     R5,R5,#+16
   \   00000202   A842               CMP      R0,R5
   \   00000204   00DA               BGE      .+4
   \   00000206   25E7               B        ??ThermostatsExecute_3
   \   00000208   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000020A   240E               LSRS     R4,R4,#+24
   \   0000020C   2B48               LDR      R0,??ThermostatsExecute_2+0x34  ;; ??Hysteresis
   \   0000020E   0021               MOVS     R1,#+0
   \   00000210   0155               STRB     R1,[R0, R4]
   \   00000212   2048               LDR      R0,??ThermostatsExecute_2+0xC  ;; 0xbc24
   \   00000214   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000216   240E               LSRS     R4,R4,#+24
   \   00000218   A021               MOVS     R1,#+160
   \   0000021A   6143               MULS     R1,R4,R1
   \   0000021C   1B4A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   0000021E   5118               ADDS     R1,R2,R1
   \   00000220   0856               LDRSB    R0,[R1, R0]
   \   00000222   0028               CMP      R0,#+0
   \   00000224   00D4               BMI      .+4
   \   00000226   EEE6               B        ??ThermostatsExecute_1
   \   00000228   1748               LDR      R0,??ThermostatsExecute_2  ;; 0xbc25
   \   0000022A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000022C   240E               LSRS     R4,R4,#+24
   \   0000022E   A021               MOVS     R1,#+160
   \   00000230   6143               MULS     R1,R4,R1
   \   00000232   164A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   00000234   5118               ADDS     R1,R2,R1
   \   00000236   085C               LDRB     R0,[R1, R0]
   \   00000238   0821               MOVS     R1,#+8
   \   0000023A   ........           BL       __aeabi_idivmod
   \   0000023E   1E4D               LDR      R5,??ThermostatsExecute_2+0x30  ;; Variables
   \   00000240   01B5               PUSH     {R0,LR}
   \   00000242   1148               LDR      R0,??ThermostatsExecute_2  ;; 0xbc25
   \   00000244   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000246   240E               LSRS     R4,R4,#+24
   \   00000248   A021               MOVS     R1,#+160
   \   0000024A   6143               MULS     R1,R4,R1
   \   0000024C   0F4A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   0000024E   5118               ADDS     R1,R2,R1
   \   00000250   085C               LDRB     R0,[R1, R0]
   \   00000252   0821               MOVS     R1,#+8
   \   00000254   ........           BL       __aeabi_idivmod
   \   00000258   1749               LDR      R1,??ThermostatsExecute_2+0x30  ;; Variables
   \   0000025A   0E5C               LDRB     R6,[R1, R0]
   \   0000025C   0127               MOVS     R7,#+1
   \   0000025E   0A48               LDR      R0,??ThermostatsExecute_2  ;; 0xbc25
   \   00000260   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000262   240E               LSRS     R4,R4,#+24
   \   00000264   A021               MOVS     R1,#+160
   \   00000266   6143               MULS     R1,R4,R1
   \   00000268   084A               LDR      R2,??ThermostatsExecute_2+0x4  ;; gProg
   \   0000026A   5118               ADDS     R1,R2,R1
   \   0000026C   085C               LDRB     R0,[R1, R0]
   \   0000026E   0821               MOVS     R1,#+8
   \   00000270   ........           BL       __aeabi_idivmod
   \   00000274   8F40               LSLS     R7,R7,R1
   \   00000276   3743               ORRS     R7,R7,R6
   \   00000278   0098               LDR      R0,[SP, #0]
   \   0000027A   02B0               ADD      SP,SP,#+8
   \   0000027C   2F54               STRB     R7,[R5, R0]
   \   0000027E   E9E6               B        ??ThermostatsExecute_3
   1089                     }
   1090                     
   1091                     
   1092              }
   1093            }
   1094          }
   \                     ??ThermostatsExecute_4:
   \   00000280   01B0               ADD      SP,SP,#+4
   \   00000282   F0BC               POP      {R4-R7}
   \   00000284   01BC               POP      {R0}
   \   00000286   0047               BX       R0               ;; return
   \                     ??ThermostatsExecute_2:
   \   00000288   25BC0000           DC32     0xbc25
   \   0000028C   ........           DC32     gProg
   \   00000290   A2030000           DC32     0x3a2
   \   00000294   24BC0000           DC32     0xbc24
   \   00000298   ........           DC32     MainStage
   \   0000029C   EB060000           DC32     0x6eb
   \   000002A0   ........           DC32     ChangeStageFlag
   \   000002A4   98BB0000           DC32     0xbb98
   \   000002A8   27BC0000           DC32     0xbc27
   \   000002AC   28BC0000           DC32     0xbc28
   \   000002B0   ........           DC32     VariablesAnal
   \   000002B4   2EBC0000           DC32     0xbc2e
   \   000002B8   ........           DC32     Variables
   \   000002BC   ........           DC32     ??Hysteresis

   \                                 In section .bss, align 4
   \                     ??Hysteresis:
   \   00000000                      DS8 8
   1095          
   1096          
   1097          

   \                                 In section .data, align 4
   1098          char out[10]={1,1,1,1,1,1,1,1,1,1};
   \                     out:
   \   00000000   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
   \              010101010000

   \                                 In section Debug.txt, align 4, keep-with-next
   1099          void AlarmExecute(void)
   1100          {
   \                     AlarmExecute:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1101          
   1102          static long long AlarmOnTime[ScreenNr];  //czas do odliczania dla alarmu
   1103          static long long AlarmOffTime[ScreenNr];
   1104            
   1105            for (char sc=0; sc<ScreenNr; sc++)
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   3FE0               B        ??AlarmExecute_0
   1106            {
   1107              if ((((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenAlarm)) || 
   1108                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenAlarm))))
   1109              {
   1110                if (AlarmScreenAction[sc].Active) 
   1111                {
   1112                           //zeruje stan wyjœcia je¿eli zda¿enie od czujnika             
   1113                      if (PortStageRead(MainStage.StageI[gProg.Screen[sc].Alarm.SensorNode].Port, gProg.Screen[sc].Alarm.SensorPort)==0x1)  
   1114                           {
   1115                             if (AlarmOnTime[sc]==0) {AlarmOnTime[sc]=g_counter;}
   1116                             if ((g_counter>AlarmOnTime[sc]+AlarmTimeToActive*1000) && (out[sc]==0))
   1117                             {
   1118                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 0);
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1119                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1120                                AlarmOn=1; 
   1121                                out[sc]=1;
   1122                                AlarmOffTime[sc]=g_counter;
   1123                             }
   1124                             if ((AlarmOffTime>0) && (g_counter>AlarmOffTime[sc]+AlarmSirenTime*1000) && (out[sc]==1))
   1125                             {
   1126                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1); 
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1127                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1128                                AlarmOn=0; 
   1129                                out[sc]=1;
   1130                                AlarmOffTime[sc]=0;
   1131           
   1132                             }
   1133                             
   1134                            
   1135                             
   1136                           }
   1137                }else{
   1138                  if (out[sc]==1)
   \                     ??AlarmExecute_1:
   \   00000006   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000008   240E               LSRS     R4,R4,#+24
   \   0000000A   A248               LDR      R0,??AlarmExecute_2  ;; out
   \   0000000C   005D               LDRB     R0,[R0, R4]
   \   0000000E   0128               CMP      R0,#+1
   \   00000010   38D1               BNE      ??AlarmExecute_3
   1139                  {
   1140                      out[sc]=0;
   \   00000012   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000014   240E               LSRS     R4,R4,#+24
   \   00000016   9F48               LDR      R0,??AlarmExecute_2  ;; out
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   0155               STRB     R1,[R0, R4]
   1141                      AlarmOnTime[sc]=0;
   \   0000001C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000001E   240E               LSRS     R4,R4,#+24
   \   00000020   0820               MOVS     R0,#+8
   \   00000022   6043               MULS     R0,R4,R0
   \   00000024   9C49               LDR      R1,??AlarmExecute_2+0x4  ;; ??AlarmOnTime
   \   00000026   0A18               ADDS     R2,R1,R0
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   03C2               STM      R2!,{R0,R1}
   \   0000002E   083A               SUBS     R2,R2,#+8
   1142                      AlarmOn=0; 
   \   00000030   9A48               LDR      R0,??AlarmExecute_2+0x8  ;; AlarmOn
   \   00000032   0021               MOVS     R1,#+0
   \   00000034   0170               STRB     R1,[R0, #+0]
   1143                      PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1);
                                          ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000036   0122               MOVS     R2,#+1
   \   00000038   9948               LDR      R0,??AlarmExecute_2+0xC  ;; 0xbc25
   \   0000003A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000003C   240E               LSRS     R4,R4,#+24
   \   0000003E   A021               MOVS     R1,#+160
   \   00000040   6143               MULS     R1,R4,R1
   \   00000042   984B               LDR      R3,??AlarmExecute_2+0x10  ;; gProg
   \   00000044   5918               ADDS     R1,R3,R1
   \   00000046   095C               LDRB     R1,[R1, R0]
   \   00000048   9748               LDR      R0,??AlarmExecute_2+0x14  ;; 0x3a2
   \   0000004A   984B               LDR      R3,??AlarmExecute_2+0x18  ;; 0xbc24
   \   0000004C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000004E   240E               LSRS     R4,R4,#+24
   \   00000050   A025               MOVS     R5,#+160
   \   00000052   6543               MULS     R5,R4,R5
   \   00000054   934E               LDR      R6,??AlarmExecute_2+0x10  ;; gProg
   \   00000056   7519               ADDS     R5,R6,R5
   \   00000058   EB56               LDRSB    R3,[R5, R3]
   \   0000005A   1625               MOVS     R5,#+22
   \   0000005C   6B43               MULS     R3,R5,R3
   \   0000005E   944D               LDR      R5,??AlarmExecute_2+0x1C  ;; MainStage
   \   00000060   EB18               ADDS     R3,R5,R3
   \   00000062   1818               ADDS     R0,R3,R0
   \   00000064   ........           BL       PortStageSet
   1144                      MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   \   00000068   9248               LDR      R0,??AlarmExecute_2+0x20  ;; 0x6eb
   \   0000006A   9049               LDR      R1,??AlarmExecute_2+0x18  ;; 0xbc24
   \   0000006C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000006E   240E               LSRS     R4,R4,#+24
   \   00000070   A022               MOVS     R2,#+160
   \   00000072   6243               MULS     R2,R4,R2
   \   00000074   8B4B               LDR      R3,??AlarmExecute_2+0x10  ;; gProg
   \   00000076   9A18               ADDS     R2,R3,R2
   \   00000078   5156               LDRSB    R1,[R2, R1]
   \   0000007A   8D4A               LDR      R2,??AlarmExecute_2+0x1C  ;; MainStage
   \   0000007C   5118               ADDS     R1,R2,R1
   \   0000007E   8E4A               LDR      R2,??AlarmExecute_2+0x24  ;; ChangeStageFlag
   \   00000080   1278               LDRB     R2,[R2, #+0]
   \   00000082   0A54               STRB     R2,[R1, R0]
   1145                  }
   1146                }
   \                     ??AlarmExecute_3:
   \   00000084   641C               ADDS     R4,R4,#+1
   \                     ??AlarmExecute_0:
   \   00000086   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000088   240E               LSRS     R4,R4,#+24
   \   0000008A   082C               CMP      R4,#+8
   \   0000008C   00D3               BCC      .+4
   \   0000008E   FEE0               B        ??AlarmExecute_4
   \   00000090   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000092   240E               LSRS     R4,R4,#+24
   \   00000094   002C               CMP      R4,#+0
   \   00000096   09D1               BNE      ??AlarmExecute_5
   \   00000098   8848               LDR      R0,??AlarmExecute_2+0x28  ;; 0xbb98
   \   0000009A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000009C   240E               LSRS     R4,R4,#+24
   \   0000009E   A021               MOVS     R1,#+160
   \   000000A0   6143               MULS     R1,R4,R1
   \   000000A2   804A               LDR      R2,??AlarmExecute_2+0x10  ;; gProg
   \   000000A4   5118               ADDS     R1,R2,R1
   \   000000A6   085C               LDRB     R0,[R1, R0]
   \   000000A8   0A28               CMP      R0,#+10
   \   000000AA   0DD0               BEQ      ??AlarmExecute_6
   \                     ??AlarmExecute_5:
   \   000000AC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000AE   240E               LSRS     R4,R4,#+24
   \   000000B0   002C               CMP      R4,#+0
   \   000000B2   E7D0               BEQ      ??AlarmExecute_3
   \   000000B4   8148               LDR      R0,??AlarmExecute_2+0x28  ;; 0xbb98
   \   000000B6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000B8   240E               LSRS     R4,R4,#+24
   \   000000BA   A021               MOVS     R1,#+160
   \   000000BC   6143               MULS     R1,R4,R1
   \   000000BE   794A               LDR      R2,??AlarmExecute_2+0x10  ;; gProg
   \   000000C0   5118               ADDS     R1,R2,R1
   \   000000C2   085C               LDRB     R0,[R1, R0]
   \   000000C4   0728               CMP      R0,#+7
   \   000000C6   DDD1               BNE      ??AlarmExecute_3
   \                     ??AlarmExecute_6:
   \   000000C8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000CA   240E               LSRS     R4,R4,#+24
   \   000000CC   0220               MOVS     R0,#+2
   \   000000CE   6043               MULS     R0,R4,R0
   \   000000D0   7B49               LDR      R1,??AlarmExecute_2+0x2C  ;; AlarmScreenAction
   \   000000D2   085C               LDRB     R0,[R1, R0]
   \   000000D4   0028               CMP      R0,#+0
   \   000000D6   96D0               BEQ      ??AlarmExecute_1
   \   000000D8   7A48               LDR      R0,??AlarmExecute_2+0x30  ;; 0xbc27
   \   000000DA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000DC   240E               LSRS     R4,R4,#+24
   \   000000DE   A021               MOVS     R1,#+160
   \   000000E0   6143               MULS     R1,R4,R1
   \   000000E2   704A               LDR      R2,??AlarmExecute_2+0x10  ;; gProg
   \   000000E4   5118               ADDS     R1,R2,R1
   \   000000E6   095C               LDRB     R1,[R1, R0]
   \   000000E8   7748               LDR      R0,??AlarmExecute_2+0x34  ;; 0xbc26
   \   000000EA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000EC   240E               LSRS     R4,R4,#+24
   \   000000EE   A022               MOVS     R2,#+160
   \   000000F0   6243               MULS     R2,R4,R2
   \   000000F2   6C4B               LDR      R3,??AlarmExecute_2+0x10  ;; gProg
   \   000000F4   9A18               ADDS     R2,R3,R2
   \   000000F6   1056               LDRSB    R0,[R2, R0]
   \   000000F8   1622               MOVS     R2,#+22
   \   000000FA   5043               MULS     R0,R2,R0
   \   000000FC   6C4A               LDR      R2,??AlarmExecute_2+0x1C  ;; MainStage
   \   000000FE   1018               ADDS     R0,R2,R0
   \   00000100   A030               ADDS     R0,R0,#+160
   \   00000102   0088               LDRH     R0,[R0, #+0]
   \   00000104   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000106   0014               ASRS     R0,R0,#+16
   \   00000108   ........           BL       PortStageRead
   \   0000010C   0128               CMP      R0,#+1
   \   0000010E   B9D1               BNE      ??AlarmExecute_3
   \   00000110   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000112   240E               LSRS     R4,R4,#+24
   \   00000114   0820               MOVS     R0,#+8
   \   00000116   6043               MULS     R0,R4,R0
   \   00000118   5F49               LDR      R1,??AlarmExecute_2+0x4  ;; ??AlarmOnTime
   \   0000011A   0818               ADDS     R0,R1,R0
   \   0000011C   03C8               LDM      R0!,{R0,R1}
   \   0000011E   0029               CMP      R1,#+0
   \   00000120   0BD1               BNE      ??AlarmExecute_7
   \   00000122   0028               CMP      R0,#+0
   \   00000124   09D1               BNE      ??AlarmExecute_7
   \   00000126   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000128   240E               LSRS     R4,R4,#+24
   \   0000012A   0820               MOVS     R0,#+8
   \   0000012C   6043               MULS     R0,R4,R0
   \   0000012E   5A49               LDR      R1,??AlarmExecute_2+0x4  ;; ??AlarmOnTime
   \   00000130   0A18               ADDS     R2,R1,R0
   \   00000132   6648               LDR      R0,??AlarmExecute_2+0x38  ;; g_counter
   \   00000134   03C8               LDM      R0!,{R0,R1}
   \   00000136   03C2               STM      R2!,{R0,R1}
   \   00000138   083A               SUBS     R2,R2,#+8
   \                     ??AlarmExecute_7:
   \   0000013A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000013C   240E               LSRS     R4,R4,#+24
   \   0000013E   0820               MOVS     R0,#+8
   \   00000140   6043               MULS     R0,R4,R0
   \   00000142   5549               LDR      R1,??AlarmExecute_2+0x4  ;; ??AlarmOnTime
   \   00000144   0818               ADDS     R0,R1,R0
   \   00000146   03C8               LDM      R0!,{R0,R1}
   \   00000148   614A               LDR      R2,??AlarmExecute_2+0x3C  ;; 0xea60
   \   0000014A   0023               MOVS     R3,#+0
   \   0000014C   1218               ADDS     R2,R2,R0
   \   0000014E   4B41               ADCS     R3,R3,R1
   \   00000150   5E48               LDR      R0,??AlarmExecute_2+0x38  ;; g_counter
   \   00000152   03C8               LDM      R0!,{R0,R1}
   \   00000154   8B42               CMP      R3,R1
   \   00000156   41D8               BHI      ??AlarmExecute_8
   \   00000158   01D3               BCC      ??AlarmExecute_9
   \   0000015A   8242               CMP      R2,R0
   \   0000015C   3ED2               BCS      ??AlarmExecute_8
   \                     ??AlarmExecute_9:
   \   0000015E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000160   240E               LSRS     R4,R4,#+24
   \   00000162   4C48               LDR      R0,??AlarmExecute_2  ;; out
   \   00000164   005D               LDRB     R0,[R0, R4]
   \   00000166   0028               CMP      R0,#+0
   \   00000168   38D1               BNE      ??AlarmExecute_8
   \   0000016A   0022               MOVS     R2,#+0
   \   0000016C   4C48               LDR      R0,??AlarmExecute_2+0xC  ;; 0xbc25
   \   0000016E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000170   240E               LSRS     R4,R4,#+24
   \   00000172   A021               MOVS     R1,#+160
   \   00000174   6143               MULS     R1,R4,R1
   \   00000176   4B4B               LDR      R3,??AlarmExecute_2+0x10  ;; gProg
   \   00000178   5918               ADDS     R1,R3,R1
   \   0000017A   095C               LDRB     R1,[R1, R0]
   \   0000017C   4A48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x3a2
   \   0000017E   4B4B               LDR      R3,??AlarmExecute_2+0x18  ;; 0xbc24
   \   00000180   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000182   240E               LSRS     R4,R4,#+24
   \   00000184   A025               MOVS     R5,#+160
   \   00000186   6543               MULS     R5,R4,R5
   \   00000188   464E               LDR      R6,??AlarmExecute_2+0x10  ;; gProg
   \   0000018A   7519               ADDS     R5,R6,R5
   \   0000018C   EB56               LDRSB    R3,[R5, R3]
   \   0000018E   1625               MOVS     R5,#+22
   \   00000190   6B43               MULS     R3,R5,R3
   \   00000192   474D               LDR      R5,??AlarmExecute_2+0x1C  ;; MainStage
   \   00000194   EB18               ADDS     R3,R5,R3
   \   00000196   1818               ADDS     R0,R3,R0
   \   00000198   ........           BL       PortStageSet
   \   0000019C   4548               LDR      R0,??AlarmExecute_2+0x20  ;; 0x6eb
   \   0000019E   4349               LDR      R1,??AlarmExecute_2+0x18  ;; 0xbc24
   \   000001A0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001A2   240E               LSRS     R4,R4,#+24
   \   000001A4   A022               MOVS     R2,#+160
   \   000001A6   6243               MULS     R2,R4,R2
   \   000001A8   3E4B               LDR      R3,??AlarmExecute_2+0x10  ;; gProg
   \   000001AA   9A18               ADDS     R2,R3,R2
   \   000001AC   5156               LDRSB    R1,[R2, R1]
   \   000001AE   404A               LDR      R2,??AlarmExecute_2+0x1C  ;; MainStage
   \   000001B0   5118               ADDS     R1,R2,R1
   \   000001B2   414A               LDR      R2,??AlarmExecute_2+0x24  ;; ChangeStageFlag
   \   000001B4   1278               LDRB     R2,[R2, #+0]
   \   000001B6   0A54               STRB     R2,[R1, R0]
   \   000001B8   3848               LDR      R0,??AlarmExecute_2+0x8  ;; AlarmOn
   \   000001BA   0121               MOVS     R1,#+1
   \   000001BC   0170               STRB     R1,[R0, #+0]
   \   000001BE   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001C0   240E               LSRS     R4,R4,#+24
   \   000001C2   3448               LDR      R0,??AlarmExecute_2  ;; out
   \   000001C4   0121               MOVS     R1,#+1
   \   000001C6   0155               STRB     R1,[R0, R4]
   \   000001C8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001CA   240E               LSRS     R4,R4,#+24
   \   000001CC   0820               MOVS     R0,#+8
   \   000001CE   6043               MULS     R0,R4,R0
   \   000001D0   4049               LDR      R1,??AlarmExecute_2+0x40  ;; ??AlarmOffTime
   \   000001D2   0A18               ADDS     R2,R1,R0
   \   000001D4   3D48               LDR      R0,??AlarmExecute_2+0x38  ;; g_counter
   \   000001D6   03C8               LDM      R0!,{R0,R1}
   \   000001D8   03C2               STM      R2!,{R0,R1}
   \   000001DA   083A               SUBS     R2,R2,#+8
   \                     ??AlarmExecute_8:
   \   000001DC   3D48               LDR      R0,??AlarmExecute_2+0x40  ;; ??AlarmOffTime
   \   000001DE   0028               CMP      R0,#+0
   \   000001E0   00D1               BNE      .+4
   \   000001E2   4FE7               B        ??AlarmExecute_3
   \   000001E4   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000001E6   240E               LSRS     R4,R4,#+24
   \   000001E8   0820               MOVS     R0,#+8
   \   000001EA   6043               MULS     R0,R4,R0
   \   000001EC   3949               LDR      R1,??AlarmExecute_2+0x40  ;; ??AlarmOffTime
   \   000001EE   0818               ADDS     R0,R1,R0
   \   000001F0   03C8               LDM      R0!,{R0,R1}
   \   000001F2   394A               LDR      R2,??AlarmExecute_2+0x44  ;; 0x493e0
   \   000001F4   0023               MOVS     R3,#+0
   \   000001F6   1218               ADDS     R2,R2,R0
   \   000001F8   4B41               ADCS     R3,R3,R1
   \   000001FA   3448               LDR      R0,??AlarmExecute_2+0x38  ;; g_counter
   \   000001FC   03C8               LDM      R0!,{R0,R1}
   \   000001FE   8B42               CMP      R3,R1
   \   00000200   00D9               BLS      .+4
   \   00000202   3FE7               B        ??AlarmExecute_3
   \   00000204   02D3               BCC      ??AlarmExecute_10
   \   00000206   8242               CMP      R2,R0
   \   00000208   00D3               BCC      .+4
   \   0000020A   3BE7               B        ??AlarmExecute_3
   \                     ??AlarmExecute_10:
   \   0000020C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000020E   240E               LSRS     R4,R4,#+24
   \   00000210   2048               LDR      R0,??AlarmExecute_2  ;; out
   \   00000212   005D               LDRB     R0,[R0, R4]
   \   00000214   0128               CMP      R0,#+1
   \   00000216   00D0               BEQ      .+4
   \   00000218   34E7               B        ??AlarmExecute_3
   \   0000021A   0122               MOVS     R2,#+1
   \   0000021C   2048               LDR      R0,??AlarmExecute_2+0xC  ;; 0xbc25
   \   0000021E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000220   240E               LSRS     R4,R4,#+24
   \   00000222   A021               MOVS     R1,#+160
   \   00000224   6143               MULS     R1,R4,R1
   \   00000226   1F4B               LDR      R3,??AlarmExecute_2+0x10  ;; gProg
   \   00000228   5918               ADDS     R1,R3,R1
   \   0000022A   095C               LDRB     R1,[R1, R0]
   \   0000022C   1E48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x3a2
   \   0000022E   1F4B               LDR      R3,??AlarmExecute_2+0x18  ;; 0xbc24
   \   00000230   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000232   240E               LSRS     R4,R4,#+24
   \   00000234   A025               MOVS     R5,#+160
   \   00000236   6543               MULS     R5,R4,R5
   \   00000238   1A4E               LDR      R6,??AlarmExecute_2+0x10  ;; gProg
   \   0000023A   7519               ADDS     R5,R6,R5
   \   0000023C   EB56               LDRSB    R3,[R5, R3]
   \   0000023E   1625               MOVS     R5,#+22
   \   00000240   6B43               MULS     R3,R5,R3
   \   00000242   1B4D               LDR      R5,??AlarmExecute_2+0x1C  ;; MainStage
   \   00000244   EB18               ADDS     R3,R5,R3
   \   00000246   1818               ADDS     R0,R3,R0
   \   00000248   ........           BL       PortStageSet
   \   0000024C   1948               LDR      R0,??AlarmExecute_2+0x20  ;; 0x6eb
   \   0000024E   1749               LDR      R1,??AlarmExecute_2+0x18  ;; 0xbc24
   \   00000250   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000252   240E               LSRS     R4,R4,#+24
   \   00000254   A022               MOVS     R2,#+160
   \   00000256   6243               MULS     R2,R4,R2
   \   00000258   124B               LDR      R3,??AlarmExecute_2+0x10  ;; gProg
   \   0000025A   9A18               ADDS     R2,R3,R2
   \   0000025C   5156               LDRSB    R1,[R2, R1]
   \   0000025E   144A               LDR      R2,??AlarmExecute_2+0x1C  ;; MainStage
   \   00000260   5118               ADDS     R1,R2,R1
   \   00000262   154A               LDR      R2,??AlarmExecute_2+0x24  ;; ChangeStageFlag
   \   00000264   1278               LDRB     R2,[R2, #+0]
   \   00000266   0A54               STRB     R2,[R1, R0]
   \   00000268   0C48               LDR      R0,??AlarmExecute_2+0x8  ;; AlarmOn
   \   0000026A   0021               MOVS     R1,#+0
   \   0000026C   0170               STRB     R1,[R0, #+0]
   \   0000026E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000270   240E               LSRS     R4,R4,#+24
   \   00000272   0848               LDR      R0,??AlarmExecute_2  ;; out
   \   00000274   0121               MOVS     R1,#+1
   \   00000276   0155               STRB     R1,[R0, R4]
   \   00000278   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000027A   240E               LSRS     R4,R4,#+24
   \   0000027C   0820               MOVS     R0,#+8
   \   0000027E   6043               MULS     R0,R4,R0
   \   00000280   1449               LDR      R1,??AlarmExecute_2+0x40  ;; ??AlarmOffTime
   \   00000282   0A18               ADDS     R2,R1,R0
   \   00000284   0020               MOVS     R0,#+0
   \   00000286   0021               MOVS     R1,#+0
   \   00000288   03C2               STM      R2!,{R0,R1}
   \   0000028A   083A               SUBS     R2,R2,#+8
   \   0000028C   FAE6               B        ??AlarmExecute_3
   1147                     
   1148              }
   1149            }
   1150          }
   \                     ??AlarmExecute_4:
   \   0000028E   70BC               POP      {R4-R6}
   \   00000290   01BC               POP      {R0}
   \   00000292   0047               BX       R0               ;; return
   \                     ??AlarmExecute_2:
   \   00000294   ........           DC32     out
   \   00000298   ........           DC32     ??AlarmOnTime
   \   0000029C   ........           DC32     AlarmOn
   \   000002A0   25BC0000           DC32     0xbc25
   \   000002A4   ........           DC32     gProg
   \   000002A8   A2030000           DC32     0x3a2
   \   000002AC   24BC0000           DC32     0xbc24
   \   000002B0   ........           DC32     MainStage
   \   000002B4   EB060000           DC32     0x6eb
   \   000002B8   ........           DC32     ChangeStageFlag
   \   000002BC   98BB0000           DC32     0xbb98
   \   000002C0   ........           DC32     AlarmScreenAction
   \   000002C4   27BC0000           DC32     0xbc27
   \   000002C8   26BC0000           DC32     0xbc26
   \   000002CC   ........           DC32     g_counter
   \   000002D0   60EA0000           DC32     0xea60
   \   000002D4   ........           DC32     ??AlarmOffTime
   \   000002D8   E0930400           DC32     0x493e0

   \                                 In section .bss, align 8
   \                     ??AlarmOnTime:
   \   00000000                      DS8 64

   \                                 In section .bss, align 8
   \                     ??AlarmOffTime:
   \   00000000                      DS8 64
   1151          
   1152          
   1153          
   1154          
   1155          
   1156          
   1157          
   1158          //-----------------------------------------------------------------------------
   1159          //! Nazwa funkcji :    Timer_1h  
   1160          //! Okres: 1 godzina
   1161          //-----------------------------------------------------------------------------
   1162          //  
   1163          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1164          void Timer_1h(void)                  
   1165          { 
   \                     Timer_1h:
   \   00000000   01B5               PUSH     {R0,LR}
   1166              ThermostatsTimeChartExecute();
   \   00000002   ........           BL       ThermostatsTimeChartExecute
   1167          }//_____________________________________________________________________________
   \   00000006   01B0               ADD      SP,SP,#+4
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
   1168          
   1169          
   1170          
   1171          //-----------------------------------------------------------------------------
   1172          //! Nazwa funkcji :    Timer_1min  
   1173          //! Okres: 1min
   1174          //-----------------------------------------------------------------------------
   1175          //  
   1176          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1177          void Timer_1min(void)                  
   1178          { 
   \                     Timer_1min:
   \   00000000   01B5               PUSH     {R0,LR}
   1179             TimetableExecute();
   \   00000002   ........           BL       TimetableExecute
   1180             ThermostatsExecute();
   \   00000006   ........           BL       ThermostatsExecute
   1181             
   1182          }//_____________________________________________________________________________
   \   0000000A   01B0               ADD      SP,SP,#+4
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
   1183          
   1184          
   1185          
   1186          
   1187          
   1188          
   1189          //-----------------------------------------------------------------------------
   1190          //! Nazwa funkcji :    Timer_1s  
   1191          //! Okres: 1s
   1192          //! Funkcja obs³ugi przerwania USART 0
   1193          //-----------------------------------------------------------------------------
   1194          //  
   1195          //----------------------------------------------------------------------------- 

   \                                 In section .bss, align 4
   1196          int XY_Tab[11];
   \                     XY_Tab:
   \   00000000                      DS8 44

   \                                 In section .bss, align 4
   1197          int LiczOds = 0;
   \                     LiczOds:
   \   00000000                      DS8 4
   1198          #define x_offset 1
   1199          #define y_offset 6

   \                                 In section .bss, align 1
   1200          char display_cykl =0;
   \                     display_cykl:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
   1201          int X_up_old =-1;
   \                     X_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   1202          int Y_up_old =-1;
   \                     Y_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   1203          int X_down_old =-1;
   \                     X_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   1204          int Y_down_old =-1;
   \                     Y_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 1
   1205          char g_PC_Connected_timeout=5;
   \                     g_PC_Connected_timeout:
   \   00000000   05                 DC8 5
   1206          
   1207          

   \                                 In section .bss, align 4
   1208          unsigned int CyklPerSekCount=0; 
   \                     CyklPerSekCount:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1209          unsigned int TransLoopTime=0;
   \                     TransLoopTime:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
   1210          unsigned int CyklPerSek=1;
   \                     CyklPerSek:
   \   00000000   01000000           DC32 1

   \                                 In section .bss, align 4
   1211          int MenuLevel_old; //tmp
   \                     MenuLevel_old:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
   1212           char FlagChangeTime=0;
   \                     FlagChangeTime:
   \   00000000                      DS8 1
   1213          
   1214          
   1215          

   \                                 In section Debug.txt, align 4, keep-with-next
   1216          void Timer_1s(void)                        //timer isr 
   1217          { 
   \                     Timer_1s:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   87B0               SUB      SP,SP,#+28
   1218           static char TryIndirect, TryIndirectSlow;   //zmienna s³u¿y do usuwania trybu indirect w przypadku braku nawi¹zania po³¹czenia w okreœlonym czasie
   1219             
   1220            
   1221            if ((AlarmOn) || (Speaker[1]==1)) 
   \   00000004   C348               LDR      R0,??Timer_1s_0  ;; AlarmOn
   \   00000006   0078               LDRB     R0,[R0, #+0]
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   03D1               BNE      ??Timer_1s_1
   \   0000000C   C248               LDR      R0,??Timer_1s_0+0x4  ;; Speaker + 1
   \   0000000E   0078               LDRB     R0,[R0, #+0]
   \   00000010   0128               CMP      R0,#+1
   \   00000012   0ED1               BNE      ??Timer_1s_2
   1222            {
   1223                ButtonBipCounter=g_counter+500;
   \                     ??Timer_1s_1:
   \   00000014   C14C               LDR      R4,??Timer_1s_0+0x8  ;; ButtonBipCounter
   \   00000016   C248               LDR      R0,??Timer_1s_0+0xC  ;; g_counter
   \   00000018   0CC8               LDM      R0!,{R2,R3}
   \   0000001A   0838               SUBS     R0,R0,#+8
   \   0000001C   FA20               MOVS     R0,#+250
   \   0000001E   4000               LSLS     R0,R0,#+1        ;; #+500
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   8018               ADDS     R0,R0,R2
   \   00000024   5941               ADCS     R1,R1,R3
   \   00000026   03C4               STM      R4!,{R0,R1}
   \   00000028   083C               SUBS     R4,R4,#+8
   1224                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000002A   BE48               LDR      R0,??Timer_1s_0+0x10  ;; 0xfffff430
   \   0000002C   8021               MOVS     R1,#+128
   \   0000002E   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000030   0160               STR      R1,[R0, #+0]
   1225            }
   1226          
   1227             g_seconds_counter++;
   \                     ??Timer_1s_2:
   \   00000032   BD48               LDR      R0,??Timer_1s_0+0x14  ;; g_seconds_counter
   \   00000034   BC49               LDR      R1,??Timer_1s_0+0x14  ;; g_seconds_counter
   \   00000036   0968               LDR      R1,[R1, #+0]
   \   00000038   491C               ADDS     R1,R1,#+1
   \   0000003A   0160               STR      R1,[R0, #+0]
   1228          
   1229            
   1230            if (CyklPerSekCount>0)
   \   0000003C   BB48               LDR      R0,??Timer_1s_0+0x18  ;; CyklPerSekCount
   \   0000003E   0068               LDR      R0,[R0, #+0]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   0CD0               BEQ      ??Timer_1s_3
   1231            {
   1232             TransLoopTime=(1000/CyklPerSekCount);     //czas obiegu programu w ms
   \   00000044   FA20               MOVS     R0,#+250
   \   00000046   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   00000048   B849               LDR      R1,??Timer_1s_0+0x18  ;; CyklPerSekCount
   \   0000004A   0968               LDR      R1,[R1, #+0]
   \   0000004C   ........           BL       __aeabi_uidivmod
   \   00000050   B749               LDR      R1,??Timer_1s_0+0x1C  ;; TransLoopTime
   \   00000052   0860               STR      R0,[R1, #+0]
   1233             CyklPerSek=CyklPerSekCount;               //iloœæ cykli na sekunde
   \   00000054   B748               LDR      R0,??Timer_1s_0+0x20  ;; CyklPerSek
   \   00000056   B549               LDR      R1,??Timer_1s_0+0x18  ;; CyklPerSekCount
   \   00000058   0968               LDR      R1,[R1, #+0]
   \   0000005A   0160               STR      R1,[R0, #+0]
   \   0000005C   02E0               B        ??Timer_1s_4
   1234            }else{
   1235             TransLoopTime=0;
   \                     ??Timer_1s_3:
   \   0000005E   B448               LDR      R0,??Timer_1s_0+0x1C  ;; TransLoopTime
   \   00000060   0021               MOVS     R1,#+0
   \   00000062   0160               STR      R1,[R0, #+0]
   1236            }
   1237            CyklPerSekCount=0;
   \                     ??Timer_1s_4:
   \   00000064   B148               LDR      R0,??Timer_1s_0+0x18  ;; CyklPerSekCount
   \   00000066   0021               MOVS     R1,#+0
   \   00000068   0160               STR      R1,[R0, #+0]
   1238          
   1239               
   1240            
   1241            int ChangeStageFlagTMP=CHANGE_STAGE_TIME*CyklPerSek;
   \   0000006A   B248               LDR      R0,??Timer_1s_0+0x20  ;; CyklPerSek
   \   0000006C   0068               LDR      R0,[R0, #+0]
   \   0000006E   0221               MOVS     R1,#+2
   \   00000070   4843               MULS     R0,R1,R0
   1242            if (ChangeStageFlagTMP>0xFF) ChangeStageFlagTMP=0xFF;
   \   00000072   FF28               CMP      R0,#+255
   \   00000074   00DD               BLE      ??Timer_1s_5
   \   00000076   FF20               MOVS     R0,#+255
   1243            if (ChangeStageFlagTMP<10) ChangeStageFlagTMP=10;
   \                     ??Timer_1s_5:
   \   00000078   0A28               CMP      R0,#+10
   \   0000007A   00DA               BGE      ??Timer_1s_6
   \   0000007C   0A20               MOVS     R0,#+10
   1244             ChangeStageFlag=ChangeStageFlagTMP;
   \                     ??Timer_1s_6:
   \   0000007E   AE49               LDR      R1,??Timer_1s_0+0x24  ;; ChangeStageFlag
   \   00000080   0870               STRB     R0,[R1, #+0]
   1245            
   1246             //Wy³¹czanie podœwietlenia wyœwietlacza
   1247            
   1248            if (g_LightCouterLCD==0) 
   \   00000082   AE48               LDR      R0,??Timer_1s_0+0x28  ;; g_LightCouterLCD
   \   00000084   0068               LDR      R0,[R0, #+0]
   \   00000086   0028               CMP      R0,#+0
   \   00000088   06D1               BNE      ??Timer_1s_7
   1249            {
   1250              if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   0000008A   AD48               LDR      R0,??Timer_1s_0+0x2C  ;; g_LightLCDEnable
   \   0000008C   0078               LDRB     R0,[R0, #+0]
   \   0000008E   0028               CMP      R0,#+0
   \   00000090   02D1               BNE      ??Timer_1s_7
   \   00000092   AB48               LDR      R0,??Timer_1s_0+0x2C  ;; g_LightLCDEnable
   \   00000094   0121               MOVS     R1,#+1
   \   00000096   0170               STRB     R1,[R0, #+0]
   1251            }
   1252            if ((g_LightCouterLCD < LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_7:
   \   00000098   A848               LDR      R0,??Timer_1s_0+0x28  ;; g_LightCouterLCD
   \   0000009A   0068               LDR      R0,[R0, #+0]
   \   0000009C   1428               CMP      R0,#+20
   \   0000009E   08DA               BGE      ??Timer_1s_8
   \   000000A0   A848               LDR      R0,??Timer_1s_0+0x30  ;; g_PC_Connected
   \   000000A2   0078               LDRB     R0,[R0, #+0]
   \   000000A4   0028               CMP      R0,#+0
   \   000000A6   04D1               BNE      ??Timer_1s_8
   1253            {
   1254                g_LightCouterLCD++;
   \   000000A8   A448               LDR      R0,??Timer_1s_0+0x28  ;; g_LightCouterLCD
   \   000000AA   A449               LDR      R1,??Timer_1s_0+0x28  ;; g_LightCouterLCD
   \   000000AC   0968               LDR      R1,[R1, #+0]
   \   000000AE   491C               ADDS     R1,R1,#+1
   \   000000B0   0160               STR      R1,[R0, #+0]
   1255                  
   1256            } 
   1257            
   1258            
   1259            if ((g_LightCouterLCD >= LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_8:
   \   000000B2   A248               LDR      R0,??Timer_1s_0+0x28  ;; g_LightCouterLCD
   \   000000B4   0068               LDR      R0,[R0, #+0]
   \   000000B6   1428               CMP      R0,#+20
   \   000000B8   06DB               BLT      ??Timer_1s_9
   \   000000BA   A248               LDR      R0,??Timer_1s_0+0x30  ;; g_PC_Connected
   \   000000BC   0078               LDRB     R0,[R0, #+0]
   \   000000BE   0028               CMP      R0,#+0
   \   000000C0   02D1               BNE      ??Timer_1s_9
   1260          
   1261            {
   1262             g_LightLCDEnable=0; 
   \   000000C2   9F48               LDR      R0,??Timer_1s_0+0x2C  ;; g_LightLCDEnable
   \   000000C4   0021               MOVS     R1,#+0
   \   000000C6   0170               STRB     R1,[R0, #+0]
   1263            }
   1264          
   1265            
   1266            if ((DateTime.DayOfWeek)==0) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_9:
   \   000000C8   9F48               LDR      R0,??Timer_1s_0+0x34  ;; DateTime + 6
   \   000000CA   0078               LDRB     R0,[R0, #+0]
   \   000000CC   0028               CMP      R0,#+0
   \   000000CE   02D1               BNE      ??Timer_1s_10
   \   000000D0   9D48               LDR      R0,??Timer_1s_0+0x34  ;; DateTime + 6
   \   000000D2   0121               MOVS     R1,#+1
   \   000000D4   0170               STRB     R1,[R0, #+0]
   1267            
   1268            if (DateTime.Second<59) {DateTime.Second++;} else {DateTime.Second=0; DateTime.Minute++;};
   \                     ??Timer_1s_10:
   \   000000D6   9D48               LDR      R0,??Timer_1s_0+0x38  ;; DateTime + 5
   \   000000D8   0078               LDRB     R0,[R0, #+0]
   \   000000DA   3B28               CMP      R0,#+59
   \   000000DC   05D2               BCS      ??Timer_1s_11
   \   000000DE   9B48               LDR      R0,??Timer_1s_0+0x38  ;; DateTime + 5
   \   000000E0   9A49               LDR      R1,??Timer_1s_0+0x38  ;; DateTime + 5
   \   000000E2   0978               LDRB     R1,[R1, #+0]
   \   000000E4   491C               ADDS     R1,R1,#+1
   \   000000E6   0170               STRB     R1,[R0, #+0]
   \   000000E8   07E0               B        ??Timer_1s_12
   \                     ??Timer_1s_11:
   \   000000EA   9848               LDR      R0,??Timer_1s_0+0x38  ;; DateTime + 5
   \   000000EC   0021               MOVS     R1,#+0
   \   000000EE   0170               STRB     R1,[R0, #+0]
   \   000000F0   9748               LDR      R0,??Timer_1s_0+0x3C  ;; DateTime + 4
   \   000000F2   9749               LDR      R1,??Timer_1s_0+0x3C  ;; DateTime + 4
   \   000000F4   0978               LDRB     R1,[R1, #+0]
   \   000000F6   491C               ADDS     R1,R1,#+1
   \   000000F8   0170               STRB     R1,[R0, #+0]
   1269            if (DateTime.Minute>59) {
   \                     ??Timer_1s_12:
   \   000000FA   9548               LDR      R0,??Timer_1s_0+0x3C  ;; DateTime + 4
   \   000000FC   0078               LDRB     R0,[R0, #+0]
   \   000000FE   3C28               CMP      R0,#+60
   \   00000100   44D3               BCC      ??Timer_1s_13
   1270                DateTime.Minute=0; 
   \   00000102   9348               LDR      R0,??Timer_1s_0+0x3C  ;; DateTime + 4
   \   00000104   0021               MOVS     R1,#+0
   \   00000106   0170               STRB     R1,[R0, #+0]
   1271                DateTime.Hour++;
   \   00000108   9248               LDR      R0,??Timer_1s_0+0x40  ;; DateTime + 3
   \   0000010A   9249               LDR      R1,??Timer_1s_0+0x40  ;; DateTime + 3
   \   0000010C   0978               LDRB     R1,[R1, #+0]
   \   0000010E   491C               ADDS     R1,R1,#+1
   \   00000110   0170               STRB     R1,[R0, #+0]
   1272                   //zmiana czasu z zimowego na letni
   1273                 if ((DateTime.Mounth==3) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==2) && (DateTime.Second==0))
   \   00000112   9148               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000114   0078               LDRB     R0,[R0, #+0]
   \   00000116   0328               CMP      R0,#+3
   \   00000118   14D1               BNE      ??Timer_1s_14
   \   0000011A   9048               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   0000011C   0078               LDRB     R0,[R0, #+0]
   \   0000011E   1928               CMP      R0,#+25
   \   00000120   10D3               BCC      ??Timer_1s_14
   \   00000122   8948               LDR      R0,??Timer_1s_0+0x34  ;; DateTime + 6
   \   00000124   0078               LDRB     R0,[R0, #+0]
   \   00000126   0728               CMP      R0,#+7
   \   00000128   0CD1               BNE      ??Timer_1s_14
   \   0000012A   8A48               LDR      R0,??Timer_1s_0+0x40  ;; DateTime + 3
   \   0000012C   0078               LDRB     R0,[R0, #+0]
   \   0000012E   0228               CMP      R0,#+2
   \   00000130   08D1               BNE      ??Timer_1s_14
   \   00000132   8648               LDR      R0,??Timer_1s_0+0x38  ;; DateTime + 5
   \   00000134   0078               LDRB     R0,[R0, #+0]
   \   00000136   0028               CMP      R0,#+0
   \   00000138   04D1               BNE      ??Timer_1s_14
   1274                 {
   1275                   DateTime.Hour=3;
   \   0000013A   8648               LDR      R0,??Timer_1s_0+0x40  ;; DateTime + 3
   \   0000013C   0321               MOVS     R1,#+3
   \   0000013E   0170               STRB     R1,[R0, #+0]
   1276                   SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   00000140   ........           BL       SetRTC_DateTime
   1277          
   1278                 }
   1279                 //zmiana czasu z letniego na zimowy
   1280                 if ((DateTime.Mounth==10) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==3) && (DateTime.Second==0))
   \                     ??Timer_1s_14:
   \   00000144   8448               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000146   0078               LDRB     R0,[R0, #+0]
   \   00000148   0A28               CMP      R0,#+10
   \   0000014A   1FD1               BNE      ??Timer_1s_13
   \   0000014C   8348               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   0000014E   0078               LDRB     R0,[R0, #+0]
   \   00000150   1928               CMP      R0,#+25
   \   00000152   1BD3               BCC      ??Timer_1s_13
   \   00000154   7C48               LDR      R0,??Timer_1s_0+0x34  ;; DateTime + 6
   \   00000156   0078               LDRB     R0,[R0, #+0]
   \   00000158   0728               CMP      R0,#+7
   \   0000015A   17D1               BNE      ??Timer_1s_13
   \   0000015C   7D48               LDR      R0,??Timer_1s_0+0x40  ;; DateTime + 3
   \   0000015E   0078               LDRB     R0,[R0, #+0]
   \   00000160   0328               CMP      R0,#+3
   \   00000162   13D1               BNE      ??Timer_1s_13
   \   00000164   7948               LDR      R0,??Timer_1s_0+0x38  ;; DateTime + 5
   \   00000166   0078               LDRB     R0,[R0, #+0]
   \   00000168   0028               CMP      R0,#+0
   \   0000016A   0FD1               BNE      ??Timer_1s_13
   1281                 {
   1282                   if (FlagChangeTime==0)
   \   0000016C   7C48               LDR      R0,??Timer_1s_0+0x4C  ;; FlagChangeTime
   \   0000016E   0078               LDRB     R0,[R0, #+0]
   \   00000170   0028               CMP      R0,#+0
   \   00000172   08D1               BNE      ??Timer_1s_15
   1283                   {
   1284                      FlagChangeTime=1; 
   \   00000174   7A48               LDR      R0,??Timer_1s_0+0x4C  ;; FlagChangeTime
   \   00000176   0121               MOVS     R1,#+1
   \   00000178   0170               STRB     R1,[R0, #+0]
   1285                      DateTime.Hour=2;
   \   0000017A   7648               LDR      R0,??Timer_1s_0+0x40  ;; DateTime + 3
   \   0000017C   0221               MOVS     R1,#+2
   \   0000017E   0170               STRB     R1,[R0, #+0]
   1286                      SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   00000180   ........           BL       SetRTC_DateTime
   \   00000184   02E0               B        ??Timer_1s_13
   1287                   }else{
   1288                      FlagChangeTime=0; 
   \                     ??Timer_1s_15:
   \   00000186   7648               LDR      R0,??Timer_1s_0+0x4C  ;; FlagChangeTime
   \   00000188   0021               MOVS     R1,#+0
   \   0000018A   0170               STRB     R1,[R0, #+0]
   1289                   }
   1290                 }
   1291            }
   1292            
   1293            if (DateTime.Hour>23)   {
   \                     ??Timer_1s_13:
   \   0000018C   7148               LDR      R0,??Timer_1s_0+0x40  ;; DateTime + 3
   \   0000018E   0078               LDRB     R0,[R0, #+0]
   \   00000190   1828               CMP      R0,#+24
   \   00000192   0CD3               BCC      ??Timer_1s_16
   1294              DateTime.Hour=0;     
   \   00000194   6F48               LDR      R0,??Timer_1s_0+0x40  ;; DateTime + 3
   \   00000196   0021               MOVS     R1,#+0
   \   00000198   0170               STRB     R1,[R0, #+0]
   1295              DateTime.DayOfWeek++; DateTime.Day++;
   \   0000019A   6B48               LDR      R0,??Timer_1s_0+0x34  ;; DateTime + 6
   \   0000019C   6A49               LDR      R1,??Timer_1s_0+0x34  ;; DateTime + 6
   \   0000019E   0978               LDRB     R1,[R1, #+0]
   \   000001A0   491C               ADDS     R1,R1,#+1
   \   000001A2   0170               STRB     R1,[R0, #+0]
   \   000001A4   6D48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000001A6   6D49               LDR      R1,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000001A8   0978               LDRB     R1,[R1, #+0]
   \   000001AA   491C               ADDS     R1,R1,#+1
   \   000001AC   0170               STRB     R1,[R0, #+0]
   1296          
   1297            }
   1298            
   1299            
   1300            switch (DateTime.Mounth)
   \                     ??Timer_1s_16:
   \   000001AE   6A48               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000001B0   0078               LDRB     R0,[R0, #+0]
   \   000001B2   0128               CMP      R0,#+1
   \   000001B4   1CD0               BEQ      ??Timer_1s_17
   \   000001B6   0228               CMP      R0,#+2
   \   000001B8   28D0               BEQ      ??Timer_1s_18
   \   000001BA   0328               CMP      R0,#+3
   \   000001BC   58D0               BEQ      ??Timer_1s_19
   \   000001BE   0428               CMP      R0,#+4
   \   000001C0   64D0               BEQ      ??Timer_1s_20
   \   000001C2   0528               CMP      R0,#+5
   \   000001C4   70D0               BEQ      ??Timer_1s_21
   \   000001C6   0628               CMP      R0,#+6
   \   000001C8   7CD0               BEQ      ??Timer_1s_22
   \   000001CA   0728               CMP      R0,#+7
   \   000001CC   00D1               BNE      .+4
   \   000001CE   87E0               B        ??Timer_1s_23
   \   000001D0   0828               CMP      R0,#+8
   \   000001D2   00D1               BNE      .+4
   \   000001D4   91E0               B        ??Timer_1s_24
   \   000001D6   0928               CMP      R0,#+9
   \   000001D8   00D1               BNE      .+4
   \   000001DA   C5E0               B        ??Timer_1s_25
   \   000001DC   0A28               CMP      R0,#+10
   \   000001DE   00D1               BNE      .+4
   \   000001E0   CFE0               B        ??Timer_1s_26
   \   000001E2   0B28               CMP      R0,#+11
   \   000001E4   00D1               BNE      .+4
   \   000001E6   D9E0               B        ??Timer_1s_27
   \   000001E8   0C28               CMP      R0,#+12
   \   000001EA   00D1               BNE      .+4
   \   000001EC   E3E0               B        ??Timer_1s_28
   \   000001EE   F1E0               B        ??Timer_1s_29
   1301                  {
   1302                    case 1  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_17:
   \   000001F0   5A48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000001F2   0078               LDRB     R0,[R0, #+0]
   \   000001F4   2028               CMP      R0,#+32
   \   000001F6   00D2               BCS      .+4
   \   000001F8   ECE0               B        ??Timer_1s_29
   \   000001FA   5848               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000001FC   0121               MOVS     R1,#+1
   \   000001FE   0170               STRB     R1,[R0, #+0]
   \   00000200   5548               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000202   5549               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000204   0978               LDRB     R1,[R1, #+0]
   \   00000206   491C               ADDS     R1,R1,#+1
   \   00000208   0170               STRB     R1,[R0, #+0]
   \   0000020A   E3E0               B        ??Timer_1s_29
   1303                    case 2  : if ((DateTime.Year%4 == 0) && (DateTime.Year%100 != 0) || (DateTime.Year%400 == 0))  //je¿eli rok przestêpny
   \                     ??Timer_1s_18:
   \   0000020C   5548               LDR      R0,??Timer_1s_0+0x50  ;; DateTime
   \   0000020E   0078               LDRB     R0,[R0, #+0]
   \   00000210   0421               MOVS     R1,#+4
   \   00000212   ........           BL       __aeabi_idivmod
   \   00000216   0029               CMP      R1,#+0
   \   00000218   06D1               BNE      ??Timer_1s_30
   \   0000021A   5248               LDR      R0,??Timer_1s_0+0x50  ;; DateTime
   \   0000021C   0078               LDRB     R0,[R0, #+0]
   \   0000021E   6421               MOVS     R1,#+100
   \   00000220   ........           BL       __aeabi_idivmod
   \   00000224   0029               CMP      R1,#+0
   \   00000226   07D1               BNE      ??Timer_1s_31
   \                     ??Timer_1s_30:
   \   00000228   4E48               LDR      R0,??Timer_1s_0+0x50  ;; DateTime
   \   0000022A   0078               LDRB     R0,[R0, #+0]
   \   0000022C   C821               MOVS     R1,#+200
   \   0000022E   4900               LSLS     R1,R1,#+1        ;; #+400
   \   00000230   ........           BL       __aeabi_idivmod
   \   00000234   0029               CMP      R1,#+0
   \   00000236   0DD1               BNE      ??Timer_1s_32
   1304                                  {if (DateTime.Day>29) {DateTime.Day=1; DateTime.Mounth++;}     
   \                     ??Timer_1s_31:
   \   00000238   4848               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   0000023A   0078               LDRB     R0,[R0, #+0]
   \   0000023C   1E28               CMP      R0,#+30
   \   0000023E   00D2               BCS      .+4
   \   00000240   C8E0               B        ??Timer_1s_29
   \   00000242   4648               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   00000244   0121               MOVS     R1,#+1
   \   00000246   0170               STRB     R1,[R0, #+0]
   \   00000248   4348               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   0000024A   4349               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   0000024C   0978               LDRB     R1,[R1, #+0]
   \   0000024E   491C               ADDS     R1,R1,#+1
   \   00000250   0170               STRB     R1,[R0, #+0]
   \   00000252   BFE0               B        ??Timer_1s_29
   1305                                  }else{if (DateTime.Day>28) {DateTime.Day=1; DateTime.Mounth++;}
   \                     ??Timer_1s_32:
   \   00000254   4148               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   00000256   0078               LDRB     R0,[R0, #+0]
   \   00000258   1D28               CMP      R0,#+29
   \   0000025A   00D2               BCS      .+4
   \   0000025C   BAE0               B        ??Timer_1s_29
   \   0000025E   3F48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   00000260   0121               MOVS     R1,#+1
   \   00000262   0170               STRB     R1,[R0, #+0]
   \   00000264   3C48               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000266   3C49               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000268   0978               LDRB     R1,[R1, #+0]
   \   0000026A   491C               ADDS     R1,R1,#+1
   \   0000026C   0170               STRB     R1,[R0, #+0]
   \   0000026E   B1E0               B        ??Timer_1s_29
   1306                                  }
   1307                    break;
   1308                    case 3  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_19:
   \   00000270   3A48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   00000272   0078               LDRB     R0,[R0, #+0]
   \   00000274   2028               CMP      R0,#+32
   \   00000276   00D2               BCS      .+4
   \   00000278   ACE0               B        ??Timer_1s_29
   \   0000027A   3848               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   0000027C   0121               MOVS     R1,#+1
   \   0000027E   0170               STRB     R1,[R0, #+0]
   \   00000280   3548               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000282   3549               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   00000284   0978               LDRB     R1,[R1, #+0]
   \   00000286   491C               ADDS     R1,R1,#+1
   \   00000288   0170               STRB     R1,[R0, #+0]
   \   0000028A   A3E0               B        ??Timer_1s_29
   1309                    case 4  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_20:
   \   0000028C   3348               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   0000028E   0078               LDRB     R0,[R0, #+0]
   \   00000290   1F28               CMP      R0,#+31
   \   00000292   00D2               BCS      .+4
   \   00000294   9EE0               B        ??Timer_1s_29
   \   00000296   3148               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   00000298   0121               MOVS     R1,#+1
   \   0000029A   0170               STRB     R1,[R0, #+0]
   \   0000029C   2E48               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   0000029E   2E49               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000002A0   0978               LDRB     R1,[R1, #+0]
   \   000002A2   491C               ADDS     R1,R1,#+1
   \   000002A4   0170               STRB     R1,[R0, #+0]
   \   000002A6   95E0               B        ??Timer_1s_29
   1310                    case 5  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_21:
   \   000002A8   2C48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000002AA   0078               LDRB     R0,[R0, #+0]
   \   000002AC   2028               CMP      R0,#+32
   \   000002AE   00D2               BCS      .+4
   \   000002B0   90E0               B        ??Timer_1s_29
   \   000002B2   2A48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000002B4   0121               MOVS     R1,#+1
   \   000002B6   0170               STRB     R1,[R0, #+0]
   \   000002B8   2748               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000002BA   2749               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000002BC   0978               LDRB     R1,[R1, #+0]
   \   000002BE   491C               ADDS     R1,R1,#+1
   \   000002C0   0170               STRB     R1,[R0, #+0]
   \   000002C2   87E0               B        ??Timer_1s_29
   1311                    case 6  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_22:
   \   000002C4   2548               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000002C6   0078               LDRB     R0,[R0, #+0]
   \   000002C8   1F28               CMP      R0,#+31
   \   000002CA   00D2               BCS      .+4
   \   000002CC   82E0               B        ??Timer_1s_29
   \   000002CE   2348               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000002D0   0121               MOVS     R1,#+1
   \   000002D2   0170               STRB     R1,[R0, #+0]
   \   000002D4   2048               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000002D6   2049               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000002D8   0978               LDRB     R1,[R1, #+0]
   \   000002DA   491C               ADDS     R1,R1,#+1
   \   000002DC   0170               STRB     R1,[R0, #+0]
   \   000002DE   79E0               B        ??Timer_1s_29
   1312                    case 7  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_23:
   \   000002E0   1E48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000002E2   0078               LDRB     R0,[R0, #+0]
   \   000002E4   2028               CMP      R0,#+32
   \   000002E6   75D3               BCC      ??Timer_1s_29
   \   000002E8   1C48               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000002EA   0121               MOVS     R1,#+1
   \   000002EC   0170               STRB     R1,[R0, #+0]
   \   000002EE   1A48               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000002F0   1949               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   000002F2   0978               LDRB     R1,[R1, #+0]
   \   000002F4   491C               ADDS     R1,R1,#+1
   \   000002F6   0170               STRB     R1,[R0, #+0]
   \   000002F8   6CE0               B        ??Timer_1s_29
   1313                    case 8  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_24:
   \   000002FA   1848               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   000002FC   0078               LDRB     R0,[R0, #+0]
   \   000002FE   2028               CMP      R0,#+32
   \   00000300   68D3               BCC      ??Timer_1s_29
   \   00000302   1648               LDR      R0,??Timer_1s_0+0x48  ;; DateTime + 2
   \   00000304   0121               MOVS     R1,#+1
   \   00000306   0170               STRB     R1,[R0, #+0]
   \   00000308   1348               LDR      R0,??Timer_1s_0+0x44  ;; DateTime + 1
   \   0000030A   1349               LDR      R1,??Timer_1s_0+0x44  ;; DateTime + 1
   \   0000030C   0978               LDRB     R1,[R1, #+0]
   \   0000030E   491C               ADDS     R1,R1,#+1
   \   00000310   0170               STRB     R1,[R0, #+0]
   \   00000312   5FE0               B        ??Timer_1s_29
   \                     ??Timer_1s_0:
   \   00000314   ........           DC32     AlarmOn
   \   00000318   ........           DC32     Speaker + 1
   \   0000031C   ........           DC32     ButtonBipCounter
   \   00000320   ........           DC32     g_counter
   \   00000324   30F4FFFF           DC32     0xfffff430
   \   00000328   ........           DC32     g_seconds_counter
   \   0000032C   ........           DC32     CyklPerSekCount
   \   00000330   ........           DC32     TransLoopTime
   \   00000334   ........           DC32     CyklPerSek
   \   00000338   ........           DC32     ChangeStageFlag
   \   0000033C   ........           DC32     g_LightCouterLCD
   \   00000340   ........           DC32     g_LightLCDEnable
   \   00000344   ........           DC32     g_PC_Connected
   \   00000348   ........           DC32     DateTime + 6
   \   0000034C   ........           DC32     DateTime + 5
   \   00000350   ........           DC32     DateTime + 4
   \   00000354   ........           DC32     DateTime + 3
   \   00000358   ........           DC32     DateTime + 1
   \   0000035C   ........           DC32     DateTime + 2
   \   00000360   ........           DC32     FlagChangeTime
   \   00000364   ........           DC32     DateTime
   1314                    case 9  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_25:
   \   00000368   BB48               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   0000036A   0078               LDRB     R0,[R0, #+0]
   \   0000036C   1F28               CMP      R0,#+31
   \   0000036E   31D3               BCC      ??Timer_1s_29
   \   00000370   B948               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   00000372   0121               MOVS     R1,#+1
   \   00000374   0170               STRB     R1,[R0, #+0]
   \   00000376   B948               LDR      R0,??Timer_1s_33+0x4  ;; DateTime + 1
   \   00000378   B849               LDR      R1,??Timer_1s_33+0x4  ;; DateTime + 1
   \   0000037A   0978               LDRB     R1,[R1, #+0]
   \   0000037C   491C               ADDS     R1,R1,#+1
   \   0000037E   0170               STRB     R1,[R0, #+0]
   \   00000380   28E0               B        ??Timer_1s_29
   1315                    case 10 : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_26:
   \   00000382   B548               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   00000384   0078               LDRB     R0,[R0, #+0]
   \   00000386   2028               CMP      R0,#+32
   \   00000388   24D3               BCC      ??Timer_1s_29
   \   0000038A   B348               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   0000038C   0121               MOVS     R1,#+1
   \   0000038E   0170               STRB     R1,[R0, #+0]
   \   00000390   B248               LDR      R0,??Timer_1s_33+0x4  ;; DateTime + 1
   \   00000392   B249               LDR      R1,??Timer_1s_33+0x4  ;; DateTime + 1
   \   00000394   0978               LDRB     R1,[R1, #+0]
   \   00000396   491C               ADDS     R1,R1,#+1
   \   00000398   0170               STRB     R1,[R0, #+0]
   \   0000039A   1BE0               B        ??Timer_1s_29
   1316                    case 11 : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_27:
   \   0000039C   AE48               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   0000039E   0078               LDRB     R0,[R0, #+0]
   \   000003A0   1F28               CMP      R0,#+31
   \   000003A2   17D3               BCC      ??Timer_1s_29
   \   000003A4   AC48               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   000003A6   0121               MOVS     R1,#+1
   \   000003A8   0170               STRB     R1,[R0, #+0]
   \   000003AA   AC48               LDR      R0,??Timer_1s_33+0x4  ;; DateTime + 1
   \   000003AC   AB49               LDR      R1,??Timer_1s_33+0x4  ;; DateTime + 1
   \   000003AE   0978               LDRB     R1,[R1, #+0]
   \   000003B0   491C               ADDS     R1,R1,#+1
   \   000003B2   0170               STRB     R1,[R0, #+0]
   \   000003B4   0EE0               B        ??Timer_1s_29
   1317                    case 12 : if (DateTime.Day>31) 
   \                     ??Timer_1s_28:
   \   000003B6   A848               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   000003B8   0078               LDRB     R0,[R0, #+0]
   \   000003BA   2028               CMP      R0,#+32
   \   000003BC   0AD3               BCC      ??Timer_1s_29
   1318                    {
   1319                      DateTime.Day=1; DateTime.Mounth=1; DateTime.Year++;
   \   000003BE   A648               LDR      R0,??Timer_1s_33  ;; DateTime + 2
   \   000003C0   0121               MOVS     R1,#+1
   \   000003C2   0170               STRB     R1,[R0, #+0]
   \   000003C4   A548               LDR      R0,??Timer_1s_33+0x4  ;; DateTime + 1
   \   000003C6   0121               MOVS     R1,#+1
   \   000003C8   0170               STRB     R1,[R0, #+0]
   \   000003CA   A548               LDR      R0,??Timer_1s_33+0x8  ;; DateTime
   \   000003CC   A449               LDR      R1,??Timer_1s_33+0x8  ;; DateTime
   \   000003CE   0978               LDRB     R1,[R1, #+0]
   \   000003D0   491C               ADDS     R1,R1,#+1
   \   000003D2   0170               STRB     R1,[R0, #+0]
   1320                    } break;
   1321                    
   1322            
   1323            
   1324            }  
   1325            if (DateTime.DayOfWeek>Sunday) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_29:
   \   000003D4   A348               LDR      R0,??Timer_1s_33+0xC  ;; DateTime + 6
   \   000003D6   0078               LDRB     R0,[R0, #+0]
   \   000003D8   0828               CMP      R0,#+8
   \   000003DA   02D3               BCC      ??Timer_1s_34
   \   000003DC   A148               LDR      R0,??Timer_1s_33+0xC  ;; DateTime + 6
   \   000003DE   0121               MOVS     R1,#+1
   \   000003E0   0170               STRB     R1,[R0, #+0]
   1326            
   1327          
   1328            
   1329            
   1330            
   1331          
   1332              
   1333            if (MenuLevel_old!=MenuLevel)
   \                     ??Timer_1s_34:
   \   000003E2   A148               LDR      R0,??Timer_1s_33+0x10  ;; MenuLevel_old
   \   000003E4   0068               LDR      R0,[R0, #+0]
   \   000003E6   A149               LDR      R1,??Timer_1s_33+0x14  ;; MenuLevel
   \   000003E8   0968               LDR      R1,[R1, #+0]
   \   000003EA   8842               CMP      R0,R1
   \   000003EC   03D0               BEQ      ??Timer_1s_35
   1334            {
   1335              MenuLevel_old=MenuLevel;    //na koniec usun¹c MenuLevel_old
   \   000003EE   9E48               LDR      R0,??Timer_1s_33+0x10  ;; MenuLevel_old
   \   000003F0   9E49               LDR      R1,??Timer_1s_33+0x14  ;; MenuLevel
   \   000003F2   0968               LDR      R1,[R1, #+0]
   \   000003F4   0160               STR      R1,[R0, #+0]
   1336            }
   1337            
   1338             char czas_tmp[9];
   1339            
   1340            TimeToStr(DateTime.Hour, DateTime.Minute, DateTime.Second, czas_tmp);
   \                     ??Timer_1s_35:
   \   000003F6   03AB               ADD      R3,SP,#+12
   \   000003F8   9D48               LDR      R0,??Timer_1s_33+0x18  ;; DateTime + 5
   \   000003FA   0278               LDRB     R2,[R0, #+0]
   \   000003FC   9D48               LDR      R0,??Timer_1s_33+0x1C  ;; DateTime + 4
   \   000003FE   0178               LDRB     R1,[R0, #+0]
   \   00000400   9D48               LDR      R0,??Timer_1s_33+0x20  ;; DateTime + 3
   \   00000402   0078               LDRB     R0,[R0, #+0]
   \   00000404   ........           BL       TimeToStr
   1341            czas_tmp[8]=13;
   \   00000408   03A8               ADD      R0,SP,#+12
   \   0000040A   0D21               MOVS     R1,#+13
   \   0000040C   0172               STRB     R1,[R0, #+8]
   1342          
   1343            
   1344            //zeruj wskaŸniki poprawnoœci po³aczeñ
   1345            if (g_US0_Connect_OK) g_US0_Connect_OK--;
   \   0000040E   9B48               LDR      R0,??Timer_1s_33+0x24  ;; g_US0_Connect_OK
   \   00000410   0078               LDRB     R0,[R0, #+0]
   \   00000412   0028               CMP      R0,#+0
   \   00000414   04D0               BEQ      ??Timer_1s_36
   \   00000416   9948               LDR      R0,??Timer_1s_33+0x24  ;; g_US0_Connect_OK
   \   00000418   9849               LDR      R1,??Timer_1s_33+0x24  ;; g_US0_Connect_OK
   \   0000041A   0978               LDRB     R1,[R1, #+0]
   \   0000041C   491E               SUBS     R1,R1,#+1
   \   0000041E   0170               STRB     R1,[R0, #+0]
   1346            if (g_US1_Connect_OK) g_US1_Connect_OK--;
   \                     ??Timer_1s_36:
   \   00000420   9748               LDR      R0,??Timer_1s_33+0x28  ;; g_US1_Connect_OK
   \   00000422   0078               LDRB     R0,[R0, #+0]
   \   00000424   0028               CMP      R0,#+0
   \   00000426   04D0               BEQ      ??Timer_1s_37
   \   00000428   9548               LDR      R0,??Timer_1s_33+0x28  ;; g_US1_Connect_OK
   \   0000042A   9549               LDR      R1,??Timer_1s_33+0x28  ;; g_US1_Connect_OK
   \   0000042C   0978               LDRB     R1,[R1, #+0]
   \   0000042E   491E               SUBS     R1,R1,#+1
   \   00000430   0170               STRB     R1,[R0, #+0]
   1347            
   1348          
   1349            //synchronizacja RTC
   1350          if ((DateTime.Hour==2) && (DateTime.Minute==57) && (DateTime.Second==0)) GetDateTimeFromRTC(); 
   \                     ??Timer_1s_37:
   \   00000432   9148               LDR      R0,??Timer_1s_33+0x20  ;; DateTime + 3
   \   00000434   0078               LDRB     R0,[R0, #+0]
   \   00000436   0228               CMP      R0,#+2
   \   00000438   09D1               BNE      ??Timer_1s_38
   \   0000043A   8E48               LDR      R0,??Timer_1s_33+0x1C  ;; DateTime + 4
   \   0000043C   0078               LDRB     R0,[R0, #+0]
   \   0000043E   3928               CMP      R0,#+57
   \   00000440   05D1               BNE      ??Timer_1s_38
   \   00000442   8B48               LDR      R0,??Timer_1s_33+0x18  ;; DateTime + 5
   \   00000444   0078               LDRB     R0,[R0, #+0]
   \   00000446   0028               CMP      R0,#+0
   \   00000448   01D1               BNE      ??Timer_1s_38
   \   0000044A   ........           BL       GetDateTimeFromRTC
   1351          //if (DateTime.Second=30) GetDateTimeFromRTC(); 
   1352          
   1353            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ 1min
   1354            static char CountMin=0;
   1355            if (CountMin<60)
   \                     ??Timer_1s_38:
   \   0000044E   8D48               LDR      R0,??Timer_1s_33+0x2C  ;; ??CountMin
   \   00000450   0078               LDRB     R0,[R0, #+0]
   \   00000452   3C28               CMP      R0,#+60
   \   00000454   05D2               BCS      ??Timer_1s_39
   1356            {
   1357              CountMin++; 
   \   00000456   8B48               LDR      R0,??Timer_1s_33+0x2C  ;; ??CountMin
   \   00000458   8A49               LDR      R1,??Timer_1s_33+0x2C  ;; ??CountMin
   \   0000045A   0978               LDRB     R1,[R1, #+0]
   \   0000045C   491C               ADDS     R1,R1,#+1
   \   0000045E   0170               STRB     R1,[R0, #+0]
   \   00000460   CCE0               B        ??Timer_1s_40
   1358            }else{
   1359              CountMin=0;
   \                     ??Timer_1s_39:
   \   00000462   8848               LDR      R0,??Timer_1s_33+0x2C  ;; ??CountMin
   \   00000464   0021               MOVS     R1,#+0
   \   00000466   0170               STRB     R1,[R0, #+0]
   1360            
   1361              if (TransQuality.SlowMensurIndex<7)
   \   00000468   8748               LDR      R0,??Timer_1s_33+0x30  ;; TransQuality + 1
   \   0000046A   0078               LDRB     R0,[R0, #+0]
   \   0000046C   0728               CMP      R0,#+7
   \   0000046E   05D2               BCS      ??Timer_1s_41
   1362              {
   1363                TransQuality.SlowMensurIndex++; 
   \   00000470   8548               LDR      R0,??Timer_1s_33+0x30  ;; TransQuality + 1
   \   00000472   8549               LDR      R1,??Timer_1s_33+0x30  ;; TransQuality + 1
   \   00000474   0978               LDRB     R1,[R1, #+0]
   \   00000476   491C               ADDS     R1,R1,#+1
   \   00000478   0170               STRB     R1,[R0, #+0]
   \   0000047A   02E0               B        ??Timer_1s_42
   1364              }else{
   1365                TransQuality.SlowMensurIndex=0;
   \                     ??Timer_1s_41:
   \   0000047C   8248               LDR      R0,??Timer_1s_33+0x30  ;; TransQuality + 1
   \   0000047E   0021               MOVS     R1,#+0
   \   00000480   0170               STRB     R1,[R0, #+0]
   1366              }
   1367              
   1368              for(char NN=1; NN<NumberNeurons; NN++)   TransQuality.SlowMensur[NN] &= ~(1<<TransQuality.SlowMensurIndex);
   \                     ??Timer_1s_42:
   \   00000482   0120               MOVS     R0,#+1
   \   00000484   0FE0               B        ??Timer_1s_43
   \                     ??Timer_1s_44:
   \   00000486   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000488   000E               LSRS     R0,R0,#+24
   \   0000048A   8049               LDR      R1,??Timer_1s_33+0x34  ;; TransQuality
   \   0000048C   0918               ADDS     R1,R1,R0
   \   0000048E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000490   000E               LSRS     R0,R0,#+24
   \   00000492   7E4A               LDR      R2,??Timer_1s_33+0x34  ;; TransQuality
   \   00000494   1218               ADDS     R2,R2,R0
   \   00000496   D278               LDRB     R2,[R2, #+3]
   \   00000498   0123               MOVS     R3,#+1
   \   0000049A   7B4C               LDR      R4,??Timer_1s_33+0x30  ;; TransQuality + 1
   \   0000049C   2478               LDRB     R4,[R4, #+0]
   \   0000049E   A340               LSLS     R3,R3,R4
   \   000004A0   9A43               BICS     R2,R2,R3
   \   000004A2   CA70               STRB     R2,[R1, #+3]
   \   000004A4   401C               ADDS     R0,R0,#+1
   \                     ??Timer_1s_43:
   \   000004A6   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000004A8   000E               LSRS     R0,R0,#+24
   \   000004AA   2328               CMP      R0,#+35
   \   000004AC   EBD3               BCC      ??Timer_1s_44
   1369              
   1370              char TryIndirectTmp, TryIndirectSlowTmp;
   1371              
   1372              TryIndirectTmp=TryIndirect;
   \   000004AE   7848               LDR      R0,??Timer_1s_33+0x38  ;; ??TryIndirect
   \   000004B0   0778               LDRB     R7,[R0, #+0]
   1373              TryIndirectSlowTmp=TryIndirectSlow;
   \   000004B2   7848               LDR      R0,??Timer_1s_33+0x3C  ;; ??TryIndirectSlow
   \   000004B4   0678               LDRB     R6,[R0, #+0]
   1374                
   1375                    //Sprawdzenie wiarygodnoœci wêz³ów na podstawie d³ugotrwa³ego pomiaru jakoœci
   1376                for (char NN=1; NN<NumberNeurons; NN++)
   \   000004B6   0124               MOVS     R4,#+1
   \   000004B8   00E0               B        ??Timer_1s_45
   \                     ??Timer_1s_46:
   \   000004BA   641C               ADDS     R4,R4,#+1
   \                     ??Timer_1s_45:
   \   000004BC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000004BE   240E               LSRS     R4,R4,#+24
   \   000004C0   232C               CMP      R4,#+35
   \   000004C2   00D3               BCC      .+4
   \   000004C4   96E0               B        ??Timer_1s_47
   1377                {
   1378                  if (TransQuality.SlowMensur[NN-1]==0)
   \   000004C6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000004C8   240E               LSRS     R4,R4,#+24
   \   000004CA   7048               LDR      R0,??Timer_1s_33+0x34  ;; TransQuality
   \   000004CC   0019               ADDS     R0,R0,R4
   \   000004CE   8078               LDRB     R0,[R0, #+2]
   \   000004D0   0028               CMP      R0,#+0
   \   000004D2   F2D1               BNE      ??Timer_1s_46
   1379                  {
   1380                      for (char NR=0; NR<NumberReg; NR++)
   \   000004D4   0025               MOVS     R5,#+0
   \   000004D6   14E0               B        ??Timer_1s_48
   1381                      {
   1382                        MainStage.StageI[NN].Value[NR]=0x8AAA;
   1383                        
   1384                            if (ChangeingIdMode==0)
   1385                            {
   1386                                if (NeuronsList[NN-1].NeuronType==NodeRF)   //je¿eli wêze³ ze sta³¹ komunikacj¹
   1387                                {
   1388              
   1389                                      if (TryIndirect==0) //je¿eli rozkaz rozg³oœny nie dodany
   1390                                      {
   1391                                        if ((!NeuronsList[NN-1].ReadSuspend) && (!AT91C_IFLASH_MEM->Config.SlaveMode))      AddRfTask_SearchNodeTask(NN);                //Dodaj rozkaz do tablicy zadañ RF - kto ma dostêp do wêz³a. Rozkaz dodawany jest po perwszej minucie pracy sterownika. Je¿eli wêze³ zerwie po³¹czenie to dodawany jest po 8 minutach
   1392                                        TryIndirectTmp=1;
   1393                                      }else if (TryIndirect==1){ //je¿eli rozkaz rozg³oœny dodany ale nikt nie znalaz³ wêz³a
   1394                                        AddRfTask_RemoveSearchNodeTask(NN); 
   1395                                        TryIndirectTmp=2;
   1396                                      }
   1397                                    
   1398                                
   1399                                }
   1400                                else if (NeuronsList[NN-1].NeuronType==NodeRF_Period) //je¿eli wêze³ z komunikacja d³ugo okresow¹ 
   1401                                {
   1402                                    if (g_counter>360000)
   1403                                    {
   1404                                      if (TryIndirectSlow==0)  //je¿eli rozkaz rozg³oœny nie dodany
   1405                                      {
   1406                                        if ((TransQuality.SlowMensurIndex==0) && (!NeuronsList[NN-1].ReadSuspend) && (!AT91C_IFLASH_MEM->Config.SlaveMode))      AddRfTask_SearchNodeTask(NN);                //Dodaj rozkaz do tablicy zadañ RF - kto ma dostêp do wêz³a.  Rozkaz dodawany jest w ósmej minucie pracy sterownika. Je¿eli wêze³ zerwie po³¹czenie to dodawany jest po 8 minutach
   1407                                        TryIndirectSlowTmp=1;
   1408                                      }else if ((TryIndirectSlow==1) && (g_counter>720000)) { //je¿eli rozkaz rozg³oœny dodany ale nikt nie znalaz³ wêz³a w dodatkowym czasie
   \                     ??Timer_1s_49:
   \   000004D8   6E48               LDR      R0,??Timer_1s_33+0x3C  ;; ??TryIndirectSlow
   \   000004DA   0078               LDRB     R0,[R0, #+0]
   \   000004DC   0128               CMP      R0,#+1
   \   000004DE   0FD1               BNE      ??Timer_1s_50
   \   000004E0   6D48               LDR      R0,??Timer_1s_33+0x40  ;; g_counter
   \   000004E2   0CC8               LDM      R0!,{R2,R3}
   \   000004E4   0838               SUBS     R0,R0,#+8
   \   000004E6   6D48               LDR      R0,??Timer_1s_33+0x44  ;; 0xafc81
   \   000004E8   0021               MOVS     R1,#+0
   \   000004EA   8B42               CMP      R3,R1
   \   000004EC   08D3               BCC      ??Timer_1s_50
   \   000004EE   01D8               BHI      ??Timer_1s_51
   \   000004F0   8242               CMP      R2,R0
   \   000004F2   05D3               BCC      ??Timer_1s_50
   1409                                        AddRfTask_RemoveSearchNodeTask(NN); 
   \                     ??Timer_1s_51:
   \   000004F4   2000               MOVS     R0,R4
   \   000004F6   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000004F8   000E               LSRS     R0,R0,#+24
   \   000004FA   ........           BL       AddRfTask_RemoveSearchNodeTask
   1410                                        TryIndirectSlowTmp=2;
   \   000004FE   0226               MOVS     R6,#+2
   1411                                      }
   \                     ??Timer_1s_50:
   \   00000500   6D1C               ADDS     R5,R5,#+1
   \                     ??Timer_1s_48:
   \   00000502   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000504   2D0E               LSRS     R5,R5,#+24
   \   00000506   0B2D               CMP      R5,#+11
   \   00000508   D7D2               BCS      ??Timer_1s_46
   \   0000050A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000050C   2D0E               LSRS     R5,R5,#+24
   \   0000050E   0220               MOVS     R0,#+2
   \   00000510   6843               MULS     R0,R5,R0
   \   00000512   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000514   240E               LSRS     R4,R4,#+24
   \   00000516   1621               MOVS     R1,#+22
   \   00000518   6143               MULS     R1,R4,R1
   \   0000051A   614A               LDR      R2,??Timer_1s_33+0x48  ;; MainStage
   \   0000051C   5118               ADDS     R1,R2,R1
   \   0000051E   0818               ADDS     R0,R1,R0
   \   00000520   A030               ADDS     R0,R0,#+160
   \   00000522   6049               LDR      R1,??Timer_1s_33+0x4C  ;; 0xffff8aaa
   \   00000524   0180               STRH     R1,[R0, #+0]
   \   00000526   6048               LDR      R0,??Timer_1s_33+0x50  ;; ChangeingIdMode
   \   00000528   0078               LDRB     R0,[R0, #+0]
   \   0000052A   0028               CMP      R0,#+0
   \   0000052C   E8D1               BNE      ??Timer_1s_50
   \   0000052E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000530   240E               LSRS     R4,R4,#+24
   \   00000532   0C20               MOVS     R0,#+12
   \   00000534   6043               MULS     R0,R4,R0
   \   00000536   5D49               LDR      R1,??Timer_1s_33+0x54  ;; NeuronsList
   \   00000538   0818               ADDS     R0,R1,R0
   \   0000053A   0C38               SUBS     R0,R0,#+12
   \   0000053C   0078               LDRB     R0,[R0, #+0]
   \   0000053E   0328               CMP      R0,#+3
   \   00000540   25D1               BNE      ??Timer_1s_52
   \   00000542   5348               LDR      R0,??Timer_1s_33+0x38  ;; ??TryIndirect
   \   00000544   0078               LDRB     R0,[R0, #+0]
   \   00000546   0028               CMP      R0,#+0
   \   00000548   16D1               BNE      ??Timer_1s_53
   \   0000054A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000054C   240E               LSRS     R4,R4,#+24
   \   0000054E   0C20               MOVS     R0,#+12
   \   00000550   6043               MULS     R0,R4,R0
   \   00000552   5649               LDR      R1,??Timer_1s_33+0x54  ;; NeuronsList
   \   00000554   0818               ADDS     R0,R1,R0
   \   00000556   001F               SUBS     R0,R0,#+4
   \   00000558   0078               LDRB     R0,[R0, #+0]
   \   0000055A   4007               LSLS     R0,R0,#+29
   \   0000055C   0AD4               BMI      ??Timer_1s_54
   \   0000055E   5448               LDR      R0,??Timer_1s_33+0x58  ;; 0x13d7e8
   \   00000560   0078               LDRB     R0,[R0, #+0]
   \   00000562   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000564   000E               LSRS     R0,R0,#+24
   \   00000566   0028               CMP      R0,#+0
   \   00000568   04D1               BNE      ??Timer_1s_54
   \   0000056A   2000               MOVS     R0,R4
   \   0000056C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000056E   000E               LSRS     R0,R0,#+24
   \   00000570   ........           BL       AddRfTask_SearchNodeTask
   \                     ??Timer_1s_54:
   \   00000574   0127               MOVS     R7,#+1
   \   00000576   C3E7               B        ??Timer_1s_50
   \                     ??Timer_1s_53:
   \   00000578   4548               LDR      R0,??Timer_1s_33+0x38  ;; ??TryIndirect
   \   0000057A   0078               LDRB     R0,[R0, #+0]
   \   0000057C   0128               CMP      R0,#+1
   \   0000057E   BFD1               BNE      ??Timer_1s_50
   \   00000580   2000               MOVS     R0,R4
   \   00000582   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000584   000E               LSRS     R0,R0,#+24
   \   00000586   ........           BL       AddRfTask_RemoveSearchNodeTask
   \   0000058A   0227               MOVS     R7,#+2
   \   0000058C   B8E7               B        ??Timer_1s_50
   \                     ??Timer_1s_52:
   \   0000058E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000590   240E               LSRS     R4,R4,#+24
   \   00000592   0C20               MOVS     R0,#+12
   \   00000594   6043               MULS     R0,R4,R0
   \   00000596   4549               LDR      R1,??Timer_1s_33+0x54  ;; NeuronsList
   \   00000598   0818               ADDS     R0,R1,R0
   \   0000059A   0C38               SUBS     R0,R0,#+12
   \   0000059C   0078               LDRB     R0,[R0, #+0]
   \   0000059E   0528               CMP      R0,#+5
   \   000005A0   AED1               BNE      ??Timer_1s_50
   \   000005A2   3D48               LDR      R0,??Timer_1s_33+0x40  ;; g_counter
   \   000005A4   0CC8               LDM      R0!,{R2,R3}
   \   000005A6   0838               SUBS     R0,R0,#+8
   \   000005A8   4248               LDR      R0,??Timer_1s_33+0x5C  ;; 0x57e41
   \   000005AA   0021               MOVS     R1,#+0
   \   000005AC   8B42               CMP      R3,R1
   \   000005AE   A7D3               BCC      ??Timer_1s_50
   \   000005B0   01D8               BHI      ??Timer_1s_55
   \   000005B2   8242               CMP      R2,R0
   \   000005B4   A4D3               BCC      ??Timer_1s_50
   \                     ??Timer_1s_55:
   \   000005B6   3748               LDR      R0,??Timer_1s_33+0x3C  ;; ??TryIndirectSlow
   \   000005B8   0078               LDRB     R0,[R0, #+0]
   \   000005BA   0028               CMP      R0,#+0
   \   000005BC   8CD1               BNE      ??Timer_1s_49
   \   000005BE   3248               LDR      R0,??Timer_1s_33+0x30  ;; TransQuality + 1
   \   000005C0   0078               LDRB     R0,[R0, #+0]
   \   000005C2   0028               CMP      R0,#+0
   \   000005C4   14D1               BNE      ??Timer_1s_56
   \   000005C6   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000005C8   240E               LSRS     R4,R4,#+24
   \   000005CA   0C20               MOVS     R0,#+12
   \   000005CC   6043               MULS     R0,R4,R0
   \   000005CE   3749               LDR      R1,??Timer_1s_33+0x54  ;; NeuronsList
   \   000005D0   0818               ADDS     R0,R1,R0
   \   000005D2   001F               SUBS     R0,R0,#+4
   \   000005D4   0078               LDRB     R0,[R0, #+0]
   \   000005D6   4007               LSLS     R0,R0,#+29
   \   000005D8   0AD4               BMI      ??Timer_1s_56
   \   000005DA   3548               LDR      R0,??Timer_1s_33+0x58  ;; 0x13d7e8
   \   000005DC   0078               LDRB     R0,[R0, #+0]
   \   000005DE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000005E0   000E               LSRS     R0,R0,#+24
   \   000005E2   0028               CMP      R0,#+0
   \   000005E4   04D1               BNE      ??Timer_1s_56
   \   000005E6   2000               MOVS     R0,R4
   \   000005E8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000005EA   000E               LSRS     R0,R0,#+24
   \   000005EC   ........           BL       AddRfTask_SearchNodeTask
   \                     ??Timer_1s_56:
   \   000005F0   0126               MOVS     R6,#+1
   \   000005F2   85E7               B        ??Timer_1s_50
   1412                                    }
   1413                                }
   1414                            }
   1415               
   1416                      }
   1417                  }
   1418                }
   1419                
   1420            TryIndirect=TryIndirectTmp;
   \                     ??Timer_1s_47:
   \   000005F4   2648               LDR      R0,??Timer_1s_33+0x38  ;; ??TryIndirect
   \   000005F6   0770               STRB     R7,[R0, #+0]
   1421            TryIndirectSlow=TryIndirectSlowTmp;
   \   000005F8   2648               LDR      R0,??Timer_1s_33+0x3C  ;; ??TryIndirectSlow
   \   000005FA   0670               STRB     R6,[R0, #+0]
   1422                
   1423                
   1424            }
   1425          
   1426                               
   1427          
   1428            if (DateTime.Second==0) Timer_1min();
   \                     ??Timer_1s_40:
   \   000005FC   1C48               LDR      R0,??Timer_1s_33+0x18  ;; DateTime + 5
   \   000005FE   0078               LDRB     R0,[R0, #+0]
   \   00000600   0028               CMP      R0,#+0
   \   00000602   01D1               BNE      ??Timer_1s_57
   \   00000604   ........           BL       Timer_1min
   1429            if ((DateTime.Second==0) && (DateTime.Minute==0))  Timer_1h();
   \                     ??Timer_1s_57:
   \   00000608   1948               LDR      R0,??Timer_1s_33+0x18  ;; DateTime + 5
   \   0000060A   0078               LDRB     R0,[R0, #+0]
   \   0000060C   0028               CMP      R0,#+0
   \   0000060E   05D1               BNE      ??Timer_1s_58
   \   00000610   1848               LDR      R0,??Timer_1s_33+0x1C  ;; DateTime + 4
   \   00000612   0078               LDRB     R0,[R0, #+0]
   \   00000614   0028               CMP      R0,#+0
   \   00000616   01D1               BNE      ??Timer_1s_58
   \   00000618   ........           BL       Timer_1h
   1430            if (DateTime.Second==0) TimetableExecute();
   \                     ??Timer_1s_58:
   \   0000061C   1448               LDR      R0,??Timer_1s_33+0x18  ;; DateTime + 5
   \   0000061E   0078               LDRB     R0,[R0, #+0]
   \   00000620   0028               CMP      R0,#+0
   \   00000622   01D1               BNE      ??Timer_1s_59
   \   00000624   ........           BL       TimetableExecute
   1431               AlarmExecute();
   \                     ??Timer_1s_59:
   \   00000628   ........           BL       AlarmExecute
   1432               
   1433               
   1434          
   1435             //sprawdzenie wy³adowania baterii i wyœwietlenie ostrzenia       
   1436              if ((DateTime.Hour==10) && (DateTime.Minute==0) && (DateTime.Second==0)   && (DateTime.DayOfWeek==Saturday))
   \   0000062C   1248               LDR      R0,??Timer_1s_33+0x20  ;; DateTime + 3
   \   0000062E   0078               LDRB     R0,[R0, #+0]
   \   00000630   0A28               CMP      R0,#+10
   \   00000632   00D0               BEQ      .+4
   \   00000634   8CE0               B        ??Timer_1s_60
   \   00000636   0F48               LDR      R0,??Timer_1s_33+0x1C  ;; DateTime + 4
   \   00000638   0078               LDRB     R0,[R0, #+0]
   \   0000063A   0028               CMP      R0,#+0
   \   0000063C   00D0               BEQ      .+4
   \   0000063E   87E0               B        ??Timer_1s_60
   \   00000640   0B48               LDR      R0,??Timer_1s_33+0x18  ;; DateTime + 5
   \   00000642   0078               LDRB     R0,[R0, #+0]
   \   00000644   0028               CMP      R0,#+0
   \   00000646   00D0               BEQ      .+4
   \   00000648   82E0               B        ??Timer_1s_60
   \   0000064A   0648               LDR      R0,??Timer_1s_33+0xC  ;; DateTime + 6
   \   0000064C   0078               LDRB     R0,[R0, #+0]
   \   0000064E   0628               CMP      R0,#+6
   \   00000650   00D0               BEQ      .+4
   \   00000652   7DE0               B        ??Timer_1s_60
   1437              {
   1438             
   1439                 for (char i=0; i<NumberNeurons; i++)
   \   00000654   0024               MOVS     R4,#+0
   \   00000656   60E0               B        ??Timer_1s_61
   \                     ??Timer_1s_33:
   \   00000658   ........           DC32     DateTime + 2
   \   0000065C   ........           DC32     DateTime + 1
   \   00000660   ........           DC32     DateTime
   \   00000664   ........           DC32     DateTime + 6
   \   00000668   ........           DC32     MenuLevel_old
   \   0000066C   ........           DC32     MenuLevel
   \   00000670   ........           DC32     DateTime + 5
   \   00000674   ........           DC32     DateTime + 4
   \   00000678   ........           DC32     DateTime + 3
   \   0000067C   ........           DC32     g_US0_Connect_OK
   \   00000680   ........           DC32     g_US1_Connect_OK
   \   00000684   ........           DC32     ??CountMin
   \   00000688   ........           DC32     TransQuality + 1
   \   0000068C   ........           DC32     TransQuality
   \   00000690   ........           DC32     ??TryIndirect
   \   00000694   ........           DC32     ??TryIndirectSlow
   \   00000698   ........           DC32     g_counter
   \   0000069C   81FC0A00           DC32     0xafc81
   \   000006A0   ........           DC32     MainStage
   \   000006A4   AA8AFFFF           DC32     0xffff8aaa
   \   000006A8   ........           DC32     ChangeingIdMode
   \   000006AC   ........           DC32     NeuronsList
   \   000006B0   E8D71300           DC32     0x13d7e8
   \   000006B4   417E0500           DC32     0x57e41
   1440                 {
   1441                   if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1442                   {
   1443                      char txt[NodeLabelLethers+1];
   1444                      for (char k=0; k<NodeLabelLethers; k++) txt[k]=gProg.NodeLabel[i-1][k];
   \                     ??Timer_1s_62:
   \   000006B8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006BA   000E               LSRS     R0,R0,#+24
   \   000006BC   6946               MOV      R1,SP
   \   000006BE   8B4A               LDR      R2,??Timer_1s_63  ;; 0xc11a
   \   000006C0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006C2   000E               LSRS     R0,R0,#+24
   \   000006C4   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000006C6   240E               LSRS     R4,R4,#+24
   \   000006C8   0A23               MOVS     R3,#+10
   \   000006CA   6343               MULS     R3,R4,R3
   \   000006CC   884D               LDR      R5,??Timer_1s_63+0x4  ;; gProg
   \   000006CE   EB18               ADDS     R3,R5,R3
   \   000006D0   1B18               ADDS     R3,R3,R0
   \   000006D2   9A5C               LDRB     R2,[R3, R2]
   \   000006D4   0A54               STRB     R2,[R1, R0]
   \   000006D6   401C               ADDS     R0,R0,#+1
   \                     ??Timer_1s_64:
   \   000006D8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006DA   000E               LSRS     R0,R0,#+24
   \   000006DC   0A28               CMP      R0,#+10
   \   000006DE   EBD3               BCC      ??Timer_1s_62
   1445                      txt[NodeLabelLethers]=0;
   \   000006E0   6846               MOV      R0,SP
   \   000006E2   0021               MOVS     R1,#+0
   \   000006E4   8172               STRB     R1,[R0, #+10]
   1446          
   1447                      
   1448                      Message_Paint(2,"Wyladowana","bateria","   ","Wezel:", txt);         
   \   000006E6   6946               MOV      R1,SP
   \   000006E8   8248               LDR      R0,??Timer_1s_63+0x8  ;; `?<Constant "Wezel:">`
   \   000006EA   03B4               PUSH     {R0,R1}
   \   000006EC   82A3               ADR      R3,??Timer_1s_63+0xC  ;; "   "
   \   000006EE   834A               LDR      R2,??Timer_1s_63+0x10  ;; `?<Constant "bateria">`
   \   000006F0   8349               LDR      R1,??Timer_1s_63+0x14  ;; `?<Constant "Wyladowana">`
   \   000006F2   0220               MOVS     R0,#+2
   \   000006F4   ........           BL       Message_Paint
   \   000006F8   02B0               ADD      SP,SP,#+8
   1449          
   1450                      ButtonBipCounter=g_counter+8000;
   \   000006FA   824D               LDR      R5,??Timer_1s_63+0x18  ;; ButtonBipCounter
   \   000006FC   8248               LDR      R0,??Timer_1s_63+0x1C  ;; g_counter
   \   000006FE   0CC8               LDM      R0!,{R2,R3}
   \   00000700   0838               SUBS     R0,R0,#+8
   \   00000702   FA20               MOVS     R0,#+250
   \   00000704   4001               LSLS     R0,R0,#+5        ;; #+8000
   \   00000706   0021               MOVS     R1,#+0
   \   00000708   8018               ADDS     R0,R0,R2
   \   0000070A   5941               ADCS     R1,R1,R3
   \   0000070C   03C5               STM      R5!,{R0,R1}
   \   0000070E   083D               SUBS     R5,R5,#+8
   1451                      AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                        ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000710   7E48               LDR      R0,??Timer_1s_63+0x20  ;; 0xfffff430
   \   00000712   8021               MOVS     R1,#+128
   \   00000714   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000716   0160               STR      R1,[R0, #+0]
   \                     ??Timer_1s_65:
   \   00000718   641C               ADDS     R4,R4,#+1
   \                     ??Timer_1s_61:
   \   0000071A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000071C   240E               LSRS     R4,R4,#+24
   \   0000071E   232C               CMP      R4,#+35
   \   00000720   16D2               BCS      ??Timer_1s_60
   \   00000722   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000724   240E               LSRS     R4,R4,#+24
   \   00000726   1620               MOVS     R0,#+22
   \   00000728   6043               MULS     R0,R4,R0
   \   0000072A   7949               LDR      R1,??Timer_1s_63+0x24  ;; MainStage
   \   0000072C   0818               ADDS     R0,R1,R0
   \   0000072E   A030               ADDS     R0,R0,#+160
   \   00000730   0088               LDRH     R0,[R0, #+0]
   \   00000732   0004               LSLS     R0,R0,#+16
   \   00000734   F0D5               BPL      ??Timer_1s_65
   \   00000736   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000738   240E               LSRS     R4,R4,#+24
   \   0000073A   1620               MOVS     R0,#+22
   \   0000073C   6043               MULS     R0,R4,R0
   \   0000073E   7449               LDR      R1,??Timer_1s_63+0x24  ;; MainStage
   \   00000740   0818               ADDS     R0,R1,R0
   \   00000742   A030               ADDS     R0,R0,#+160
   \   00000744   0088               LDRH     R0,[R0, #+0]
   \   00000746   7349               LDR      R1,??Timer_1s_63+0x28  ;; 0x8aaa
   \   00000748   8842               CMP      R0,R1
   \   0000074A   E5D0               BEQ      ??Timer_1s_65
   \   0000074C   0020               MOVS     R0,#+0
   \   0000074E   C3E7               B        ??Timer_1s_64
   1452                   }
   1453          
   1454                 } 
   1455                
   1456             }    
   1457              
   1458          
   1459             
   1460             
   1461             //wygaszacz ekranu
   1462             static char LCD_last_fill=100;
   1463             char WypMin;
   1464             if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))  
   \                     ??Timer_1s_60:
   \   00000750   7148               LDR      R0,??Timer_1s_63+0x2C  ;; g_ScreenSever_On
   \   00000752   0078               LDRB     R0,[R0, #+0]
   \   00000754   0028               CMP      R0,#+0
   \   00000756   0FD0               BEQ      ??Timer_1s_66
   \   00000758   6F48               LDR      R0,??Timer_1s_63+0x2C  ;; g_ScreenSever_On
   \   0000075A   0078               LDRB     R0,[R0, #+0]
   \   0000075C   0028               CMP      R0,#+0
   \   0000075E   0ED0               BEQ      ??Timer_1s_67
   \   00000760   6E48               LDR      R0,??Timer_1s_63+0x30  ;; DateTime + 3
   \   00000762   0078               LDRB     R0,[R0, #+0]
   \   00000764   6E49               LDR      R1,??Timer_1s_63+0x34  ;; g_ScreenSever_Time_On
   \   00000766   0978               LDRB     R1,[R1, #+0]
   \   00000768   8842               CMP      R0,R1
   \   0000076A   08D2               BCS      ??Timer_1s_67
   \   0000076C   6B48               LDR      R0,??Timer_1s_63+0x30  ;; DateTime + 3
   \   0000076E   0078               LDRB     R0,[R0, #+0]
   \   00000770   6C49               LDR      R1,??Timer_1s_63+0x38  ;; g_ScreenSever_Time_Off
   \   00000772   0978               LDRB     R1,[R1, #+0]
   \   00000774   8842               CMP      R0,R1
   \   00000776   02D3               BCC      ??Timer_1s_67
   1465             {  
   1466                WypMin=WypMinJasnosci;   //wype³nienie bez wygaszacza
   \                     ??Timer_1s_66:
   \   00000778   6B48               LDR      R0,??Timer_1s_63+0x3C  ;; WypMinJasnosci
   \   0000077A   0078               LDRB     R0,[R0, #+0]
   \   0000077C   00E0               B        ??Timer_1s_68
   1467             }else{
   1468                WypMin=4;    //wype³nienie przy wygaszaczu
   \                     ??Timer_1s_67:
   \   0000077E   0420               MOVS     R0,#+4
   1469             }
   1470               if (gWypMinJasnosciTest)
   \                     ??Timer_1s_68:
   \   00000780   6A49               LDR      R1,??Timer_1s_63+0x40  ;; gWypMinJasnosciTest
   \   00000782   0978               LDRB     R1,[R1, #+0]
   \   00000784   0029               CMP      R1,#+0
   \   00000786   0AD0               BEQ      ??Timer_1s_69
   1471               {
   1472                  AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   00000788   6948               LDR      R0,??Timer_1s_63+0x44  ;; 0xfffcc008
   \   0000078A   0121               MOVS     R1,#+1
   \   0000078C   0160               STR      R1,[R0, #+0]
   1473                  Set_LCD_Light_PWM_Fill(WypMinJasnosci); 
                         ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   0000078E   6648               LDR      R0,??Timer_1s_63+0x3C  ;; WypMinJasnosci
   \   00000790   0078               LDRB     R0,[R0, #+0]
   \   00000792   ........           BL       Set_LCD_Light_PWM_Fill
   1474                  AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000796   6748               LDR      R0,??Timer_1s_63+0x48  ;; 0xfffcc004
   \   00000798   0121               MOVS     R1,#+1
   \   0000079A   0160               STR      R1,[R0, #+0]
   \   0000079C   34E0               B        ??Timer_1s_70
   1475               }
   1476               else if (g_LightLCDEnable==1)
   \                     ??Timer_1s_69:
   \   0000079E   6649               LDR      R1,??Timer_1s_63+0x4C  ;; g_LightLCDEnable
   \   000007A0   0978               LDRB     R1,[R1, #+0]
   \   000007A2   0129               CMP      R1,#+1
   \   000007A4   14D1               BNE      ??Timer_1s_71
   1477               {
   1478                 if (LCD_last_fill!=WypMaxJasnosci)
   \   000007A6   6548               LDR      R0,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007A8   0078               LDRB     R0,[R0, #+0]
   \   000007AA   6549               LDR      R1,??Timer_1s_63+0x54  ;; WypMaxJasnosci
   \   000007AC   0978               LDRB     R1,[R1, #+0]
   \   000007AE   8842               CMP      R0,R1
   \   000007B0   2AD0               BEQ      ??Timer_1s_70
   1479                 {
   1480                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   000007B2   5F48               LDR      R0,??Timer_1s_63+0x44  ;; 0xfffcc008
   \   000007B4   0121               MOVS     R1,#+1
   \   000007B6   0160               STR      R1,[R0, #+0]
   1481                    Set_LCD_Light_PWM_Fill(WypMaxJasnosci);  //maksymalne wype³nienie
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   000007B8   6148               LDR      R0,??Timer_1s_63+0x54  ;; WypMaxJasnosci
   \   000007BA   0078               LDRB     R0,[R0, #+0]
   \   000007BC   ........           BL       Set_LCD_Light_PWM_Fill
   1482                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   000007C0   5C48               LDR      R0,??Timer_1s_63+0x48  ;; 0xfffcc004
   \   000007C2   0121               MOVS     R1,#+1
   \   000007C4   0160               STR      R1,[R0, #+0]
   1483                    LCD_last_fill=WypMaxJasnosci;
   \   000007C6   5D48               LDR      R0,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007C8   5D49               LDR      R1,??Timer_1s_63+0x54  ;; WypMaxJasnosci
   \   000007CA   0978               LDRB     R1,[R1, #+0]
   \   000007CC   0170               STRB     R1,[R0, #+0]
   \   000007CE   1BE0               B        ??Timer_1s_70
   1484                 }
   1485               }else {
   1486                 if (LCD_last_fill>WypMin)
   \                     ??Timer_1s_71:
   \   000007D0   5A49               LDR      R1,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007D2   0978               LDRB     R1,[R1, #+0]
   \   000007D4   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000007D6   000E               LSRS     R0,R0,#+24
   \   000007D8   8842               CMP      R0,R1
   \   000007DA   15D2               BCS      ??Timer_1s_70
   1487                 {
   1488                    if (LCD_last_fill>60) LCD_last_fill=61;
   \   000007DC   5748               LDR      R0,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007DE   0078               LDRB     R0,[R0, #+0]
   \   000007E0   3D28               CMP      R0,#+61
   \   000007E2   02D3               BCC      ??Timer_1s_72
   \   000007E4   5548               LDR      R0,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007E6   3D21               MOVS     R1,#+61
   \   000007E8   0170               STRB     R1,[R0, #+0]
   1489                    LCD_last_fill-=2;
   \                     ??Timer_1s_72:
   \   000007EA   5448               LDR      R0,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007EC   5349               LDR      R1,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007EE   0978               LDRB     R1,[R1, #+0]
   \   000007F0   891E               SUBS     R1,R1,#+2
   \   000007F2   0170               STRB     R1,[R0, #+0]
   1490                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   000007F4   4E48               LDR      R0,??Timer_1s_63+0x44  ;; 0xfffcc008
   \   000007F6   0121               MOVS     R1,#+1
   \   000007F8   0160               STR      R1,[R0, #+0]
   1491                    Set_LCD_Light_PWM_Fill(LCD_last_fill); 
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   000007FA   5048               LDR      R0,??Timer_1s_63+0x50  ;; ??LCD_last_fill
   \   000007FC   0078               LDRB     R0,[R0, #+0]
   \   000007FE   ........           BL       Set_LCD_Light_PWM_Fill
   1492                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000802   4C48               LDR      R0,??Timer_1s_63+0x48  ;; 0xfffcc004
   \   00000804   0121               MOVS     R1,#+1
   \   00000806   0160               STR      R1,[R0, #+0]
   1493                 }
   1494              }
   1495              
   1496              
   1497              if ((RF_Status.RfFuse>0) && (RF_Status.RfFuse<100)) RF_Status.RfFuse++;
   \                     ??Timer_1s_70:
   \   00000808   4E48               LDR      R0,??Timer_1s_63+0x58  ;; RF_Status + 17
   \   0000080A   0078               LDRB     R0,[R0, #+0]
   \   0000080C   0128               CMP      R0,#+1
   \   0000080E   08D3               BCC      ??Timer_1s_73
   \   00000810   4C48               LDR      R0,??Timer_1s_63+0x58  ;; RF_Status + 17
   \   00000812   0078               LDRB     R0,[R0, #+0]
   \   00000814   6428               CMP      R0,#+100
   \   00000816   04D2               BCS      ??Timer_1s_73
   \   00000818   4A48               LDR      R0,??Timer_1s_63+0x58  ;; RF_Status + 17
   \   0000081A   4A49               LDR      R1,??Timer_1s_63+0x58  ;; RF_Status + 17
   \   0000081C   0978               LDRB     R1,[R1, #+0]
   \   0000081E   491C               ADDS     R1,R1,#+1
   \   00000820   0170               STRB     R1,[R0, #+0]
   1498             
   1499             
   1500             
   1501             //bezpiecznik przed zablokowaniem siê DMA USARTA lub WiFi 
   1502             if (NET.WiFi.On)
   \                     ??Timer_1s_73:
   \   00000822   4948               LDR      R0,??Timer_1s_63+0x5C  ;; NET + 80
   \   00000824   0078               LDRB     R0,[R0, #+0]
   \   00000826   0028               CMP      R0,#+0
   \   00000828   13D0               BEQ      ??Timer_1s_74
   1503             {
   1504               (FuseLastWiFiDataIn<g_counter-30000);   //zabezpieczenie przed blokad¹ DMA USART. FuseLastWiFiDataIn zawiera czas ostatniej odpowiedzi od usarta. Je¿eli WiFi jest w³¹czone a USART milczy od 30s to restartuj mikroprocesor
                      ^
Warning[Pe174]: expression has no effect
   \   0000082A   4848               LDR      R0,??Timer_1s_63+0x60  ;; FuseLastWiFiDataIn
   \   0000082C   03C8               LDM      R0!,{R0,R1}
   \   0000082E   364A               LDR      R2,??Timer_1s_63+0x1C  ;; g_counter
   \   00000830   0CCA               LDM      R2!,{R2,R3}
   \   00000832   474C               LDR      R4,??Timer_1s_63+0x64  ;; 0xffff8ad0
   \   00000834   0025               MOVS     R5,#+0
   \   00000836   ED43               MVNS     R5,R5            ;; #-1
   \   00000838   A418               ADDS     R4,R4,R2
   \   0000083A   5D41               ADCS     R5,R5,R3
   \   0000083C   A942               CMP      R1,R5
   \   0000083E   04D8               BHI      ??Timer_1s_75
   \   00000840   01D3               BCC      ??Timer_1s_76
   \   00000842   A042               CMP      R0,R4
   \   00000844   01D2               BCS      ??Timer_1s_75
   \                     ??Timer_1s_76:
   \   00000846   0120               MOVS     R0,#+1
   \   00000848   00E0               B        ??Timer_1s_77
   \                     ??Timer_1s_75:
   \   0000084A   0020               MOVS     R0,#+0
   \                     ??Timer_1s_77:
   \   0000084C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000084E   000E               LSRS     R0,R0,#+24
   \   00000850   04E0               B        ??Timer_1s_78
   1505             }else{
   1506                FuseLastWiFiDataIn=g_counter;
   \                     ??Timer_1s_74:
   \   00000852   3E4A               LDR      R2,??Timer_1s_63+0x60  ;; FuseLastWiFiDataIn
   \   00000854   2C48               LDR      R0,??Timer_1s_63+0x1C  ;; g_counter
   \   00000856   03C8               LDM      R0!,{R0,R1}
   \   00000858   03C2               STM      R2!,{R0,R1}
   \   0000085A   083A               SUBS     R2,R2,#+8
   1507             }
   1508             
   1509             
   1510             //wyczyszczenie po³¹czeñ mostowych z którymi nie mam kontaktu po up³yniêciu czasu MAX_TIME_TO_REM_BRIDGE_NO_CON
   1511              if (RF_Status.TimeToRemBridgeNoCom) 
   \                     ??Timer_1s_78:
   \   0000085C   3D48               LDR      R0,??Timer_1s_63+0x68  ;; RF_Status + 18
   \   0000085E   0078               LDRB     R0,[R0, #+0]
   \   00000860   0028               CMP      R0,#+0
   \   00000862   3FD0               BEQ      ??Timer_1s_79
   1512              {
   1513                if (RF_Status.TimeToRemBridgeNoCom==1)
   \   00000864   3B48               LDR      R0,??Timer_1s_63+0x68  ;; RF_Status + 18
   \   00000866   0078               LDRB     R0,[R0, #+0]
   \   00000868   0128               CMP      R0,#+1
   \   0000086A   36D1               BNE      ??Timer_1s_80
   1514                {
   1515                          for (char ND=0; ND<NumberNeurons-1; ND++)
   \   0000086C   0020               MOVS     R0,#+0
   \   0000086E   30E0               B        ??Timer_1s_81
   1516                              {
   1517                                if ((NeuronsList[ND].Bridge) &&  (TransQuality.QuickMensur[ND]==0))
   \                     ??Timer_1s_82:
   \   00000870   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000872   000E               LSRS     R0,R0,#+24
   \   00000874   0C21               MOVS     R1,#+12
   \   00000876   4143               MULS     R1,R0,R1
   \   00000878   374A               LDR      R2,??Timer_1s_63+0x6C  ;; NeuronsList
   \   0000087A   5118               ADDS     R1,R2,R1
   \   0000087C   097A               LDRB     R1,[R1, #+8]
   \   0000087E   C906               LSLS     R1,R1,#+27
   \   00000880   26D5               BPL      ??Timer_1s_83
   \   00000882   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000884   000E               LSRS     R0,R0,#+24
   \   00000886   3549               LDR      R1,??Timer_1s_63+0x70  ;; TransQuality
   \   00000888   0918               ADDS     R1,R1,R0
   \   0000088A   2631               ADDS     R1,R1,#+38
   \   0000088C   0978               LDRB     R1,[R1, #+0]
   \   0000088E   0029               CMP      R1,#+0
   \   00000890   1ED1               BNE      ??Timer_1s_83
   1518                                {
   1519                                   NeuronsList[ND].NeuronType=0;
                                                                    ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000892   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000894   000E               LSRS     R0,R0,#+24
   \   00000896   0C21               MOVS     R1,#+12
   \   00000898   4143               MULS     R1,R0,R1
   \   0000089A   2F4A               LDR      R2,??Timer_1s_63+0x6C  ;; NeuronsList
   \   0000089C   0023               MOVS     R3,#+0
   \   0000089E   5354               STRB     R3,[R2, R1]
   1520                                   NeuronsList[ND].NeuronID=0;
   \   000008A0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000008A2   000E               LSRS     R0,R0,#+24
   \   000008A4   0C21               MOVS     R1,#+12
   \   000008A6   4143               MULS     R1,R0,R1
   \   000008A8   2B4A               LDR      R2,??Timer_1s_63+0x6C  ;; NeuronsList
   \   000008AA   5118               ADDS     R1,R2,R1
   \   000008AC   0022               MOVS     R2,#+0
   \   000008AE   4A60               STR      R2,[R1, #+4]
   1521                                   NeuronsList[ND].Bridge=0;
   \   000008B0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000008B2   000E               LSRS     R0,R0,#+24
   \   000008B4   0C21               MOVS     R1,#+12
   \   000008B6   4143               MULS     R1,R0,R1
   \   000008B8   274A               LDR      R2,??Timer_1s_63+0x6C  ;; NeuronsList
   \   000008BA   5118               ADDS     R1,R2,R1
   \   000008BC   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000008BE   000E               LSRS     R0,R0,#+24
   \   000008C0   0C22               MOVS     R2,#+12
   \   000008C2   4243               MULS     R2,R0,R2
   \   000008C4   244B               LDR      R3,??Timer_1s_63+0x6C  ;; NeuronsList
   \   000008C6   9A18               ADDS     R2,R3,R2
   \   000008C8   127A               LDRB     R2,[R2, #+8]
   \   000008CA   EF23               MOVS     R3,#+239
   \   000008CC   1340               ANDS     R3,R3,R2
   \   000008CE   0B72               STRB     R3,[R1, #+8]
   1522                                }
   1523                              }
   \                     ??Timer_1s_83:
   \   000008D0   401C               ADDS     R0,R0,#+1
   \                     ??Timer_1s_81:
   \   000008D2   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000008D4   000E               LSRS     R0,R0,#+24
   \   000008D6   2228               CMP      R0,#+34
   \   000008D8   CAD3               BCC      ??Timer_1s_82
   1524                }
   1525                RF_Status.TimeToRemBridgeNoCom--;
   \                     ??Timer_1s_80:
   \   000008DA   1E48               LDR      R0,??Timer_1s_63+0x68  ;; RF_Status + 18
   \   000008DC   1D49               LDR      R1,??Timer_1s_63+0x68  ;; RF_Status + 18
   \   000008DE   0978               LDRB     R1,[R1, #+0]
   \   000008E0   491E               SUBS     R1,R1,#+1
   \   000008E2   0170               STRB     R1,[R0, #+0]
   1526              }
   1527          
   1528          }
   \                     ??Timer_1s_79:
   \   000008E4   07B0               ADD      SP,SP,#+28
   \   000008E6   F0BC               POP      {R4-R7}
   \   000008E8   01BC               POP      {R0}
   \   000008EA   0047               BX       R0               ;; return
   \                     ??Timer_1s_63:
   \   000008EC   1AC10000           DC32     0xc11a
   \   000008F0   ........           DC32     gProg
   \   000008F4   ........           DC32     `?<Constant "Wezel:">`
   \   000008F8   20202000           DC8      "   "
   \   000008FC   ........           DC32     `?<Constant "bateria">`
   \   00000900   ........           DC32     `?<Constant "Wyladowana">`
   \   00000904   ........           DC32     ButtonBipCounter
   \   00000908   ........           DC32     g_counter
   \   0000090C   30F4FFFF           DC32     0xfffff430
   \   00000910   ........           DC32     MainStage
   \   00000914   AA8A0000           DC32     0x8aaa
   \   00000918   ........           DC32     g_ScreenSever_On
   \   0000091C   ........           DC32     DateTime + 3
   \   00000920   ........           DC32     g_ScreenSever_Time_On
   \   00000924   ........           DC32     g_ScreenSever_Time_Off
   \   00000928   ........           DC32     WypMinJasnosci
   \   0000092C   ........           DC32     gWypMinJasnosciTest
   \   00000930   08C0FCFF           DC32     0xfffcc008
   \   00000934   04C0FCFF           DC32     0xfffcc004
   \   00000938   ........           DC32     g_LightLCDEnable
   \   0000093C   ........           DC32     ??LCD_last_fill
   \   00000940   ........           DC32     WypMaxJasnosci
   \   00000944   ........           DC32     RF_Status + 17
   \   00000948   ........           DC32     NET + 80
   \   0000094C   ........           DC32     FuseLastWiFiDataIn
   \   00000950   D08AFFFF           DC32     0xffff8ad0
   \   00000954   ........           DC32     RF_Status + 18
   \   00000958   ........           DC32     NeuronsList
   \   0000095C   ........           DC32     TransQuality

   \                                 In section .bss, align 1
   \                     ??TryIndirect:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??TryIndirectSlow:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??CountMin:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
   \                     ??LCD_last_fill:
   \   00000000   64                 DC8 100
   1529          
   1530          
   1531          
   1532          
   1533          //-----------------------------------------------------------------------------
   1534          //! Nazwa funkcji :    Timer_10ms
   1535          //! Okres: 10ms
   1536          //! Timer zale¿ny od Timer_1ms
   1537          //-----------------------------------------------------------------------------
   1538          //  
   1539          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1540          void Timer_10ms(void)                      
   1541          { 
   \                     Timer_10ms:
   \   00000000   10B5               PUSH     {R4,LR}
   1542            unsigned int dummy = AT91C_BASE_TC0->TC_SR;                                   // Odczyt statusu  
   \   00000002   5648               LDR      R0,??Timer_10ms_0  ;; 0xfffa0020
   \   00000004   0468               LDR      R4,[R0, #+0]
   1543          
   1544           X_up=-1;
   \   00000006   5648               LDR      R0,??Timer_10ms_0+0x4  ;; X_up
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   C943               MVNS     R1,R1            ;; #-1
   \   0000000C   0180               STRH     R1,[R0, #+0]
   1545           Y_up=-1;
   \   0000000E   5548               LDR      R0,??Timer_10ms_0+0x8  ;; Y_up
   \   00000010   0021               MOVS     R1,#+0
   \   00000012   C943               MVNS     R1,R1            ;; #-1
   \   00000014   0180               STRH     R1,[R0, #+0]
   1546          
   1547           X_down=-1;
   \   00000016   5448               LDR      R0,??Timer_10ms_0+0xC  ;; X_down
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   C943               MVNS     R1,R1            ;; #-1
   \   0000001C   0180               STRH     R1,[R0, #+0]
   1548           Y_down=-1;
   \   0000001E   5348               LDR      R0,??Timer_10ms_0+0x10  ;; Y_down
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   C943               MVNS     R1,R1            ;; #-1
   \   00000024   0180               STRH     R1,[R0, #+0]
   1549          
   1550          
   1551            GetTouchPoint(&X_down, &Y_down, &X_up, &Y_up);
   \   00000026   4F4B               LDR      R3,??Timer_10ms_0+0x8  ;; Y_up
   \   00000028   4D4A               LDR      R2,??Timer_10ms_0+0x4  ;; X_up
   \   0000002A   5049               LDR      R1,??Timer_10ms_0+0x10  ;; Y_down
   \   0000002C   4E48               LDR      R0,??Timer_10ms_0+0xC  ;; X_down
   \   0000002E   ........           BL       GetTouchPoint
   1552          
   1553           
   1554             //Akcja przycisku up
   1555            if ((X_up>0)&&(Y_up>0)) 
   \   00000032   4B48               LDR      R0,??Timer_10ms_0+0x4  ;; X_up
   \   00000034   0021               MOVS     R1,#+0
   \   00000036   405E               LDRSH    R0,[R0, R1]
   \   00000038   0128               CMP      R0,#+1
   \   0000003A   19DB               BLT      ??Timer_10ms_1
   \   0000003C   4948               LDR      R0,??Timer_10ms_0+0x8  ;; Y_up
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   405E               LDRSH    R0,[R0, R1]
   \   00000042   0128               CMP      R0,#+1
   \   00000044   14DB               BLT      ??Timer_10ms_1
   1556            {
   1557               ScreenEvent();
   \   00000046   ........           BL       ScreenEvent
   1558               g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000004A   4948               LDR      R0,??Timer_10ms_0+0x14  ;; g_LightCouterLCD
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   0160               STR      R1,[R0, #+0]
   1559               if (g_LightLCDEnable==0) g_LightLCDEnable=1;
   \   00000050   4848               LDR      R0,??Timer_10ms_0+0x18  ;; g_LightLCDEnable
   \   00000052   0078               LDRB     R0,[R0, #+0]
   \   00000054   0028               CMP      R0,#+0
   \   00000056   02D1               BNE      ??Timer_10ms_2
   \   00000058   4648               LDR      R0,??Timer_10ms_0+0x18  ;; g_LightLCDEnable
   \   0000005A   0121               MOVS     R1,#+1
   \   0000005C   0170               STRB     R1,[R0, #+0]
   1560               AT91C_BASE_PIOA->PIO_CODR =SpeakerPin; 
                                                 ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \                     ??Timer_10ms_2:
   \   0000005E   4648               LDR      R0,??Timer_10ms_0+0x1C  ;; 0xfffff434
   \   00000060   8021               MOVS     R1,#+128
   \   00000062   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000064   0160               STR      R1,[R0, #+0]
   1561               ButtonBipCounter=0;
   \   00000066   454A               LDR      R2,??Timer_10ms_0+0x20  ;; ButtonBipCounter
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   0021               MOVS     R1,#+0
   \   0000006C   03C2               STM      R2!,{R0,R1}
   \   0000006E   083A               SUBS     R2,R2,#+8
   1562            }
   1563            
   1564            if (LiczOds>=5) {
   \                     ??Timer_10ms_1:
   \   00000070   4348               LDR      R0,??Timer_10ms_0+0x24  ;; LiczOds
   \   00000072   0068               LDR      R0,[R0, #+0]
   \   00000074   0528               CMP      R0,#+5
   \   00000076   1BDB               BLT      ??Timer_10ms_3
   1565            
   1566                      //Akcja przycisku down
   1567                if ((X_down>0)&&(Y_down>0) /*&& (g_LightLCDEnable==0)*/) 
   \   00000078   3B48               LDR      R0,??Timer_10ms_0+0xC  ;; X_down
   \   0000007A   0021               MOVS     R1,#+0
   \   0000007C   405E               LDRSH    R0,[R0, R1]
   \   0000007E   0128               CMP      R0,#+1
   \   00000080   0CDB               BLT      ??Timer_10ms_4
   \   00000082   3A48               LDR      R0,??Timer_10ms_0+0x10  ;; Y_down
   \   00000084   0021               MOVS     R1,#+0
   \   00000086   405E               LDRSH    R0,[R0, R1]
   \   00000088   0128               CMP      R0,#+1
   \   0000008A   07DB               BLT      ??Timer_10ms_4
   1568                {
   1569                   ScreenEvent();
   \   0000008C   ........           BL       ScreenEvent
   1570                   g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000090   3748               LDR      R0,??Timer_10ms_0+0x14  ;; g_LightCouterLCD
   \   00000092   0021               MOVS     R1,#+0
   \   00000094   0160               STR      R1,[R0, #+0]
   1571                   g_LightLCDEnable=1;
   \   00000096   3748               LDR      R0,??Timer_10ms_0+0x18  ;; g_LightLCDEnable
   \   00000098   0121               MOVS     R1,#+1
   \   0000009A   0170               STRB     R1,[R0, #+0]
   1572                }  
   1573                
   1574                MenuRefresh(); 
   \                     ??Timer_10ms_4:
   \   0000009C   ........           BL       MenuRefresh
   1575          
   1576              
   1577          
   1578              
   1579              RepaintLCD();
   \   000000A0   ........           BL       RepaintLCD
   1580              RepaintLCD();
   \   000000A4   ........           BL       RepaintLCD
   1581          
   1582              
   1583              LiczOds=0;
   \   000000A8   3548               LDR      R0,??Timer_10ms_0+0x24  ;; LiczOds
   \   000000AA   0021               MOVS     R1,#+0
   \   000000AC   0160               STR      R1,[R0, #+0]
   \   000000AE   04E0               B        ??Timer_10ms_5
   1584          
   1585            }
   1586            
   1587            else 
   1588            {
   1589              LiczOds++; 
   \                     ??Timer_10ms_3:
   \   000000B0   3348               LDR      R0,??Timer_10ms_0+0x24  ;; LiczOds
   \   000000B2   3349               LDR      R1,??Timer_10ms_0+0x24  ;; LiczOds
   \   000000B4   0968               LDR      R1,[R1, #+0]
   \   000000B6   491C               ADDS     R1,R1,#+1
   \   000000B8   0160               STR      R1,[R0, #+0]
   1590            }
   1591            
   1592              
   1593            
   1594            static int Spek2_Counter;
   1595            if (Spek2_Counter<202)Spek2_Counter++;
   \                     ??Timer_10ms_5:
   \   000000BA   3248               LDR      R0,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   000000BC   0068               LDR      R0,[R0, #+0]
   \   000000BE   CA28               CMP      R0,#+202
   \   000000C0   04DA               BGE      ??Timer_10ms_6
   \   000000C2   3048               LDR      R0,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   000000C4   2F49               LDR      R1,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   000000C6   0968               LDR      R1,[R1, #+0]
   \   000000C8   491C               ADDS     R1,R1,#+1
   \   000000CA   0160               STR      R1,[R0, #+0]
   1596            if ((Speaker[2]==1) && (Spek2_Counter>150)) 
   \                     ??Timer_10ms_6:
   \   000000CC   2E48               LDR      R0,??Timer_10ms_0+0x2C  ;; Speaker + 2
   \   000000CE   0078               LDRB     R0,[R0, #+0]
   \   000000D0   0128               CMP      R0,#+1
   \   000000D2   12D1               BNE      ??Timer_10ms_7
   \   000000D4   2B48               LDR      R0,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   000000D6   0068               LDR      R0,[R0, #+0]
   \   000000D8   9728               CMP      R0,#+151
   \   000000DA   0EDB               BLT      ??Timer_10ms_7
   1597            {
   1598                Spek2_Counter=0;
   \   000000DC   2948               LDR      R0,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   000000DE   0021               MOVS     R1,#+0
   \   000000E0   0160               STR      R1,[R0, #+0]
   1599                ButtonBipCounter=g_counter+150;
   \   000000E2   264A               LDR      R2,??Timer_10ms_0+0x20  ;; ButtonBipCounter
   \   000000E4   2948               LDR      R0,??Timer_10ms_0+0x30  ;; g_counter
   \   000000E6   03C8               LDM      R0!,{R0,R1}
   \   000000E8   0023               MOVS     R3,#+0
   \   000000EA   9630               ADDS     R0,R0,#+150
   \   000000EC   5941               ADCS     R1,R1,R3
   \   000000EE   03C2               STM      R2!,{R0,R1}
   \   000000F0   083A               SUBS     R2,R2,#+8
   1600                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   000000F2   2748               LDR      R0,??Timer_10ms_0+0x34  ;; 0xfffff430
   \   000000F4   8021               MOVS     R1,#+128
   \   000000F6   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   000000F8   0160               STR      R1,[R0, #+0]
   1601            }
   1602          
   1603            if ((Speaker[3]==1) && (Spek2_Counter==150)) 
   \                     ??Timer_10ms_7:
   \   000000FA   2648               LDR      R0,??Timer_10ms_0+0x38  ;; Speaker + 3
   \   000000FC   0078               LDRB     R0,[R0, #+0]
   \   000000FE   0128               CMP      R0,#+1
   \   00000100   0FD1               BNE      ??Timer_10ms_8
   \   00000102   2048               LDR      R0,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   00000104   0068               LDR      R0,[R0, #+0]
   \   00000106   9628               CMP      R0,#+150
   \   00000108   0BD1               BNE      ??Timer_10ms_8
   1604            {
   1605                ButtonBipCounter=g_counter+100;
   \   0000010A   1C4A               LDR      R2,??Timer_10ms_0+0x20  ;; ButtonBipCounter
   \   0000010C   1F48               LDR      R0,??Timer_10ms_0+0x30  ;; g_counter
   \   0000010E   03C8               LDM      R0!,{R0,R1}
   \   00000110   0023               MOVS     R3,#+0
   \   00000112   6430               ADDS     R0,R0,#+100
   \   00000114   5941               ADCS     R1,R1,R3
   \   00000116   03C2               STM      R2!,{R0,R1}
   \   00000118   083A               SUBS     R2,R2,#+8
   1606                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000011A   1D48               LDR      R0,??Timer_10ms_0+0x34  ;; 0xfffff430
   \   0000011C   8021               MOVS     R1,#+128
   \   0000011E   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000120   0160               STR      R1,[R0, #+0]
   1607            }  
   1608            if ((Speaker[3]==1) && (Spek2_Counter>200)) 
   \                     ??Timer_10ms_8:
   \   00000122   1C48               LDR      R0,??Timer_10ms_0+0x38  ;; Speaker + 3
   \   00000124   0078               LDRB     R0,[R0, #+0]
   \   00000126   0128               CMP      R0,#+1
   \   00000128   12D1               BNE      ??Timer_10ms_9
   \   0000012A   1648               LDR      R0,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   0000012C   0068               LDR      R0,[R0, #+0]
   \   0000012E   C928               CMP      R0,#+201
   \   00000130   0EDB               BLT      ??Timer_10ms_9
   1609            {
   1610                Spek2_Counter=0;
   \   00000132   1448               LDR      R0,??Timer_10ms_0+0x28  ;; ??Spek2_Counter
   \   00000134   0021               MOVS     R1,#+0
   \   00000136   0160               STR      R1,[R0, #+0]
   1611                ButtonBipCounter=g_counter+100;
   \   00000138   104A               LDR      R2,??Timer_10ms_0+0x20  ;; ButtonBipCounter
   \   0000013A   1448               LDR      R0,??Timer_10ms_0+0x30  ;; g_counter
   \   0000013C   03C8               LDM      R0!,{R0,R1}
   \   0000013E   0023               MOVS     R3,#+0
   \   00000140   6430               ADDS     R0,R0,#+100
   \   00000142   5941               ADCS     R1,R1,R3
   \   00000144   03C2               STM      R2!,{R0,R1}
   \   00000146   083A               SUBS     R2,R2,#+8
   1612                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000148   1148               LDR      R0,??Timer_10ms_0+0x34  ;; 0xfffff430
   \   0000014A   8021               MOVS     R1,#+128
   \   0000014C   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000014E   0160               STR      R1,[R0, #+0]
   1613            }    
   1614          
   1615           AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Timer_10ms_9:
   \   00000150   1148               LDR      R0,??Timer_10ms_0+0x3C  ;; 0xfffffd40
   \   00000152   ........           BL       AT91F_WDTRestart
   1616          
   1617          }
   \   00000156   10BC               POP      {R4}
   \   00000158   01BC               POP      {R0}
   \   0000015A   0047               BX       R0               ;; return
   \                     ??Timer_10ms_0:
   \   0000015C   2000FAFF           DC32     0xfffa0020
   \   00000160   ........           DC32     X_up
   \   00000164   ........           DC32     Y_up
   \   00000168   ........           DC32     X_down
   \   0000016C   ........           DC32     Y_down
   \   00000170   ........           DC32     g_LightCouterLCD
   \   00000174   ........           DC32     g_LightLCDEnable
   \   00000178   34F4FFFF           DC32     0xfffff434
   \   0000017C   ........           DC32     ButtonBipCounter
   \   00000180   ........           DC32     LiczOds
   \   00000184   ........           DC32     ??Spek2_Counter
   \   00000188   ........           DC32     Speaker + 2
   \   0000018C   ........           DC32     g_counter
   \   00000190   30F4FFFF           DC32     0xfffff430
   \   00000194   ........           DC32     Speaker + 3
   \   00000198   40FDFFFF           DC32     0xfffffd40

   \                                 In section .bss, align 4
   \                     ??Spek2_Counter:
   \   00000000                      DS8 4
   1618          
   1619          
   1620          
   1621          

   \                                 In section Debug.txt, align 4, keep-with-next
   1622          void Timer_10ms_Setup(void) 
   1623          { 
   1624          
   1625          
   1626           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC0] = (unsigned int)Timer_10ms;  //set AIC             
   \                     Timer_10ms_Setup:
   \   00000000   1448               LDR      R0,??Timer_10ms_Setup_0  ;; 0xfffff0b0
   \   00000002   1549               LDR      R1,??Timer_10ms_Setup_0+0x4  ;; Timer_10ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1627           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC0] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10mS_PRIOR ); 
   \   00000006   1548               LDR      R0,??Timer_10ms_Setup_0+0x8  ;; 0xfffff030
   \   00000008   0321               MOVS     R1,#+3
   \   0000000A   0160               STR      R1,[R0, #+0]
   1628           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC0);      //enable clock 
   \   0000000C   1448               LDR      R0,??Timer_10ms_Setup_0+0xC  ;; 0xfffffc10
   \   0000000E   8021               MOVS     R1,#+128
   \   00000010   4901               LSLS     R1,R1,#+5        ;; #+4096
   \   00000012   0160               STR      R1,[R0, #+0]
   1629           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1348               LDR      R0,??Timer_10ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   0160               STR      R1,[R0, #+0]
   1630           //no external clocks 
   1631           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1348               LDR      R0,??Timer_10ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1521               MOVS     R1,#+21
   \   0000001E   0160               STR      R1,[R0, #+0]
   1632           AT91C_BASE_TC0->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1248               LDR      R0,??Timer_10ms_Setup_0+0x18  ;; 0xfffa0000
   \   00000022   0521               MOVS     R1,#+5
   \   00000024   0160               STR      R1,[R0, #+0]
   1633           AT91C_BASE_TC0->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV5_CLOCK;//CPC 
   \   00000026   1248               LDR      R0,??Timer_10ms_Setup_0+0x1C  ;; 0xfffa0004
   \   00000028   1249               LDR      R1,??Timer_10ms_Setup_0+0x20  ;; 0xcc004
   \   0000002A   0160               STR      R1,[R0, #+0]
   1634            //! DIV5 - 1024
   1635           //! DIV4 - 128
   1636           //! DIV3 - 32
   1637           //! DIV2 - 8
   1638           //clock: MCK/1024  = 48054841/1024  =  46928 Hz 
   1639           //AT91C_BASE_TC0->TC_RC = 46928,55;    => 1 sec 
   1640                                   
   1641           AT91C_BASE_TC0->TC_RC = 469;                  //10ms 
   \   0000002C   1248               LDR      R0,??Timer_10ms_Setup_0+0x24  ;; 0xfffa001c
   \   0000002E   FF21               MOVS     R1,#+255
   \   00000030   D631               ADDS     R1,R1,#+214      ;; #+469
   \   00000032   0160               STR      R1,[R0, #+0]
   1642           AT91C_BASE_TC0->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000034   1148               LDR      R0,??Timer_10ms_Setup_0+0x28  ;; 0xfffa0024
   \   00000036   1021               MOVS     R1,#+16
   \   00000038   0160               STR      R1,[R0, #+0]
   1643           AT91C_BASE_TC0->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   0000003A   1148               LDR      R0,??Timer_10ms_Setup_0+0x2C  ;; 0xfffa0028
   \   0000003C   1021               MOVS     R1,#+16
   \   0000003E   C943               MVNS     R1,R1            ;; #-17
   \   00000040   0160               STR      R1,[R0, #+0]
   1644           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC0);       //enable int 
   \   00000042   1048               LDR      R0,??Timer_10ms_Setup_0+0x30  ;; 0xfffff120
   \   00000044   8021               MOVS     R1,#+128
   \   00000046   4901               LSLS     R1,R1,#+5        ;; #+4096
   \   00000048   0160               STR      R1,[R0, #+0]
   1645           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC0);       //clear int 
   \   0000004A   0F48               LDR      R0,??Timer_10ms_Setup_0+0x34  ;; 0xfffff128
   \   0000004C   8021               MOVS     R1,#+128
   \   0000004E   4901               LSLS     R1,R1,#+5        ;; #+4096
   \   00000050   0160               STR      R1,[R0, #+0]
   1646            
   1647          
   1648          }//_____________________________________________________________________________
   \   00000052   7047               BX       LR               ;; return
   \                     ??Timer_10ms_Setup_0:
   \   00000054   B0F0FFFF           DC32     0xfffff0b0
   \   00000058   ........           DC32     Timer_10ms
   \   0000005C   30F0FFFF           DC32     0xfffff030
   \   00000060   10FCFFFF           DC32     0xfffffc10
   \   00000064   C000FAFF           DC32     0xfffa00c0
   \   00000068   C400FAFF           DC32     0xfffa00c4
   \   0000006C   0000FAFF           DC32     0xfffa0000
   \   00000070   0400FAFF           DC32     0xfffa0004
   \   00000074   04C00C00           DC32     0xcc004
   \   00000078   1C00FAFF           DC32     0xfffa001c
   \   0000007C   2400FAFF           DC32     0xfffa0024
   \   00000080   2800FAFF           DC32     0xfffa0028
   \   00000084   20F1FFFF           DC32     0xfffff120
   \   00000088   28F1FFFF           DC32     0xfffff128
   1649          
   1650          
   1651          
   1652          
   1653          
   1654          //-----------------------------------------------------------------------------
   1655          //! Nazwa funkcji :    Timer_1ms
   1656          //! Okres: 1ms
   1657          //! Funkcje:
   1658          //!         Funkcja obs³ugi przerwania USART 0  Czas 1 ms
   1659          //!         Triger Timer_10ms 
   1660          //-----------------------------------------------------------------------------
   1661          //  
   1662          //----------------------------------------------------------------------------- 
   1663          
   1664          

   \                                 In section .bss, align 4
   1665          int Counter=0;
   \                     Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1666          int US0_Counter=0;
   \                     US0_Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1667          int US1_Counter=0;
   \                     US1_Counter:
   \   00000000                      DS8 4
   1668          extern char SendModbusEnable;

   \                                 In section .bss, align 1
   1669          char CounterForTimer10ms=0;
   \                     CounterForTimer10ms:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
   1670          short int CurTimeQual=0;
   \                     CurTimeQual:
   \   00000000                      DS8 2
   1671          

   \                                 In section Debug.txt, align 4, keep-with-next
   1672          void Timer_1ms(void)                        //timer isr 
   1673          { 
   \                     Timer_1ms:
   \   00000000   10B5               PUSH     {R4,LR}
   1674            unsigned int dummy2 = AT91C_BASE_TC2->TC_SR;  
   \   00000002   AB48               LDR      R0,??Timer_1ms_0  ;; 0xfffa00a0
   \   00000004   0468               LDR      R4,[R0, #+0]
   1675            
   1676            g_counter++;
   \   00000006   AB4A               LDR      R2,??Timer_1ms_0+0x4  ;; g_counter
   \   00000008   AA48               LDR      R0,??Timer_1ms_0+0x4  ;; g_counter
   \   0000000A   03C8               LDM      R0!,{R0,R1}
   \   0000000C   0023               MOVS     R3,#+0
   \   0000000E   401C               ADDS     R0,R0,#+1
   \   00000010   5941               ADCS     R1,R1,R3
   \   00000012   03C2               STM      R2!,{R0,R1}
   \   00000014   083A               SUBS     R2,R2,#+8
   1677          
   1678            
   1679          
   1680            
   1681            
   1682            /*
   1683            
   1684          
   1685          
   1686            
   1687            //obs³uga US0
   1688            if (US0_MasterMODBUS_ENABLE)
   1689            {
   1690            if (US0_Counter>g_US0_Comm_MinCykle) 
   1691            {
   1692              
   1693                if (g_Ans_ZD_MODBUS_0 == g_US0_Comm_TIMEOUT)
   1694                {
   1695                    ZD_MODBUS_0[g_Current_ZD_MODBUS_0].Error ++;
   1696                }
   1697              
   1698                
   1699                if (g_Ans_ZD_MODBUS_0 >= g_US0_Comm_TIMEOUT)
   1700                {
   1701          
   1702                    //AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
   1703             
   1704                    g_Ans_ZD_MODBUS_0=0;
   1705                    SendModbusEnable=0;
   1706                  //  ModBus_MASTER_TX(0);
   1707                    
   1708                    US0_Counter=0;
   1709                }
   1710                else
   1711                {
   1712                    g_Ans_ZD_MODBUS_0++;
   1713          
   1714                }
   1715              
   1716            }
   1717            else
   1718            {
   1719              US0_Counter++; 
   1720            }
   1721            }
   1722            
   1723          
   1724          
   1725            if (US1_MasterMODBUS_ENABLE)
   1726            {
   1727            if (US1_Counter>g_US0_Comm_MinCykle) 
   1728            {
   1729              
   1730                if (g_Ans_ZD_MODBUS_1 == g_US1_Comm_TIMEOUT)
   1731                {
   1732                    ZD_MODBUS_1[g_Current_ZD_MODBUS_1].Error ++;
   1733                }
   1734                
   1735                if (g_Ans_ZD_MODBUS_1 >= g_US1_Comm_TIMEOUT)
   1736                {
   1737             
   1738                    g_Ans_ZD_MODBUS_1=0;
   1739                    ModBus_MASTER_TX(1);
   1740                    
   1741                    US0_Counter=1;
   1742                }
   1743                else
   1744                {
   1745                    g_Ans_ZD_MODBUS_1++;
   1746          
   1747                }
   1748              
   1749            }
   1750            else
   1751            {
   1752              US1_Counter++; 
   1753            }
   1754            }
   1755          */
   1756            
   1757            
   1758          
   1759          if (ButtonBipCounter<g_counter) AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                                            ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000016   A848               LDR      R0,??Timer_1ms_0+0x8  ;; ButtonBipCounter
   \   00000018   0CC8               LDM      R0!,{R2,R3}
   \   0000001A   0838               SUBS     R0,R0,#+8
   \   0000001C   A548               LDR      R0,??Timer_1ms_0+0x4  ;; g_counter
   \   0000001E   03C8               LDM      R0!,{R0,R1}
   \   00000020   8B42               CMP      R3,R1
   \   00000022   06D8               BHI      ??Timer_1ms_1
   \   00000024   01D3               BCC      ??Timer_1ms_2
   \   00000026   8242               CMP      R2,R0
   \   00000028   03D2               BCS      ??Timer_1ms_1
   \                     ??Timer_1ms_2:
   \   0000002A   A448               LDR      R0,??Timer_1ms_0+0xC  ;; 0xfffff434
   \   0000002C   8021               MOVS     R1,#+128
   \   0000002E   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000030   0160               STR      R1,[R0, #+0]
   1760          
   1761            
   1762            
   1763            static int RF_SlaveCounter;
   1764          
   1765            
   1766            
   1767          //TimeOut RF -----
   1768           
   1769            
   1770          if (RF_Status.AllReady)
   \                     ??Timer_1ms_1:
   \   00000032   A348               LDR      R0,??Timer_1ms_0+0x10  ;; RF_Status + 16
   \   00000034   0078               LDRB     R0,[R0, #+0]
   \   00000036   0028               CMP      R0,#+0
   \   00000038   00D1               BNE      .+4
   \   0000003A   CEE0               B        ??Timer_1ms_3
   1771          {
   1772            
   1773            //Prze³¹czanie w tryb Master + zabezpieczenie przed utkniêciem w trybie slave na d³u¿ej ni¿ 400ms;
   1774            if (SlaveMode)                                        
   \   0000003C   A148               LDR      R0,??Timer_1ms_0+0x14  ;; SlaveMode
   \   0000003E   0078               LDRB     R0,[R0, #+0]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   2BD0               BEQ      ??Timer_1ms_4
   1775            {
   1776              if (RF_Status.SlaveModeTimeout>0) RF_Status.SlaveModeTimeout--;
   \   00000044   A048               LDR      R0,??Timer_1ms_0+0x18  ;; RF_Status + 19
   \   00000046   0078               LDRB     R0,[R0, #+0]
   \   00000048   0128               CMP      R0,#+1
   \   0000004A   04D3               BCC      ??Timer_1ms_5
   \   0000004C   9E48               LDR      R0,??Timer_1ms_0+0x18  ;; RF_Status + 19
   \   0000004E   9E49               LDR      R1,??Timer_1ms_0+0x18  ;; RF_Status + 19
   \   00000050   0978               LDRB     R1,[R1, #+0]
   \   00000052   491E               SUBS     R1,R1,#+1
   \   00000054   0170               STRB     R1,[R0, #+0]
   1777              if (RF_Status.TimeInSlaveMode<MAX_TIME_FOR_SLAVE_ASK+100) {RF_Status.TimeInSlaveMode++;}else {RF_Status.SlaveModeTimeout=0;}
   \                     ??Timer_1ms_5:
   \   00000056   9D48               LDR      R0,??Timer_1ms_0+0x1C  ;; RF_Status + 22
   \   00000058   0088               LDRH     R0,[R0, #+0]
   \   0000005A   E121               MOVS     R1,#+225
   \   0000005C   4900               LSLS     R1,R1,#+1        ;; #+450
   \   0000005E   8842               CMP      R0,R1
   \   00000060   05D2               BCS      ??Timer_1ms_6
   \   00000062   9A48               LDR      R0,??Timer_1ms_0+0x1C  ;; RF_Status + 22
   \   00000064   9949               LDR      R1,??Timer_1ms_0+0x1C  ;; RF_Status + 22
   \   00000066   0988               LDRH     R1,[R1, #+0]
   \   00000068   491C               ADDS     R1,R1,#+1
   \   0000006A   0180               STRH     R1,[R0, #+0]
   \   0000006C   02E0               B        ??Timer_1ms_7
   \                     ??Timer_1ms_6:
   \   0000006E   9648               LDR      R0,??Timer_1ms_0+0x18  ;; RF_Status + 19
   \   00000070   0021               MOVS     R1,#+0
   \   00000072   0170               STRB     R1,[R0, #+0]
   1778              if (RF_Status.SlaveModeTimeout==0) 
   \                     ??Timer_1ms_7:
   \   00000074   9448               LDR      R0,??Timer_1ms_0+0x18  ;; RF_Status + 19
   \   00000076   0078               LDRB     R0,[R0, #+0]
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   02D1               BNE      ??Timer_1ms_8
   1779              {
   1780                SwitchToMaster();
   \   0000007C   ........           BL       SwitchToMaster
   \   00000080   15E0               B        ??Timer_1ms_9
   1781              }else{
   1782                if ((RF_Status.EnRx==0) && (RF_Status.InitRx==0))
   \                     ??Timer_1ms_8:
   \   00000082   9348               LDR      R0,??Timer_1ms_0+0x20  ;; RF_Status + 1
   \   00000084   0078               LDRB     R0,[R0, #+0]
   \   00000086   0028               CMP      R0,#+0
   \   00000088   11D1               BNE      ??Timer_1ms_9
   \   0000008A   9248               LDR      R0,??Timer_1ms_0+0x24  ;; RF_Status + 4
   \   0000008C   0078               LDRB     R0,[R0, #+0]
   \   0000008E   0028               CMP      R0,#+0
   \   00000090   0DD1               BNE      ??Timer_1ms_9
   1783                {
   1784                  RF_Status.EnableRX();
   \   00000092   9148               LDR      R0,??Timer_1ms_0+0x28  ;; RF_Status + 40
   \   00000094   0068               LDR      R0,[R0, #+0]
   \   00000096   ........           BL       __iar_via_R0
   \   0000009A   08E0               B        ??Timer_1ms_9
   1785                }
   1786              }
   1787            }else{
   1788              if (RF_Status.TimeInMasterMode<0xFF) RF_Status.TimeInMasterMode++;
   \                     ??Timer_1ms_4:
   \   0000009C   8F48               LDR      R0,??Timer_1ms_0+0x2C  ;; RF_Status + 20
   \   0000009E   0088               LDRH     R0,[R0, #+0]
   \   000000A0   FF28               CMP      R0,#+255
   \   000000A2   04D2               BCS      ??Timer_1ms_9
   \   000000A4   8D48               LDR      R0,??Timer_1ms_0+0x2C  ;; RF_Status + 20
   \   000000A6   8D49               LDR      R1,??Timer_1ms_0+0x2C  ;; RF_Status + 20
   \   000000A8   0988               LDRH     R1,[R1, #+0]
   \   000000AA   491C               ADDS     R1,R1,#+1
   \   000000AC   0180               STRH     R1,[R0, #+0]
   1789              
   1790            }
   1791                   
   1792            
   1793            static char PraboblySlaveConstChanel=0xFF;   //prawdopodobny kana³ slave (by³a wczeœniej na nim komunikacja) 0xff - brak kana³u
   1794            
   1795            if (RF_Status.MasterMode)
   \                     ??Timer_1ms_9:
   \   000000AE   8C48               LDR      R0,??Timer_1ms_0+0x30  ;; RF_Status + 13
   \   000000B0   0078               LDRB     R0,[R0, #+0]
   \   000000B2   0028               CMP      R0,#+0
   \   000000B4   19D0               BEQ      ??Timer_1ms_10
   1796            {
   1797              if ((!SlaveMode) && (g_Stop_Program==0))
   \   000000B6   8348               LDR      R0,??Timer_1ms_0+0x14  ;; SlaveMode
   \   000000B8   0078               LDRB     R0,[R0, #+0]
   \   000000BA   8A49               LDR      R1,??Timer_1ms_0+0x34  ;; g_Stop_Program
   \   000000BC   0978               LDRB     R1,[R1, #+0]
   \   000000BE   0143               ORRS     R1,R1,R0
   \   000000C0   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000C2   090E               LSRS     R1,R1,#+24
   \   000000C4   0029               CMP      R1,#+0
   \   000000C6   00D0               BEQ      .+4
   \   000000C8   87E0               B        ??Timer_1ms_3
   1798              if (g_RF_TimeOutCounter>0)
   \   000000CA   8748               LDR      R0,??Timer_1ms_0+0x38  ;; g_RF_TimeOutCounter
   \   000000CC   0078               LDRB     R0,[R0, #+0]
   \   000000CE   0128               CMP      R0,#+1
   \   000000D0   05D3               BCC      ??Timer_1ms_11
   1799              {
   1800                g_RF_TimeOutCounter--;
   \   000000D2   8548               LDR      R0,??Timer_1ms_0+0x38  ;; g_RF_TimeOutCounter
   \   000000D4   8449               LDR      R1,??Timer_1ms_0+0x38  ;; g_RF_TimeOutCounter
   \   000000D6   0978               LDRB     R1,[R1, #+0]
   \   000000D8   491E               SUBS     R1,R1,#+1
   \   000000DA   0170               STRB     R1,[R0, #+0]
   \   000000DC   7DE0               B        ??Timer_1ms_3
   1801          
   1802           
   1803              }else{
   1804                 g_RF_TimeOutCounter=RF_TimeOut; 
   \                     ??Timer_1ms_11:
   \   000000DE   8248               LDR      R0,??Timer_1ms_0+0x38  ;; g_RF_TimeOutCounter
   \   000000E0   0921               MOVS     R1,#+9
   \   000000E2   0170               STRB     R1,[R0, #+0]
   1805                 RF_MasterExecut();
   \   000000E4   ........           BL       RF_MasterExecut
   \   000000E8   77E0               B        ??Timer_1ms_3
   1806              }
   1807            }else{
   1808                  
   1809                  RF_SlaveCounter++;
   \                     ??Timer_1ms_10:
   \   000000EA   8048               LDR      R0,??Timer_1ms_0+0x3C  ;; ??RF_SlaveCounter
   \   000000EC   7F49               LDR      R1,??Timer_1ms_0+0x3C  ;; ??RF_SlaveCounter
   \   000000EE   0968               LDR      R1,[R1, #+0]
   \   000000F0   491C               ADDS     R1,R1,#+1
   \   000000F2   0160               STR      R1,[R0, #+0]
   1810               
   1811                  
   1812                    if (RF_Status.ConfResiveSlave==2) //je¿eli poprawnie odebrano dane 
   \   000000F4   7E48               LDR      R0,??Timer_1ms_0+0x40  ;; RF_Status + 12
   \   000000F6   0078               LDRB     R0,[R0, #+0]
   \   000000F8   0228               CMP      R0,#+2
   \   000000FA   0DD1               BNE      ??Timer_1ms_12
   1813                    {
   1814                      PraboblySlaveConstChanel=RF_Status.ChSlave;
   \   000000FC   7D48               LDR      R0,??Timer_1ms_0+0x44  ;; ??PraboblySlaveConstChanel
   \   000000FE   7E49               LDR      R1,??Timer_1ms_0+0x48  ;; RF_Status + 15
   \   00000100   0978               LDRB     R1,[R1, #+0]
   \   00000102   0170               STRB     R1,[R0, #+0]
   1815                      RF_SlaveCounter=0;   //- zeruj licznik
   \   00000104   7948               LDR      R0,??Timer_1ms_0+0x3C  ;; ??RF_SlaveCounter
   \   00000106   0021               MOVS     R1,#+0
   \   00000108   0160               STR      R1,[R0, #+0]
   1816                      RF_Status.ConfResiveSlave=1;
   \   0000010A   7948               LDR      R0,??Timer_1ms_0+0x40  ;; RF_Status + 12
   \   0000010C   0121               MOVS     R1,#+1
   \   0000010E   0170               STRB     R1,[R0, #+0]
   1817                      g_SlaveConnect=1;    //ustawia flagê poprawnej transmisji slave
   \   00000110   7A48               LDR      R0,??Timer_1ms_0+0x4C  ;; g_SlaveConnect
   \   00000112   0121               MOVS     R1,#+1
   \   00000114   0170               STRB     R1,[R0, #+0]
   \   00000116   60E0               B        ??Timer_1ms_3
   1818                    }else{
   1819            
   1820                      short LongWait=1000;
   \                     ??Timer_1ms_12:
   \   00000118   FA20               MOVS     R0,#+250
   \   0000011A   8000               LSLS     R0,R0,#+2        ;; #+1000
   1821                      if (PraboblySlaveConstChanel==RF_Status.ChSlave) LongWait=10000;
   \   0000011C   7549               LDR      R1,??Timer_1ms_0+0x44  ;; ??PraboblySlaveConstChanel
   \   0000011E   0978               LDRB     R1,[R1, #+0]
   \   00000120   754A               LDR      R2,??Timer_1ms_0+0x48  ;; RF_Status + 15
   \   00000122   1278               LDRB     R2,[R2, #+0]
   \   00000124   9142               CMP      R1,R2
   \   00000126   00D1               BNE      ??Timer_1ms_13
   \   00000128   7548               LDR      R0,??Timer_1ms_0+0x50  ;; 0x2710
   1822                      
   1823                      if (((RF_SlaveCounter==100)  && (RF_Status.ConfResiveSlave==0)) //je¿eli nie odebrano danych w czasie 100ms
   1824                      || ((RF_SlaveCounter>=LongWait) && (RF_Status.ConfResiveSlave<2))  //je¿eli nie odebrano danych o w³aœciwym ID w czasie 1000ms
   1825                        )
   \                     ??Timer_1ms_13:
   \   0000012A   7049               LDR      R1,??Timer_1ms_0+0x3C  ;; ??RF_SlaveCounter
   \   0000012C   0968               LDR      R1,[R1, #+0]
   \   0000012E   6429               CMP      R1,#+100
   \   00000130   03D1               BNE      ??Timer_1ms_14
   \   00000132   6F49               LDR      R1,??Timer_1ms_0+0x40  ;; RF_Status + 12
   \   00000134   0978               LDRB     R1,[R1, #+0]
   \   00000136   0029               CMP      R1,#+0
   \   00000138   09D0               BEQ      ??Timer_1ms_15
   \                     ??Timer_1ms_14:
   \   0000013A   6C49               LDR      R1,??Timer_1ms_0+0x3C  ;; ??RF_SlaveCounter
   \   0000013C   0968               LDR      R1,[R1, #+0]
   \   0000013E   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000140   0014               ASRS     R0,R0,#+16
   \   00000142   8142               CMP      R1,R0
   \   00000144   49DB               BLT      ??Timer_1ms_3
   \   00000146   6A48               LDR      R0,??Timer_1ms_0+0x40  ;; RF_Status + 12
   \   00000148   0078               LDRB     R0,[R0, #+0]
   \   0000014A   0228               CMP      R0,#+2
   \   0000014C   45D2               BCS      ??Timer_1ms_3
   1826                      {
   1827          
   1828                           SPI_SendWord(0x8219,Cs_RF); 
                                  ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \                     ??Timer_1ms_15:
   \   0000014E   0221               MOVS     R1,#+2
   \   00000150   6C48               LDR      R0,??Timer_1ms_0+0x54  ;; 0x8219
   \   00000152   ........           BL       SPI_SendWord
   1829                           RF_SlaveCounter=0;   //- zeruj licznik
   \   00000156   6548               LDR      R0,??Timer_1ms_0+0x3C  ;; ??RF_SlaveCounter
   \   00000158   0021               MOVS     R1,#+0
   \   0000015A   0160               STR      R1,[R0, #+0]
   1830                           RF_Status.ConfResiveSlave=0;
   \   0000015C   6448               LDR      R0,??Timer_1ms_0+0x40  ;; RF_Status + 12
   \   0000015E   0021               MOVS     R1,#+0
   \   00000160   0170               STRB     R1,[R0, #+0]
   1831                           g_SlaveConnect=0; 
   \   00000162   6648               LDR      R0,??Timer_1ms_0+0x4C  ;; g_SlaveConnect
   \   00000164   0021               MOVS     R1,#+0
   \   00000166   0170               STRB     R1,[R0, #+0]
   1832                           
   1833                           if (RF_Status.AllReady) if (RF_Status.ChSlave<RF_ChannelQuanti-1) {RF_Status.ChSlave++;} else {RF_Status.ChSlave=0;}
   \   00000168   5548               LDR      R0,??Timer_1ms_0+0x10  ;; RF_Status + 16
   \   0000016A   0078               LDRB     R0,[R0, #+0]
   \   0000016C   0028               CMP      R0,#+0
   \   0000016E   0CD0               BEQ      ??Timer_1ms_16
   \   00000170   6148               LDR      R0,??Timer_1ms_0+0x48  ;; RF_Status + 15
   \   00000172   0078               LDRB     R0,[R0, #+0]
   \   00000174   2728               CMP      R0,#+39
   \   00000176   05D2               BCS      ??Timer_1ms_17
   \   00000178   5F48               LDR      R0,??Timer_1ms_0+0x48  ;; RF_Status + 15
   \   0000017A   5F49               LDR      R1,??Timer_1ms_0+0x48  ;; RF_Status + 15
   \   0000017C   0978               LDRB     R1,[R1, #+0]
   \   0000017E   491C               ADDS     R1,R1,#+1
   \   00000180   0170               STRB     R1,[R0, #+0]
   \   00000182   02E0               B        ??Timer_1ms_16
   \                     ??Timer_1ms_17:
   \   00000184   5C48               LDR      R0,??Timer_1ms_0+0x48  ;; RF_Status + 15
   \   00000186   0021               MOVS     R1,#+0
   \   00000188   0170               STRB     R1,[R0, #+0]
   1834                           SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
   \                     ??Timer_1ms_16:
   \   0000018A   0221               MOVS     R1,#+2
   \   0000018C   0C00               MOVS     R4,R1
   \   0000018E   5A48               LDR      R0,??Timer_1ms_0+0x48  ;; RF_Status + 15
   \   00000190   0078               LDRB     R0,[R0, #+0]
   \   00000192   ........           BL       __aeabi_ui2d
   \   00000196   5C4A               LDR      R2,??Timer_1ms_0+0x58  ;; 0x33333333
   \   00000198   5C4B               LDR      R3,??Timer_1ms_0+0x5C  ;; 0x3fd33333
   \   0000019A   ........           BL       __aeabi_dmul
   \   0000019E   5C4A               LDR      R2,??Timer_1ms_0+0x60  ;; 0x5c28f5c3
   \   000001A0   5C4B               LDR      R3,??Timer_1ms_0+0x64  ;; 0x408ae28f
   \   000001A2   ........           BL       __aeabi_dadd
   \   000001A6   0022               MOVS     R2,#+0
   \   000001A8   5B4B               LDR      R3,??Timer_1ms_0+0x68  ;; 0x40690000
   \   000001AA   ........           BL       __aeabi_dmul
   \   000001AE   0022               MOVS     R2,#+0
   \   000001B0   5A4B               LDR      R3,??Timer_1ms_0+0x6C  ;; 0xc104ff00
   \   000001B2   ........           BL       __aeabi_dadd
   \   000001B6   ........           BL       __aeabi_d2iz
   \   000001BA   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   000001BC   0014               ASRS     R0,R0,#+16
   \   000001BE   A021               MOVS     R1,#+160
   \   000001C0   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   000001C2   0143               ORRS     R1,R1,R0
   \   000001C4   0800               MOVS     R0,R1
   \   000001C6   2100               MOVS     R1,R4
   \   000001C8   ........           BL       SPI_SendWord
   1835                           RF_Status.MasterMode=0;  
   \   000001CC   4448               LDR      R0,??Timer_1ms_0+0x30  ;; RF_Status + 13
   \   000001CE   0021               MOVS     R1,#+0
   \   000001D0   0170               STRB     R1,[R0, #+0]
   1836                           RF_Status.EnableRX();
   \   000001D2   4148               LDR      R0,??Timer_1ms_0+0x28  ;; RF_Status + 40
   \   000001D4   0068               LDR      R0,[R0, #+0]
   \   000001D6   ........           BL       __iar_via_R0
   1837                        
   1838                      }
   1839                    
   1840                    }
   1841                   
   1842                    
   1843            }
   1844          }          
   1845          
   1846            
   1847          
   1848            
   1849                //uruchomienie Timer_1s co 1000 cykli-------------------------------------------
   1850                static short CounterForTimer1s; 
   1851                if (CounterForTimer1s<1000)
   \                     ??Timer_1ms_3:
   \   000001DA   5148               LDR      R0,??Timer_1ms_0+0x70  ;; ??CounterForTimer1s
   \   000001DC   0021               MOVS     R1,#+0
   \   000001DE   405E               LDRSH    R0,[R0, R1]
   \   000001E0   FA21               MOVS     R1,#+250
   \   000001E2   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   000001E4   8842               CMP      R0,R1
   \   000001E6   06DA               BGE      ??Timer_1ms_18
   1852                {
   1853                    CounterForTimer1s++;
   \   000001E8   4D48               LDR      R0,??Timer_1ms_0+0x70  ;; ??CounterForTimer1s
   \   000001EA   4D49               LDR      R1,??Timer_1ms_0+0x70  ;; ??CounterForTimer1s
   \   000001EC   0022               MOVS     R2,#+0
   \   000001EE   895E               LDRSH    R1,[R1, R2]
   \   000001F0   491C               ADDS     R1,R1,#+1
   \   000001F2   0180               STRH     R1,[R0, #+0]
   \   000001F4   04E0               B        ??Timer_1ms_19
   1854                }else{
   1855                    CounterForTimer1s=0;
   \                     ??Timer_1ms_18:
   \   000001F6   4A48               LDR      R0,??Timer_1ms_0+0x70  ;; ??CounterForTimer1s
   \   000001F8   0021               MOVS     R1,#+0
   \   000001FA   0180               STRH     R1,[R0, #+0]
   1856                    Timer_1s();
   \   000001FC   ........           BL       Timer_1s
   1857                }
   1858          
   1859          
   1860          
   1861            
   1862            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ TimeUnitQual
   1863            if (++CurTimeQual>=TimeUnitQual)
   \                     ??Timer_1ms_19:
   \   00000200   4848               LDR      R0,??Timer_1ms_0+0x74  ;; CurTimeQual
   \   00000202   0021               MOVS     R1,#+0
   \   00000204   405E               LDRSH    R0,[R0, R1]
   \   00000206   401C               ADDS     R0,R0,#+1
   \   00000208   4649               LDR      R1,??Timer_1ms_0+0x74  ;; CurTimeQual
   \   0000020A   0880               STRH     R0,[R1, #+0]
   \   0000020C   9621               MOVS     R1,#+150
   \   0000020E   8900               LSLS     R1,R1,#+2        ;; #+600
   \   00000210   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000212   0014               ASRS     R0,R0,#+16
   \   00000214   8842               CMP      R0,R1
   \   00000216   47DB               BLT      ??Timer_1ms_20
   1864            {
   1865              CurTimeQual=0;
   \   00000218   4248               LDR      R0,??Timer_1ms_0+0x74  ;; CurTimeQual
   \   0000021A   0021               MOVS     R1,#+0
   \   0000021C   0180               STRH     R1,[R0, #+0]
   1866              if (TransQuality.MensurIndex<32)
   \   0000021E   4248               LDR      R0,??Timer_1ms_0+0x78  ;; TransQuality
   \   00000220   0078               LDRB     R0,[R0, #+0]
   \   00000222   2028               CMP      R0,#+32
   \   00000224   05D2               BCS      ??Timer_1ms_21
   1867              {
   1868                TransQuality.MensurIndex++; 
   \   00000226   4048               LDR      R0,??Timer_1ms_0+0x78  ;; TransQuality
   \   00000228   3F49               LDR      R1,??Timer_1ms_0+0x78  ;; TransQuality
   \   0000022A   0978               LDRB     R1,[R1, #+0]
   \   0000022C   491C               ADDS     R1,R1,#+1
   \   0000022E   0170               STRB     R1,[R0, #+0]
   \   00000230   02E0               B        ??Timer_1ms_22
   1869              }else{
   1870                TransQuality.MensurIndex=0;
   \                     ??Timer_1ms_21:
   \   00000232   3D48               LDR      R0,??Timer_1ms_0+0x78  ;; TransQuality
   \   00000234   0021               MOVS     R1,#+0
   \   00000236   0170               STRB     R1,[R0, #+0]
   1871              }
   1872              if (TransQuality.QuickMensurIndex<4)
   \                     ??Timer_1ms_22:
   \   00000238   3C48               LDR      R0,??Timer_1ms_0+0x7C  ;; TransQuality + 2
   \   0000023A   0078               LDRB     R0,[R0, #+0]
   \   0000023C   0428               CMP      R0,#+4
   \   0000023E   05D2               BCS      ??Timer_1ms_23
   1873              {
   1874                TransQuality.QuickMensurIndex++; 
   \   00000240   3A48               LDR      R0,??Timer_1ms_0+0x7C  ;; TransQuality + 2
   \   00000242   3A49               LDR      R1,??Timer_1ms_0+0x7C  ;; TransQuality + 2
   \   00000244   0978               LDRB     R1,[R1, #+0]
   \   00000246   491C               ADDS     R1,R1,#+1
   \   00000248   0170               STRB     R1,[R0, #+0]
   \   0000024A   02E0               B        ??Timer_1ms_24
   1875              }else{
   1876                TransQuality.QuickMensurIndex=0;
   \                     ??Timer_1ms_23:
   \   0000024C   3748               LDR      R0,??Timer_1ms_0+0x7C  ;; TransQuality + 2
   \   0000024E   0021               MOVS     R1,#+0
   \   00000250   0170               STRB     R1,[R0, #+0]
   1877              }
   1878          
   1879              for (char i=0; i<NumberNeurons; i++) 
   \                     ??Timer_1ms_24:
   \   00000252   0020               MOVS     R0,#+0
   \   00000254   24E0               B        ??Timer_1ms_25
   1880              {
   1881                TransQuality.Mensur[i] &= ~(0x1 << TransQuality.MensurIndex);
   \                     ??Timer_1ms_26:
   \   00000256   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000258   000E               LSRS     R0,R0,#+24
   \   0000025A   0421               MOVS     R1,#+4
   \   0000025C   4143               MULS     R1,R0,R1
   \   0000025E   324A               LDR      R2,??Timer_1ms_0+0x78  ;; TransQuality
   \   00000260   5118               ADDS     R1,R2,R1
   \   00000262   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000264   000E               LSRS     R0,R0,#+24
   \   00000266   0422               MOVS     R2,#+4
   \   00000268   4243               MULS     R2,R0,R2
   \   0000026A   2F4B               LDR      R3,??Timer_1ms_0+0x78  ;; TransQuality
   \   0000026C   9A18               ADDS     R2,R3,R2
   \   0000026E   D26C               LDR      R2,[R2, #+76]
   \   00000270   0123               MOVS     R3,#+1
   \   00000272   2D4C               LDR      R4,??Timer_1ms_0+0x78  ;; TransQuality
   \   00000274   2478               LDRB     R4,[R4, #+0]
   \   00000276   A340               LSLS     R3,R3,R4
   \   00000278   9A43               BICS     R2,R2,R3
   \   0000027A   CA64               STR      R2,[R1, #+76]
   1882                TransQuality.QuickMensur[i] &= ~(0x1 << TransQuality.QuickMensurIndex);
   \   0000027C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000027E   000E               LSRS     R0,R0,#+24
   \   00000280   2949               LDR      R1,??Timer_1ms_0+0x78  ;; TransQuality
   \   00000282   0918               ADDS     R1,R1,R0
   \   00000284   2631               ADDS     R1,R1,#+38
   \   00000286   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000288   000E               LSRS     R0,R0,#+24
   \   0000028A   274A               LDR      R2,??Timer_1ms_0+0x78  ;; TransQuality
   \   0000028C   1218               ADDS     R2,R2,R0
   \   0000028E   2632               ADDS     R2,R2,#+38
   \   00000290   1278               LDRB     R2,[R2, #+0]
   \   00000292   0123               MOVS     R3,#+1
   \   00000294   254C               LDR      R4,??Timer_1ms_0+0x7C  ;; TransQuality + 2
   \   00000296   2478               LDRB     R4,[R4, #+0]
   \   00000298   A340               LSLS     R3,R3,R4
   \   0000029A   9A43               BICS     R2,R2,R3
   \   0000029C   0A70               STRB     R2,[R1, #+0]
   1883              }                 
   \   0000029E   401C               ADDS     R0,R0,#+1
   \                     ??Timer_1ms_25:
   \   000002A0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002A2   000E               LSRS     R0,R0,#+24
   \   000002A4   2328               CMP      R0,#+35
   \   000002A6   D6D3               BCC      ??Timer_1ms_26
   1884            }
   1885          
   1886            
   1887          
   1888                    
   1889                 
   1890          
   1891          
   1892          }//_____________________________________________________________________________
   \                     ??Timer_1ms_20:
   \   000002A8   10BC               POP      {R4}
   \   000002AA   01BC               POP      {R0}
   \   000002AC   0047               BX       R0               ;; return
   \   000002AE   C046               Nop      
   \                     ??Timer_1ms_0:
   \   000002B0   A000FAFF           DC32     0xfffa00a0
   \   000002B4   ........           DC32     g_counter
   \   000002B8   ........           DC32     ButtonBipCounter
   \   000002BC   34F4FFFF           DC32     0xfffff434
   \   000002C0   ........           DC32     RF_Status + 16
   \   000002C4   ........           DC32     SlaveMode
   \   000002C8   ........           DC32     RF_Status + 19
   \   000002CC   ........           DC32     RF_Status + 22
   \   000002D0   ........           DC32     RF_Status + 1
   \   000002D4   ........           DC32     RF_Status + 4
   \   000002D8   ........           DC32     RF_Status + 40
   \   000002DC   ........           DC32     RF_Status + 20
   \   000002E0   ........           DC32     RF_Status + 13
   \   000002E4   ........           DC32     g_Stop_Program
   \   000002E8   ........           DC32     g_RF_TimeOutCounter
   \   000002EC   ........           DC32     ??RF_SlaveCounter
   \   000002F0   ........           DC32     RF_Status + 12
   \   000002F4   ........           DC32     ??PraboblySlaveConstChanel
   \   000002F8   ........           DC32     RF_Status + 15
   \   000002FC   ........           DC32     g_SlaveConnect
   \   00000300   10270000           DC32     0x2710
   \   00000304   19820000           DC32     0x8219
   \   00000308   33333333           DC32     0x33333333
   \   0000030C   3333D33F           DC32     0x3fd33333
   \   00000310   C3F5285C           DC32     0x5c28f5c3
   \   00000314   8FE28A40           DC32     0x408ae28f
   \   00000318   00006940           DC32     0x40690000
   \   0000031C   00FF04C1           DC32     0xc104ff00
   \   00000320   ........           DC32     ??CounterForTimer1s
   \   00000324   ........           DC32     CurTimeQual
   \   00000328   ........           DC32     TransQuality
   \   0000032C   ........           DC32     TransQuality + 2

   \                                 In section .bss, align 4
   \                     ??RF_SlaveCounter:
   \   00000000                      DS8 4

   \                                 In section .data, align 1
   \                     ??PraboblySlaveConstChanel:
   \   00000000   FF                 DC8 255

   \                                 In section .bss, align 2
   \                     ??CounterForTimer1s:
   \   00000000                      DS8 2
   1893          
   1894          
   1895          
   1896          
   1897          
   1898          //-----------------------------------------------------------------------------
   1899          //!  Nazwa funkcji :    Timer_1_Setup
   1900          //!  Funkcja inicjalizacji Timer1 - 1ms
   1901          //-----------------------------------------------------------------------------
   1902          //! 
   1903          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1904          void Timer_1ms_Setup(void) 
   1905          { 
   1906            //TRACE_INFO("T2_setup");  
   1907            //TRACE_INFO("\n\r"); 
   1908            
   1909           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
   1910           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
   1911           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC2] = (unsigned int)Timer_1ms;  //set AIC             
   \                     Timer_1ms_Setup:
   \   00000000   1448               LDR      R0,??Timer_1ms_Setup_0  ;; 0xfffff0b8
   \   00000002   1549               LDR      R1,??Timer_1ms_Setup_0+0x4  ;; Timer_1ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1912           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC2] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_1mS_PRIOR ); 
   \   00000006   1548               LDR      R0,??Timer_1ms_Setup_0+0x8  ;; 0xfffff038
   \   00000008   0421               MOVS     R1,#+4
   \   0000000A   0160               STR      R1,[R0, #+0]
   1913           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC2);      //enable clock 
   \   0000000C   1448               LDR      R0,??Timer_1ms_Setup_0+0xC  ;; 0xfffffc10
   \   0000000E   8021               MOVS     R1,#+128
   \   00000010   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   00000012   0160               STR      R1,[R0, #+0]
   1914           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1348               LDR      R0,??Timer_1ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0021               MOVS     R1,#+0
   \   00000018   0160               STR      R1,[R0, #+0]
   1915           //no external clocks 
   1916           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1348               LDR      R0,??Timer_1ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1521               MOVS     R1,#+21
   \   0000001E   0160               STR      R1,[R0, #+0]
   1917           AT91C_BASE_TC2->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1248               LDR      R0,??Timer_1ms_Setup_0+0x18  ;; 0xfffa0080
   \   00000022   0521               MOVS     R1,#+5
   \   00000024   0160               STR      R1,[R0, #+0]
   1918           AT91C_BASE_TC2->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000026   1248               LDR      R0,??Timer_1ms_Setup_0+0x1C  ;; 0xfffa0084
   \   00000028   1249               LDR      R1,??Timer_1ms_Setup_0+0x20  ;; 0xcc001
   \   0000002A   0160               STR      R1,[R0, #+0]
   1919           //clock: MCK/1024  = 48054841/ DIV
   1920           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
   1921           //! DIV5 - 1024
   1922           //! DIV4 - 128
   1923           //! DIV3 - 32
   1924           //! DIV2 - 8
   1925           
   1926           AT91C_BASE_TC2->TC_RC = 6007;                  //1ms  (z wyliczeñ 6007)
   \   0000002C   1248               LDR      R0,??Timer_1ms_Setup_0+0x24  ;; 0xfffa009c
   \   0000002E   1349               LDR      R1,??Timer_1ms_Setup_0+0x28  ;; 0x1777
   \   00000030   0160               STR      R1,[R0, #+0]
   1927           AT91C_BASE_TC2->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000032   1348               LDR      R0,??Timer_1ms_Setup_0+0x2C  ;; 0xfffa00a4
   \   00000034   1021               MOVS     R1,#+16
   \   00000036   0160               STR      R1,[R0, #+0]
   1928           AT91C_BASE_TC2->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000038   1248               LDR      R0,??Timer_1ms_Setup_0+0x30  ;; 0xfffa00a8
   \   0000003A   1021               MOVS     R1,#+16
   \   0000003C   C943               MVNS     R1,R1            ;; #-17
   \   0000003E   0160               STR      R1,[R0, #+0]
   1929           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC2);       //enable int 
   \   00000040   1148               LDR      R0,??Timer_1ms_Setup_0+0x34  ;; 0xfffff120
   \   00000042   8021               MOVS     R1,#+128
   \   00000044   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   00000046   0160               STR      R1,[R0, #+0]
   1930           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC2);       //clear int 
   \   00000048   1048               LDR      R0,??Timer_1ms_Setup_0+0x38  ;; 0xfffff128
   \   0000004A   8021               MOVS     R1,#+128
   \   0000004C   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   0000004E   0160               STR      R1,[R0, #+0]
   1931          
   1932          
   1933          
   1934          }//_____________________________________________________________________________
   \   00000050   7047               BX       LR               ;; return
   \   00000052   C046               Nop      
   \                     ??Timer_1ms_Setup_0:
   \   00000054   B8F0FFFF           DC32     0xfffff0b8
   \   00000058   ........           DC32     Timer_1ms
   \   0000005C   38F0FFFF           DC32     0xfffff038
   \   00000060   10FCFFFF           DC32     0xfffffc10
   \   00000064   C000FAFF           DC32     0xfffa00c0
   \   00000068   C400FAFF           DC32     0xfffa00c4
   \   0000006C   8000FAFF           DC32     0xfffa0080
   \   00000070   8400FAFF           DC32     0xfffa0084
   \   00000074   01C00C00           DC32     0xcc001
   \   00000078   9C00FAFF           DC32     0xfffa009c
   \   0000007C   77170000           DC32     0x1777
   \   00000080   A400FAFF           DC32     0xfffa00a4
   \   00000084   A800FAFF           DC32     0xfffa00a8
   \   00000088   20F1FFFF           DC32     0xfffff120
   \   0000008C   28F1FFFF           DC32     0xfffff128
   1935          
   1936          
   1937          
   1938          
   1939          
   1940          
   1941          
   1942          
   1943          
   1944          

   \                                 In section Debug.txt, align 4, keep-with-next
   1945          void RamToFlash(void)
   1946          {
   \                     RamToFlash:
   \   00000000   10B5               PUSH     {R4,LR}
   1947                    //if (g_PC_Connected==0)
   1948                    //{
   1949                      DispWait=DispWaitOn; 
   \   00000002   3948               LDR      R0,??RamToFlash_0  ;; DispWait
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   0170               STRB     R1,[R0, #+0]
   1950                      Wait_Paint();
   \   00000008   ........           BL       Wait_Paint
   1951                    //} 
   1952                      gProg.Preambu=ProgPreambu;
   \   0000000C   3748               LDR      R0,??RamToFlash_0+0x4  ;; gProg
   \   0000000E   AA21               MOVS     R1,#+170
   \   00000010   0170               STRB     R1,[R0, #+0]
   1953                      gProg.ProgFormatTyp=_ProgFormatTyp;
   \   00000012   3748               LDR      R0,??RamToFlash_0+0x8  ;; gProg + 1
   \   00000014   0221               MOVS     R1,#+2
   \   00000016   0170               STRB     R1,[R0, #+0]
   1954                      gProg.Size=sizeof(gProg);
   \   00000018   3648               LDR      R0,??RamToFlash_0+0xC  ;; gProg + 2
   \   0000001A   3749               LDR      R1,??RamToFlash_0+0x10  ;; 0xc670
   \   0000001C   0180               STRH     R1,[R0, #+0]
   1955                      gProg.ModyfiData[0]='2';gProg.ModyfiData[1]='0';
   \   0000001E   3748               LDR      R0,??RamToFlash_0+0x14  ;; gProg + 4
   \   00000020   3221               MOVS     R1,#+50
   \   00000022   0170               STRB     R1,[R0, #+0]
   \   00000024   3648               LDR      R0,??RamToFlash_0+0x18  ;; gProg + 5
   \   00000026   3021               MOVS     R1,#+48
   \   00000028   0170               STRB     R1,[R0, #+0]
   1956                      CharToStr(DateTime.Year, &(gProg.ModyfiData[2]), 2); 
   \   0000002A   0222               MOVS     R2,#+2
   \   0000002C   3549               LDR      R1,??RamToFlash_0+0x1C  ;; gProg + 6
   \   0000002E   3648               LDR      R0,??RamToFlash_0+0x20  ;; DateTime
   \   00000030   0078               LDRB     R0,[R0, #+0]
   \   00000032   ........           BL       CharToStr
   1957                      gProg.ModyfiData[4]='-';
   \   00000036   3548               LDR      R0,??RamToFlash_0+0x24  ;; gProg + 8
   \   00000038   2D21               MOVS     R1,#+45
   \   0000003A   0170               STRB     R1,[R0, #+0]
   1958                      CharToStr(DateTime.Mounth, &(gProg.ModyfiData[5]), 2);
   \   0000003C   0222               MOVS     R2,#+2
   \   0000003E   3449               LDR      R1,??RamToFlash_0+0x28  ;; gProg + 9
   \   00000040   3448               LDR      R0,??RamToFlash_0+0x2C  ;; DateTime + 1
   \   00000042   0078               LDRB     R0,[R0, #+0]
   \   00000044   ........           BL       CharToStr
   1959                      gProg.ModyfiData[7]='-'; 
   \   00000048   3348               LDR      R0,??RamToFlash_0+0x30  ;; gProg + 11
   \   0000004A   2D21               MOVS     R1,#+45
   \   0000004C   0170               STRB     R1,[R0, #+0]
   1960                      CharToStr(DateTime.Day, &(gProg.ModyfiData[8]), 2); 
   \   0000004E   0222               MOVS     R2,#+2
   \   00000050   3249               LDR      R1,??RamToFlash_0+0x34  ;; gProg + 12
   \   00000052   3348               LDR      R0,??RamToFlash_0+0x38  ;; DateTime + 2
   \   00000054   0078               LDRB     R0,[R0, #+0]
   \   00000056   ........           BL       CharToStr
   1961                      gProg.ModyfiData[10]=' ';
   \   0000005A   3248               LDR      R0,??RamToFlash_0+0x3C  ;; gProg + 14
   \   0000005C   2021               MOVS     R1,#+32
   \   0000005E   0170               STRB     R1,[R0, #+0]
   1962                      CharToStr(DateTime.Hour, &(gProg.ModyfiData[11]), 2); 
   \   00000060   0222               MOVS     R2,#+2
   \   00000062   3149               LDR      R1,??RamToFlash_0+0x40  ;; gProg + 15
   \   00000064   3148               LDR      R0,??RamToFlash_0+0x44  ;; DateTime + 3
   \   00000066   0078               LDRB     R0,[R0, #+0]
   \   00000068   ........           BL       CharToStr
   1963                      gProg.ModyfiData[13]=':';
   \   0000006C   3048               LDR      R0,??RamToFlash_0+0x48  ;; gProg + 17
   \   0000006E   3A21               MOVS     R1,#+58
   \   00000070   0170               STRB     R1,[R0, #+0]
   1964                      CharToStr(DateTime.Minute, &(gProg.ModyfiData[14]), 2); 
   \   00000072   0222               MOVS     R2,#+2
   \   00000074   2F49               LDR      R1,??RamToFlash_0+0x4C  ;; gProg + 18
   \   00000076   3048               LDR      R0,??RamToFlash_0+0x50  ;; DateTime + 4
   \   00000078   0078               LDRB     R0,[R0, #+0]
   \   0000007A   ........           BL       CharToStr
   1965                      gProg.ModyfiData[16]=':';
   \   0000007E   2F48               LDR      R0,??RamToFlash_0+0x54  ;; gProg + 20
   \   00000080   3A21               MOVS     R1,#+58
   \   00000082   0170               STRB     R1,[R0, #+0]
   1966                      CharToStr(DateTime.Second, &(gProg.ModyfiData[17]), 2); 
   \   00000084   0222               MOVS     R2,#+2
   \   00000086   2E49               LDR      R1,??RamToFlash_0+0x58  ;; gProg + 21
   \   00000088   2E48               LDR      R0,??RamToFlash_0+0x5C  ;; DateTime + 5
   \   0000008A   0078               LDRB     R0,[R0, #+0]
   \   0000008C   ........           BL       CharToStr
   1967                      for (char i=0; i<19; i++) if (gProg.ModyfiData[i]==0) gProg.ModyfiData[i]='0';
   \   00000090   0020               MOVS     R0,#+0
   \   00000092   0DE0               B        ??RamToFlash_1
   \                     ??RamToFlash_2:
   \   00000094   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000096   000E               LSRS     R0,R0,#+24
   \   00000098   1449               LDR      R1,??RamToFlash_0+0x4  ;; gProg
   \   0000009A   0918               ADDS     R1,R1,R0
   \   0000009C   0979               LDRB     R1,[R1, #+4]
   \   0000009E   0029               CMP      R1,#+0
   \   000000A0   05D1               BNE      ??RamToFlash_3
   \   000000A2   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000A4   000E               LSRS     R0,R0,#+24
   \   000000A6   1149               LDR      R1,??RamToFlash_0+0x4  ;; gProg
   \   000000A8   0918               ADDS     R1,R1,R0
   \   000000AA   3022               MOVS     R2,#+48
   \   000000AC   0A71               STRB     R2,[R1, #+4]
   \                     ??RamToFlash_3:
   \   000000AE   401C               ADDS     R0,R0,#+1
   \                     ??RamToFlash_1:
   \   000000B0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000B2   000E               LSRS     R0,R0,#+24
   \   000000B4   1328               CMP      R0,#+19
   \   000000B6   EDD3               BCC      ??RamToFlash_2
   1968          
   1969                        unsigned int Save = __get_interrupt_state();            
   \   000000B8   ........           BL       __iar_get_interrupt_state
   \   000000BC   0400               MOVS     R4,R0
   1970                        __disable_interrupt();
   \   000000BE   ........           BL       __iar_disable_interrupt
   1971                        //CleanFlash(AT91C_IFLASH_MEM->FlashProgram,sizeof(gProg));
   1972                          FlashWrite((char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset), (char*)&gProg,sizeof(gProg)); //(char *ptrMem, char *value, int length)
                                 ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   000000C2   0D4A               LDR      R2,??RamToFlash_0+0x10  ;; 0xc670
   \   000000C4   0949               LDR      R1,??RamToFlash_0+0x4  ;; gProg
   \   000000C6   2048               LDR      R0,??RamToFlash_0+0x60  ;; FlashProgramOfset
   \   000000C8   0068               LDR      R0,[R0, #+0]
   \   000000CA   204B               LDR      R3,??RamToFlash_0+0x64  ;; 0x130100
   \   000000CC   1818               ADDS     R0,R3,R0
   \   000000CE   ........           BL       FlashWrite
   1973                        //at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,(char*)&gProg,sizeof(gProg));
   1974                        __set_interrupt_state(Save);
   \   000000D2   2000               MOVS     R0,R4
   \   000000D4   ........           BL       __iar_set_interrupt_state
   1975                        __enable_interrupt(); 
   \   000000D8   ........           BL       __iar_enable_interrupt
   1976          
   1977           DispWait=DispWaitOff; 
   \   000000DC   0248               LDR      R0,??RamToFlash_0  ;; DispWait
   \   000000DE   0421               MOVS     R1,#+4
   \   000000E0   0170               STRB     R1,[R0, #+0]
   1978          
   1979          
   1980          
   1981          }
   \   000000E2   10BC               POP      {R4}
   \   000000E4   01BC               POP      {R0}
   \   000000E6   0047               BX       R0               ;; return
   \                     ??RamToFlash_0:
   \   000000E8   ........           DC32     DispWait
   \   000000EC   ........           DC32     gProg
   \   000000F0   ........           DC32     gProg + 1
   \   000000F4   ........           DC32     gProg + 2
   \   000000F8   70C60000           DC32     0xc670
   \   000000FC   ........           DC32     gProg + 4
   \   00000100   ........           DC32     gProg + 5
   \   00000104   ........           DC32     gProg + 6
   \   00000108   ........           DC32     DateTime
   \   0000010C   ........           DC32     gProg + 8
   \   00000110   ........           DC32     gProg + 9
   \   00000114   ........           DC32     DateTime + 1
   \   00000118   ........           DC32     gProg + 11
   \   0000011C   ........           DC32     gProg + 12
   \   00000120   ........           DC32     DateTime + 2
   \   00000124   ........           DC32     gProg + 14
   \   00000128   ........           DC32     gProg + 15
   \   0000012C   ........           DC32     DateTime + 3
   \   00000130   ........           DC32     gProg + 17
   \   00000134   ........           DC32     gProg + 18
   \   00000138   ........           DC32     DateTime + 4
   \   0000013C   ........           DC32     gProg + 20
   \   00000140   ........           DC32     gProg + 21
   \   00000144   ........           DC32     DateTime + 5
   \   00000148   ........           DC32     FlashProgramOfset
   \   0000014C   00011300           DC32     0x130100
   1982          
   1983          
   1984          
   1985          
   1986          

   \                                 In section .bss, align 4
   1987          int testcount=0;
   \                     testcount:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
   1988          void TestHendel(void)
   1989          {
   \                     TestHendel:
   \   00000000   01B5               PUSH     {R0,LR}
   1990            AT91F_PIO_GetInterruptStatus(AT91C_PIO_VBUS);
   \   00000002   0748               LDR      R0,??TestHendel_0  ;; 0xfffff400
   \   00000004   ........           BL       AT91F_PIO_GetInterruptStatus
   1991            if ((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) testcount++;
   \   00000008   0648               LDR      R0,??TestHendel_0+0x4  ;; 0xfffff43c
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8007               LSLS     R0,R0,#+30
   \   0000000E   04D5               BPL      ??TestHendel_1
   \   00000010   0548               LDR      R0,??TestHendel_0+0x8  ;; testcount
   \   00000012   0549               LDR      R1,??TestHendel_0+0x8  ;; testcount
   \   00000014   0968               LDR      R1,[R1, #+0]
   \   00000016   491C               ADDS     R1,R1,#+1
   \   00000018   0160               STR      R1,[R0, #+0]
   1992              
   1993          
   1994          }
   \                     ??TestHendel_1:
   \   0000001A   01B0               ADD      SP,SP,#+4
   \   0000001C   01BC               POP      {R0}
   \   0000001E   0047               BX       R0               ;; return
   \                     ??TestHendel_0:
   \   00000020   00F4FFFF           DC32     0xfffff400
   \   00000024   3CF4FFFF           DC32     0xfffff43c
   \   00000028   ........           DC32     testcount
   1995          
   1996          

   \                                 In section Debug.txt, align 4, keep-with-next
   1997          void TestInit(void)
   1998          {
   \                     TestInit:
   \   00000000   01B5               PUSH     {R0,LR}
   1999          //#ifndef USB_BUS_POWERED
   2000              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   00000002   0221               MOVS     R1,#+2
   \   00000004   1348               LDR      R0,??TestInit_0  ;; 0xfffff400
   \   00000006   ........           BL       AT91F_PIO_CfgInput
   2001              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   0000000A   1348               LDR      R0,??TestInit_0+0x4  ;; 0xfffff460
   \   0000000C   0221               MOVS     R1,#+2
   \   0000000E   0160               STR      R1,[R0, #+0]
   2002              
   2003              // Configure VBus monitoring
   2004                  AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, 1 << AT91C_ID_VBUS);
   \   00000010   0421               MOVS     R1,#+4
   \   00000012   1248               LDR      R0,??TestInit_0+0x8  ;; 0xfffffc00
   \   00000014   ........           BL       AT91F_PMC_EnablePeriphClock
   2005              AT91F_PIO_CfgPullup(AT91C_PIO_VBUS, ~AT91C_VBUS);
   \   00000018   0221               MOVS     R1,#+2
   \   0000001A   C943               MVNS     R1,R1            ;; #-3
   \   0000001C   0D48               LDR      R0,??TestInit_0  ;; 0xfffff400
   \   0000001E   ........           BL       AT91F_PIO_CfgPullup
   2006              AT91F_PIO_CfgInput(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000022   0221               MOVS     R1,#+2
   \   00000024   0B48               LDR      R0,??TestInit_0  ;; 0xfffff400
   \   00000026   ........           BL       AT91F_PIO_CfgInput
   2007          
   2008              // Configure and enable the Vbus detection interrupt
   2009              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
   2010                                    AT91C_ID_VBUS,
   2011                                    5, //AT91C_AIC_PRIOR_LOWEST,
   2012                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
   2013                                    ISR_VBus);
   \   0000002A   82B0               SUB      SP,SP,#+8
   \   0000002C   0C48               LDR      R0,??TestInit_0+0xC  ;; ISR_VBus
   \   0000002E   0090               STR      R0,[SP, #+0]
   \   00000030   0023               MOVS     R3,#+0
   \   00000032   0522               MOVS     R2,#+5
   \   00000034   0221               MOVS     R1,#+2
   \   00000036   0B48               LDR      R0,??TestInit_0+0x10  ;; 0xfffff000
   \   00000038   ........           BL       AT91F_AIC_ConfigureIt
   \   0000003C   02B0               ADD      SP,SP,#+8
   2014          
   2015              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
   \   0000003E   0221               MOVS     R1,#+2
   \   00000040   0448               LDR      R0,??TestInit_0  ;; 0xfffff400
   \   00000042   ........           BL       AT91F_PIO_InterruptEnable
   2016              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
   \   00000046   0221               MOVS     R1,#+2
   \   00000048   0648               LDR      R0,??TestInit_0+0x10  ;; 0xfffff000
   \   0000004A   ........           BL       AT91F_AIC_EnableIt
   2017          }
   \   0000004E   01B0               ADD      SP,SP,#+4
   \   00000050   01BC               POP      {R0}
   \   00000052   0047               BX       R0               ;; return
   \                     ??TestInit_0:
   \   00000054   00F4FFFF           DC32     0xfffff400
   \   00000058   60F4FFFF           DC32     0xfffff460
   \   0000005C   00FCFFFF           DC32     0xfffffc00
   \   00000060   ........           DC32     ISR_VBus
   \   00000064   00F0FFFF           DC32     0xfffff000
   2018          
   2019          
   2020          
   2021          
   2022          
   2023          
   2024          //------------------------------------------------------------------------------
   2025          //!          Main
   2026          //------------------------------------------------------------------------------
   2027          
   2028          //char ekran_tab[8][128]; 
   2029          

   \                                 In section .bss, align 4
   2030          char string[25];
   \                     string:
   \   00000000                      DS8 28
   2031          

   \                                 In section Debug.txt, align 4, keep-with-next
   2032          void watchdogEnable(int millis)
   2033          {
   \                     watchdogEnable:
   \   00000000   01B5               PUSH     {R0,LR}
   2034            int period = (millis * 256) / 1000;
   \   00000002   8021               MOVS     R1,#+128
   \   00000004   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000006   4843               MULS     R0,R1,R0
   \   00000008   FA21               MOVS     R1,#+250
   \   0000000A   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   0000000C   ........           BL       __aeabi_idivmod
   2035            AT91C_BASE_WDTC->WDTC_WDMR =  AT91C_WDTC_WDRSTEN |        // enable reset on timeout
   2036                                          AT91C_WDTC_WDDBGHLT |       // respect debug mode
   2037                                          AT91C_WDTC_WDIDLEHLT |      // respect idle mode
   2038                                          ((period << 16 ) & AT91C_WDTC_WDD) | // delta is as wide as the period, so we can restart anytime
   2039                                          (period & AT91C_WDTC_WDV);  // set the period
   \   00000010   0649               LDR      R1,??watchdogEnable_0  ;; 0xfffffd44
   \   00000012   0204               LSLS     R2,R0,#+16
   \   00000014   064B               LDR      R3,??watchdogEnable_0+0x4  ;; 0xfff0000
   \   00000016   1340               ANDS     R3,R3,R2
   \   00000018   0005               LSLS     R0,R0,#+20       ;; ZeroExtS R0,R0,#+20,#+20
   \   0000001A   000D               LSRS     R0,R0,#+20
   \   0000001C   1843               ORRS     R0,R0,R3
   \   0000001E   054A               LDR      R2,??watchdogEnable_0+0x8  ;; 0x30002000
   \   00000020   0243               ORRS     R2,R2,R0
   \   00000022   0A60               STR      R2,[R1, #+0]
   2040          }
   \   00000024   01B0               ADD      SP,SP,#+4
   \   00000026   01BC               POP      {R0}
   \   00000028   0047               BX       R0               ;; return
   \   0000002A   C046               Nop      
   \                     ??watchdogEnable_0:
   \   0000002C   44FDFFFF           DC32     0xfffffd44
   \   00000030   0000FF0F           DC32     0xfff0000
   \   00000034   00200030           DC32     0x30002000
   2041          
   2042          
   2043          
   2044          
   2045          
   2046          
   2047          
   2048          
   2049          
   2050          
   2051          #define WATCHDOG_KEY (0xA5 << 24)
   2052          

   \                                 In section .data, align 4
   2053          char TimeCompil[]= __TIME__;
   \                     TimeCompil:
   \   00000000   31393A34343A       DC8 "19:44:41"
   \              343100      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .data, align 4
   2054          char DateCompil[]= __DATE__;
   \                     DateCompil:
   \   00000000   536570203131       DC8 "Sep 11 2013"
   \              203230313300
   2055          
   2056          extern  char VBUS_old;
   2057          
   2058          
   2059          #ifdef _LIVE_RJESTR 
   2060          int LIVE_TAB_IDX=0;  
   2061          unsigned short LIVE_TAB[LIVE_TAB_SIZE];  //   | A-Odczyt, B-potwierdzenie odczytu, C-Zapis F-flaga priorytetu | Nr wêz³a |  wartoœæ | | 
   2062          #endif
   2063             
   2064          

   \                                 In section .bss, align 4
   2065          AT91PS_MEM FLASH;  
   \                     FLASH:
   \   00000000                      DS8 4
   2066          

   \                                 In section Debug.txt, align 4, keep-with-next
   2067          void main()
   2068          {
   \                     main:
   \   00000000   73B5               PUSH     {R0,R1,R4-R6,LR}
   2069              FLASH=AT91C_IFLASH_MEM;  
   \   00000002   D048               LDR      R0,??main_0      ;; FLASH
   \   00000004   9821               MOVS     R1,#+152
   \   00000006   4903               LSLS     R1,R1,#+13       ;; #+1245184
   \   00000008   0160               STR      R1,[R0, #+0]
   2070            
   2071              LCD_INIT();
   \   0000000A   ........           BL       AT91F_LCD_Init
   2072              Init_LCD_TS();           //inicjalizacja Touchpanel`a
   \   0000000E   ........           BL       Init_LCD_TS
   2073              CheckLCD();
   \   00000012   ........           BL       CheckLCD
   2074              
   2075              CleanCanvas(); 
   \   00000016   ........           BL       CleanCanvas
   2076              MenuPaint();    
   \   0000001A   ........           BL       MenuPaint
   2077              RepaintLCD();
   \   0000001E   ........           BL       RepaintLCD
   2078              RepaintLCD();     
   \   00000022   ........           BL       RepaintLCD
   2079            
   2080              RF_Status.Init=1;
   \   00000026   C848               LDR      R0,??main_0+0x4  ;; RF_Status
   \   00000028   0121               MOVS     R1,#+1
   \   0000002A   0170               STRB     R1,[R0, #+0]
   2081              
   2082              
   2083              _NodeInfo  NodeInfo;
   2084              #ifdef S300
   2085                NodeInfo.Model=mS300;
   2086              #endif
   2087              #ifdef S300i  
   2088                NodeInfo.Model=mS300i;
   2089              #endif
   2090              #ifdef S300iMax 
   2091                NodeInfo.Model=mS300iMax;  
   2092              #endif  
   2093              #ifdef S300iOld  
   2094                NodeInfo.Model=mS300i;
   \   0000002C   6846               MOV      R0,SP
   \   0000002E   0221               MOVS     R1,#+2
   \   00000030   0170               STRB     R1,[R0, #+0]
   2095              #endif  
   2096              
   2097              //char SysV=(system[0])-0x30;  
   2098              NodeInfo.SoftVersion=(system[0])-0x30;  
   \   00000032   6846               MOV      R0,SP
   \   00000034   6946               MOV      R1,SP
   \   00000036   4978               LDRB     R1,[R1, #+1]
   \   00000038   F022               MOVS     R2,#+240
   \   0000003A   0A40               ANDS     R2,R2,R1
   \   0000003C   C349               LDR      R1,??main_0+0x8  ;; system
   \   0000003E   0978               LDRB     R1,[R1, #+0]
   \   00000040   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   00000042   090F               LSRS     R1,R1,#+28
   \   00000044   1143               ORRS     R1,R1,R2
   \   00000046   4170               STRB     R1,[R0, #+1]
   2099              //SysV=(system[2])-0x30;  
   2100              NodeInfo.SoftSubVersion=(system[2])-0x30;  
   \   00000048   6846               MOV      R0,SP
   \   0000004A   6946               MOV      R1,SP
   \   0000004C   4978               LDRB     R1,[R1, #+1]
   \   0000004E   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   00000050   090F               LSRS     R1,R1,#+28
   \   00000052   BF4A               LDR      R2,??main_0+0xC  ;; system + 2
   \   00000054   1278               LDRB     R2,[R2, #+0]
   \   00000056   1201               LSLS     R2,R2,#+4
   \   00000058   0A43               ORRS     R2,R2,R1
   \   0000005A   4270               STRB     R2,[R0, #+1]
   2101              MainStage.StageQ[0].Value[0xA]=NodeInfo.NodeInfoWord;  
   \   0000005C   BD48               LDR      R0,??main_0+0x10  ;; MainStage + 950
   \   0000005E   6946               MOV      R1,SP
   \   00000060   0988               LDRH     R1,[R1, #+0]
   \   00000062   0180               STRH     R1,[R0, #+0]
   2102              
   2103              
   2104              AT91F_PIO_CfgOutput(AT91C_BASE_PIOA, SpeakerPin);
                                                          ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000064   8021               MOVS     R1,#+128
   \   00000066   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000068   BB48               LDR      R0,??main_0+0x14  ;; 0xfffff400
   \   0000006A   ........           BL       AT91F_PIO_CfgOutput
   2105              AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000006E   BB48               LDR      R0,??main_0+0x18  ;; 0xfffff434
   \   00000070   8021               MOVS     R1,#+128
   \   00000072   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000074   0160               STR      R1,[R0, #+0]
   2106              
   2107              //uruchomienie Watchdog`a na 60s 
   2108              /*watchdogEnable(60000);  
   2109              AT91F_WDTRestart(AT91C_BASE_WDTC);
   2110              AT91C_BASE_WDTC->WDTC_WDMR=(unsigned int) AT91C_WDTC_WDV|AT91C_WDTC_WDRSTEN | AT91C_WDTC_WDD|0x0<<15;
   2111          
   2112              AT91C_BASE_WDTC->WDTC_WDMR=AT91C_WDTC_WDDIS; 
   2113              */
   2114             
   2115              
   2116              SpiMaster_Init();
   \   00000076   ........           BL       SpiMaster_Init
   2117              
   2118              __enable_interrupt(); 
   \   0000007A   ........           BL       __iar_enable_interrupt
   2119          
   2120             InitRTC();  
   \   0000007E   ........           BL       InitRTC
   2121              GetDateTimeFromRTC(); 
   \   00000082   ........           BL       GetDateTimeFromRTC
   2122           
   2123              InitFramework();
   \   00000086   ........           BL       InitFramework
   2124          
   2125              SER_Init(&sSer, &sUsb);  // Initialize the serial driver
   \   0000008A   B549               LDR      R1,??main_0+0x1C  ;; sUsb
   \   0000008C   B548               LDR      R0,??main_0+0x20  ;; sSer
   \   0000008E   ........           BL       SER_Init
   2126          
   2127              InitFlash();  
   \   00000092   ........           BL       InitFlash
   2128            
   2129              
   2130              Init_LCD_Light_PWM(WypMaxJasnosci);
                     ^
Warning[Pe223]: function "Init_LCD_Light_PWM" declared implicitly
   \   00000096   B448               LDR      R0,??main_0+0x24  ;; WypMaxJasnosci
   \   00000098   0078               LDRB     R0,[R0, #+0]
   \   0000009A   ........           BL       Init_LCD_Light_PWM
   2131              
   2132              __enable_interrupt();    
   \   0000009E   ........           BL       __iar_enable_interrupt
   2133           
   2134            
   2135                
   2136              #ifndef _DEBUG_
   2137              //******************************************************************************
   2138              //Ustawienia dla pierwszego uruchomienia starownika ****************************
   2139                if (pAT91C_IFLASH_MEM->Config.FerstRun!=0x0A)
   2140                {
   2141                  char WriteTmp;
   2142                 //zapis ustawieñ do flasha 
   2143                
   2144                 unsigned int Save = __get_interrupt_state();            
   2145                 __disable_interrupt();
   2146                     //uruchomiono sterownik  
   2147                     WriteTmp=0xA;    FlashWrite((char*)&(AT91C_IFLASH_MEM->Config.FerstRun),&WriteTmp,1);
   2148                 __set_interrupt_state(Save);
   2149                 __enable_interrupt(); 
   2150            
   2151          
   2152                  }
   2153              #endif 
   2154           
   2155               
   2156                
   2157              //Koniec ustawieñ dla pierwszego uruchomienia starownika ***********************
   2158              //******************************************************************************
   2159          
   2160              ProgramChangeExecute(&gProg); 
   \   000000A2   B248               LDR      R0,??main_0+0x28  ;; gProg
   \   000000A4   ........           BL       ProgramChangeExecute
   2161              ThermostatsTimeChartExecute();
   \   000000A8   ........           BL       ThermostatsTimeChartExecute
   2162              
   2163              
   2164           //   US0_init();                                                                //inicjalizacja USART0
   2165             
   2166          #ifdef __WIFI_MODULE    
   2167              US1_init();                                                                 //inicjalizacja USART1
   \   000000AC   ........           BL       US1_init
   2168          #endif
   2169              
   2170           //   Timer_10us_Setup();
   2171              Timer_1ms_Setup();
   \   000000B0   ........           BL       Timer_1ms_Setup
   2172              Timer_10ms_Setup();
   \   000000B4   ........           BL       Timer_10ms_Setup
   2173              
   2174              //Timer_1s();   
   2175                
   2176              for (int aaa=0; aaa<0xEFFFFF; aaa++)
   \   000000B8   0020               MOVS     R0,#+0
   \   000000BA   01E0               B        ??main_1
   2177                      {
   2178                        asm( "nop" );
   \                     ??main_2:
   \   000000BC   C046               nop              
   2179                      }       
   \   000000BE   401C               ADDS     R0,R0,#+1
   \                     ??main_1:
   \   000000C0   AB49               LDR      R1,??main_0+0x2C  ;; 0xefffff
   \   000000C2   8842               CMP      R0,R1
   \   000000C4   FADB               BLT      ??main_2
   2180          
   2181              g_ScreenSever_On=pAT91C_IFLASH_MEM->Config.ScreenSever_On;
   \   000000C6   AB48               LDR      R0,??main_0+0x30  ;; g_ScreenSever_On
   \   000000C8   AB49               LDR      R1,??main_0+0x34  ;; 0xd7ea
   \   000000CA   AC4A               LDR      R2,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   000000CC   1268               LDR      R2,[R2, #+0]
   \   000000CE   515C               LDRB     R1,[R2, R1]
   \   000000D0   0170               STRB     R1,[R0, #+0]
   2182              g_ScreenSever_Time_On=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_On;
   \   000000D2   AB48               LDR      R0,??main_0+0x3C  ;; g_ScreenSever_Time_On
   \   000000D4   AB49               LDR      R1,??main_0+0x40  ;; 0xd7eb
   \   000000D6   A94A               LDR      R2,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   000000D8   1268               LDR      R2,[R2, #+0]
   \   000000DA   515C               LDRB     R1,[R2, R1]
   \   000000DC   0170               STRB     R1,[R0, #+0]
   2183              g_ScreenSever_Time_Off=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_Off;
   \   000000DE   AA48               LDR      R0,??main_0+0x44  ;; g_ScreenSever_Time_Off
   \   000000E0   AA49               LDR      R1,??main_0+0x48  ;; 0xd7ec
   \   000000E2   A64A               LDR      R2,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   000000E4   1268               LDR      R2,[R2, #+0]
   \   000000E6   515C               LDRB     R1,[R2, R1]
   \   000000E8   0170               STRB     R1,[R0, #+0]
   2184              
   2185          
   2186          
   2187              
   2188              //odczyt NODE_ID
   2189              if ((AT91C_IFLASH_MEM->NODE_ID!=0) && (AT91C_IFLASH_MEM->NODE_ID!=0xFFFFFFFF))
   \   000000EA   A948               LDR      R0,??main_0+0x4C  ;; 0x13d95c
   \   000000EC   0068               LDR      R0,[R0, #+0]
   \   000000EE   0028               CMP      R0,#+0
   \   000000F0   16D0               BEQ      ??main_3
   \   000000F2   A748               LDR      R0,??main_0+0x4C  ;; 0x13d95c
   \   000000F4   0068               LDR      R0,[R0, #+0]
   \   000000F6   0021               MOVS     R1,#+0
   \   000000F8   C943               MVNS     R1,R1            ;; #-1
   \   000000FA   8842               CMP      R0,R1
   \   000000FC   10D0               BEQ      ??main_3
   2190              {
   2191                RF_Status.RF_ID_R=AT91C_IFLASH_MEM->NODE_ID;//pe³ne id
   \   000000FE   A548               LDR      R0,??main_0+0x50  ;; RF_Status + 28
   \   00000100   A349               LDR      R1,??main_0+0x4C  ;; 0x13d95c
   \   00000102   0968               LDR      R1,[R1, #+0]
   \   00000104   0160               STR      R1,[R0, #+0]
   2192                RF_Status.RF_ID=AT91C_IFLASH_MEM->NODE_ID-(AT91C_IFLASH_MEM->NODE_ID/1000000)*1000000;
   \   00000106   A248               LDR      R0,??main_0+0x4C  ;; 0x13d95c
   \   00000108   0468               LDR      R4,[R0, #+0]
   \   0000010A   A148               LDR      R0,??main_0+0x4C  ;; 0x13d95c
   \   0000010C   0068               LDR      R0,[R0, #+0]
   \   0000010E   A249               LDR      R1,??main_0+0x54  ;; 0xf4240
   \   00000110   ........           BL       __aeabi_idivmod
   \   00000114   A049               LDR      R1,??main_0+0x54  ;; 0xf4240
   \   00000116   4843               MULS     R0,R1,R0
   \   00000118   201A               SUBS     R0,R4,R0
   \   0000011A   A049               LDR      R1,??main_0+0x58  ;; RF_Status + 24
   \   0000011C   0860               STR      R0,[R1, #+0]
   \   0000011E   05E0               B        ??main_4
   2193              }else{
   2194                RF_Status.RF_ID_R=9999999; //pe³ne id
   \                     ??main_3:
   \   00000120   9C48               LDR      R0,??main_0+0x50  ;; RF_Status + 28
   \   00000122   9F49               LDR      R1,??main_0+0x5C  ;; 0x98967f
   \   00000124   0160               STR      R1,[R0, #+0]
   2195                RF_Status.RF_ID=999999;  //skrócone id (rejestrowe)
   \   00000126   9D48               LDR      R0,??main_0+0x58  ;; RF_Status + 24
   \   00000128   9E49               LDR      R1,??main_0+0x60  ;; 0xf423f
   \   0000012A   0160               STR      R1,[R0, #+0]
   2196              }
   2197              
   2198              
   2199           
   2200          //uruchomienie RF
   2201              
   2202              //odczyt kanalu z flasha ------------------------------ 
   2203              
   2204              SlaveMode=pAT91C_IFLASH_MEM->Config.SlaveMode;
   \                     ??main_4:
   \   0000012C   9E48               LDR      R0,??main_0+0x64  ;; SlaveMode
   \   0000012E   9F49               LDR      R1,??main_0+0x68  ;; 0xd7e8
   \   00000130   924A               LDR      R2,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   00000132   1268               LDR      R2,[R2, #+0]
   \   00000134   515C               LDRB     R1,[R2, R1]
   \   00000136   0170               STRB     R1,[R0, #+0]
   2205              RF_Status.Ch=pAT91C_IFLASH_MEM->Config.RF_channel;
   \   00000138   9D48               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   0000013A   9E49               LDR      R1,??main_0+0x70  ;; 0xd7e6
   \   0000013C   8F4A               LDR      R2,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   0000013E   1268               LDR      R2,[R2, #+0]
   \   00000140   515C               LDRB     R1,[R2, R1]
   \   00000142   0170               STRB     R1,[R0, #+0]
   2206              if (RF_Status.Ch==0) RF_Status.Ch=1;
   \   00000144   9A48               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   00000146   0078               LDRB     R0,[R0, #+0]
   \   00000148   0028               CMP      R0,#+0
   \   0000014A   02D1               BNE      ??main_5
   \   0000014C   9848               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   0000014E   0121               MOVS     R1,#+1
   \   00000150   0170               STRB     R1,[R0, #+0]
   2207              
   2208              
   2209              InitPioInterrupt();
                     ^
Warning[Pe223]: function "InitPioInterrupt" declared implicitly
   \                     ??main_5:
   \   00000152   ........           BL       InitPioInterrupt
   2210              
   2211              RF_Init();
   \   00000156   ........           BL       RF_Init
   2212              
   2213              
   2214              char InitRF=1;
   \   0000015A   0124               MOVS     R4,#+1
   \   0000015C   04E0               B        ??main_6
   2215              
   2216              while (InitRF==1)
   2217              { 
   2218                  InitRF=RF_Status.Init;
   \                     ??main_7:
   \   0000015E   7A48               LDR      R0,??main_0+0x4  ;; RF_Status
   \   00000160   0478               LDRB     R4,[R0, #+0]
   2219                  Delay(0x1);
   \   00000162   0120               MOVS     R0,#+1
   \   00000164   ........           BL       Delay
   2220              };
   \                     ??main_6:
   \   00000168   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000016A   240E               LSRS     R4,R4,#+24
   \   0000016C   012C               CMP      R4,#+1
   \   0000016E   F6D0               BEQ      ??main_7
   2221          
   2222              
   2223          
   2224              //sprawdzenie kana³u transmisji radiowej
   2225              if (!SlaveMode) //je¿eli master
   \   00000170   8D48               LDR      R0,??main_0+0x64  ;; SlaveMode
   \   00000172   0078               LDRB     R0,[R0, #+0]
   \   00000174   0028               CMP      R0,#+0
   \   00000176   5FD1               BNE      ??main_8
   2226              {
   2227                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   00000178   0221               MOVS     R1,#+2
   \   0000017A   0C00               MOVS     R4,R1
   \   0000017C   8C48               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   0000017E   0078               LDRB     R0,[R0, #+0]
   \   00000180   ........           BL       __aeabi_ui2d
   \   00000184   8C4A               LDR      R2,??main_0+0x74  ;; 0x33333333
   \   00000186   8D4B               LDR      R3,??main_0+0x78  ;; 0x3fd33333
   \   00000188   ........           BL       __aeabi_dmul
   \   0000018C   8C4A               LDR      R2,??main_0+0x7C  ;; 0x5c28f5c3
   \   0000018E   8D4B               LDR      R3,??main_0+0x80  ;; 0x408ae28f
   \   00000190   ........           BL       __aeabi_dadd
   \   00000194   0022               MOVS     R2,#+0
   \   00000196   8C4B               LDR      R3,??main_0+0x84  ;; 0x40690000
   \   00000198   ........           BL       __aeabi_dmul
   \   0000019C   0022               MOVS     R2,#+0
   \   0000019E   8B4B               LDR      R3,??main_0+0x88  ;; 0xc104ff00
   \   000001A0   ........           BL       __aeabi_dadd
   \   000001A4   ........           BL       __aeabi_d2iz
   \   000001A8   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   000001AA   0014               ASRS     R0,R0,#+16
   \   000001AC   A021               MOVS     R1,#+160
   \   000001AE   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   000001B0   0143               ORRS     R1,R1,R0
   \   000001B2   0800               MOVS     R0,R1
   \   000001B4   2100               MOVS     R1,R4
   \   000001B6   ........           BL       SPI_SendWord
   2228                  RF_Status.EnableRX();
   \   000001BA   8548               LDR      R0,??main_0+0x8C  ;; RF_Status + 40
   \   000001BC   0068               LDR      R0,[R0, #+0]
   \   000001BE   ........           BL       __iar_via_R0
   2229                  Delay(0x100000);
   \   000001C2   8020               MOVS     R0,#+128
   \   000001C4   4003               LSLS     R0,R0,#+13       ;; #+1048576
   \   000001C6   ........           BL       Delay
   \   000001CA   23E0               B        ??main_9
   2230                  while (RF_CheckChannel())                                                                                            
   2231                  {
   2232                    
   2233                      if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   \                     ??main_10:
   \   000001CC   7848               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   000001CE   0121               MOVS     R1,#+1
   \   000001D0   0170               STRB     R1,[R0, #+0]
   2234                      SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   \                     ??main_11:
   \   000001D2   0221               MOVS     R1,#+2
   \   000001D4   0C00               MOVS     R4,R1
   \   000001D6   7648               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   000001D8   0078               LDRB     R0,[R0, #+0]
   \   000001DA   ........           BL       __aeabi_ui2d
   \   000001DE   764A               LDR      R2,??main_0+0x74  ;; 0x33333333
   \   000001E0   764B               LDR      R3,??main_0+0x78  ;; 0x3fd33333
   \   000001E2   ........           BL       __aeabi_dmul
   \   000001E6   764A               LDR      R2,??main_0+0x7C  ;; 0x5c28f5c3
   \   000001E8   764B               LDR      R3,??main_0+0x80  ;; 0x408ae28f
   \   000001EA   ........           BL       __aeabi_dadd
   \   000001EE   0022               MOVS     R2,#+0
   \   000001F0   754B               LDR      R3,??main_0+0x84  ;; 0x40690000
   \   000001F2   ........           BL       __aeabi_dmul
   \   000001F6   0022               MOVS     R2,#+0
   \   000001F8   744B               LDR      R3,??main_0+0x88  ;; 0xc104ff00
   \   000001FA   ........           BL       __aeabi_dadd
   \   000001FE   ........           BL       __aeabi_d2iz
   \   00000202   0100               MOVS     R1,R0
   \   00000204   0904               LSLS     R1,R1,#+16       ;; SignExtS R1,R1,#+16,#+16
   \   00000206   0914               ASRS     R1,R1,#+16
   \   00000208   A020               MOVS     R0,#+160
   \   0000020A   0002               LSLS     R0,R0,#+8        ;; #+40960
   \   0000020C   0843               ORRS     R0,R0,R1
   \   0000020E   2100               MOVS     R1,R4
   \   00000210   ........           BL       SPI_SendWord
   \                     ??main_9:
   \   00000214   ........           BL       RF_CheckChannel
   \   00000218   0028               CMP      R0,#+0
   \   0000021A   09D0               BEQ      ??main_12
   \   0000021C   6448               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   0000021E   0078               LDRB     R0,[R0, #+0]
   \   00000220   2728               CMP      R0,#+39
   \   00000222   D3D2               BCS      ??main_10
   \   00000224   6248               LDR      R0,??main_0+0x6C  ;; RF_Status + 14
   \   00000226   6249               LDR      R1,??main_0+0x6C  ;; RF_Status + 14
   \   00000228   0978               LDRB     R1,[R1, #+0]
   \   0000022A   491C               ADDS     R1,R1,#+1
   \   0000022C   0170               STRB     R1,[R0, #+0]
   \   0000022E   D0E7               B        ??main_11
   2235                  }  
   2236                  RF_Status.MasterMode=1;
   \                     ??main_12:
   \   00000230   B848               LDR      R0,??main_13     ;; RF_Status + 13
   \   00000232   0121               MOVS     R1,#+1
   \   00000234   0170               STRB     R1,[R0, #+0]
   \   00000236   2AE0               B        ??main_14
   2237              }else{  //je¿eli slave
   2238                
   2239                /*
   2240                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   2241                  RF_Status.EnableRX();
   2242                  Delay(0x100000);
   2243                  while (RF_CheckChannel())                                                                                            
   2244                  {
   2245                    
   2246                      if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   2247                      SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
   2248                  }  
   2249                */
   2250                
   2251                  RF_Status.ChSlave=1;
   \                     ??main_8:
   \   00000238   B748               LDR      R0,??main_13+0x4  ;; RF_Status + 15
   \   0000023A   0121               MOVS     R1,#+1
   \   0000023C   0170               STRB     R1,[R0, #+0]
   2252                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   0000023E   0221               MOVS     R1,#+2
   \   00000240   0C00               MOVS     R4,R1
   \   00000242   B548               LDR      R0,??main_13+0x4  ;; RF_Status + 15
   \   00000244   0078               LDRB     R0,[R0, #+0]
   \   00000246   ........           BL       __aeabi_ui2d
   \   0000024A   5B4A               LDR      R2,??main_0+0x74  ;; 0x33333333
   \   0000024C   5B4B               LDR      R3,??main_0+0x78  ;; 0x3fd33333
   \   0000024E   ........           BL       __aeabi_dmul
   \   00000252   5B4A               LDR      R2,??main_0+0x7C  ;; 0x5c28f5c3
   \   00000254   5B4B               LDR      R3,??main_0+0x80  ;; 0x408ae28f
   \   00000256   ........           BL       __aeabi_dadd
   \   0000025A   0022               MOVS     R2,#+0
   \   0000025C   5A4B               LDR      R3,??main_0+0x84  ;; 0x40690000
   \   0000025E   ........           BL       __aeabi_dmul
   \   00000262   0022               MOVS     R2,#+0
   \   00000264   594B               LDR      R3,??main_0+0x88  ;; 0xc104ff00
   \   00000266   ........           BL       __aeabi_dadd
   \   0000026A   ........           BL       __aeabi_d2iz
   \   0000026E   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000270   0014               ASRS     R0,R0,#+16
   \   00000272   A021               MOVS     R1,#+160
   \   00000274   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   00000276   0143               ORRS     R1,R1,R0
   \   00000278   0800               MOVS     R0,R1
   \   0000027A   2100               MOVS     R1,R4
   \   0000027C   ........           BL       SPI_SendWord
   2253                  RF_Status.MasterMode=0;  
   \   00000280   A448               LDR      R0,??main_13     ;; RF_Status + 13
   \   00000282   0021               MOVS     R1,#+0
   \   00000284   0170               STRB     R1,[R0, #+0]
   2254                  RF_Status.EnableRX();
   \   00000286   5248               LDR      R0,??main_0+0x8C  ;; RF_Status + 40
   \   00000288   0068               LDR      R0,[R0, #+0]
   \   0000028A   ........           BL       __iar_via_R0
   2255              }
   2256          
   2257              RF_Status.AllReady=1;
   \                     ??main_14:
   \   0000028E   A348               LDR      R0,??main_13+0x8  ;; RF_Status + 16
   \   00000290   0121               MOVS     R1,#+1
   \   00000292   0170               STRB     R1,[R0, #+0]
   2258              
   2259              
   2260              
   2261          
   2262          
   2263              
   2264              
   2265              //odczyt has³a------------------------------------------    
   2266              if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEC)
   \   00000294   A248               LDR      R0,??main_13+0xC  ;; 0xd7dc
   \   00000296   3949               LDR      R1,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   00000298   0968               LDR      R1,[R1, #+0]
   \   0000029A   085C               LDRB     R0,[R1, R0]
   \   0000029C   EC28               CMP      R0,#+236
   \   0000029E   14D1               BNE      ??main_15
   2267              {//je¿eli nie wymagane has³o
   2268               g_NeedPass=0; 
   \   000002A0   A048               LDR      R0,??main_13+0x10  ;; g_NeedPass
   \   000002A2   0021               MOVS     R1,#+0
   \   000002A4   0170               STRB     R1,[R0, #+0]
   2269               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   000002A6   0020               MOVS     R0,#+0
   \                     ??main_16:
   \   000002A8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002AA   000E               LSRS     R0,R0,#+24
   \   000002AC   0828               CMP      R0,#+8
   \   000002AE   3FD2               BCS      ??main_17
   \   000002B0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002B2   000E               LSRS     R0,R0,#+24
   \   000002B4   9C49               LDR      R1,??main_13+0x14  ;; g_Password_1
   \   000002B6   9D4A               LDR      R2,??main_13+0x18  ;; 0xd7dd
   \   000002B8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002BA   000E               LSRS     R0,R0,#+24
   \   000002BC   2F4B               LDR      R3,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   000002BE   1B68               LDR      R3,[R3, #+0]
   \   000002C0   1B18               ADDS     R3,R3,R0
   \   000002C2   9A5C               LDRB     R2,[R3, R2]
   \   000002C4   0A54               STRB     R2,[R1, R0]
   \   000002C6   401C               ADDS     R0,R0,#+1
   \   000002C8   EEE7               B        ??main_16
   2270              }else if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEB)
   \                     ??main_15:
   \   000002CA   9548               LDR      R0,??main_13+0xC  ;; 0xd7dc
   \   000002CC   2B49               LDR      R1,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   000002CE   0968               LDR      R1,[R1, #+0]
   \   000002D0   085C               LDRB     R0,[R1, R0]
   \   000002D2   EB28               CMP      R0,#+235
   \   000002D4   14D1               BNE      ??main_18
   2271              {//je¿eli nie wymagane has³o
   2272               g_NeedPass=1; 
   \   000002D6   9348               LDR      R0,??main_13+0x10  ;; g_NeedPass
   \   000002D8   0121               MOVS     R1,#+1
   \   000002DA   0170               STRB     R1,[R0, #+0]
   2273               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   000002DC   0020               MOVS     R0,#+0
   \                     ??main_19:
   \   000002DE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002E0   000E               LSRS     R0,R0,#+24
   \   000002E2   0828               CMP      R0,#+8
   \   000002E4   24D2               BCS      ??main_17
   \   000002E6   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002E8   000E               LSRS     R0,R0,#+24
   \   000002EA   8F49               LDR      R1,??main_13+0x14  ;; g_Password_1
   \   000002EC   8F4A               LDR      R2,??main_13+0x18  ;; 0xd7dd
   \   000002EE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002F0   000E               LSRS     R0,R0,#+24
   \   000002F2   224B               LDR      R3,??main_0+0x38  ;; pAT91C_IFLASH_MEM
   \   000002F4   1B68               LDR      R3,[R3, #+0]
   \   000002F6   1B18               ADDS     R3,R3,R0
   \   000002F8   9A5C               LDRB     R2,[R3, R2]
   \   000002FA   0A54               STRB     R2,[R1, R0]
   \   000002FC   401C               ADDS     R0,R0,#+1
   \   000002FE   EEE7               B        ??main_19
   2274              }else
   2275              {//jezeli nie zdefiniowano  - zdefiniuj i zapisz has³o domyœlne i ustaw jako nie wymagane
   2276               
   2277               //zapis has³a do flash
   2278               unsigned int Save = __get_interrupt_state();  
   \                     ??main_18:
   \   00000300   ........           BL       __iar_get_interrupt_state
   \   00000304   0400               MOVS     R4,R0
   2279               __disable_interrupt();
   \   00000306   ........           BL       __iar_disable_interrupt
   2280               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])),0,g_Password_1,9);
   2281               
   2282                FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])), g_Password_1, 9);
                       ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   0000030A   0922               MOVS     R2,#+9
   \   0000030C   8649               LDR      R1,??main_13+0x14  ;; g_Password_1
   \   0000030E   8848               LDR      R0,??main_13+0x1C  ;; 0x13d7dd
   \   00000310   ........           BL       FlashWrite
   2283               char NeedPassFlag=0xEC;
   \   00000314   6846               MOV      R0,SP
   \   00000316   EC21               MOVS     R1,#+236
   \   00000318   0171               STRB     R1,[R0, #+4]
   2284               g_NeedPass=0; 
   \   0000031A   8248               LDR      R0,??main_13+0x10  ;; g_NeedPass
   \   0000031C   0021               MOVS     R1,#+0
   \   0000031E   0170               STRB     R1,[R0, #+0]
   2285               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)),0,&NeedPassFlag,1);
   2286               FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)), &NeedPassFlag, 1);
   \   00000320   0122               MOVS     R2,#+1
   \   00000322   01A9               ADD      R1,SP,#+4
   \   00000324   8348               LDR      R0,??main_13+0x20  ;; 0x13d7dc
   \   00000326   ........           BL       FlashWrite
   2287               __set_interrupt_state(Save);
   \   0000032A   2000               MOVS     R0,R4
   \   0000032C   ........           BL       __iar_set_interrupt_state
   2288               //koniec zapisu do flash
   2289              }
   2290              //koniec odczytu has³a ---------------------------------------- 
   2291          
   2292          
   2293              
   2294              
   2295              
   2296              
   2297              USB_Connect(&sUsb);    
   \                     ??main_17:
   \   00000330   0B48               LDR      R0,??main_0+0x1C  ;; sUsb
   \   00000332   ........           BL       USB_Connect
   2298             __enable_interrupt();   
   \   00000336   ........           BL       __iar_enable_interrupt
   2299             
   2300             
   2301           
   2302          #ifdef __WIFI_MODULE   
   2303             InitWizFi(AT91C_BASE_US1, &NET);
   \   0000033A   7F49               LDR      R1,??main_13+0x24  ;; NET
   \   0000033C   7F48               LDR      R0,??main_13+0x28  ;; 0xfffc4000
   \   0000033E   ........           BL       InitWizFi
   \   00000342   9EE0               B        ??main_20
   \                     ??main_0:
   \   00000344   ........           DC32     FLASH
   \   00000348   ........           DC32     RF_Status
   \   0000034C   ........           DC32     system
   \   00000350   ........           DC32     system + 2
   \   00000354   ........           DC32     MainStage + 950
   \   00000358   00F4FFFF           DC32     0xfffff400
   \   0000035C   34F4FFFF           DC32     0xfffff434
   \   00000360   ........           DC32     sUsb
   \   00000364   ........           DC32     sSer
   \   00000368   ........           DC32     WypMaxJasnosci
   \   0000036C   ........           DC32     gProg
   \   00000370   FFFFEF00           DC32     0xefffff
   \   00000374   ........           DC32     g_ScreenSever_On
   \   00000378   EAD70000           DC32     0xd7ea
   \   0000037C   ........           DC32     pAT91C_IFLASH_MEM
   \   00000380   ........           DC32     g_ScreenSever_Time_On
   \   00000384   EBD70000           DC32     0xd7eb
   \   00000388   ........           DC32     g_ScreenSever_Time_Off
   \   0000038C   ECD70000           DC32     0xd7ec
   \   00000390   5CD91300           DC32     0x13d95c
   \   00000394   ........           DC32     RF_Status + 28
   \   00000398   40420F00           DC32     0xf4240
   \   0000039C   ........           DC32     RF_Status + 24
   \   000003A0   7F969800           DC32     0x98967f
   \   000003A4   3F420F00           DC32     0xf423f
   \   000003A8   ........           DC32     SlaveMode
   \   000003AC   E8D70000           DC32     0xd7e8
   \   000003B0   ........           DC32     RF_Status + 14
   \   000003B4   E6D70000           DC32     0xd7e6
   \   000003B8   33333333           DC32     0x33333333
   \   000003BC   3333D33F           DC32     0x3fd33333
   \   000003C0   C3F5285C           DC32     0x5c28f5c3
   \   000003C4   8FE28A40           DC32     0x408ae28f
   \   000003C8   00006940           DC32     0x40690000
   \   000003CC   00FF04C1           DC32     0xc104ff00
   \   000003D0   ........           DC32     RF_Status + 40
   2304          #endif
   2305          
   2306             
   2307             
   2308              /*
   2309             //ustawienie wys³ania stanów  do wszystkich wêz³ów po restarcie
   2310              for (char i=0; i<NumberNeurons; i++)
   2311              {
   2312                MainStage.SendStageChange[i]=ChangeStageFlag; 
   2313              }
   2314             */
   2315             
   2316             
   2317              while (1) 
   2318              {
   2319                  AT91F_WDTRestart(AT91C_BASE_WDTC);
   2320                  
   2321                  
   2322                  if (ForwardUSB2Serialferst==1)
   2323                  {
   2324                      // Start USB->Serial forward mechanism
   2325                      ForwardUSB2Serial(0, 0, 0, 0);
   2326                      ForwardUSB2Serialferst=2;
   2327                  }
   2328                
   2329                 
   2330                  
   2331                 
   2332                 if ((!((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)) && (VBUS_old==1))
   2333                 {
   2334                   VBUS_old=0;
   2335                   ISR_VBus();
   2336                 }
   2337                 /*
   2338                 if (((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) && (VBUS_old==0))
   2339                 {
   2340                   VBUS_old=1;
   2341                   ISR_VBus();
   2342                 } 
   2343                 */
   2344                 
   2345                  
   2346                  
   2347                   
   2348                  if ((g_NextTimeProgram<=g_counter) || (g_NextTimeProgram>g_counter+ProgramPeriod))
   2349                   {
   2350                    
   2351                     
   2352                       char WaitingRF_WrTask=0;
   2353                       if (g_NextTimeProgram<g_counter+1000)    //blokowanie wykonania programu jezeli istnieje oczekuj¹ce ¿¹danie wys³ania stanu do któregokolwiek wêz³a. Blokowanie nie mo¿e przekroczyæ 1s. 
   2354                       {
   2355                           char Nd=1;
   2356                           while ((Nd<NumberNeurons) && (WaitingRF_WrTask==0))
   2357                            {
   2358                                if ((MainStage.SendStageChange[Nd]>0))    
   \                     ??main_21:
   \   000003D4   5A49               LDR      R1,??main_13+0x2C  ;; 0x6eb
   \   000003D6   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000003D8   000E               LSRS     R0,R0,#+24
   \   000003DA   5A4A               LDR      R2,??main_13+0x30  ;; MainStage
   \   000003DC   1218               ADDS     R2,R2,R0
   \   000003DE   515C               LDRB     R1,[R2, R1]
   \   000003E0   0129               CMP      R1,#+1
   \   000003E2   00D3               BCC      ??main_22
   2359                                {
   2360                                    WaitingRF_WrTask=1;
   \   000003E4   0126               MOVS     R6,#+1
   2361                                }
   2362                                Nd++;  
   \                     ??main_22:
   \   000003E6   401C               ADDS     R0,R0,#+1
   2363                            } 
   \                     ??main_23:
   \   000003E8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000003EA   000E               LSRS     R0,R0,#+24
   \   000003EC   2328               CMP      R0,#+35
   \   000003EE   03D2               BCS      ??main_24
   \   000003F0   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000003F2   360E               LSRS     R6,R6,#+24
   \   000003F4   002E               CMP      R6,#+0
   \   000003F6   EDD0               BEQ      ??main_21
   2364                       }
   2365          
   2366                      if (WaitingRF_WrTask==0)
   \                     ??main_24:
   \   000003F8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000003FA   360E               LSRS     R6,R6,#+24
   \   000003FC   002E               CMP      R6,#+0
   \   000003FE   0DD1               BNE      ??main_25
   2367                      {
   2368                        g_NextTimeProgram=g_counter+ProgramPeriod;
   \   00000400   514C               LDR      R4,??main_13+0x34  ;; g_NextTimeProgram
   \   00000402   5248               LDR      R0,??main_13+0x38  ;; g_counter
   \   00000404   0CC8               LDM      R0!,{R2,R3}
   \   00000406   0838               SUBS     R0,R0,#+8
   \   00000408   AF20               MOVS     R0,#+175
   \   0000040A   4000               LSLS     R0,R0,#+1        ;; #+350
   \   0000040C   0021               MOVS     R1,#+0
   \   0000040E   8018               ADDS     R0,R0,R2
   \   00000410   5941               ADCS     R1,R1,R3
   \   00000412   03C4               STM      R4!,{R0,R1}
   \   00000414   083C               SUBS     R4,R4,#+8
   2369                        Program(&gProg);
   \   00000416   4E48               LDR      R0,??main_13+0x3C  ;; gProg
   \   00000418   ........           BL       Program
   2370                      }
   2371                      
   2372                      
   2373                      
   2374                      
   2375                   }
   2376                   
   2377                  
   2378                  if ((g_counter>4000) && (MenuLevel==0)) 
   \                     ??main_25:
   \   0000041C   4B48               LDR      R0,??main_13+0x38  ;; g_counter
   \   0000041E   03C8               LDM      R0!,{R0,R1}
   \   00000420   4C4A               LDR      R2,??main_13+0x40  ;; 0xfa1
   \   00000422   0023               MOVS     R3,#+0
   \   00000424   9942               CMP      R1,R3
   \   00000426   0BD3               BCC      ??main_26
   \   00000428   01D8               BHI      ??main_27
   \   0000042A   9042               CMP      R0,R2
   \   0000042C   08D3               BCC      ??main_26
   \                     ??main_27:
   \   0000042E   4A48               LDR      R0,??main_13+0x44  ;; MenuLevel
   \   00000430   0068               LDR      R0,[R0, #+0]
   \   00000432   0028               CMP      R0,#+0
   \   00000434   04D1               BNE      ??main_26
   2379                  { 
   2380                      MenuLevel=1;   
   \   00000436   4848               LDR      R0,??main_13+0x44  ;; MenuLevel
   \   00000438   0121               MOVS     R1,#+1
   \   0000043A   0160               STR      R1,[R0, #+0]
   2381                    #ifdef _TESTER_ 
   2382          
   2383                      MenuLevel=1134;
   2384                    #endif   
   2385                    MenuPaint();
   \   0000043C   ........           BL       MenuPaint
   2386                  }
   2387                  
   2388          
   2389                    
   2390          #ifdef __WIFI_MODULE     
   2391                  if (NET.WiFi.On)
   \                     ??main_26:
   \   00000440   4648               LDR      R0,??main_13+0x48  ;; NET + 80
   \   00000442   0078               LDRB     R0,[R0, #+0]
   \   00000444   0028               CMP      R0,#+0
   \   00000446   13D0               BEQ      ??main_28
   2392                  {
   2393                      //wifi-------------------------------------------------------------------
   2394                      if ((g_counter>6000) /*&&  (g_counter%200==0)*/)
   \   00000448   4048               LDR      R0,??main_13+0x38  ;; g_counter
   \   0000044A   03C8               LDM      R0!,{R0,R1}
   \   0000044C   444A               LDR      R2,??main_13+0x4C  ;; 0x1771
   \   0000044E   0023               MOVS     R3,#+0
   \   00000450   9942               CMP      R1,R3
   \   00000452   07D3               BCC      ??main_29
   \   00000454   01D8               BHI      ??main_30
   \   00000456   9042               CMP      R0,R2
   \   00000458   04D3               BCC      ??main_29
   2395                      {
   2396                        CheckVarChangeHTTP(Buff_TX_1 ,AT91C_BASE_US1, &NET);
   \                     ??main_30:
   \   0000045A   374A               LDR      R2,??main_13+0x24  ;; NET
   \   0000045C   3749               LDR      R1,??main_13+0x28  ;; 0xfffc4000
   \   0000045E   4148               LDR      R0,??main_13+0x50  ;; Buff_TX_1
   \   00000460   ........           BL       CheckVarChangeHTTP
   2397                      }
   2398                  
   2399                      WiFi(US1_Buffer, Buff_TX_1 ,AT91C_BASE_US1, &NET);
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

  static void CBK_Suspend(const S_usb *pUsb)
              ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\main.c",535  Warning[Pe177]: 
          function "CBK_Suspend" was declared but never referenced
   \                     ??main_29:
   \   00000464   344B               LDR      R3,??main_13+0x24  ;; NET
   \   00000466   354A               LDR      R2,??main_13+0x28  ;; 0xfffc4000
   \   00000468   3E49               LDR      R1,??main_13+0x50  ;; Buff_TX_1
   \   0000046A   3F48               LDR      R0,??main_13+0x54  ;; US1_Buffer
   \   0000046C   ........           BL       WiFi
   2400                  }
   2401                  //CheckConnectionStatus();
   2402          #endif  
   2403            
   2404                  
   2405                  
   2406                  //bezpiecznik RF zabezpiecza przed zablokowaniem RFa
   2407                  if (RF_Status.RfFuse>=60) 
   \                     ??main_28:
   \   00000470   3E48               LDR      R0,??main_13+0x58  ;; RF_Status + 17
   \   00000472   0078               LDRB     R0,[R0, #+0]
   \   00000474   3C28               CMP      R0,#+60
   \   00000476   04D3               BCC      ??main_20
   2408                  {
   2409                      #ifdef _DEBUG_
   2410                               MESSAGE("Bezpiecznik RF"); 
   \   00000478   3D48               LDR      R0,??main_13+0x5C  ;; `?<Constant "Bezpiecznik RF">`
   \   0000047A   ........           BL       MESSAGE
   2411                      #endif
   2412                                
   2413                      RF_Init();          
   \   0000047E   ........           BL       RF_Init
   2414                  }   
   \                     ??main_20:
   \   00000482   3C48               LDR      R0,??main_13+0x60  ;; 0xfffffd40
   \   00000484   ........           BL       AT91F_WDTRestart
   \   00000488   3B48               LDR      R0,??main_13+0x64  ;; ForwardUSB2Serialferst
   \   0000048A   0078               LDRB     R0,[R0, #+0]
   \   0000048C   0128               CMP      R0,#+1
   \   0000048E   08D1               BNE      ??main_31
   \   00000490   0023               MOVS     R3,#+0
   \   00000492   0022               MOVS     R2,#+0
   \   00000494   0021               MOVS     R1,#+0
   \   00000496   0020               MOVS     R0,#+0
   \   00000498   ........           BL       ForwardUSB2Serial
   \   0000049C   3648               LDR      R0,??main_13+0x64  ;; ForwardUSB2Serialferst
   \   0000049E   0221               MOVS     R1,#+2
   \   000004A0   0170               STRB     R1,[R0, #+0]
   \                     ??main_31:
   \   000004A2   3648               LDR      R0,??main_13+0x68  ;; 0xfffff43c
   \   000004A4   0068               LDR      R0,[R0, #+0]
   \   000004A6   8007               LSLS     R0,R0,#+30
   \   000004A8   08D4               BMI      ??main_32
   \   000004AA   3548               LDR      R0,??main_13+0x6C  ;; VBUS_old
   \   000004AC   0078               LDRB     R0,[R0, #+0]
   \   000004AE   0128               CMP      R0,#+1
   \   000004B0   04D1               BNE      ??main_32
   \   000004B2   3348               LDR      R0,??main_13+0x6C  ;; VBUS_old
   \   000004B4   0021               MOVS     R1,#+0
   \   000004B6   0170               STRB     R1,[R0, #+0]
   \   000004B8   ........           BL       ISR_VBus
   \                     ??main_32:
   \   000004BC   2348               LDR      R0,??main_13+0x38  ;; g_counter
   \   000004BE   0CC8               LDM      R0!,{R2,R3}
   \   000004C0   0838               SUBS     R0,R0,#+8
   \   000004C2   2148               LDR      R0,??main_13+0x34  ;; g_NextTimeProgram
   \   000004C4   03C8               LDM      R0!,{R0,R1}
   \   000004C6   8B42               CMP      R3,R1
   \   000004C8   10D8               BHI      ??main_33
   \   000004CA   01D3               BCC      ??main_34
   \   000004CC   8242               CMP      R2,R0
   \   000004CE   0DD2               BCS      ??main_33
   \                     ??main_34:
   \   000004D0   1E48               LDR      R0,??main_13+0x38  ;; g_counter
   \   000004D2   03C8               LDM      R0!,{R0,R1}
   \   000004D4   AF22               MOVS     R2,#+175
   \   000004D6   5200               LSLS     R2,R2,#+1        ;; #+350
   \   000004D8   0023               MOVS     R3,#+0
   \   000004DA   1218               ADDS     R2,R2,R0
   \   000004DC   4B41               ADCS     R3,R3,R1
   \   000004DE   1A48               LDR      R0,??main_13+0x34  ;; g_NextTimeProgram
   \   000004E0   03C8               LDM      R0!,{R0,R1}
   \   000004E2   8B42               CMP      R3,R1
   \   000004E4   9AD8               BHI      ??main_25
   \   000004E6   01D3               BCC      ??main_35
   \   000004E8   8242               CMP      R2,R0
   \   000004EA   97D2               BCS      ??main_25
   \                     ??main_35:
   \                     ??main_33:
   \   000004EC   0026               MOVS     R6,#+0
   \   000004EE   1648               LDR      R0,??main_13+0x34  ;; g_NextTimeProgram
   \   000004F0   0CC8               LDM      R0!,{R2,R3}
   \   000004F2   0838               SUBS     R0,R0,#+8
   \   000004F4   1548               LDR      R0,??main_13+0x38  ;; g_counter
   \   000004F6   03C8               LDM      R0!,{R0,R1}
   \   000004F8   FA24               MOVS     R4,#+250
   \   000004FA   A400               LSLS     R4,R4,#+2        ;; #+1000
   \   000004FC   0025               MOVS     R5,#+0
   \   000004FE   2418               ADDS     R4,R4,R0
   \   00000500   4D41               ADCS     R5,R5,R1
   \   00000502   AB42               CMP      R3,R5
   \   00000504   00D9               BLS      .+4
   \   00000506   77E7               B        ??main_24
   \   00000508   02D3               BCC      ??main_36
   \   0000050A   A242               CMP      R2,R4
   \   0000050C   00D3               BCC      .+4
   \   0000050E   73E7               B        ??main_24
   \                     ??main_36:
   \   00000510   0120               MOVS     R0,#+1
   \   00000512   69E7               B        ??main_23
   \                     ??main_13:
   \   00000514   ........           DC32     RF_Status + 13
   \   00000518   ........           DC32     RF_Status + 15
   \   0000051C   ........           DC32     RF_Status + 16
   \   00000520   DCD70000           DC32     0xd7dc
   \   00000524   ........           DC32     g_NeedPass
   \   00000528   ........           DC32     g_Password_1
   \   0000052C   DDD70000           DC32     0xd7dd
   \   00000530   DDD71300           DC32     0x13d7dd
   \   00000534   DCD71300           DC32     0x13d7dc
   \   00000538   ........           DC32     NET
   \   0000053C   0040FCFF           DC32     0xfffc4000
   \   00000540   EB060000           DC32     0x6eb
   \   00000544   ........           DC32     MainStage
   \   00000548   ........           DC32     g_NextTimeProgram
   \   0000054C   ........           DC32     g_counter
   \   00000550   ........           DC32     gProg
   \   00000554   A10F0000           DC32     0xfa1
   \   00000558   ........           DC32     MenuLevel
   \   0000055C   ........           DC32     NET + 80
   \   00000560   71170000           DC32     0x1771
   \   00000564   ........           DC32     Buff_TX_1
   \   00000568   ........           DC32     US1_Buffer
   \   0000056C   ........           DC32     RF_Status + 17
   \   00000570   ........           DC32     `?<Constant "Bezpiecznik RF">`
   \   00000574   40FDFFFF           DC32     0xfffffd40
   \   00000578   ........           DC32     ForwardUSB2Serialferst
   \   0000057C   3CF4FFFF           DC32     0xfffff43c
   \   00000580   ........           DC32     VBUS_old
   2415              }
   2416             
   2417              
   2418          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   3CF4FFFF           DC32     0xfffff43c

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   ........           DC32     MenuLevel

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   ........           DC32     ForwardUSB2Serialferst

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   ........           DC32     sUsb

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   ........           DC32     g_PC_Connected

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   ........           DC32     g_Stop_Program

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   ........           DC32     g_LightCouterLCD

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   ........           DC32     g_LightLCDEnable

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable26:
   \   00000000   00F0FFFF           DC32     0xfffff000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable27:
   \   00000000   00F4FFFF           DC32     0xfffff400

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable28:
   \   00000000   60F4FFFF           DC32     0xfffff460

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable32:
   \   00000000   ........           DC32     sSer

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable33:
   \   00000000   40FDFFFF           DC32     0xfffffd40

   \                                 In section .rodata, align 4
   \                     `?<Constant "Wyladowana">`:
   \   00000000   57796C61646F       DC8 "Wyladowana"
   \              77616E6100  
   \   0000000B   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "bateria">`:
   \   00000000   626174657269       DC8 "bateria"
   \              6100        

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "

   \                                 In section .rodata, align 4
   \                     `?<Constant "Wezel:">`:
   \   00000000   57657A656C3A       DC8 "Wezel:"
   \              00          
   \   00000007   00                 DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Bezpiecznik RF">`:
   \   00000000   42657A706965       DC8 "Bezpiecznik RF"
   \              637A6E696B20
   \              524600      
   \   0000000F   00                 DC8 0
   2419          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     AT91F_AIC_ConfigureIt            16
     AT91F_AIC_EnableIt                0
     AT91F_LCD_Init                    8
     AT91F_PIO_CfgInput                0
     AT91F_PIO_CfgOutput               0
     AT91F_PIO_CfgPullup               0
     AT91F_PIO_GetInterruptStatus      0
     AT91F_PIO_InterruptEnable         0
     AT91F_PMC_EnablePeriphClock       0
     AT91F_WDTRestart                  0
     AlarmExecute                     16
     CBK_Init                         16
     CBK_NewRequest                    8
     CBK_Resume                        8
     Delay                             8
     ForwardUSB2Serial                16
     ISR_Driver                        8
     ISR_VBus                          8
     InitFramework                    16
     RamToFlash                        8
     SendViaUSB                       16
     TestHendel                        8
     TestInit                         16
     ThermostatsExecute               32
     ThermostatsTimeChartExecute      16
     Timer_10ms                        8
     Timer_10ms_Setup                  0
     Timer_10us                        0
     Timer_10us_Setup                  0
     Timer_1h                          8
     Timer_1min                        8
     Timer_1ms                         8
     Timer_1ms_Setup                   0
     Timer_1s                         56
     TimetableExecute                 32
     USB_Attach                        8
     USB_Connect                       8
     USB_Disconnect                    8
     USB_GetDriverID                   0
     USB_GetDriverInterface            0
     USB_GetState                      0
     USB_Handler                       8
     main                             24
     watchdogEnable                    8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     identyfikacja                  16
     system                          4
     AT91F_AIC_ConfigureIt          54
     AT91F_AIC_EnableIt             12
     AT91F_PIO_CfgOutput             6
     AT91F_PIO_CfgInput              6
     AT91F_PIO_CfgPullup             8
     AT91F_PIO_InterruptEnable       4
     AT91F_PIO_GetInterruptStatus    4
     AT91F_PMC_EnablePeriphClock     4
     AT91F_WDTRestart               12
     AT91F_LCD_Init                164
     USB_GetDriverInterface          6
     USB_GetDriverID                 6
     USB_Handler                    18
     USB_Attach                     18
     USB_Connect                    18
     USB_Disconnect                 18
     USB_GetState                   10
     APC                             1
     g_czas_petli                    1
     komunikacja_ok                  4
     rej_prog                       40
     LifeCouter                      4
     LifeCouterMax                   4
     USB_busy                        1
     FlashProgramOfset               4
     FlashProgramReserveOfset        4
     advY                            4
     advX                            4
     Y_down                          2
     X_down                          2
     Y_up                            2
     X_up                            2
     g_leng                          4
     g_level                         1
     g_Password_1                    8
     g_Password_2                    8
     g_Message                       4
     g_info                          4
     g_PC_Connected                  1
     g_counter                       8
     g_seconds_counter               4
     AdressModbus                    1
     g_LightCouterLCD                4
     g_LightLCDEnable                1
     g_ScreenSever_On                1
     g_ScreenSever_Time_On           1
     g_ScreenSever_Time_Off          1
     g_SlaveConnect                  1
     g_Stop_Program                  1
     g_Restart_Program               1
     g_NextTimeProgram               8
     g_NeedPass                      1
     AlarmOn                         1
     Speaker                         4
     AlarmScreenAction              16
     ChangeingIdMode                 1
     NET                           448
     WypMaxJasnosci                  1
     WypMinJasnosci                  1
     gWypMinJasnosciTest             1
     FuseLastWiFiDataIn              8
     ChangeStageFlag                 1
     LightLCD_OFF_Counter            1
     LightLCD_OFF_Counter2           1
     LightLCD_OFF_Curent             1
     SlaveMode                       1
     TimeInMasterMode                8
     ReciveFrameToMe                 1
     pAT91C_IFLASH_MEM               4
     tmp_i                           1
     licznik                         4
     licznik2                        4
     licznik3                        4
     memory                          4
     sss                             4
     int1                            4
     DateTime                        8
     pEndpoints                    160
     sSetup                          8
     dState                          4
     sCallbacks                     24
     sUsb                           24
     sSer                           20
     pUsbBuffer                    300
     ISR_Driver                     14
     ForwardUSB2Serialferst          1
     ISR_VBus                      256
     CBK_Init                       80
     CBK_Resume                     12
     CBK_NewRequest                 14
     SendViaUSB                     32
     ForwardUSB2Serial             100
     buff_tx                       900
     Delay                          20
     memory_read                     4
     tProgramTabSize                 4
     SourRam                         4
     stop                            4
     siz                             4
     InitFramework                 612
     Timer_10us                     12
     Timer_10us_Setup              140
     TimetableExecute             1112
     Timetable                       4
     Out                            32
     ThermostatsTimeChartExecute   344
     LastTemp                       16
     ThermostatsExecute            704
     Hysteresis                      8
     out                            12
     AlarmExecute                  732
     AlarmOnTime                    64
     AlarmOffTime                   64
     Timer_1h                       12
     Timer_1min                     16
     XY_Tab                         44
     LiczOds                         4
     display_cykl                    1
     X_up_old                        4
     Y_up_old                        4
     X_down_old                      4
     Y_down_old                      4
     g_PC_Connected_timeout          1
     CyklPerSekCount                 4
     TransLoopTime                   4
     CyklPerSek                      4
     MenuLevel_old                   4
     FlagChangeTime                  1
     Timer_1s                     2400
     TryIndirect                     1
     TryIndirectSlow                 1
     CountMin                        1
     LCD_last_fill                   1
     Timer_10ms                    412
     Spek2_Counter                   4
     Timer_10ms_Setup              140
     Counter                         4
     US0_Counter                     4
     US1_Counter                     4
     CounterForTimer10ms             1
     CurTimeQual                     2
     Timer_1ms                     816
     RF_SlaveCounter                 4
     PraboblySlaveConstChanel        1
     CounterForTimer1s               2
     Timer_1ms_Setup               144
     RamToFlash                    336
     testcount                       4
     TestHendel                     44
     TestInit                      104
     string                         28
     watchdogEnable                 56
     TimeCompil                     12
     DateCompil                     12
     FLASH                           4
     main                         1412
     ??DataTable2                    4
     ??DataTable6                    4
     ??DataTable9                    4
     ??DataTable19                   4
     ??DataTable20                   4
     ??DataTable21                   4
     ??DataTable22                   4
     ??DataTable24                   4
     ??DataTable26                   4
     ??DataTable27                   4
     ??DataTable28                   4
     ??DataTable32                   4
     ??DataTable33                   4
     ?<Constant "Wyladowana">       12
     ?<Constant "bateria">           8
     ?<Constant "   ">               4
     ?<Constant "Wezel:">            8
     ?<Constant "Bezpiecznik RF">   16
      Others                        68

 
  2 189 bytes in section .bss
    271 bytes in section .data
    116 bytes in section .rodata
 10 564 bytes in section Debug.txt
 
 10 128 bytes of CODE  memory (+ 436 bytes shared)
    116 bytes of CONST memory
  2 460 bytes of DATA  memory

Errors: none
Warnings: 34
