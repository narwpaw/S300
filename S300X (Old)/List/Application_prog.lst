###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           11/Sep/2013  19:44:42 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\Application_prog.c                  #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Application_prog.c" -D              #
#                    AT91SAM7S256 -D AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_   #
#                    -D __ALARM -D __WIFI_MODULE -D _DEBUG_ -D S300iOld -D    #
#                    _ADMINISTRATOR_ -lC "D:\Zeuron\Projekty\S300\S300-progra #
#                    m v1.4 - 12.06.2013\S300X (Old)\List\" --diag_suppress   #
#                    Pa082 -o "D:\Zeuron\Projekty\S300\S300-program v1.4 -    #
#                    12.06.2013\S300X (Old)\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.4 -     #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Ol                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\List\Application_prog.lst         #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\Obj\Application_prog.o            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Application_prog.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : Application_prog.c                       *//
      7          //*  Opis                         : Plik obs³ugi programu u¿ytkowego         *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          
     24          
     25          #include "Application_prog.h" 
     26          
     27          #include "Framework.h"
     28          #include "core/device.h"                                                        //aduje bibliotreki dla odpowiedniego procesora
     29          #include "modbus.h"

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     30          #include "usart.h"
     31          #include "RF_Exe.h"
     32          #include "ScreenMENU2.h"
     33          
     34          
     35          //Zmienne globalne -------------------------------------------------------------

   \                                 In section .data, align 1
     36            char NumberScene=NumberSceneMax;  //iloœæ u¿ywanych scen. Wartoœæ pierwotnie NumberSceneMax nastêpnie wyliczana
   \                     NumberScene:
   \   00000000   0A                 DC8 10

   \                                 In section .bss, align 2
     37            short ScreenUse;
   \                     ScreenUse:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     38            char SceneBefOff=0; //Je¿eli >0 to oznacza ¿e sceny zosta³y wy³¹czone przyskiem/zdarzeniem off.  SceneBefOff= nr sceny przed wy³¹czeniem
   \                     SceneBefOff:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     39            _TransQuality TransQuality; //tablica informacyjna jakoœci po³¹czenia pola odpowiadaj¹ polom _ProgramTab.NeuronsIdTab
   \                     TransQuality:
   \   00000000                      DS8 216
     40          
     41            //___________________________Koniec zmiennych globalnych________________________
     42          
     43          
     44          
     45          
     46          #ifdef _LIVE_RJESTR   
     47            extern unsigned short LIVE_TAB[LIVE_TAB_SIZE];
     48            extern char LIVE_TAB_IDX;
     49          #endif
     50            
     51          
     52          extern RAM ram;
     53          extern int g_US0_BAUDRATE;
     54          //extern FlashPagesOffset;

   \                                 In section .bss, align 4
     55          Convers_DW_F ProgConvers_DW_F;
   \                     ProgConvers_DW_F:
   \   00000000                      DS8 4
     56          
     57          extern  _ScreenPaternDesign ScreenSetTab_0[];
     58          extern  _ScreenPaternDesign ScreenSetTab_1[];
     59          extern int int1;
     60          extern int FlashProgramOfset;
     61          extern int g_counter;
     62          extern char AdressModbus;
     63          extern char q_US0_Comm_Mode;
     64          extern char US0_MasterMODBUS_ENABLE;
     65          extern void Delay (unsigned long a);
     66          extern char g_Stop_Program;                                                     //1- zatrzymuje program
     67          extern char g_Restart_Program;                                                  //1- restartuje program
     68          extern unsigned int CyklPerSek;
     69          extern _DateTime DateTime;
     70          extern _RF_TaskTab  RF_TaskTab;

   \                                 In section .bss, align 4
     71          _ButtonGraph  ButtonExe[ScreenNr][ScrenButtonNr];                                         //do tej zmiennej przepisywane sa stany 1 z Button
   \                     ButtonExe:
   \   00000000                      DS8 576
     72          
     73          

   \                                 In section .bss, align 8
     74          volatile _ProgramTab gProg;
   \                     gProg:
   \   00000000                      DS8 50800

   \                                 In section .data, align 4
     75          char        *pProg=(char*)&gProg;
   \                     pProg:
   \   00000000   ........           DC32 gProg

   \                                 In section .bss, align 4
     76          _NeuronsListUnit NeuronsList[NumberNeurons];
   \                     NeuronsList:
   \   00000000                      DS8 420
     77          
     78          
     79          
     80          

   \                                 In section .bss, align 4
     81          char Variables[13];    //zmienne
   \                     Variables:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     82          char VariablesImpulse[13];    //zmienne - flaga impulsu
   \                     VariablesImpulse:
   \   00000000                      DS8 16
     83          //char VariablesNetTmp[13];    //zmienne tyczmasowe dla komunikacji WiFi stosowana jako separacja  Variables[] ¿eby nie nadpisywaæ zmiennych

   \                                 In section .bss, align 4
     84          short int VariablesAnal[AnalogVarAmount];    //zmienne
   \                     VariablesAnal:
   \   00000000                      DS8 40
     85          
     86          extern unsigned char ChangeStageFlag;
     87          
     88          

   \                                 In section .bss, align 4
     89          _MainStage  MainStage; 
   \                     MainStage:
   \   00000000                      DS8 1808

   \                                 In section .bss, align 4
     90          _Trap      Trap;
   \                     Trap:
   \   00000000                      DS8 8
     91          
     92          extern _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];

   \                                 In section Debug.txt, align 4, keep-with-next
     93          void SetModbusTask(void)
     94          {
     95          
     96                ptr_ZD_MODBUS ZD_MODBUS;
     97          
     98          
     99                ZD_MODBUS         =   ZD_MODBUS_0;
   \                     SetModbusTask:
   \   00000000   ....               LDR      R0,??DataTable0  ;; ZD_MODBUS_0
    100            
    101          
    102             
    103                
    104                char i=0; 
   \   00000002   0021               MOVS     R1,#+0
    105            
    106           
    107                   
    108                ZD_MODBUS[i].Adress=1;
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0D22               MOVS     R2,#+13
   \   0000000A   4A43               MULS     R2,R1,R2
   \   0000000C   0123               MOVS     R3,#+1
   \   0000000E   8354               STRB     R3,[R0, R2]
    109                ZD_MODBUS[i].Function=0xF;
   \   00000010   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000012   090E               LSRS     R1,R1,#+24
   \   00000014   0D22               MOVS     R2,#+13
   \   00000016   4A43               MULS     R2,R1,R2
   \   00000018   8218               ADDS     R2,R0,R2
   \   0000001A   0F23               MOVS     R3,#+15
   \   0000001C   5370               STRB     R3,[R2, #+1]
    110                ZD_MODBUS[i].Target=0x0;
   \   0000001E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000020   090E               LSRS     R1,R1,#+24
   \   00000022   0D22               MOVS     R2,#+13
   \   00000024   4A43               MULS     R2,R1,R2
   \   00000026   8218               ADDS     R2,R0,R2
   \   00000028   0023               MOVS     R3,#+0
   \   0000002A   9370               STRB     R3,[R2, #+2]
   \   0000002C   1B0A               LSRS     R3,R3,#+8
   \   0000002E   D370               STRB     R3,[R2, #+3]
    111                ZD_MODBUS[i].StartAdr=0;
   \   00000030   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000032   090E               LSRS     R1,R1,#+24
   \   00000034   0D22               MOVS     R2,#+13
   \   00000036   4A43               MULS     R2,R1,R2
   \   00000038   8218               ADDS     R2,R0,R2
   \   0000003A   0023               MOVS     R3,#+0
   \   0000003C   1371               STRB     R3,[R2, #+4]
   \   0000003E   1B0A               LSRS     R3,R3,#+8
   \   00000040   5371               STRB     R3,[R2, #+5]
    112                ZD_MODBUS[i].Coil=8;
   \   00000042   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000044   090E               LSRS     R1,R1,#+24
   \   00000046   0D22               MOVS     R2,#+13
   \   00000048   4A43               MULS     R2,R1,R2
   \   0000004A   8218               ADDS     R2,R0,R2
   \   0000004C   0823               MOVS     R3,#+8
   \   0000004E   9371               STRB     R3,[R2, #+6]
   \   00000050   1B0A               LSRS     R3,R3,#+8
   \   00000052   D371               STRB     R3,[R2, #+7]
    113                ZD_MODBUS[i].Error=0x0;
   \   00000054   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000056   090E               LSRS     R1,R1,#+24
   \   00000058   0D22               MOVS     R2,#+13
   \   0000005A   5143               MULS     R1,R2,R1
   \   0000005C   4118               ADDS     R1,R0,R1
   \   0000005E   0022               MOVS     R2,#+0
   \   00000060   CA72               STRB     R2,[R1, #+11]
   \   00000062   120A               LSRS     R2,R2,#+8
   \   00000064   0A73               STRB     R2,[R1, #+12]
    114                
    115                i=1; 
   \   00000066   0121               MOVS     R1,#+1
    116                ZD_MODBUS[i].Adress=2;
   \   00000068   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000006A   090E               LSRS     R1,R1,#+24
   \   0000006C   0D22               MOVS     R2,#+13
   \   0000006E   4A43               MULS     R2,R1,R2
   \   00000070   0223               MOVS     R3,#+2
   \   00000072   8354               STRB     R3,[R0, R2]
    117                ZD_MODBUS[i].Function=0xF;
   \   00000074   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000076   090E               LSRS     R1,R1,#+24
   \   00000078   0D22               MOVS     R2,#+13
   \   0000007A   4A43               MULS     R2,R1,R2
   \   0000007C   8218               ADDS     R2,R0,R2
   \   0000007E   0F23               MOVS     R3,#+15
   \   00000080   5370               STRB     R3,[R2, #+1]
    118                ZD_MODBUS[i].Target=0x0;
   \   00000082   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000084   090E               LSRS     R1,R1,#+24
   \   00000086   0D22               MOVS     R2,#+13
   \   00000088   4A43               MULS     R2,R1,R2
   \   0000008A   8218               ADDS     R2,R0,R2
   \   0000008C   0023               MOVS     R3,#+0
   \   0000008E   9370               STRB     R3,[R2, #+2]
   \   00000090   1B0A               LSRS     R3,R3,#+8
   \   00000092   D370               STRB     R3,[R2, #+3]
    119                ZD_MODBUS[i].StartAdr=1;
   \   00000094   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000096   090E               LSRS     R1,R1,#+24
   \   00000098   0D22               MOVS     R2,#+13
   \   0000009A   4A43               MULS     R2,R1,R2
   \   0000009C   8218               ADDS     R2,R0,R2
   \   0000009E   0123               MOVS     R3,#+1
   \   000000A0   1371               STRB     R3,[R2, #+4]
   \   000000A2   1B0A               LSRS     R3,R3,#+8
   \   000000A4   5371               STRB     R3,[R2, #+5]
    120                ZD_MODBUS[i].Coil=8;
   \   000000A6   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000A8   090E               LSRS     R1,R1,#+24
   \   000000AA   0D22               MOVS     R2,#+13
   \   000000AC   4A43               MULS     R2,R1,R2
   \   000000AE   8218               ADDS     R2,R0,R2
   \   000000B0   0823               MOVS     R3,#+8
   \   000000B2   9371               STRB     R3,[R2, #+6]
   \   000000B4   1B0A               LSRS     R3,R3,#+8
   \   000000B6   D371               STRB     R3,[R2, #+7]
    121                ZD_MODBUS[i].Error=0x0;
   \   000000B8   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000BA   090E               LSRS     R1,R1,#+24
   \   000000BC   0D22               MOVS     R2,#+13
   \   000000BE   5143               MULS     R1,R2,R1
   \   000000C0   4118               ADDS     R1,R0,R1
   \   000000C2   0022               MOVS     R2,#+0
   \   000000C4   CA72               STRB     R2,[R1, #+11]
   \   000000C6   120A               LSRS     R2,R2,#+8
   \   000000C8   0A73               STRB     R2,[R1, #+12]
    122           
    123                i=2; 
   \   000000CA   0221               MOVS     R1,#+2
    124                ZD_MODBUS[i].Adress=3;
   \   000000CC   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000CE   090E               LSRS     R1,R1,#+24
   \   000000D0   0D22               MOVS     R2,#+13
   \   000000D2   4A43               MULS     R2,R1,R2
   \   000000D4   0323               MOVS     R3,#+3
   \   000000D6   8354               STRB     R3,[R0, R2]
    125                ZD_MODBUS[i].Function=0xF;
   \   000000D8   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000DA   090E               LSRS     R1,R1,#+24
   \   000000DC   0D22               MOVS     R2,#+13
   \   000000DE   4A43               MULS     R2,R1,R2
   \   000000E0   8218               ADDS     R2,R0,R2
   \   000000E2   0F23               MOVS     R3,#+15
   \   000000E4   5370               STRB     R3,[R2, #+1]
    126                ZD_MODBUS[i].Target=0x0;
   \   000000E6   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000E8   090E               LSRS     R1,R1,#+24
   \   000000EA   0D22               MOVS     R2,#+13
   \   000000EC   4A43               MULS     R2,R1,R2
   \   000000EE   8218               ADDS     R2,R0,R2
   \   000000F0   0023               MOVS     R3,#+0
   \   000000F2   9370               STRB     R3,[R2, #+2]
   \   000000F4   1B0A               LSRS     R3,R3,#+8
   \   000000F6   D370               STRB     R3,[R2, #+3]
    127                ZD_MODBUS[i].StartAdr=2;
   \   000000F8   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000FA   090E               LSRS     R1,R1,#+24
   \   000000FC   0D22               MOVS     R2,#+13
   \   000000FE   4A43               MULS     R2,R1,R2
   \   00000100   8218               ADDS     R2,R0,R2
   \   00000102   0223               MOVS     R3,#+2
   \   00000104   1371               STRB     R3,[R2, #+4]
   \   00000106   1B0A               LSRS     R3,R3,#+8
   \   00000108   5371               STRB     R3,[R2, #+5]
    128                ZD_MODBUS[i].Coil=8;
   \   0000010A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000010C   090E               LSRS     R1,R1,#+24
   \   0000010E   0D22               MOVS     R2,#+13
   \   00000110   4A43               MULS     R2,R1,R2
   \   00000112   8218               ADDS     R2,R0,R2
   \   00000114   0823               MOVS     R3,#+8
   \   00000116   9371               STRB     R3,[R2, #+6]
   \   00000118   1B0A               LSRS     R3,R3,#+8
   \   0000011A   D371               STRB     R3,[R2, #+7]
    129                ZD_MODBUS[i].Error=0x0;      
   \   0000011C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000011E   090E               LSRS     R1,R1,#+24
   \   00000120   0D22               MOVS     R2,#+13
   \   00000122   5143               MULS     R1,R2,R1
   \   00000124   4018               ADDS     R0,R0,R1
   \   00000126   0021               MOVS     R1,#+0
   \   00000128   C172               STRB     R1,[R0, #+11]
   \   0000012A   090A               LSRS     R1,R1,#+8
   \   0000012C   0173               STRB     R1,[R0, #+12]
    130          
    131               
    132                
    133          }
   \   0000012E   7047               BX       LR               ;; return
    134          
    135          
    136          //*-----------------------------------------------------------------------------
    137          //* Nazwa funkcji :    PortStageRead
    138          //* Funkcja wydobywa wartoœæ bitu o numerze PortNr ze zmiennej pod adresem *Stage 
    139          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    140          char PortStageRead(short int Stage, char PortNr)
    141          {
   \                     PortStageRead:
   \   00000000   0200               MOVS     R2,R0
    142              char odp=0;
   \   00000002   0020               MOVS     R0,#+0
    143              odp=(Stage>>PortNr)&0x1;
   \   00000004   1204               LSLS     R2,R2,#+16       ;; SignExtS R2,R2,#+16,#+16
   \   00000006   1214               ASRS     R2,R2,#+16
   \   00000008   0A41               ASRS     R2,R2,R1
   \   0000000A   0121               MOVS     R1,#+1
   \   0000000C   1140               ANDS     R1,R1,R2
   \   0000000E   0800               MOVS     R0,R1
    144              return odp;
   \   00000010   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000012   000E               LSRS     R0,R0,#+24
   \   00000014   7047               BX       LR               ;; return
    145          }
    146          
    147          //*-----------------------------------------------------------------------------
    148          //* Nazwa funkcji :    PortStageSet
    149          //* Funkcja ustawia stan portu (bit PortNr dla zmiennej pod adresem *Stage) na Value 
    150          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    151          void PortStageSet(short int *Stage, char PortNr, char Value)
    152          {
   \                     PortStageSet:
   \   00000000   11B4               PUSH     {R0,R4}
    153              Value&=0x1;
   \   00000002   1300               MOVS     R3,R2
   \   00000004   0122               MOVS     R2,#+1
   \   00000006   1A40               ANDS     R2,R2,R3
    154              *Stage=(*Stage&(~(0x1<<PortNr))) | (Value<<PortNr);
   \   00000008   0388               LDRH     R3,[R0, #+0]
   \   0000000A   0124               MOVS     R4,#+1
   \   0000000C   8C40               LSLS     R4,R4,R1
   \   0000000E   A343               BICS     R3,R3,R4
   \   00000010   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000012   120E               LSRS     R2,R2,#+24
   \   00000014   8A40               LSLS     R2,R2,R1
   \   00000016   1A43               ORRS     R2,R2,R3
   \   00000018   0280               STRH     R2,[R0, #+0]
    155          }
   \   0000001A   01B0               ADD      SP,SP,#+4
   \   0000001C   10BC               POP      {R4}
   \   0000001E   7047               BX       LR               ;; return
    156          
    157          
    158          
    159          //*-----------------------------------------------------------------------------
    160          //* Nazwa funkcji :    ProcStI_Action
    161          //* Funkcja procedury "Stan wejœcia"
    162          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    163          void ProcStI_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    164          {  
   \                     ProcStI_Action:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0C00               MOVS     R4,R1
    165            //je¿eli port w wêŸle == 1 i wiarygodny pomiar
    166            if (Proc->Nr>=0)
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   6156               LDRSB    R1,[R4, R1]
   \   00000008   0029               CMP      R1,#+0
   \   0000000A   1ED4               BMI      ??ProcStI_Action_0
    167            {
    168              if ((MainStg->StageI[Proc->Nr].Port !=0x8AAA))
   \   0000000C   0121               MOVS     R1,#+1
   \   0000000E   6156               LDRSB    R1,[R4, R1]
   \   00000010   1623               MOVS     R3,#+22
   \   00000012   5943               MULS     R1,R3,R1
   \   00000014   5118               ADDS     R1,R2,R1
   \   00000016   A031               ADDS     R1,R1,#+160
   \   00000018   0988               LDRH     R1,[R1, #+0]
   \   0000001A   ....               LDR      R3,??DataTable3  ;; 0x8aaa
   \   0000001C   9942               CMP      R1,R3
   \   0000001E   22D0               BEQ      ??ProcStI_Action_1
    169              {
    170                 if (*PrvOut)
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   405E               LDRSH    R0,[R0, R1]
   \   00000024   0028               CMP      R0,#+0
   \   00000026   0DD0               BEQ      ??ProcStI_Action_2
    171                 {
    172                    Proc->Out=PortStageRead(MainStg->StageI[Proc->Nr].Port, Proc->Tag.Port);  
   \   00000028   217A               LDRB     R1,[R4, #+8]
   \   0000002A   0120               MOVS     R0,#+1
   \   0000002C   2056               LDRSB    R0,[R4, R0]
   \   0000002E   1623               MOVS     R3,#+22
   \   00000030   5843               MULS     R0,R3,R0
   \   00000032   1018               ADDS     R0,R2,R0
   \   00000034   A030               ADDS     R0,R0,#+160
   \   00000036   0088               LDRH     R0,[R0, #+0]
   \   00000038   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   0000003A   0014               ASRS     R0,R0,#+16
   \   0000003C   ........           BL       PortStageRead
   \   00000040   6082               STRH     R0,[R4, #+18]
   \   00000042   10E0               B        ??ProcStI_Action_1
    173                 }else{
    174                   Proc->Out=0;
   \                     ??ProcStI_Action_2:
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   6082               STRH     R0,[R4, #+18]
   \   00000048   0DE0               B        ??ProcStI_Action_1
    175                 }
    176              }
    177              
    178            //je¿eli zmienna dwustanowa  
    179            }else{
    180                Proc->Out= (Variables[Proc->Tag.Port/8]>> (Proc->Tag.Port%8))&0x1;
   \                     ??ProcStI_Action_0:
   \   0000004A   207A               LDRB     R0,[R4, #+8]
   \   0000004C   0821               MOVS     R1,#+8
   \   0000004E   ........           BL       __aeabi_idivmod
   \   00000052   ....               LDR      R1,??DataTable4  ;; Variables
   \   00000054   0D5C               LDRB     R5,[R1, R0]
   \   00000056   207A               LDRB     R0,[R4, #+8]
   \   00000058   0821               MOVS     R1,#+8
   \   0000005A   ........           BL       __aeabi_idivmod
   \   0000005E   0D41               ASRS     R5,R5,R1
   \   00000060   0120               MOVS     R0,#+1
   \   00000062   2840               ANDS     R0,R0,R5
   \   00000064   6082               STRH     R0,[R4, #+18]
    181            }
    182          
    183          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcStI_Action_1:
   \   00000066   01B0               ADD      SP,SP,#+4
   \   00000068   30BC               POP      {R4,R5}
   \   0000006A   01BC               POP      {R0}
   \   0000006C   0047               BX       R0               ;; return
    184          
    185          
    186          
    187          //*-----------------------------------------------------------------------------
    188          //* Nazwa funkcji :    ProcStI_Action
    189          //* Funkcja procedury "Stan wejœcia"
    190          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    191          void ProcStNI_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    192          {  
   \                     ProcStNI_Action:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0C00               MOVS     R4,R1
    193                   //je¿eli port w wêŸle == 1 i wiarygodny pomiar
    194            if ((MainStg->StageI[Proc->Nr].Port !=0x8AAA))
   \   00000004   0121               MOVS     R1,#+1
   \   00000006   6156               LDRSB    R1,[R4, R1]
   \   00000008   1623               MOVS     R3,#+22
   \   0000000A   5943               MULS     R1,R3,R1
   \   0000000C   5118               ADDS     R1,R2,R1
   \   0000000E   A031               ADDS     R1,R1,#+160
   \   00000010   0988               LDRH     R1,[R1, #+0]
   \   00000012   ....               LDR      R3,??DataTable3  ;; 0x8aaa
   \   00000014   9942               CMP      R1,R3
   \   00000016   2FD0               BEQ      ??ProcStNI_Action_0
    195            {
    196            
    197             if (*PrvOut)
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   405E               LDRSH    R0,[R0, R1]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   29D0               BEQ      ??ProcStNI_Action_1
    198             {
    199          
    200                   if (Proc->Nr>=0)
   \   00000020   0120               MOVS     R0,#+1
   \   00000022   2056               LDRSB    R0,[R4, R0]
   \   00000024   0028               CMP      R0,#+0
   \   00000026   13D4               BMI      ??ProcStNI_Action_2
    201                   {
    202                     if (PortStageRead(MainStg->StageI[Proc->Nr].Port, Proc->Tag.Port)==1)
   \   00000028   217A               LDRB     R1,[R4, #+8]
   \   0000002A   0120               MOVS     R0,#+1
   \   0000002C   2056               LDRSB    R0,[R4, R0]
   \   0000002E   1623               MOVS     R3,#+22
   \   00000030   5843               MULS     R0,R3,R0
   \   00000032   1018               ADDS     R0,R2,R0
   \   00000034   A030               ADDS     R0,R0,#+160
   \   00000036   0088               LDRH     R0,[R0, #+0]
   \   00000038   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   0000003A   0014               ASRS     R0,R0,#+16
   \   0000003C   ........           BL       PortStageRead
   \   00000040   0128               CMP      R0,#+1
   \   00000042   02D1               BNE      ??ProcStNI_Action_3
    203                     {
    204                      Proc->Out=0; 
   \   00000044   0020               MOVS     R0,#+0
   \   00000046   6082               STRH     R0,[R4, #+18]
   \   00000048   16E0               B        ??ProcStNI_Action_0
    205                     }else{
    206                      Proc->Out=1;
   \                     ??ProcStNI_Action_3:
   \   0000004A   0120               MOVS     R0,#+1
   \   0000004C   6082               STRH     R0,[R4, #+18]
   \   0000004E   13E0               B        ??ProcStNI_Action_0
    207                     }
    208                   }else{
    209                     if (((Variables[Proc->Tag.Port/8]>> (Proc->Tag.Port%8))&0x1)==1)
   \                     ??ProcStNI_Action_2:
   \   00000050   207A               LDRB     R0,[R4, #+8]
   \   00000052   0821               MOVS     R1,#+8
   \   00000054   ........           BL       __aeabi_idivmod
   \   00000058   ....               LDR      R1,??DataTable4  ;; Variables
   \   0000005A   0D5C               LDRB     R5,[R1, R0]
   \   0000005C   207A               LDRB     R0,[R4, #+8]
   \   0000005E   0821               MOVS     R1,#+8
   \   00000060   ........           BL       __aeabi_idivmod
   \   00000064   0D41               ASRS     R5,R5,R1
   \   00000066   0120               MOVS     R0,#+1
   \   00000068   2840               ANDS     R0,R0,R5
   \   0000006A   401E               SUBS     R0,R0,#+1
   \   0000006C   8041               SBCS     R0,R0,R0
   \   0000006E   C00F               LSRS     R0,R0,#+31
   \   00000070   6082               STRH     R0,[R4, #+18]
   \   00000072   01E0               B        ??ProcStNI_Action_0
    210                     {
    211                      Proc->Out=0; 
    212                     }else{
    213                      Proc->Out=1;
    214                     }
    215                   }
    216                 }else{
    217                   Proc->Out=0;
   \                     ??ProcStNI_Action_1:
   \   00000074   0020               MOVS     R0,#+0
   \   00000076   6082               STRH     R0,[R4, #+18]
    218                 }
    219             }
    220          
    221          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcStNI_Action_0:
   \   00000078   01B0               ADD      SP,SP,#+4
   \   0000007A   30BC               POP      {R4,R5}
   \   0000007C   01BC               POP      {R0}
   \   0000007E   0047               BX       R0               ;; return
    222          
    223          
    224          
    225          
    226          //*-----------------------------------------------------------------------------
    227          //* Nazwa funkcji :    ProcGetAnal_Action
    228          //* Funkcja procedury "Stan wejœcia analogowego"
    229          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    230          void ProcGetReg_Action(_Procedure *Proc, _MainStage *MainStg) 
    231          {  
   \                     ProcGetReg_Action:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    232            if (Proc->Nr>=0)
   \   00000002   0122               MOVS     R2,#+1
   \   00000004   8256               LDRSB    R2,[R0, R2]
   \   00000006   002A               CMP      R2,#+0
   \   00000008   1AD4               BMI      ??ProcGetReg_Action_0
    233            {
    234                if ((MainStg->StageI[Proc->Nr].Value[Proc->Tag.RegNr])!=(signed short int )0x8AAA)
   \   0000000A   A023               MOVS     R3,#+160
   \   0000000C   027A               LDRB     R2,[R0, #+8]
   \   0000000E   0224               MOVS     R4,#+2
   \   00000010   6243               MULS     R2,R4,R2
   \   00000012   0124               MOVS     R4,#+1
   \   00000014   0457               LDRSB    R4,[R0, R4]
   \   00000016   1625               MOVS     R5,#+22
   \   00000018   6C43               MULS     R4,R5,R4
   \   0000001A   0C19               ADDS     R4,R1,R4
   \   0000001C   A218               ADDS     R2,R4,R2
   \   0000001E   D25E               LDRSH    R2,[R2, R3]
   \   00000020   134B               LDR      R3,??ProcGetReg_Action_1  ;; 0xffff8aaa
   \   00000022   9A42               CMP      R2,R3
   \   00000024   20D0               BEQ      ??ProcGetReg_Action_2
    235                {
    236                  Proc->Out=MainStg->StageI[Proc->Nr].Value[Proc->Tag.RegNr];  
   \   00000026   027A               LDRB     R2,[R0, #+8]
   \   00000028   0223               MOVS     R3,#+2
   \   0000002A   5A43               MULS     R2,R3,R2
   \   0000002C   0123               MOVS     R3,#+1
   \   0000002E   C356               LDRSB    R3,[R0, R3]
   \   00000030   1624               MOVS     R4,#+22
   \   00000032   6343               MULS     R3,R4,R3
   \   00000034   C918               ADDS     R1,R1,R3
   \   00000036   8918               ADDS     R1,R1,R2
   \   00000038   A031               ADDS     R1,R1,#+160
   \   0000003A   0988               LDRH     R1,[R1, #+0]
   \   0000003C   4182               STRH     R1,[R0, #+18]
   \   0000003E   13E0               B        ??ProcGetReg_Action_2
    237                }
    238            }else{
    239                if ((MainStg->StageI[Proc->Nr].Value[Proc->Tag.RegNr])!=(signed short int )0x8AAA)
   \                     ??ProcGetReg_Action_0:
   \   00000040   A023               MOVS     R3,#+160
   \   00000042   027A               LDRB     R2,[R0, #+8]
   \   00000044   0224               MOVS     R4,#+2
   \   00000046   6243               MULS     R2,R4,R2
   \   00000048   0124               MOVS     R4,#+1
   \   0000004A   0457               LDRSB    R4,[R0, R4]
   \   0000004C   1625               MOVS     R5,#+22
   \   0000004E   6C43               MULS     R4,R5,R4
   \   00000050   0919               ADDS     R1,R1,R4
   \   00000052   8918               ADDS     R1,R1,R2
   \   00000054   C95E               LDRSH    R1,[R1, R3]
   \   00000056   064A               LDR      R2,??ProcGetReg_Action_1  ;; 0xffff8aaa
   \   00000058   9142               CMP      R1,R2
   \   0000005A   05D0               BEQ      ??ProcGetReg_Action_2
    240                {
    241                  Proc->Out=VariablesAnal[Proc->Tag.RegNr];
   \   0000005C   017A               LDRB     R1,[R0, #+8]
   \   0000005E   0222               MOVS     R2,#+2
   \   00000060   5143               MULS     R1,R2,R1
   \   00000062   ....               LDR      R2,??DataTable7  ;; VariablesAnal
   \   00000064   515A               LDRH     R1,[R2, R1]
   \   00000066   4182               STRH     R1,[R0, #+18]
    242                }
    243            }
    244               
    245          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcGetReg_Action_2:
   \   00000068   01B0               ADD      SP,SP,#+4
   \   0000006A   30BC               POP      {R4,R5}
   \   0000006C   01BC               POP      {R0}
   \   0000006E   0047               BX       R0               ;; return
   \                     ??ProcGetReg_Action_1:
   \   00000070   AA8AFFFF           DC32     0xffff8aaa
    246          
    247          
    248          
    249          //*-----------------------------------------------------------------------------
    250          //* Nazwa funkcji :    ProcSetAnal_Action
    251          //* Funkcja procedury "Ustawienie wyjœcia analogowego"
    252          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    253          void ProcSetAnal_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    254          {  
   \                     ProcSetAnal_Action:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    255            if (Proc->Nr>=0)
   \   00000002   0123               MOVS     R3,#+1
   \   00000004   CB56               LDRSB    R3,[R1, R3]
   \   00000006   002B               CMP      R3,#+0
   \   00000008   0CD4               BMI      ??ProcSetAnal_Action_0
    256            {
    257                MainStg->StageQ[Proc->Nr].Value[Proc->Tag.RegNr]=*PrvOut;
   \   0000000A   ....               LDR      R3,??DataTable8  ;; 0x3a2
   \   0000000C   0C7A               LDRB     R4,[R1, #+8]
   \   0000000E   0225               MOVS     R5,#+2
   \   00000010   6C43               MULS     R4,R5,R4
   \   00000012   0125               MOVS     R5,#+1
   \   00000014   4D57               LDRSB    R5,[R1, R5]
   \   00000016   1626               MOVS     R6,#+22
   \   00000018   7543               MULS     R5,R6,R5
   \   0000001A   5219               ADDS     R2,R2,R5
   \   0000001C   1219               ADDS     R2,R2,R4
   \   0000001E   0488               LDRH     R4,[R0, #+0]
   \   00000020   D452               STRH     R4,[R2, R3]
   \   00000022   05E0               B        ??ProcSetAnal_Action_1
    258            }else{
    259                VariablesAnal[Proc->Tag.RegNr]=*PrvOut;
   \                     ??ProcSetAnal_Action_0:
   \   00000024   0A7A               LDRB     R2,[R1, #+8]
   \   00000026   0223               MOVS     R3,#+2
   \   00000028   5A43               MULS     R2,R3,R2
   \   0000002A   ....               LDR      R3,??DataTable7  ;; VariablesAnal
   \   0000002C   0488               LDRH     R4,[R0, #+0]
   \   0000002E   9C52               STRH     R4,[R3, R2]
    260            }  
    261            Proc->Out=*PrvOut;
   \                     ??ProcSetAnal_Action_1:
   \   00000030   0088               LDRH     R0,[R0, #+0]
   \   00000032   4882               STRH     R0,[R1, #+18]
    262           
    263          }//_______________________ Koniec funkcji  ____________________________
   \   00000034   70BC               POP      {R4-R6}
   \   00000036   01BC               POP      {R0}
   \   00000038   0047               BX       R0               ;; return
    264          
    265          
    266          
    267          
    268          //*-----------------------------------------------------------------------------
    269          //* Nazwa funkcji :    ProcConstAnal_Action
    270          //* Funkcja procedury "staa analogowa"
    271          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    272          void ProcConstAnal_Action(_Procedure *Proc) 
    273          {  
    274            Proc->Out=Proc->Tag.ConstAnValue;  
   \                     ProcConstAnal_Action:
   \   00000000   0189               LDRH     R1,[R0, #+8]
   \   00000002   4182               STRH     R1,[R0, #+18]
    275          }//_______________________ Koniec funkcji  ____________________________
   \   00000004   7047               BX       LR               ;; return
    276          
    277          
    278          
    279          
    280          
    281          //*-----------------------------------------------------------------------------
    282          
    283          
    284          
    285          
    286          
    287          //*-----------------------------------------------------------------------------
    288          //* Nazwa funkcji :    ProcStB_Action
    289          //* Funkcja procedury "Akcja przycisków przycisków"
    290          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    291          void ProcStB_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    292          {  
   \                     ProcStB_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    293             if (*PrvOut)
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   C05E               LDRSH    R0,[R0, R3]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   06D0               BEQ      ??ProcStB_Action_0
    294             {
    295                Proc->Out=MainStg->StageButtonExe[Proc->Nr];  
   \   0000000A   0120               MOVS     R0,#+1
   \   0000000C   0856               LDRSB    R0,[R1, R0]
   \   0000000E   1018               ADDS     R0,R2,R0
   \   00000010   5030               ADDS     R0,R0,#+80
   \   00000012   0078               LDRB     R0,[R0, #+0]
   \   00000014   4882               STRH     R0,[R1, #+18]
   \   00000016   01E0               B        ??ProcStB_Action_1
    296          
    297             }else{
    298               Proc->Out=0;
   \                     ??ProcStB_Action_0:
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   4882               STRH     R0,[R1, #+18]
    299             }
    300          
    301          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcStB_Action_1:
   \   0000001C   01B0               ADD      SP,SP,#+4
   \   0000001E   01BC               POP      {R0}
   \   00000020   0047               BX       R0               ;; return
    302          
    303          
    304          
    305          //*-----------------------------------------------------------------------------
    306          //* Nazwa funkcji :    ProcStQ_Action
    307          //* Funkcja procedury "Stan wyjœcia"
    308          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    309          void ProcStQ_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    310          {  
   \                     ProcStQ_Action:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0C00               MOVS     R4,R1
    311             if (*PrvOut)
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   405E               LDRSH    R0,[R0, R1]
   \   00000008   0028               CMP      R0,#+0
   \   0000000A   0DD0               BEQ      ??ProcStQ_Action_0
    312             {
    313                Proc->Out=PortStageRead(MainStg->StageQ[Proc->Nr].Port,Proc->Tag.Port);  
   \   0000000C   217A               LDRB     R1,[R4, #+8]
   \   0000000E   ....               LDR      R0,??DataTable8  ;; 0x3a2
   \   00000010   0123               MOVS     R3,#+1
   \   00000012   E356               LDRSB    R3,[R4, R3]
   \   00000014   1625               MOVS     R5,#+22
   \   00000016   6B43               MULS     R3,R5,R3
   \   00000018   D218               ADDS     R2,R2,R3
   \   0000001A   105A               LDRH     R0,[R2, R0]
   \   0000001C   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   0000001E   0014               ASRS     R0,R0,#+16
   \   00000020   ........           BL       PortStageRead
   \   00000024   6082               STRH     R0,[R4, #+18]
   \   00000026   01E0               B        ??ProcStQ_Action_1
    314             }else{
    315                Proc->Out=0;
   \                     ??ProcStQ_Action_0:
   \   00000028   0020               MOVS     R0,#+0
   \   0000002A   6082               STRH     R0,[R4, #+18]
    316             }
    317          
    318          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcStQ_Action_1:
   \   0000002C   01B0               ADD      SP,SP,#+4
   \   0000002E   30BC               POP      {R4,R5}
   \   00000030   01BC               POP      {R0}
   \   00000032   0047               BX       R0               ;; return
    319          
    320          
    321          
    322          
    323          
    324          //*-----------------------------------------------------------------------------
    325          //* Nazwa funkcji :    ProcStS_Action
    326          //* Funkcja procedury "Stan sceny"
    327          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    328          void ProcStS_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    329          {  
   \                     ProcStS_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    330            Proc->Out=0;
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   4B82               STRH     R3,[R1, #+18]
    331             if (*PrvOut)
   \   00000006   0023               MOVS     R3,#+0
   \   00000008   C05E               LDRSH    R0,[R0, R3]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   0BD0               BEQ      ??ProcStS_Action_0
    332             {
    333                if (Proc->Nr==MainStg->SceneNr) Proc->Out=1;
   \   0000000E   0120               MOVS     R0,#+1
   \   00000010   0856               LDRSB    R0,[R1, R0]
   \   00000012   064B               LDR      R3,??ProcStS_Action_1  ;; 0x6ea
   \   00000014   D25C               LDRB     R2,[R2, R3]
   \   00000016   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000018   0014               ASRS     R0,R0,#+16
   \   0000001A   1204               LSLS     R2,R2,#+16       ;; SignExtS R2,R2,#+16,#+16
   \   0000001C   1214               ASRS     R2,R2,#+16
   \   0000001E   9042               CMP      R0,R2
   \   00000020   01D1               BNE      ??ProcStS_Action_0
   \   00000022   0120               MOVS     R0,#+1
   \   00000024   4882               STRH     R0,[R1, #+18]
    334             }
    335          
    336          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcStS_Action_0:
   \   00000026   01B0               ADD      SP,SP,#+4
   \   00000028   01BC               POP      {R0}
   \   0000002A   0047               BX       R0               ;; return
   \                     ??ProcStS_Action_1:
   \   0000002C   EA060000           DC32     0x6ea
    337          
    338          
    339          
    340          /*
    341          
    342          //-----------------------------------------------------------------------------
    343          // Nazwa funkcji :    ProcStT_Action
    344          // Funkcja procedury "Stan timera"
    345          //-----------------------------------------------------------------------------
    346          void ProcStT_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    347          {  
    348             if (*PrvOut)
    349             {
    350                Proc->Out=PortStageRead(MainStg->StageTimer[Proc->Nr].Port,Proc->Tag.Port);  
    351             }else{
    352                Proc->Out=0;
    353             }
    354          
    355          }//_______________________ Koniec funkcji  ____________________________
    356          
    357          
    358          
    359          
    360          //-----------------------------------------------------------------------------
    361          // Nazwa funkcji :    ProcStT_Action
    362          // Funkcja procedury "Stan timera"
    363          //-----------------------------------------------------------------------------
    364          void ProcStNT_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    365          {  
    366             if (*PrvOut) 
    367             {
    368                if (PortStageRead(MainStg->StageTimer[Proc->Nr].Port,Proc->Tag.Port))
    369                {
    370                  Proc->Out=0;
    371                }else{
    372                  Proc->Out=1;  
    373                }
    374             }else{
    375                Proc->Out=0;
    376             }
    377          
    378          }//_______________________ Koniec funkcji  ____________________________
    379          */
    380          
    381          
    382          
    383           extern unsigned long long g_NextTimeProgram;
    384          
    385          
    386          //*-----------------------------------------------------------------------------
    387          //* Nazwa funkcji :    ProcWOUT_Action
    388          //* Funkcja procedury "Ustaw stan wyjœcia"
    389          //*-----------------------------------------------------------------------------
    390          

   \                                 In section Debug.txt, align 4, keep-with-next
    391          void ProcWOUT_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    392          {  
   \                     ProcWOUT_Action:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
    393          
    394               if ((*PrvOut==1) && (Proc->Out==0))
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   205E               LDRSH    R0,[R4, R0]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   44D1               BNE      ??ProcWOUT_Action_0
   \   00000010   1220               MOVS     R0,#+18
   \   00000012   285E               LDRSH    R0,[R5, R0]
   \   00000014   0028               CMP      R0,#+0
   \   00000016   40D1               BNE      ??ProcWOUT_Action_0
    395               {
    396                if ((Proc->Nr>=0) && (Proc->Nr!=0xFF))   //je¿eli wêze³
                                                     ^
Warning[Pa084]: pointless integer comparison with an out of range value
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   2856               LDRSB    R0,[R5, R0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   21D4               BMI      ??ProcWOUT_Action_1
   \   00000020   0120               MOVS     R0,#+1
   \   00000022   2856               LDRSB    R0,[R5, R0]
   \   00000024   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000026   0014               ASRS     R0,R0,#+16
   \   00000028   FF28               CMP      R0,#+255
   \   0000002A   1BD0               BEQ      ??ProcWOUT_Action_1
    397                {
    398                   PortStageSet((&(MainStg->StageQ[Proc->Nr].Port)),Proc->Tag.Port,1); 
                                       ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000002C   0122               MOVS     R2,#+1
   \   0000002E   297A               LDRB     R1,[R5, #+8]
   \   00000030   3D48               LDR      R0,??ProcWOUT_Action_2  ;; 0x3a2
   \   00000032   0123               MOVS     R3,#+1
   \   00000034   EB56               LDRSB    R3,[R5, R3]
   \   00000036   1627               MOVS     R7,#+22
   \   00000038   7B43               MULS     R3,R7,R3
   \   0000003A   F318               ADDS     R3,R6,R3
   \   0000003C   1818               ADDS     R0,R3,R0
   \   0000003E   ........           BL       PortStageSet
    399                   if (TransQuality.Mensur[Proc->Nr-1]>0)  MainStg->SendStageChange[Proc->Nr]=ChangeStageFlag;
   \   00000042   0120               MOVS     R0,#+1
   \   00000044   2856               LDRSB    R0,[R5, R0]
   \   00000046   0421               MOVS     R1,#+4
   \   00000048   4843               MULS     R0,R1,R0
   \   0000004A   3849               LDR      R1,??ProcWOUT_Action_2+0x4  ;; TransQuality
   \   0000004C   0818               ADDS     R0,R1,R0
   \   0000004E   806C               LDR      R0,[R0, #+72]
   \   00000050   0028               CMP      R0,#+0
   \   00000052   22D0               BEQ      ??ProcWOUT_Action_0
   \   00000054   3648               LDR      R0,??ProcWOUT_Action_2+0x8  ;; 0x6eb
   \   00000056   0121               MOVS     R1,#+1
   \   00000058   6956               LDRSB    R1,[R5, R1]
   \   0000005A   7118               ADDS     R1,R6,R1
   \   0000005C   354A               LDR      R2,??ProcWOUT_Action_2+0xC  ;; ChangeStageFlag
   \   0000005E   1278               LDRB     R2,[R2, #+0]
   \   00000060   0A54               STRB     R2,[R1, R0]
   \   00000062   1AE0               B        ??ProcWOUT_Action_0
    400                 
    401                   #ifdef _LIVE_RJESTR 
    402                       LIVE_TAB[LIVE_TAB_IDX]=0xF000 | ((Proc->Nr&0xF)<<8) | ((MainStg->StageQ[Proc->Nr].Port)&0xFF);
    403                       if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    404                   #endif
    405          
    406                }else{  //je¿eli zmienna dwustanowa  
    407                    Variables[Proc->Tag.Port/8] |= 1<<(Proc->Tag.Port%8);
   \                     ??ProcWOUT_Action_1:
   \   00000064   287A               LDRB     R0,[R5, #+8]
   \   00000066   0821               MOVS     R1,#+8
   \   00000068   ........           BL       __aeabi_idivmod
   \   0000006C   3249               LDR      R1,??ProcWOUT_Action_2+0x10  ;; Variables
   \   0000006E   01B5               PUSH     {R0,LR}
   \   00000070   0191               STR      R1,[SP, #+4]
   \   00000072   287A               LDRB     R0,[R5, #+8]
   \   00000074   0821               MOVS     R1,#+8
   \   00000076   ........           BL       __aeabi_idivmod
   \   0000007A   2F49               LDR      R1,??ProcWOUT_Action_2+0x10  ;; Variables
   \   0000007C   085C               LDRB     R0,[R1, R0]
   \   0000007E   01B5               PUSH     {R0,LR}
   \   00000080   0127               MOVS     R7,#+1
   \   00000082   287A               LDRB     R0,[R5, #+8]
   \   00000084   0821               MOVS     R1,#+8
   \   00000086   ........           BL       __aeabi_idivmod
   \   0000008A   8F40               LSLS     R7,R7,R1
   \   0000008C   0098               LDR      R0,[SP, #0]
   \   0000008E   02B0               ADD      SP,SP,#+8
   \   00000090   0743               ORRS     R7,R7,R0
   \   00000092   0199               LDR      R1,[SP, #+4]
   \   00000094   0098               LDR      R0,[SP, #0]
   \   00000096   02B0               ADD      SP,SP,#+8
   \   00000098   0F54               STRB     R7,[R1, R0]
    408                    
    409                    #ifdef _LIVE_RJESTR   
    410                        LIVE_TAB[LIVE_TAB_IDX]=0xF000 | ((Proc->Nr&0xF)<<8) | ((MainStg->StageQ[Proc->Nr].Port)&0xFF);
    411                        if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    412                    #endif
    413                }
    414               }
    415          
    416               if ((*PrvOut==0) && (Proc->Out==1))
   \                     ??ProcWOUT_Action_0:
   \   0000009A   0020               MOVS     R0,#+0
   \   0000009C   205E               LDRSH    R0,[R4, R0]
   \   0000009E   0028               CMP      R0,#+0
   \   000000A0   3BD1               BNE      ??ProcWOUT_Action_3
   \   000000A2   1220               MOVS     R0,#+18
   \   000000A4   285E               LDRSH    R0,[R5, R0]
   \   000000A6   0128               CMP      R0,#+1
   \   000000A8   37D1               BNE      ??ProcWOUT_Action_3
    417               {
    418                  if (Proc->Nr>=0)    //je¿eli wêze³
   \   000000AA   0120               MOVS     R0,#+1
   \   000000AC   2856               LDRSB    R0,[R5, R0]
   \   000000AE   0028               CMP      R0,#+0
   \   000000B0   1BD4               BMI      ??ProcWOUT_Action_4
    419                  {
    420                     PortStageSet((&(MainStg->StageQ[Proc->Nr].Port)),Proc->Tag.Port,0); 
                                         ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   000000B2   0022               MOVS     R2,#+0
   \   000000B4   297A               LDRB     R1,[R5, #+8]
   \   000000B6   1C48               LDR      R0,??ProcWOUT_Action_2  ;; 0x3a2
   \   000000B8   0123               MOVS     R3,#+1
   \   000000BA   EB56               LDRSB    R3,[R5, R3]
   \   000000BC   1627               MOVS     R7,#+22
   \   000000BE   7B43               MULS     R3,R7,R3
   \   000000C0   F318               ADDS     R3,R6,R3
   \   000000C2   1818               ADDS     R0,R3,R0
   \   000000C4   ........           BL       PortStageSet
    421                   
    422                     if (TransQuality.Mensur[Proc->Nr-1]>0)   
   \   000000C8   0120               MOVS     R0,#+1
   \   000000CA   2856               LDRSB    R0,[R5, R0]
   \   000000CC   0421               MOVS     R1,#+4
   \   000000CE   4843               MULS     R0,R1,R0
   \   000000D0   1649               LDR      R1,??ProcWOUT_Action_2+0x4  ;; TransQuality
   \   000000D2   0818               ADDS     R0,R1,R0
   \   000000D4   806C               LDR      R0,[R0, #+72]
   \   000000D6   0028               CMP      R0,#+0
   \   000000D8   1FD0               BEQ      ??ProcWOUT_Action_3
    423                     MainStg->SendStageChange[Proc->Nr]=ChangeStageFlag;
   \   000000DA   1548               LDR      R0,??ProcWOUT_Action_2+0x8  ;; 0x6eb
   \   000000DC   0121               MOVS     R1,#+1
   \   000000DE   6956               LDRSB    R1,[R5, R1]
   \   000000E0   7118               ADDS     R1,R6,R1
   \   000000E2   144A               LDR      R2,??ProcWOUT_Action_2+0xC  ;; ChangeStageFlag
   \   000000E4   1278               LDRB     R2,[R2, #+0]
   \   000000E6   0A54               STRB     R2,[R1, R0]
   \   000000E8   17E0               B        ??ProcWOUT_Action_3
    424                    
    425                  }else //je¿eli zmienna dwustanowa
    426                  { 
    427                      Variables[Proc->Tag.Port/8]&= ~(1<<(Proc->Tag.Port%8));
   \                     ??ProcWOUT_Action_4:
   \   000000EA   287A               LDRB     R0,[R5, #+8]
   \   000000EC   0821               MOVS     R1,#+8
   \   000000EE   ........           BL       __aeabi_idivmod
   \   000000F2   1149               LDR      R1,??ProcWOUT_Action_2+0x10  ;; Variables
   \   000000F4   01B5               PUSH     {R0,LR}
   \   000000F6   0191               STR      R1,[SP, #+4]
   \   000000F8   287A               LDRB     R0,[R5, #+8]
   \   000000FA   0821               MOVS     R1,#+8
   \   000000FC   ........           BL       __aeabi_idivmod
   \   00000100   0D49               LDR      R1,??ProcWOUT_Action_2+0x10  ;; Variables
   \   00000102   0E5C               LDRB     R6,[R1, R0]
   \   00000104   0127               MOVS     R7,#+1
   \   00000106   287A               LDRB     R0,[R5, #+8]
   \   00000108   0821               MOVS     R1,#+8
   \   0000010A   ........           BL       __aeabi_idivmod
   \   0000010E   8F40               LSLS     R7,R7,R1
   \   00000110   BE43               BICS     R6,R6,R7
   \   00000112   0199               LDR      R1,[SP, #+4]
   \   00000114   0098               LDR      R0,[SP, #0]
   \   00000116   02B0               ADD      SP,SP,#+8
   \   00000118   0E54               STRB     R6,[R1, R0]
    428                      #ifdef _LIVE_RJESTR 
    429                        LIVE_TAB[LIVE_TAB_IDX]=0xF000 | (Proc->Nr&0xF)<<1 | (MainStg->StageQ[Proc->Nr].Port)&0xFF;
    430                        if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    431                      #endif
    432                  }  
    433               }
    434               Proc->Out=*PrvOut;
   \                     ??ProcWOUT_Action_3:
   \   0000011A   2088               LDRH     R0,[R4, #+0]
   \   0000011C   6882               STRH     R0,[R5, #+18]
    435            
    436          }//_______________________ Koniec funkcji  ____________________________
   \   0000011E   01B0               ADD      SP,SP,#+4
   \   00000120   F0BC               POP      {R4-R7}
   \   00000122   01BC               POP      {R0}
   \   00000124   0047               BX       R0               ;; return
   \   00000126   C046               Nop      
   \                     ??ProcWOUT_Action_2:
   \   00000128   A2030000           DC32     0x3a2
   \   0000012C   ........           DC32     TransQuality
   \   00000130   EB060000           DC32     0x6eb
   \   00000134   ........           DC32     ChangeStageFlag
   \   00000138   ........           DC32     Variables
    437          
    438          
    439                
    440          
    441          //*-----------------------------------------------------------------------------
    442          //* Nazwa funkcji :    ProcWOUTS_Action
    443          //* Funkcja procedury "Ustaw stan wyjœcia na 1"
    444          //*-----------------------------------------------------------------------------
    445          

   \                                 In section Debug.txt, align 4, keep-with-next
    446          void ProcWOUTS_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    447          {  
   \                     ProcWOUTS_Action:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
    448          
    449               if ((*PrvOut==1) && (Proc->Out==0))
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   205E               LDRSH    R0,[R4, R0]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   3BD1               BNE      ??ProcWOUTS_Action_0
   \   00000010   1220               MOVS     R0,#+18
   \   00000012   285E               LDRSH    R0,[R5, R0]
   \   00000014   0028               CMP      R0,#+0
   \   00000016   37D1               BNE      ??ProcWOUTS_Action_0
    450               {
    451                if (Proc->Nr>=0)    //je¿eli wêze³
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   2856               LDRSB    R0,[R5, R0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   1BD4               BMI      ??ProcWOUTS_Action_1
    452                {
    453                 PortStageSet((&(MainStg->StageQ[Proc->Nr].Port)),Proc->Tag.Port,1); 
                                     ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000020   0122               MOVS     R2,#+1
   \   00000022   297A               LDRB     R1,[R5, #+8]
   \   00000024   1B48               LDR      R0,??ProcWOUTS_Action_2  ;; 0x3a2
   \   00000026   0123               MOVS     R3,#+1
   \   00000028   EB56               LDRSB    R3,[R5, R3]
   \   0000002A   1627               MOVS     R7,#+22
   \   0000002C   7B43               MULS     R3,R7,R3
   \   0000002E   F318               ADDS     R3,R6,R3
   \   00000030   1818               ADDS     R0,R3,R0
   \   00000032   ........           BL       PortStageSet
    454                 
    455                 if (TransQuality.Mensur[Proc->Nr-1]>0)   
   \   00000036   0120               MOVS     R0,#+1
   \   00000038   2856               LDRSB    R0,[R5, R0]
   \   0000003A   0421               MOVS     R1,#+4
   \   0000003C   4843               MULS     R0,R1,R0
   \   0000003E   1649               LDR      R1,??ProcWOUTS_Action_2+0x4  ;; TransQuality
   \   00000040   0818               ADDS     R0,R1,R0
   \   00000042   806C               LDR      R0,[R0, #+72]
   \   00000044   0028               CMP      R0,#+0
   \   00000046   1FD0               BEQ      ??ProcWOUTS_Action_0
    456                   MainStg->SendStageChange[Proc->Nr]=ChangeStageFlag;
   \   00000048   1448               LDR      R0,??ProcWOUTS_Action_2+0x8  ;; 0x6eb
   \   0000004A   0121               MOVS     R1,#+1
   \   0000004C   6956               LDRSB    R1,[R5, R1]
   \   0000004E   7118               ADDS     R1,R6,R1
   \   00000050   134A               LDR      R2,??ProcWOUTS_Action_2+0xC  ;; ChangeStageFlag
   \   00000052   1278               LDRB     R2,[R2, #+0]
   \   00000054   0A54               STRB     R2,[R1, R0]
   \   00000056   17E0               B        ??ProcWOUTS_Action_0
    457                
    458                 #ifdef _LIVE_RJESTR 
    459                 LIVE_TAB[LIVE_TAB_IDX]=0xF000 | (Proc->Nr&0xF)<<1 | (MainStg->StageQ[Proc->Nr].Port)&0xFF;
    460                 if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    461                 #endif
    462                 
    463                 //je¿eli zmienna dwustanowa  
    464                }else{
    465                    Variables[Proc->Tag.Port/8]|= 1<<(Proc->Tag.Port%8);
   \                     ??ProcWOUTS_Action_1:
   \   00000058   287A               LDRB     R0,[R5, #+8]
   \   0000005A   0821               MOVS     R1,#+8
   \   0000005C   ........           BL       __aeabi_idivmod
   \   00000060   1049               LDR      R1,??ProcWOUTS_Action_2+0x10  ;; Variables
   \   00000062   01B5               PUSH     {R0,LR}
   \   00000064   0191               STR      R1,[SP, #+4]
   \   00000066   287A               LDRB     R0,[R5, #+8]
   \   00000068   0821               MOVS     R1,#+8
   \   0000006A   ........           BL       __aeabi_idivmod
   \   0000006E   0D49               LDR      R1,??ProcWOUTS_Action_2+0x10  ;; Variables
   \   00000070   0E5C               LDRB     R6,[R1, R0]
   \   00000072   0127               MOVS     R7,#+1
   \   00000074   287A               LDRB     R0,[R5, #+8]
   \   00000076   0821               MOVS     R1,#+8
   \   00000078   ........           BL       __aeabi_idivmod
   \   0000007C   8F40               LSLS     R7,R7,R1
   \   0000007E   3743               ORRS     R7,R7,R6
   \   00000080   0199               LDR      R1,[SP, #+4]
   \   00000082   0098               LDR      R0,[SP, #0]
   \   00000084   02B0               ADD      SP,SP,#+8
   \   00000086   0F54               STRB     R7,[R1, R0]
    466                }
    467               }
    468               Proc->Out=*PrvOut;
   \                     ??ProcWOUTS_Action_0:
   \   00000088   2088               LDRH     R0,[R4, #+0]
   \   0000008A   6882               STRH     R0,[R5, #+18]
    469            
    470          }//_______________________ Koniec funkcji  ____________________________
   \   0000008C   01B0               ADD      SP,SP,#+4
   \   0000008E   F0BC               POP      {R4-R7}
   \   00000090   01BC               POP      {R0}
   \   00000092   0047               BX       R0               ;; return
   \                     ??ProcWOUTS_Action_2:
   \   00000094   A2030000           DC32     0x3a2
   \   00000098   ........           DC32     TransQuality
   \   0000009C   EB060000           DC32     0x6eb
   \   000000A0   ........           DC32     ChangeStageFlag
   \   000000A4   ........           DC32     Variables
    471          
    472          
    473          //*-----------------------------------------------------------------------------
    474          //* Nazwa funkcji :    ProcWOUTR_Action
    475          //* Funkcja procedury "Ustaw stan wyjœcia  na 0"
    476          //*-----------------------------------------------------------------------------
    477          

   \                                 In section Debug.txt, align 4, keep-with-next
    478          void ProcWOUTR_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    479          {  
   \                     ProcWOUTR_Action:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
    480          
    481               if ((*PrvOut==1) && (Proc->Out==0))
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   205E               LDRSH    R0,[R4, R0]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   3BD1               BNE      ??ProcWOUTR_Action_0
   \   00000010   1220               MOVS     R0,#+18
   \   00000012   285E               LDRSH    R0,[R5, R0]
   \   00000014   0028               CMP      R0,#+0
   \   00000016   37D1               BNE      ??ProcWOUTR_Action_0
    482               {
    483                if (Proc->Nr>=0)    //je¿eli wêze³
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   2856               LDRSB    R0,[R5, R0]
   \   0000001C   0028               CMP      R0,#+0
   \   0000001E   1BD4               BMI      ??ProcWOUTR_Action_1
    484                { 
    485                 PortStageSet((&(MainStg->StageQ[Proc->Nr].Port)),Proc->Tag.Port,0); 
                                     ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000020   0022               MOVS     R2,#+0
   \   00000022   297A               LDRB     R1,[R5, #+8]
   \   00000024   1B48               LDR      R0,??ProcWOUTR_Action_2  ;; 0x3a2
   \   00000026   0123               MOVS     R3,#+1
   \   00000028   EB56               LDRSB    R3,[R5, R3]
   \   0000002A   1627               MOVS     R7,#+22
   \   0000002C   7B43               MULS     R3,R7,R3
   \   0000002E   F318               ADDS     R3,R6,R3
   \   00000030   1818               ADDS     R0,R3,R0
   \   00000032   ........           BL       PortStageSet
    486                 
    487                 if (TransQuality.Mensur[Proc->Nr-1]>0)   
   \   00000036   0120               MOVS     R0,#+1
   \   00000038   2856               LDRSB    R0,[R5, R0]
   \   0000003A   0421               MOVS     R1,#+4
   \   0000003C   4843               MULS     R0,R1,R0
   \   0000003E   1649               LDR      R1,??ProcWOUTR_Action_2+0x4  ;; TransQuality
   \   00000040   0818               ADDS     R0,R1,R0
   \   00000042   806C               LDR      R0,[R0, #+72]
   \   00000044   0028               CMP      R0,#+0
   \   00000046   1FD0               BEQ      ??ProcWOUTR_Action_0
    488                   MainStg->SendStageChange[Proc->Nr]=ChangeStageFlag;
   \   00000048   1448               LDR      R0,??ProcWOUTR_Action_2+0x8  ;; 0x6eb
   \   0000004A   0121               MOVS     R1,#+1
   \   0000004C   6956               LDRSB    R1,[R5, R1]
   \   0000004E   7118               ADDS     R1,R6,R1
   \   00000050   134A               LDR      R2,??ProcWOUTR_Action_2+0xC  ;; ChangeStageFlag
   \   00000052   1278               LDRB     R2,[R2, #+0]
   \   00000054   0A54               STRB     R2,[R1, R0]
   \   00000056   17E0               B        ??ProcWOUTR_Action_0
    489                 
    490                 #ifdef _LIVE_RJESTR 
    491                  LIVE_TAB[LIVE_TAB_IDX]=0xF000 | (Proc->Nr&0xF)<<1 | (MainStg->StageQ[Proc->Nr].Port)&0xFF;
    492                  if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    493                 #endif
    494                  
    495                  //je¿eli zmienna dwustanowa  
    496                }else{
    497                    Variables[Proc->Tag.Port/8]&= ~(1<<(Proc->Tag.Port%8));
   \                     ??ProcWOUTR_Action_1:
   \   00000058   287A               LDRB     R0,[R5, #+8]
   \   0000005A   0821               MOVS     R1,#+8
   \   0000005C   ........           BL       __aeabi_idivmod
   \   00000060   1049               LDR      R1,??ProcWOUTR_Action_2+0x10  ;; Variables
   \   00000062   01B5               PUSH     {R0,LR}
   \   00000064   0191               STR      R1,[SP, #+4]
   \   00000066   287A               LDRB     R0,[R5, #+8]
   \   00000068   0821               MOVS     R1,#+8
   \   0000006A   ........           BL       __aeabi_idivmod
   \   0000006E   0D49               LDR      R1,??ProcWOUTR_Action_2+0x10  ;; Variables
   \   00000070   0E5C               LDRB     R6,[R1, R0]
   \   00000072   0127               MOVS     R7,#+1
   \   00000074   287A               LDRB     R0,[R5, #+8]
   \   00000076   0821               MOVS     R1,#+8
   \   00000078   ........           BL       __aeabi_idivmod
   \   0000007C   8F40               LSLS     R7,R7,R1
   \   0000007E   BE43               BICS     R6,R6,R7
   \   00000080   0199               LDR      R1,[SP, #+4]
   \   00000082   0098               LDR      R0,[SP, #0]
   \   00000084   02B0               ADD      SP,SP,#+8
   \   00000086   0E54               STRB     R6,[R1, R0]
    498                }
    499               }
    500               Proc->Out=*PrvOut;
   \                     ??ProcWOUTR_Action_0:
   \   00000088   2088               LDRH     R0,[R4, #+0]
   \   0000008A   6882               STRH     R0,[R5, #+18]
    501            
    502          }//_______________________ Koniec funkcji  ____________________________
   \   0000008C   01B0               ADD      SP,SP,#+4
   \   0000008E   F0BC               POP      {R4-R7}
   \   00000090   01BC               POP      {R0}
   \   00000092   0047               BX       R0               ;; return
   \                     ??ProcWOUTR_Action_2:
   \   00000094   A2030000           DC32     0x3a2
   \   00000098   ........           DC32     TransQuality
   \   0000009C   EB060000           DC32     0x6eb
   \   000000A0   ........           DC32     ChangeStageFlag
   \   000000A4   ........           DC32     Variables
    503          
    504          
    505          
    506          
    507          //*-----------------------------------------------------------------------------
    508          //* Nazwa funkcji :    ProcWOUTC_Action
    509          //* Funkcja procedury "zmaina stanu wyjœcia/zmiennej na przeciwny "
    510          //*-----------------------------------------------------------------------------
    511          

   \                                 In section Debug.txt, align 4, keep-with-next
    512          void ProcWOUTC_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    513          {  
   \                     ProcWOUTC_Action:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
    514          
    515               if ((*PrvOut==1) && (Proc->Out==0))
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   205E               LDRSH    R0,[R4, R0]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   00D0               BEQ      .+4
   \   00000010   7EE0               B        ??ProcWOUTC_Action_0
   \   00000012   1220               MOVS     R0,#+18
   \   00000014   285E               LDRSH    R0,[R5, R0]
   \   00000016   0028               CMP      R0,#+0
   \   00000018   7AD1               BNE      ??ProcWOUTC_Action_0
    516               {
    517                if (Proc->Nr>=0)    //je¿eli wêze³
   \   0000001A   0120               MOVS     R0,#+1
   \   0000001C   2856               LDRSB    R0,[R5, R0]
   \   0000001E   0028               CMP      R0,#+0
   \   00000020   35D4               BMI      ??ProcWOUTC_Action_1
    518                {
    519                     if (PortStageRead(MainStg->StageQ[Proc->Nr].Port,Proc->Tag.Port)==1) //je¿eli wyjœcie w stanie wysokim to zeruj je¿eli nie to ustaw 1
   \   00000022   297A               LDRB     R1,[R5, #+8]
   \   00000024   3D48               LDR      R0,??ProcWOUTC_Action_2  ;; 0x3a2
   \   00000026   0122               MOVS     R2,#+1
   \   00000028   AA56               LDRSB    R2,[R5, R2]
   \   0000002A   1623               MOVS     R3,#+22
   \   0000002C   5A43               MULS     R2,R3,R2
   \   0000002E   B218               ADDS     R2,R6,R2
   \   00000030   105A               LDRH     R0,[R2, R0]
   \   00000032   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000034   0014               ASRS     R0,R0,#+16
   \   00000036   ........           BL       PortStageRead
   \   0000003A   0128               CMP      R0,#+1
   \   0000003C   0BD1               BNE      ??ProcWOUTC_Action_3
    520                     { 
    521                        PortStageSet((&(MainStg->StageQ[Proc->Nr].Port)),Proc->Tag.Port,0); 
                                            ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000003E   0022               MOVS     R2,#+0
   \   00000040   297A               LDRB     R1,[R5, #+8]
   \   00000042   3648               LDR      R0,??ProcWOUTC_Action_2  ;; 0x3a2
   \   00000044   0123               MOVS     R3,#+1
   \   00000046   EB56               LDRSB    R3,[R5, R3]
   \   00000048   1627               MOVS     R7,#+22
   \   0000004A   7B43               MULS     R3,R7,R3
   \   0000004C   F318               ADDS     R3,R6,R3
   \   0000004E   1818               ADDS     R0,R3,R0
   \   00000050   ........           BL       PortStageSet
   \   00000054   0AE0               B        ??ProcWOUTC_Action_4
    522                     }else{
    523                        PortStageSet((&(MainStg->StageQ[Proc->Nr].Port)),Proc->Tag.Port,1);
                                            ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \                     ??ProcWOUTC_Action_3:
   \   00000056   0122               MOVS     R2,#+1
   \   00000058   297A               LDRB     R1,[R5, #+8]
   \   0000005A   3048               LDR      R0,??ProcWOUTC_Action_2  ;; 0x3a2
   \   0000005C   0123               MOVS     R3,#+1
   \   0000005E   EB56               LDRSB    R3,[R5, R3]
   \   00000060   1627               MOVS     R7,#+22
   \   00000062   7B43               MULS     R3,R7,R3
   \   00000064   F318               ADDS     R3,R6,R3
   \   00000066   1818               ADDS     R0,R3,R0
   \   00000068   ........           BL       PortStageSet
    524                     }
    525                   
    526                     if (TransQuality.Mensur[Proc->Nr-1]>0)   
   \                     ??ProcWOUTC_Action_4:
   \   0000006C   0120               MOVS     R0,#+1
   \   0000006E   2856               LDRSB    R0,[R5, R0]
   \   00000070   0421               MOVS     R1,#+4
   \   00000072   4843               MULS     R0,R1,R0
   \   00000074   2A49               LDR      R1,??ProcWOUTC_Action_2+0x4  ;; TransQuality
   \   00000076   0818               ADDS     R0,R1,R0
   \   00000078   806C               LDR      R0,[R0, #+72]
   \   0000007A   0028               CMP      R0,#+0
   \   0000007C   48D0               BEQ      ??ProcWOUTC_Action_0
    527                     MainStg->SendStageChange[Proc->Nr]=ChangeStageFlag;
   \   0000007E   2948               LDR      R0,??ProcWOUTC_Action_2+0x8  ;; 0x6eb
   \   00000080   0121               MOVS     R1,#+1
   \   00000082   6956               LDRSB    R1,[R5, R1]
   \   00000084   7118               ADDS     R1,R6,R1
   \   00000086   284A               LDR      R2,??ProcWOUTC_Action_2+0xC  ;; ChangeStageFlag
   \   00000088   1278               LDRB     R2,[R2, #+0]
   \   0000008A   0A54               STRB     R2,[R1, R0]
   \   0000008C   40E0               B        ??ProcWOUTC_Action_0
    528                  
    529                     #ifdef _LIVE_RJESTR 
    530                      LIVE_TAB[LIVE_TAB_IDX]=0xF000 | (Proc->Nr&0xF)<<1 | (MainStg->StageQ[Proc->Nr].Port)&0xFF;
    531                      if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    532                     #endif
    533                   
    534                 
    535                 //je¿eli zmienna dwustanowa  
    536                }else{
    537                      if (Variables[Proc->Tag.Port/8] && (1<<(Proc->Tag.Port%8)))
   \                     ??ProcWOUTC_Action_1:
   \   0000008E   287A               LDRB     R0,[R5, #+8]
   \   00000090   0821               MOVS     R1,#+8
   \   00000092   ........           BL       __aeabi_idivmod
   \   00000096   2549               LDR      R1,??ProcWOUTC_Action_2+0x10  ;; Variables
   \   00000098   085C               LDRB     R0,[R1, R0]
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   20D0               BEQ      ??ProcWOUTC_Action_5
   \   0000009E   0126               MOVS     R6,#+1
   \   000000A0   287A               LDRB     R0,[R5, #+8]
   \   000000A2   0821               MOVS     R1,#+8
   \   000000A4   ........           BL       __aeabi_idivmod
   \   000000A8   8E40               LSLS     R6,R6,R1
   \   000000AA   002E               CMP      R6,#+0
   \   000000AC   18D0               BEQ      ??ProcWOUTC_Action_5
    538                      {
    539                         Variables[Proc->Tag.Port/8] &= ~(1<<(Proc->Tag.Port%8));
   \   000000AE   287A               LDRB     R0,[R5, #+8]
   \   000000B0   0821               MOVS     R1,#+8
   \   000000B2   ........           BL       __aeabi_idivmod
   \   000000B6   1D49               LDR      R1,??ProcWOUTC_Action_2+0x10  ;; Variables
   \   000000B8   01B5               PUSH     {R0,LR}
   \   000000BA   0191               STR      R1,[SP, #+4]
   \   000000BC   287A               LDRB     R0,[R5, #+8]
   \   000000BE   0821               MOVS     R1,#+8
   \   000000C0   ........           BL       __aeabi_idivmod
   \   000000C4   1949               LDR      R1,??ProcWOUTC_Action_2+0x10  ;; Variables
   \   000000C6   0E5C               LDRB     R6,[R1, R0]
   \   000000C8   0127               MOVS     R7,#+1
   \   000000CA   287A               LDRB     R0,[R5, #+8]
   \   000000CC   0821               MOVS     R1,#+8
   \   000000CE   ........           BL       __aeabi_idivmod
   \   000000D2   8F40               LSLS     R7,R7,R1
   \   000000D4   BE43               BICS     R6,R6,R7
   \   000000D6   0199               LDR      R1,[SP, #+4]
   \   000000D8   0098               LDR      R0,[SP, #0]
   \   000000DA   02B0               ADD      SP,SP,#+8
   \   000000DC   0E54               STRB     R6,[R1, R0]
   \   000000DE   17E0               B        ??ProcWOUTC_Action_0
    540                      }else{
    541                         Variables[Proc->Tag.Port/8] |= (1<<(Proc->Tag.Port%8));
   \                     ??ProcWOUTC_Action_5:
   \   000000E0   287A               LDRB     R0,[R5, #+8]
   \   000000E2   0821               MOVS     R1,#+8
   \   000000E4   ........           BL       __aeabi_idivmod
   \   000000E8   1049               LDR      R1,??ProcWOUTC_Action_2+0x10  ;; Variables
   \   000000EA   01B5               PUSH     {R0,LR}
   \   000000EC   0191               STR      R1,[SP, #+4]
   \   000000EE   287A               LDRB     R0,[R5, #+8]
   \   000000F0   0821               MOVS     R1,#+8
   \   000000F2   ........           BL       __aeabi_idivmod
   \   000000F6   0D49               LDR      R1,??ProcWOUTC_Action_2+0x10  ;; Variables
   \   000000F8   0E5C               LDRB     R6,[R1, R0]
   \   000000FA   0127               MOVS     R7,#+1
   \   000000FC   287A               LDRB     R0,[R5, #+8]
   \   000000FE   0821               MOVS     R1,#+8
   \   00000100   ........           BL       __aeabi_idivmod
   \   00000104   8F40               LSLS     R7,R7,R1
   \   00000106   3743               ORRS     R7,R7,R6
   \   00000108   0199               LDR      R1,[SP, #+4]
   \   0000010A   0098               LDR      R0,[SP, #0]
   \   0000010C   02B0               ADD      SP,SP,#+8
   \   0000010E   0F54               STRB     R7,[R1, R0]
    542                      }
    543                }
    544               }
    545               Proc->Out=*PrvOut;
   \                     ??ProcWOUTC_Action_0:
   \   00000110   2088               LDRH     R0,[R4, #+0]
   \   00000112   6882               STRH     R0,[R5, #+18]
    546            
    547          }//_______________________ Koniec funkcji  ____________________________
   \   00000114   01B0               ADD      SP,SP,#+4
   \   00000116   F0BC               POP      {R4-R7}
   \   00000118   01BC               POP      {R0}
   \   0000011A   0047               BX       R0               ;; return
   \                     ??ProcWOUTC_Action_2:
   \   0000011C   A2030000           DC32     0x3a2
   \   00000120   ........           DC32     TransQuality
   \   00000124   EB060000           DC32     0x6eb
   \   00000128   ........           DC32     ChangeStageFlag
   \   0000012C   ........           DC32     Variables
    548          
    549          
    550          
    551          
    552          
    553          /*
    554          //-----------------------------------------------------------------------------
    555          // Nazwa funkcji :    ProcSetT_Action
    556          // Funkcja procedury "Forsuj stan timera"
    557          //-----------------------------------------------------------------------------
    558          
    559          void ProcRstT_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    560          {  
    561               if ((*PrvOut==1) && (Proc->Out==0))
    562               {
    563                  MainStg->StageTimer[Proc->Nr].Curent=0;
    564                  MainObiect.Timer[Proc->Nr]=0;
    565               }
    566               Proc->Out=*PrvOut;
    567            
    568          }//_______________________ Koniec funkcji  ____________________________
    569          */
    570          
    571          
    572          
    573          //*-----------------------------------------------------------------------------
    574          //* Nazwa funkcji :    ProcNOT_Action
    575          //* Funkcja procedury "Negacja
    576          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    577          void ProcNOT_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    578          {  
    579             if (*PrvOut)
   \                     ProcNOT_Action:
   \   00000000   0022               MOVS     R2,#+0
   \   00000002   805E               LDRSH    R0,[R0, R2]
   \   00000004   421E               SUBS     R2,R0,#+1
   \   00000006   9241               SBCS     R2,R2,R2
   \   00000008   D20F               LSRS     R2,R2,#+31
   \   0000000A   4A82               STRH     R2,[R1, #+18]
    580             {
    581                Proc->Out=0;  
    582             }else{
    583                Proc->Out=1;
    584             }
    585          }//_______________________ Koniec funkcji__ ____________________________
   \   0000000C   7047               BX       LR               ;; return
    586          
    587          
    588          
    589          
    590          //*-----------------------------------------------------------------------------
    591          //* Nazwa funkcji :    ProcToggleT_Action
    592          //* Funkcja procedury "Przerzutnik typu T"
    593          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    594          void ProcToggleRS_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    595          {  
   \                     ProcToggleRS_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    596             if ((*PrvOut))
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   C05E               LDRSH    R0,[R0, R3]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   02D0               BEQ      ??ProcToggleRS_Action_0
    597             {
    598               Proc->Out=1;
   \   0000000A   0120               MOVS     R0,#+1
   \   0000000C   5082               STRH     R0,[R2, #+18]
   \   0000000E   05E0               B        ??ProcToggleRS_Action_1
    599             }
    600             else if (*UpOut)
   \                     ??ProcToggleRS_Action_0:
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   085E               LDRSH    R0,[R1, R0]
   \   00000014   0028               CMP      R0,#+0
   \   00000016   01D0               BEQ      ??ProcToggleRS_Action_1
    601             {
    602               Proc->Out=0;
   \   00000018   0020               MOVS     R0,#+0
   \   0000001A   5082               STRH     R0,[R2, #+18]
    603             }
    604             
    605          
    606               
    607          }//_______________________ Koniec funkcji__ ____________________________
   \                     ??ProcToggleRS_Action_1:
   \   0000001C   01B0               ADD      SP,SP,#+4
   \   0000001E   01BC               POP      {R0}
   \   00000020   0047               BX       R0               ;; return
    608          
    609          
    610          
    611          
    612          //*-----------------------------------------------------------------------------
    613          //* Nazwa funkcji :    ProcToggleT_Action
    614          //* Funkcja procedury "Przerzutnik typu T"
    615          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    616          void ProcToggleT_Action(short int *PrvOut, _Procedure *Proc) 
    617          {  
   \                     ProcToggleT_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    618             if ((*PrvOut) && (Proc->LastIn==0) && (Proc->Out==0))
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   825E               LDRSH    R2,[R0, R2]
   \   00000006   002A               CMP      R2,#+0
   \   00000008   09D0               BEQ      ??ProcToggleT_Action_0
   \   0000000A   0A7C               LDRB     R2,[R1, #+16]
   \   0000000C   002A               CMP      R2,#+0
   \   0000000E   06D1               BNE      ??ProcToggleT_Action_0
   \   00000010   1222               MOVS     R2,#+18
   \   00000012   8A5E               LDRSH    R2,[R1, R2]
   \   00000014   002A               CMP      R2,#+0
   \   00000016   02D1               BNE      ??ProcToggleT_Action_0
    619             {
    620               Proc->Out=1;
   \   00000018   0122               MOVS     R2,#+1
   \   0000001A   4A82               STRH     R2,[R1, #+18]
   \   0000001C   0CE0               B        ??ProcToggleT_Action_1
    621             }
    622             else if ((*PrvOut) && (Proc->LastIn==0) && (Proc->Out==1))
   \                     ??ProcToggleT_Action_0:
   \   0000001E   0022               MOVS     R2,#+0
   \   00000020   825E               LDRSH    R2,[R0, R2]
   \   00000022   002A               CMP      R2,#+0
   \   00000024   08D0               BEQ      ??ProcToggleT_Action_1
   \   00000026   0A7C               LDRB     R2,[R1, #+16]
   \   00000028   002A               CMP      R2,#+0
   \   0000002A   05D1               BNE      ??ProcToggleT_Action_1
   \   0000002C   1222               MOVS     R2,#+18
   \   0000002E   8A5E               LDRSH    R2,[R1, R2]
   \   00000030   012A               CMP      R2,#+1
   \   00000032   01D1               BNE      ??ProcToggleT_Action_1
    623             {
    624               Proc->Out=0;
   \   00000034   0022               MOVS     R2,#+0
   \   00000036   4A82               STRH     R2,[R1, #+18]
    625             }
    626             
    627             Proc->LastIn=*PrvOut;
   \                     ??ProcToggleT_Action_1:
   \   00000038   0088               LDRH     R0,[R0, #+0]
   \   0000003A   0874               STRB     R0,[R1, #+16]
    628                 
    629          
    630          
    631          }//_______________________ Koniec funkcji__ ____________________________
   \   0000003C   01B0               ADD      SP,SP,#+4
   \   0000003E   01BC               POP      {R0}
   \   00000040   0047               BX       R0               ;; return
    632          
    633          
    634          //*-----------------------------------------------------------------------------
    635          //* Nazwa funkcji :    ProcTLI1_Action
    636          //* Funkcja procedury "Procedura impulsu jednocyklowego
    637          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    638          void ProcTLI1_Action(short int *PrvOut, _Procedure *Proc) 
    639          {  
   \                     ProcTLI1_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    640             if ((*PrvOut) && (Proc->LastIn==0))
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   825E               LDRSH    R2,[R0, R2]
   \   00000006   002A               CMP      R2,#+0
   \   00000008   05D0               BEQ      ??ProcTLI1_Action_0
   \   0000000A   0A7C               LDRB     R2,[R1, #+16]
   \   0000000C   531E               SUBS     R3,R2,#+1
   \   0000000E   9B41               SBCS     R3,R3,R3
   \   00000010   DB0F               LSRS     R3,R3,#+31
   \   00000012   4B82               STRH     R3,[R1, #+18]
   \   00000014   01E0               B        ??ProcTLI1_Action_1
    641             {
    642               Proc->Out=1;
    643             }
    644             else
    645             {
    646               Proc->Out=0;
   \                     ??ProcTLI1_Action_0:
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   4A82               STRH     R2,[R1, #+18]
    647             }
    648             
    649             Proc->LastIn=*PrvOut;
   \                     ??ProcTLI1_Action_1:
   \   0000001A   0088               LDRH     R0,[R0, #+0]
   \   0000001C   0874               STRB     R0,[R1, #+16]
    650                 
    651          
    652          
    653          }//_______________________ Koniec funkcji__ ____________________________
   \   0000001E   01B0               ADD      SP,SP,#+4
   \   00000020   01BC               POP      {R0}
   \   00000022   0047               BX       R0               ;; return
    654          
    655          
    656          
    657          
    658          //*-----------------------------------------------------------------------------
    659          //* Nazwa funkcji :    ProcLim_Action
    660          //* Funkcja procedury "Porównanie wartoœci. Je¿eli 1>2 q=1"
    661          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    662          void ProcLim_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    663          {  
   \                     ProcLim_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    664             if ((*PrvOut)>(*UpOut))
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   C95E               LDRSH    R1,[R1, R3]
   \   00000006   0023               MOVS     R3,#+0
   \   00000008   C05E               LDRSH    R0,[R0, R3]
   \   0000000A   8142               CMP      R1,R0
   \   0000000C   02DA               BGE      ??ProcLim_Action_0
    665             {
    666               Proc->Out=1;
   \   0000000E   0120               MOVS     R0,#+1
   \   00000010   5082               STRH     R0,[R2, #+18]
   \   00000012   01E0               B        ??ProcLim_Action_1
    667             }
    668             else
    669             {
    670               Proc->Out=0;
   \                     ??ProcLim_Action_0:
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   5082               STRH     R0,[R2, #+18]
    671             }
    672               
    673          }//_______________________ Koniec funkcji__ ____________________________
   \                     ??ProcLim_Action_1:
   \   00000018   01B0               ADD      SP,SP,#+4
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
    674          
    675          
    676          
    677          
    678          //*-----------------------------------------------------------------------------
    679          //* Nazwa funkcji :    ProcEven_Action
    680          //* Funkcja procedury "Porównanie wartoœci. Je¿eli 1=2 q=1"
    681          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    682          void ProcEven_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    683          {  
   \                     ProcEven_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    684             if ((*PrvOut)==(*UpOut))
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   C05E               LDRSH    R0,[R0, R3]
   \   00000006   0023               MOVS     R3,#+0
   \   00000008   C95E               LDRSH    R1,[R1, R3]
   \   0000000A   8842               CMP      R0,R1
   \   0000000C   02D1               BNE      ??ProcEven_Action_0
    685             {
    686               Proc->Out=1;
   \   0000000E   0120               MOVS     R0,#+1
   \   00000010   5082               STRH     R0,[R2, #+18]
   \   00000012   01E0               B        ??ProcEven_Action_1
    687             }
    688             else
    689             {
    690               Proc->Out=0;
   \                     ??ProcEven_Action_0:
   \   00000014   0020               MOVS     R0,#+0
   \   00000016   5082               STRH     R0,[R2, #+18]
    691             }
    692             
    693          
    694               
    695          }//_______________________ Koniec funkcji__ ____________________________
   \                     ??ProcEven_Action_1:
   \   00000018   01B0               ADD      SP,SP,#+4
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
    696          
    697          
    698          
    699          
    700          //*-----------------------------------------------------------------------------
    701          //* Nazwa funkcji :    ProcPlus_Action
    702          //* Funkcja procedury "Plus"
    703          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    704          void ProcPlus_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    705          {  
    706               Proc->Out=(*PrvOut)+(*UpOut);  
   \                     ProcPlus_Action:
   \   00000000   0023               MOVS     R3,#+0
   \   00000002   C05E               LDRSH    R0,[R0, R3]
   \   00000004   0023               MOVS     R3,#+0
   \   00000006   C95E               LDRSH    R1,[R1, R3]
   \   00000008   4018               ADDS     R0,R0,R1
   \   0000000A   5082               STRH     R0,[R2, #+18]
    707          }//_______________________ Koniec funkcji__ ____________________________
   \   0000000C   7047               BX       LR               ;; return
    708          
    709          
    710          
    711          //*-----------------------------------------------------------------------------
    712          //* Nazwa funkcji :    ProcPlus_Action
    713          //* Funkcja procedury "Plus"
    714          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    715          void ProcMinus_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    716          {  
    717               Proc->Out=(*PrvOut)-(*UpOut);  
   \                     ProcMinus_Action:
   \   00000000   0023               MOVS     R3,#+0
   \   00000002   C05E               LDRSH    R0,[R0, R3]
   \   00000004   0023               MOVS     R3,#+0
   \   00000006   C95E               LDRSH    R1,[R1, R3]
   \   00000008   401A               SUBS     R0,R0,R1
   \   0000000A   5082               STRH     R0,[R2, #+18]
    718          }//_______________________ Koniec funkcji__ ____________________________
   \   0000000C   7047               BX       LR               ;; return
    719          
    720          
    721          //*-----------------------------------------------------------------------------
    722          //* Nazwa funkcji :    ProcPlus_Action
    723          //* Funkcja procedury "Plus"
    724          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    725          void ProcMul_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    726          {    
   \                     ProcMul_Action:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   1400               MOVS     R4,R2
    727               int odp;
    728               odp=(*PrvOut)*(*UpOut)/10; 
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   805E               LDRSH    R0,[R0, R2]
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   895E               LDRSH    R1,[R1, R2]
   \   0000000C   4843               MULS     R0,R1,R0
   \   0000000E   0A21               MOVS     R1,#+10
   \   00000010   ........           BL       __aeabi_idivmod
    729               if (odp>30000)
   \   00000014   0749               LDR      R1,??ProcMul_Action_0  ;; 0x7531
   \   00000016   8842               CMP      R0,R1
   \   00000018   07DB               BLT      ??ProcMul_Action_1
    730               {
    731                  if (odp>0) Proc->Out=30000; else Proc->Out=-30000;
   \   0000001A   0128               CMP      R0,#+1
   \   0000001C   02DB               BLT      ??ProcMul_Action_2
   \   0000001E   0648               LDR      R0,??ProcMul_Action_0+0x4  ;; 0x7530
   \   00000020   6082               STRH     R0,[R4, #+18]
   \   00000022   03E0               B        ??ProcMul_Action_3
   \                     ??ProcMul_Action_2:
   \   00000024   0548               LDR      R0,??ProcMul_Action_0+0x8  ;; 0xffff8ad0
   \   00000026   6082               STRH     R0,[R4, #+18]
   \   00000028   00E0               B        ??ProcMul_Action_3
    732               }else{
    733                  Proc->Out=odp; 
   \                     ??ProcMul_Action_1:
   \   0000002A   6082               STRH     R0,[R4, #+18]
    734               }
    735          }//_______________________ Koniec funkcji__ ____________________________
   \                     ??ProcMul_Action_3:
   \   0000002C   10BC               POP      {R4}
   \   0000002E   01BC               POP      {R0}
   \   00000030   0047               BX       R0               ;; return
   \   00000032   C046               Nop      
   \                     ??ProcMul_Action_0:
   \   00000034   31750000           DC32     0x7531
   \   00000038   30750000           DC32     0x7530
   \   0000003C   D08AFFFF           DC32     0xffff8ad0
    736          
    737          
    738          //*-----------------------------------------------------------------------------
    739          //* Nazwa funkcji :    ProcPlus_Action
    740          //* Funkcja procedury "Plus"
    741          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    742          void ProcDiv_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    743          {  
   \                     ProcDiv_Action:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
   \   00000006   1700               MOVS     R7,R2
    744               if ((*UpOut)==0)
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   305E               LDRSH    R0,[R6, R0]
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   09D1               BNE      ??ProcDiv_Action_0
    745               {
    746                 if ((*PrvOut)>0) Proc->Out=30000; else Proc->Out=-30000;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   285E               LDRSH    R0,[R5, R0]
   \   00000014   0128               CMP      R0,#+1
   \   00000016   02DB               BLT      ??ProcDiv_Action_1
   \   00000018   1748               LDR      R0,??ProcDiv_Action_2  ;; 0x7530
   \   0000001A   7882               STRH     R0,[R7, #+18]
   \   0000001C   27E0               B        ??ProcDiv_Action_3
   \                     ??ProcDiv_Action_1:
   \   0000001E   1748               LDR      R0,??ProcDiv_Action_2+0x4  ;; 0xffff8ad0
   \   00000020   7882               STRH     R0,[R7, #+18]
   \   00000022   24E0               B        ??ProcDiv_Action_3
    747               }else{
    748                
    749                Proc->Out=((*PrvOut)*10)/(*UpOut); 
   \                     ??ProcDiv_Action_0:
   \   00000024   0020               MOVS     R0,#+0
   \   00000026   285E               LDRSH    R0,[R5, R0]
   \   00000028   0A21               MOVS     R1,#+10
   \   0000002A   4843               MULS     R0,R1,R0
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   715E               LDRSH    R1,[R6, R1]
   \   00000030   ........           BL       __aeabi_idivmod
   \   00000034   7882               STRH     R0,[R7, #+18]
    750                if ( (((*PrvOut)*100)/(*UpOut))>((((*PrvOut)*10)/(*UpOut))*10)+5) Proc->Out++;
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   285E               LDRSH    R0,[R5, R0]
   \   0000003A   6421               MOVS     R1,#+100
   \   0000003C   4843               MULS     R0,R1,R0
   \   0000003E   0021               MOVS     R1,#+0
   \   00000040   715E               LDRSH    R1,[R6, R1]
   \   00000042   ........           BL       __aeabi_idivmod
   \   00000046   0400               MOVS     R4,R0
   \   00000048   0020               MOVS     R0,#+0
   \   0000004A   285E               LDRSH    R0,[R5, R0]
   \   0000004C   0A21               MOVS     R1,#+10
   \   0000004E   4843               MULS     R0,R1,R0
   \   00000050   0021               MOVS     R1,#+0
   \   00000052   715E               LDRSH    R1,[R6, R1]
   \   00000054   ........           BL       __aeabi_idivmod
   \   00000058   0100               MOVS     R1,R0
   \   0000005A   0A20               MOVS     R0,#+10
   \   0000005C   4143               MULS     R1,R0,R1
   \   0000005E   491D               ADDS     R1,R1,#+5
   \   00000060   2000               MOVS     R0,R4
   \   00000062   8142               CMP      R1,R0
   \   00000064   03DA               BGE      ??ProcDiv_Action_3
   \   00000066   1220               MOVS     R0,#+18
   \   00000068   385E               LDRSH    R0,[R7, R0]
   \   0000006A   401C               ADDS     R0,R0,#+1
   \   0000006C   7882               STRH     R0,[R7, #+18]
    751               }
    752          }//_______________________ Koniec funkcji__ ____________________________
   \                     ??ProcDiv_Action_3:
   \   0000006E   01B0               ADD      SP,SP,#+4
   \   00000070   F0BC               POP      {R4-R7}
   \   00000072   01BC               POP      {R0}
   \   00000074   0047               BX       R0               ;; return
   \   00000076   C046               Nop      
   \                     ??ProcDiv_Action_2:
   \   00000078   30750000           DC32     0x7530
   \   0000007C   D08AFFFF           DC32     0xffff8ad0
    753          
    754          
    755          
    756          
    757          
    758          //*-----------------------------------------------------------------------------
    759          //* Nazwa funkcji :    ProcConect_Action
    760          //* Funkcja procedury "Przeniesienie stanu w prawo"
    761          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    762          void ProcConect_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    763          {  
    764                Proc->Out=*PrvOut;  
   \                     ProcConect_Action:
   \   00000000   0088               LDRH     R0,[R0, #+0]
   \   00000002   4882               STRH     R0,[R1, #+18]
    765            
    766          }//_______________________ Koniec funkcji__ ____________________________
   \   00000004   7047               BX       LR               ;; return
    767          
    768          
    769          
    770          //*-----------------------------------------------------------------------------
    771          //* Nazwa funkcji :    ProcDown_Action
    772          //* Funkcja procedury "Przeniesienie stanu w dó³"
    773          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    774          void ProcDown_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    775          {  
    776                Proc->Out=*PrvOut;  
   \                     ProcDown_Action:
   \   00000000   0088               LDRH     R0,[R0, #+0]
   \   00000002   4882               STRH     R0,[R1, #+18]
    777          }//_______________________ Koniec funkcji__ ____________________________
   \   00000004   7047               BX       LR               ;; return
    778          
    779          
    780          
    781          //*-----------------------------------------------------------------------------
    782          //* Nazwa funkcji :    ProcDownRight_Action
    783          //* Funkcja procedury "Przeniesienie stanu w dó³ i prawo"
    784          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    785          void ProcDownRight_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    786          {  
    787                Proc->Out=*PrvOut;
   \                     ProcDownRight_Action:
   \   00000000   0088               LDRH     R0,[R0, #+0]
   \   00000002   4882               STRH     R0,[R1, #+18]
    788          }//_______________________ Koniec funkcji__ ____________________________
   \   00000004   7047               BX       LR               ;; return
    789          
    790          
    791          
    792          
    793          
    794          //*-----------------------------------------------------------------------------
    795          //* Nazwa funkcji :    ProcUpToRight_Action
    796          //* Funkcja procedury "Przeniesienie stanu z góry w prawo"
    797          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    798          void ProcUpToRight_Action(short int *PrvUpOut, _Procedure *Proc) 
    799          {  
    800                Proc->Out=*PrvUpOut;
   \                     ProcUpToRight_Action:
   \   00000000   0088               LDRH     R0,[R0, #+0]
   \   00000002   4882               STRH     R0,[R1, #+18]
    801          }//_______________________ Koniec funkcji__ ____________________________
   \   00000004   7047               BX       LR               ;; return
    802          
    803          
    804          
    805          //*-----------------------------------------------------------------------------
    806          //* Nazwa funkcji :    ProcUpToRightDown_Action
    807          //* Funkcja procedury "Przeniesienie stanu z góry w prawo i dó³"
    808          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    809          void ProcUpToRightDown_Action(short int *PrvUpOut, _Procedure *Proc) 
    810          {  
    811                Proc->Out=*PrvUpOut;
   \                     ProcUpToRightDown_Action:
   \   00000000   0088               LDRH     R0,[R0, #+0]
   \   00000002   4882               STRH     R0,[R1, #+18]
    812          }//_______________________ Koniec funkcji__ ____________________________
   \   00000004   7047               BX       LR               ;; return
    813          
    814          
    815          //*-----------------------------------------------------------------------------
    816          //* Nazwa funkcji :    ProcSetScn
    817          //* Funkcja procedury "Ustaw scenê"
    818          //*-----------------------------------------------------------------------------

   \                                 In section .bss, align 1
    819          char LastScene=0;
   \                     LastScene:
   \   00000000                      DS8 1

   \                                 In section Debug.txt, align 4, keep-with-next
    820          void ProcSetScn_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    821          {  
   \                     ProcSetScn_Action:
   \   00000000   10B5               PUSH     {R4,LR}
    822               
    823            
    824               if ((*PrvOut==1) && (Proc->Out==0))
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   C35E               LDRSH    R3,[R0, R3]
   \   00000006   012B               CMP      R3,#+1
   \   00000008   1ED1               BNE      ??ProcSetScn_Action_0
   \   0000000A   1223               MOVS     R3,#+18
   \   0000000C   CB5E               LDRSH    R3,[R1, R3]
   \   0000000E   002B               CMP      R3,#+0
   \   00000010   1AD1               BNE      ??ProcSetScn_Action_0
    825               {  
    826                  //if (Proc->Tag.NrScene>NumberScene) Proc->Tag.NrScene=NumberScene;
    827                 if (Proc->Nr==0)  //je¿eli on/off scen
   \   00000012   0123               MOVS     R3,#+1
   \   00000014   CB56               LDRSB    R3,[R1, R3]
   \   00000016   002B               CMP      R3,#+0
   \   00000018   13D1               BNE      ??ProcSetScn_Action_1
    828                 {
    829                   if (LastScene)
   \   0000001A   0E4B               LDR      R3,??ProcSetScn_Action_2  ;; LastScene
   \   0000001C   1B78               LDRB     R3,[R3, #+0]
   \   0000001E   002B               CMP      R3,#+0
   \   00000020   07D0               BEQ      ??ProcSetScn_Action_3
    830                   {
    831                      MainStg->SceneNr=LastScene;
   \   00000022   0D4B               LDR      R3,??ProcSetScn_Action_2+0x4  ;; 0x6ea
   \   00000024   0B4C               LDR      R4,??ProcSetScn_Action_2  ;; LastScene
   \   00000026   2478               LDRB     R4,[R4, #+0]
   \   00000028   D454               STRB     R4,[R2, R3]
    832                      LastScene=0;
   \   0000002A   0A4A               LDR      R2,??ProcSetScn_Action_2  ;; LastScene
   \   0000002C   0023               MOVS     R3,#+0
   \   0000002E   1370               STRB     R3,[R2, #+0]
   \   00000030   0AE0               B        ??ProcSetScn_Action_0
    833                   }else{ 
    834                      LastScene=MainStg->SceneNr;
   \                     ??ProcSetScn_Action_3:
   \   00000032   084B               LDR      R3,??ProcSetScn_Action_2  ;; LastScene
   \   00000034   084C               LDR      R4,??ProcSetScn_Action_2+0x4  ;; 0x6ea
   \   00000036   145D               LDRB     R4,[R2, R4]
   \   00000038   1C70               STRB     R4,[R3, #+0]
    835                      MainStg->SceneNr=0;
   \   0000003A   074B               LDR      R3,??ProcSetScn_Action_2+0x4  ;; 0x6ea
   \   0000003C   0024               MOVS     R4,#+0
   \   0000003E   D454               STRB     R4,[R2, R3]
   \   00000040   02E0               B        ??ProcSetScn_Action_0
    836                   }
    837                   
    838                 }else{
    839                  MainStg->SceneNr=Proc->Nr;
   \                     ??ProcSetScn_Action_1:
   \   00000042   054B               LDR      R3,??ProcSetScn_Action_2+0x4  ;; 0x6ea
   \   00000044   4C78               LDRB     R4,[R1, #+1]
   \   00000046   D454               STRB     R4,[R2, R3]
    840                 }
    841               }
    842          
    843               
    844               Proc->Out=*PrvOut;
   \                     ??ProcSetScn_Action_0:
   \   00000048   0088               LDRH     R0,[R0, #+0]
   \   0000004A   4882               STRH     R0,[R1, #+18]
    845          
    846          }//_______________________ Koniec funkcji__ ____________________________
   \   0000004C   10BC               POP      {R4}
   \   0000004E   01BC               POP      {R0}
   \   00000050   0047               BX       R0               ;; return
   \   00000052   C046               Nop      
   \                     ??ProcSetScn_Action_2:
   \   00000054   ........           DC32     LastScene
   \   00000058   EA060000           DC32     0x6ea
    847          
    848          
    849          
    850          
    851          //*-----------------------------------------------------------------------------
    852          //* Nazwa funkcji :    ProcInc_Action
    853          //* Funkcja procedury "Inkrementuj scenê"
    854          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    855          void ProcInc_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    856          {  
   \                     ProcInc_Action:
   \   00000000   10B5               PUSH     {R4,LR}
    857               if ((*PrvOut) && (Proc->LastIn==0))
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   C35E               LDRSH    R3,[R0, R3]
   \   00000006   002B               CMP      R3,#+0
   \   00000008   10D0               BEQ      ??ProcInc_Action_0
   \   0000000A   0B7C               LDRB     R3,[R1, #+16]
   \   0000000C   002B               CMP      R3,#+0
   \   0000000E   0DD1               BNE      ??ProcInc_Action_0
    858               {  
    859                  
    860                    if (MainStg->SceneNr<NumberScene) MainStg->SceneNr++;
   \   00000010   0A4B               LDR      R3,??ProcInc_Action_1  ;; 0x6ea
   \   00000012   D35C               LDRB     R3,[R2, R3]
   \   00000014   0A4C               LDR      R4,??ProcInc_Action_1+0x4  ;; NumberScene
   \   00000016   2478               LDRB     R4,[R4, #+0]
   \   00000018   A342               CMP      R3,R4
   \   0000001A   04D2               BCS      ??ProcInc_Action_2
   \   0000001C   074B               LDR      R3,??ProcInc_Action_1  ;; 0x6ea
   \   0000001E   074C               LDR      R4,??ProcInc_Action_1  ;; 0x6ea
   \   00000020   145D               LDRB     R4,[R2, R4]
   \   00000022   641C               ADDS     R4,R4,#+1
   \   00000024   D454               STRB     R4,[R2, R3]
    861                    LastScene=0;
   \                     ??ProcInc_Action_2:
   \   00000026   074A               LDR      R2,??ProcInc_Action_1+0x8  ;; LastScene
   \   00000028   0023               MOVS     R3,#+0
   \   0000002A   1370               STRB     R3,[R2, #+0]
    862               }
    863               
    864          
    865               Proc->LastIn=*PrvOut;
   \                     ??ProcInc_Action_0:
   \   0000002C   0288               LDRH     R2,[R0, #+0]
   \   0000002E   0A74               STRB     R2,[R1, #+16]
    866               Proc->Out=*PrvOut;
   \   00000030   0088               LDRH     R0,[R0, #+0]
   \   00000032   4882               STRH     R0,[R1, #+18]
    867           
    868          }//_______________________ Koniec funkcji__ ____________________________
   \   00000034   10BC               POP      {R4}
   \   00000036   01BC               POP      {R0}
   \   00000038   0047               BX       R0               ;; return
   \   0000003A   C046               Nop      
   \                     ??ProcInc_Action_1:
   \   0000003C   EA060000           DC32     0x6ea
   \   00000040   ........           DC32     NumberScene
   \   00000044   ........           DC32     LastScene
    869          
    870          
    871          //*-----------------------------------------------------------------------------
    872          //* Nazwa funkcji :    ProcIncDec_Action
    873          //* Funkcja procedury "Dekrementuj scenê"
    874          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    875          void ProcDec_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    876          {  
   \                     ProcDec_Action:
   \   00000000   10B5               PUSH     {R4,LR}
    877               if ((*PrvOut) && (Proc->LastIn==0))
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   C35E               LDRSH    R3,[R0, R3]
   \   00000006   002B               CMP      R3,#+0
   \   00000008   0ED0               BEQ      ??ProcDec_Action_0
   \   0000000A   0B7C               LDRB     R3,[R1, #+16]
   \   0000000C   002B               CMP      R3,#+0
   \   0000000E   0BD1               BNE      ??ProcDec_Action_0
    878               {  
    879                  
    880                  if (MainStg->SceneNr>0) MainStg->SceneNr--;
   \   00000010   094B               LDR      R3,??ProcDec_Action_1  ;; 0x6ea
   \   00000012   D35C               LDRB     R3,[R2, R3]
   \   00000014   012B               CMP      R3,#+1
   \   00000016   04D3               BCC      ??ProcDec_Action_2
   \   00000018   074B               LDR      R3,??ProcDec_Action_1  ;; 0x6ea
   \   0000001A   074C               LDR      R4,??ProcDec_Action_1  ;; 0x6ea
   \   0000001C   145D               LDRB     R4,[R2, R4]
   \   0000001E   641E               SUBS     R4,R4,#+1
   \   00000020   D454               STRB     R4,[R2, R3]
    881                  LastScene=0;
   \                     ??ProcDec_Action_2:
   \   00000022   064A               LDR      R2,??ProcDec_Action_1+0x4  ;; LastScene
   \   00000024   0023               MOVS     R3,#+0
   \   00000026   1370               STRB     R3,[R2, #+0]
    882               }
    883               
    884          
    885               Proc->LastIn=*PrvOut;
   \                     ??ProcDec_Action_0:
   \   00000028   0288               LDRH     R2,[R0, #+0]
   \   0000002A   0A74               STRB     R2,[R1, #+16]
    886               Proc->Out=*PrvOut;
   \   0000002C   0088               LDRH     R0,[R0, #+0]
   \   0000002E   4882               STRH     R0,[R1, #+18]
    887          
    888          }//_______________________ Koniec funkcji__ ____________________________
   \   00000030   10BC               POP      {R4}
   \   00000032   01BC               POP      {R0}
   \   00000034   0047               BX       R0               ;; return
   \   00000036   C046               Nop      
   \                     ??ProcDec_Action_1:
   \   00000038   EA060000           DC32     0x6ea
   \   0000003C   ........           DC32     LastScene
    889          
    890          
    891          
    892          //*-----------------------------------------------------------------------------
    893          //* Nazwa funkcji :    ProcSPK_Action
    894          //* Funkcja procedury "Dekrementuj scenê"
    895          //*-----------------------------------------------------------------------------
    896          extern     char Speaker[SPK_Amount];                                                   //sygna³ dŸwiêkowy

   \                                 In section Debug.txt, align 4, keep-with-next
    897          void ProcSPK_Action(short int *PrvOut, _Procedure *Proc) 
    898          {  
   \                     ProcSPK_Action:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0B00               MOVS     R3,R1
    899               if ((*PrvOut) && (Proc->Out==0))
   \   00000006   0020               MOVS     R0,#+0
   \   00000008   105E               LDRSH    R0,[R2, R0]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   23D0               BEQ      ??ProcSPK_Action_0
   \   0000000E   1220               MOVS     R0,#+18
   \   00000010   185E               LDRSH    R0,[R3, R0]
   \   00000012   0028               CMP      R0,#+0
   \   00000014   1FD1               BNE      ??ProcSPK_Action_0
    900               {  
    901                  for (char i=0; i<SPK_Amount; i++) Speaker[i]=0;
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   05E0               B        ??ProcSPK_Action_1
   \                     ??ProcSPK_Action_2:
   \   0000001A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000001C   000E               LSRS     R0,R0,#+24
   \   0000001E   1E49               LDR      R1,??ProcSPK_Action_3  ;; Speaker
   \   00000020   0024               MOVS     R4,#+0
   \   00000022   0C54               STRB     R4,[R1, R0]
   \   00000024   401C               ADDS     R0,R0,#+1
   \                     ??ProcSPK_Action_1:
   \   00000026   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000028   000E               LSRS     R0,R0,#+24
   \   0000002A   0428               CMP      R0,#+4
   \   0000002C   F5D3               BCC      ??ProcSPK_Action_2
    902                  Speaker[Proc->Tag.SpeakerType]=1;
   \   0000002E   187A               LDRB     R0,[R3, #+8]
   \   00000030   1949               LDR      R1,??ProcSPK_Action_3  ;; Speaker
   \   00000032   0124               MOVS     R4,#+1
   \   00000034   0C54               STRB     R4,[R1, R0]
    903                  if (Proc->Tag.SpeakerType==0) 
   \   00000036   187A               LDRB     R0,[R3, #+8]
   \   00000038   0028               CMP      R0,#+0
   \   0000003A   1CD1               BNE      ??ProcSPK_Action_4
    904                  {
    905                         ButtonBipCounter=g_counter+300000;
   \   0000003C   174C               LDR      R4,??ProcSPK_Action_3+0x4  ;; ButtonBipCounter
   \   0000003E   1848               LDR      R0,??ProcSPK_Action_3+0x8  ;; g_counter
   \   00000040   0068               LDR      R0,[R0, #+0]
   \   00000042   1849               LDR      R1,??ProcSPK_Action_3+0xC  ;; 0x493e0
   \   00000044   4018               ADDS     R0,R0,R1
   \   00000046   C117               ASRS     R1,R0,#+31
   \   00000048   03C4               STM      R4!,{R0,R1}
   \   0000004A   083C               SUBS     R4,R4,#+8
    906                         AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                           ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000004C   1648               LDR      R0,??ProcSPK_Action_3+0x10  ;; 0xfffff430
   \   0000004E   8021               MOVS     R1,#+128
   \   00000050   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000052   0160               STR      R1,[R0, #+0]
   \   00000054   0FE0               B        ??ProcSPK_Action_4
    907                  }
    908               }else if (*PrvOut==0) {
   \                     ??ProcSPK_Action_0:
   \   00000056   0020               MOVS     R0,#+0
   \   00000058   105E               LDRSH    R0,[R2, R0]
   \   0000005A   0028               CMP      R0,#+0
   \   0000005C   0BD1               BNE      ??ProcSPK_Action_4
    909                 for (char i=0; i<SPK_Amount; i++) Speaker[i]=0;
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   05E0               B        ??ProcSPK_Action_5
   \                     ??ProcSPK_Action_6:
   \   00000062   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000064   000E               LSRS     R0,R0,#+24
   \   00000066   0C49               LDR      R1,??ProcSPK_Action_3  ;; Speaker
   \   00000068   0024               MOVS     R4,#+0
   \   0000006A   0C54               STRB     R4,[R1, R0]
   \   0000006C   401C               ADDS     R0,R0,#+1
   \                     ??ProcSPK_Action_5:
   \   0000006E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000070   000E               LSRS     R0,R0,#+24
   \   00000072   0428               CMP      R0,#+4
   \   00000074   F5D3               BCC      ??ProcSPK_Action_6
    910               }
    911               if ((*PrvOut==0) && (Proc->Out==1))
   \                     ??ProcSPK_Action_4:
   \   00000076   0020               MOVS     R0,#+0
   \   00000078   105E               LDRSH    R0,[R2, R0]
   \   0000007A   0028               CMP      R0,#+0
   \   0000007C   07D1               BNE      ??ProcSPK_Action_7
   \   0000007E   1220               MOVS     R0,#+18
   \   00000080   185E               LDRSH    R0,[R3, R0]
   \   00000082   0128               CMP      R0,#+1
   \   00000084   03D1               BNE      ??ProcSPK_Action_7
    912               {  
    913                  AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;  
                                                    ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   00000086   0948               LDR      R0,??ProcSPK_Action_3+0x14  ;; 0xfffff434
   \   00000088   8021               MOVS     R1,#+128
   \   0000008A   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   0000008C   0160               STR      R1,[R0, #+0]
    914               }
    915               Proc->Out=*PrvOut;
   \                     ??ProcSPK_Action_7:
   \   0000008E   1088               LDRH     R0,[R2, #+0]
   \   00000090   5882               STRH     R0,[R3, #+18]
    916          }//_______________________ Koniec funkcji__ ____________________________
   \   00000092   10BC               POP      {R4}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
   \                     ??ProcSPK_Action_3:
   \   00000098   ........           DC32     Speaker
   \   0000009C   ........           DC32     ButtonBipCounter
   \   000000A0   ........           DC32     g_counter
   \   000000A4   E0930400           DC32     0x493e0
   \   000000A8   30F4FFFF           DC32     0xfffff430
   \   000000AC   34F4FFFF           DC32     0xfffff434
    917          
    918          
    919          
    920          
    921          
    922          //*-----------------------------------------------------------------------------
    923          //* Nazwa funkcji :    ProcSumL_Action
    924          //* Funkcja procedury "Sumy logicznej"
    925          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    926          void ProcSumL_Action(short int *PrvOut, short int *UpOut, _Procedure *Proc) 
    927          {  
    928            Proc->Out=*PrvOut | *UpOut;   
   \                     ProcSumL_Action:
   \   00000000   0088               LDRH     R0,[R0, #+0]
   \   00000002   0988               LDRH     R1,[R1, #+0]
   \   00000004   0143               ORRS     R1,R1,R0
   \   00000006   5182               STRH     R1,[R2, #+18]
    929          }//_______________________ Koniec funkcji__ ____________________________
   \   00000008   7047               BX       LR               ;; return
    930          
    931          
    932          
    933          //*-----------------------------------------------------------------------------
    934          //* Nazwa funkcji :    ProcIncDec_Action
    935          //* Funkcja procedury "Inkrementuj scenê"
    936          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    937          void ProcTimerSet_Action(short int *PrvOut, _Procedure *Proc, _MainStage *MainStg) 
    938          {  
   \                     ProcTimerSet_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    939             if ((*PrvOut)==0)
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   825E               LDRSH    R2,[R0, R2]
   \   00000006   002A               CMP      R2,#+0
   \   00000008   02D1               BNE      ??ProcTimerSet_Action_0
    940             {
    941               Proc->Out=0;
   \   0000000A   0022               MOVS     R2,#+0
   \   0000000C   4A82               STRH     R2,[R1, #+18]
   \   0000000E   14E0               B        ??ProcTimerSet_Action_1
    942             }else{
    943               if ((*PrvOut) && (Proc->LastIn==0))
   \                     ??ProcTimerSet_Action_0:
   \   00000010   0022               MOVS     R2,#+0
   \   00000012   825E               LDRSH    R2,[R0, R2]
   \   00000014   002A               CMP      R2,#+0
   \   00000016   07D0               BEQ      ??ProcTimerSet_Action_2
   \   00000018   0A7C               LDRB     R2,[R1, #+16]
   \   0000001A   002A               CMP      R2,#+0
   \   0000001C   04D1               BNE      ??ProcTimerSet_Action_2
    944               {  
    945                 Proc->Tag.CounterStartTime=g_seconds_counter; 
   \   0000001E   094A               LDR      R2,??ProcTimerSet_Action_3  ;; g_seconds_counter
   \   00000020   1268               LDR      R2,[R2, #+0]
   \   00000022   CA60               STR      R2,[R1, #+12]
    946                 Proc->Out=0;
   \   00000024   0022               MOVS     R2,#+0
   \   00000026   4A82               STRH     R2,[R1, #+18]
    947               }
    948               
    949               if ((Proc->Tag.CounterStartTime+Proc->Tag.SetCounter)<g_seconds_counter)
   \                     ??ProcTimerSet_Action_2:
   \   00000028   CA68               LDR      R2,[R1, #+12]
   \   0000002A   8B68               LDR      R3,[R1, #+8]
   \   0000002C   D218               ADDS     R2,R2,R3
   \   0000002E   054B               LDR      R3,??ProcTimerSet_Action_3  ;; g_seconds_counter
   \   00000030   1B68               LDR      R3,[R3, #+0]
   \   00000032   9A42               CMP      R2,R3
   \   00000034   9241               SBCS     R2,R2,R2
   \   00000036   D20F               LSRS     R2,R2,#+31
   \   00000038   4A82               STRH     R2,[R1, #+18]
    950               {
    951                 Proc->Out=1;
    952               }else{
    953                 Proc->Out=0;
    954               }
    955             }   
    956             
    957             Proc->LastIn=*PrvOut;
   \                     ??ProcTimerSet_Action_1:
   \   0000003A   0088               LDRH     R0,[R0, #+0]
   \   0000003C   0874               STRB     R0,[R1, #+16]
    958          }//_______________________ Koniec funkcji__ ____________________________
   \   0000003E   01B0               ADD      SP,SP,#+4
   \   00000040   01BC               POP      {R0}
   \   00000042   0047               BX       R0               ;; return
   \                     ??ProcTimerSet_Action_3:
   \   00000044   ........           DC32     g_seconds_counter
    959          
    960          
    961          
    962          
    963          
    964          
    965          //*-----------------------------------------------------------------------------
    966          //* Nazwa funkcji :    ProcClock_Action
    967          //* Funkcja procedury "Zegar"
    968          //*-----------------------------------------------------------------------------
    969          

   \                                 In section Debug.txt, align 4, keep-with-next
    970          void ProcClock_Action(short int *PrvOut, _Procedure *Proc) 
    971          {  
   \                     ProcClock_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    972             Proc->Out=0;
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   4A82               STRH     R2,[R1, #+18]
    973             if (*PrvOut)
   \   00000006   0022               MOVS     R2,#+0
   \   00000008   805E               LDRSH    R0,[R0, R2]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   31D0               BEQ      ??ProcClock_Action_0
    974             {
    975                if ((Proc->Tag.ClkPrcType==PrcMounth) && (Proc->Tag.ClkPrcVal==DateTime.Mounth))  Proc->Out=1; 
   \   0000000E   087A               LDRB     R0,[R1, #+8]
   \   00000010   0028               CMP      R0,#+0
   \   00000012   06D1               BNE      ??ProcClock_Action_1
   \   00000014   487A               LDRB     R0,[R1, #+9]
   \   00000016   184A               LDR      R2,??ProcClock_Action_2  ;; DateTime + 1
   \   00000018   1278               LDRB     R2,[R2, #+0]
   \   0000001A   9042               CMP      R0,R2
   \   0000001C   01D1               BNE      ??ProcClock_Action_1
   \   0000001E   0120               MOVS     R0,#+1
   \   00000020   4882               STRH     R0,[R1, #+18]
    976                if ((Proc->Tag.ClkPrcType==PrcDay)    && (Proc->Tag.ClkPrcVal==DateTime.Day))     Proc->Out=1; 
   \                     ??ProcClock_Action_1:
   \   00000022   087A               LDRB     R0,[R1, #+8]
   \   00000024   0128               CMP      R0,#+1
   \   00000026   06D1               BNE      ??ProcClock_Action_3
   \   00000028   487A               LDRB     R0,[R1, #+9]
   \   0000002A   144A               LDR      R2,??ProcClock_Action_2+0x4  ;; DateTime + 2
   \   0000002C   1278               LDRB     R2,[R2, #+0]
   \   0000002E   9042               CMP      R0,R2
   \   00000030   01D1               BNE      ??ProcClock_Action_3
   \   00000032   0120               MOVS     R0,#+1
   \   00000034   4882               STRH     R0,[R1, #+18]
    977                if ((Proc->Tag.ClkPrcType==PrcHour)   && (Proc->Tag.ClkPrcVal==DateTime.Hour))    Proc->Out=1; 
   \                     ??ProcClock_Action_3:
   \   00000036   087A               LDRB     R0,[R1, #+8]
   \   00000038   0228               CMP      R0,#+2
   \   0000003A   06D1               BNE      ??ProcClock_Action_4
   \   0000003C   487A               LDRB     R0,[R1, #+9]
   \   0000003E   104A               LDR      R2,??ProcClock_Action_2+0x8  ;; DateTime + 3
   \   00000040   1278               LDRB     R2,[R2, #+0]
   \   00000042   9042               CMP      R0,R2
   \   00000044   01D1               BNE      ??ProcClock_Action_4
   \   00000046   0120               MOVS     R0,#+1
   \   00000048   4882               STRH     R0,[R1, #+18]
    978                if ((Proc->Tag.ClkPrcType==PrcMinute) && (Proc->Tag.ClkPrcVal==DateTime.Minute))  Proc->Out=1;  
   \                     ??ProcClock_Action_4:
   \   0000004A   087A               LDRB     R0,[R1, #+8]
   \   0000004C   0328               CMP      R0,#+3
   \   0000004E   06D1               BNE      ??ProcClock_Action_5
   \   00000050   487A               LDRB     R0,[R1, #+9]
   \   00000052   0C4A               LDR      R2,??ProcClock_Action_2+0xC  ;; DateTime + 4
   \   00000054   1278               LDRB     R2,[R2, #+0]
   \   00000056   9042               CMP      R0,R2
   \   00000058   01D1               BNE      ??ProcClock_Action_5
   \   0000005A   0120               MOVS     R0,#+1
   \   0000005C   4882               STRH     R0,[R1, #+18]
    979                if ((Proc->Tag.ClkPrcType==PrcSecond) && (Proc->Tag.ClkPrcVal==DateTime.Second))  Proc->Out=1; 
   \                     ??ProcClock_Action_5:
   \   0000005E   087A               LDRB     R0,[R1, #+8]
   \   00000060   0428               CMP      R0,#+4
   \   00000062   06D1               BNE      ??ProcClock_Action_0
   \   00000064   487A               LDRB     R0,[R1, #+9]
   \   00000066   084A               LDR      R2,??ProcClock_Action_2+0x10  ;; DateTime + 5
   \   00000068   1278               LDRB     R2,[R2, #+0]
   \   0000006A   9042               CMP      R0,R2
   \   0000006C   01D1               BNE      ??ProcClock_Action_0
   \   0000006E   0120               MOVS     R0,#+1
   \   00000070   4882               STRH     R0,[R1, #+18]
    980                        
    981          
    982             }
    983          
    984          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcClock_Action_0:
   \   00000072   01B0               ADD      SP,SP,#+4
   \   00000074   01BC               POP      {R0}
   \   00000076   0047               BX       R0               ;; return
   \                     ??ProcClock_Action_2:
   \   00000078   ........           DC32     DateTime + 1
   \   0000007C   ........           DC32     DateTime + 2
   \   00000080   ........           DC32     DateTime + 3
   \   00000084   ........           DC32     DateTime + 4
   \   00000088   ........           DC32     DateTime + 5
    985          
    986          
    987          
    988          //*-----------------------------------------------------------------------------
    989          //* Nazwa funkcji :    ProcDay_Action
    990          //* Funkcja procedury "Dnia tygodnia"
    991          //*-----------------------------------------------------------------------------
    992          

   \                                 In section Debug.txt, align 4, keep-with-next
    993          void ProcDay_Action(short int *PrvOut, _Procedure *Proc) 
    994          {  
   \                     ProcDay_Action:
   \   00000000   01B5               PUSH     {R0,LR}
    995             Proc->Out=0;
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   4A82               STRH     R2,[R1, #+18]
    996             if (*PrvOut)
   \   00000006   0022               MOVS     R2,#+0
   \   00000008   805E               LDRSH    R0,[R0, R2]
   \   0000000A   0028               CMP      R0,#+0
   \   0000000C   06D0               BEQ      ??ProcDay_Action_0
    997             {
    998                if (Proc->Tag.DayOfWeek==DateTime.DayOfWeek)  Proc->Out=1; 
   \   0000000E   087A               LDRB     R0,[R1, #+8]
   \   00000010   044A               LDR      R2,??ProcDay_Action_1  ;; DateTime + 6
   \   00000012   1278               LDRB     R2,[R2, #+0]
   \   00000014   9042               CMP      R0,R2
   \   00000016   01D1               BNE      ??ProcDay_Action_0
   \   00000018   0120               MOVS     R0,#+1
   \   0000001A   4882               STRH     R0,[R1, #+18]
    999          
   1000             }
   1001          }//_______________________ Koniec funkcji  ____________________________
   \                     ??ProcDay_Action_0:
   \   0000001C   01B0               ADD      SP,SP,#+4
   \   0000001E   01BC               POP      {R0}
   \   00000020   0047               BX       R0               ;; return
   \   00000022   C046               Nop      
   \                     ??ProcDay_Action_1:
   \   00000024   ........           DC32     DateTime + 6
   1002          
   1003          
   1004          
   1005          
   1006          
   1007          
   1008          
   1009          //*-----------------------------------------------------------------------------
   1010          //* Nazwa funkcji :    Program
   1011          //* Funkcja opóŸnienia
   1012          //*-----------------------------------------------------------------------------

   \                                 In section .bss, align 1
   1013          volatile char Busy_program=0;
   \                     Busy_program:
   \   00000000                      DS8 1
   1014          

   \                                 In section .bss, align 1
   1015          char SceneNrLast=0;
   \                     SceneNrLast:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
   1016          char RealPrcLines=MaxPrcLines;
   \                     RealPrcLines:
   \   00000000   C8                 DC8 200
   1017          

   \                                 In section .bss, align 4
   1018          int PtogTime=0;
   \                     PtogTime:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1019          unsigned long last_time;
   \                     last_time:
   \   00000000                      DS8 4
   1020          

   \                                 In section Debug.txt, align 4, keep-with-next
   1021          void Program (_ProgramTab *ProgTab) 
   1022          { 
   \                     Program:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0500               MOVS     R5,R0
   1023              static int MemCol=0;
   1024              static int MemRow=0;
   1025              int StartLineNr=0;
   \   00000004   0024               MOVS     R4,#+0
   1026              int StartPrcInLine=0;
   \   00000006   0026               MOVS     R6,#+0
   1027              
   1028              if (Busy_program==0)
   \   00000008   C248               LDR      R0,??Program_0   ;; Busy_program
   \   0000000A   0078               LDRB     R0,[R0, #+0]
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   00D0               BEQ      .+4
   \   00000010   B5E3               B        ??Program_1
   1029              {
   1030                Busy_program=1;
   \   00000012   C048               LDR      R0,??Program_0   ;; Busy_program
   \   00000014   0121               MOVS     R1,#+1
   \   00000016   0170               STRB     R1,[R0, #+0]
   1031              
   1032          
   1033             last_time=g_counter;
   \   00000018   BF48               LDR      R0,??Program_0+0x4  ;; last_time
   \   0000001A   C049               LDR      R1,??Program_0+0x8  ;; g_counter
   \   0000001C   0968               LDR      R1,[R1, #+0]
   \   0000001E   0160               STR      R1,[R0, #+0]
   1034            
   1035          
   1036            
   1037            short int StPrvPrc; //stan poprzedniej procedury
   1038            short int StUpPrc; //stan procedury z linii wy¿ej, z tej samej kolumny dla sumy logicznej
   1039            
   1040            if ((Trap.Enable) && (Trap.Change))
   \   00000020   BF48               LDR      R0,??Program_0+0xC  ;; Trap
   \   00000022   0078               LDRB     R0,[R0, #+0]
   \   00000024   0028               CMP      R0,#+0
   \   00000026   0AD0               BEQ      ??Program_2
   \   00000028   BE48               LDR      R0,??Program_0+0x10  ;; Trap + 4
   \   0000002A   0078               LDRB     R0,[R0, #+0]
   \   0000002C   0028               CMP      R0,#+0
   \   0000002E   06D0               BEQ      ??Program_2
   1041                  {
   1042                    StartPrcInLine=MemCol;
   \   00000030   BD48               LDR      R0,??Program_0+0x14  ;; ??MemCol
   \   00000032   0668               LDR      R6,[R0, #+0]
   1043                    StartLineNr=MemRow;
   \   00000034   BD48               LDR      R0,??Program_0+0x18  ;; ??MemRow
   \   00000036   0468               LDR      R4,[R0, #+0]
   1044                    Trap.Change=0;
   \   00000038   BA48               LDR      R0,??Program_0+0x10  ;; Trap + 4
   \   0000003A   0021               MOVS     R1,#+0
   \   0000003C   0170               STRB     R1,[R0, #+0]
   1045                  }
   1046            
   1047             
   1048                
   1049                          
   1050                 
   1051                   
   1052            
   1053                 for (char NB=0; NB<NumberButton; NB++)
   \                     ??Program_2:
   \   0000003E   0020               MOVS     R0,#+0
   \   00000040   0AE0               B        ??Program_3
   1054                 {
   1055                      MainStage.StageButtonExe[NB]=MainStage.StageButton[NB];  
   \                     ??Program_4:
   \   00000042   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000044   000E               LSRS     R0,R0,#+24
   \   00000046   BA49               LDR      R1,??Program_0+0x1C  ;; MainStage
   \   00000048   0918               ADDS     R1,R1,R0
   \   0000004A   5031               ADDS     R1,R1,#+80
   \   0000004C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000004E   000E               LSRS     R0,R0,#+24
   \   00000050   B74A               LDR      R2,??Program_0+0x1C  ;; MainStage
   \   00000052   125C               LDRB     R2,[R2, R0]
   \   00000054   0A70               STRB     R2,[R1, #+0]
   1056                 }
   \   00000056   401C               ADDS     R0,R0,#+1
   \                     ??Program_3:
   \   00000058   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000005A   000E               LSRS     R0,R0,#+24
   \   0000005C   5028               CMP      R0,#+80
   \   0000005E   F0D3               BCC      ??Program_4
   1057            
   1058            
   1059            
   1060                for (int LineNr=StartLineNr; LineNr<RealPrcLines; LineNr++)
   \   00000060   00E0               B        ??Program_5
   \                     ??Program_6:
   \   00000062   641C               ADDS     R4,R4,#+1
   \                     ??Program_5:
   \   00000064   B348               LDR      R0,??Program_0+0x20  ;; RealPrcLines
   \   00000066   0078               LDRB     R0,[R0, #+0]
   \   00000068   8442               CMP      R4,R0
   \   0000006A   00DB               BLT      .+4
   \   0000006C   1FE3               B        ??Program_7
   1061                {
   1062                  for (int PrcInLine=StartPrcInLine; PrcInLine<MaxPrcInLine; PrcInLine++)
   \   0000006E   3700               MOVS     R7,R6
   \   00000070   2BE0               B        ??Program_8
   1063                  {
   1064                   
   1065                    
   1066          
   1067                    
   1068                    
   1069                    
   1070                   if ((Trap.Enable) &&  (Trap.Row==LineNr) && (Trap.Col==PrcInLine)) 
   1071                   {
   1072                     Trap.Activ=1; 
   1073                     MemCol=PrcInLine;
   1074                     MemRow=LineNr;
   1075                      
   1076                   }
   1077                   if ((Trap.Enable==0) || (Trap.Activ==0) )
   1078                   {
   1079          
   1080                     
   1081                   if (Trap.Enable==0)
   1082                   {
   1083                    MemCol=PrcInLine;
   1084                    MemRow=LineNr;
   1085                   }  
   1086                     
   1087                     
   1088                     if (ProgTab->Line[LineNr].Proc[PrcInLine].Type!=None)
   1089                     {
   1090                        if (PrcInLine==0)
   1091                        {
   1092                          StPrvPrc= 1;
   1093                        }else{
   1094                          StPrvPrc= (ProgTab->Line[LineNr].Proc[PrcInLine-1].Out);
   1095                        }
   1096                        
   1097                        
   1098          
   1099                        switch (ProgTab->Line[LineNr].Proc[PrcInLine].Type)
   1100                        {    
   1101                            case ProcConect     : ProcConect_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1102                            case ProcDown       : ProcDown_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1103                            case ProcDownRight  : ProcDownRight_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1104                            case ProcSumLogRight     : 
   1105                                                StUpPrc= 0;
   1106                                                if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1107                                                ProcSumL_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); 
   1108                                                break;
   1109                            case ProcSumLogDown     : 
   1110                                                StUpPrc= 0;
   1111                                                if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1112                                                ProcSumL_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); 
   1113                                                break;
   1114                            case ProcUpToRight     : 
   1115                                                StUpPrc= 0;
   1116                                                if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1117                                                ProcUpToRight_Action(&StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); 
   1118                                                break;
   1119                                                
   1120                            case ProcUpToRightDown    : 
   1121                                                StUpPrc= 0;
   1122                                                if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1123                                                ProcUpToRightDown_Action(&StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); 
   1124                                                break;                    
   1125                                             
   1126                           
   1127                            
   1128                            case ProcNOT        : ProcNOT_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;         
   1129                            case ProcToggleRS   : if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1130                                                  ProcToggleRS_Action(&StPrvPrc, &StUpPrc,  &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;    
   1131                            case ProcToggleT    : ProcToggleT_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;         
   1132                            case ProcTLI1       : ProcTLI1_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;         
   1133                            case ProcStI        : ProcStI_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1134                            case ProcStNI       : ProcStNI_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1135                            case ProcStQ        : ProcStQ_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1136                            case ProcStB        : ProcStB_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1137                            case ProcStS        : ProcStS_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1138                            case ProcWOUT       : ProcWOUT_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1139                            case ProcWOUTS      : ProcWOUTS_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]),&MainStage); break;
   1140                            case ProcWOUTR      : ProcWOUTR_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]),&MainStage); break;
   1141                            case ProcWOUTC      : ProcWOUTC_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]),&MainStage); break;
   1142                            case ProcSetScn     : ProcSetScn_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1143                            case ProcInc        : ProcInc_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;             
   1144                            case ProcDec        : ProcDec_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;             
   1145                            case ProcSPK        : ProcSPK_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break; 
   1146                            case ProcTimerSet   : ProcTimerSet_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1147                            case ProcClock      : ProcClock_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1148                            case ProcDay        : ProcDay_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1149                            case ProcGetReg     : ProcGetReg_Action(&(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1150                            case ProcSetReg     : ProcSetAnal_Action(&StPrvPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine]), &MainStage); break;
   1151                            case ProcConstAnal  : ProcConstAnal_Action(&(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1152                            case ProcLim        : if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1153                                                  ProcLim_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1154                            case ProcEven       : if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1155                                                  ProcEven_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1156                            case ProcPlus       : if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1157                                                  ProcPlus_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1158                            case ProcMinus      : if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1159                                                  ProcMinus_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1160                            case ProcMul        : if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   1161                                                  ProcMul_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   1162                            case ProcDiv        : if (LineNr!=0) StUpPrc=(ProgTab->Line[LineNr-1].Proc[PrcInLine].Out);
   \                     ??Program_9:
   \   00000072   002C               CMP      R4,#+0
   \   00000074   09D0               BEQ      ??Program_10
   \   00000076   6846               MOV      R0,SP
   \   00000078   1821               MOVS     R1,#+24
   \   0000007A   7943               MULS     R1,R7,R1
   \   0000007C   F022               MOVS     R2,#+240
   \   0000007E   6243               MULS     R2,R4,R2
   \   00000080   AA18               ADDS     R2,R5,R2
   \   00000082   5118               ADDS     R1,R2,R1
   \   00000084   C639               SUBS     R1,R1,#+198
   \   00000086   0988               LDRH     R1,[R1, #+0]
   \   00000088   4180               STRH     R1,[R0, #+2]
   1163                                                  ProcDiv_Action(&StPrvPrc, &StUpPrc, &(ProgTab->Line[LineNr].Proc[PrcInLine])); break;
   \                     ??Program_10:
   \   0000008A   1820               MOVS     R0,#+24
   \   0000008C   7843               MULS     R0,R7,R0
   \   0000008E   F021               MOVS     R1,#+240
   \   00000090   6143               MULS     R1,R4,R1
   \   00000092   6918               ADDS     R1,R5,R1
   \   00000094   0A18               ADDS     R2,R1,R0
   \   00000096   1832               ADDS     R2,R2,#+24
   \   00000098   00A9               ADD      R1,SP,#+0
   \   0000009A   891C               ADDS     R1,R1,#+2
   \   0000009C   6846               MOV      R0,SP
   \   0000009E   ........           BL       ProcDiv_Action
   1164          
   1165                            
   1166                        }
   1167                        
   1168                     }  
   1169                    
   1170                   
   1171                   
   1172                   
   1173                   
   1174                   
   1175                   if ((LineNr==RealPrcLines-1) && (PrcInLine==MaxPrcInLine-1))
   \                     ??Program_11:
   \   000000A2   A448               LDR      R0,??Program_0+0x20  ;; RealPrcLines
   \   000000A4   0078               LDRB     R0,[R0, #+0]
   \   000000A6   401E               SUBS     R0,R0,#+1
   \   000000A8   8442               CMP      R4,R0
   \   000000AA   0DD1               BNE      ??Program_12
   \   000000AC   092F               CMP      R7,#+9
   \   000000AE   0BD1               BNE      ??Program_12
   1176                    { 
   1177                    
   1178                        //ThermostatsExecute();
   1179          
   1180                          /* 
   1181                          for (char iNrQ=0; iNrQ<NumberNeurons; iNrQ++)
   1182                          {  
   1183                            for (char iNrReg=0; iNrReg<NumberReg; iNrReg++)
   1184                          {
   1185                            MainStage.StageQ[iNrQ].Value[iNrReg]=MainStage.StageQ_TMP[iNrQ].Value[iNrReg]; 
   1186                          }
   1187                          
   1188                          }
   1189                          */
   1190          
   1191                      /*
   1192                      for (char iNrReg=0; iNrReg<NumberReg; iNrReg++)
   1193                      {
   1194                        MainStage.StageI[0].Value[iNrReg]=MainStage.StageQ[0].Value[iNrReg]; 
   1195                      }
   1196                     */
   1197           
   1198            
   1199                      if (MainStage.SceneNr!=SceneNrLast)
   \   000000B0   A148               LDR      R0,??Program_0+0x24  ;; MainStage + 1770
   \   000000B2   0078               LDRB     R0,[R0, #+0]
   \   000000B4   A149               LDR      R1,??Program_0+0x28  ;; SceneNrLast
   \   000000B6   0978               LDRB     R1,[R1, #+0]
   \   000000B8   8842               CMP      R0,R1
   \   000000BA   05D0               BEQ      ??Program_12
   1200                      {
   1201                        SceneNrLast=MainStage.SceneNr;
   \   000000BC   9F48               LDR      R0,??Program_0+0x28  ;; SceneNrLast
   \   000000BE   9E49               LDR      R1,??Program_0+0x24  ;; MainStage + 1770
   \   000000C0   0978               LDRB     R1,[R1, #+0]
   \   000000C2   0170               STRB     R1,[R0, #+0]
   1202                        MenuPaint();
   \   000000C4   ........           BL       MenuPaint
   1203                      }
   1204           
   1205                   
   1206          
   1207                   }
   \                     ??Program_12:
   \   000000C8   7F1C               ADDS     R7,R7,#+1
   \                     ??Program_8:
   \   000000CA   0A2F               CMP      R7,#+10
   \   000000CC   C9DA               BGE      ??Program_6
   \   000000CE   9448               LDR      R0,??Program_0+0xC  ;; Trap
   \   000000D0   0078               LDRB     R0,[R0, #+0]
   \   000000D2   0028               CMP      R0,#+0
   \   000000D4   0ED0               BEQ      ??Program_13
   \   000000D6   9A48               LDR      R0,??Program_0+0x2C  ;; Trap + 1
   \   000000D8   0078               LDRB     R0,[R0, #+0]
   \   000000DA   A042               CMP      R0,R4
   \   000000DC   0AD1               BNE      ??Program_13
   \   000000DE   9948               LDR      R0,??Program_0+0x30  ;; Trap + 2
   \   000000E0   0078               LDRB     R0,[R0, #+0]
   \   000000E2   B842               CMP      R0,R7
   \   000000E4   06D1               BNE      ??Program_13
   \   000000E6   9848               LDR      R0,??Program_0+0x34  ;; Trap + 3
   \   000000E8   0121               MOVS     R1,#+1
   \   000000EA   0170               STRB     R1,[R0, #+0]
   \   000000EC   8E48               LDR      R0,??Program_0+0x14  ;; ??MemCol
   \   000000EE   0760               STR      R7,[R0, #+0]
   \   000000F0   8E48               LDR      R0,??Program_0+0x18  ;; ??MemRow
   \   000000F2   0460               STR      R4,[R0, #+0]
   \                     ??Program_13:
   \   000000F4   8A48               LDR      R0,??Program_0+0xC  ;; Trap
   \   000000F6   0078               LDRB     R0,[R0, #+0]
   \   000000F8   0028               CMP      R0,#+0
   \   000000FA   03D0               BEQ      ??Program_14
   \   000000FC   9248               LDR      R0,??Program_0+0x34  ;; Trap + 3
   \   000000FE   0078               LDRB     R0,[R0, #+0]
   \   00000100   0028               CMP      R0,#+0
   \   00000102   E1D1               BNE      ??Program_12
   \                     ??Program_14:
   \   00000104   8648               LDR      R0,??Program_0+0xC  ;; Trap
   \   00000106   0078               LDRB     R0,[R0, #+0]
   \   00000108   0028               CMP      R0,#+0
   \   0000010A   03D1               BNE      ??Program_15
   \   0000010C   8648               LDR      R0,??Program_0+0x14  ;; ??MemCol
   \   0000010E   0760               STR      R7,[R0, #+0]
   \   00000110   8648               LDR      R0,??Program_0+0x18  ;; ??MemRow
   \   00000112   0460               STR      R4,[R0, #+0]
   \                     ??Program_15:
   \   00000114   1820               MOVS     R0,#+24
   \   00000116   7843               MULS     R0,R7,R0
   \   00000118   F021               MOVS     R1,#+240
   \   0000011A   6143               MULS     R1,R4,R1
   \   0000011C   6918               ADDS     R1,R5,R1
   \   0000011E   0818               ADDS     R0,R1,R0
   \   00000120   007E               LDRB     R0,[R0, #+24]
   \   00000122   0028               CMP      R0,#+0
   \   00000124   BDD0               BEQ      ??Program_11
   \   00000126   002F               CMP      R7,#+0
   \   00000128   03D1               BNE      ??Program_16
   \   0000012A   6846               MOV      R0,SP
   \   0000012C   0121               MOVS     R1,#+1
   \   0000012E   0180               STRH     R1,[R0, #+0]
   \   00000130   08E0               B        ??Program_17
   \                     ??Program_16:
   \   00000132   6846               MOV      R0,SP
   \   00000134   1821               MOVS     R1,#+24
   \   00000136   7943               MULS     R1,R7,R1
   \   00000138   F022               MOVS     R2,#+240
   \   0000013A   6243               MULS     R2,R4,R2
   \   0000013C   AA18               ADDS     R2,R5,R2
   \   0000013E   5118               ADDS     R1,R2,R1
   \   00000140   498A               LDRH     R1,[R1, #+18]
   \   00000142   0180               STRH     R1,[R0, #+0]
   \                     ??Program_17:
   \   00000144   1820               MOVS     R0,#+24
   \   00000146   7843               MULS     R0,R7,R0
   \   00000148   F021               MOVS     R1,#+240
   \   0000014A   6143               MULS     R1,R4,R1
   \   0000014C   6918               ADDS     R1,R5,R1
   \   0000014E   0818               ADDS     R0,R1,R0
   \   00000150   007E               LDRB     R0,[R0, #+24]
   \   00000152   0228               CMP      R0,#+2
   \   00000154   67D0               BEQ      ??Program_18
   \   00000156   0328               CMP      R0,#+3
   \   00000158   71D0               BEQ      ??Program_19
   \   0000015A   0428               CMP      R0,#+4
   \   0000015C   7BD0               BEQ      ??Program_20
   \   0000015E   0528               CMP      R0,#+5
   \   00000160   00D1               BNE      .+4
   \   00000162   A0E0               B        ??Program_21
   \   00000164   0628               CMP      R0,#+6
   \   00000166   00D1               BNE      .+4
   \   00000168   81E0               B        ??Program_22
   \   0000016A   0728               CMP      R0,#+7
   \   0000016C   00D1               BNE      .+4
   \   0000016E   B6E0               B        ??Program_23
   \   00000170   0828               CMP      R0,#+8
   \   00000172   00D1               BNE      .+4
   \   00000174   EAE0               B        ??Program_24
   \   00000176   0928               CMP      R0,#+9
   \   00000178   00D1               BNE      .+4
   \   0000017A   02E1               B        ??Program_25
   \   0000017C   0A28               CMP      R0,#+10
   \   0000017E   00D1               BNE      .+4
   \   00000180   0BE1               B        ??Program_26
   \   00000182   0B28               CMP      R0,#+11
   \   00000184   00D1               BNE      .+4
   \   00000186   21E1               B        ??Program_27
   \   00000188   0C28               CMP      R0,#+12
   \   0000018A   00D1               BNE      .+4
   \   0000018C   29E1               B        ??Program_28
   \   0000018E   1428               CMP      R0,#+20
   \   00000190   00D1               BNE      .+4
   \   00000192   31E1               B        ??Program_29
   \   00000194   1528               CMP      R0,#+21
   \   00000196   00D1               BNE      .+4
   \   00000198   3AE1               B        ??Program_30
   \   0000019A   1628               CMP      R0,#+22
   \   0000019C   00D1               BNE      .+4
   \   0000019E   43E1               B        ??Program_31
   \   000001A0   1728               CMP      R0,#+23
   \   000001A2   00D1               BNE      .+4
   \   000001A4   4CE1               B        ??Program_32
   \   000001A6   1828               CMP      R0,#+24
   \   000001A8   00D1               BNE      .+4
   \   000001AA   55E1               B        ??Program_33
   \   000001AC   2028               CMP      R0,#+32
   \   000001AE   00D1               BNE      .+4
   \   000001B0   5EE1               B        ??Program_34
   \   000001B2   2128               CMP      R0,#+33
   \   000001B4   00D1               BNE      .+4
   \   000001B6   67E1               B        ??Program_35
   \   000001B8   2228               CMP      R0,#+34
   \   000001BA   00D1               BNE      .+4
   \   000001BC   70E1               B        ??Program_36
   \   000001BE   2328               CMP      R0,#+35
   \   000001C0   00D1               BNE      .+4
   \   000001C2   79E1               B        ??Program_37
   \   000001C4   2428               CMP      R0,#+36
   \   000001C6   00D1               BNE      .+4
   \   000001C8   82E1               B        ??Program_38
   \   000001CA   2528               CMP      R0,#+37
   \   000001CC   00D1               BNE      .+4
   \   000001CE   8BE1               B        ??Program_39
   \   000001D0   2628               CMP      R0,#+38
   \   000001D2   00D1               BNE      .+4
   \   000001D4   94E1               B        ??Program_40
   \   000001D6   2728               CMP      R0,#+39
   \   000001D8   00D1               BNE      .+4
   \   000001DA   9DE1               B        ??Program_41
   \   000001DC   2D28               CMP      R0,#+45
   \   000001DE   00D1               BNE      .+4
   \   000001E0   A5E1               B        ??Program_42
   \   000001E2   2E28               CMP      R0,#+46
   \   000001E4   00D1               BNE      .+4
   \   000001E6   AEE1               B        ??Program_43
   \   000001E8   2F28               CMP      R0,#+47
   \   000001EA   00D1               BNE      .+4
   \   000001EC   B6E1               B        ??Program_44
   \   000001EE   3728               CMP      R0,#+55
   \   000001F0   00D1               BNE      .+4
   \   000001F2   D5E1               B        ??Program_45
   \   000001F4   3828               CMP      R0,#+56
   \   000001F6   00D1               BNE      .+4
   \   000001F8   BBE1               B        ??Program_46
   \   000001FA   3928               CMP      R0,#+57
   \   000001FC   00D1               BNE      .+4
   \   000001FE   C3E1               B        ??Program_47
   \   00000200   3A28               CMP      R0,#+58
   \   00000202   00D1               BNE      .+4
   \   00000204   D6E1               B        ??Program_48
   \   00000206   3B28               CMP      R0,#+59
   \   00000208   00D1               BNE      .+4
   \   0000020A   ECE1               B        ??Program_49
   \   0000020C   3C28               CMP      R0,#+60
   \   0000020E   00D1               BNE      .+4
   \   00000210   02E2               B        ??Program_50
   \   00000212   3D28               CMP      R0,#+61
   \   00000214   00D1               BNE      .+4
   \   00000216   18E2               B        ??Program_51
   \   00000218   3E28               CMP      R0,#+62
   \   0000021A   00D1               BNE      .+4
   \   0000021C   2EE2               B        ??Program_52
   \   0000021E   3F28               CMP      R0,#+63
   \   00000220   00D1               BNE      .+4
   \   00000222   26E7               B        ??Program_9
   \   00000224   3DE7               B        ??Program_11
   \                     ??Program_18:
   \   00000226   424A               LDR      R2,??Program_0+0x1C  ;; MainStage
   \   00000228   1820               MOVS     R0,#+24
   \   0000022A   7843               MULS     R0,R7,R0
   \   0000022C   F021               MOVS     R1,#+240
   \   0000022E   6143               MULS     R1,R4,R1
   \   00000230   6918               ADDS     R1,R5,R1
   \   00000232   0918               ADDS     R1,R1,R0
   \   00000234   1831               ADDS     R1,R1,#+24
   \   00000236   6846               MOV      R0,SP
   \   00000238   ........           BL       ProcConect_Action
   \   0000023C   31E7               B        ??Program_11
   \                     ??Program_19:
   \   0000023E   3C4A               LDR      R2,??Program_0+0x1C  ;; MainStage
   \   00000240   1820               MOVS     R0,#+24
   \   00000242   7843               MULS     R0,R7,R0
   \   00000244   F021               MOVS     R1,#+240
   \   00000246   6143               MULS     R1,R4,R1
   \   00000248   6918               ADDS     R1,R5,R1
   \   0000024A   0918               ADDS     R1,R1,R0
   \   0000024C   1831               ADDS     R1,R1,#+24
   \   0000024E   6846               MOV      R0,SP
   \   00000250   ........           BL       ProcDown_Action
   \   00000254   25E7               B        ??Program_11
   \                     ??Program_20:
   \   00000256   364A               LDR      R2,??Program_0+0x1C  ;; MainStage
   \   00000258   1820               MOVS     R0,#+24
   \   0000025A   7843               MULS     R0,R7,R0
   \   0000025C   F021               MOVS     R1,#+240
   \   0000025E   6143               MULS     R1,R4,R1
   \   00000260   6918               ADDS     R1,R5,R1
   \   00000262   0918               ADDS     R1,R1,R0
   \   00000264   1831               ADDS     R1,R1,#+24
   \   00000266   6846               MOV      R0,SP
   \   00000268   ........           BL       ProcDownRight_Action
   \   0000026C   19E7               B        ??Program_11
   \                     ??Program_22:
   \   0000026E   6846               MOV      R0,SP
   \   00000270   0021               MOVS     R1,#+0
   \   00000272   4180               STRH     R1,[R0, #+2]
   \   00000274   002C               CMP      R4,#+0
   \   00000276   09D0               BEQ      ??Program_53
   \   00000278   6846               MOV      R0,SP
   \   0000027A   1821               MOVS     R1,#+24
   \   0000027C   7943               MULS     R1,R7,R1
   \   0000027E   F022               MOVS     R2,#+240
   \   00000280   6243               MULS     R2,R4,R2
   \   00000282   AA18               ADDS     R2,R5,R2
   \   00000284   5118               ADDS     R1,R2,R1
   \   00000286   C639               SUBS     R1,R1,#+198
   \   00000288   0988               LDRH     R1,[R1, #+0]
   \   0000028A   4180               STRH     R1,[R0, #+2]
   \                     ??Program_53:
   \   0000028C   1820               MOVS     R0,#+24
   \   0000028E   7843               MULS     R0,R7,R0
   \   00000290   F021               MOVS     R1,#+240
   \   00000292   6143               MULS     R1,R4,R1
   \   00000294   6918               ADDS     R1,R5,R1
   \   00000296   0A18               ADDS     R2,R1,R0
   \   00000298   1832               ADDS     R2,R2,#+24
   \   0000029A   00A9               ADD      R1,SP,#+0
   \   0000029C   891C               ADDS     R1,R1,#+2
   \   0000029E   6846               MOV      R0,SP
   \   000002A0   ........           BL       ProcSumL_Action
   \   000002A4   FDE6               B        ??Program_11
   \                     ??Program_21:
   \   000002A6   6846               MOV      R0,SP
   \   000002A8   0021               MOVS     R1,#+0
   \   000002AA   4180               STRH     R1,[R0, #+2]
   \   000002AC   002C               CMP      R4,#+0
   \   000002AE   09D0               BEQ      ??Program_54
   \   000002B0   6846               MOV      R0,SP
   \   000002B2   1821               MOVS     R1,#+24
   \   000002B4   7943               MULS     R1,R7,R1
   \   000002B6   F022               MOVS     R2,#+240
   \   000002B8   6243               MULS     R2,R4,R2
   \   000002BA   AA18               ADDS     R2,R5,R2
   \   000002BC   5118               ADDS     R1,R2,R1
   \   000002BE   C639               SUBS     R1,R1,#+198
   \   000002C0   0988               LDRH     R1,[R1, #+0]
   \   000002C2   4180               STRH     R1,[R0, #+2]
   \                     ??Program_54:
   \   000002C4   1820               MOVS     R0,#+24
   \   000002C6   7843               MULS     R0,R7,R0
   \   000002C8   F021               MOVS     R1,#+240
   \   000002CA   6143               MULS     R1,R4,R1
   \   000002CC   6918               ADDS     R1,R5,R1
   \   000002CE   0A18               ADDS     R2,R1,R0
   \   000002D0   1832               ADDS     R2,R2,#+24
   \   000002D2   00A9               ADD      R1,SP,#+0
   \   000002D4   891C               ADDS     R1,R1,#+2
   \   000002D6   6846               MOV      R0,SP
   \   000002D8   ........           BL       ProcSumL_Action
   \   000002DC   E1E6               B        ??Program_11
   \                     ??Program_23:
   \   000002DE   6846               MOV      R0,SP
   \   000002E0   0021               MOVS     R1,#+0
   \   000002E2   4180               STRH     R1,[R0, #+2]
   \   000002E4   002C               CMP      R4,#+0
   \   000002E6   09D0               BEQ      ??Program_55
   \   000002E8   6846               MOV      R0,SP
   \   000002EA   1821               MOVS     R1,#+24
   \   000002EC   7943               MULS     R1,R7,R1
   \   000002EE   F022               MOVS     R2,#+240
   \   000002F0   6243               MULS     R2,R4,R2
   \   000002F2   AA18               ADDS     R2,R5,R2
   \   000002F4   5118               ADDS     R1,R2,R1
   \   000002F6   C639               SUBS     R1,R1,#+198
   \   000002F8   0988               LDRH     R1,[R1, #+0]
   \   000002FA   4180               STRH     R1,[R0, #+2]
   \                     ??Program_55:
   \   000002FC   1820               MOVS     R0,#+24
   \   000002FE   7843               MULS     R0,R7,R0
   \   00000300   F021               MOVS     R1,#+240
   \   00000302   6143               MULS     R1,R4,R1
   \   00000304   6918               ADDS     R1,R5,R1
   \   00000306   0918               ADDS     R1,R1,R0
   \   00000308   1831               ADDS     R1,R1,#+24
   \   0000030A   00A8               ADD      R0,SP,#+0
   \   0000030C   801C               ADDS     R0,R0,#+2
   \   0000030E   ........           BL       ProcUpToRight_Action
   \   00000312   C6E6               B        ??Program_11
   \                     ??Program_0:
   \   00000314   ........           DC32     Busy_program
   \   00000318   ........           DC32     last_time
   \   0000031C   ........           DC32     g_counter
   \   00000320   ........           DC32     Trap
   \   00000324   ........           DC32     Trap + 4
   \   00000328   ........           DC32     ??MemCol
   \   0000032C   ........           DC32     ??MemRow
   \   00000330   ........           DC32     MainStage
   \   00000334   ........           DC32     RealPrcLines
   \   00000338   ........           DC32     MainStage + 1770
   \   0000033C   ........           DC32     SceneNrLast
   \   00000340   ........           DC32     Trap + 1
   \   00000344   ........           DC32     Trap + 2
   \   00000348   ........           DC32     Trap + 3
   \                     ??Program_24:
   \   0000034C   6846               MOV      R0,SP
   \   0000034E   0021               MOVS     R1,#+0
   \   00000350   4180               STRH     R1,[R0, #+2]
   \   00000352   002C               CMP      R4,#+0
   \   00000354   09D0               BEQ      ??Program_56
   \   00000356   6846               MOV      R0,SP
   \   00000358   1821               MOVS     R1,#+24
   \   0000035A   7943               MULS     R1,R7,R1
   \   0000035C   F022               MOVS     R2,#+240
   \   0000035E   6243               MULS     R2,R4,R2
   \   00000360   AA18               ADDS     R2,R5,R2
   \   00000362   5118               ADDS     R1,R2,R1
   \   00000364   C639               SUBS     R1,R1,#+198
   \   00000366   0988               LDRH     R1,[R1, #+0]
   \   00000368   4180               STRH     R1,[R0, #+2]
   \                     ??Program_56:
   \   0000036A   1820               MOVS     R0,#+24
   \   0000036C   7843               MULS     R0,R7,R0
   \   0000036E   F021               MOVS     R1,#+240
   \   00000370   6143               MULS     R1,R4,R1
   \   00000372   6918               ADDS     R1,R5,R1
   \   00000374   0918               ADDS     R1,R1,R0
   \   00000376   1831               ADDS     R1,R1,#+24
   \   00000378   00A8               ADD      R0,SP,#+0
   \   0000037A   801C               ADDS     R0,R0,#+2
   \   0000037C   ........           BL       ProcUpToRightDown_Action
   \   00000380   8FE6               B        ??Program_11
   \                     ??Program_25:
   \   00000382   CC4A               LDR      R2,??Program_57  ;; MainStage
   \   00000384   1820               MOVS     R0,#+24
   \   00000386   7843               MULS     R0,R7,R0
   \   00000388   F021               MOVS     R1,#+240
   \   0000038A   6143               MULS     R1,R4,R1
   \   0000038C   6918               ADDS     R1,R5,R1
   \   0000038E   0918               ADDS     R1,R1,R0
   \   00000390   1831               ADDS     R1,R1,#+24
   \   00000392   6846               MOV      R0,SP
   \   00000394   ........           BL       ProcNOT_Action
   \   00000398   83E6               B        ??Program_11
   \                     ??Program_26:
   \   0000039A   002C               CMP      R4,#+0
   \   0000039C   09D0               BEQ      ??Program_58
   \   0000039E   6846               MOV      R0,SP
   \   000003A0   1821               MOVS     R1,#+24
   \   000003A2   7943               MULS     R1,R7,R1
   \   000003A4   F022               MOVS     R2,#+240
   \   000003A6   6243               MULS     R2,R4,R2
   \   000003A8   AA18               ADDS     R2,R5,R2
   \   000003AA   5118               ADDS     R1,R2,R1
   \   000003AC   C639               SUBS     R1,R1,#+198
   \   000003AE   0988               LDRH     R1,[R1, #+0]
   \   000003B0   4180               STRH     R1,[R0, #+2]
   \                     ??Program_58:
   \   000003B2   1820               MOVS     R0,#+24
   \   000003B4   7843               MULS     R0,R7,R0
   \   000003B6   F021               MOVS     R1,#+240
   \   000003B8   6143               MULS     R1,R4,R1
   \   000003BA   6918               ADDS     R1,R5,R1
   \   000003BC   0A18               ADDS     R2,R1,R0
   \   000003BE   1832               ADDS     R2,R2,#+24
   \   000003C0   00A9               ADD      R1,SP,#+0
   \   000003C2   891C               ADDS     R1,R1,#+2
   \   000003C4   6846               MOV      R0,SP
   \   000003C6   ........           BL       ProcToggleRS_Action
   \   000003CA   6AE6               B        ??Program_11
   \                     ??Program_27:
   \   000003CC   1820               MOVS     R0,#+24
   \   000003CE   7843               MULS     R0,R7,R0
   \   000003D0   F021               MOVS     R1,#+240
   \   000003D2   6143               MULS     R1,R4,R1
   \   000003D4   6918               ADDS     R1,R5,R1
   \   000003D6   0918               ADDS     R1,R1,R0
   \   000003D8   1831               ADDS     R1,R1,#+24
   \   000003DA   6846               MOV      R0,SP
   \   000003DC   ........           BL       ProcToggleT_Action
   \   000003E0   5FE6               B        ??Program_11
   \                     ??Program_28:
   \   000003E2   1820               MOVS     R0,#+24
   \   000003E4   7843               MULS     R0,R7,R0
   \   000003E6   F021               MOVS     R1,#+240
   \   000003E8   6143               MULS     R1,R4,R1
   \   000003EA   6918               ADDS     R1,R5,R1
   \   000003EC   0918               ADDS     R1,R1,R0
   \   000003EE   1831               ADDS     R1,R1,#+24
   \   000003F0   6846               MOV      R0,SP
   \   000003F2   ........           BL       ProcTLI1_Action
   \   000003F6   54E6               B        ??Program_11
   \                     ??Program_29:
   \   000003F8   AE4A               LDR      R2,??Program_57  ;; MainStage
   \   000003FA   1820               MOVS     R0,#+24
   \   000003FC   7843               MULS     R0,R7,R0
   \   000003FE   F021               MOVS     R1,#+240
   \   00000400   6143               MULS     R1,R4,R1
   \   00000402   6918               ADDS     R1,R5,R1
   \   00000404   0918               ADDS     R1,R1,R0
   \   00000406   1831               ADDS     R1,R1,#+24
   \   00000408   6846               MOV      R0,SP
   \   0000040A   ........           BL       ProcStI_Action
   \   0000040E   48E6               B        ??Program_11
   \                     ??Program_30:
   \   00000410   A84A               LDR      R2,??Program_57  ;; MainStage
   \   00000412   1820               MOVS     R0,#+24
   \   00000414   7843               MULS     R0,R7,R0
   \   00000416   F021               MOVS     R1,#+240
   \   00000418   6143               MULS     R1,R4,R1
   \   0000041A   6918               ADDS     R1,R5,R1
   \   0000041C   0918               ADDS     R1,R1,R0
   \   0000041E   1831               ADDS     R1,R1,#+24
   \   00000420   6846               MOV      R0,SP
   \   00000422   ........           BL       ProcStNI_Action
   \   00000426   3CE6               B        ??Program_11
   \                     ??Program_31:
   \   00000428   A24A               LDR      R2,??Program_57  ;; MainStage
   \   0000042A   1820               MOVS     R0,#+24
   \   0000042C   7843               MULS     R0,R7,R0
   \   0000042E   F021               MOVS     R1,#+240
   \   00000430   6143               MULS     R1,R4,R1
   \   00000432   6918               ADDS     R1,R5,R1
   \   00000434   0918               ADDS     R1,R1,R0
   \   00000436   1831               ADDS     R1,R1,#+24
   \   00000438   6846               MOV      R0,SP
   \   0000043A   ........           BL       ProcStQ_Action
   \   0000043E   30E6               B        ??Program_11
   \                     ??Program_32:
   \   00000440   9C4A               LDR      R2,??Program_57  ;; MainStage
   \   00000442   1820               MOVS     R0,#+24
   \   00000444   7843               MULS     R0,R7,R0
   \   00000446   F021               MOVS     R1,#+240
   \   00000448   6143               MULS     R1,R4,R1
   \   0000044A   6918               ADDS     R1,R5,R1
   \   0000044C   0918               ADDS     R1,R1,R0
   \   0000044E   1831               ADDS     R1,R1,#+24
   \   00000450   6846               MOV      R0,SP
   \   00000452   ........           BL       ProcStB_Action
   \   00000456   24E6               B        ??Program_11
   \                     ??Program_33:
   \   00000458   964A               LDR      R2,??Program_57  ;; MainStage
   \   0000045A   1820               MOVS     R0,#+24
   \   0000045C   7843               MULS     R0,R7,R0
   \   0000045E   F021               MOVS     R1,#+240
   \   00000460   6143               MULS     R1,R4,R1
   \   00000462   6918               ADDS     R1,R5,R1
   \   00000464   0918               ADDS     R1,R1,R0
   \   00000466   1831               ADDS     R1,R1,#+24
   \   00000468   6846               MOV      R0,SP
   \   0000046A   ........           BL       ProcStS_Action
   \   0000046E   18E6               B        ??Program_11
   \                     ??Program_34:
   \   00000470   904A               LDR      R2,??Program_57  ;; MainStage
   \   00000472   1820               MOVS     R0,#+24
   \   00000474   7843               MULS     R0,R7,R0
   \   00000476   F021               MOVS     R1,#+240
   \   00000478   6143               MULS     R1,R4,R1
   \   0000047A   6918               ADDS     R1,R5,R1
   \   0000047C   0918               ADDS     R1,R1,R0
   \   0000047E   1831               ADDS     R1,R1,#+24
   \   00000480   6846               MOV      R0,SP
   \   00000482   ........           BL       ProcWOUT_Action
   \   00000486   0CE6               B        ??Program_11
   \                     ??Program_35:
   \   00000488   8A4A               LDR      R2,??Program_57  ;; MainStage
   \   0000048A   1820               MOVS     R0,#+24
   \   0000048C   7843               MULS     R0,R7,R0
   \   0000048E   F021               MOVS     R1,#+240
   \   00000490   6143               MULS     R1,R4,R1
   \   00000492   6918               ADDS     R1,R5,R1
   \   00000494   0918               ADDS     R1,R1,R0
   \   00000496   1831               ADDS     R1,R1,#+24
   \   00000498   6846               MOV      R0,SP
   \   0000049A   ........           BL       ProcWOUTS_Action
   \   0000049E   00E6               B        ??Program_11
   \                     ??Program_36:
   \   000004A0   844A               LDR      R2,??Program_57  ;; MainStage
   \   000004A2   1820               MOVS     R0,#+24
   \   000004A4   7843               MULS     R0,R7,R0
   \   000004A6   F021               MOVS     R1,#+240
   \   000004A8   6143               MULS     R1,R4,R1
   \   000004AA   6918               ADDS     R1,R5,R1
   \   000004AC   0918               ADDS     R1,R1,R0
   \   000004AE   1831               ADDS     R1,R1,#+24
   \   000004B0   6846               MOV      R0,SP
   \   000004B2   ........           BL       ProcWOUTR_Action
   \   000004B6   F4E5               B        ??Program_11
   \                     ??Program_37:
   \   000004B8   7E4A               LDR      R2,??Program_57  ;; MainStage
   \   000004BA   1820               MOVS     R0,#+24
   \   000004BC   7843               MULS     R0,R7,R0
   \   000004BE   F021               MOVS     R1,#+240
   \   000004C0   6143               MULS     R1,R4,R1
   \   000004C2   6918               ADDS     R1,R5,R1
   \   000004C4   0918               ADDS     R1,R1,R0
   \   000004C6   1831               ADDS     R1,R1,#+24
   \   000004C8   6846               MOV      R0,SP
   \   000004CA   ........           BL       ProcWOUTC_Action
   \   000004CE   E8E5               B        ??Program_11
   \                     ??Program_38:
   \   000004D0   784A               LDR      R2,??Program_57  ;; MainStage
   \   000004D2   1820               MOVS     R0,#+24
   \   000004D4   7843               MULS     R0,R7,R0
   \   000004D6   F021               MOVS     R1,#+240
   \   000004D8   6143               MULS     R1,R4,R1
   \   000004DA   6918               ADDS     R1,R5,R1
   \   000004DC   0918               ADDS     R1,R1,R0
   \   000004DE   1831               ADDS     R1,R1,#+24
   \   000004E0   6846               MOV      R0,SP
   \   000004E2   ........           BL       ProcSetScn_Action
   \   000004E6   DCE5               B        ??Program_11
   \                     ??Program_39:
   \   000004E8   724A               LDR      R2,??Program_57  ;; MainStage
   \   000004EA   1820               MOVS     R0,#+24
   \   000004EC   7843               MULS     R0,R7,R0
   \   000004EE   F021               MOVS     R1,#+240
   \   000004F0   6143               MULS     R1,R4,R1
   \   000004F2   6918               ADDS     R1,R5,R1
   \   000004F4   0918               ADDS     R1,R1,R0
   \   000004F6   1831               ADDS     R1,R1,#+24
   \   000004F8   6846               MOV      R0,SP
   \   000004FA   ........           BL       ProcInc_Action
   \   000004FE   D0E5               B        ??Program_11
   \                     ??Program_40:
   \   00000500   6C4A               LDR      R2,??Program_57  ;; MainStage
   \   00000502   1820               MOVS     R0,#+24
   \   00000504   7843               MULS     R0,R7,R0
   \   00000506   F021               MOVS     R1,#+240
   \   00000508   6143               MULS     R1,R4,R1
   \   0000050A   6918               ADDS     R1,R5,R1
   \   0000050C   0918               ADDS     R1,R1,R0
   \   0000050E   1831               ADDS     R1,R1,#+24
   \   00000510   6846               MOV      R0,SP
   \   00000512   ........           BL       ProcDec_Action
   \   00000516   C4E5               B        ??Program_11
   \                     ??Program_41:
   \   00000518   1820               MOVS     R0,#+24
   \   0000051A   7843               MULS     R0,R7,R0
   \   0000051C   F021               MOVS     R1,#+240
   \   0000051E   6143               MULS     R1,R4,R1
   \   00000520   6918               ADDS     R1,R5,R1
   \   00000522   0918               ADDS     R1,R1,R0
   \   00000524   1831               ADDS     R1,R1,#+24
   \   00000526   6846               MOV      R0,SP
   \   00000528   ........           BL       ProcSPK_Action
   \   0000052C   B9E5               B        ??Program_11
   \                     ??Program_42:
   \   0000052E   614A               LDR      R2,??Program_57  ;; MainStage
   \   00000530   1820               MOVS     R0,#+24
   \   00000532   7843               MULS     R0,R7,R0
   \   00000534   F021               MOVS     R1,#+240
   \   00000536   6143               MULS     R1,R4,R1
   \   00000538   6918               ADDS     R1,R5,R1
   \   0000053A   0918               ADDS     R1,R1,R0
   \   0000053C   1831               ADDS     R1,R1,#+24
   \   0000053E   6846               MOV      R0,SP
   \   00000540   ........           BL       ProcTimerSet_Action
   \   00000544   ADE5               B        ??Program_11
   \                     ??Program_43:
   \   00000546   1820               MOVS     R0,#+24
   \   00000548   7843               MULS     R0,R7,R0
   \   0000054A   F021               MOVS     R1,#+240
   \   0000054C   6143               MULS     R1,R4,R1
   \   0000054E   6918               ADDS     R1,R5,R1
   \   00000550   0918               ADDS     R1,R1,R0
   \   00000552   1831               ADDS     R1,R1,#+24
   \   00000554   6846               MOV      R0,SP
   \   00000556   ........           BL       ProcClock_Action
   \   0000055A   A2E5               B        ??Program_11
   \                     ??Program_44:
   \   0000055C   1820               MOVS     R0,#+24
   \   0000055E   7843               MULS     R0,R7,R0
   \   00000560   F021               MOVS     R1,#+240
   \   00000562   6143               MULS     R1,R4,R1
   \   00000564   6918               ADDS     R1,R5,R1
   \   00000566   0918               ADDS     R1,R1,R0
   \   00000568   1831               ADDS     R1,R1,#+24
   \   0000056A   6846               MOV      R0,SP
   \   0000056C   ........           BL       ProcDay_Action
   \   00000570   97E5               B        ??Program_11
   \                     ??Program_46:
   \   00000572   5049               LDR      R1,??Program_57  ;; MainStage
   \   00000574   1820               MOVS     R0,#+24
   \   00000576   7843               MULS     R0,R7,R0
   \   00000578   F022               MOVS     R2,#+240
   \   0000057A   6243               MULS     R2,R4,R2
   \   0000057C   AA18               ADDS     R2,R5,R2
   \   0000057E   1018               ADDS     R0,R2,R0
   \   00000580   1830               ADDS     R0,R0,#+24
   \   00000582   ........           BL       ProcGetReg_Action
   \   00000586   8CE5               B        ??Program_11
   \                     ??Program_47:
   \   00000588   4A4A               LDR      R2,??Program_57  ;; MainStage
   \   0000058A   1820               MOVS     R0,#+24
   \   0000058C   7843               MULS     R0,R7,R0
   \   0000058E   F021               MOVS     R1,#+240
   \   00000590   6143               MULS     R1,R4,R1
   \   00000592   6918               ADDS     R1,R5,R1
   \   00000594   0918               ADDS     R1,R1,R0
   \   00000596   1831               ADDS     R1,R1,#+24
   \   00000598   6846               MOV      R0,SP
   \   0000059A   ........           BL       ProcSetAnal_Action
   \   0000059E   80E5               B        ??Program_11
   \                     ??Program_45:
   \   000005A0   1820               MOVS     R0,#+24
   \   000005A2   7843               MULS     R0,R7,R0
   \   000005A4   F021               MOVS     R1,#+240
   \   000005A6   6143               MULS     R1,R4,R1
   \   000005A8   6918               ADDS     R1,R5,R1
   \   000005AA   0818               ADDS     R0,R1,R0
   \   000005AC   1830               ADDS     R0,R0,#+24
   \   000005AE   ........           BL       ProcConstAnal_Action
   \   000005B2   76E5               B        ??Program_11
   \                     ??Program_48:
   \   000005B4   002C               CMP      R4,#+0
   \   000005B6   09D0               BEQ      ??Program_59
   \   000005B8   6846               MOV      R0,SP
   \   000005BA   1821               MOVS     R1,#+24
   \   000005BC   7943               MULS     R1,R7,R1
   \   000005BE   F022               MOVS     R2,#+240
   \   000005C0   6243               MULS     R2,R4,R2
   \   000005C2   AA18               ADDS     R2,R5,R2
   \   000005C4   5118               ADDS     R1,R2,R1
   \   000005C6   C639               SUBS     R1,R1,#+198
   \   000005C8   0988               LDRH     R1,[R1, #+0]
   \   000005CA   4180               STRH     R1,[R0, #+2]
   \                     ??Program_59:
   \   000005CC   1820               MOVS     R0,#+24
   \   000005CE   7843               MULS     R0,R7,R0
   \   000005D0   F021               MOVS     R1,#+240
   \   000005D2   6143               MULS     R1,R4,R1
   \   000005D4   6918               ADDS     R1,R5,R1
   \   000005D6   0A18               ADDS     R2,R1,R0
   \   000005D8   1832               ADDS     R2,R2,#+24
   \   000005DA   00A9               ADD      R1,SP,#+0
   \   000005DC   891C               ADDS     R1,R1,#+2
   \   000005DE   6846               MOV      R0,SP
   \   000005E0   ........           BL       ProcLim_Action
   \   000005E4   5DE5               B        ??Program_11
   \                     ??Program_49:
   \   000005E6   002C               CMP      R4,#+0
   \   000005E8   09D0               BEQ      ??Program_60
   \   000005EA   6846               MOV      R0,SP
   \   000005EC   1821               MOVS     R1,#+24
   \   000005EE   7943               MULS     R1,R7,R1
   \   000005F0   F022               MOVS     R2,#+240
   \   000005F2   6243               MULS     R2,R4,R2
   \   000005F4   AA18               ADDS     R2,R5,R2
   \   000005F6   5118               ADDS     R1,R2,R1
   \   000005F8   C639               SUBS     R1,R1,#+198
   \   000005FA   0988               LDRH     R1,[R1, #+0]
   \   000005FC   4180               STRH     R1,[R0, #+2]
   \                     ??Program_60:
   \   000005FE   1820               MOVS     R0,#+24
   \   00000600   7843               MULS     R0,R7,R0
   \   00000602   F021               MOVS     R1,#+240
   \   00000604   6143               MULS     R1,R4,R1
   \   00000606   6918               ADDS     R1,R5,R1
   \   00000608   0A18               ADDS     R2,R1,R0
   \   0000060A   1832               ADDS     R2,R2,#+24
   \   0000060C   00A9               ADD      R1,SP,#+0
   \   0000060E   891C               ADDS     R1,R1,#+2
   \   00000610   6846               MOV      R0,SP
   \   00000612   ........           BL       ProcEven_Action
   \   00000616   44E5               B        ??Program_11
   \                     ??Program_50:
   \   00000618   002C               CMP      R4,#+0
   \   0000061A   09D0               BEQ      ??Program_61
   \   0000061C   6846               MOV      R0,SP
   \   0000061E   1821               MOVS     R1,#+24
   \   00000620   7943               MULS     R1,R7,R1
   \   00000622   F022               MOVS     R2,#+240
   \   00000624   6243               MULS     R2,R4,R2
   \   00000626   AA18               ADDS     R2,R5,R2
   \   00000628   5118               ADDS     R1,R2,R1
   \   0000062A   C639               SUBS     R1,R1,#+198
   \   0000062C   0988               LDRH     R1,[R1, #+0]
   \   0000062E   4180               STRH     R1,[R0, #+2]
   \                     ??Program_61:
   \   00000630   1820               MOVS     R0,#+24
   \   00000632   7843               MULS     R0,R7,R0
   \   00000634   F021               MOVS     R1,#+240
   \   00000636   6143               MULS     R1,R4,R1
   \   00000638   6918               ADDS     R1,R5,R1
   \   0000063A   0A18               ADDS     R2,R1,R0
   \   0000063C   1832               ADDS     R2,R2,#+24
   \   0000063E   00A9               ADD      R1,SP,#+0
   \   00000640   891C               ADDS     R1,R1,#+2
   \   00000642   6846               MOV      R0,SP
   \   00000644   ........           BL       ProcPlus_Action
   \   00000648   2BE5               B        ??Program_11
   \                     ??Program_51:
   \   0000064A   002C               CMP      R4,#+0
   \   0000064C   09D0               BEQ      ??Program_62
   \   0000064E   6846               MOV      R0,SP
   \   00000650   1821               MOVS     R1,#+24
   \   00000652   7943               MULS     R1,R7,R1
   \   00000654   F022               MOVS     R2,#+240
   \   00000656   6243               MULS     R2,R4,R2
   \   00000658   AA18               ADDS     R2,R5,R2
   \   0000065A   5118               ADDS     R1,R2,R1
   \   0000065C   C639               SUBS     R1,R1,#+198
   \   0000065E   0988               LDRH     R1,[R1, #+0]
   \   00000660   4180               STRH     R1,[R0, #+2]
   \                     ??Program_62:
   \   00000662   1820               MOVS     R0,#+24
   \   00000664   7843               MULS     R0,R7,R0
   \   00000666   F021               MOVS     R1,#+240
   \   00000668   6143               MULS     R1,R4,R1
   \   0000066A   6918               ADDS     R1,R5,R1
   \   0000066C   0A18               ADDS     R2,R1,R0
   \   0000066E   1832               ADDS     R2,R2,#+24
   \   00000670   00A9               ADD      R1,SP,#+0
   \   00000672   891C               ADDS     R1,R1,#+2
   \   00000674   6846               MOV      R0,SP
   \   00000676   ........           BL       ProcMinus_Action
   \   0000067A   12E5               B        ??Program_11
   \                     ??Program_52:
   \   0000067C   002C               CMP      R4,#+0
   \   0000067E   09D0               BEQ      ??Program_63
   \   00000680   6846               MOV      R0,SP
   \   00000682   1821               MOVS     R1,#+24
   \   00000684   7943               MULS     R1,R7,R1
   \   00000686   F022               MOVS     R2,#+240
   \   00000688   6243               MULS     R2,R4,R2
   \   0000068A   AA18               ADDS     R2,R5,R2
   \   0000068C   5118               ADDS     R1,R2,R1
   \   0000068E   C639               SUBS     R1,R1,#+198
   \   00000690   0988               LDRH     R1,[R1, #+0]
   \   00000692   4180               STRH     R1,[R0, #+2]
   \                     ??Program_63:
   \   00000694   1820               MOVS     R0,#+24
   \   00000696   7843               MULS     R0,R7,R0
   \   00000698   F021               MOVS     R1,#+240
   \   0000069A   6143               MULS     R1,R4,R1
   \   0000069C   6918               ADDS     R1,R5,R1
   \   0000069E   0A18               ADDS     R2,R1,R0
   \   000006A0   1832               ADDS     R2,R2,#+24
   \   000006A2   00A9               ADD      R1,SP,#+0
   \   000006A4   891C               ADDS     R1,R1,#+2
   \   000006A6   6846               MOV      R0,SP
   \   000006A8   ........           BL       ProcMul_Action
   \   000006AC   F9E4               B        ??Program_11
   1208                   
   1209                   
   1210                  }
   1211                  
   1212                  
   1213                }
   1214              }
   1215            
   1216            
   1217            
   1218            //zerowanie wyjœæ  z flagami impulsu      
   1219                 for (char iNrQ=0; iNrQ<NumberNeurons; iNrQ++)
   \                     ??Program_7:
   \   000006AE   0020               MOVS     R0,#+0
   \   000006B0   3FE0               B        ??Program_64
   \   000006B2   C046               Nop      
   \                     ??Program_57:
   \   000006B4   ........           DC32     MainStage
   1220                 {
   1221                    if ((MainStage.StageQImpulse[iNrQ]) && (MainStage.SendStageChange[iNrQ]==0))
   \                     ??Program_65:
   \   000006B8   3649               LDR      R1,??Program_66  ;; 0x6a4
   \   000006BA   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006BC   000E               LSRS     R0,R0,#+24
   \   000006BE   0222               MOVS     R2,#+2
   \   000006C0   4243               MULS     R2,R0,R2
   \   000006C2   354B               LDR      R3,??Program_66+0x4  ;; MainStage
   \   000006C4   9A18               ADDS     R2,R3,R2
   \   000006C6   515A               LDRH     R1,[R2, R1]
   \   000006C8   0029               CMP      R1,#+0
   \   000006CA   31D0               BEQ      ??Program_67
   \   000006CC   3349               LDR      R1,??Program_66+0x8  ;; 0x6eb
   \   000006CE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006D0   000E               LSRS     R0,R0,#+24
   \   000006D2   314A               LDR      R2,??Program_66+0x4  ;; MainStage
   \   000006D4   1218               ADDS     R2,R2,R0
   \   000006D6   515C               LDRB     R1,[R2, R1]
   \   000006D8   0029               CMP      R1,#+0
   \   000006DA   29D1               BNE      ??Program_67
   1222                    {
   1223                      MainStage.StageQ[iNrQ].Port &=~(MainStage.StageQImpulse[iNrQ]); 
   \   000006DC   3049               LDR      R1,??Program_66+0xC  ;; 0x3a2
   \   000006DE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006E0   000E               LSRS     R0,R0,#+24
   \   000006E2   1622               MOVS     R2,#+22
   \   000006E4   4243               MULS     R2,R0,R2
   \   000006E6   2C4B               LDR      R3,??Program_66+0x4  ;; MainStage
   \   000006E8   9A18               ADDS     R2,R3,R2
   \   000006EA   2D4B               LDR      R3,??Program_66+0xC  ;; 0x3a2
   \   000006EC   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006EE   000E               LSRS     R0,R0,#+24
   \   000006F0   1624               MOVS     R4,#+22
   \   000006F2   4443               MULS     R4,R0,R4
   \   000006F4   284D               LDR      R5,??Program_66+0x4  ;; MainStage
   \   000006F6   2C19               ADDS     R4,R5,R4
   \   000006F8   E35A               LDRH     R3,[R4, R3]
   \   000006FA   264C               LDR      R4,??Program_66  ;; 0x6a4
   \   000006FC   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000006FE   000E               LSRS     R0,R0,#+24
   \   00000700   0225               MOVS     R5,#+2
   \   00000702   4543               MULS     R5,R0,R5
   \   00000704   244E               LDR      R6,??Program_66+0x4  ;; MainStage
   \   00000706   7519               ADDS     R5,R6,R5
   \   00000708   2C5B               LDRH     R4,[R5, R4]
   \   0000070A   A343               BICS     R3,R3,R4
   \   0000070C   5352               STRH     R3,[R2, R1]
   1224                      MainStage.StageQImpulse[iNrQ]=0;
   \   0000070E   2149               LDR      R1,??Program_66  ;; 0x6a4
   \   00000710   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000712   000E               LSRS     R0,R0,#+24
   \   00000714   0222               MOVS     R2,#+2
   \   00000716   4243               MULS     R2,R0,R2
   \   00000718   1F4B               LDR      R3,??Program_66+0x4  ;; MainStage
   \   0000071A   9A18               ADDS     R2,R3,R2
   \   0000071C   0023               MOVS     R3,#+0
   \   0000071E   5352               STRH     R3,[R2, R1]
   1225                      MainStage.SendStageChange[iNrQ]=ChangeStageFlag;
   \   00000720   1E49               LDR      R1,??Program_66+0x8  ;; 0x6eb
   \   00000722   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000724   000E               LSRS     R0,R0,#+24
   \   00000726   1C4A               LDR      R2,??Program_66+0x4  ;; MainStage
   \   00000728   1218               ADDS     R2,R2,R0
   \   0000072A   1E4B               LDR      R3,??Program_66+0x10  ;; ChangeStageFlag
   \   0000072C   1B78               LDRB     R3,[R3, #+0]
   \   0000072E   5354               STRB     R3,[R2, R1]
   1226                    } 
   1227                 }
   \                     ??Program_67:
   \   00000730   401C               ADDS     R0,R0,#+1
   \                     ??Program_64:
   \   00000732   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000734   000E               LSRS     R0,R0,#+24
   \   00000736   2328               CMP      R0,#+35
   \   00000738   BED3               BCC      ??Program_65
   1228            
   1229            //zerowanie zmiennych  z flagami impulsu  
   1230            for (char i=0; i<sizeof(VariablesImpulse); i++)
   \   0000073A   0020               MOVS     R0,#+0
   \   0000073C   18E0               B        ??Program_68
   1231            {
   1232              if (VariablesImpulse[i]>0)
   \                     ??Program_69:
   \   0000073E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000740   000E               LSRS     R0,R0,#+24
   \   00000742   1949               LDR      R1,??Program_66+0x14  ;; VariablesImpulse
   \   00000744   095C               LDRB     R1,[R1, R0]
   \   00000746   0129               CMP      R1,#+1
   \   00000748   11D3               BCC      ??Program_70
   1233              {
   1234                Variables[i]&=~(VariablesImpulse[i]);
   \   0000074A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000074C   000E               LSRS     R0,R0,#+24
   \   0000074E   1749               LDR      R1,??Program_66+0x18  ;; Variables
   \   00000750   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000752   000E               LSRS     R0,R0,#+24
   \   00000754   154A               LDR      R2,??Program_66+0x18  ;; Variables
   \   00000756   125C               LDRB     R2,[R2, R0]
   \   00000758   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000075A   000E               LSRS     R0,R0,#+24
   \   0000075C   124B               LDR      R3,??Program_66+0x14  ;; VariablesImpulse
   \   0000075E   1B5C               LDRB     R3,[R3, R0]
   \   00000760   9A43               BICS     R2,R2,R3
   \   00000762   0A54               STRB     R2,[R1, R0]
   1235                VariablesImpulse[i]=0;
   \   00000764   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000766   000E               LSRS     R0,R0,#+24
   \   00000768   0F49               LDR      R1,??Program_66+0x14  ;; VariablesImpulse
   \   0000076A   0022               MOVS     R2,#+0
   \   0000076C   0A54               STRB     R2,[R1, R0]
   1236              }
   1237            }
   \                     ??Program_70:
   \   0000076E   401C               ADDS     R0,R0,#+1
   \                     ??Program_68:
   \   00000770   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000772   000E               LSRS     R0,R0,#+24
   \   00000774   0D28               CMP      R0,#+13
   \   00000776   E2D3               BCC      ??Program_69
   1238            
   1239            
   1240            
   1241            Busy_program=0;
   \   00000778   0D48               LDR      R0,??Program_66+0x1C  ;; Busy_program
   \   0000077A   0021               MOVS     R1,#+0
   \   0000077C   0170               STRB     R1,[R0, #+0]
   1242            
   1243              }
   1244             
   1245              
   1246              PtogTime=g_counter-last_time;
   \                     ??Program_1:
   \   0000077E   0D48               LDR      R0,??Program_66+0x20  ;; PtogTime
   \   00000780   0D49               LDR      R1,??Program_66+0x24  ;; g_counter
   \   00000782   0968               LDR      R1,[R1, #+0]
   \   00000784   0D4A               LDR      R2,??Program_66+0x28  ;; last_time
   \   00000786   1268               LDR      R2,[R2, #+0]
   \   00000788   891A               SUBS     R1,R1,R2
   \   0000078A   0160               STR      R1,[R0, #+0]
   1247          
   1248          }//_______________________ Koniec funkcji program__ ____________________________
   \   0000078C   01B0               ADD      SP,SP,#+4
   \   0000078E   F0BC               POP      {R4-R7}
   \   00000790   01BC               POP      {R0}
   \   00000792   0047               BX       R0               ;; return
   \                     ??Program_66:
   \   00000794   A4060000           DC32     0x6a4
   \   00000798   ........           DC32     MainStage
   \   0000079C   EB060000           DC32     0x6eb
   \   000007A0   A2030000           DC32     0x3a2
   \   000007A4   ........           DC32     ChangeStageFlag
   \   000007A8   ........           DC32     VariablesImpulse
   \   000007AC   ........           DC32     Variables
   \   000007B0   ........           DC32     Busy_program
   \   000007B4   ........           DC32     PtogTime
   \   000007B8   ........           DC32     g_counter
   \   000007BC   ........           DC32     last_time

   \                                 In section .bss, align 4
   \                     ??MemCol:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     ??MemRow:
   \   00000000                      DS8 4
   1249          
   1250          
   1251          
   1252          //-----------------------------------------------------------------------------
   1253          // Nazwa funkcji :    SceneNrCount
   1254          // Funkcja zlicza u¿ywane w programie u¿ytkowym sceny. Odpowiedzi¹ jest iloœæ scen
   1255          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1256          char SceneNrCount(_ProgramTab *ProgTab)
   1257          {
   \                     SceneNrCount:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0100               MOVS     R1,R0
   1258                char MaxScnNr=0;
   \   00000004   0020               MOVS     R0,#+0
   1259                for (int LineNr=0; LineNr<MaxPrcLines; LineNr++)
   \   00000006   0022               MOVS     R2,#+0
   \   00000008   24E0               B        ??SceneNrCount_0
   1260                {
   1261                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
   1262                  {
   1263                     if ((ProgTab->Line[LineNr].Proc[PrcInLine].Type==ProcStS) && (ProgTab->Line[LineNr].Proc[PrcInLine].Nr>MaxScnNr))
   \                     ??SceneNrCount_1:
   \   0000000A   1824               MOVS     R4,#+24
   \   0000000C   5C43               MULS     R4,R3,R4
   \   0000000E   F025               MOVS     R5,#+240
   \   00000010   5543               MULS     R5,R2,R5
   \   00000012   4D19               ADDS     R5,R1,R5
   \   00000014   2C19               ADDS     R4,R5,R4
   \   00000016   247E               LDRB     R4,[R4, #+24]
   \   00000018   182C               CMP      R4,#+24
   \   0000001A   17D1               BNE      ??SceneNrCount_2
   \   0000001C   0500               MOVS     R5,R0
   \   0000001E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000020   2D0E               LSRS     R5,R5,#+24
   \   00000022   1926               MOVS     R6,#+25
   \   00000024   1824               MOVS     R4,#+24
   \   00000026   5C43               MULS     R4,R3,R4
   \   00000028   F027               MOVS     R7,#+240
   \   0000002A   5743               MULS     R7,R2,R7
   \   0000002C   CF19               ADDS     R7,R1,R7
   \   0000002E   3C19               ADDS     R4,R7,R4
   \   00000030   A457               LDRSB    R4,[R4, R6]
   \   00000032   2D04               LSLS     R5,R5,#+16       ;; SignExtS R5,R5,#+16,#+16
   \   00000034   2D14               ASRS     R5,R5,#+16
   \   00000036   2404               LSLS     R4,R4,#+16       ;; SignExtS R4,R4,#+16,#+16
   \   00000038   2414               ASRS     R4,R4,#+16
   \   0000003A   A542               CMP      R5,R4
   \   0000003C   06DA               BGE      ??SceneNrCount_2
   1264                     {
   1265                       MaxScnNr=ProgTab->Line[LineNr].Proc[PrcInLine].Nr;
   \   0000003E   1820               MOVS     R0,#+24
   \   00000040   5843               MULS     R0,R3,R0
   \   00000042   F024               MOVS     R4,#+240
   \   00000044   5443               MULS     R4,R2,R4
   \   00000046   0C19               ADDS     R4,R1,R4
   \   00000048   2018               ADDS     R0,R4,R0
   \   0000004A   407E               LDRB     R0,[R0, #+25]
   1266                     }
   1267                  }
   \                     ??SceneNrCount_2:
   \   0000004C   5B1C               ADDS     R3,R3,#+1
   \                     ??SceneNrCount_3:
   \   0000004E   0A2B               CMP      R3,#+10
   \   00000050   DBDB               BLT      ??SceneNrCount_1
   \   00000052   521C               ADDS     R2,R2,#+1
   \                     ??SceneNrCount_0:
   \   00000054   C82A               CMP      R2,#+200
   \   00000056   01DA               BGE      ??SceneNrCount_4
   \   00000058   0023               MOVS     R3,#+0
   \   0000005A   F8E7               B        ??SceneNrCount_3
   1268                  
   1269                }
   1270            
   1271                return MaxScnNr;
   \                     ??SceneNrCount_4:
   \   0000005C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000005E   000E               LSRS     R0,R0,#+24
   \   00000060   01B0               ADD      SP,SP,#+4
   \   00000062   F0BC               POP      {R4-R7}
   \   00000064   02BC               POP      {R1}
   \   00000066   0847               BX       R1               ;; return
   1272          }//_______________________ Koniec funkcji_______________________________________
   1273          
   1274          
   1275          
   1276          
   1277             
   1278          //-----------------------------------------------------------------------------
   1279          // Nazwa funkcji :    ScreenNrCount
   1280          // Funkcja zlicza u¿ywane ekrany. Odpowiedzi¹ jest suma logiczna u¿ywanych ekranów
   1281          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1282          short CheckScreenUse(_ProgramTab *ProgTab)
   1283          {
   \                     CheckScreenUse:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0200               MOVS     R2,R0
   1284            
   1285                short ScreenUse=1; 
   \   00000004   0121               MOVS     R1,#+1
   1286               
   1287                char f=1;  
   \   00000006   0125               MOVS     R5,#+1
   1288            
   1289                char sc=0;
   \   00000008   0023               MOVS     R3,#+0
   \   0000000A   34E0               B        ??CheckScreenUse_0
   1290                _ScreenPaternDesign *ScreenPaternDesign; 
   1291                while ((f)&&(sc<ScreenNr))
   1292                {
   1293                  f=0;
   1294                  
   1295                       if (sc==0) 
   1296                      {
   1297                        ScreenPaternDesign=ScreenSetTab_0;
   1298                      }else{
   1299                        ScreenPaternDesign=ScreenSetTab_1; 
   1300                      }  
   1301          
   1302                  for (int bt=0; bt<ScrenButtonNr; bt++)
   1303                  {
   1304                    if ((ScreenPaternDesign[ProgTab->Screen[sc].PaternDesign].Button[bt].Width>0) && (ProgTab->Screen[sc].Button[bt].OpenPage>0) )
   \                     ??CheckScreenUse_1:
   \   0000000C   0420               MOVS     R0,#+4
   \   0000000E   6043               MULS     R0,R4,R0
   \   00000010   264E               LDR      R6,??CheckScreenUse_2  ;; 0xbb98
   \   00000012   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000014   1B0E               LSRS     R3,R3,#+24
   \   00000016   A027               MOVS     R7,#+160
   \   00000018   5F43               MULS     R7,R3,R7
   \   0000001A   D719               ADDS     R7,R2,R7
   \   0000001C   BE5D               LDRB     R6,[R7, R6]
   \   0000001E   5827               MOVS     R7,#+88
   \   00000020   7E43               MULS     R6,R7,R6
   \   00000022   009F               LDR      R7,[SP, #+0]
   \   00000024   BE19               ADDS     R6,R7,R6
   \   00000026   3018               ADDS     R0,R6,R0
   \   00000028   8078               LDRB     R0,[R0, #+2]
   \   0000002A   0128               CMP      R0,#+1
   \   0000002C   1FD3               BCC      ??CheckScreenUse_3
   \   0000002E   204E               LDR      R6,??CheckScreenUse_2+0x4  ;; 0xbbaa
   \   00000030   0820               MOVS     R0,#+8
   \   00000032   6043               MULS     R0,R4,R0
   \   00000034   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000036   1B0E               LSRS     R3,R3,#+24
   \   00000038   A027               MOVS     R7,#+160
   \   0000003A   5F43               MULS     R7,R3,R7
   \   0000003C   D719               ADDS     R7,R2,R7
   \   0000003E   3818               ADDS     R0,R7,R0
   \   00000040   805D               LDRB     R0,[R0, R6]
   \   00000042   0007               LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000044   000F               LSRS     R0,R0,#+28
   \   00000046   0128               CMP      R0,#+1
   \   00000048   11D3               BCC      ??CheckScreenUse_3
   1305                    {
   1306                      ScreenUse |=1<<(ProgTab->Screen[sc].Button[bt].OpenPage-1);
   \   0000004A   0120               MOVS     R0,#+1
   \   0000004C   184E               LDR      R6,??CheckScreenUse_2+0x4  ;; 0xbbaa
   \   0000004E   0825               MOVS     R5,#+8
   \   00000050   6543               MULS     R5,R4,R5
   \   00000052   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000054   1B0E               LSRS     R3,R3,#+24
   \   00000056   A027               MOVS     R7,#+160
   \   00000058   5F43               MULS     R7,R3,R7
   \   0000005A   D719               ADDS     R7,R2,R7
   \   0000005C   7D19               ADDS     R5,R7,R5
   \   0000005E   AD5D               LDRB     R5,[R5, R6]
   \   00000060   2D07               LSLS     R5,R5,#+28       ;; ZeroExtS R5,R5,#+28,#+28
   \   00000062   2D0F               LSRS     R5,R5,#+28
   \   00000064   6D1E               SUBS     R5,R5,#+1
   \   00000066   A840               LSLS     R0,R0,R5
   \   00000068   0843               ORRS     R0,R0,R1
   \   0000006A   0100               MOVS     R1,R0
   1307                      f=1;
   \   0000006C   0125               MOVS     R5,#+1
   1308                    }
   1309                  }
   \                     ??CheckScreenUse_3:
   \   0000006E   641C               ADDS     R4,R4,#+1
   \                     ??CheckScreenUse_4:
   \   00000070   092C               CMP      R4,#+9
   \   00000072   CBDB               BLT      ??CheckScreenUse_1
   1310                  sc++;
   \   00000074   5B1C               ADDS     R3,R3,#+1
   \                     ??CheckScreenUse_0:
   \   00000076   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000078   2D0E               LSRS     R5,R5,#+24
   \   0000007A   002D               CMP      R5,#+0
   \   0000007C   0FD0               BEQ      ??CheckScreenUse_5
   \   0000007E   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000080   1B0E               LSRS     R3,R3,#+24
   \   00000082   082B               CMP      R3,#+8
   \   00000084   0BD2               BCS      ??CheckScreenUse_5
   \   00000086   0025               MOVS     R5,#+0
   \   00000088   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   0000008A   1B0E               LSRS     R3,R3,#+24
   \   0000008C   002B               CMP      R3,#+0
   \   0000008E   02D1               BNE      ??CheckScreenUse_6
   \   00000090   0848               LDR      R0,??CheckScreenUse_2+0x8  ;; ScreenSetTab_0
   \   00000092   0090               STR      R0,[SP, #+0]
   \   00000094   01E0               B        ??CheckScreenUse_7
   \                     ??CheckScreenUse_6:
   \   00000096   0848               LDR      R0,??CheckScreenUse_2+0xC  ;; ScreenSetTab_1
   \   00000098   0090               STR      R0,[SP, #+0]
   \                     ??CheckScreenUse_7:
   \   0000009A   0024               MOVS     R4,#+0
   \   0000009C   E8E7               B        ??CheckScreenUse_4
   1311                  
   1312                }
   1313                
   1314           
   1315            
   1316                return ScreenUse;
   \                     ??CheckScreenUse_5:
   \   0000009E   0800               MOVS     R0,R1
   \   000000A0   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   000000A2   0014               ASRS     R0,R0,#+16
   \   000000A4   01B0               ADD      SP,SP,#+4
   \   000000A6   F0BC               POP      {R4-R7}
   \   000000A8   02BC               POP      {R1}
   \   000000AA   0847               BX       R1               ;; return
   \                     ??CheckScreenUse_2:
   \   000000AC   98BB0000           DC32     0xbb98
   \   000000B0   AABB0000           DC32     0xbbaa
   \   000000B4   ........           DC32     ScreenSetTab_0
   \   000000B8   ........           DC32     ScreenSetTab_1
   1317            
   1318          }//_______________________ Koniec funkcji_______________________________________
   1319          
   1320          
   1321               
   1322               
   1323               

   \                                 In section Debug.txt, align 4, keep-with-next
   1324          void CountLines(_ProgramTab *ProgTab)
   1325          {
   \                     CountLines:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   1326               char UseLine=0;
   \   00000002   0021               MOVS     R1,#+0
   1327                  for (char j=0; j<MaxPrcLines; j++)
   \   00000004   0022               MOVS     R2,#+0
   \   00000006   13E0               B        ??CountLines_0
   1328                    for (char i=0; i<MaxPrcInLine; i++) 
   1329                      if (ProgTab->Line[j].Proc[i].Type>0) UseLine=j;
   \                     ??CountLines_1:
   \   00000008   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   0000000A   1B0E               LSRS     R3,R3,#+24
   \   0000000C   1824               MOVS     R4,#+24
   \   0000000E   5C43               MULS     R4,R3,R4
   \   00000010   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000012   120E               LSRS     R2,R2,#+24
   \   00000014   F025               MOVS     R5,#+240
   \   00000016   5543               MULS     R5,R2,R5
   \   00000018   4519               ADDS     R5,R0,R5
   \   0000001A   2C19               ADDS     R4,R5,R4
   \   0000001C   247E               LDRB     R4,[R4, #+24]
   \   0000001E   012C               CMP      R4,#+1
   \   00000020   00D3               BCC      ??CountLines_2
   \   00000022   1100               MOVS     R1,R2
   \                     ??CountLines_2:
   \   00000024   5B1C               ADDS     R3,R3,#+1
   \                     ??CountLines_3:
   \   00000026   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000028   1B0E               LSRS     R3,R3,#+24
   \   0000002A   0A2B               CMP      R3,#+10
   \   0000002C   ECD3               BCC      ??CountLines_1
   \   0000002E   521C               ADDS     R2,R2,#+1
   \                     ??CountLines_0:
   \   00000030   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000032   120E               LSRS     R2,R2,#+24
   \   00000034   C82A               CMP      R2,#+200
   \   00000036   01D2               BCS      ??CountLines_4
   \   00000038   0023               MOVS     R3,#+0
   \   0000003A   F4E7               B        ??CountLines_3
   1330              RealPrcLines=UseLine+1; 
   \                     ??CountLines_4:
   \   0000003C   0348               LDR      R0,??CountLines_5  ;; RealPrcLines
   \   0000003E   491C               ADDS     R1,R1,#+1
   \   00000040   0170               STRB     R1,[R0, #+0]
   1331          }
   \   00000042   01B0               ADD      SP,SP,#+4
   \   00000044   30BC               POP      {R4,R5}
   \   00000046   01BC               POP      {R0}
   \   00000048   0047               BX       R0               ;; return
   \   0000004A   C046               Nop      
   \                     ??CountLines_5:
   \   0000004C   ........           DC32     RealPrcLines
   1332          
   1333          
   1334          

   \                                 In section Debug.txt, align 4, keep-with-next
   1335          void RefreshNeuronsList(_ProgramTab *ProgTab)
   1336          {
   \                     RefreshNeuronsList:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
   1337            for (char i=0; i<NumberNeurons; i++)
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   0FE0               B        ??RefreshNeuronsList_0
   1338            {
   1339             if (ProgTab->NeuronsIdTab[i]>0)
   1340             {
   1341                 NeuronsList[i].NeuronType=(_NeuronType)((ProgTab->NeuronsIdTab[i])/1000000);
   1342                 NeuronsList[i].NeuronID=(ProgTab->NeuronsIdTab[i])-(NeuronsList[i].NeuronType*1000000);
   1343             }else{
   1344                 NeuronsList[i].NeuronType=(_NeuronType)0;
   \                     ??RefreshNeuronsList_1:
   \   00000008   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000000A   2D0E               LSRS     R5,R5,#+24
   \   0000000C   0C20               MOVS     R0,#+12
   \   0000000E   6843               MULS     R0,R5,R0
   \   00000010   2249               LDR      R1,??RefreshNeuronsList_2  ;; NeuronsList
   \   00000012   0022               MOVS     R2,#+0
   \   00000014   0A54               STRB     R2,[R1, R0]
   1345                 NeuronsList[i].NeuronID=0;
   \   00000016   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000018   2D0E               LSRS     R5,R5,#+24
   \   0000001A   0C20               MOVS     R0,#+12
   \   0000001C   6843               MULS     R0,R5,R0
   \   0000001E   1F49               LDR      R1,??RefreshNeuronsList_2  ;; NeuronsList
   \   00000020   0818               ADDS     R0,R1,R0
   \   00000022   0021               MOVS     R1,#+0
   \   00000024   4160               STR      R1,[R0, #+4]
   1346             }
   \                     ??RefreshNeuronsList_3:
   \   00000026   6D1C               ADDS     R5,R5,#+1
   \                     ??RefreshNeuronsList_0:
   \   00000028   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000002A   2D0E               LSRS     R5,R5,#+24
   \   0000002C   232D               CMP      R5,#+35
   \   0000002E   30D2               BCS      ??RefreshNeuronsList_4
   \   00000030   1B48               LDR      R0,??RefreshNeuronsList_2+0x4  ;; 0xc098
   \   00000032   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000034   2D0E               LSRS     R5,R5,#+24
   \   00000036   0421               MOVS     R1,#+4
   \   00000038   6943               MULS     R1,R5,R1
   \   0000003A   6118               ADDS     R1,R4,R1
   \   0000003C   0858               LDR      R0,[R1, R0]
   \   0000003E   0128               CMP      R0,#+1
   \   00000040   E2DB               BLT      ??RefreshNeuronsList_1
   \   00000042   1748               LDR      R0,??RefreshNeuronsList_2+0x4  ;; 0xc098
   \   00000044   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000046   2D0E               LSRS     R5,R5,#+24
   \   00000048   0421               MOVS     R1,#+4
   \   0000004A   6943               MULS     R1,R5,R1
   \   0000004C   6118               ADDS     R1,R4,R1
   \   0000004E   0858               LDR      R0,[R1, R0]
   \   00000050   1449               LDR      R1,??RefreshNeuronsList_2+0x8  ;; 0xf4240
   \   00000052   ........           BL       __aeabi_idivmod
   \   00000056   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000058   2D0E               LSRS     R5,R5,#+24
   \   0000005A   0C21               MOVS     R1,#+12
   \   0000005C   6943               MULS     R1,R5,R1
   \   0000005E   0F4A               LDR      R2,??RefreshNeuronsList_2  ;; NeuronsList
   \   00000060   5054               STRB     R0,[R2, R1]
   \   00000062   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000064   2D0E               LSRS     R5,R5,#+24
   \   00000066   0C20               MOVS     R0,#+12
   \   00000068   6843               MULS     R0,R5,R0
   \   0000006A   0C49               LDR      R1,??RefreshNeuronsList_2  ;; NeuronsList
   \   0000006C   0818               ADDS     R0,R1,R0
   \   0000006E   0C49               LDR      R1,??RefreshNeuronsList_2+0x4  ;; 0xc098
   \   00000070   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000072   2D0E               LSRS     R5,R5,#+24
   \   00000074   0422               MOVS     R2,#+4
   \   00000076   6A43               MULS     R2,R5,R2
   \   00000078   A218               ADDS     R2,R4,R2
   \   0000007A   5158               LDR      R1,[R2, R1]
   \   0000007C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000007E   2D0E               LSRS     R5,R5,#+24
   \   00000080   0C22               MOVS     R2,#+12
   \   00000082   6A43               MULS     R2,R5,R2
   \   00000084   054B               LDR      R3,??RefreshNeuronsList_2  ;; NeuronsList
   \   00000086   9A5C               LDRB     R2,[R3, R2]
   \   00000088   064B               LDR      R3,??RefreshNeuronsList_2+0x8  ;; 0xf4240
   \   0000008A   5A43               MULS     R2,R3,R2
   \   0000008C   891A               SUBS     R1,R1,R2
   \   0000008E   4160               STR      R1,[R0, #+4]
   \   00000090   C9E7               B        ??RefreshNeuronsList_3
   1347            }
   1348          }
   \                     ??RefreshNeuronsList_4:
   \   00000092   01B0               ADD      SP,SP,#+4
   \   00000094   30BC               POP      {R4,R5}
   \   00000096   01BC               POP      {R0}
   \   00000098   0047               BX       R0               ;; return
   \   0000009A   C046               Nop      
   \                     ??RefreshNeuronsList_2:
   \   0000009C   ........           DC32     NeuronsList
   \   000000A0   98C00000           DC32     0xc098
   \   000000A4   40420F00           DC32     0xf4240
   1349          
   1350          
   1351          
   1352          //-----------------------------------------------------------------------------
   1353          // Nazwa funkcji :    AddRsTask
   1354          // Funkcja ustawia dodanie zadania dla transmisji Rs
   1355          // Ord - typ rozkazu : odczyt wejœæ, zapis
   1356          // Node - nr wêz³a/urz¹dzenia
   1357          // Reg  - nr rejestru w wêŸle 
   1358          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1359          void AddRsTask(_OrderType Ord, char Node, char Reg)
   1360          { 
   \                     AddRsTask:
   \   00000000   F4B5               PUSH     {R2,R4-R7,LR}
   1361               ptr_ZD_MODBUS ZD_MODBUS;
   1362               ZD_MODBUS         =   ZD_MODBUS_0;
   \   00000002   4C4A               LDR      R2,??AddRsTask_0  ;; ZD_MODBUS_0
   1363               
   1364              char OrdExist=0;
   \   00000004   0023               MOVS     R3,#+0
   1365              char RfOrd=0;
   \   00000006   0024               MOVS     R4,#+0
   1366              char FreePlace=0;
   \   00000008   0025               MOVS     R5,#+0
   1367              
   1368              
   1369              //przepisanie rozkazu na zrozumia³y dla tablicy zadañ Rs
   1370              if (Ord==SI) RfOrd=0x4; 
   \   0000000A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000000C   000E               LSRS     R0,R0,#+24
   \   0000000E   0128               CMP      R0,#+1
   \   00000010   00D1               BNE      ??AddRsTask_1
   \   00000012   0424               MOVS     R4,#+4
   1371              if (Ord==SQ) RfOrd=0xF; 
   \                     ??AddRsTask_1:
   \   00000014   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0228               CMP      R0,#+2
   \   0000001A   00D1               BNE      ??AddRsTask_2
   \   0000001C   0F24               MOVS     R4,#+15
   1372          
   1373                
   1374          
   1375                    
   1376              //Sprawdzenie czy taki rozkaz nie istnieje w tablicy
   1377              char i=0;
   \                     ??AddRsTask_2:
   \   0000001E   0020               MOVS     R0,#+0
   \   00000020   35E0               B        ??AddRsTask_3
   1378              while ((i<ZD_MODBUS_Tab_Max) && (OrdExist==0))
   1379              {
   1380                 if ((ZD_MODBUS[i].Adress==Node) && 
   1381                     (ZD_MODBUS[i].Function==RfOrd) &&
   1382                     (ZD_MODBUS[i].Target==Reg) &&
   1383                     (ZD_MODBUS[i].StartAdr==Node-0))
   \                     ??AddRsTask_4:
   \   00000022   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000024   000E               LSRS     R0,R0,#+24
   \   00000026   0D25               MOVS     R5,#+13
   \   00000028   4543               MULS     R5,R0,R5
   \   0000002A   555D               LDRB     R5,[R2, R5]
   \   0000002C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000002E   090E               LSRS     R1,R1,#+24
   \   00000030   8D42               CMP      R5,R1
   \   00000032   2BD1               BNE      ??AddRsTask_5
   \   00000034   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000036   000E               LSRS     R0,R0,#+24
   \   00000038   0D25               MOVS     R5,#+13
   \   0000003A   4543               MULS     R5,R0,R5
   \   0000003C   5519               ADDS     R5,R2,R5
   \   0000003E   6D78               LDRB     R5,[R5, #+1]
   \   00000040   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000042   240E               LSRS     R4,R4,#+24
   \   00000044   A542               CMP      R5,R4
   \   00000046   21D1               BNE      ??AddRsTask_5
   \   00000048   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000004A   000E               LSRS     R0,R0,#+24
   \   0000004C   0D25               MOVS     R5,#+13
   \   0000004E   4543               MULS     R5,R0,R5
   \   00000050   5619               ADDS     R6,R2,R5
   \   00000052   B578               LDRB     R5,[R6, #+2]
   \   00000054   F778               LDRB     R7,[R6, #+3]
   \   00000056   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+16
   \   00000058   3F0C               LSRS     R7,R7,#+16
   \   0000005A   3D43               ORRS     R5,R5,R7
   \   0000005C   6E46               MOV      R6,SP
   \   0000005E   3678               LDRB     R6,[R6, #+0]
   \   00000060   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   00000062   360C               LSRS     R6,R6,#+16
   \   00000064   B542               CMP      R5,R6
   \   00000066   11D1               BNE      ??AddRsTask_5
   \   00000068   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000006A   000E               LSRS     R0,R0,#+24
   \   0000006C   0D25               MOVS     R5,#+13
   \   0000006E   4543               MULS     R5,R0,R5
   \   00000070   5619               ADDS     R6,R2,R5
   \   00000072   3579               LDRB     R5,[R6, #+4]
   \   00000074   7779               LDRB     R7,[R6, #+5]
   \   00000076   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+16
   \   00000078   3F0C               LSRS     R7,R7,#+16
   \   0000007A   3D43               ORRS     R5,R5,R7
   \   0000007C   0E00               MOVS     R6,R1
   \   0000007E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000080   360E               LSRS     R6,R6,#+24
   \   00000082   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   00000084   360C               LSRS     R6,R6,#+16
   \   00000086   B542               CMP      R5,R6
   \   00000088   00D1               BNE      ??AddRsTask_5
   1384                    {
   1385                      OrdExist=1;
   \   0000008A   0123               MOVS     R3,#+1
   1386                    }
   1387                 i++;
   \                     ??AddRsTask_5:
   \   0000008C   401C               ADDS     R0,R0,#+1
   1388              }
   \                     ??AddRsTask_3:
   \   0000008E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000090   000E               LSRS     R0,R0,#+24
   \   00000092   1428               CMP      R0,#+20
   \   00000094   03D2               BCS      ??AddRsTask_6
   \   00000096   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000098   1B0E               LSRS     R3,R3,#+24
   \   0000009A   002B               CMP      R3,#+0
   \   0000009C   C1D0               BEQ      ??AddRsTask_4
   1389              
   1390              //je¿eli rozkaz nie istnieje to dodaj
   1391              if (OrdExist==0)
   \                     ??AddRsTask_6:
   \   0000009E   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   000000A0   1B0E               LSRS     R3,R3,#+24
   \   000000A2   002B               CMP      R3,#+0
   \   000000A4   42D1               BNE      ??AddRsTask_7
   1392              {
   1393                //znajdŸ wolne miejsce w tablicy zadañ 
   1394                FreePlace=0;
   \   000000A6   0025               MOVS     R5,#+0
   \   000000A8   00E0               B        ??AddRsTask_8
   1395                while ((FreePlace<ZD_MODBUS_Tab_Max) && (ZD_MODBUS[FreePlace].Adress!=0)) FreePlace++;
   \                     ??AddRsTask_9:
   \   000000AA   6D1C               ADDS     R5,R5,#+1
   \                     ??AddRsTask_8:
   \   000000AC   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000AE   2D0E               LSRS     R5,R5,#+24
   \   000000B0   142D               CMP      R5,#+20
   \   000000B2   06D2               BCS      ??AddRsTask_10
   \   000000B4   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000B6   2D0E               LSRS     R5,R5,#+24
   \   000000B8   0D20               MOVS     R0,#+13
   \   000000BA   6843               MULS     R0,R5,R0
   \   000000BC   105C               LDRB     R0,[R2, R0]
   \   000000BE   0028               CMP      R0,#+0
   \   000000C0   F3D1               BNE      ??AddRsTask_9
   1396                
   1397                
   1398                if (FreePlace<ZD_MODBUS_Tab_Max)     //jezeli jest miejsce w tablicy to dodaj
   \                     ??AddRsTask_10:
   \   000000C2   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000C4   2D0E               LSRS     R5,R5,#+24
   \   000000C6   142D               CMP      R5,#+20
   \   000000C8   30D2               BCS      ??AddRsTask_7
   1399                { 
   1400                  ZD_MODBUS[FreePlace].Adress=Node;
   \   000000CA   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000CC   2D0E               LSRS     R5,R5,#+24
   \   000000CE   0D20               MOVS     R0,#+13
   \   000000D0   6843               MULS     R0,R5,R0
   \   000000D2   1154               STRB     R1,[R2, R0]
   1401                  ZD_MODBUS[FreePlace].Function=RfOrd;
   \   000000D4   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000D6   2D0E               LSRS     R5,R5,#+24
   \   000000D8   0D20               MOVS     R0,#+13
   \   000000DA   6843               MULS     R0,R5,R0
   \   000000DC   1018               ADDS     R0,R2,R0
   \   000000DE   4470               STRB     R4,[R0, #+1]
   1402                  ZD_MODBUS[FreePlace].Target=Reg;
   \   000000E0   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000E2   2D0E               LSRS     R5,R5,#+24
   \   000000E4   0D20               MOVS     R0,#+13
   \   000000E6   6843               MULS     R0,R5,R0
   \   000000E8   1018               ADDS     R0,R2,R0
   \   000000EA   6B46               MOV      R3,SP
   \   000000EC   1B78               LDRB     R3,[R3, #+0]
   \   000000EE   8370               STRB     R3,[R0, #+2]
   \   000000F0   1B0A               LSRS     R3,R3,#+8
   \   000000F2   C370               STRB     R3,[R0, #+3]
   1403                  ZD_MODBUS[FreePlace].StartAdr=Node-0;   //miejsce w pamiêci do pobrania danych (odpowiada nodowi)
   \   000000F4   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000F6   2D0E               LSRS     R5,R5,#+24
   \   000000F8   0D20               MOVS     R0,#+13
   \   000000FA   6843               MULS     R0,R5,R0
   \   000000FC   1018               ADDS     R0,R2,R0
   \   000000FE   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000100   090E               LSRS     R1,R1,#+24
   \   00000102   0171               STRB     R1,[R0, #+4]
   \   00000104   090A               LSRS     R1,R1,#+8
   \   00000106   4171               STRB     R1,[R0, #+5]
   1404                  ZD_MODBUS[FreePlace].Coil=16;
   \   00000108   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000010A   2D0E               LSRS     R5,R5,#+24
   \   0000010C   0D20               MOVS     R0,#+13
   \   0000010E   6843               MULS     R0,R5,R0
   \   00000110   1018               ADDS     R0,R2,R0
   \   00000112   1021               MOVS     R1,#+16
   \   00000114   8171               STRB     R1,[R0, #+6]
   \   00000116   090A               LSRS     R1,R1,#+8
   \   00000118   C171               STRB     R1,[R0, #+7]
   1405                  ZD_MODBUS[FreePlace].Error=0x0; 
   \   0000011A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000011C   2D0E               LSRS     R5,R5,#+24
   \   0000011E   0D20               MOVS     R0,#+13
   \   00000120   4543               MULS     R5,R0,R5
   \   00000122   5019               ADDS     R0,R2,R5
   \   00000124   0021               MOVS     R1,#+0
   \   00000126   C172               STRB     R1,[R0, #+11]
   \   00000128   090A               LSRS     R1,R1,#+8
   \   0000012A   0173               STRB     R1,[R0, #+12]
   1406                }
   1407                
   1408                
   1409              }
   1410              
   1411                
   1412          
   1413                
   1414                          
   1415          }//_______________________ Koniec funkcji  AddRsTask _________________
   \                     ??AddRsTask_7:
   \   0000012C   01B0               ADD      SP,SP,#+4
   \   0000012E   F0BC               POP      {R4-R7}
   \   00000130   01BC               POP      {R0}
   \   00000132   0047               BX       R0               ;; return
   \                     ??AddRsTask_0:
   \   00000134   ........           DC32     ZD_MODBUS_0
   1416          
   1417          
   1418          
   1419          
   1420          
   1421          //-----------------------------------------------------------------------------
   1422          // Nazwa funkcji :    AddRfTask_SearchNode
   1423          // Funkcja ustawia dodanie zadania dla transmisji Rs "Ramka rozg³oœna z wyszukaniem wêz³a"
   1424          // Funkcja zastêpuje wszystkie zadanie z rozkazem R_RegOrd (odczytu statusu) rz¹danego wêz³a oraz blokuje odpytywanie wêz³a
   1425          // Node - nr wêz³a/urz¹dzeia
   1426          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1427          void AddRfTask_SearchNodeTask(char Node)
   1428          { 
   \                     AddRfTask_SearchNodeTask:
   \   00000000   10B5               PUSH     {R4,LR}
   1429              if (NeuronsList[Node-1].ReadSuspend) return;
   \   00000002   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000004   000E               LSRS     R0,R0,#+24
   \   00000006   0C21               MOVS     R1,#+12
   \   00000008   4143               MULS     R1,R0,R1
   \   0000000A   484A               LDR      R2,??AddRfTask_SearchNodeTask_0  ;; NeuronsList
   \   0000000C   5118               ADDS     R1,R2,R1
   \   0000000E   091F               SUBS     R1,R1,#+4
   \   00000010   0978               LDRB     R1,[R1, #+0]
   \   00000012   4907               LSLS     R1,R1,#+29
   \   00000014   00D5               BPL      .+4
   \   00000016   86E0               B        ??AddRfTask_SearchNodeTask_1
   1430          
   1431              for (char i=0; i<RF_Tasks-1; i++)  
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   25E0               B        ??AddRfTask_SearchNodeTask_2
   1432              {
   1433                 //znalezienie rozkazu odpytania statusu
   1434                 if ((RF_TaskTab[i].Node==Node) && 
   1435                     (RF_TaskTab[i].Command.ID==NeuronsList[Node-1].NeuronID) &&
   1436                     ((RF_TaskTab[i].Command.Order==R_RegOrd) || (RF_TaskTab[i].Command.Order==W_RegOrd)) )
   1437                 {
   1438                     if (RF_TaskTab[i].Command.Order==R_RegOrd)
   1439                     {
   1440                        RF_TaskTab[i].Command.Order=R_BC_Order;
   1441                     }else{
   1442                        RF_TaskTab[i].Command.Order=W_BC_Order;
   \                     ??AddRfTask_SearchNodeTask_3:
   \   0000001C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000001E   090E               LSRS     R1,R1,#+24
   \   00000020   0822               MOVS     R2,#+8
   \   00000022   4A43               MULS     R2,R1,R2
   \   00000024   424B               LDR      R3,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   00000026   9A18               ADDS     R2,R3,R2
   \   00000028   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000002A   090E               LSRS     R1,R1,#+24
   \   0000002C   0823               MOVS     R3,#+8
   \   0000002E   4B43               MULS     R3,R1,R3
   \   00000030   3F4C               LDR      R4,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   00000032   E318               ADDS     R3,R4,R3
   \   00000034   5B68               LDR      R3,[R3, #+4]
   \   00000036   3F4C               LDR      R4,??AddRfTask_SearchNodeTask_0+0x8  ;; 0xff0fffff
   \   00000038   1C40               ANDS     R4,R4,R3
   \   0000003A   8023               MOVS     R3,#+128
   \   0000003C   1B04               LSLS     R3,R3,#+16       ;; #+8388608
   \   0000003E   2343               ORRS     R3,R3,R4
   \   00000040   5360               STR      R3,[R2, #+4]
   1443                     }
   1444                     NeuronsList[Node-1].ReadSuspend=1;
   \                     ??AddRfTask_SearchNodeTask_4:
   \   00000042   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000044   000E               LSRS     R0,R0,#+24
   \   00000046   0C22               MOVS     R2,#+12
   \   00000048   4243               MULS     R2,R0,R2
   \   0000004A   384B               LDR      R3,??AddRfTask_SearchNodeTask_0  ;; NeuronsList
   \   0000004C   9A18               ADDS     R2,R3,R2
   \   0000004E   121F               SUBS     R2,R2,#+4
   \   00000050   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000052   000E               LSRS     R0,R0,#+24
   \   00000054   0C23               MOVS     R3,#+12
   \   00000056   4343               MULS     R3,R0,R3
   \   00000058   344C               LDR      R4,??AddRfTask_SearchNodeTask_0  ;; NeuronsList
   \   0000005A   E318               ADDS     R3,R4,R3
   \   0000005C   1B1F               SUBS     R3,R3,#+4
   \   0000005E   1B78               LDRB     R3,[R3, #+0]
   \   00000060   0424               MOVS     R4,#+4
   \   00000062   1C43               ORRS     R4,R4,R3
   \   00000064   1470               STRB     R4,[R2, #+0]
   \                     ??AddRfTask_SearchNodeTask_5:
   \   00000066   491C               ADDS     R1,R1,#+1
   \                     ??AddRfTask_SearchNodeTask_2:
   \   00000068   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000006A   090E               LSRS     R1,R1,#+24
   \   0000006C   4529               CMP      R1,#+69
   \   0000006E   5AD2               BCS      ??AddRfTask_SearchNodeTask_1
   \   00000070   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000072   090E               LSRS     R1,R1,#+24
   \   00000074   0822               MOVS     R2,#+8
   \   00000076   4A43               MULS     R2,R1,R2
   \   00000078   2D4B               LDR      R3,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   0000007A   9A5C               LDRB     R2,[R3, R2]
   \   0000007C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000007E   000E               LSRS     R0,R0,#+24
   \   00000080   8242               CMP      R2,R0
   \   00000082   F0D1               BNE      ??AddRfTask_SearchNodeTask_5
   \   00000084   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000086   090E               LSRS     R1,R1,#+24
   \   00000088   0822               MOVS     R2,#+8
   \   0000008A   4A43               MULS     R2,R1,R2
   \   0000008C   284B               LDR      R3,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   0000008E   9A18               ADDS     R2,R3,R2
   \   00000090   5268               LDR      R2,[R2, #+4]
   \   00000092   1203               LSLS     R2,R2,#+12       ;; ZeroExtS R2,R2,#+12,#+12
   \   00000094   120B               LSRS     R2,R2,#+12
   \   00000096   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000098   000E               LSRS     R0,R0,#+24
   \   0000009A   0C23               MOVS     R3,#+12
   \   0000009C   4343               MULS     R3,R0,R3
   \   0000009E   234C               LDR      R4,??AddRfTask_SearchNodeTask_0  ;; NeuronsList
   \   000000A0   E318               ADDS     R3,R4,R3
   \   000000A2   083B               SUBS     R3,R3,#+8
   \   000000A4   1B68               LDR      R3,[R3, #+0]
   \   000000A6   9A42               CMP      R2,R3
   \   000000A8   DDD1               BNE      ??AddRfTask_SearchNodeTask_5
   \   000000AA   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000AC   090E               LSRS     R1,R1,#+24
   \   000000AE   0822               MOVS     R2,#+8
   \   000000B0   4A43               MULS     R2,R1,R2
   \   000000B2   1F4B               LDR      R3,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   000000B4   9A18               ADDS     R2,R3,R2
   \   000000B6   5268               LDR      R2,[R2, #+4]
   \   000000B8   F023               MOVS     R3,#+240
   \   000000BA   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000BC   1340               ANDS     R3,R3,R2
   \   000000BE   1A00               MOVS     R2,R3
   \   000000C0   120D               LSRS     R2,R2,#+20
   \   000000C2   012A               CMP      R2,#+1
   \   000000C4   0DD0               BEQ      ??AddRfTask_SearchNodeTask_6
   \   000000C6   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000C8   090E               LSRS     R1,R1,#+24
   \   000000CA   0822               MOVS     R2,#+8
   \   000000CC   4A43               MULS     R2,R1,R2
   \   000000CE   184B               LDR      R3,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   000000D0   9A18               ADDS     R2,R3,R2
   \   000000D2   5268               LDR      R2,[R2, #+4]
   \   000000D4   F023               MOVS     R3,#+240
   \   000000D6   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000D8   1340               ANDS     R3,R3,R2
   \   000000DA   1A00               MOVS     R2,R3
   \   000000DC   120D               LSRS     R2,R2,#+20
   \   000000DE   022A               CMP      R2,#+2
   \   000000E0   C1D1               BNE      ??AddRfTask_SearchNodeTask_5
   \                     ??AddRfTask_SearchNodeTask_6:
   \   000000E2   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000E4   090E               LSRS     R1,R1,#+24
   \   000000E6   0822               MOVS     R2,#+8
   \   000000E8   4A43               MULS     R2,R1,R2
   \   000000EA   114B               LDR      R3,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   000000EC   9A18               ADDS     R2,R3,R2
   \   000000EE   5268               LDR      R2,[R2, #+4]
   \   000000F0   F023               MOVS     R3,#+240
   \   000000F2   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000F4   1340               ANDS     R3,R3,R2
   \   000000F6   1A00               MOVS     R2,R3
   \   000000F8   120D               LSRS     R2,R2,#+20
   \   000000FA   012A               CMP      R2,#+1
   \   000000FC   8ED1               BNE      ??AddRfTask_SearchNodeTask_3
   \   000000FE   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000100   090E               LSRS     R1,R1,#+24
   \   00000102   0822               MOVS     R2,#+8
   \   00000104   4A43               MULS     R2,R1,R2
   \   00000106   0A4B               LDR      R3,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   00000108   9A18               ADDS     R2,R3,R2
   \   0000010A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000010C   090E               LSRS     R1,R1,#+24
   \   0000010E   0823               MOVS     R3,#+8
   \   00000110   4B43               MULS     R3,R1,R3
   \   00000112   074C               LDR      R4,??AddRfTask_SearchNodeTask_0+0x4  ;; RF_TaskTab
   \   00000114   E318               ADDS     R3,R4,R3
   \   00000116   5B68               LDR      R3,[R3, #+4]
   \   00000118   064C               LDR      R4,??AddRfTask_SearchNodeTask_0+0x8  ;; 0xff0fffff
   \   0000011A   1C40               ANDS     R4,R4,R3
   \   0000011C   E023               MOVS     R3,#+224
   \   0000011E   DB03               LSLS     R3,R3,#+15       ;; #+7340032
   \   00000120   2343               ORRS     R3,R3,R4
   \   00000122   5360               STR      R3,[R2, #+4]
   \   00000124   8DE7               B        ??AddRfTask_SearchNodeTask_4
   1445                 }
   1446              } 
   \                     ??AddRfTask_SearchNodeTask_1:
   \   00000126   10BC               POP      {R4}
   \   00000128   01BC               POP      {R0}
   \   0000012A   0047               BX       R0               ;; return
   \                     ??AddRfTask_SearchNodeTask_0:
   \   0000012C   ........           DC32     NeuronsList
   \   00000130   ........           DC32     RF_TaskTab
   \   00000134   FFFF0FFF           DC32     0xff0fffff
   1447          }
   1448          
   1449          
   1450          //-----------------------------------------------------------------------------
   1451          // Nazwa funkcji :    AddRfTask_SearchNode
   1452          // Funkcja ustawia dodanie zadania dla transmisji Rs "Wy³¹czenie ramki rozg³oœnej z wyszukaniem wêz³a"
   1453          // Funkcja w³¹cza ponowne odpytanie wêz³a zablokowanego funkcj¹ AddRfTask_SearchNode
   1454          // Node - nr wêz³a/urz¹dzeia
   1455          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1456          void AddRfTask_RemoveSearchNodeTask(char Node)
   1457          { 
   \                     AddRfTask_RemoveSearchNodeTask:
   \   00000000   10B5               PUSH     {R4,LR}
   1458              for (char i=0; i<RF_Tasks-1; i++)  
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   25E0               B        ??AddRfTask_RemoveSearchNodeTask_0
   1459              {
   1460                 //znalezienie rozkazu odpytania statusu
   1461                 if ((RF_TaskTab[i].Node==Node) && 
   1462                     (RF_TaskTab[i].Command.ID==NeuronsList[Node-1].NeuronID) &&
   1463                     ((RF_TaskTab[i].Command.Order==R_BC_Order) || (RF_TaskTab[i].Command.Order==W_BC_Order)))
   1464                 {
   1465                     if (RF_TaskTab[i].Command.Order==R_BC_Order)
   1466                     {
   1467                        RF_TaskTab[i].Command.Order=R_RegOrd;
   1468                     }else{
   1469                        RF_TaskTab[i].Command.Order=W_RegOrd;
   \                     ??AddRfTask_RemoveSearchNodeTask_1:
   \   00000006   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000008   090E               LSRS     R1,R1,#+24
   \   0000000A   0822               MOVS     R2,#+8
   \   0000000C   4A43               MULS     R2,R1,R2
   \   0000000E   424B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   00000010   9A18               ADDS     R2,R3,R2
   \   00000012   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000014   090E               LSRS     R1,R1,#+24
   \   00000016   0823               MOVS     R3,#+8
   \   00000018   4B43               MULS     R3,R1,R3
   \   0000001A   3F4C               LDR      R4,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   0000001C   E318               ADDS     R3,R4,R3
   \   0000001E   5B68               LDR      R3,[R3, #+4]
   \   00000020   3E4C               LDR      R4,??AddRfTask_RemoveSearchNodeTask_2+0x4  ;; 0xff0fffff
   \   00000022   1C40               ANDS     R4,R4,R3
   \   00000024   8023               MOVS     R3,#+128
   \   00000026   9B03               LSLS     R3,R3,#+14       ;; #+2097152
   \   00000028   2343               ORRS     R3,R3,R4
   \   0000002A   5360               STR      R3,[R2, #+4]
   1470                     }
   1471                     NeuronsList[Node-1].ReadSuspend=0;
   \                     ??AddRfTask_RemoveSearchNodeTask_3:
   \   0000002C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000002E   000E               LSRS     R0,R0,#+24
   \   00000030   0C22               MOVS     R2,#+12
   \   00000032   4243               MULS     R2,R0,R2
   \   00000034   3A4B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2+0x8  ;; NeuronsList
   \   00000036   9A18               ADDS     R2,R3,R2
   \   00000038   121F               SUBS     R2,R2,#+4
   \   0000003A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000003C   000E               LSRS     R0,R0,#+24
   \   0000003E   0C23               MOVS     R3,#+12
   \   00000040   4343               MULS     R3,R0,R3
   \   00000042   374C               LDR      R4,??AddRfTask_RemoveSearchNodeTask_2+0x8  ;; NeuronsList
   \   00000044   E318               ADDS     R3,R4,R3
   \   00000046   1B1F               SUBS     R3,R3,#+4
   \   00000048   1B78               LDRB     R3,[R3, #+0]
   \   0000004A   FB24               MOVS     R4,#+251
   \   0000004C   1C40               ANDS     R4,R4,R3
   \   0000004E   1470               STRB     R4,[R2, #+0]
   \                     ??AddRfTask_RemoveSearchNodeTask_4:
   \   00000050   491C               ADDS     R1,R1,#+1
   \                     ??AddRfTask_RemoveSearchNodeTask_0:
   \   00000052   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000054   090E               LSRS     R1,R1,#+24
   \   00000056   4529               CMP      R1,#+69
   \   00000058   5AD2               BCS      ??AddRfTask_RemoveSearchNodeTask_5
   \   0000005A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000005C   090E               LSRS     R1,R1,#+24
   \   0000005E   0822               MOVS     R2,#+8
   \   00000060   4A43               MULS     R2,R1,R2
   \   00000062   2D4B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   00000064   9A5C               LDRB     R2,[R3, R2]
   \   00000066   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000068   000E               LSRS     R0,R0,#+24
   \   0000006A   8242               CMP      R2,R0
   \   0000006C   F0D1               BNE      ??AddRfTask_RemoveSearchNodeTask_4
   \   0000006E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000070   090E               LSRS     R1,R1,#+24
   \   00000072   0822               MOVS     R2,#+8
   \   00000074   4A43               MULS     R2,R1,R2
   \   00000076   284B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   00000078   9A18               ADDS     R2,R3,R2
   \   0000007A   5268               LDR      R2,[R2, #+4]
   \   0000007C   1203               LSLS     R2,R2,#+12       ;; ZeroExtS R2,R2,#+12,#+12
   \   0000007E   120B               LSRS     R2,R2,#+12
   \   00000080   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000082   000E               LSRS     R0,R0,#+24
   \   00000084   0C23               MOVS     R3,#+12
   \   00000086   4343               MULS     R3,R0,R3
   \   00000088   254C               LDR      R4,??AddRfTask_RemoveSearchNodeTask_2+0x8  ;; NeuronsList
   \   0000008A   E318               ADDS     R3,R4,R3
   \   0000008C   083B               SUBS     R3,R3,#+8
   \   0000008E   1B68               LDR      R3,[R3, #+0]
   \   00000090   9A42               CMP      R2,R3
   \   00000092   DDD1               BNE      ??AddRfTask_RemoveSearchNodeTask_4
   \   00000094   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000096   090E               LSRS     R1,R1,#+24
   \   00000098   0822               MOVS     R2,#+8
   \   0000009A   4A43               MULS     R2,R1,R2
   \   0000009C   1E4B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   0000009E   9A18               ADDS     R2,R3,R2
   \   000000A0   5268               LDR      R2,[R2, #+4]
   \   000000A2   F023               MOVS     R3,#+240
   \   000000A4   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000A6   1340               ANDS     R3,R3,R2
   \   000000A8   1A00               MOVS     R2,R3
   \   000000AA   120D               LSRS     R2,R2,#+20
   \   000000AC   072A               CMP      R2,#+7
   \   000000AE   0DD0               BEQ      ??AddRfTask_RemoveSearchNodeTask_6
   \   000000B0   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000B2   090E               LSRS     R1,R1,#+24
   \   000000B4   0822               MOVS     R2,#+8
   \   000000B6   4A43               MULS     R2,R1,R2
   \   000000B8   174B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   000000BA   9A18               ADDS     R2,R3,R2
   \   000000BC   5268               LDR      R2,[R2, #+4]
   \   000000BE   F023               MOVS     R3,#+240
   \   000000C0   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000C2   1340               ANDS     R3,R3,R2
   \   000000C4   1A00               MOVS     R2,R3
   \   000000C6   120D               LSRS     R2,R2,#+20
   \   000000C8   082A               CMP      R2,#+8
   \   000000CA   C1D1               BNE      ??AddRfTask_RemoveSearchNodeTask_4
   \                     ??AddRfTask_RemoveSearchNodeTask_6:
   \   000000CC   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000CE   090E               LSRS     R1,R1,#+24
   \   000000D0   0822               MOVS     R2,#+8
   \   000000D2   4A43               MULS     R2,R1,R2
   \   000000D4   104B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   000000D6   9A18               ADDS     R2,R3,R2
   \   000000D8   5268               LDR      R2,[R2, #+4]
   \   000000DA   F023               MOVS     R3,#+240
   \   000000DC   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000DE   1340               ANDS     R3,R3,R2
   \   000000E0   1A00               MOVS     R2,R3
   \   000000E2   120D               LSRS     R2,R2,#+20
   \   000000E4   072A               CMP      R2,#+7
   \   000000E6   8ED1               BNE      ??AddRfTask_RemoveSearchNodeTask_1
   \   000000E8   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000EA   090E               LSRS     R1,R1,#+24
   \   000000EC   0822               MOVS     R2,#+8
   \   000000EE   4A43               MULS     R2,R1,R2
   \   000000F0   094B               LDR      R3,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   000000F2   9A18               ADDS     R2,R3,R2
   \   000000F4   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000F6   090E               LSRS     R1,R1,#+24
   \   000000F8   0823               MOVS     R3,#+8
   \   000000FA   4B43               MULS     R3,R1,R3
   \   000000FC   064C               LDR      R4,??AddRfTask_RemoveSearchNodeTask_2  ;; RF_TaskTab
   \   000000FE   E318               ADDS     R3,R4,R3
   \   00000100   5B68               LDR      R3,[R3, #+4]
   \   00000102   064C               LDR      R4,??AddRfTask_RemoveSearchNodeTask_2+0x4  ;; 0xff0fffff
   \   00000104   1C40               ANDS     R4,R4,R3
   \   00000106   8023               MOVS     R3,#+128
   \   00000108   5B03               LSLS     R3,R3,#+13       ;; #+1048576
   \   0000010A   2343               ORRS     R3,R3,R4
   \   0000010C   5360               STR      R3,[R2, #+4]
   \   0000010E   8DE7               B        ??AddRfTask_RemoveSearchNodeTask_3
   1472                 }
   1473              } 
   1474          }
   \                     ??AddRfTask_RemoveSearchNodeTask_5:
   \   00000110   10BC               POP      {R4}
   \   00000112   01BC               POP      {R0}
   \   00000114   0047               BX       R0               ;; return
   \   00000116   C046               Nop      
   \                     ??AddRfTask_RemoveSearchNodeTask_2:
   \   00000118   ........           DC32     RF_TaskTab
   \   0000011C   FFFF0FFF           DC32     0xff0fffff
   \   00000120   ........           DC32     NeuronsList
   1475          
   1476          
   1477          //usuñ wszystkie zadania dla tego wêz³a

   \                                 In section Debug.txt, align 4, keep-with-next
   1478          char RemoveRfNodeAllTaska( char Node)
   1479          {
   \                     RemoveRfNodeAllTaska:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1480            for (char TSK=0; TSK<RF_Tasks-1; TSK++)
   \   00000002   0021               MOVS     R1,#+0
   \   00000004   B7E0               B        ??RemoveRfNodeAllTaska_0
   1481            {
   1482               if (RF_TaskTab[TSK].Node==Node) //wyczyœæ wêze³
   1483               {
   1484                  RF_TaskTab[TSK].Node=0;
   1485                  RF_TaskTab[TSK].Command.ID=0;
   1486                  RF_TaskTab[TSK].Command.Order=0;
   1487                  RF_TaskTab[TSK].Command.Auxi=0;
   1488               }
   1489               
   1490               //przesuñ pozosta³e zadania do góry
   1491               char Tp=TSK;
   1492               while ((Tp+1<RF_Tasks-1) && (RF_TaskTab[Tp+1].Node))
   1493               {
   1494                 RF_TaskTab[Tp].Node=RF_TaskTab[Tp+1].Node;
   \                     ??RemoveRfNodeAllTaska_1:
   \   00000006   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000008   120E               LSRS     R2,R2,#+24
   \   0000000A   0823               MOVS     R3,#+8
   \   0000000C   5343               MULS     R3,R2,R3
   \   0000000E   7F4C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   00000010   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000012   120E               LSRS     R2,R2,#+24
   \   00000014   0825               MOVS     R5,#+8
   \   00000016   5543               MULS     R5,R2,R5
   \   00000018   7C4E               LDR      R6,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000001A   7519               ADDS     R5,R6,R5
   \   0000001C   2D7A               LDRB     R5,[R5, #+8]
   \   0000001E   E554               STRB     R5,[R4, R3]
   1495                 RF_TaskTab[Tp].Command.ID=RF_TaskTab[Tp+1].Command.ID;
   \   00000020   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000022   120E               LSRS     R2,R2,#+24
   \   00000024   0823               MOVS     R3,#+8
   \   00000026   5343               MULS     R3,R2,R3
   \   00000028   784C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000002A   E318               ADDS     R3,R4,R3
   \   0000002C   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   0000002E   120E               LSRS     R2,R2,#+24
   \   00000030   0824               MOVS     R4,#+8
   \   00000032   5443               MULS     R4,R2,R4
   \   00000034   754D               LDR      R5,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   00000036   2C19               ADDS     R4,R5,R4
   \   00000038   6468               LDR      R4,[R4, #+4]
   \   0000003A   240D               LSRS     R4,R4,#+20
   \   0000003C   2405               LSLS     R4,R4,#+20
   \   0000003E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000040   120E               LSRS     R2,R2,#+24
   \   00000042   0825               MOVS     R5,#+8
   \   00000044   5543               MULS     R5,R2,R5
   \   00000046   714E               LDR      R6,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   00000048   7519               ADDS     R5,R6,R5
   \   0000004A   ED68               LDR      R5,[R5, #+12]
   \   0000004C   2D03               LSLS     R5,R5,#+12       ;; ZeroExtS R5,R5,#+12,#+12
   \   0000004E   2D0B               LSRS     R5,R5,#+12
   \   00000050   2543               ORRS     R5,R5,R4
   \   00000052   5D60               STR      R5,[R3, #+4]
   1496                 RF_TaskTab[Tp].Command.Order=RF_TaskTab[Tp+1].Command.Order;
   \   00000054   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000056   120E               LSRS     R2,R2,#+24
   \   00000058   0823               MOVS     R3,#+8
   \   0000005A   5343               MULS     R3,R2,R3
   \   0000005C   6B4C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000005E   E318               ADDS     R3,R4,R3
   \   00000060   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000062   120E               LSRS     R2,R2,#+24
   \   00000064   0824               MOVS     R4,#+8
   \   00000066   5443               MULS     R4,R2,R4
   \   00000068   684D               LDR      R5,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000006A   2C19               ADDS     R4,R5,R4
   \   0000006C   6568               LDR      R5,[R4, #+4]
   \   0000006E   684C               LDR      R4,??RemoveRfNodeAllTaska_2+0x4  ;; 0xff0fffff
   \   00000070   2C40               ANDS     R4,R4,R5
   \   00000072   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000074   120E               LSRS     R2,R2,#+24
   \   00000076   0825               MOVS     R5,#+8
   \   00000078   5543               MULS     R5,R2,R5
   \   0000007A   644E               LDR      R6,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000007C   7519               ADDS     R5,R6,R5
   \   0000007E   ED68               LDR      R5,[R5, #+12]
   \   00000080   2D0D               LSRS     R5,R5,#+20
   \   00000082   2D05               LSLS     R5,R5,#+20
   \   00000084   F026               MOVS     R6,#+240
   \   00000086   3604               LSLS     R6,R6,#+16       ;; #+15728640
   \   00000088   2E40               ANDS     R6,R6,R5
   \   0000008A   2643               ORRS     R6,R6,R4
   \   0000008C   5E60               STR      R6,[R3, #+4]
   1497                 RF_TaskTab[Tp].Command.Auxi=RF_TaskTab[Tp+1].Command.Order;
   \   0000008E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000090   120E               LSRS     R2,R2,#+24
   \   00000092   0823               MOVS     R3,#+8
   \   00000094   5343               MULS     R3,R2,R3
   \   00000096   5D4C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   00000098   E318               ADDS     R3,R4,R3
   \   0000009A   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   0000009C   120E               LSRS     R2,R2,#+24
   \   0000009E   0824               MOVS     R4,#+8
   \   000000A0   5443               MULS     R4,R2,R4
   \   000000A2   5A4D               LDR      R5,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000000A4   2C19               ADDS     R4,R5,R4
   \   000000A6   6468               LDR      R4,[R4, #+4]
   \   000000A8   2402               LSLS     R4,R4,#+8        ;; ZeroExtS R4,R4,#+8,#+8
   \   000000AA   240A               LSRS     R4,R4,#+8
   \   000000AC   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000AE   120E               LSRS     R2,R2,#+24
   \   000000B0   0825               MOVS     R5,#+8
   \   000000B2   5543               MULS     R5,R2,R5
   \   000000B4   554E               LDR      R6,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000000B6   7519               ADDS     R5,R6,R5
   \   000000B8   ED68               LDR      R5,[R5, #+12]
   \   000000BA   F026               MOVS     R6,#+240
   \   000000BC   3604               LSLS     R6,R6,#+16       ;; #+15728640
   \   000000BE   2E40               ANDS     R6,R6,R5
   \   000000C0   3500               MOVS     R5,R6
   \   000000C2   2D0D               LSRS     R5,R5,#+20
   \   000000C4   2D06               LSLS     R5,R5,#+24
   \   000000C6   2543               ORRS     R5,R5,R4
   \   000000C8   5D60               STR      R5,[R3, #+4]
   1498                 Tp++;
   \   000000CA   521C               ADDS     R2,R2,#+1
   1499               }
   \                     ??RemoveRfNodeAllTaska_3:
   \   000000CC   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000CE   120E               LSRS     R2,R2,#+24
   \   000000D0   1300               MOVS     R3,R2
   \   000000D2   5B1C               ADDS     R3,R3,#+1
   \   000000D4   1B04               LSLS     R3,R3,#+16       ;; ZeroExtS R3,R3,#+16,#+16
   \   000000D6   1B0C               LSRS     R3,R3,#+16
   \   000000D8   452B               CMP      R3,#+69
   \   000000DA   08D2               BCS      ??RemoveRfNodeAllTaska_4
   \   000000DC   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000DE   120E               LSRS     R2,R2,#+24
   \   000000E0   0823               MOVS     R3,#+8
   \   000000E2   5343               MULS     R3,R2,R3
   \   000000E4   494C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000000E6   E318               ADDS     R3,R4,R3
   \   000000E8   1B7A               LDRB     R3,[R3, #+8]
   \   000000EA   002B               CMP      R3,#+0
   \   000000EC   8BD1               BNE      ??RemoveRfNodeAllTaska_1
   1500               
   1501               //usuñ pozosta³oœæ po czyszczeniu
   1502               if ((Tp<RF_Tasks-1) && (RF_TaskTab[Tp].Node))
   \                     ??RemoveRfNodeAllTaska_4:
   \   000000EE   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000F0   120E               LSRS     R2,R2,#+24
   \   000000F2   452A               CMP      R2,#+69
   \   000000F4   3ED2               BCS      ??RemoveRfNodeAllTaska_5
   \   000000F6   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000F8   120E               LSRS     R2,R2,#+24
   \   000000FA   0823               MOVS     R3,#+8
   \   000000FC   5343               MULS     R3,R2,R3
   \   000000FE   434C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   00000100   E35C               LDRB     R3,[R4, R3]
   \   00000102   002B               CMP      R3,#+0
   \   00000104   36D0               BEQ      ??RemoveRfNodeAllTaska_5
   1503               {
   1504                  RF_TaskTab[Tp].Node=0;
   \   00000106   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000108   120E               LSRS     R2,R2,#+24
   \   0000010A   0823               MOVS     R3,#+8
   \   0000010C   5343               MULS     R3,R2,R3
   \   0000010E   3F4C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   00000110   0025               MOVS     R5,#+0
   \   00000112   E554               STRB     R5,[R4, R3]
   1505                  RF_TaskTab[Tp].Command.ID=0;
   \   00000114   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000116   120E               LSRS     R2,R2,#+24
   \   00000118   0823               MOVS     R3,#+8
   \   0000011A   5343               MULS     R3,R2,R3
   \   0000011C   3B4C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000011E   E318               ADDS     R3,R4,R3
   \   00000120   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000122   120E               LSRS     R2,R2,#+24
   \   00000124   0824               MOVS     R4,#+8
   \   00000126   5443               MULS     R4,R2,R4
   \   00000128   384D               LDR      R5,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000012A   2C19               ADDS     R4,R5,R4
   \   0000012C   6468               LDR      R4,[R4, #+4]
   \   0000012E   240D               LSRS     R4,R4,#+20
   \   00000130   2405               LSLS     R4,R4,#+20
   \   00000132   5C60               STR      R4,[R3, #+4]
   1506                  RF_TaskTab[Tp].Command.Order=0;
   \   00000134   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000136   120E               LSRS     R2,R2,#+24
   \   00000138   0823               MOVS     R3,#+8
   \   0000013A   5343               MULS     R3,R2,R3
   \   0000013C   334C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000013E   E318               ADDS     R3,R4,R3
   \   00000140   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000142   120E               LSRS     R2,R2,#+24
   \   00000144   0824               MOVS     R4,#+8
   \   00000146   5443               MULS     R4,R2,R4
   \   00000148   304D               LDR      R5,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000014A   2C19               ADDS     R4,R5,R4
   \   0000014C   6468               LDR      R4,[R4, #+4]
   \   0000014E   304D               LDR      R5,??RemoveRfNodeAllTaska_2+0x4  ;; 0xff0fffff
   \   00000150   2540               ANDS     R5,R5,R4
   \   00000152   5D60               STR      R5,[R3, #+4]
   1507                  RF_TaskTab[Tp].Command.Auxi=0; 
   \   00000154   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000156   120E               LSRS     R2,R2,#+24
   \   00000158   0823               MOVS     R3,#+8
   \   0000015A   5343               MULS     R3,R2,R3
   \   0000015C   2B4C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000015E   E318               ADDS     R3,R4,R3
   \   00000160   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000162   120E               LSRS     R2,R2,#+24
   \   00000164   0824               MOVS     R4,#+8
   \   00000166   6243               MULS     R2,R4,R2
   \   00000168   284C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000016A   A218               ADDS     R2,R4,R2
   \   0000016C   5268               LDR      R2,[R2, #+4]
   \   0000016E   1202               LSLS     R2,R2,#+8        ;; ZeroExtS R2,R2,#+8,#+8
   \   00000170   120A               LSRS     R2,R2,#+8
   \   00000172   5A60               STR      R2,[R3, #+4]
   1508               } 
   \                     ??RemoveRfNodeAllTaska_5:
   \   00000174   491C               ADDS     R1,R1,#+1
   \                     ??RemoveRfNodeAllTaska_0:
   \   00000176   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000178   090E               LSRS     R1,R1,#+24
   \   0000017A   4529               CMP      R1,#+69
   \   0000017C   42D2               BCS      ??RemoveRfNodeAllTaska_6
   \   0000017E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000180   090E               LSRS     R1,R1,#+24
   \   00000182   0822               MOVS     R2,#+8
   \   00000184   4A43               MULS     R2,R1,R2
   \   00000186   214B               LDR      R3,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   00000188   9A5C               LDRB     R2,[R3, R2]
   \   0000018A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000018C   000E               LSRS     R0,R0,#+24
   \   0000018E   8242               CMP      R2,R0
   \   00000190   36D1               BNE      ??RemoveRfNodeAllTaska_7
   \   00000192   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000194   090E               LSRS     R1,R1,#+24
   \   00000196   0822               MOVS     R2,#+8
   \   00000198   4A43               MULS     R2,R1,R2
   \   0000019A   1C4B               LDR      R3,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   0000019C   0024               MOVS     R4,#+0
   \   0000019E   9C54               STRB     R4,[R3, R2]
   \   000001A0   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000001A2   090E               LSRS     R1,R1,#+24
   \   000001A4   0822               MOVS     R2,#+8
   \   000001A6   4A43               MULS     R2,R1,R2
   \   000001A8   184B               LDR      R3,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000001AA   9A18               ADDS     R2,R3,R2
   \   000001AC   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000001AE   090E               LSRS     R1,R1,#+24
   \   000001B0   0823               MOVS     R3,#+8
   \   000001B2   4B43               MULS     R3,R1,R3
   \   000001B4   154C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000001B6   E318               ADDS     R3,R4,R3
   \   000001B8   5B68               LDR      R3,[R3, #+4]
   \   000001BA   1B0D               LSRS     R3,R3,#+20
   \   000001BC   1B05               LSLS     R3,R3,#+20
   \   000001BE   5360               STR      R3,[R2, #+4]
   \   000001C0   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000001C2   090E               LSRS     R1,R1,#+24
   \   000001C4   0822               MOVS     R2,#+8
   \   000001C6   4A43               MULS     R2,R1,R2
   \   000001C8   104B               LDR      R3,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000001CA   9A18               ADDS     R2,R3,R2
   \   000001CC   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000001CE   090E               LSRS     R1,R1,#+24
   \   000001D0   0823               MOVS     R3,#+8
   \   000001D2   4B43               MULS     R3,R1,R3
   \   000001D4   0D4C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000001D6   E318               ADDS     R3,R4,R3
   \   000001D8   5B68               LDR      R3,[R3, #+4]
   \   000001DA   0D4C               LDR      R4,??RemoveRfNodeAllTaska_2+0x4  ;; 0xff0fffff
   \   000001DC   1C40               ANDS     R4,R4,R3
   \   000001DE   5460               STR      R4,[R2, #+4]
   \   000001E0   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000001E2   090E               LSRS     R1,R1,#+24
   \   000001E4   0822               MOVS     R2,#+8
   \   000001E6   4A43               MULS     R2,R1,R2
   \   000001E8   084B               LDR      R3,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000001EA   9A18               ADDS     R2,R3,R2
   \   000001EC   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000001EE   090E               LSRS     R1,R1,#+24
   \   000001F0   0823               MOVS     R3,#+8
   \   000001F2   4B43               MULS     R3,R1,R3
   \   000001F4   054C               LDR      R4,??RemoveRfNodeAllTaska_2  ;; RF_TaskTab
   \   000001F6   E318               ADDS     R3,R4,R3
   \   000001F8   5B68               LDR      R3,[R3, #+4]
   \   000001FA   1B02               LSLS     R3,R3,#+8        ;; ZeroExtS R3,R3,#+8,#+8
   \   000001FC   1B0A               LSRS     R3,R3,#+8
   \   000001FE   5360               STR      R3,[R2, #+4]
   \                     ??RemoveRfNodeAllTaska_7:
   \   00000200   0A00               MOVS     R2,R1
   \   00000202   63E7               B        ??RemoveRfNodeAllTaska_3
   1509            }  
   1510          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "RemoveRfNodeAllTaska"
   \                     ??RemoveRfNodeAllTaska_6:
   \   00000204   70BC               POP      {R4-R6}
   \   00000206   01BC               POP      {R0}
   \   00000208   0047               BX       R0               ;; return
   \   0000020A   C046               Nop      
   \                     ??RemoveRfNodeAllTaska_2:
   \   0000020C   ........           DC32     RF_TaskTab
   \   00000210   FFFF0FFF           DC32     0xff0fffff
   1511          
   1512          
   1513          
   1514          
   1515          //usuñ wszystkie zadania dla tego wêz³a

   \                                 In section Debug.txt, align 4, keep-with-next
   1516          char RemoveRfTask(char TSK)
   1517          {
   \                     RemoveRfTask:
   \   00000000   10B5               PUSH     {R4,LR}
   1518          
   1519                RF_TaskTab[TSK].Node=0;
   \   00000002   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000004   000E               LSRS     R0,R0,#+24
   \   00000006   0821               MOVS     R1,#+8
   \   00000008   4143               MULS     R1,R0,R1
   \   0000000A   754A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   0000000C   0023               MOVS     R3,#+0
   \   0000000E   5354               STRB     R3,[R2, R1]
   1520                RF_TaskTab[TSK].Command.ID=0;
   \   00000010   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000012   000E               LSRS     R0,R0,#+24
   \   00000014   0821               MOVS     R1,#+8
   \   00000016   4143               MULS     R1,R0,R1
   \   00000018   714A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   0000001A   5118               ADDS     R1,R2,R1
   \   0000001C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000001E   000E               LSRS     R0,R0,#+24
   \   00000020   0822               MOVS     R2,#+8
   \   00000022   4243               MULS     R2,R0,R2
   \   00000024   6E4B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000026   9A18               ADDS     R2,R3,R2
   \   00000028   5268               LDR      R2,[R2, #+4]
   \   0000002A   120D               LSRS     R2,R2,#+20
   \   0000002C   1205               LSLS     R2,R2,#+20
   \   0000002E   4A60               STR      R2,[R1, #+4]
   1521                RF_TaskTab[TSK].Command.Order=0;
   \   00000030   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000032   000E               LSRS     R0,R0,#+24
   \   00000034   0821               MOVS     R1,#+8
   \   00000036   4143               MULS     R1,R0,R1
   \   00000038   694A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   0000003A   5118               ADDS     R1,R2,R1
   \   0000003C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000003E   000E               LSRS     R0,R0,#+24
   \   00000040   0822               MOVS     R2,#+8
   \   00000042   4243               MULS     R2,R0,R2
   \   00000044   664B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000046   9A18               ADDS     R2,R3,R2
   \   00000048   5268               LDR      R2,[R2, #+4]
   \   0000004A   664B               LDR      R3,??RemoveRfTask_0+0x4  ;; 0xff0fffff
   \   0000004C   1340               ANDS     R3,R3,R2
   \   0000004E   4B60               STR      R3,[R1, #+4]
   1522                RF_TaskTab[TSK].Command.Auxi=0;
   \   00000050   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000052   000E               LSRS     R0,R0,#+24
   \   00000054   0821               MOVS     R1,#+8
   \   00000056   4143               MULS     R1,R0,R1
   \   00000058   614A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   0000005A   5118               ADDS     R1,R2,R1
   \   0000005C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000005E   000E               LSRS     R0,R0,#+24
   \   00000060   0822               MOVS     R2,#+8
   \   00000062   4243               MULS     R2,R0,R2
   \   00000064   5E4B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000066   9A18               ADDS     R2,R3,R2
   \   00000068   5268               LDR      R2,[R2, #+4]
   \   0000006A   1202               LSLS     R2,R2,#+8        ;; ZeroExtS R2,R2,#+8,#+8
   \   0000006C   120A               LSRS     R2,R2,#+8
   \   0000006E   4A60               STR      R2,[R1, #+4]
   1523          
   1524               //przesuñ pozosta³e zadania do góry
   1525               char Tp=TSK;
   \   00000070   5EE0               B        ??RemoveRfTask_1
   1526               while ((Tp+1<RF_Tasks-1) && (RF_TaskTab[Tp+1].Node))
   1527               {
   1528                 RF_TaskTab[Tp].Node=RF_TaskTab[Tp+1].Node;
   \                     ??RemoveRfTask_2:
   \   00000072   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000074   000E               LSRS     R0,R0,#+24
   \   00000076   0821               MOVS     R1,#+8
   \   00000078   4143               MULS     R1,R0,R1
   \   0000007A   594A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   0000007C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000007E   000E               LSRS     R0,R0,#+24
   \   00000080   0823               MOVS     R3,#+8
   \   00000082   4343               MULS     R3,R0,R3
   \   00000084   564C               LDR      R4,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000086   E318               ADDS     R3,R4,R3
   \   00000088   1B7A               LDRB     R3,[R3, #+8]
   \   0000008A   5354               STRB     R3,[R2, R1]
   1529                 RF_TaskTab[Tp].Command.ID=RF_TaskTab[Tp+1].Command.ID;
   \   0000008C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000008E   000E               LSRS     R0,R0,#+24
   \   00000090   0821               MOVS     R1,#+8
   \   00000092   4143               MULS     R1,R0,R1
   \   00000094   524A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000096   5118               ADDS     R1,R2,R1
   \   00000098   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000009A   000E               LSRS     R0,R0,#+24
   \   0000009C   0822               MOVS     R2,#+8
   \   0000009E   4243               MULS     R2,R0,R2
   \   000000A0   4F4B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   000000A2   9A18               ADDS     R2,R3,R2
   \   000000A4   5268               LDR      R2,[R2, #+4]
   \   000000A6   120D               LSRS     R2,R2,#+20
   \   000000A8   1205               LSLS     R2,R2,#+20
   \   000000AA   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000AC   000E               LSRS     R0,R0,#+24
   \   000000AE   0823               MOVS     R3,#+8
   \   000000B0   4343               MULS     R3,R0,R3
   \   000000B2   4B4C               LDR      R4,??RemoveRfTask_0  ;; RF_TaskTab
   \   000000B4   E318               ADDS     R3,R4,R3
   \   000000B6   DB68               LDR      R3,[R3, #+12]
   \   000000B8   1B03               LSLS     R3,R3,#+12       ;; ZeroExtS R3,R3,#+12,#+12
   \   000000BA   1B0B               LSRS     R3,R3,#+12
   \   000000BC   1343               ORRS     R3,R3,R2
   \   000000BE   4B60               STR      R3,[R1, #+4]
   1530                 RF_TaskTab[Tp].Command.Order=RF_TaskTab[Tp+1].Command.Order;
   \   000000C0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000C2   000E               LSRS     R0,R0,#+24
   \   000000C4   0821               MOVS     R1,#+8
   \   000000C6   4143               MULS     R1,R0,R1
   \   000000C8   454A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   000000CA   5118               ADDS     R1,R2,R1
   \   000000CC   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000CE   000E               LSRS     R0,R0,#+24
   \   000000D0   0822               MOVS     R2,#+8
   \   000000D2   4243               MULS     R2,R0,R2
   \   000000D4   424B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   000000D6   9A18               ADDS     R2,R3,R2
   \   000000D8   5368               LDR      R3,[R2, #+4]
   \   000000DA   424A               LDR      R2,??RemoveRfTask_0+0x4  ;; 0xff0fffff
   \   000000DC   1A40               ANDS     R2,R2,R3
   \   000000DE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000E0   000E               LSRS     R0,R0,#+24
   \   000000E2   0823               MOVS     R3,#+8
   \   000000E4   4343               MULS     R3,R0,R3
   \   000000E6   3E4C               LDR      R4,??RemoveRfTask_0  ;; RF_TaskTab
   \   000000E8   E318               ADDS     R3,R4,R3
   \   000000EA   DB68               LDR      R3,[R3, #+12]
   \   000000EC   1B0D               LSRS     R3,R3,#+20
   \   000000EE   1B05               LSLS     R3,R3,#+20
   \   000000F0   F024               MOVS     R4,#+240
   \   000000F2   2404               LSLS     R4,R4,#+16       ;; #+15728640
   \   000000F4   1C40               ANDS     R4,R4,R3
   \   000000F6   1443               ORRS     R4,R4,R2
   \   000000F8   4C60               STR      R4,[R1, #+4]
   1531                 RF_TaskTab[Tp].Command.Auxi=RF_TaskTab[Tp+1].Command.Auxi;
   \   000000FA   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000FC   000E               LSRS     R0,R0,#+24
   \   000000FE   0821               MOVS     R1,#+8
   \   00000100   4143               MULS     R1,R0,R1
   \   00000102   374A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000104   5118               ADDS     R1,R2,R1
   \   00000106   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000108   000E               LSRS     R0,R0,#+24
   \   0000010A   0822               MOVS     R2,#+8
   \   0000010C   4243               MULS     R2,R0,R2
   \   0000010E   344B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000110   9A18               ADDS     R2,R3,R2
   \   00000112   5268               LDR      R2,[R2, #+4]
   \   00000114   1202               LSLS     R2,R2,#+8        ;; ZeroExtS R2,R2,#+8,#+8
   \   00000116   120A               LSRS     R2,R2,#+8
   \   00000118   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000011A   000E               LSRS     R0,R0,#+24
   \   0000011C   0823               MOVS     R3,#+8
   \   0000011E   4343               MULS     R3,R0,R3
   \   00000120   2F4C               LDR      R4,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000122   E318               ADDS     R3,R4,R3
   \   00000124   DB68               LDR      R3,[R3, #+12]
   \   00000126   1B0E               LSRS     R3,R3,#+24
   \   00000128   1B06               LSLS     R3,R3,#+24
   \   0000012A   1343               ORRS     R3,R3,R2
   \   0000012C   4B60               STR      R3,[R1, #+4]
   1532                 Tp++;
   \   0000012E   401C               ADDS     R0,R0,#+1
   1533               }
   \                     ??RemoveRfTask_1:
   \   00000130   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000132   000E               LSRS     R0,R0,#+24
   \   00000134   0100               MOVS     R1,R0
   \   00000136   491C               ADDS     R1,R1,#+1
   \   00000138   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   0000013A   090C               LSRS     R1,R1,#+16
   \   0000013C   4529               CMP      R1,#+69
   \   0000013E   08D2               BCS      ??RemoveRfTask_3
   \   00000140   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000142   000E               LSRS     R0,R0,#+24
   \   00000144   0821               MOVS     R1,#+8
   \   00000146   4143               MULS     R1,R0,R1
   \   00000148   254A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   0000014A   5118               ADDS     R1,R2,R1
   \   0000014C   097A               LDRB     R1,[R1, #+8]
   \   0000014E   0029               CMP      R1,#+0
   \   00000150   8FD1               BNE      ??RemoveRfTask_2
   1534               
   1535               //usuñ pozosta³oœæ po czyszczeniu
   1536               if ((Tp<RF_Tasks-1) && (RF_TaskTab[Tp].Node))
   \                     ??RemoveRfTask_3:
   \   00000152   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000154   000E               LSRS     R0,R0,#+24
   \   00000156   4528               CMP      R0,#+69
   \   00000158   3ED2               BCS      ??RemoveRfTask_4
   \   0000015A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000015C   000E               LSRS     R0,R0,#+24
   \   0000015E   0821               MOVS     R1,#+8
   \   00000160   4143               MULS     R1,R0,R1
   \   00000162   1F4A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000164   515C               LDRB     R1,[R2, R1]
   \   00000166   0029               CMP      R1,#+0
   \   00000168   36D0               BEQ      ??RemoveRfTask_4
   1537               {
   1538                  RF_TaskTab[Tp].Node=0;
   \   0000016A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000016C   000E               LSRS     R0,R0,#+24
   \   0000016E   0821               MOVS     R1,#+8
   \   00000170   4143               MULS     R1,R0,R1
   \   00000172   1B4A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000174   0023               MOVS     R3,#+0
   \   00000176   5354               STRB     R3,[R2, R1]
   1539                  RF_TaskTab[Tp].Command.ID=0;
   \   00000178   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000017A   000E               LSRS     R0,R0,#+24
   \   0000017C   0821               MOVS     R1,#+8
   \   0000017E   4143               MULS     R1,R0,R1
   \   00000180   174A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   00000182   5118               ADDS     R1,R2,R1
   \   00000184   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000186   000E               LSRS     R0,R0,#+24
   \   00000188   0822               MOVS     R2,#+8
   \   0000018A   4243               MULS     R2,R0,R2
   \   0000018C   144B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   0000018E   9A18               ADDS     R2,R3,R2
   \   00000190   5268               LDR      R2,[R2, #+4]
   \   00000192   120D               LSRS     R2,R2,#+20
   \   00000194   1205               LSLS     R2,R2,#+20
   \   00000196   4A60               STR      R2,[R1, #+4]
   1540                  RF_TaskTab[Tp].Command.Order=0;
   \   00000198   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000019A   000E               LSRS     R0,R0,#+24
   \   0000019C   0821               MOVS     R1,#+8
   \   0000019E   4143               MULS     R1,R0,R1
   \   000001A0   0F4A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   000001A2   5118               ADDS     R1,R2,R1
   \   000001A4   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000001A6   000E               LSRS     R0,R0,#+24
   \   000001A8   0822               MOVS     R2,#+8
   \   000001AA   4243               MULS     R2,R0,R2
   \   000001AC   0C4B               LDR      R3,??RemoveRfTask_0  ;; RF_TaskTab
   \   000001AE   9A18               ADDS     R2,R3,R2
   \   000001B0   5268               LDR      R2,[R2, #+4]
   \   000001B2   0C4B               LDR      R3,??RemoveRfTask_0+0x4  ;; 0xff0fffff
   \   000001B4   1340               ANDS     R3,R3,R2
   \   000001B6   4B60               STR      R3,[R1, #+4]
   1541                  RF_TaskTab[Tp].Command.Auxi=0; 
   \   000001B8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000001BA   000E               LSRS     R0,R0,#+24
   \   000001BC   0821               MOVS     R1,#+8
   \   000001BE   4143               MULS     R1,R0,R1
   \   000001C0   074A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   000001C2   5118               ADDS     R1,R2,R1
   \   000001C4   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000001C6   000E               LSRS     R0,R0,#+24
   \   000001C8   0822               MOVS     R2,#+8
   \   000001CA   5043               MULS     R0,R2,R0
   \   000001CC   044A               LDR      R2,??RemoveRfTask_0  ;; RF_TaskTab
   \   000001CE   1018               ADDS     R0,R2,R0
   \   000001D0   4068               LDR      R0,[R0, #+4]
   \   000001D2   0002               LSLS     R0,R0,#+8        ;; ZeroExtS R0,R0,#+8,#+8
   \   000001D4   000A               LSRS     R0,R0,#+8
   \   000001D6   4860               STR      R0,[R1, #+4]
   1542               } 
   1543           
   1544          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "RemoveRfTask"
   \                     ??RemoveRfTask_4:
   \   000001D8   10BC               POP      {R4}
   \   000001DA   01BC               POP      {R0}
   \   000001DC   0047               BX       R0               ;; return
   \   000001DE   C046               Nop      
   \                     ??RemoveRfTask_0:
   \   000001E0   ........           DC32     RF_TaskTab
   \   000001E4   FFFF0FFF           DC32     0xff0fffff
   1545          
   1546          
   1547          
   1548          //-----------------------------------------------------------------------------
   1549          // Nazwa funkcji :    AddRfTask
   1550          // Funkcja ustawia dodanie zadania dla transmisji Rs
   1551          // Ord - typ rozkazu : odczyt wejœæ, zapis
   1552          // Node - nr wêz³a/urz¹dzeia
   1553          // Reg  - nr rejestru w wêŸle 
   1554          //-----------------------------------------------------------------------------
   1555          // Funkcja zwrca 1- je¿eli powodzenie dodawania zadania
   1556          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1557          char AddRfTask(_OrderType Ord, char Node, char Reg)
   1558          { 
   \                     AddRfTask:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   1559          
   1560              if (NeuronsList[Node-1].NeuronID==0) return 0;
   \   00000002   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000004   090E               LSRS     R1,R1,#+24
   \   00000006   0C23               MOVS     R3,#+12
   \   00000008   4B43               MULS     R3,R1,R3
   \   0000000A   CB4C               LDR      R4,??AddRfTask_0  ;; NeuronsList
   \   0000000C   E318               ADDS     R3,R4,R3
   \   0000000E   083B               SUBS     R3,R3,#+8
   \   00000010   1B68               LDR      R3,[R3, #+0]
   \   00000012   002B               CMP      R3,#+0
   \   00000014   01D1               BNE      ??AddRfTask_1
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   89E1               B        ??AddRfTask_2
   1561             
   1562              //1-dodano zadanie, 0-niedodano
   1563              char OrdExist=0;
   \                     ??AddRfTask_1:
   \   0000001A   0025               MOVS     R5,#+0
   1564              char RfOrd;
   1565              char FreePlace=0;
   \   0000001C   0023               MOVS     R3,#+0
   1566              char FirstOccureNode=0xFF;        //ostatnie wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
   \   0000001E   FF24               MOVS     R4,#+255
   1567              char LastOccureNode=0xFF;        //ostatnie wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
   \   00000020   6E46               MOV      R6,SP
   \   00000022   FF27               MOVS     R7,#+255
   \   00000024   3770               STRB     R7,[R6, #+0]
   1568             
   1569              //zabezpieczenie przed przekroczeniami
   1570              if (Node>NumberNeurons) return 0;
   \   00000026   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000028   090E               LSRS     R1,R1,#+24
   \   0000002A   2429               CMP      R1,#+36
   \   0000002C   01D3               BCC      ??AddRfTask_3
   \   0000002E   0020               MOVS     R0,#+0
   \   00000030   7DE1               B        ??AddRfTask_2
   1571              if (Reg>99) return 0;
   \                     ??AddRfTask_3:
   \   00000032   6B46               MOV      R3,SP
   \   00000034   1B7A               LDRB     R3,[R3, #+8]
   \   00000036   642B               CMP      R3,#+100
   \   00000038   01D3               BCC      ??AddRfTask_4
   \   0000003A   0020               MOVS     R0,#+0
   \   0000003C   77E1               B        ??AddRfTask_2
   1572              
   1573              
   1574              //przepisanie rozkazu na zrozumia³y dla tablicy zadañ RF
   1575              switch (Ord)
   \                     ??AddRfTask_4:
   \   0000003E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000040   000E               LSRS     R0,R0,#+24
   \   00000042   0128               CMP      R0,#+1
   \   00000044   06D0               BEQ      ??AddRfTask_5
   \   00000046   0228               CMP      R0,#+2
   \   00000048   06D0               BEQ      ??AddRfTask_6
   \   0000004A   0428               CMP      R0,#+4
   \   0000004C   06D0               BEQ      ??AddRfTask_7
   \   0000004E   0528               CMP      R0,#+5
   \   00000050   06D0               BEQ      ??AddRfTask_8
   \   00000052   06E0               B        ??AddRfTask_9
   1576              {
   1577                  case SI:      RfOrd=R_RegOrd; break; 
   \                     ??AddRfTask_5:
   \   00000054   0122               MOVS     R2,#+1
   \   00000056   04E0               B        ??AddRfTask_9
   1578                  case SQ:      RfOrd=W_RegOrd; break; 
   \                     ??AddRfTask_6:
   \   00000058   0222               MOVS     R2,#+2
   \   0000005A   02E0               B        ??AddRfTask_9
   1579                  case SNewId:  RfOrd=W_NewIdOrd; break; 
   \                     ??AddRfTask_7:
   \   0000005C   0522               MOVS     R2,#+5
   \   0000005E   00E0               B        ??AddRfTask_9
   1580                  case SBC:     RfOrd=R_BC_Order; break; 
   \                     ??AddRfTask_8:
   \   00000060   0722               MOVS     R2,#+7
   1581              }  
   1582           
   1583          
   1584                
   1585              //Sprawdzenie czy taki rozkaz nie istnieje w tablicy
   1586              char i=0;
   \                     ??AddRfTask_9:
   \   00000062   0020               MOVS     R0,#+0
   \   00000064   3AE0               B        ??AddRfTask_10
   1587              while ((i<RF_Tasks-1) && (OrdExist==0))
   1588              {
   1589                 if ((RF_TaskTab[i].Node==Node) && 
   1590                     (RF_TaskTab[i].Command.ID==NeuronsList[Node-1].NeuronID) &&
   1591                     (RF_TaskTab[i].Command.Order==RfOrd) &&
   1592                     (RF_TaskTab[i].Command.Auxi==Reg))
   \                     ??AddRfTask_11:
   \   00000066   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000068   000E               LSRS     R0,R0,#+24
   \   0000006A   0823               MOVS     R3,#+8
   \   0000006C   4343               MULS     R3,R0,R3
   \   0000006E   B34E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   00000070   F35C               LDRB     R3,[R6, R3]
   \   00000072   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000074   090E               LSRS     R1,R1,#+24
   \   00000076   8B42               CMP      R3,R1
   \   00000078   2FD1               BNE      ??AddRfTask_12
   \   0000007A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000007C   000E               LSRS     R0,R0,#+24
   \   0000007E   0823               MOVS     R3,#+8
   \   00000080   4343               MULS     R3,R0,R3
   \   00000082   AE4E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   00000084   F318               ADDS     R3,R6,R3
   \   00000086   5B68               LDR      R3,[R3, #+4]
   \   00000088   1B03               LSLS     R3,R3,#+12       ;; ZeroExtS R3,R3,#+12,#+12
   \   0000008A   1B0B               LSRS     R3,R3,#+12
   \   0000008C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000008E   090E               LSRS     R1,R1,#+24
   \   00000090   0C26               MOVS     R6,#+12
   \   00000092   4E43               MULS     R6,R1,R6
   \   00000094   A84F               LDR      R7,??AddRfTask_0  ;; NeuronsList
   \   00000096   BE19               ADDS     R6,R7,R6
   \   00000098   083E               SUBS     R6,R6,#+8
   \   0000009A   3668               LDR      R6,[R6, #+0]
   \   0000009C   B342               CMP      R3,R6
   \   0000009E   1CD1               BNE      ??AddRfTask_12
   \   000000A0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000A2   000E               LSRS     R0,R0,#+24
   \   000000A4   0823               MOVS     R3,#+8
   \   000000A6   4343               MULS     R3,R0,R3
   \   000000A8   A44E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000000AA   F318               ADDS     R3,R6,R3
   \   000000AC   5B68               LDR      R3,[R3, #+4]
   \   000000AE   F026               MOVS     R6,#+240
   \   000000B0   3604               LSLS     R6,R6,#+16       ;; #+15728640
   \   000000B2   1E40               ANDS     R6,R6,R3
   \   000000B4   3300               MOVS     R3,R6
   \   000000B6   1B0D               LSRS     R3,R3,#+20
   \   000000B8   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000BA   120E               LSRS     R2,R2,#+24
   \   000000BC   9342               CMP      R3,R2
   \   000000BE   0CD1               BNE      ??AddRfTask_12
   \   000000C0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000C2   000E               LSRS     R0,R0,#+24
   \   000000C4   0823               MOVS     R3,#+8
   \   000000C6   4343               MULS     R3,R0,R3
   \   000000C8   9C4E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000000CA   F318               ADDS     R3,R6,R3
   \   000000CC   5B68               LDR      R3,[R3, #+4]
   \   000000CE   1B0E               LSRS     R3,R3,#+24
   \   000000D0   6E46               MOV      R6,SP
   \   000000D2   367A               LDRB     R6,[R6, #+8]
   \   000000D4   B342               CMP      R3,R6
   \   000000D6   00D1               BNE      ??AddRfTask_12
   1593                    {
   1594                      OrdExist=1;
   \   000000D8   0125               MOVS     R5,#+1
   1595                    }
   1596                
   1597                 i++;
   \                     ??AddRfTask_12:
   \   000000DA   401C               ADDS     R0,R0,#+1
   1598              }
   \                     ??AddRfTask_10:
   \   000000DC   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000DE   000E               LSRS     R0,R0,#+24
   \   000000E0   4528               CMP      R0,#+69
   \   000000E2   03D2               BCS      ??AddRfTask_13
   \   000000E4   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000000E6   2D0E               LSRS     R5,R5,#+24
   \   000000E8   002D               CMP      R5,#+0
   \   000000EA   BCD0               BEQ      ??AddRfTask_11
   1599              
   1600              i=0;
   \                     ??AddRfTask_13:
   \   000000EC   0020               MOVS     R0,#+0
   1601              char Rf_Zad=0; //iloœæ zadañ.  
   \   000000EE   0026               MOVS     R6,#+0
   \   000000F0   2CE0               B        ??AddRfTask_14
   1602              //Odszukanie ostatniego i ewentualnie pierwszego zadania z tym wêz³em - ma to na cenu u³o¿enie zadañ wêz³ów po kolei co jest konieczne do prawid³owego odpytywania sterowników w trybie slave. Sterowniki takie czekaj¹ na wszystkie swoje odpytania a je¿eli wyst¹pi odpytanie innego wêz³a lub ponowne odpytanie rejestru 0 odpytywanego sterownika to prze³¹czaj¹ sie na tryb master, wykonuj¹ w³asne odpytania a nastêpnie prze³¹czaj¹ siê ponownie w trym slave. Pierwszym zadaniem w kolejce zawsze musi byæ odpytanie rejestru 0
   1603              //Obliczenie iloœci zadañ
   1604              while (i<RF_Tasks-1)
   1605              {
   1606                   if (RF_TaskTab[i].Node==Node)
   \                     ??AddRfTask_15:
   \   000000F2   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000F4   000E               LSRS     R0,R0,#+24
   \   000000F6   0823               MOVS     R3,#+8
   \   000000F8   4343               MULS     R3,R0,R3
   \   000000FA   904F               LDR      R7,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000000FC   FB5C               LDRB     R3,[R7, R3]
   \   000000FE   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000100   090E               LSRS     R1,R1,#+24
   \   00000102   8B42               CMP      R3,R1
   \   00000104   18D1               BNE      ??AddRfTask_16
   1607                   {
   1608                     if ((RF_TaskTab[i].Command.Order==R_RegOrd) && (Reg==0) &&  (FirstOccureNode==0xFF))  FirstOccureNode=Rf_Zad; //pierwsze wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
   \   00000106   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000108   000E               LSRS     R0,R0,#+24
   \   0000010A   0823               MOVS     R3,#+8
   \   0000010C   4343               MULS     R3,R0,R3
   \   0000010E   8B4F               LDR      R7,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   00000110   FB18               ADDS     R3,R7,R3
   \   00000112   5B68               LDR      R3,[R3, #+4]
   \   00000114   F027               MOVS     R7,#+240
   \   00000116   3F04               LSLS     R7,R7,#+16       ;; #+15728640
   \   00000118   1F40               ANDS     R7,R7,R3
   \   0000011A   3B00               MOVS     R3,R7
   \   0000011C   1B0D               LSRS     R3,R3,#+20
   \   0000011E   012B               CMP      R3,#+1
   \   00000120   08D1               BNE      ??AddRfTask_17
   \   00000122   6B46               MOV      R3,SP
   \   00000124   1B7A               LDRB     R3,[R3, #+8]
   \   00000126   002B               CMP      R3,#+0
   \   00000128   04D1               BNE      ??AddRfTask_17
   \   0000012A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000012C   240E               LSRS     R4,R4,#+24
   \   0000012E   FF2C               CMP      R4,#+255
   \   00000130   00D1               BNE      ??AddRfTask_17
   \   00000132   3400               MOVS     R4,R6
   1609                     //if (FirstOccureNode==0xFF)  FirstOccureNode=Rf_Zad; //pierwsze wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
   1610                     LastOccureNode=Rf_Zad;                                               //ostatnie wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
   \                     ??AddRfTask_17:
   \   00000134   6B46               MOV      R3,SP
   \   00000136   1E70               STRB     R6,[R3, #+0]
   1611                   }
   1612                   
   1613                   if (RF_TaskTab[i].Node!=0) Rf_Zad++;
   \                     ??AddRfTask_16:
   \   00000138   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000013A   000E               LSRS     R0,R0,#+24
   \   0000013C   0823               MOVS     R3,#+8
   \   0000013E   4343               MULS     R3,R0,R3
   \   00000140   7E4F               LDR      R7,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   00000142   FB5C               LDRB     R3,[R7, R3]
   \   00000144   002B               CMP      R3,#+0
   \   00000146   00D0               BEQ      ??AddRfTask_18
   \   00000148   761C               ADDS     R6,R6,#+1
   1614                   i++;    
   \                     ??AddRfTask_18:
   \   0000014A   401C               ADDS     R0,R0,#+1
   1615              }
   \                     ??AddRfTask_14:
   \   0000014C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000014E   000E               LSRS     R0,R0,#+24
   \   00000150   4528               CMP      R0,#+69
   \   00000152   CED3               BCC      ??AddRfTask_15
   1616              if(Rf_Zad>=RF_Tasks-1) return 0;    //je¿eli nie ma ju¿ miejsca na nowe zadania to wyjdŸ z funkcji
   \   00000154   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000156   360E               LSRS     R6,R6,#+24
   \   00000158   452E               CMP      R6,#+69
   \   0000015A   01D3               BCC      ??AddRfTask_19
   \   0000015C   0020               MOVS     R0,#+0
   \   0000015E   E6E0               B        ??AddRfTask_2
   1617              
   1618              
   1619              
   1620              //je¿eli rozkaz nie istnieje to dodaj. Je¿eli na liœcie s¹ ju¿ 
   1621              if (OrdExist==0)
   \                     ??AddRfTask_19:
   \   00000160   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000162   2D0E               LSRS     R5,R5,#+24
   \   00000164   002D               CMP      R5,#+0
   \   00000166   00D0               BEQ      .+4
   \   00000168   E0E0               B        ??AddRfTask_20
   1622              {
   1623                if (FirstOccureNode!=0xFF)                                                //znajdŸ miejsce w tablicy zadañ dla nowego zadania
   \   0000016A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000016C   240E               LSRS     R4,R4,#+24
   \   0000016E   FF2C               CMP      R4,#+255
   \   00000170   01D0               BEQ      ??AddRfTask_21
   1624                {
   1625                   FreePlace=FirstOccureNode;                                              //miejsce w tablicy na nowe zadanie przed dotychczasowymi zadaniami
   \   00000172   2300               MOVS     R3,R4
   \   00000174   08E0               B        ??AddRfTask_22
   1626                }
   1627                else if (LastOccureNode!=0xFF)  
   \                     ??AddRfTask_21:
   \   00000176   6846               MOV      R0,SP
   \   00000178   0078               LDRB     R0,[R0, #+0]
   \   0000017A   FF28               CMP      R0,#+255
   \   0000017C   03D0               BEQ      ??AddRfTask_23
   1628                {
   1629                   FreePlace=LastOccureNode+1;                                             //miejsce w tablicy na nowe zadanie za dotychczasowymi zadaniami
   \   0000017E   6846               MOV      R0,SP
   \   00000180   0378               LDRB     R3,[R0, #+0]
   \   00000182   5B1C               ADDS     R3,R3,#+1
   \   00000184   00E0               B        ??AddRfTask_22
   1630                }else{
   1631                   FreePlace=Rf_Zad;                                                          //miejsce w tablicy na nowe zadanie
   \                     ??AddRfTask_23:
   \   00000186   3300               MOVS     R3,R6
   1632                }
   1633                
   1634                //je¿eli zadanie ma byæ wprowadzone pomiêdzy inne zadania
   1635                if (((FirstOccureNode!=0xFF) && (FirstOccureNode+1>Rf_Zad)) || 
   1636                    ((LastOccureNode!=0xFF)  && (LastOccureNode<Rf_Zad)))
   \                     ??AddRfTask_22:
   \   00000188   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000018A   240E               LSRS     R4,R4,#+24
   \   0000018C   FF2C               CMP      R4,#+255
   \   0000018E   06D0               BEQ      ??AddRfTask_24
   \   00000190   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000192   360E               LSRS     R6,R6,#+24
   \   00000194   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000196   240E               LSRS     R4,R4,#+24
   \   00000198   641C               ADDS     R4,R4,#+1
   \   0000019A   A642               CMP      R6,R4
   \   0000019C   09DB               BLT      ??AddRfTask_25
   \                     ??AddRfTask_24:
   \   0000019E   6846               MOV      R0,SP
   \   000001A0   0078               LDRB     R0,[R0, #+0]
   \   000001A2   FF28               CMP      R0,#+255
   \   000001A4   72D0               BEQ      ??AddRfTask_26
   \   000001A6   6846               MOV      R0,SP
   \   000001A8   0078               LDRB     R0,[R0, #+0]
   \   000001AA   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000001AC   360E               LSRS     R6,R6,#+24
   \   000001AE   B042               CMP      R0,R6
   \   000001B0   6CD2               BCS      ??AddRfTask_26
   1637                {
   1638                  //rozsuniêcie zadañ
   1639                  signed char  Pz=Rf_Zad-1;
   \                     ??AddRfTask_25:
   \   000001B2   741E               SUBS     R4,R6,#+1
   \   000001B4   5EE0               B        ??AddRfTask_27
   1640                  while (Pz>=FreePlace)
   1641                  {
   1642                     RF_TaskTab[Pz+1].Node=RF_TaskTab[Pz].Node;
   \                     ??AddRfTask_28:
   \   000001B6   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   000001B8   2416               ASRS     R4,R4,#+24
   \   000001BA   0820               MOVS     R0,#+8
   \   000001BC   6043               MULS     R0,R4,R0
   \   000001BE   5F4D               LDR      R5,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000001C0   2818               ADDS     R0,R5,R0
   \   000001C2   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   000001C4   2416               ASRS     R4,R4,#+24
   \   000001C6   0825               MOVS     R5,#+8
   \   000001C8   6543               MULS     R5,R4,R5
   \   000001CA   5C4E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000001CC   755D               LDRB     R5,[R6, R5]
   \   000001CE   0572               STRB     R5,[R0, #+8]
   1643                     RF_TaskTab[Pz+1].Command.ID=RF_TaskTab[Pz].Command.ID;
   \   000001D0   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   000001D2   2416               ASRS     R4,R4,#+24
   \   000001D4   0820               MOVS     R0,#+8
   \   000001D6   6043               MULS     R0,R4,R0
   \   000001D8   584D               LDR      R5,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000001DA   2818               ADDS     R0,R5,R0
   \   000001DC   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   000001DE   2416               ASRS     R4,R4,#+24
   \   000001E0   0825               MOVS     R5,#+8
   \   000001E2   6543               MULS     R5,R4,R5
   \   000001E4   554E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000001E6   7519               ADDS     R5,R6,R5
   \   000001E8   ED68               LDR      R5,[R5, #+12]
   \   000001EA   2D0D               LSRS     R5,R5,#+20
   \   000001EC   2D05               LSLS     R5,R5,#+20
   \   000001EE   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   000001F0   2416               ASRS     R4,R4,#+24
   \   000001F2   0826               MOVS     R6,#+8
   \   000001F4   6643               MULS     R6,R4,R6
   \   000001F6   514F               LDR      R7,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000001F8   BE19               ADDS     R6,R7,R6
   \   000001FA   7668               LDR      R6,[R6, #+4]
   \   000001FC   3603               LSLS     R6,R6,#+12       ;; ZeroExtS R6,R6,#+12,#+12
   \   000001FE   360B               LSRS     R6,R6,#+12
   \   00000200   2E43               ORRS     R6,R6,R5
   \   00000202   C660               STR      R6,[R0, #+12]
   1644                     RF_TaskTab[Pz+1].Command.Order=RF_TaskTab[Pz].Command.Order;
   \   00000204   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   00000206   2416               ASRS     R4,R4,#+24
   \   00000208   0820               MOVS     R0,#+8
   \   0000020A   6043               MULS     R0,R4,R0
   \   0000020C   4B4D               LDR      R5,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   0000020E   2818               ADDS     R0,R5,R0
   \   00000210   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   00000212   2416               ASRS     R4,R4,#+24
   \   00000214   0825               MOVS     R5,#+8
   \   00000216   6543               MULS     R5,R4,R5
   \   00000218   484E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   0000021A   7519               ADDS     R5,R6,R5
   \   0000021C   EE68               LDR      R6,[R5, #+12]
   \   0000021E   484D               LDR      R5,??AddRfTask_0+0x8  ;; 0xff0fffff
   \   00000220   3540               ANDS     R5,R5,R6
   \   00000222   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   00000224   2416               ASRS     R4,R4,#+24
   \   00000226   0826               MOVS     R6,#+8
   \   00000228   6643               MULS     R6,R4,R6
   \   0000022A   444F               LDR      R7,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   0000022C   BE19               ADDS     R6,R7,R6
   \   0000022E   7668               LDR      R6,[R6, #+4]
   \   00000230   360D               LSRS     R6,R6,#+20
   \   00000232   3705               LSLS     R7,R6,#+20
   \   00000234   F026               MOVS     R6,#+240
   \   00000236   3604               LSLS     R6,R6,#+16       ;; #+15728640
   \   00000238   3E40               ANDS     R6,R6,R7
   \   0000023A   2E43               ORRS     R6,R6,R5
   \   0000023C   C660               STR      R6,[R0, #+12]
   1645                     RF_TaskTab[Pz+1].Command.Auxi=RF_TaskTab[Pz].Command.Auxi;
   \   0000023E   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   00000240   2416               ASRS     R4,R4,#+24
   \   00000242   0820               MOVS     R0,#+8
   \   00000244   6043               MULS     R0,R4,R0
   \   00000246   3D4D               LDR      R5,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   00000248   2818               ADDS     R0,R5,R0
   \   0000024A   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   0000024C   2416               ASRS     R4,R4,#+24
   \   0000024E   0825               MOVS     R5,#+8
   \   00000250   6543               MULS     R5,R4,R5
   \   00000252   3A4E               LDR      R6,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   00000254   7519               ADDS     R5,R6,R5
   \   00000256   ED68               LDR      R5,[R5, #+12]
   \   00000258   2D02               LSLS     R5,R5,#+8        ;; ZeroExtS R5,R5,#+8,#+8
   \   0000025A   2D0A               LSRS     R5,R5,#+8
   \   0000025C   2406               LSLS     R4,R4,#+24       ;; SignExtS R4,R4,#+24,#+24
   \   0000025E   2416               ASRS     R4,R4,#+24
   \   00000260   0826               MOVS     R6,#+8
   \   00000262   6643               MULS     R6,R4,R6
   \   00000264   354F               LDR      R7,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   00000266   BE19               ADDS     R6,R7,R6
   \   00000268   7668               LDR      R6,[R6, #+4]
   \   0000026A   360E               LSRS     R6,R6,#+24
   \   0000026C   3606               LSLS     R6,R6,#+24
   \   0000026E   2E43               ORRS     R6,R6,R5
   \   00000270   C660               STR      R6,[R0, #+12]
   1646                     Pz--;
   \   00000272   641E               SUBS     R4,R4,#+1
   1647                  }
   \                     ??AddRfTask_27:
   \   00000274   2000               MOVS     R0,R4
   \   00000276   0006               LSLS     R0,R0,#+24       ;; SignExtS R0,R0,#+24,#+24
   \   00000278   0016               ASRS     R0,R0,#+24
   \   0000027A   1D00               MOVS     R5,R3
   \   0000027C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000027E   2D0E               LSRS     R5,R5,#+24
   \   00000280   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000282   0014               ASRS     R0,R0,#+16
   \   00000284   2D04               LSLS     R5,R5,#+16       ;; SignExtS R5,R5,#+16,#+16
   \   00000286   2D14               ASRS     R5,R5,#+16
   \   00000288   A842               CMP      R0,R5
   \   0000028A   94DA               BGE      ??AddRfTask_28
   1648                }
   1649                
   1650                 //while ((FreePlace<RF_Tasks) && (RF_TaskTab[FreePlace].Node!=0)) FreePlace++;   //tak by³o do wersji 1.2 w³acznie
   1651                if (FreePlace<RF_Tasks-1)     //jezeli jest miejsce w tablicy to dodaj
   \                     ??AddRfTask_26:
   \   0000028C   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   0000028E   1B0E               LSRS     R3,R3,#+24
   \   00000290   452B               CMP      R3,#+69
   \   00000292   4BD2               BCS      ??AddRfTask_20
   1652                {
   1653                  RF_TaskTab[FreePlace].Node=Node;
   \   00000294   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000296   1B0E               LSRS     R3,R3,#+24
   \   00000298   0820               MOVS     R0,#+8
   \   0000029A   5843               MULS     R0,R3,R0
   \   0000029C   274C               LDR      R4,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   0000029E   2154               STRB     R1,[R4, R0]
   1654                  RF_TaskTab[FreePlace].Command.ID=NeuronsList[Node-1].NeuronID;
   \   000002A0   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   000002A2   1B0E               LSRS     R3,R3,#+24
   \   000002A4   0820               MOVS     R0,#+8
   \   000002A6   5843               MULS     R0,R3,R0
   \   000002A8   244C               LDR      R4,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000002AA   2018               ADDS     R0,R4,R0
   \   000002AC   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   000002AE   1B0E               LSRS     R3,R3,#+24
   \   000002B0   0824               MOVS     R4,#+8
   \   000002B2   5C43               MULS     R4,R3,R4
   \   000002B4   214D               LDR      R5,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000002B6   2C19               ADDS     R4,R5,R4
   \   000002B8   6468               LDR      R4,[R4, #+4]
   \   000002BA   240D               LSRS     R4,R4,#+20
   \   000002BC   2405               LSLS     R4,R4,#+20
   \   000002BE   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000002C0   090E               LSRS     R1,R1,#+24
   \   000002C2   0C25               MOVS     R5,#+12
   \   000002C4   6943               MULS     R1,R5,R1
   \   000002C6   1C4D               LDR      R5,??AddRfTask_0  ;; NeuronsList
   \   000002C8   6918               ADDS     R1,R5,R1
   \   000002CA   0839               SUBS     R1,R1,#+8
   \   000002CC   0968               LDR      R1,[R1, #+0]
   \   000002CE   0903               LSLS     R1,R1,#+12       ;; ZeroExtS R1,R1,#+12,#+12
   \   000002D0   090B               LSRS     R1,R1,#+12
   \   000002D2   2143               ORRS     R1,R1,R4
   \   000002D4   4160               STR      R1,[R0, #+4]
   1655                  RF_TaskTab[FreePlace].Command.Order=RfOrd;
   \   000002D6   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   000002D8   1B0E               LSRS     R3,R3,#+24
   \   000002DA   0820               MOVS     R0,#+8
   \   000002DC   5843               MULS     R0,R3,R0
   \   000002DE   1749               LDR      R1,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000002E0   0818               ADDS     R0,R1,R0
   \   000002E2   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   000002E4   1B0E               LSRS     R3,R3,#+24
   \   000002E6   0821               MOVS     R1,#+8
   \   000002E8   5943               MULS     R1,R3,R1
   \   000002EA   144C               LDR      R4,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   000002EC   6118               ADDS     R1,R4,R1
   \   000002EE   4968               LDR      R1,[R1, #+4]
   \   000002F0   134C               LDR      R4,??AddRfTask_0+0x8  ;; 0xff0fffff
   \   000002F2   0C40               ANDS     R4,R4,R1
   \   000002F4   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000002F6   120E               LSRS     R2,R2,#+24
   \   000002F8   1105               LSLS     R1,R2,#+20
   \   000002FA   F022               MOVS     R2,#+240
   \   000002FC   1204               LSLS     R2,R2,#+16       ;; #+15728640
   \   000002FE   0A40               ANDS     R2,R2,R1
   \   00000300   2243               ORRS     R2,R2,R4
   \   00000302   4260               STR      R2,[R0, #+4]
   1656                  RF_TaskTab[FreePlace].Command.Auxi=Reg;
   \   00000304   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000306   1B0E               LSRS     R3,R3,#+24
   \   00000308   0820               MOVS     R0,#+8
   \   0000030A   5843               MULS     R0,R3,R0
   \   0000030C   0B49               LDR      R1,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   0000030E   0818               ADDS     R0,R1,R0
   \   00000310   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   00000312   1B0E               LSRS     R3,R3,#+24
   \   00000314   0821               MOVS     R1,#+8
   \   00000316   4B43               MULS     R3,R1,R3
   \   00000318   0849               LDR      R1,??AddRfTask_0+0x4  ;; RF_TaskTab
   \   0000031A   C918               ADDS     R1,R1,R3
   \   0000031C   4968               LDR      R1,[R1, #+4]
   \   0000031E   0902               LSLS     R1,R1,#+8        ;; ZeroExtS R1,R1,#+8,#+8
   \   00000320   090A               LSRS     R1,R1,#+8
   \   00000322   6A46               MOV      R2,SP
   \   00000324   127A               LDRB     R2,[R2, #+8]
   \   00000326   1206               LSLS     R2,R2,#+24
   \   00000328   0A43               ORRS     R2,R2,R1
   \   0000032A   4260               STR      R2,[R0, #+4]
   1657                  
   1658                }
   1659                
   1660                
   1661              }
   1662          
   1663              return 1; 
   \                     ??AddRfTask_20:
   \   0000032C   0120               MOVS     R0,#+1
   \                     ??AddRfTask_2:
   \   0000032E   03B0               ADD      SP,SP,#+12
   \   00000330   F0BC               POP      {R4-R7}
   \   00000332   02BC               POP      {R1}
   \   00000334   0847               BX       R1               ;; return
   \   00000336   C046               Nop      
   \                     ??AddRfTask_0:
   \   00000338   ........           DC32     NeuronsList
   \   0000033C   ........           DC32     RF_TaskTab
   \   00000340   FFFF0FFF           DC32     0xff0fffff
   1664          
   1665          
   1666          }//_______________________ Koniec funkcji  AddRfTask _________________
   1667          
   1668          
   1669          
   1670          
   1671          
   1672          
   1673          

   \                                 In section Debug.txt, align 4, keep-with-next
   1674          char AddRfTaskTMP(_OrderType Ord, char Node, char Reg)
   1675          { 
   \                     AddRfTaskTMP:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1676          
   1677              if (NeuronsList[Node-1].NeuronID==0) return 0;
   \   00000002   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000004   090E               LSRS     R1,R1,#+24
   \   00000006   0C23               MOVS     R3,#+12
   \   00000008   4B43               MULS     R3,R1,R3
   \   0000000A   184C               LDR      R4,??AddRfTaskTMP_0  ;; NeuronsList
   \   0000000C   E318               ADDS     R3,R4,R3
   \   0000000E   083B               SUBS     R3,R3,#+8
   \   00000010   1B68               LDR      R3,[R3, #+0]
   \   00000012   002B               CMP      R3,#+0
   \   00000014   01D1               BNE      ??AddRfTaskTMP_1
   \   00000016   0020               MOVS     R0,#+0
   \   00000018   25E0               B        ??AddRfTaskTMP_2
   1678             
   1679              //1-dodano zadanie, 0-niedodano
   1680              char OrdExist=0;
                          ^
Warning[Pe177]: variable "OrdExist" was declared but never referenced
   \                     ??AddRfTaskTMP_1:
   \   0000001A   0023               MOVS     R3,#+0
   1681              char RfOrd;
                          ^
Warning[Pe550]: variable "RfOrd" was set but never used
   1682              char FreePlace=0;
                          ^
Warning[Pe177]: variable "FreePlace" was declared but never referenced
   \   0000001C   0024               MOVS     R4,#+0
   1683              char FirstOccureNode=0xFF;        //ostatnie wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
                          ^
Warning[Pe177]: variable "FirstOccureNode" was declared but never referenced
   \   0000001E   FF25               MOVS     R5,#+255
   1684              char LastOccureNode=0xFF;        //ostatnie wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
                          ^
Warning[Pe177]: variable "LastOccureNode" was declared but never referenced
   \   00000020   FF26               MOVS     R6,#+255
   1685             
   1686              //zabezpieczenie przed przekroczeniami
   1687              if (Node>NumberNeurons) return 0;
   \   00000022   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000024   090E               LSRS     R1,R1,#+24
   \   00000026   2429               CMP      R1,#+36
   \   00000028   01D3               BCC      ??AddRfTaskTMP_3
   \   0000002A   0020               MOVS     R0,#+0
   \   0000002C   1BE0               B        ??AddRfTaskTMP_2
   1688              if (Reg>99) return 0;
   \                     ??AddRfTaskTMP_3:
   \   0000002E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000030   120E               LSRS     R2,R2,#+24
   \   00000032   642A               CMP      R2,#+100
   \   00000034   01D3               BCC      ??AddRfTaskTMP_4
   \   00000036   0020               MOVS     R0,#+0
   \   00000038   15E0               B        ??AddRfTaskTMP_2
   1689              
   1690              
   1691              //przepisanie rozkazu na zrozumia³y dla tablicy zadañ RF
   1692              switch (Ord)
   \                     ??AddRfTaskTMP_4:
   \   0000003A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000003C   000E               LSRS     R0,R0,#+24
   \   0000003E   0128               CMP      R0,#+1
   \   00000040   06D0               BEQ      ??AddRfTaskTMP_5
   \   00000042   0228               CMP      R0,#+2
   \   00000044   06D0               BEQ      ??AddRfTaskTMP_6
   \   00000046   0428               CMP      R0,#+4
   \   00000048   06D0               BEQ      ??AddRfTaskTMP_7
   \   0000004A   0528               CMP      R0,#+5
   \   0000004C   06D0               BEQ      ??AddRfTaskTMP_8
   \   0000004E   06E0               B        ??AddRfTaskTMP_9
   1693              {
   1694                  case SI:      RfOrd=R_RegOrd; break; 
   \                     ??AddRfTaskTMP_5:
   \   00000050   0120               MOVS     R0,#+1
   \   00000052   04E0               B        ??AddRfTaskTMP_9
   1695                  case SQ:      RfOrd=W_RegOrd; break; 
   \                     ??AddRfTaskTMP_6:
   \   00000054   0220               MOVS     R0,#+2
   \   00000056   02E0               B        ??AddRfTaskTMP_9
   1696                  case SNewId:  RfOrd=W_NewIdOrd; break; 
   \                     ??AddRfTaskTMP_7:
   \   00000058   0520               MOVS     R0,#+5
   \   0000005A   00E0               B        ??AddRfTaskTMP_9
   1697                  case SBC:     RfOrd=R_BC_Order; break; 
   \                     ??AddRfTaskTMP_8:
   \   0000005C   0720               MOVS     R0,#+7
   1698              }  
   1699           
   1700          
   1701               
   1702             /*
   1703              //Sprawdzenie czy taki rozkaz nie istnieje w tablicy
   1704              char i=0;
   1705              while ((i<35) && (OrdExist==0))
   1706              {
   1707                 if ((RF_TaskTab[i].Node==Node) && 
   1708                     (RF_TaskTab[i].Command.ID==NeuronsList[Node-1].NeuronID) &&
   1709                     (RF_TaskTab[i].Command.Order==R_RegOrd) &&
   1710                     (RF_TaskTab[i].Command.Auxi==Reg))
   1711                    {
   1712                      OrdExist=1;
   1713                    }
   1714                
   1715                 i++;
   1716              }
   1717              */
   1718              Delay(0xFF);
   \                     ??AddRfTaskTMP_9:
   \   0000005E   FF20               MOVS     R0,#+255
   \   00000060   ........           BL       Delay
   1719            
   1720           /*
   1721              while ((i<35) && (OrdExist==0))
   1722              {
   1723                 if ((RF_TaskTab[i].Node==Node) && 
   1724                     (RF_TaskTab[i].Command.ID==NeuronsList[Node-1].NeuronID) &&
   1725                     (RF_TaskTab[i].Command.Order==R_RegOrd) &&
   1726                     (RF_TaskTab[i].Command.Auxi==Reg))
   1727                    {
   1728                      OrdExist=1;
   1729                    }
   1730                
   1731                 i++;
   1732              }
   1733           */ 
   1734          
   1735              
   1736          /*
   1737              i=0;
   1738              char Rf_Zad=0; //iloœæ zadañ.  
   1739              //Odszukanie ostatniego i ewentualnie pierwszego zadania z tym wêz³em - ma to na cenu u³o¿enie zadañ wêz³ów po kolei co jest konieczne do prawid³owego odpytywania sterowników w trybie slave. Sterowniki takie czekaj¹ na wszystkie swoje odpytania a je¿eli wyst¹pi odpytanie innego wêz³a lub ponowne odpytanie rejestru 0 odpytywanego sterownika to prze³¹czaj¹ sie na tryb master, wykonuj¹ w³asne odpytania a nastêpnie prze³¹czaj¹ siê ponownie w trym slave. Pierwszym zadaniem w kolejce zawsze musi byæ odpytanie rejestru 0
   1740              //Obliczenie iloœci zadañ
   1741              while (i<RF_Tasks-1)
   1742              {
   1743                   if (RF_TaskTab[i].Node==Node)
   1744                   {
   1745                     if ((RfOrd==R_RegOrd) && (Reg==0) &&  (FirstOccureNode==0xFF))  FirstOccureNode=Rf_Zad; //pierwsze wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
   1746                     LastOccureNode=Rf_Zad;                                               //ostatnie wyst¹pienie zadania tego wêz³a. 0xFF oznacza ¿e nie znaleziono ¿adnego inneo zadania z tym wêz³em
   1747                   }
   1748                   
   1749                   if (RF_TaskTab[i].Node!=0) Rf_Zad++;
   1750                   i++;    
   1751              }
   1752              if(Rf_Zad>=RF_Tasks-1) return 0;    //je¿eli nie ma ju¿ miejsca na nowe zadania to wyjdŸ z funkcji
   1753            */  
   1754             /* 
   1755             
   1756              //je¿eli rozkaz nie istnieje to dodaj. Je¿eli na liœcie s¹ ju¿ 
   1757              if (OrdExist==0)
   1758              {
   1759                if (FirstOccureNode!=0xFF)                                                //znajdŸ miejsce w tablicy zadañ dla nowego zadania
   1760                {
   1761                   FreePlace=FirstOccureNode;                                              //miejsce w tablicy na nowe zadanie przed dotychczasowymi zadaniami
   1762                }
   1763                else if (LastOccureNode!=0xFF)  
   1764                {
   1765                   FreePlace=LastOccureNode+1;                                             //miejsce w tablicy na nowe zadanie za dotychczasowymi zadaniami
   1766                }else{
   1767                   FreePlace=Rf_Zad;                                                          //miejsce w tablicy na nowe zadanie
   1768                }
   1769                
   1770                //je¿eli zadanie ma byæ wprowadzone pomiêdzy inne zadania
   1771                if (((FirstOccureNode!=0xFF) && (FirstOccureNode+1>Rf_Zad)) || 
   1772                    ((LastOccureNode!=0xFF)  && (LastOccureNode<Rf_Zad)))
   1773                {
   1774                  //rozsuniêcie zadañ
   1775                  unsigned char  Pz=Rf_Zad-1;
   1776                  while (Pz>=FreePlace)
   1777                  {
   1778                     RF_TaskTab[Pz+1].Node=RF_TaskTab[Pz].Node;
   1779                     RF_TaskTab[Pz+1].Command.ID=RF_TaskTab[Pz].Command.ID;
   1780                     RF_TaskTab[Pz+1].Command.Order=RF_TaskTab[Pz].Command.Order;
   1781                     RF_TaskTab[Pz+1].Command.Auxi=RF_TaskTab[Pz].Command.Auxi;
   1782                     Pz--;
   1783                  }
   1784                }
   1785                
   1786                 //while ((FreePlace<RF_Tasks) && (RF_TaskTab[FreePlace].Node!=0)) FreePlace++;   //tak by³o do wersji 1.2 w³acznie
   1787                if (FreePlace<RF_Tasks-1)     //jezeli jest miejsce w tablicy to dodaj
   1788                {
   1789                  RF_TaskTab[FreePlace].Node=Node;
   1790                  RF_TaskTab[FreePlace].Command.ID=NeuronsList[Node-1].NeuronID;
   1791                  RF_TaskTab[FreePlace].Command.Order=RfOrd;
   1792                  RF_TaskTab[FreePlace].Command.Auxi=Reg;
   1793                  
   1794                }
   1795                
   1796                
   1797              }
   1798              */
   1799             
   1800            
   1801          
   1802            /*
   1803            RF_TaskTab[5].Node=Node;
   1804            RF_TaskTab[5].Command.ID=100008;
   1805            RF_TaskTab[5].Command.Order=R_RegOrd;
   1806            RF_TaskTab[5].Command.Auxi=Reg;
   1807            */
   1808              return 1; 
   \   00000064   0120               MOVS     R0,#+1
   \                     ??AddRfTaskTMP_2:
   \   00000066   70BC               POP      {R4-R6}
   \   00000068   02BC               POP      {R1}
   \   0000006A   0847               BX       R1               ;; return
   \                     ??AddRfTaskTMP_0:
   \   0000006C   ........           DC32     NeuronsList
   1809          
   1810          
   1811          }//_______________________ Koniec funkcji  AddRfTask _________________
   1812          
   1813          
   1814          
   1815          
   1816          
   1817          //-----------------------------------------------------------------------------
   1818          // Nazwa funkcji :    SetTask
   1819          // Funkcja ustawia zadania transmisji RS oraz RF
   1820          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1821          void SetTask(_ProgramTab *ProgTab)
   1822          { 
   \                     SetTask:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   86B0               SUB      SP,SP,#+24
   1823                _Procedure Proc; 
   1824                _OrderType SetOrd=NonOrd;
   \   00000004   0024               MOVS     R4,#+0
   1825                char       RegOrd=0;
   \   00000006   0025               MOVS     R5,#+0
   1826            
   1827                
   1828                //wyczyszczenie tablicy zadañ
   1829                for (char i=0; i<RF_Tasks; i++) 
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   37E0               B        ??SetTask_0
   1830                {
   1831                  RF_TaskTab[i].Node=0;
   \                     ??SetTask_1:
   \   0000000C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000000E   000E               LSRS     R0,R0,#+24
   \   00000010   0821               MOVS     R1,#+8
   \   00000012   4143               MULS     R1,R0,R1
   \   00000014   C74A               LDR      R2,??SetTask_2   ;; RF_TaskTab
   \   00000016   0023               MOVS     R3,#+0
   \   00000018   5354               STRB     R3,[R2, R1]
   1832                  RF_TaskTab[i].Command.ID=0;
   \   0000001A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000001C   000E               LSRS     R0,R0,#+24
   \   0000001E   0821               MOVS     R1,#+8
   \   00000020   4143               MULS     R1,R0,R1
   \   00000022   C44A               LDR      R2,??SetTask_2   ;; RF_TaskTab
   \   00000024   5118               ADDS     R1,R2,R1
   \   00000026   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000028   000E               LSRS     R0,R0,#+24
   \   0000002A   0822               MOVS     R2,#+8
   \   0000002C   4243               MULS     R2,R0,R2
   \   0000002E   C14B               LDR      R3,??SetTask_2   ;; RF_TaskTab
   \   00000030   9A18               ADDS     R2,R3,R2
   \   00000032   5268               LDR      R2,[R2, #+4]
   \   00000034   120D               LSRS     R2,R2,#+20
   \   00000036   1205               LSLS     R2,R2,#+20
   \   00000038   4A60               STR      R2,[R1, #+4]
   1833                  RF_TaskTab[i].Command.Order=0;
   \   0000003A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000003C   000E               LSRS     R0,R0,#+24
   \   0000003E   0821               MOVS     R1,#+8
   \   00000040   4143               MULS     R1,R0,R1
   \   00000042   BC4A               LDR      R2,??SetTask_2   ;; RF_TaskTab
   \   00000044   5118               ADDS     R1,R2,R1
   \   00000046   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000048   000E               LSRS     R0,R0,#+24
   \   0000004A   0822               MOVS     R2,#+8
   \   0000004C   4243               MULS     R2,R0,R2
   \   0000004E   B94B               LDR      R3,??SetTask_2   ;; RF_TaskTab
   \   00000050   9A18               ADDS     R2,R3,R2
   \   00000052   5268               LDR      R2,[R2, #+4]
   \   00000054   B84B               LDR      R3,??SetTask_2+0x4  ;; 0xff0fffff
   \   00000056   1340               ANDS     R3,R3,R2
   \   00000058   4B60               STR      R3,[R1, #+4]
   1834                  RF_TaskTab[i].Command.Auxi=0;
   \   0000005A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000005C   000E               LSRS     R0,R0,#+24
   \   0000005E   0821               MOVS     R1,#+8
   \   00000060   4143               MULS     R1,R0,R1
   \   00000062   B44A               LDR      R2,??SetTask_2   ;; RF_TaskTab
   \   00000064   5118               ADDS     R1,R2,R1
   \   00000066   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000068   000E               LSRS     R0,R0,#+24
   \   0000006A   0822               MOVS     R2,#+8
   \   0000006C   4243               MULS     R2,R0,R2
   \   0000006E   B14B               LDR      R3,??SetTask_2   ;; RF_TaskTab
   \   00000070   9A18               ADDS     R2,R3,R2
   \   00000072   5268               LDR      R2,[R2, #+4]
   \   00000074   1202               LSLS     R2,R2,#+8        ;; ZeroExtS R2,R2,#+8,#+8
   \   00000076   120A               LSRS     R2,R2,#+8
   \   00000078   4A60               STR      R2,[R1, #+4]
   1835                }
   \   0000007A   401C               ADDS     R0,R0,#+1
   \                     ??SetTask_0:
   \   0000007C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000007E   000E               LSRS     R0,R0,#+24
   \   00000080   4628               CMP      R0,#+70
   \   00000082   C3D3               BCC      ??SetTask_1
   1836                
   1837                for (char node=0; node<NumberNeurons; node++)
   \   00000084   0024               MOVS     R4,#+0
   \   00000086   20E0               B        ??SetTask_3
   1838                {
   1839                   if((NeuronsList[node].NeuronType!=NoneNodeType) && (NeuronsList[node].NeuronType>=BeginRF) && (NeuronsList[node].NeuronType<=EndRF))  AddRfTask(SI, node+1, 0);
   \                     ??SetTask_4:
   \   00000088   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000008A   240E               LSRS     R4,R4,#+24
   \   0000008C   0C20               MOVS     R0,#+12
   \   0000008E   6043               MULS     R0,R4,R0
   \   00000090   AA49               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   00000092   085C               LDRB     R0,[R1, R0]
   \   00000094   0028               CMP      R0,#+0
   \   00000096   17D0               BEQ      ??SetTask_5
   \   00000098   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000009A   240E               LSRS     R4,R4,#+24
   \   0000009C   0C20               MOVS     R0,#+12
   \   0000009E   6043               MULS     R0,R4,R0
   \   000000A0   A649               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   000000A2   085C               LDRB     R0,[R1, R0]
   \   000000A4   0228               CMP      R0,#+2
   \   000000A6   0FD3               BCC      ??SetTask_5
   \   000000A8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000AA   240E               LSRS     R4,R4,#+24
   \   000000AC   0C20               MOVS     R0,#+12
   \   000000AE   6043               MULS     R0,R4,R0
   \   000000B0   A249               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   000000B2   085C               LDRB     R0,[R1, R0]
   \   000000B4   0628               CMP      R0,#+6
   \   000000B6   07D2               BCS      ??SetTask_5
   \   000000B8   0022               MOVS     R2,#+0
   \   000000BA   2100               MOVS     R1,R4
   \   000000BC   491C               ADDS     R1,R1,#+1
   \   000000BE   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000C0   090E               LSRS     R1,R1,#+24
   \   000000C2   0120               MOVS     R0,#+1
   \   000000C4   ........           BL       AddRfTask
   1840                }
   \                     ??SetTask_5:
   \   000000C8   641C               ADDS     R4,R4,#+1
   \                     ??SetTask_3:
   \   000000CA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000CC   240E               LSRS     R4,R4,#+24
   \   000000CE   232C               CMP      R4,#+35
   \   000000D0   DAD3               BCC      ??SetTask_4
   1841                
   1842                
   1843                for (int LineNr=0; LineNr<RealPrcLines; LineNr++)
   \   000000D2   0026               MOVS     R6,#+0
   \   000000D4   00E0               B        ??SetTask_6
   \                     ??SetTask_7:
   \   000000D6   761C               ADDS     R6,R6,#+1
   \                     ??SetTask_6:
   \   000000D8   BB48               LDR      R0,??SetTask_8   ;; RealPrcLines
   \   000000DA   0078               LDRB     R0,[R0, #+0]
   \   000000DC   8642               CMP      R6,R0
   \   000000DE   00DB               BLT      .+4
   \   000000E0   94E0               B        ??SetTask_9
   1844                {
   1845                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
   \   000000E2   0027               MOVS     R7,#+0
   \   000000E4   58E0               B        ??SetTask_10
   1846                  {
   1847          
   1848                        Proc=ProgTab->Line[LineNr].Proc[PrcInLine];
   1849                        
   1850                        RegOrd=Proc.Tag.RegNr;
   1851                        SetOrd=NonOrd;
   1852                        //wybór typu rozkazu
   1853                        switch (Proc.Type)
   1854                        {
   1855                           case ProcWOUT:       SetOrd=SQ;  RegOrd=0; break;
   1856                           case ProcWOUTS:      SetOrd=SQ;  RegOrd=0; break;
   1857                           case ProcWOUTR:      SetOrd=SQ;  RegOrd=0; break;
   1858                           case ProcWOUTC:      SetOrd=SQ;  RegOrd=0; break;
   1859                           case ProcStI:        SetOrd=SI;  RegOrd=0; break;
   1860                           case ProcStNI:       SetOrd=SI;  RegOrd=0; break;
   1861                           case ProcSetReg:     SetOrd=SQ;  RegOrd=Proc.Tag.RegNr; break;
   1862                           case ProcGetReg:     SetOrd=SI;  RegOrd=Proc.Tag.RegNr; break;
   \                     ??SetTask_11:
   \   000000E6   0124               MOVS     R4,#+1
   \   000000E8   6846               MOV      R0,SP
   \   000000EA   057A               LDRB     R5,[R0, #+8]
   1863                        }     
   1864                         
   1865                        
   1866                        //je¿eli rozkaz
   1867                        if (SetOrd!=NonOrd)
   \                     ??SetTask_12:
   \   000000EC   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000EE   240E               LSRS     R4,R4,#+24
   \   000000F0   002C               CMP      R4,#+0
   \   000000F2   50D0               BEQ      ??SetTask_13
   1868                        {
   1869                              
   1870                                //Je¿eli nody z transmisj¹ RS
   1871                                if (((NeuronsList[Proc.Nr-1].NeuronType>=BeginRS) && (NeuronsList[Proc.Nr-1].NeuronType<=EndRS)) || (NeuronsList[Proc.Nr-1].NeuronType==0))
   \   000000F4   0120               MOVS     R0,#+1
   \   000000F6   6946               MOV      R1,SP
   \   000000F8   0856               LDRSB    R0,[R1, R0]
   \   000000FA   0C21               MOVS     R1,#+12
   \   000000FC   4843               MULS     R0,R1,R0
   \   000000FE   8F49               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   00000100   0818               ADDS     R0,R1,R0
   \   00000102   0C38               SUBS     R0,R0,#+12
   \   00000104   0078               LDRB     R0,[R0, #+0]
   \   00000106   0128               CMP      R0,#+1
   \   00000108   0AD3               BCC      ??SetTask_14
   \   0000010A   0120               MOVS     R0,#+1
   \   0000010C   6946               MOV      R1,SP
   \   0000010E   0856               LDRSB    R0,[R1, R0]
   \   00000110   0C21               MOVS     R1,#+12
   \   00000112   4843               MULS     R0,R1,R0
   \   00000114   8949               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   00000116   0818               ADDS     R0,R1,R0
   \   00000118   0C38               SUBS     R0,R0,#+12
   \   0000011A   0078               LDRB     R0,[R0, #+0]
   \   0000011C   0328               CMP      R0,#+3
   \   0000011E   0AD3               BCC      ??SetTask_15
   \                     ??SetTask_14:
   \   00000120   0120               MOVS     R0,#+1
   \   00000122   6946               MOV      R1,SP
   \   00000124   0856               LDRSB    R0,[R1, R0]
   \   00000126   0C21               MOVS     R1,#+12
   \   00000128   4843               MULS     R0,R1,R0
   \   0000012A   8449               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   0000012C   0818               ADDS     R0,R1,R0
   \   0000012E   0C38               SUBS     R0,R0,#+12
   \   00000130   0078               LDRB     R0,[R0, #+0]
   \   00000132   0028               CMP      R0,#+0
   \   00000134   0CD1               BNE      ??SetTask_16
   1872                                {
   1873                                  AddRsTask(SetOrd, Proc.Nr, RegOrd);                //Dodaj rozkaz do tablicy zadañ Modbus
   \                     ??SetTask_15:
   \   00000136   2A00               MOVS     R2,R5
   \   00000138   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   0000013A   120E               LSRS     R2,R2,#+24
   \   0000013C   0120               MOVS     R0,#+1
   \   0000013E   6946               MOV      R1,SP
   \   00000140   0956               LDRSB    R1,[R1, R0]
   \   00000142   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000144   090E               LSRS     R1,R1,#+24
   \   00000146   2000               MOVS     R0,R4
   \   00000148   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000014A   000E               LSRS     R0,R0,#+24
   \   0000014C   ........           BL       AddRsTask
   1874                                }
   1875                                //Je¿eli nody z transmisj¹ RF
   1876                                if ((NeuronsList[Proc.Nr-1].NeuronType>=BeginRF) && (NeuronsList[Proc.Nr-1].NeuronType<=EndRF))
   \                     ??SetTask_16:
   \   00000150   0120               MOVS     R0,#+1
   \   00000152   6946               MOV      R1,SP
   \   00000154   0856               LDRSB    R0,[R1, R0]
   \   00000156   0C21               MOVS     R1,#+12
   \   00000158   4843               MULS     R0,R1,R0
   \   0000015A   7849               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   0000015C   0818               ADDS     R0,R1,R0
   \   0000015E   0C38               SUBS     R0,R0,#+12
   \   00000160   0078               LDRB     R0,[R0, #+0]
   \   00000162   0228               CMP      R0,#+2
   \   00000164   17D3               BCC      ??SetTask_13
   \   00000166   0120               MOVS     R0,#+1
   \   00000168   6946               MOV      R1,SP
   \   0000016A   0856               LDRSB    R0,[R1, R0]
   \   0000016C   0C21               MOVS     R1,#+12
   \   0000016E   4843               MULS     R0,R1,R0
   \   00000170   7249               LDR      R1,??SetTask_2+0x8  ;; NeuronsList
   \   00000172   0818               ADDS     R0,R1,R0
   \   00000174   0C38               SUBS     R0,R0,#+12
   \   00000176   0078               LDRB     R0,[R0, #+0]
   \   00000178   0628               CMP      R0,#+6
   \   0000017A   0CD2               BCS      ??SetTask_13
   1877                                {
   1878                                   AddRfTask(SetOrd, Proc.Nr, RegOrd);                //Dodaj rozkaz do tablicy zadañ RF
   \   0000017C   2A00               MOVS     R2,R5
   \   0000017E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000180   120E               LSRS     R2,R2,#+24
   \   00000182   0120               MOVS     R0,#+1
   \   00000184   6946               MOV      R1,SP
   \   00000186   0956               LDRSB    R1,[R1, R0]
   \   00000188   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000018A   090E               LSRS     R1,R1,#+24
   \   0000018C   2000               MOVS     R0,R4
   \   0000018E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000190   000E               LSRS     R0,R0,#+24
   \   00000192   ........           BL       AddRfTask
   1879                                }
   1880                        }  
   \                     ??SetTask_13:
   \   00000196   7F1C               ADDS     R7,R7,#+1
   \                     ??SetTask_10:
   \   00000198   0A2F               CMP      R7,#+10
   \   0000019A   9CDA               BGE      ??SetTask_7
   \   0000019C   6846               MOV      R0,SP
   \   0000019E   1821               MOVS     R1,#+24
   \   000001A0   7943               MULS     R1,R7,R1
   \   000001A2   F022               MOVS     R2,#+240
   \   000001A4   7243               MULS     R2,R6,R2
   \   000001A6   069B               LDR      R3,[SP, #+24]
   \   000001A8   9A18               ADDS     R2,R3,R2
   \   000001AA   5118               ADDS     R1,R2,R1
   \   000001AC   1831               ADDS     R1,R1,#+24
   \   000001AE   1822               MOVS     R2,#+24
   \   000001B0   ........           BL       __aeabi_memcpy4
   \   000001B4   6846               MOV      R0,SP
   \   000001B6   057A               LDRB     R5,[R0, #+8]
   \   000001B8   0024               MOVS     R4,#+0
   \   000001BA   6846               MOV      R0,SP
   \   000001BC   0078               LDRB     R0,[R0, #+0]
   \   000001BE   1428               CMP      R0,#+20
   \   000001C0   1AD0               BEQ      ??SetTask_17
   \   000001C2   1528               CMP      R0,#+21
   \   000001C4   1BD0               BEQ      ??SetTask_18
   \   000001C6   2028               CMP      R0,#+32
   \   000001C8   0AD0               BEQ      ??SetTask_19
   \   000001CA   2128               CMP      R0,#+33
   \   000001CC   0BD0               BEQ      ??SetTask_20
   \   000001CE   2228               CMP      R0,#+34
   \   000001D0   0CD0               BEQ      ??SetTask_21
   \   000001D2   2328               CMP      R0,#+35
   \   000001D4   0DD0               BEQ      ??SetTask_22
   \   000001D6   3828               CMP      R0,#+56
   \   000001D8   85D0               BEQ      ??SetTask_11
   \   000001DA   3928               CMP      R0,#+57
   \   000001DC   12D0               BEQ      ??SetTask_23
   \   000001DE   85E7               B        ??SetTask_12
   \                     ??SetTask_19:
   \   000001E0   0224               MOVS     R4,#+2
   \   000001E2   0025               MOVS     R5,#+0
   \   000001E4   82E7               B        ??SetTask_12
   \                     ??SetTask_20:
   \   000001E6   0224               MOVS     R4,#+2
   \   000001E8   0025               MOVS     R5,#+0
   \   000001EA   7FE7               B        ??SetTask_12
   \                     ??SetTask_21:
   \   000001EC   0224               MOVS     R4,#+2
   \   000001EE   0025               MOVS     R5,#+0
   \   000001F0   7CE7               B        ??SetTask_12
   \                     ??SetTask_22:
   \   000001F2   0224               MOVS     R4,#+2
   \   000001F4   0025               MOVS     R5,#+0
   \   000001F6   79E7               B        ??SetTask_12
   \                     ??SetTask_17:
   \   000001F8   0124               MOVS     R4,#+1
   \   000001FA   0025               MOVS     R5,#+0
   \   000001FC   76E7               B        ??SetTask_12
   \                     ??SetTask_18:
   \   000001FE   0124               MOVS     R4,#+1
   \   00000200   0025               MOVS     R5,#+0
   \   00000202   73E7               B        ??SetTask_12
   \                     ??SetTask_23:
   \   00000204   0224               MOVS     R4,#+2
   \   00000206   6846               MOV      R0,SP
   \   00000208   057A               LDRB     R5,[R0, #+8]
   \   0000020A   6FE7               B        ??SetTask_12
   1881                        
   1882                  }
   1883                  
   1884                }
   1885                
   1886                
   1887                
   1888                
   1889                
   1890                //Bezpoœrednie zmienne ekranowe
   1891                volatile _Screen* ScreenLokal;
   1892                 _ScreenPaternDesign *ScreenPaternDesign;
   1893          
   1894                
   1895                 for (char Sheet=0; Sheet<ScreenNr; Sheet++)
   \                     ??SetTask_9:
   \   0000020C   0024               MOVS     R4,#+0
   \   0000020E   74E0               B        ??SetTask_24
   1896                 {
   1897                     if (ScreenUse&1<<Sheet)
   1898                     {
   1899                        if (Sheet==0) 
   1900                        {
   1901                          ScreenPaternDesign=ScreenSetTab_0;
   1902                        }else{
   1903                          ScreenPaternDesign=ScreenSetTab_1; 
   1904                        } 
   1905                       
   1906                       ScreenLokal=&gProg.Screen[Sheet];
   1907                       for (char i=0; i<ScrenAnalogNr; i++)
   1908                          {
   1909          
   1910                                if ( (ScreenPaternDesign[ScreenLokal->PaternDesign].Value[i].Width>0) && ((ScreenLokal->Analog[i].Nr>0) || ((ScreenLokal->Analog[i].Nr==0)&&(ScreenLokal->Analog[i].Reg>0))))
   1911                                 {
   1912                                    AddRfTask(SI, ScreenLokal->Analog[i].Nr, ScreenLokal->Analog[i].Reg);
   1913                                 }
   1914                          }
   1915                       for (char i=0; i<ScrenGraphNr; i++)
   1916                          {
   1917                                if ((ScreenPaternDesign[ScreenLokal->PaternDesign].Graph[i].Width>0) && ((ScreenLokal->Graph[i].Type==GraphOnOff) || (ScreenLokal->Graph[i].PlusOnOff==1) || (ScreenLokal->Graph[i].Type==GraphWartosc)))
   \                     ??SetTask_25:
   \   00000210   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000212   3F0E               LSRS     R7,R7,#+24
   \   00000214   0420               MOVS     R0,#+4
   \   00000216   7843               MULS     R0,R7,R0
   \   00000218   3178               LDRB     R1,[R6, #+0]
   \   0000021A   5822               MOVS     R2,#+88
   \   0000021C   5143               MULS     R1,R2,R1
   \   0000021E   6918               ADDS     R1,R5,R1
   \   00000220   0818               ADDS     R0,R1,R0
   \   00000222   2630               ADDS     R0,R0,#+38
   \   00000224   0078               LDRB     R0,[R0, #+0]
   \   00000226   0128               CMP      R0,#+1
   \   00000228   2BD3               BCC      ??SetTask_26
   \   0000022A   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000022C   3F0E               LSRS     R7,R7,#+24
   \   0000022E   0720               MOVS     R0,#+7
   \   00000230   7843               MULS     R0,R7,R0
   \   00000232   3018               ADDS     R0,R6,R0
   \   00000234   5330               ADDS     R0,R0,#+83
   \   00000236   0078               LDRB     R0,[R0, #+0]
   \   00000238   0B28               CMP      R0,#+11
   \   0000023A   11D0               BEQ      ??SetTask_27
   \   0000023C   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000023E   3F0E               LSRS     R7,R7,#+24
   \   00000240   0720               MOVS     R0,#+7
   \   00000242   7843               MULS     R0,R7,R0
   \   00000244   3018               ADDS     R0,R6,R0
   \   00000246   5930               ADDS     R0,R0,#+89
   \   00000248   0078               LDRB     R0,[R0, #+0]
   \   0000024A   C007               LSLS     R0,R0,#+31
   \   0000024C   08D4               BMI      ??SetTask_27
   \   0000024E   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000250   3F0E               LSRS     R7,R7,#+24
   \   00000252   0720               MOVS     R0,#+7
   \   00000254   7843               MULS     R0,R7,R0
   \   00000256   3018               ADDS     R0,R6,R0
   \   00000258   5330               ADDS     R0,R0,#+83
   \   0000025A   0078               LDRB     R0,[R0, #+0]
   \   0000025C   0A28               CMP      R0,#+10
   \   0000025E   10D1               BNE      ??SetTask_26
   1918                                 {
   1919                                    AddRfTask(SI, ScreenLokal->Graph[i].Nr, ScreenLokal->Graph[i].Reg);
   \                     ??SetTask_27:
   \   00000260   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000262   3F0E               LSRS     R7,R7,#+24
   \   00000264   0720               MOVS     R0,#+7
   \   00000266   7843               MULS     R0,R7,R0
   \   00000268   3018               ADDS     R0,R6,R0
   \   0000026A   5830               ADDS     R0,R0,#+88
   \   0000026C   0278               LDRB     R2,[R0, #+0]
   \   0000026E   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000270   3F0E               LSRS     R7,R7,#+24
   \   00000272   0720               MOVS     R0,#+7
   \   00000274   7843               MULS     R0,R7,R0
   \   00000276   3018               ADDS     R0,R6,R0
   \   00000278   5730               ADDS     R0,R0,#+87
   \   0000027A   0178               LDRB     R1,[R0, #+0]
   \   0000027C   0120               MOVS     R0,#+1
   \   0000027E   ........           BL       AddRfTask
   1920                                 }
   1921                          }
   \                     ??SetTask_26:
   \   00000282   7F1C               ADDS     R7,R7,#+1
   \                     ??SetTask_28:
   \   00000284   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000286   3F0E               LSRS     R7,R7,#+24
   \   00000288   042F               CMP      R7,#+4
   \   0000028A   C1D3               BCC      ??SetTask_25
   1922                       
   1923                       //je¿eli na stronie jest termostat
   1924                       if (((Sheet==0) && (gProg.Screen[Sheet].PaternDesign==MainScreenTermo)) || 
   1925                              ((Sheet) && (gProg.Screen[Sheet].PaternDesign==SubScreenTermo)))
   \   0000028C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000028E   240E               LSRS     R4,R4,#+24
   \   00000290   002C               CMP      R4,#+0
   \   00000292   09D1               BNE      ??SetTask_29
   \   00000294   4D48               LDR      R0,??SetTask_8+0x4  ;; 0xbb98
   \   00000296   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000298   240E               LSRS     R4,R4,#+24
   \   0000029A   A021               MOVS     R1,#+160
   \   0000029C   6143               MULS     R1,R4,R1
   \   0000029E   4C4A               LDR      R2,??SetTask_8+0x8  ;; gProg
   \   000002A0   5118               ADDS     R1,R2,R1
   \   000002A2   085C               LDRB     R0,[R1, R0]
   \   000002A4   0828               CMP      R0,#+8
   \   000002A6   0DD0               BEQ      ??SetTask_30
   \                     ??SetTask_29:
   \   000002A8   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002AA   240E               LSRS     R4,R4,#+24
   \   000002AC   002C               CMP      R4,#+0
   \   000002AE   23D0               BEQ      ??SetTask_31
   \   000002B0   4648               LDR      R0,??SetTask_8+0x4  ;; 0xbb98
   \   000002B2   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002B4   240E               LSRS     R4,R4,#+24
   \   000002B6   A021               MOVS     R1,#+160
   \   000002B8   6143               MULS     R1,R4,R1
   \   000002BA   454A               LDR      R2,??SetTask_8+0x8  ;; gProg
   \   000002BC   5118               ADDS     R1,R2,R1
   \   000002BE   085C               LDRB     R0,[R1, R0]
   \   000002C0   0528               CMP      R0,#+5
   \   000002C2   19D1               BNE      ??SetTask_31
   1926                        {
   1927                        
   1928                       if (ScreenLokal->Thermo.ActorNode>0)
   \                     ??SetTask_30:
   \   000002C4   8C20               MOVS     R0,#+140
   \   000002C6   3056               LDRSB    R0,[R6, R0]
   \   000002C8   0128               CMP      R0,#+1
   \   000002CA   08DB               BLT      ??SetTask_32
   1929                                 {
   1930                                    AddRfTask(SQ, ScreenLokal->Thermo.ActorNode, ScreenLokal->Thermo.ActorPort);
   \   000002CC   8D20               MOVS     R0,#+141
   \   000002CE   325C               LDRB     R2,[R6, R0]
   \   000002D0   8C20               MOVS     R0,#+140
   \   000002D2   3156               LDRSB    R1,[R6, R0]
   \   000002D4   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000002D6   090E               LSRS     R1,R1,#+24
   \   000002D8   0220               MOVS     R0,#+2
   \   000002DA   ........           BL       AddRfTask
   1931                                 }   
   1932                       if (ScreenLokal->Thermo.SensorNode>0)
   \                     ??SetTask_32:
   \   000002DE   8F20               MOVS     R0,#+143
   \   000002E0   3056               LDRSB    R0,[R6, R0]
   \   000002E2   0128               CMP      R0,#+1
   \   000002E4   08DB               BLT      ??SetTask_31
   1933                                 {
   1934                                    AddRfTask(SI, ScreenLokal->Thermo.SensorNode, ScreenLokal->Thermo.SensorReg);
   \   000002E6   9020               MOVS     R0,#+144
   \   000002E8   325C               LDRB     R2,[R6, R0]
   \   000002EA   8F20               MOVS     R0,#+143
   \   000002EC   3156               LDRSB    R1,[R6, R0]
   \   000002EE   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000002F0   090E               LSRS     R1,R1,#+24
   \   000002F2   0120               MOVS     R0,#+1
   \   000002F4   ........           BL       AddRfTask
   1935                                 }  
   1936                       
   1937                        }
   \                     ??SetTask_31:
   \   000002F8   641C               ADDS     R4,R4,#+1
   \                     ??SetTask_24:
   \   000002FA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000002FC   240E               LSRS     R4,R4,#+24
   \   000002FE   082C               CMP      R4,#+8
   \   00000300   5ED2               BCS      ??SetTask_33
   \   00000302   3448               LDR      R0,??SetTask_8+0xC  ;; ScreenUse
   \   00000304   0021               MOVS     R1,#+0
   \   00000306   405E               LDRSH    R0,[R0, R1]
   \   00000308   0121               MOVS     R1,#+1
   \   0000030A   A140               LSLS     R1,R1,R4
   \   0000030C   0140               ANDS     R1,R1,R0
   \   0000030E   0029               CMP      R1,#+0
   \   00000310   F2D0               BEQ      ??SetTask_31
   \   00000312   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000314   240E               LSRS     R4,R4,#+24
   \   00000316   002C               CMP      R4,#+0
   \   00000318   01D1               BNE      ??SetTask_34
   \   0000031A   2F4D               LDR      R5,??SetTask_8+0x10  ;; ScreenSetTab_0
   \   0000031C   00E0               B        ??SetTask_35
   \                     ??SetTask_34:
   \   0000031E   2F4D               LDR      R5,??SetTask_8+0x14  ;; ScreenSetTab_1
   \                     ??SetTask_35:
   \   00000320   2A48               LDR      R0,??SetTask_8+0x4  ;; 0xbb98
   \   00000322   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000324   240E               LSRS     R4,R4,#+24
   \   00000326   A021               MOVS     R1,#+160
   \   00000328   6143               MULS     R1,R4,R1
   \   0000032A   294A               LDR      R2,??SetTask_8+0x8  ;; gProg
   \   0000032C   5118               ADDS     R1,R2,R1
   \   0000032E   0E18               ADDS     R6,R1,R0
   \   00000330   0027               MOVS     R7,#+0
   \   00000332   3FE0               B        ??SetTask_36
   \                     ??SetTask_2:
   \   00000334   ........           DC32     RF_TaskTab
   \   00000338   FFFF0FFF           DC32     0xff0fffff
   \   0000033C   ........           DC32     NeuronsList
   \                     ??SetTask_37:
   \   00000340   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000342   3F0E               LSRS     R7,R7,#+24
   \   00000344   0420               MOVS     R0,#+4
   \   00000346   7843               MULS     R0,R7,R0
   \   00000348   3178               LDRB     R1,[R6, #+0]
   \   0000034A   5822               MOVS     R2,#+88
   \   0000034C   5143               MULS     R1,R2,R1
   \   0000034E   6918               ADDS     R1,R5,R1
   \   00000350   0818               ADDS     R0,R1,R0
   \   00000352   3630               ADDS     R0,R0,#+54
   \   00000354   0078               LDRB     R0,[R0, #+0]
   \   00000356   0128               CMP      R0,#+1
   \   00000358   2BD3               BCC      ??SetTask_38
   \   0000035A   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000035C   3F0E               LSRS     R7,R7,#+24
   \   0000035E   0720               MOVS     R0,#+7
   \   00000360   7843               MULS     R0,R7,R0
   \   00000362   3018               ADDS     R0,R6,R0
   \   00000364   7330               ADDS     R0,R0,#+115
   \   00000366   0078               LDRB     R0,[R0, #+0]
   \   00000368   0128               CMP      R0,#+1
   \   0000036A   11D2               BCS      ??SetTask_39
   \   0000036C   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   0000036E   3F0E               LSRS     R7,R7,#+24
   \   00000370   0720               MOVS     R0,#+7
   \   00000372   7843               MULS     R0,R7,R0
   \   00000374   3018               ADDS     R0,R6,R0
   \   00000376   7330               ADDS     R0,R0,#+115
   \   00000378   0078               LDRB     R0,[R0, #+0]
   \   0000037A   0028               CMP      R0,#+0
   \   0000037C   19D1               BNE      ??SetTask_38
   \   0000037E   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000380   3F0E               LSRS     R7,R7,#+24
   \   00000382   0720               MOVS     R0,#+7
   \   00000384   7843               MULS     R0,R7,R0
   \   00000386   3018               ADDS     R0,R6,R0
   \   00000388   7430               ADDS     R0,R0,#+116
   \   0000038A   0078               LDRB     R0,[R0, #+0]
   \   0000038C   0128               CMP      R0,#+1
   \   0000038E   10D3               BCC      ??SetTask_38
   \                     ??SetTask_39:
   \   00000390   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000392   3F0E               LSRS     R7,R7,#+24
   \   00000394   0720               MOVS     R0,#+7
   \   00000396   7843               MULS     R0,R7,R0
   \   00000398   3018               ADDS     R0,R6,R0
   \   0000039A   7430               ADDS     R0,R0,#+116
   \   0000039C   0278               LDRB     R2,[R0, #+0]
   \   0000039E   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000003A0   3F0E               LSRS     R7,R7,#+24
   \   000003A2   0720               MOVS     R0,#+7
   \   000003A4   7843               MULS     R0,R7,R0
   \   000003A6   3018               ADDS     R0,R6,R0
   \   000003A8   7330               ADDS     R0,R0,#+115
   \   000003AA   0178               LDRB     R1,[R0, #+0]
   \   000003AC   0120               MOVS     R0,#+1
   \   000003AE   ........           BL       AddRfTask
   \                     ??SetTask_38:
   \   000003B2   7F1C               ADDS     R7,R7,#+1
   \                     ??SetTask_36:
   \   000003B4   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   000003B6   3F0E               LSRS     R7,R7,#+24
   \   000003B8   042F               CMP      R7,#+4
   \   000003BA   C1D3               BCC      ??SetTask_37
   \   000003BC   0027               MOVS     R7,#+0
   \   000003BE   61E7               B        ??SetTask_28
   1938                     
   1939                     }
   1940          
   1941                 }
   1942                //-------------------------------
   1943                
   1944                
   1945                //Dodanie standardowego odpytywania wez³ów nie u¿ywanych w programie
   1946                 /*
   1947                 char ExstF=0;
   1948                
   1949                for (char i=0; i<NumberNeurons; i++)
   1950                {
   1951                  ExstF=0;
   1952                  if (NeuronsList[i].NeuronID!=0)
   1953                  {
   1954                     for (char j=0; j<RF_Tasks; j++)
   1955                     {
   1956                       if (RF_TaskTab[j].Command.ID==0)  //je¿eli brak zadañ to wyjdŸ
   1957                       { 
   1958                         j=RF_Tasks;
   1959                       }else if (RF_TaskTab[j].Command.ID==NeuronsList[i].NeuronID)    //je¿eli zadanie dla tego noda istnieje
   1960                       {
   1961                         ExstF=1;   //ustaw flagê
   1962                       }
   1963                     }
   1964                     
   1965                     //je¿eli nie znaleziono zadania dla wez³a przypisz pytanie standardowe
   1966                     if (ExstF==0)
   1967                     {
   1968                         AddRfTask(SI, i+1, 0);                //Dodaj pytanie standardowe do tablicy zadañ RF
   1969                     }
   1970                  }
   1971                  
   1972                }
   1973                 */
   1974               
   1975                
   1976                
   1977                          
   1978          }//_______________________ Koniec funkcji  SetTask_________________
   \                     ??SetTask_33:
   \   000003C0   07B0               ADD      SP,SP,#+28
   \   000003C2   F0BC               POP      {R4-R7}
   \   000003C4   01BC               POP      {R0}
   \   000003C6   0047               BX       R0               ;; return
   \                     ??SetTask_8:
   \   000003C8   ........           DC32     RealPrcLines
   \   000003CC   98BB0000           DC32     0xbb98
   \   000003D0   ........           DC32     gProg
   \   000003D4   ........           DC32     ScreenUse
   \   000003D8   ........           DC32     ScreenSetTab_0
   \   000003DC   ........           DC32     ScreenSetTab_1
   1979          
   1980          
   1981          
   1982          
   1983          
   1984          
   1985          
   1986          
   1987          //-----------------------------------------------------------------------------
   1988          // Nazwa funkcji :    ProgramChangeSave
   1989          // Funkcja zapisu zmian w programie u¿ytkowym
   1990          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1991          void ProgramChangeExecute(_ProgramTab *ProgTab)
   1992          {
   \                     ProgramChangeExecute:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0400               MOVS     R4,R0
   1993             //obliczenie iloœci u¿ywanych scen
   1994             NumberScene=SceneNrCount(ProgTab);
   \   00000004   2000               MOVS     R0,R4
   \   00000006   ........           BL       SceneNrCount
   \   0000000A   0949               LDR      R1,??ProgramChangeExecute_0  ;; NumberScene
   \   0000000C   0870               STRB     R0,[R1, #+0]
   1995             
   1996             //obliczenie iloœci u¿ywanych linii
   1997             CountLines(ProgTab);
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       CountLines
   1998             
   1999             //obliczenie iloœci u¿ywanych stron ekranowych
   2000             ScreenUse=CheckScreenUse(ProgTab);
   \   00000014   2000               MOVS     R0,R4
   \   00000016   ........           BL       CheckScreenUse
   \   0000001A   0649               LDR      R1,??ProgramChangeExecute_0+0x4  ;; ScreenUse
   \   0000001C   0880               STRH     R0,[R1, #+0]
   2001             
   2002          
   2003             
   2004             //odœwierzenie/przepisanie listy neuronów
   2005             RefreshNeuronsList(ProgTab);
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       RefreshNeuronsList
   2006             
   2007             
   2008             //ustawienie zadañ Rs i RF
   2009             SetTask(ProgTab);
   \   00000024   2000               MOVS     R0,R4
   \   00000026   ........           BL       SetTask
   2010            
   2011          }//_______________________ Koniec funkcji zapisu zmian programu_________________
   \   0000002A   10BC               POP      {R4}
   \   0000002C   01BC               POP      {R0}
   \   0000002E   0047               BX       R0               ;; return
   \                     ??ProgramChangeExecute_0:
   \   00000030   ........           DC32     NumberScene
   \   00000034   ........           DC32     ScreenUse
   2012          
   2013          
   2014          
   2015          
   2016          
   2017          
   2018          //*-----------------------------------------------------------------------------
   2019          //* Nazwa funkcji :    GetBinVarPack
   2020          //* Funkcja zwraca paczkê w tablicy wartoœci zmienncyh dwustanowych z zakresu B000 - B700
   2021          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   2022          void GetBinVarPack(WORD adr, WORD Length,unsigned char *Tab )
   2023          {
   2024            /*
   2025                  WORD  RamByte=(adr/8);
   2026                  WORD  RamBit= (adr) % 8;
   2027                  char  CurentByte;
   2028                  char  CurentBit;  
   2029            
   2030              
   2031                for (WORD i=0; i<Length; i++)
   2032                      {
   2033                         Tab[CurentByte] &= ~(1<<CurentBit);
   2034                         Tab[CurentByte] |=  (((ram.BinVarRAM[RamByte]>>RamBit) & 0x1)<< CurentBit);
   2035                                   
   2036                         if (CurentBit<7) {CurentBit++;} else {CurentBit=0; CurentByte++;}
   2037                         if (RamBit<7) {RamBit++;} else {RamBit=0; RamByte++;}
   2038                      }  
   2039            
   2040           */
   2041          }//_______________________ Koniec funkcji GetBinVar ____________________________
   \                     GetBinVarPack:
   \   00000000   7047               BX       LR               ;; return
   2042          
   2043          
   2044          
   2045          
   2046          
   2047          
   2048          
   2049          
   2050          
   2051          //*-----------------------------------------------------------------------------
   2052          //* Nazwa funkcji :    GetBinVar
   2053          //* Funkcja przepisuje paczkê wartoœci zmiennych dwustanowej komunikacyjnej DA00 - DDFF do Tab
   2054          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   2055          void GetBinVarPackComm(WORD adr, WORD Length, unsigned char* Tab )
   2056          {
   \                     GetBinVarPackComm:
   \   00000000   F2B5               PUSH     {R1,R4-R7,LR}
   2057                  WORD  RamByte=adr;
   2058                  WORD  RamBit= 0;
   \   00000002   0024               MOVS     R4,#+0
   2059                  char  CurentByte = 0;
   \   00000004   0021               MOVS     R1,#+0
   2060                  char  CurentBit = 0;  
   \   00000006   0023               MOVS     R3,#+0
   2061          
   2062                  for (char i=0; i<16; i++)  {Tab[i]=0;}
   \   00000008   0025               MOVS     R5,#+0
   \   0000000A   04E0               B        ??GetBinVarPackComm_0
   \                     ??GetBinVarPackComm_1:
   \   0000000C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000000E   2D0E               LSRS     R5,R5,#+24
   \   00000010   0026               MOVS     R6,#+0
   \   00000012   5655               STRB     R6,[R2, R5]
   \   00000014   6D1C               ADDS     R5,R5,#+1
   \                     ??GetBinVarPackComm_0:
   \   00000016   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000018   2D0E               LSRS     R5,R5,#+24
   \   0000001A   102D               CMP      R5,#+16
   \   0000001C   F6D3               BCC      ??GetBinVarPackComm_1
   2063               
   2064              
   2065                for (WORD i=0; i<Length; i++)
   \   0000001E   0025               MOVS     R5,#+0
   \   00000020   02E0               B        ??GetBinVarPackComm_2
   2066                      {
   2067                         if ((ram.VarCom_Word[RamByte]>>RamBit) & 0x1) { Tab[CurentByte] |= 0x1<<CurentBit;} else {Tab[CurentByte] &= ~(0x1<<CurentBit);}
   2068                        
   2069                         
   2070                         if (CurentBit<7) {CurentBit++;} else {CurentBit=0; CurentByte++; Tab[CurentByte]=0;}
   2071                         if (RamBit<7) {RamBit++;} else {RamBit=0; RamByte++;}
   \                     ??GetBinVarPackComm_3:
   \   00000022   0024               MOVS     R4,#+0
   \   00000024   401C               ADDS     R0,R0,#+1
   \                     ??GetBinVarPackComm_4:
   \   00000026   6D1C               ADDS     R5,R5,#+1
   \                     ??GetBinVarPackComm_2:
   \   00000028   6E46               MOV      R6,SP
   \   0000002A   3688               LDRH     R6,[R6, #+0]
   \   0000002C   2D04               LSLS     R5,R5,#+16       ;; ZeroExtS R5,R5,#+16,#+16
   \   0000002E   2D0C               LSRS     R5,R5,#+16
   \   00000030   B542               CMP      R5,R6
   \   00000032   2DD2               BCS      ??GetBinVarPackComm_5
   \   00000034   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000036   000C               LSRS     R0,R0,#+16
   \   00000038   0226               MOVS     R6,#+2
   \   0000003A   4643               MULS     R6,R0,R6
   \   0000003C   164F               LDR      R7,??GetBinVarPackComm_6  ;; ram
   \   0000003E   BE5B               LDRH     R6,[R7, R6]
   \   00000040   2641               ASRS     R6,R6,R4
   \   00000042   F607               LSLS     R6,R6,#+31
   \   00000044   09D5               BPL      ??GetBinVarPackComm_7
   \   00000046   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000048   090E               LSRS     R1,R1,#+24
   \   0000004A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000004C   090E               LSRS     R1,R1,#+24
   \   0000004E   565C               LDRB     R6,[R2, R1]
   \   00000050   0127               MOVS     R7,#+1
   \   00000052   9F40               LSLS     R7,R7,R3
   \   00000054   3743               ORRS     R7,R7,R6
   \   00000056   5754               STRB     R7,[R2, R1]
   \   00000058   08E0               B        ??GetBinVarPackComm_8
   \                     ??GetBinVarPackComm_7:
   \   0000005A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000005C   090E               LSRS     R1,R1,#+24
   \   0000005E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000060   090E               LSRS     R1,R1,#+24
   \   00000062   565C               LDRB     R6,[R2, R1]
   \   00000064   0127               MOVS     R7,#+1
   \   00000066   9F40               LSLS     R7,R7,R3
   \   00000068   BE43               BICS     R6,R6,R7
   \   0000006A   5654               STRB     R6,[R2, R1]
   \                     ??GetBinVarPackComm_8:
   \   0000006C   1B06               LSLS     R3,R3,#+24       ;; ZeroExtS R3,R3,#+24,#+24
   \   0000006E   1B0E               LSRS     R3,R3,#+24
   \   00000070   072B               CMP      R3,#+7
   \   00000072   01D2               BCS      ??GetBinVarPackComm_9
   \   00000074   5B1C               ADDS     R3,R3,#+1
   \   00000076   05E0               B        ??GetBinVarPackComm_10
   \                     ??GetBinVarPackComm_9:
   \   00000078   0023               MOVS     R3,#+0
   \   0000007A   491C               ADDS     R1,R1,#+1
   \   0000007C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000007E   090E               LSRS     R1,R1,#+24
   \   00000080   0026               MOVS     R6,#+0
   \   00000082   5654               STRB     R6,[R2, R1]
   \                     ??GetBinVarPackComm_10:
   \   00000084   2404               LSLS     R4,R4,#+16       ;; ZeroExtS R4,R4,#+16,#+16
   \   00000086   240C               LSRS     R4,R4,#+16
   \   00000088   072C               CMP      R4,#+7
   \   0000008A   CAD2               BCS      ??GetBinVarPackComm_3
   \   0000008C   641C               ADDS     R4,R4,#+1
   \   0000008E   CAE7               B        ??GetBinVarPackComm_4
   2072                      }  
   2073          }//_______________________ Koniec funkcji GetBinVarComm ________________________
   \                     ??GetBinVarPackComm_5:
   \   00000090   01B0               ADD      SP,SP,#+4
   \   00000092   F0BC               POP      {R4-R7}
   \   00000094   01BC               POP      {R0}
   \   00000096   0047               BX       R0               ;; return
   \                     ??GetBinVarPackComm_6:
   \   00000098   ........           DC32     ram
   2074          
   2075          
   2076          //*-----------------------------------------------------------------------------
   2077          //* Nazwa funkcji :    GetRegPackComm
   2078          //* Funkcja przepisuje StageQ
   2079          //*   Adr - nr StageQ
   2080          //*   Reg - nr rejestru
   2081          //*   LengthBit - ile bitów do kopiowania je¿eli wiêcej ni¿ 16 to kopiuje z nastêpnego rejestru
   2082          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   2083          void GetRegPackComm(short int  Adr, char Reg, char LengthBit, unsigned char* Tab )
   2084          {
   \                     GetRegPackComm:
   \   00000000   F5B5               PUSH     {R0,R2,R4-R7,LR}
   \   00000002   81B0               SUB      SP,SP,#+4
   2085                  WORD  RamWord=Reg;
   \   00000004   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000006   090E               LSRS     R1,R1,#+24
   \   00000008   0D00               MOVS     R5,R1
   2086                  WORD  RamBitInWord= 0;
   \   0000000A   0024               MOVS     R4,#+0
   2087                  char  CurentByte = 0;
   \   0000000C   0021               MOVS     R1,#+0
   2088                  char  CurentBit = 0;  
   \   0000000E   0022               MOVS     R2,#+0
   2089           
   2090                  Adr+=1;
   \   00000010   6846               MOV      R0,SP
   \   00000012   6F46               MOV      R7,SP
   \   00000014   0426               MOVS     R6,#+4
   \   00000016   BE5F               LDRSH    R6,[R7, R6]
   \   00000018   761C               ADDS     R6,R6,#+1
   \   0000001A   8680               STRH     R6,[R0, #+4]
   2091                  
   2092                  for (char i=0; i<16; i++)  {Tab[i]=0;}
   \   0000001C   0020               MOVS     R0,#+0
   \   0000001E   04E0               B        ??GetRegPackComm_0
   \                     ??GetRegPackComm_1:
   \   00000020   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \   00000024   0026               MOVS     R6,#+0
   \   00000026   1E54               STRB     R6,[R3, R0]
   \   00000028   401C               ADDS     R0,R0,#+1
   \                     ??GetRegPackComm_0:
   \   0000002A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000002C   000E               LSRS     R0,R0,#+24
   \   0000002E   1028               CMP      R0,#+16
   \   00000030   F6D3               BCC      ??GetRegPackComm_1
   2093               
   2094              
   2095                for (WORD i=0; i<LengthBit; i++)
   \   00000032   0026               MOVS     R6,#+0
   \   00000034   02E0               B        ??GetRegPackComm_2
   2096                      {
   2097                         if ((MainStage.StageQ[Adr].Value[RamWord]>>RamBitInWord) & 0x1) { Tab[CurentByte] |= 0x1<<CurentBit;} else {Tab[CurentByte] &= ~(0x1<<CurentBit);}
   2098                        
   2099                         
   2100                         if (CurentBit<7) {CurentBit++;} else {CurentBit=0; CurentByte++; Tab[CurentByte]=0;}
   2101                         if (RamBitInWord<15) {RamBitInWord++;} else {RamBitInWord=0; RamWord++;}
   \                     ??GetRegPackComm_3:
   \   00000036   0024               MOVS     R4,#+0
   \   00000038   6D1C               ADDS     R5,R5,#+1
   \                     ??GetRegPackComm_4:
   \   0000003A   761C               ADDS     R6,R6,#+1
   \                     ??GetRegPackComm_2:
   \   0000003C   6846               MOV      R0,SP
   \   0000003E   007A               LDRB     R0,[R0, #+8]
   \   00000040   3604               LSLS     R6,R6,#+16       ;; ZeroExtS R6,R6,#+16,#+16
   \   00000042   360C               LSRS     R6,R6,#+16
   \   00000044   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000046   000C               LSRS     R0,R0,#+16
   \   00000048   8642               CMP      R6,R0
   \   0000004A   3AD2               BCS      ??GetRegPackComm_5
   \   0000004C   1F4F               LDR      R7,??GetRegPackComm_6  ;; 0x3a2
   \   0000004E   80B5               PUSH     {R7,LR}
   \   00000050   2D04               LSLS     R5,R5,#+16       ;; ZeroExtS R5,R5,#+16,#+16
   \   00000052   2D0C               LSRS     R5,R5,#+16
   \   00000054   0227               MOVS     R7,#+2
   \   00000056   6F43               MULS     R7,R5,R7
   \   00000058   BC46               MOV      R12,R7
   \   0000005A   02AF               ADD      R7,SP,#+8
   \   0000005C   0420               MOVS     R0,#+4
   \   0000005E   385E               LDRSH    R0,[R7, R0]
   \   00000060   1627               MOVS     R7,#+22
   \   00000062   7843               MULS     R0,R7,R0
   \   00000064   1A4F               LDR      R7,??GetRegPackComm_6+0x4  ;; MainStage
   \   00000066   3818               ADDS     R0,R7,R0
   \   00000068   6746               MOV      R7,R12
   \   0000006A   C019               ADDS     R0,R0,R7
   \   0000006C   009F               LDR      R7,[SP, #0]
   \   0000006E   02B0               ADD      SP,SP,#+8
   \   00000070   C05F               LDRSH    R0,[R0, R7]
   \   00000072   2041               ASRS     R0,R0,R4
   \   00000074   C007               LSLS     R0,R0,#+31
   \   00000076   09D5               BPL      ??GetRegPackComm_7
   \   00000078   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000007A   090E               LSRS     R1,R1,#+24
   \   0000007C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000007E   090E               LSRS     R1,R1,#+24
   \   00000080   585C               LDRB     R0,[R3, R1]
   \   00000082   0127               MOVS     R7,#+1
   \   00000084   9740               LSLS     R7,R7,R2
   \   00000086   0743               ORRS     R7,R7,R0
   \   00000088   5F54               STRB     R7,[R3, R1]
   \   0000008A   08E0               B        ??GetRegPackComm_8
   \                     ??GetRegPackComm_7:
   \   0000008C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000008E   090E               LSRS     R1,R1,#+24
   \   00000090   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000092   090E               LSRS     R1,R1,#+24
   \   00000094   585C               LDRB     R0,[R3, R1]
   \   00000096   0127               MOVS     R7,#+1
   \   00000098   9740               LSLS     R7,R7,R2
   \   0000009A   B843               BICS     R0,R0,R7
   \   0000009C   5854               STRB     R0,[R3, R1]
   \                     ??GetRegPackComm_8:
   \   0000009E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   000000A0   120E               LSRS     R2,R2,#+24
   \   000000A2   072A               CMP      R2,#+7
   \   000000A4   01D2               BCS      ??GetRegPackComm_9
   \   000000A6   521C               ADDS     R2,R2,#+1
   \   000000A8   05E0               B        ??GetRegPackComm_10
   \                     ??GetRegPackComm_9:
   \   000000AA   0022               MOVS     R2,#+0
   \   000000AC   491C               ADDS     R1,R1,#+1
   \   000000AE   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000B0   090E               LSRS     R1,R1,#+24
   \   000000B2   0020               MOVS     R0,#+0
   \   000000B4   5854               STRB     R0,[R3, R1]
   \                     ??GetRegPackComm_10:
   \   000000B6   2404               LSLS     R4,R4,#+16       ;; ZeroExtS R4,R4,#+16,#+16
   \   000000B8   240C               LSRS     R4,R4,#+16
   \   000000BA   0F2C               CMP      R4,#+15
   \   000000BC   BBD2               BCS      ??GetRegPackComm_3
   \   000000BE   641C               ADDS     R4,R4,#+1
   \   000000C0   BBE7               B        ??GetRegPackComm_4
   2102                      }  
   2103          }//_______________________ Koniec funkcji GetRegPackComm ________________________
   \                     ??GetRegPackComm_5:
   \   000000C2   03B0               ADD      SP,SP,#+12
   \   000000C4   F0BC               POP      {R4-R7}
   \   000000C6   01BC               POP      {R0}
   \   000000C8   0047               BX       R0               ;; return
   \   000000CA   C046               Nop      
   \                     ??GetRegPackComm_6:
   \   000000CC   A2030000           DC32     0x3a2
   \   000000D0   ........           DC32     MainStage

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   ........           DC32     ZD_MODBUS_0

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   AA8A0000           DC32     0x8aaa

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     Variables

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   ........           DC32     VariablesAnal

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   A2030000           DC32     0x3a2
   2104          
   2105          
   2106          
   2107          
   2108          
   2109          
   2110          //****************************************************************************//
   2111          //****************************************************************************//
   2112          //*************************** P R O C E D U R Y ******************************//
   2113          //****************************************************************************//
   2114          //****************************************************************************//
   2115          
   2116          
   2117          
   2118          
   2119          
   2120          
   2121          
   2122          
   2123          
   2124          
   2125          

   Maximum stack usage in bytes:

     Function                       .cstack
     --------                       -------
     AddRfTask                          32
     AddRfTaskTMP                       16
     AddRfTask_RemoveSearchNodeTask      8
     AddRfTask_SearchNodeTask            8
     AddRsTask                          24
     CheckScreenUse                     24
     CountLines                         16
     GetBinVarPack                       0
     GetBinVarPackComm                  24
     GetRegPackComm                     40
     PortStageRead                       0
     PortStageSet                        8
     ProcClock_Action                    8
     ProcConect_Action                   0
     ProcConstAnal_Action                0
     ProcDay_Action                      8
     ProcDec_Action                      8
     ProcDiv_Action                     24
     ProcDownRight_Action                0
     ProcDown_Action                     0
     ProcEven_Action                     8
     ProcGetReg_Action                  16
     ProcInc_Action                      8
     ProcLim_Action                      8
     ProcMinus_Action                    0
     ProcMul_Action                      8
     ProcNOT_Action                      0
     ProcPlus_Action                     0
     ProcSPK_Action                      8
     ProcSetAnal_Action                 16
     ProcSetScn_Action                   8
     ProcStB_Action                      8
     ProcStI_Action                     16
     ProcStNI_Action                    16
     ProcStQ_Action                     16
     ProcStS_Action                      8
     ProcSumL_Action                     0
     ProcTLI1_Action                     8
     ProcTimerSet_Action                 8
     ProcToggleRS_Action                 8
     ProcToggleT_Action                  8
     ProcUpToRightDown_Action            0
     ProcUpToRight_Action                0
     ProcWOUTC_Action                   32
     ProcWOUTR_Action                   32
     ProcWOUTS_Action                   32
     ProcWOUT_Action                    40
     Program                            24
     ProgramChangeExecute                8
     RefreshNeuronsList                 16
     RemoveRfNodeAllTaska               16
     RemoveRfTask                        8
     SceneNrCount                       24
     SetModbusTask                       0
     SetTask                            48


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     NumberScene                        1
     ScreenUse                          2
     SceneBefOff                        1
     TransQuality                     216
     ProgConvers_DW_F                   4
     ButtonExe                        576
     gProg                          50800
     pProg                              4
     NeuronsList                      420
     Variables                         16
     VariablesImpulse                  16
     VariablesAnal                     40
     MainStage                       1808
     Trap                               8
     SetModbusTask                    304
     PortStageRead                     22
     PortStageSet                      32
     ProcStI_Action                   110
     ProcStNI_Action                  128
     ProcGetReg_Action                116
     ProcSetAnal_Action                58
     ProcConstAnal_Action               6
     ProcStB_Action                    34
     ProcStQ_Action                    52
     ProcStS_Action                    48
     ProcWOUT_Action                  316
     ProcWOUTS_Action                 168
     ProcWOUTR_Action                 168
     ProcWOUTC_Action                 304
     ProcNOT_Action                    14
     ProcToggleRS_Action               34
     ProcToggleT_Action                66
     ProcTLI1_Action                   36
     ProcLim_Action                    30
     ProcEven_Action                   30
     ProcPlus_Action                   14
     ProcMinus_Action                  14
     ProcMul_Action                    64
     ProcDiv_Action                   128
     ProcConect_Action                  6
     ProcDown_Action                    6
     ProcDownRight_Action               6
     ProcUpToRight_Action               6
     ProcUpToRightDown_Action           6
     LastScene                          1
     ProcSetScn_Action                 92
     ProcInc_Action                    72
     ProcDec_Action                    64
     ProcSPK_Action                   176
     ProcSumL_Action                   10
     ProcTimerSet_Action               72
     ProcClock_Action                 140
     ProcDay_Action                    40
     Busy_program                       1
     SceneNrLast                        1
     RealPrcLines                       1
     PtogTime                           4
     last_time                          4
     Program                         1984
     MemCol                             4
     MemRow                             4
     SceneNrCount                     104
     CheckScreenUse                   188
     CountLines                        80
     RefreshNeuronsList               168
     AddRsTask                        312
     AddRfTask_SearchNodeTask         312
     AddRfTask_RemoveSearchNodeTask   292
     RemoveRfNodeAllTaska             532
     RemoveRfTask                     488
     AddRfTask                        836
     AddRfTaskTMP                     112
     SetTask                          992
     ProgramChangeExecute              56
     GetBinVarPack                      2
     GetBinVarPackComm                156
     GetRegPackComm                   212
     ??DataTable0                       4
     ??DataTable3                       4
     ??DataTable4                       4
     ??DataTable7                       4
     ??DataTable8                       4

 
 53 926 bytes in section .bss
      6 bytes in section .data
  9 838 bytes in section Debug.txt
 
  9 838 bytes of CODE memory
 53 932 bytes of DATA memory

Errors: none
Warnings: 17
