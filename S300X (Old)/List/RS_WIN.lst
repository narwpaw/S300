###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           11/Sep/2013  19:44:42 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\RS_WIN.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\RS_WIN.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_ -D __ALARM -D     #
#                    __WIFI_MODULE -D _DEBUG_ -D S300iOld -D _ADMINISTRATOR_  #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.4 -         #
#                    12.06.2013\S300X (Old)\List\" --diag_suppress Pa082 -o   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\S300X (Old)\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.4 -     #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Ol                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\List\RS_WIN.lst                   #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\Obj\RS_WIN.o                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\RS_WIN.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : RS_WIN.c                                 *//
      7          //*  Opis                         : Plik komunikacji z programem RS-win      *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #include <intrinsics.h>
     24          #include "core/common.h"
     25          #include "core/device.h"
     26          #include "core/trace.h"
     27          #include "flash.h"
     28          #include "Framework.h"
     29          #include "Application_prog.h"
     30          
     31               

   \                                 In section .bss, align 4
     32          RAM ram;
   \                     ram:
   \   00000000                      DS8 400
     33          extern char *pProg;
     34          extern char WiFiDebug;
     35          //extern FlashPagesOffset;

   \                                 In section .bss, align 4
     36          ConversFC Convers_DW_B;
   \                     Convers_DW_B:
   \   00000000                      DS8 4
     37          
     38          
     39          
     40          
     41          //Zmienne zewnêtrzne -------------------------------------------------
     42              extern char g_czas_petli;
     43              extern const char identyfikacja[];
     44              extern int FlashProgramOfset;
     45              extern int FlashProgramReserveOfset;
     46              //extern char start_cykl;
     47              extern char g_Stop_Program;                                                     //1- zatrzymuje program
     48              extern char g_Restart_Program;                                                  //1- restartuje program
     49              extern _ProgramTab gProg;
     50              extern void Delay (unsigned long a);
     51              extern _Trap      Trap;
     52          //_______________Koniec globalnych zmiennych zewnêtrznych ______________________
     53          
     54              
     55          
     56          //*-----------------------------------------------------------------------------
     57          //* Nazwa funkcji :    komunikcja_RSwin
     58          //* Interpretacja i wykonanie rozkazów wysy³anych z programu RS-win
     59          //*-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
     60          void komunikcja_RSwin(char *ptr1, char *ptr2, unsigned int *ptr3)
     61          {
   \                     komunikcja_RSwin:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0400               MOVS     R4,R0
   \   00000004   0D00               MOVS     R5,R1
   \   00000006   1600               MOVS     R6,R2
     62          
     63          
     64              //Zmienne lokalne ----------------------------------------------------------
     65          
     66                unsigned long adres =0;;
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   0190               STR      R0,[SP, #+4]
     67              //----------------Koniec zmiennych lokalnych -------------------------------
     68            
     69           
     70              //Zmienne tymczasowe -------------------------------------------------------
     71                int tmp =0;
   \   0000000C   0027               MOVS     R7,#+0
     72                
     73              //----------------Koniec zmiennych tymczasowych ---------------------------- 
     74            
     75            
     76                
     77                
     78              //Zapis do dowolnego segmentu ----------------------------------------------
     79              if ((ptr1[0]==0xAD)& (ptr1[1]==0x05)) 
   \   0000000E   2078               LDRB     R0,[R4, #+0]
   \   00000010   AD28               CMP      R0,#+173
   \   00000012   68D1               BNE      ??komunikcja_RSwin_0
   \   00000014   0120               MOVS     R0,#+1
   \   00000016   6178               LDRB     R1,[R4, #+1]
   \   00000018   0529               CMP      R1,#+5
   \   0000001A   64D1               BNE      ??komunikcja_RSwin_0
   \   0000001C   C007               LSLS     R0,R0,#+31
   \   0000001E   62D5               BPL      ??komunikcja_RSwin_0
     80              {
     81                //Zapis programu zrodlowego
     82                adres = ptr1[4]+(ptr1[5]*0x100);
   \   00000020   2079               LDRB     R0,[R4, #+4]
   \   00000022   6179               LDRB     R1,[R4, #+5]
   \   00000024   8022               MOVS     R2,#+128
   \   00000026   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000028   5143               MULS     R1,R2,R1
   \   0000002A   4018               ADDS     R0,R0,R1
   \   0000002C   0190               STR      R0,[SP, #+4]
     83                if (ptr1[3]==0x70)
   \   0000002E   E078               LDRB     R0,[R4, #+3]
   \   00000030   7028               CMP      R0,#+112
   \   00000032   39D1               BNE      ??komunikcja_RSwin_1
     84                {
     85          
     86          
     87                       unsigned int Save = __get_interrupt_state();            
   \   00000034   ........           BL       __iar_get_interrupt_state
   \   00000038   0090               STR      R0,[SP, #+0]
     88                          __disable_interrupt();
   \   0000003A   ........           BL       __iar_disable_interrupt
     89                          
     90                      if (adres==0) 
   \   0000003E   0198               LDR      R0,[SP, #+4]
   \   00000040   0028               CMP      R0,#+0
   \   00000042   06D1               BNE      ??komunikcja_RSwin_2
     91                      {
     92                        //CleanFlash((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,sizeof(gProg));
     93                        CleanFlash((char*)&AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,sizeof(gProg));
   \   00000044   D249               LDR      R1,??komunikcja_RSwin_3  ;; 0xc670
   \   00000046   D348               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   00000048   0068               LDR      R0,[R0, #+0]
   \   0000004A   D34A               LDR      R2,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   0000004C   1018               ADDS     R0,R2,R0
   \   0000004E   ........           BL       CleanFlash
     94                      }
     95                      
     96                         
     97                          at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,adres,ptr1+7,ptr1[6]);
   \                     ??komunikcja_RSwin_2:
   \   00000052   A379               LDRB     R3,[R4, #+6]
   \   00000054   2200               MOVS     R2,R4
   \   00000056   D21D               ADDS     R2,R2,#+7
   \   00000058   0199               LDR      R1,[SP, #+4]
   \   0000005A   8C46               MOV      R12,R1
   \   0000005C   CD48               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   0000005E   0168               LDR      R1,[R0, #+0]
   \   00000060   CD48               LDR      R0,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000062   0818               ADDS     R0,R1,R0
   \   00000064   6146               MOV      R1,R12
   \   00000066   ........           BL       at91flashWrite
     98                      
     99                          
    100                          __set_interrupt_state(Save);
   \   0000006A   0098               LDR      R0,[SP, #+0]
   \   0000006C   ........           BL       __iar_set_interrupt_state
    101                          __enable_interrupt();  
   \   00000070   ........           BL       __iar_enable_interrupt
    102                     
    103                      
    104                      //Potwierdzenie
    105                      ptr2[0]=0xAC;
   \   00000074   AC20               MOVS     R0,#+172
   \   00000076   2870               STRB     R0,[R5, #+0]
    106                      ptr2[1]=0x02;
   \   00000078   0220               MOVS     R0,#+2
   \   0000007A   6870               STRB     R0,[R5, #+1]
    107                      *ptr3=2;
   \   0000007C   0220               MOVS     R0,#+2
   \   0000007E   3060               STR      R0,[R6, #+0]
    108                      ptr2[2]=CheckSum(ptr2, ptr3);
   \   00000080   3100               MOVS     R1,R6
   \   00000082   2800               MOVS     R0,R5
   \   00000084   ........           BL       CheckSum
   \   00000088   A870               STRB     R0,[R5, #+2]
    109                      
    110                        /*
    111                               memory_read=(char*)&gProg+adres;
    112                      
    113                      for (char i=0; i<ptr1[6]; i++)
    114                      {
    115                        *memory_read=*(ptr1+7+i);
    116                        memory_read++;
    117                      }
    118                          
    119                      */
    120                  
    121                    //przepisz program z flash do ram
    122                    char *memory_read_prog;
    123                    memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
   \   0000008A   C248               LDR      R0,??komunikcja_RSwin_3+0x4  ;; FlashProgramOfset
   \   0000008C   0068               LDR      R0,[R0, #+0]
   \   0000008E   C249               LDR      R1,??komunikcja_RSwin_3+0x8  ;; 0x130100
   \   00000090   0818               ADDS     R0,R1,R0
   \   00000092   0090               STR      R0,[SP, #+0]
    124                
    125                    
    126                    char *SourRam= (char*)&gProg;
   \   00000094   C148               LDR      R0,??komunikcja_RSwin_3+0xC  ;; gProg
    127                    int tProgramTabSize=ProgramTabSize;
   \   00000096   BE49               LDR      R1,??komunikcja_RSwin_3  ;; 0xc670
    128                    for (int k = 0 ; k <= tProgramTabSize ; k++) 
   \   00000098   0022               MOVS     R2,#+0
   \   0000009A   03E0               B        ??komunikcja_RSwin_4
    129                    { 
    130                          SourRam[k]=memory_read_prog[k]; 
   \                     ??komunikcja_RSwin_5:
   \   0000009C   009B               LDR      R3,[SP, #+0]
   \   0000009E   9B5C               LDRB     R3,[R3, R2]
   \   000000A0   8354               STRB     R3,[R0, R2]
    131                          
    132                    }
   \   000000A2   521C               ADDS     R2,R2,#+1
   \                     ??komunikcja_RSwin_4:
   \   000000A4   9142               CMP      R1,R2
   \   000000A6   F9DA               BGE      ??komunikcja_RSwin_5
    133                } 
    134                   
    135                
    136                if (ptr1[3]==0x10)
   \                     ??komunikcja_RSwin_1:
   \   000000A8   E078               LDRB     R0,[R4, #+3]
   \   000000AA   1028               CMP      R0,#+16
   \   000000AC   1BD1               BNE      ??komunikcja_RSwin_0
    137                {
    138                   char *memory_read;
    139                      memory_read=(char*)&gProg+adres;
   \   000000AE   0198               LDR      R0,[SP, #+4]
   \   000000B0   BA49               LDR      R1,??komunikcja_RSwin_3+0xC  ;; gProg
   \   000000B2   0818               ADDS     R0,R1,R0
    140                      
    141                      for (char i=0; i<ptr1[6]; i++)
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   06E0               B        ??komunikcja_RSwin_6
    142                      {
    143                        *memory_read=*(ptr1+7+i);
   \                     ??komunikcja_RSwin_7:
   \   000000B8   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000BA   090E               LSRS     R1,R1,#+24
   \   000000BC   6218               ADDS     R2,R4,R1
   \   000000BE   D279               LDRB     R2,[R2, #+7]
   \   000000C0   0270               STRB     R2,[R0, #+0]
    144                        memory_read++;
   \   000000C2   401C               ADDS     R0,R0,#+1
    145                      } 
   \   000000C4   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_6:
   \   000000C6   A279               LDRB     R2,[R4, #+6]
   \   000000C8   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000CA   090E               LSRS     R1,R1,#+24
   \   000000CC   9142               CMP      R1,R2
   \   000000CE   F3D3               BCC      ??komunikcja_RSwin_7
    146                      
    147                      
    148                     //Potwierdzenie
    149                      ptr2[0]=0xAC;
   \   000000D0   AC20               MOVS     R0,#+172
   \   000000D2   2870               STRB     R0,[R5, #+0]
    150                      ptr2[1]=0x02;
   \   000000D4   0220               MOVS     R0,#+2
   \   000000D6   6870               STRB     R0,[R5, #+1]
    151                      *ptr3=2;
   \   000000D8   0220               MOVS     R0,#+2
   \   000000DA   3060               STR      R0,[R6, #+0]
    152                      ptr2[2]=CheckSum(ptr2, ptr3);   
   \   000000DC   3100               MOVS     R1,R6
   \   000000DE   2800               MOVS     R0,R5
   \   000000E0   ........           BL       CheckSum
   \   000000E4   A870               STRB     R0,[R5, #+2]
    153                
    154                }
    155                
    156              }//-----------Koniec zapisu do dowolnego segmentu --------------------------         
    157              
    158              
    159              
    160              //Odczyt z dowolnego segmentu ----------------------------------------------
    161              if ((ptr1[0]==0xAD)& (ptr1[1]==0x03)) 
   \                     ??komunikcja_RSwin_0:
   \   000000E6   2078               LDRB     R0,[R4, #+0]
   \   000000E8   AD28               CMP      R0,#+173
   \   000000EA   5DD1               BNE      ??komunikcja_RSwin_8
   \   000000EC   0120               MOVS     R0,#+1
   \   000000EE   6178               LDRB     R1,[R4, #+1]
   \   000000F0   0329               CMP      R1,#+3
   \   000000F2   59D1               BNE      ??komunikcja_RSwin_8
   \   000000F4   C007               LSLS     R0,R0,#+31
   \   000000F6   57D5               BPL      ??komunikcja_RSwin_8
    162              {
    163                
    164          
    165                //Odczyt programu zrodlowego
    166                if ((ptr1[2]==0x00) & (ptr1[3]==0x10) /*& (ptr1[4]!=0x40)*/)
   \   000000F8   A078               LDRB     R0,[R4, #+2]
   \   000000FA   0028               CMP      R0,#+0
   \   000000FC   25D1               BNE      ??komunikcja_RSwin_9
   \   000000FE   0120               MOVS     R0,#+1
   \   00000100   E178               LDRB     R1,[R4, #+3]
   \   00000102   1029               CMP      R1,#+16
   \   00000104   21D1               BNE      ??komunikcja_RSwin_9
   \   00000106   C007               LSLS     R0,R0,#+31
   \   00000108   1FD5               BPL      ??komunikcja_RSwin_9
    167                {
    168                  
    169                  tmp = 2;
   \   0000010A   0227               MOVS     R7,#+2
    170                  
    171                  ptr2[0] =0xAC;
   \   0000010C   AC20               MOVS     R0,#+172
   \   0000010E   2870               STRB     R0,[R5, #+0]
    172                  ptr2[1] =0x04;
   \   00000110   0420               MOVS     R0,#+4
   \   00000112   6870               STRB     R0,[R5, #+1]
    173                  //*ptr3=2;
    174                  
    175                  adres = ptr1[4]+(ptr1[5]*0x100);
   \   00000114   2079               LDRB     R0,[R4, #+4]
   \   00000116   6179               LDRB     R1,[R4, #+5]
   \   00000118   8022               MOVS     R2,#+128
   \   0000011A   5200               LSLS     R2,R2,#+1        ;; #+256
   \   0000011C   5143               MULS     R1,R2,R1
   \   0000011E   4018               ADDS     R0,R0,R1
   \   00000120   0190               STR      R0,[SP, #+4]
    176                  
    177                  char *memory_read;
    178                  
    179                  //memory_read=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    180                  memory_read=(char*)&gProg;
   \   00000122   9E48               LDR      R0,??komunikcja_RSwin_3+0xC  ;; gProg
    181                  
    182                  
    183                  for (int k = 0 ; k <= (ptr1[6]-1) ; k++) 
   \   00000124   0021               MOVS     R1,#+0
   \   00000126   06E0               B        ??komunikcja_RSwin_10
    184                  { 
    185          
    186                      tmp++;
   \                     ??komunikcja_RSwin_11:
   \   00000128   7F1C               ADDS     R7,R7,#+1
    187                      
    188                      ptr2[2+k] =memory_read[adres+k]; 
   \   0000012A   6A18               ADDS     R2,R5,R1
   \   0000012C   019B               LDR      R3,[SP, #+4]
   \   0000012E   5B18               ADDS     R3,R3,R1
   \   00000130   C35C               LDRB     R3,[R0, R3]
   \   00000132   9370               STRB     R3,[R2, #+2]
    189                      
    190                  
    191                  }
   \   00000134   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_10:
   \   00000136   A279               LDRB     R2,[R4, #+6]
   \   00000138   521E               SUBS     R2,R2,#+1
   \   0000013A   8A42               CMP      R2,R1
   \   0000013C   F4DA               BGE      ??komunikcja_RSwin_11
    192                  
    193                  
    194                  
    195          
    196                  *ptr3=tmp;
   \   0000013E   3760               STR      R7,[R6, #+0]
    197                  ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   00000140   3100               MOVS     R1,R6
   \   00000142   2800               MOVS     R0,R5
   \   00000144   ........           BL       CheckSum
   \   00000148   E855               STRB     R0,[R5, R7]
    198                  
    199                }
    200          //tmp
    201                if ((ptr1[2]==0x00) & (ptr1[3]>0x70) & (ptr1[3]<0xC0)  /*& (ptr1[4]!=0x40)*/)
   \                     ??komunikcja_RSwin_9:
   \   0000014A   A078               LDRB     R0,[R4, #+2]
   \   0000014C   0028               CMP      R0,#+0
   \   0000014E   2BD1               BNE      ??komunikcja_RSwin_8
   \   00000150   0120               MOVS     R0,#+1
   \   00000152   E178               LDRB     R1,[R4, #+3]
   \   00000154   7129               CMP      R1,#+113
   \   00000156   27D3               BCC      ??komunikcja_RSwin_8
   \   00000158   0121               MOVS     R1,#+1
   \   0000015A   E278               LDRB     R2,[R4, #+3]
   \   0000015C   C02A               CMP      R2,#+192
   \   0000015E   23D2               BCS      ??komunikcja_RSwin_8
   \   00000160   0140               ANDS     R1,R1,R0
   \   00000162   C807               LSLS     R0,R1,#+31
   \   00000164   20D5               BPL      ??komunikcja_RSwin_8
    202                {
    203                  
    204                  tmp = 2;
   \   00000166   0227               MOVS     R7,#+2
    205                  
    206                  ptr2[0] =0xAC;
   \   00000168   AC20               MOVS     R0,#+172
   \   0000016A   2870               STRB     R0,[R5, #+0]
    207                  ptr2[1] =0x04;
   \   0000016C   0420               MOVS     R0,#+4
   \   0000016E   6870               STRB     R0,[R5, #+1]
    208                  //*ptr3=2;
    209                  
    210                  adres = ptr1[4]+(ptr1[5]*0x100);
   \   00000170   2079               LDRB     R0,[R4, #+4]
   \   00000172   6179               LDRB     R1,[R4, #+5]
   \   00000174   8022               MOVS     R2,#+128
   \   00000176   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000178   5143               MULS     R1,R2,R1
   \   0000017A   4018               ADDS     R0,R0,R1
   \   0000017C   0190               STR      R0,[SP, #+4]
    211                  for (int k = 0 ; k <= (ptr1[6]-1) ; k++) 
   \   0000017E   0020               MOVS     R0,#+0
   \   00000180   08E0               B        ??komunikcja_RSwin_12
    212                  { 
    213                      ptr2[2+k] = pProg[adres+k];
   \                     ??komunikcja_RSwin_13:
   \   00000182   2918               ADDS     R1,R5,R0
   \   00000184   019A               LDR      R2,[SP, #+4]
   \   00000186   1218               ADDS     R2,R2,R0
   \   00000188   854B               LDR      R3,??komunikcja_RSwin_3+0x10  ;; pProg
   \   0000018A   1B68               LDR      R3,[R3, #+0]
   \   0000018C   9A5C               LDRB     R2,[R3, R2]
   \   0000018E   8A70               STRB     R2,[R1, #+2]
    214                      tmp++;
   \   00000190   7F1C               ADDS     R7,R7,#+1
    215                  }
   \   00000192   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_12:
   \   00000194   A179               LDRB     R1,[R4, #+6]
   \   00000196   491E               SUBS     R1,R1,#+1
   \   00000198   8142               CMP      R1,R0
   \   0000019A   F2DA               BGE      ??komunikcja_RSwin_13
    216          
    217                  *ptr3=tmp;
   \   0000019C   3760               STR      R7,[R6, #+0]
    218                  ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   0000019E   3100               MOVS     R1,R6
   \   000001A0   2800               MOVS     R0,R5
   \   000001A2   ........           BL       CheckSum
   \   000001A6   E855               STRB     R0,[R5, R7]
    219                  
    220                } 
    221          //kon tmp
    222                
    223              }//------------------Koniec odczytu z dowolnego segmentu--------------------    
    224              
    225              
    226          
    227              //Odczyt z segmentu 0 ------------------------------------------------------
    228              if ((ptr1[0]==0xAC)& (ptr1[1]==0x03) & (ptr1[2]!=0x14) & (ptr1[2]!=0x80) ) 
   \                     ??komunikcja_RSwin_8:
   \   000001A8   2078               LDRB     R0,[R4, #+0]
   \   000001AA   AC28               CMP      R0,#+172
   \   000001AC   00D0               BEQ      .+4
   \   000001AE   A2E0               B        ??komunikcja_RSwin_14
   \   000001B0   0120               MOVS     R0,#+1
   \   000001B2   6178               LDRB     R1,[R4, #+1]
   \   000001B4   0329               CMP      R1,#+3
   \   000001B6   00D0               BEQ      .+4
   \   000001B8   9DE0               B        ??komunikcja_RSwin_14
   \   000001BA   0121               MOVS     R1,#+1
   \   000001BC   A278               LDRB     R2,[R4, #+2]
   \   000001BE   142A               CMP      R2,#+20
   \   000001C0   00D1               BNE      .+4
   \   000001C2   98E0               B        ??komunikcja_RSwin_14
   \   000001C4   0122               MOVS     R2,#+1
   \   000001C6   A378               LDRB     R3,[R4, #+2]
   \   000001C8   802B               CMP      R3,#+128
   \   000001CA   00D1               BNE      .+4
   \   000001CC   93E0               B        ??komunikcja_RSwin_14
   \   000001CE   0140               ANDS     R1,R1,R0
   \   000001D0   0A40               ANDS     R2,R2,R1
   \   000001D2   D007               LSLS     R0,R2,#+31
   \   000001D4   00D4               BMI      .+4
   \   000001D6   8EE0               B        ??komunikcja_RSwin_14
    229              {
    230                
    231                //odczyt zmiennych dwustanwych
    232                if (   (ptr1[2]+(ptr1[3]*0x100)>= 0xC000) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xC7FF)  )
   \   000001D8   A078               LDRB     R0,[R4, #+2]
   \   000001DA   E178               LDRB     R1,[R4, #+3]
   \   000001DC   8022               MOVS     R2,#+128
   \   000001DE   5200               LSLS     R2,R2,#+1        ;; #+256
   \   000001E0   5143               MULS     R1,R2,R1
   \   000001E2   4018               ADDS     R0,R0,R1
   \   000001E4   C021               MOVS     R1,#+192
   \   000001E6   0902               LSLS     R1,R1,#+8        ;; #+49152
   \   000001E8   8842               CMP      R0,R1
   \   000001EA   2BDB               BLT      ??komunikcja_RSwin_15
   \   000001EC   A078               LDRB     R0,[R4, #+2]
   \   000001EE   E178               LDRB     R1,[R4, #+3]
   \   000001F0   8022               MOVS     R2,#+128
   \   000001F2   5200               LSLS     R2,R2,#+1        ;; #+256
   \   000001F4   5143               MULS     R1,R2,R1
   \   000001F6   4018               ADDS     R0,R0,R1
   \   000001F8   C821               MOVS     R1,#+200
   \   000001FA   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   000001FC   8842               CMP      R0,R1
   \   000001FE   21DA               BGE      ??komunikcja_RSwin_15
    233                {
    234                  
    235                  
    236                  ptr2[0] =0xAC;
   \   00000200   AC20               MOVS     R0,#+172
   \   00000202   2870               STRB     R0,[R5, #+0]
    237                  ptr2[1] =0x04;
   \   00000204   0420               MOVS     R0,#+4
   \   00000206   6870               STRB     R0,[R5, #+1]
    238                  tmp = 2;
   \   00000208   0227               MOVS     R7,#+2
    239                  
    240                  for (int k = 0; k <= ptr1[4]-1; k++) 
   \   0000020A   0020               MOVS     R0,#+0
   \   0000020C   0090               STR      R0,[SP, #+0]
   \   0000020E   14E0               B        ??komunikcja_RSwin_16
    241                  { 
    242                    adres = (ptr1[2]+(ptr1[3]*0x100)-0xC000 +k);
   \                     ??komunikcja_RSwin_17:
   \   00000210   A078               LDRB     R0,[R4, #+2]
   \   00000212   E178               LDRB     R1,[R4, #+3]
   \   00000214   8022               MOVS     R2,#+128
   \   00000216   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000218   5143               MULS     R1,R2,R1
   \   0000021A   4018               ADDS     R0,R0,R1
   \   0000021C   0099               LDR      R1,[SP, #+0]
   \   0000021E   4018               ADDS     R0,R0,R1
   \   00000220   6049               LDR      R1,??komunikcja_RSwin_3+0x14  ;; 0xffff4000
   \   00000222   4018               ADDS     R0,R0,R1
   \   00000224   0190               STR      R0,[SP, #+4]
    243                    ptr2[2+k] = BinVarToMaster(&adres);     
   \   00000226   01A8               ADD      R0,SP,#+4
   \   00000228   ........           BL       BinVarToMaster
   \   0000022C   0099               LDR      R1,[SP, #+0]
   \   0000022E   6918               ADDS     R1,R5,R1
   \   00000230   8870               STRB     R0,[R1, #+2]
    244                    tmp++;
   \   00000232   7F1C               ADDS     R7,R7,#+1
    245                  }
   \   00000234   0098               LDR      R0,[SP, #+0]
   \   00000236   401C               ADDS     R0,R0,#+1
   \   00000238   0090               STR      R0,[SP, #+0]
   \                     ??komunikcja_RSwin_16:
   \   0000023A   2079               LDRB     R0,[R4, #+4]
   \   0000023C   401E               SUBS     R0,R0,#+1
   \   0000023E   0099               LDR      R1,[SP, #+0]
   \   00000240   8842               CMP      R0,R1
   \   00000242   E5DA               BGE      ??komunikcja_RSwin_17
    246                  
    247                }//Koniec odczytu zmiennych dwustanowych
    248                      
    249                      
    250                //Odczyt zmiennych analogowych
    251                if (  (ptr1[2]+(ptr1[3]*0x100)>= 0xC800) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xDFFF) )
   \                     ??komunikcja_RSwin_15:
   \   00000244   A078               LDRB     R0,[R4, #+2]
   \   00000246   E178               LDRB     R1,[R4, #+3]
   \   00000248   8022               MOVS     R2,#+128
   \   0000024A   5200               LSLS     R2,R2,#+1        ;; #+256
   \   0000024C   5143               MULS     R1,R2,R1
   \   0000024E   4018               ADDS     R0,R0,R1
   \   00000250   C821               MOVS     R1,#+200
   \   00000252   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   00000254   8842               CMP      R0,R1
   \   00000256   48DB               BLT      ??komunikcja_RSwin_18
   \   00000258   A078               LDRB     R0,[R4, #+2]
   \   0000025A   E178               LDRB     R1,[R4, #+3]
   \   0000025C   8022               MOVS     R2,#+128
   \   0000025E   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000260   5143               MULS     R1,R2,R1
   \   00000262   4018               ADDS     R0,R0,R1
   \   00000264   E021               MOVS     R1,#+224
   \   00000266   0902               LSLS     R1,R1,#+8        ;; #+57344
   \   00000268   8842               CMP      R0,R1
   \   0000026A   3EDA               BGE      ??komunikcja_RSwin_18
    252                {   
    253                  
    254                  ptr2[0] =0xAC;
   \   0000026C   AC20               MOVS     R0,#+172
   \   0000026E   2870               STRB     R0,[R5, #+0]
    255                  ptr2[1] =0x04;
   \   00000270   0420               MOVS     R0,#+4
   \   00000272   6870               STRB     R0,[R5, #+1]
    256                  tmp = 2;
   \   00000274   0227               MOVS     R7,#+2
    257                  
    258                  for (int k = 0; k <= ptr1[4]-1; k=k+4) 
   \   00000276   0020               MOVS     R0,#+0
   \   00000278   0090               STR      R0,[SP, #+0]
   \   0000027A   31E0               B        ??komunikcja_RSwin_19
    259                  { 
    260                    
    261                    adres = ((ptr1[2]+(ptr1[3]*0x100)-0xC800)/4)  +(k/4);
   \                     ??komunikcja_RSwin_20:
   \   0000027C   A078               LDRB     R0,[R4, #+2]
   \   0000027E   E178               LDRB     R1,[R4, #+3]
   \   00000280   8022               MOVS     R2,#+128
   \   00000282   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000284   5143               MULS     R1,R2,R1
   \   00000286   4018               ADDS     R0,R0,R1
   \   00000288   4749               LDR      R1,??komunikcja_RSwin_3+0x18  ;; 0xffff3800
   \   0000028A   4018               ADDS     R0,R0,R1
   \   0000028C   0421               MOVS     R1,#+4
   \   0000028E   ........           BL       __aeabi_idivmod
   \   00000292   0100               MOVS     R1,R0
   \   00000294   02B5               PUSH     {R1,LR}
   \   00000296   0298               LDR      R0,[SP, #+8]
   \   00000298   0421               MOVS     R1,#+4
   \   0000029A   ........           BL       __aeabi_idivmod
   \   0000029E   0099               LDR      R1,[SP, #0]
   \   000002A0   02B0               ADD      SP,SP,#+8
   \   000002A2   0818               ADDS     R0,R1,R0
   \   000002A4   0190               STR      R0,[SP, #+4]
    262                    
    263                    Convers_DW_B.DWvar = AnaVarToMaster(&adres);  
   \   000002A6   01A8               ADD      R0,SP,#+4
   \   000002A8   ........           BL       AnaVarToMaster
   \   000002AC   3F49               LDR      R1,??komunikcja_RSwin_3+0x1C  ;; Convers_DW_B
   \   000002AE   0860               STR      R0,[R1, #+0]
    264                    
    265                    // zmiana kolejnoci dla nowego RSWINa
    266                   /*
    267                    ptr2[k+2]   =Convers_DW_B.Bvar[3];
    268                    ptr2[k+3]   =Convers_DW_B.Bvar[2];
    269                    ptr2[k+4]   =Convers_DW_B.Bvar[0];
    270                    ptr2[k+5]   =Convers_DW_B.Bvar[1];
    271                   */
    272                    ptr2[k+2]   =Convers_DW_B.Bvar[0];
   \   000002B0   0098               LDR      R0,[SP, #+0]
   \   000002B2   2818               ADDS     R0,R5,R0
   \   000002B4   3D49               LDR      R1,??komunikcja_RSwin_3+0x1C  ;; Convers_DW_B
   \   000002B6   0978               LDRB     R1,[R1, #+0]
   \   000002B8   8170               STRB     R1,[R0, #+2]
    273                    ptr2[k+3]   =Convers_DW_B.Bvar[1];
   \   000002BA   0098               LDR      R0,[SP, #+0]
   \   000002BC   2818               ADDS     R0,R5,R0
   \   000002BE   3C49               LDR      R1,??komunikcja_RSwin_3+0x20  ;; Convers_DW_B + 1
   \   000002C0   0978               LDRB     R1,[R1, #+0]
   \   000002C2   C170               STRB     R1,[R0, #+3]
    274                    ptr2[k+4]   =Convers_DW_B.Bvar[2];
   \   000002C4   0098               LDR      R0,[SP, #+0]
   \   000002C6   2818               ADDS     R0,R5,R0
   \   000002C8   3A49               LDR      R1,??komunikcja_RSwin_3+0x24  ;; Convers_DW_B + 2
   \   000002CA   0978               LDRB     R1,[R1, #+0]
   \   000002CC   0171               STRB     R1,[R0, #+4]
    275                    ptr2[k+5]   =Convers_DW_B.Bvar[3];
   \   000002CE   0098               LDR      R0,[SP, #+0]
   \   000002D0   2818               ADDS     R0,R5,R0
   \   000002D2   3949               LDR      R1,??komunikcja_RSwin_3+0x28  ;; Convers_DW_B + 3
   \   000002D4   0978               LDRB     R1,[R1, #+0]
   \   000002D6   4171               STRB     R1,[R0, #+5]
    276                    
    277                    tmp=tmp+4;
   \   000002D8   3F1D               ADDS     R7,R7,#+4
    278                   }
   \   000002DA   0098               LDR      R0,[SP, #+0]
   \   000002DC   001D               ADDS     R0,R0,#+4
   \   000002DE   0090               STR      R0,[SP, #+0]
   \                     ??komunikcja_RSwin_19:
   \   000002E0   2079               LDRB     R0,[R4, #+4]
   \   000002E2   401E               SUBS     R0,R0,#+1
   \   000002E4   0099               LDR      R1,[SP, #+0]
   \   000002E6   8842               CMP      R0,R1
   \   000002E8   C8DA               BGE      ??komunikcja_RSwin_20
    279                 }//Koniec odczytu zmiennych analogowych
    280                 *ptr3=tmp;
   \                     ??komunikcja_RSwin_18:
   \   000002EA   3760               STR      R7,[R6, #+0]
    281                 ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   000002EC   3100               MOVS     R1,R6
   \   000002EE   2800               MOVS     R0,R5
   \   000002F0   ........           BL       CheckSum
   \   000002F4   E855               STRB     R0,[R5, R7]
    282              
    283              }//-------------------Koniec odczytu z segmentu 0---------------------------
    284              
    285              
    286              
    287              //Zapis do segmentu 0-------------------------------------------------------
    288              if ((ptr1[0]==0xAC)& (ptr1[1]==0x05)) 
   \                     ??komunikcja_RSwin_14:
   \   000002F6   2078               LDRB     R0,[R4, #+0]
   \   000002F8   AC28               CMP      R0,#+172
   \   000002FA   00D0               BEQ      .+4
   \   000002FC   97E0               B        ??komunikcja_RSwin_21
   \   000002FE   0120               MOVS     R0,#+1
   \   00000300   6178               LDRB     R1,[R4, #+1]
   \   00000302   0529               CMP      R1,#+5
   \   00000304   00D0               BEQ      .+4
   \   00000306   92E0               B        ??komunikcja_RSwin_21
   \   00000308   C007               LSLS     R0,R0,#+31
   \   0000030A   00D4               BMI      .+4
   \   0000030C   8FE0               B        ??komunikcja_RSwin_21
    289              {
    290          
    291                //Zapis zmiennych dwustanowych
    292                if ( (ptr1[2]+(ptr1[3]*0x100)>= 0xC000) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xC7FF))
   \   0000030E   A078               LDRB     R0,[R4, #+2]
   \   00000310   E178               LDRB     R1,[R4, #+3]
   \   00000312   8022               MOVS     R2,#+128
   \   00000314   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000316   5143               MULS     R1,R2,R1
   \   00000318   4018               ADDS     R0,R0,R1
   \   0000031A   C021               MOVS     R1,#+192
   \   0000031C   0902               LSLS     R1,R1,#+8        ;; #+49152
   \   0000031E   8842               CMP      R0,R1
   \   00000320   1FDB               BLT      ??komunikcja_RSwin_22
   \   00000322   A078               LDRB     R0,[R4, #+2]
   \   00000324   E178               LDRB     R1,[R4, #+3]
   \   00000326   8022               MOVS     R2,#+128
   \   00000328   5200               LSLS     R2,R2,#+1        ;; #+256
   \   0000032A   5143               MULS     R1,R2,R1
   \   0000032C   4018               ADDS     R0,R0,R1
   \   0000032E   C821               MOVS     R1,#+200
   \   00000330   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   00000332   8842               CMP      R0,R1
   \   00000334   15DA               BGE      ??komunikcja_RSwin_22
    293                {
    294                  for (int k = 0; k <= ptr1[4]-1; k++) 
   \   00000336   0027               MOVS     R7,#+0
   \   00000338   0FE0               B        ??komunikcja_RSwin_23
    295                  { 
    296                    adres = (ptr1[2]+(ptr1[3]*0x100)-0xC000+k);
   \                     ??komunikcja_RSwin_24:
   \   0000033A   A078               LDRB     R0,[R4, #+2]
   \   0000033C   E178               LDRB     R1,[R4, #+3]
   \   0000033E   8022               MOVS     R2,#+128
   \   00000340   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000342   5143               MULS     R1,R2,R1
   \   00000344   4018               ADDS     R0,R0,R1
   \   00000346   C019               ADDS     R0,R0,R7
   \   00000348   1649               LDR      R1,??komunikcja_RSwin_3+0x14  ;; 0xffff4000
   \   0000034A   4018               ADDS     R0,R0,R1
   \   0000034C   0190               STR      R0,[SP, #+4]
    297                    MasterToBinVar(&adres, &ptr1[5]);              //Konwersja z formatu Master i zapis
   \   0000034E   2100               MOVS     R1,R4
   \   00000350   491D               ADDS     R1,R1,#+5
   \   00000352   01A8               ADD      R0,SP,#+4
   \   00000354   ........           BL       MasterToBinVar
    298                  }        
   \   00000358   7F1C               ADDS     R7,R7,#+1
   \                     ??komunikcja_RSwin_23:
   \   0000035A   2079               LDRB     R0,[R4, #+4]
   \   0000035C   401E               SUBS     R0,R0,#+1
   \   0000035E   B842               CMP      R0,R7
   \   00000360   EBDA               BGE      ??komunikcja_RSwin_24
    299                }//Koniec zapisu zmiennych dwustanowch
    300                      
    301                      
    302                
    303                //Zapis zmiennej analogowej
    304                if ( (ptr1[2]+(ptr1[3]*0x100)>= 0xC800) &&  (ptr1[2]+(ptr1[3]*0x100)<= 0xDFFF))
   \                     ??komunikcja_RSwin_22:
   \   00000362   A078               LDRB     R0,[R4, #+2]
   \   00000364   E178               LDRB     R1,[R4, #+3]
   \   00000366   8022               MOVS     R2,#+128
   \   00000368   5200               LSLS     R2,R2,#+1        ;; #+256
   \   0000036A   5143               MULS     R1,R2,R1
   \   0000036C   4018               ADDS     R0,R0,R1
   \   0000036E   C821               MOVS     R1,#+200
   \   00000370   0902               LSLS     R1,R1,#+8        ;; #+51200
   \   00000372   8842               CMP      R0,R1
   \   00000374   50DB               BLT      ??komunikcja_RSwin_25
   \   00000376   A078               LDRB     R0,[R4, #+2]
   \   00000378   E178               LDRB     R1,[R4, #+3]
   \   0000037A   8022               MOVS     R2,#+128
   \   0000037C   5200               LSLS     R2,R2,#+1        ;; #+256
   \   0000037E   5143               MULS     R1,R2,R1
   \   00000380   4018               ADDS     R0,R0,R1
   \   00000382   E021               MOVS     R1,#+224
   \   00000384   0902               LSLS     R1,R1,#+8        ;; #+57344
   \   00000386   8842               CMP      R0,R1
   \   00000388   46DA               BGE      ??komunikcja_RSwin_25
    305                {
    306                                                           
    307          
    308                  for (int k = 0; k <= ptr1[4]-1; k=k+4) 
   \   0000038A   0027               MOVS     R7,#+0
   \   0000038C   40E0               B        ??komunikcja_RSwin_26
   \   0000038E   C046               Nop      
   \                     ??komunikcja_RSwin_3:
   \   00000390   70C60000           DC32     0xc670
   \   00000394   ........           DC32     FlashProgramOfset
   \   00000398   00011300           DC32     0x130100
   \   0000039C   ........           DC32     gProg
   \   000003A0   ........           DC32     pProg
   \   000003A4   0040FFFF           DC32     0xffff4000
   \   000003A8   0038FFFF           DC32     0xffff3800
   \   000003AC   ........           DC32     Convers_DW_B
   \   000003B0   ........           DC32     Convers_DW_B + 1
   \   000003B4   ........           DC32     Convers_DW_B + 2
   \   000003B8   ........           DC32     Convers_DW_B + 3
    309                  { /*
    310                    // zmiana kolejnoci dla nowego RSWINa
    311                    
    312                    Convers_DW_B.Bvar[3] = ptr1[5+(k)+0];
    313                    Convers_DW_B.Bvar[2] = ptr1[5+(k)+1];
    314                    Convers_DW_B.Bvar[0] = ptr1[5+(k)+2];
    315                    Convers_DW_B.Bvar[1] = ptr1[5+(k)+3];
    316                    */
    317                    Convers_DW_B.Bvar[0] = ptr1[5+(k)+0];
   \                     ??komunikcja_RSwin_27:
   \   000003BC   9848               LDR      R0,??komunikcja_RSwin_28  ;; Convers_DW_B
   \   000003BE   E119               ADDS     R1,R4,R7
   \   000003C0   4979               LDRB     R1,[R1, #+5]
   \   000003C2   0170               STRB     R1,[R0, #+0]
    318                    Convers_DW_B.Bvar[1] = ptr1[5+(k)+1];
   \   000003C4   9748               LDR      R0,??komunikcja_RSwin_28+0x4  ;; Convers_DW_B + 1
   \   000003C6   E119               ADDS     R1,R4,R7
   \   000003C8   8979               LDRB     R1,[R1, #+6]
   \   000003CA   0170               STRB     R1,[R0, #+0]
    319                    Convers_DW_B.Bvar[2] = ptr1[5+(k)+2];
   \   000003CC   9648               LDR      R0,??komunikcja_RSwin_28+0x8  ;; Convers_DW_B + 2
   \   000003CE   E119               ADDS     R1,R4,R7
   \   000003D0   C979               LDRB     R1,[R1, #+7]
   \   000003D2   0170               STRB     R1,[R0, #+0]
    320                    Convers_DW_B.Bvar[3] = ptr1[5+(k)+3];
   \   000003D4   9548               LDR      R0,??komunikcja_RSwin_28+0xC  ;; Convers_DW_B + 3
   \   000003D6   E119               ADDS     R1,R4,R7
   \   000003D8   097A               LDRB     R1,[R1, #+8]
   \   000003DA   0170               STRB     R1,[R0, #+0]
    321                    
    322                    
    323                    adres= (((ptr1[2]+(ptr1[3]*0x100)-0xC800))/4)+(k/4);
   \   000003DC   A078               LDRB     R0,[R4, #+2]
   \   000003DE   E178               LDRB     R1,[R4, #+3]
   \   000003E0   8022               MOVS     R2,#+128
   \   000003E2   5200               LSLS     R2,R2,#+1        ;; #+256
   \   000003E4   5143               MULS     R1,R2,R1
   \   000003E6   4018               ADDS     R0,R0,R1
   \   000003E8   9149               LDR      R1,??komunikcja_RSwin_28+0x10  ;; 0xffff3800
   \   000003EA   4018               ADDS     R0,R0,R1
   \   000003EC   0421               MOVS     R1,#+4
   \   000003EE   ........           BL       __aeabi_idivmod
   \   000003F2   0100               MOVS     R1,R0
   \   000003F4   02B5               PUSH     {R1,LR}
   \   000003F6   3800               MOVS     R0,R7
   \   000003F8   0421               MOVS     R1,#+4
   \   000003FA   ........           BL       __aeabi_idivmod
   \   000003FE   0099               LDR      R1,[SP, #0]
   \   00000400   02B0               ADD      SP,SP,#+8
   \   00000402   0818               ADDS     R0,R1,R0
   \   00000404   0190               STR      R0,[SP, #+4]
    324                    MasterToAnaVar(&adres, &Convers_DW_B.DWvar);
   \   00000406   8649               LDR      R1,??komunikcja_RSwin_28  ;; Convers_DW_B
   \   00000408   01A8               ADD      R0,SP,#+4
   \   0000040A   ........           BL       MasterToAnaVar
    325          
    326                  } //koniec petli k
   \   0000040E   3F1D               ADDS     R7,R7,#+4
   \                     ??komunikcja_RSwin_26:
   \   00000410   2079               LDRB     R0,[R4, #+4]
   \   00000412   401E               SUBS     R0,R0,#+1
   \   00000414   B842               CMP      R0,R7
   \   00000416   D1DA               BGE      ??komunikcja_RSwin_27
    327                  
    328                }//Koniec zapisu zmiennych analogowych
    329                      
    330                      
    331                      
    332                      
    333                  //Potwierdzenie
    334                  ptr2[0]=0xAC;
   \                     ??komunikcja_RSwin_25:
   \   00000418   AC20               MOVS     R0,#+172
   \   0000041A   2870               STRB     R0,[R5, #+0]
    335                  ptr2[1]=0x02;
   \   0000041C   0220               MOVS     R0,#+2
   \   0000041E   6870               STRB     R0,[R5, #+1]
    336                  *ptr3=2;
   \   00000420   0220               MOVS     R0,#+2
   \   00000422   3060               STR      R0,[R6, #+0]
    337                  //koniec potwoerdzenia
    338                  
    339                   ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   00000424   3100               MOVS     R1,R6
   \   00000426   2800               MOVS     R0,R5
   \   00000428   ........           BL       CheckSum
   \   0000042C   A870               STRB     R0,[R5, #+2]
    340           
    341              }//------------------Koniec zapisu do segmentu 0---------------------------       
    342                 
    343              
    344          
    345              
    346              //!!! Standardowe pytania -------------------------------------------------- 
    347             
    348                  //Przepisz program uzytkowy z Ram do flash
    349                  if ( (ptr1[0]==0xAC) && (ptr1[1]==0x06) && (ptr1[2]==0x4E) )
   \                     ??komunikcja_RSwin_21:
   \   0000042E   2078               LDRB     R0,[R4, #+0]
   \   00000430   AC28               CMP      R0,#+172
   \   00000432   15D1               BNE      ??komunikcja_RSwin_29
   \   00000434   6078               LDRB     R0,[R4, #+1]
   \   00000436   0628               CMP      R0,#+6
   \   00000438   12D1               BNE      ??komunikcja_RSwin_29
   \   0000043A   A078               LDRB     R0,[R4, #+2]
   \   0000043C   4E28               CMP      R0,#+78
   \   0000043E   0FD1               BNE      ??komunikcja_RSwin_29
    350                    {
    351                      ptr2[0]=0xAC;
   \   00000440   AC20               MOVS     R0,#+172
   \   00000442   2870               STRB     R0,[R5, #+0]
    352                      ptr2[1]=0x02;
   \   00000444   0220               MOVS     R0,#+2
   \   00000446   6870               STRB     R0,[R5, #+1]
    353                      *ptr3=2;
   \   00000448   0220               MOVS     R0,#+2
   \   0000044A   3060               STR      R0,[R6, #+0]
    354                      ptr2[2]=CheckSum(ptr2, ptr3);
   \   0000044C   3100               MOVS     R1,R6
   \   0000044E   2800               MOVS     R0,R5
   \   00000450   ........           BL       CheckSum
   \   00000454   A870               STRB     R0,[R5, #+2]
    355                      
    356                      
    357                       RamToFlash();
   \   00000456   ........           BL       RamToFlash
    358                       ProgramChangeExecute(&gProg); 
   \   0000045A   7648               LDR      R0,??komunikcja_RSwin_28+0x14  ;; gProg
   \   0000045C   ........           BL       ProgramChangeExecute
    359          
    360                    }
    361          
    362          
    363              
    364                    //Ustaw pu³apkê
    365                    if (
    366                         (ptr1[0]==0xAA)&&
    367                         (ptr1[1]==0xAA)&&
    368                         (ptr1[2]==0x01)
    369                        )
   \                     ??komunikcja_RSwin_29:
   \   00000460   2078               LDRB     R0,[R4, #+0]
   \   00000462   AA28               CMP      R0,#+170
   \   00000464   1FD1               BNE      ??komunikcja_RSwin_30
   \   00000466   6078               LDRB     R0,[R4, #+1]
   \   00000468   AA28               CMP      R0,#+170
   \   0000046A   1CD1               BNE      ??komunikcja_RSwin_30
   \   0000046C   A078               LDRB     R0,[R4, #+2]
   \   0000046E   0128               CMP      R0,#+1
   \   00000470   19D1               BNE      ??komunikcja_RSwin_30
    370                      {
    371                       
    372                        Trap.Row=ptr1[3];
   \   00000472   7148               LDR      R0,??komunikcja_RSwin_28+0x18  ;; Trap + 1
   \   00000474   E178               LDRB     R1,[R4, #+3]
   \   00000476   0170               STRB     R1,[R0, #+0]
    373                        Trap.Col=ptr1[4];
   \   00000478   7048               LDR      R0,??komunikcja_RSwin_28+0x1C  ;; Trap + 2
   \   0000047A   2179               LDRB     R1,[R4, #+4]
   \   0000047C   0170               STRB     R1,[R0, #+0]
    374                        Trap.Enable=1;
   \   0000047E   7048               LDR      R0,??komunikcja_RSwin_28+0x20  ;; Trap
   \   00000480   0121               MOVS     R1,#+1
   \   00000482   0170               STRB     R1,[R0, #+0]
    375                        Trap.Activ=0;
   \   00000484   6F48               LDR      R0,??komunikcja_RSwin_28+0x24  ;; Trap + 3
   \   00000486   0021               MOVS     R1,#+0
   \   00000488   0170               STRB     R1,[R0, #+0]
    376                        Trap.Change=1;
   \   0000048A   6F48               LDR      R0,??komunikcja_RSwin_28+0x28  ;; Trap + 4
   \   0000048C   0121               MOVS     R1,#+1
   \   0000048E   0170               STRB     R1,[R0, #+0]
    377                        
    378                        
    379                        //Potwierdzenie
    380                         ptr2[0]=0xAB;
   \   00000490   AB20               MOVS     R0,#+171
   \   00000492   2870               STRB     R0,[R5, #+0]
    381                         ptr2[1]=0xAB;
   \   00000494   AB20               MOVS     R0,#+171
   \   00000496   6870               STRB     R0,[R5, #+1]
    382                         *ptr3=2;
   \   00000498   0220               MOVS     R0,#+2
   \   0000049A   3060               STR      R0,[R6, #+0]
    383                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   0000049C   3100               MOVS     R1,R6
   \   0000049E   2800               MOVS     R0,R5
   \   000004A0   ........           BL       CheckSum
   \   000004A4   A870               STRB     R0,[R5, #+2]
    384                        //koniec potwoerdzenia
    385          
    386                      }//koniec "Ustaw pu³apkê"
    387                   
    388              
    389              
    390                    //Usuñ pu³apki
    391                    if (
    392                         (ptr1[0]==0xAA)&&
    393                         (ptr1[1]==0xAA)&&
    394                         (ptr1[2]==0x02)
    395                        )
   \                     ??komunikcja_RSwin_30:
   \   000004A6   2078               LDRB     R0,[R4, #+0]
   \   000004A8   AA28               CMP      R0,#+170
   \   000004AA   1CD1               BNE      ??komunikcja_RSwin_31
   \   000004AC   6078               LDRB     R0,[R4, #+1]
   \   000004AE   AA28               CMP      R0,#+170
   \   000004B0   19D1               BNE      ??komunikcja_RSwin_31
   \   000004B2   A078               LDRB     R0,[R4, #+2]
   \   000004B4   0228               CMP      R0,#+2
   \   000004B6   16D1               BNE      ??komunikcja_RSwin_31
    396                      {
    397                        
    398                        Trap.Enable=0;
   \   000004B8   6148               LDR      R0,??komunikcja_RSwin_28+0x20  ;; Trap
   \   000004BA   0021               MOVS     R1,#+0
   \   000004BC   0170               STRB     R1,[R0, #+0]
    399                        Trap.Row=0;
   \   000004BE   5E48               LDR      R0,??komunikcja_RSwin_28+0x18  ;; Trap + 1
   \   000004C0   0021               MOVS     R1,#+0
   \   000004C2   0170               STRB     R1,[R0, #+0]
    400                        Trap.Col=0;
   \   000004C4   5D48               LDR      R0,??komunikcja_RSwin_28+0x1C  ;; Trap + 2
   \   000004C6   0021               MOVS     R1,#+0
   \   000004C8   0170               STRB     R1,[R0, #+0]
    401                        Trap.Activ=0;
   \   000004CA   5E48               LDR      R0,??komunikcja_RSwin_28+0x24  ;; Trap + 3
   \   000004CC   0021               MOVS     R1,#+0
   \   000004CE   0170               STRB     R1,[R0, #+0]
    402                       
    403                        //Potwierdzenie
    404                         ptr2[0]=0xAB;
   \   000004D0   AB20               MOVS     R0,#+171
   \   000004D2   2870               STRB     R0,[R5, #+0]
    405                         ptr2[1]=0xAB;
   \   000004D4   AB20               MOVS     R0,#+171
   \   000004D6   6870               STRB     R0,[R5, #+1]
    406                         *ptr3=2;
   \   000004D8   0220               MOVS     R0,#+2
   \   000004DA   3060               STR      R0,[R6, #+0]
    407                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   000004DC   3100               MOVS     R1,R6
   \   000004DE   2800               MOVS     R0,R5
   \   000004E0   ........           BL       CheckSum
   \   000004E4   A870               STRB     R0,[R5, #+2]
    408                        //koniec potwoerdzenia
    409          
    410                      }//koniec "Ustaw pu³apkê"
    411                   
    412              
    413              
    414                     //Odczytaj stany "Output" procedur (ptr1[3]-startowy rz¹d procedur, ptr1[4]-ilosc rzedow do odczytu
    415                    if (
    416                         (ptr1[0]==0xAA)&&
    417                         (ptr1[1]==0xAA)&&
    418                         (ptr1[2]==0x03)
    419                        )
   \                     ??komunikcja_RSwin_31:
   \   000004E6   2078               LDRB     R0,[R4, #+0]
   \   000004E8   AA28               CMP      R0,#+170
   \   000004EA   36D1               BNE      ??komunikcja_RSwin_32
   \   000004EC   6078               LDRB     R0,[R4, #+1]
   \   000004EE   AA28               CMP      R0,#+170
   \   000004F0   33D1               BNE      ??komunikcja_RSwin_32
   \   000004F2   A078               LDRB     R0,[R4, #+2]
   \   000004F4   0328               CMP      R0,#+3
   \   000004F6   30D1               BNE      ??komunikcja_RSwin_32
    420                      {
    421          
    422                          
    423                  
    424                          ptr2[0] =0xAC;
   \   000004F8   AC20               MOVS     R0,#+172
   \   000004FA   2870               STRB     R0,[R5, #+0]
    425                          ptr2[1] =0x04;
   \   000004FC   0420               MOVS     R0,#+4
   \   000004FE   6870               STRB     R0,[R5, #+1]
    426          
    427                          tmp = 2;
   \   00000500   0227               MOVS     R7,#+2
    428          
    429                          for (int Row = ptr1[3] ; Row<ptr1[3]+ptr1[4] ; Row++) 
   \   00000502   E078               LDRB     R0,[R4, #+3]
   \   00000504   1CE0               B        ??komunikcja_RSwin_33
    430                          { 
    431                            for (int Col = 0 ; Col<MaxPrcInLine ; Col++) 
    432                            { 
    433                              ptr2[tmp++] =gProg.Line[Row].Proc[Col].Out>>8; 
   \                     ??komunikcja_RSwin_34:
   \   00000506   1823               MOVS     R3,#+24
   \   00000508   4B43               MULS     R3,R1,R3
   \   0000050A   9C46               MOV      R12,R3
   \   0000050C   F023               MOVS     R3,#+240
   \   0000050E   4343               MULS     R3,R0,R3
   \   00000510   484A               LDR      R2,??komunikcja_RSwin_28+0x14  ;; gProg
   \   00000512   D218               ADDS     R2,R2,R3
   \   00000514   6346               MOV      R3,R12
   \   00000516   D218               ADDS     R2,R2,R3
   \   00000518   528D               LDRH     R2,[R2, #+42]
   \   0000051A   1212               ASRS     R2,R2,#+8
   \   0000051C   EA55               STRB     R2,[R5, R7]
   \   0000051E   7F1C               ADDS     R7,R7,#+1
    434                              ptr2[tmp++] =gProg.Line[Row].Proc[Col].Out & 0xFF; 
   \   00000520   1823               MOVS     R3,#+24
   \   00000522   4B43               MULS     R3,R1,R3
   \   00000524   9C46               MOV      R12,R3
   \   00000526   F023               MOVS     R3,#+240
   \   00000528   4343               MULS     R3,R0,R3
   \   0000052A   424A               LDR      R2,??komunikcja_RSwin_28+0x14  ;; gProg
   \   0000052C   D218               ADDS     R2,R2,R3
   \   0000052E   6346               MOV      R3,R12
   \   00000530   D218               ADDS     R2,R2,R3
   \   00000532   528D               LDRH     R2,[R2, #+42]
   \   00000534   EA55               STRB     R2,[R5, R7]
   \   00000536   7F1C               ADDS     R7,R7,#+1
    435                            }  
   \   00000538   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_35:
   \   0000053A   0A29               CMP      R1,#+10
   \   0000053C   E3DB               BLT      ??komunikcja_RSwin_34
   \   0000053E   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_33:
   \   00000540   E178               LDRB     R1,[R4, #+3]
   \   00000542   2279               LDRB     R2,[R4, #+4]
   \   00000544   8918               ADDS     R1,R1,R2
   \   00000546   8842               CMP      R0,R1
   \   00000548   01DA               BGE      ??komunikcja_RSwin_36
   \   0000054A   0021               MOVS     R1,#+0
   \   0000054C   F5E7               B        ??komunikcja_RSwin_35
    436                          }
    437                      
    438          
    439                          *ptr3=tmp;
   \                     ??komunikcja_RSwin_36:
   \   0000054E   3760               STR      R7,[R6, #+0]
    440                          ptr2[tmp]=CheckSum(ptr2, ptr3);
   \   00000550   3100               MOVS     R1,R6
   \   00000552   2800               MOVS     R0,R5
   \   00000554   ........           BL       CheckSum
   \   00000558   E855               STRB     R0,[R5, R7]
    441          
    442                        
    443                        
    444                      }//koniec "Ustaw pu³apkê"
    445                    
    446              
    447              
    448              
    449                  //Komunikacja startowa  
    450                    //pytanie 0 - pytanie o prêdkoæ pêtli programu
    451                    if (
    452                         (ptr1[0]==0xAC)&&
    453                         (ptr1[1]==0x03)&&
    454                         (ptr1[2]==0x14)&&
    455                         (ptr1[3]==0xFF)&&
    456                         (ptr1[4]==0x02)&&
    457                         (ptr1[5]==0x3C)
    458                        )
   \                     ??komunikcja_RSwin_32:
   \   0000055A   2078               LDRB     R0,[R4, #+0]
   \   0000055C   AC28               CMP      R0,#+172
   \   0000055E   21D1               BNE      ??komunikcja_RSwin_37
   \   00000560   6078               LDRB     R0,[R4, #+1]
   \   00000562   0328               CMP      R0,#+3
   \   00000564   1ED1               BNE      ??komunikcja_RSwin_37
   \   00000566   A078               LDRB     R0,[R4, #+2]
   \   00000568   1428               CMP      R0,#+20
   \   0000056A   1BD1               BNE      ??komunikcja_RSwin_37
   \   0000056C   E078               LDRB     R0,[R4, #+3]
   \   0000056E   FF28               CMP      R0,#+255
   \   00000570   18D1               BNE      ??komunikcja_RSwin_37
   \   00000572   2079               LDRB     R0,[R4, #+4]
   \   00000574   0228               CMP      R0,#+2
   \   00000576   15D1               BNE      ??komunikcja_RSwin_37
   \   00000578   6079               LDRB     R0,[R4, #+5]
   \   0000057A   3C28               CMP      R0,#+60
   \   0000057C   12D1               BNE      ??komunikcja_RSwin_37
    459                      {
    460                        //odpowied
    461                        ptr2[0]=0xAC;
   \   0000057E   AC20               MOVS     R0,#+172
   \   00000580   2870               STRB     R0,[R5, #+0]
    462                        ptr2[1]=0x04;
   \   00000582   0420               MOVS     R0,#+4
   \   00000584   6870               STRB     R0,[R5, #+1]
    463                        ptr2[2]=g_czas_petli / 10;
   \   00000586   A248               LDR      R0,??komunikcja_RSwin_38  ;; g_czas_petli
   \   00000588   0078               LDRB     R0,[R0, #+0]
   \   0000058A   0A21               MOVS     R1,#+10
   \   0000058C   ........           BL       __aeabi_idivmod
   \   00000590   A870               STRB     R0,[R5, #+2]
    464                        ptr2[3]=0x00;
   \   00000592   0020               MOVS     R0,#+0
   \   00000594   E870               STRB     R0,[R5, #+3]
    465                        *ptr3=4;
   \   00000596   0420               MOVS     R0,#+4
   \   00000598   3060               STR      R0,[R6, #+0]
    466                        ptr2[4]=CheckSum(ptr2, ptr3);
   \   0000059A   3100               MOVS     R1,R6
   \   0000059C   2800               MOVS     R0,R5
   \   0000059E   ........           BL       CheckSum
   \   000005A2   2871               STRB     R0,[R5, #+4]
    467                      }//koniec pytania 0
    468                   
    469            
    470                   //pytanie 1 
    471                   if (
    472                         (ptr1[0]==0xAD)&&
    473                         (ptr1[1]==0x03)&&
    474                         (ptr1[2]==0x00)&&
    475                         (ptr1[3]==0xA0)&&
    476                         (ptr1[4]==0x0D)&&
    477                         (ptr1[5]==0x00)&&
    478                         (ptr1[6]==0x01)&&
    479                         (ptr1[7]==0xA2)
    480                      
    481                        )
   \                     ??komunikcja_RSwin_37:
   \   000005A4   2078               LDRB     R0,[R4, #+0]
   \   000005A6   AD28               CMP      R0,#+173
   \   000005A8   21D1               BNE      ??komunikcja_RSwin_39
   \   000005AA   6078               LDRB     R0,[R4, #+1]
   \   000005AC   0328               CMP      R0,#+3
   \   000005AE   1ED1               BNE      ??komunikcja_RSwin_39
   \   000005B0   A078               LDRB     R0,[R4, #+2]
   \   000005B2   0028               CMP      R0,#+0
   \   000005B4   1BD1               BNE      ??komunikcja_RSwin_39
   \   000005B6   E078               LDRB     R0,[R4, #+3]
   \   000005B8   A028               CMP      R0,#+160
   \   000005BA   18D1               BNE      ??komunikcja_RSwin_39
   \   000005BC   2079               LDRB     R0,[R4, #+4]
   \   000005BE   0D28               CMP      R0,#+13
   \   000005C0   15D1               BNE      ??komunikcja_RSwin_39
   \   000005C2   6079               LDRB     R0,[R4, #+5]
   \   000005C4   0028               CMP      R0,#+0
   \   000005C6   12D1               BNE      ??komunikcja_RSwin_39
   \   000005C8   A079               LDRB     R0,[R4, #+6]
   \   000005CA   0128               CMP      R0,#+1
   \   000005CC   0FD1               BNE      ??komunikcja_RSwin_39
   \   000005CE   E079               LDRB     R0,[R4, #+7]
   \   000005D0   A228               CMP      R0,#+162
   \   000005D2   0CD1               BNE      ??komunikcja_RSwin_39
    482                    {
    483                        //odpowied
    484                        ptr2[0]=0xAC;
   \   000005D4   AC20               MOVS     R0,#+172
   \   000005D6   2870               STRB     R0,[R5, #+0]
    485                        ptr2[1]=0x04;
   \   000005D8   0420               MOVS     R0,#+4
   \   000005DA   6870               STRB     R0,[R5, #+1]
    486                        ptr2[2]=0xFF;
   \   000005DC   FF20               MOVS     R0,#+255
   \   000005DE   A870               STRB     R0,[R5, #+2]
    487                        
    488                        *ptr3=3;
   \   000005E0   0320               MOVS     R0,#+3
   \   000005E2   3060               STR      R0,[R6, #+0]
    489                        ptr2[3]=CheckSum(ptr2, ptr3);
   \   000005E4   3100               MOVS     R1,R6
   \   000005E6   2800               MOVS     R0,R5
   \   000005E8   ........           BL       CheckSum
   \   000005EC   E870               STRB     R0,[R5, #+3]
    490                      
    491                    }//koniec pytania 1
    492                   
    493                   
    494                   //pytanie 2  (pytanie o sterownik)
    495                   if (
    496                         (ptr1[0]==0xAC)&&
    497                         (ptr1[1]==0x03)&&
    498                         (ptr1[2]==0x80)&&
    499                         (ptr1[3]==0xFF)&&
    500                         (ptr1[4]==0x10)&&
    501                         (ptr1[5]==0xC2)
    502                        )
   \                     ??komunikcja_RSwin_39:
   \   000005EE   2078               LDRB     R0,[R4, #+0]
   \   000005F0   AC28               CMP      R0,#+172
   \   000005F2   3AD1               BNE      ??komunikcja_RSwin_40
   \   000005F4   6078               LDRB     R0,[R4, #+1]
   \   000005F6   0328               CMP      R0,#+3
   \   000005F8   37D1               BNE      ??komunikcja_RSwin_40
   \   000005FA   A078               LDRB     R0,[R4, #+2]
   \   000005FC   8028               CMP      R0,#+128
   \   000005FE   34D1               BNE      ??komunikcja_RSwin_40
   \   00000600   E078               LDRB     R0,[R4, #+3]
   \   00000602   FF28               CMP      R0,#+255
   \   00000604   31D1               BNE      ??komunikcja_RSwin_40
   \   00000606   2079               LDRB     R0,[R4, #+4]
   \   00000608   1028               CMP      R0,#+16
   \   0000060A   2ED1               BNE      ??komunikcja_RSwin_40
   \   0000060C   6079               LDRB     R0,[R4, #+5]
   \   0000060E   C228               CMP      R0,#+194
   \   00000610   2BD1               BNE      ??komunikcja_RSwin_40
    503                    {
    504                        //odpowied
    505                        ptr2[0]=0xAC;
   \   00000612   AC20               MOVS     R0,#+172
   \   00000614   2870               STRB     R0,[R5, #+0]
    506                        ptr2[1]=0x04;
   \   00000616   0420               MOVS     R0,#+4
   \   00000618   6870               STRB     R0,[R5, #+1]
    507                        
    508                        for(int k=2; k<=11; k++)
   \   0000061A   0220               MOVS     R0,#+2
   \   0000061C   1CE0               B        ??komunikcja_RSwin_41
   \   0000061E   C046               Nop      
   \                     ??komunikcja_RSwin_28:
   \   00000620   ........           DC32     Convers_DW_B
   \   00000624   ........           DC32     Convers_DW_B + 1
   \   00000628   ........           DC32     Convers_DW_B + 2
   \   0000062C   ........           DC32     Convers_DW_B + 3
   \   00000630   0038FFFF           DC32     0xffff3800
   \   00000634   ........           DC32     gProg
   \   00000638   ........           DC32     Trap + 1
   \   0000063C   ........           DC32     Trap + 2
   \   00000640   ........           DC32     Trap
   \   00000644   ........           DC32     Trap + 3
   \   00000648   ........           DC32     Trap + 4
    509                        {
    510                          ptr2[k]=identyfikacja[k-2];
   \                     ??komunikcja_RSwin_42:
   \   0000064C   7149               LDR      R1,??komunikcja_RSwin_38+0x4  ;; identyfikacja
   \   0000064E   0918               ADDS     R1,R1,R0
   \   00000650   891E               SUBS     R1,R1,#+2
   \   00000652   0978               LDRB     R1,[R1, #+0]
   \   00000654   2954               STRB     R1,[R5, R0]
    511                        }
   \   00000656   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_41:
   \   00000658   0C28               CMP      R0,#+12
   \   0000065A   F7DB               BLT      ??komunikcja_RSwin_42
    512                        
    513                        *ptr3=18; 
   \   0000065C   1220               MOVS     R0,#+18
   \   0000065E   3060               STR      R0,[R6, #+0]
    514                        ptr2[18]=CheckSum(ptr2, ptr3);
   \   00000660   3100               MOVS     R1,R6
   \   00000662   2800               MOVS     R0,R5
   \   00000664   ........           BL       CheckSum
   \   00000668   A874               STRB     R0,[R5, #+18]
    515                    }
    516                   
    517                   
    518                   //pytanie 3 // 1-jest program, 2 - brak programu
    519                   if (
    520                         (ptr1[0]==0xAD)&&
    521                         (ptr1[1]==0x03)&&
    522                         (ptr1[2]==0x00)&&
    523                         (ptr1[3]==0x60)&&
    524                         (ptr1[4]==0x0D)&&
    525                         (ptr1[5]==0x00)&&
    526                         (ptr1[6]==0x01)&&
    527                         (ptr1[7]==0xE2)
    528                        )
   \                     ??komunikcja_RSwin_40:
   \   0000066A   2078               LDRB     R0,[R4, #+0]
   \   0000066C   AD28               CMP      R0,#+173
   \   0000066E   21D1               BNE      ??komunikcja_RSwin_43
   \   00000670   6078               LDRB     R0,[R4, #+1]
   \   00000672   0328               CMP      R0,#+3
   \   00000674   1ED1               BNE      ??komunikcja_RSwin_43
   \   00000676   A078               LDRB     R0,[R4, #+2]
   \   00000678   0028               CMP      R0,#+0
   \   0000067A   1BD1               BNE      ??komunikcja_RSwin_43
   \   0000067C   E078               LDRB     R0,[R4, #+3]
   \   0000067E   6028               CMP      R0,#+96
   \   00000680   18D1               BNE      ??komunikcja_RSwin_43
   \   00000682   2079               LDRB     R0,[R4, #+4]
   \   00000684   0D28               CMP      R0,#+13
   \   00000686   15D1               BNE      ??komunikcja_RSwin_43
   \   00000688   6079               LDRB     R0,[R4, #+5]
   \   0000068A   0028               CMP      R0,#+0
   \   0000068C   12D1               BNE      ??komunikcja_RSwin_43
   \   0000068E   A079               LDRB     R0,[R4, #+6]
   \   00000690   0128               CMP      R0,#+1
   \   00000692   0FD1               BNE      ??komunikcja_RSwin_43
   \   00000694   E079               LDRB     R0,[R4, #+7]
   \   00000696   E228               CMP      R0,#+226
   \   00000698   0CD1               BNE      ??komunikcja_RSwin_43
    529                    {
    530                        //odpowied
    531                        ptr2[0]=0xAC;
   \   0000069A   AC20               MOVS     R0,#+172
   \   0000069C   2870               STRB     R0,[R5, #+0]
    532                        ptr2[1]=0x04;
   \   0000069E   0420               MOVS     R0,#+4
   \   000006A0   6870               STRB     R0,[R5, #+1]
    533                        ptr2[2]=0x01;
   \   000006A2   0120               MOVS     R0,#+1
   \   000006A4   A870               STRB     R0,[R5, #+2]
    534                        //ptr2[3]=0x4F;
    535                       
    536                        *ptr3=3;
   \   000006A6   0320               MOVS     R0,#+3
   \   000006A8   3060               STR      R0,[R6, #+0]
    537                        ptr2[3]=CheckSum(ptr2, ptr3);
   \   000006AA   3100               MOVS     R1,R6
   \   000006AC   2800               MOVS     R0,R5
   \   000006AE   ........           BL       CheckSum
   \   000006B2   E870               STRB     R0,[R5, #+3]
    538                    }
    539                   
    540           
    541                   //pytanie 4 - pytanie o nazwe aktualnie dzia³j¹cego programu u¿ytkowego
    542                   if (
    543                         (ptr1[0]==0xAD)&&
    544                         (ptr1[1]==0x03)&&
    545                         (ptr1[2]==0x00)&&
    546                         (ptr1[3]==0x90)&&
    547                         (ptr1[4]==0x40)&&
    548                         (ptr1[5]==0x00)&&
    549                         (ptr1[6]==0x20)&&
    550                         (ptr1[7]==0x60)
    551                        )
   \                     ??komunikcja_RSwin_43:
   \   000006B4   2078               LDRB     R0,[R4, #+0]
   \   000006B6   AD28               CMP      R0,#+173
   \   000006B8   2BD1               BNE      ??komunikcja_RSwin_44
   \   000006BA   6078               LDRB     R0,[R4, #+1]
   \   000006BC   0328               CMP      R0,#+3
   \   000006BE   28D1               BNE      ??komunikcja_RSwin_44
   \   000006C0   A078               LDRB     R0,[R4, #+2]
   \   000006C2   0028               CMP      R0,#+0
   \   000006C4   25D1               BNE      ??komunikcja_RSwin_44
   \   000006C6   E078               LDRB     R0,[R4, #+3]
   \   000006C8   9028               CMP      R0,#+144
   \   000006CA   22D1               BNE      ??komunikcja_RSwin_44
   \   000006CC   2079               LDRB     R0,[R4, #+4]
   \   000006CE   4028               CMP      R0,#+64
   \   000006D0   1FD1               BNE      ??komunikcja_RSwin_44
   \   000006D2   6079               LDRB     R0,[R4, #+5]
   \   000006D4   0028               CMP      R0,#+0
   \   000006D6   1CD1               BNE      ??komunikcja_RSwin_44
   \   000006D8   A079               LDRB     R0,[R4, #+6]
   \   000006DA   2028               CMP      R0,#+32
   \   000006DC   19D1               BNE      ??komunikcja_RSwin_44
   \   000006DE   E079               LDRB     R0,[R4, #+7]
   \   000006E0   6028               CMP      R0,#+96
   \   000006E2   16D1               BNE      ??komunikcja_RSwin_44
    552                    {
    553                        //odpowied
    554                        ptr2[0]=0xAC;
   \   000006E4   AC20               MOVS     R0,#+172
   \   000006E6   2870               STRB     R0,[R5, #+0]
    555                        ptr2[1]=0x04;
   \   000006E8   0420               MOVS     R0,#+4
   \   000006EA   6870               STRB     R0,[R5, #+1]
    556                        
    557                        for (int k=2; k<=32; k++)
   \   000006EC   0220               MOVS     R0,#+2
   \   000006EE   06E0               B        ??komunikcja_RSwin_45
    558                        {
    559                         ptr2[k]=pProg[0x40 - 2 +k]; 
   \                     ??komunikcja_RSwin_46:
   \   000006F0   4949               LDR      R1,??komunikcja_RSwin_38+0x8  ;; pProg
   \   000006F2   0968               LDR      R1,[R1, #+0]
   \   000006F4   0918               ADDS     R1,R1,R0
   \   000006F6   3E31               ADDS     R1,R1,#+62
   \   000006F8   0978               LDRB     R1,[R1, #+0]
   \   000006FA   2954               STRB     R1,[R5, R0]
    560                        }
   \   000006FC   401C               ADDS     R0,R0,#+1
   \                     ??komunikcja_RSwin_45:
   \   000006FE   2128               CMP      R0,#+33
   \   00000700   F6DB               BLT      ??komunikcja_RSwin_46
    561          
    562                        *ptr3=33;
   \   00000702   2120               MOVS     R0,#+33
   \   00000704   3060               STR      R0,[R6, #+0]
    563                        ptr2[33]=CheckSum(ptr2, ptr3);
   \   00000706   3100               MOVS     R1,R6
   \   00000708   2800               MOVS     R0,R5
   \   0000070A   ........           BL       CheckSum
   \   0000070E   2121               MOVS     R1,#+33
   \   00000710   6854               STRB     R0,[R5, R1]
    564                        //Suma=true;
    565                        
    566                    }
    567              
    568              
    569              
    570                    if (
    571                         (ptr1[0]==0xAC)&&
    572                         (ptr1[1]==0xAC)&&
    573                         (ptr1[2]==0x01)
    574                        )
   \                     ??komunikcja_RSwin_44:
   \   00000712   2078               LDRB     R0,[R4, #+0]
   \   00000714   AC28               CMP      R0,#+172
   \   00000716   13D1               BNE      ??komunikcja_RSwin_47
   \   00000718   6078               LDRB     R0,[R4, #+1]
   \   0000071A   AC28               CMP      R0,#+172
   \   0000071C   10D1               BNE      ??komunikcja_RSwin_47
   \   0000071E   A078               LDRB     R0,[R4, #+2]
   \   00000720   0128               CMP      R0,#+1
   \   00000722   0DD1               BNE      ??komunikcja_RSwin_47
    575                      {
    576          
    577                         WiFiDebug=1;
   \   00000724   3D48               LDR      R0,??komunikcja_RSwin_38+0xC  ;; WiFiDebug
   \   00000726   0121               MOVS     R1,#+1
   \   00000728   0170               STRB     R1,[R0, #+0]
    578                        
    579                        //Potwierdzenie
    580                         ptr2[0]=0xAC;
   \   0000072A   AC20               MOVS     R0,#+172
   \   0000072C   2870               STRB     R0,[R5, #+0]
    581                         ptr2[1]=0xAC;
   \   0000072E   AC20               MOVS     R0,#+172
   \   00000730   6870               STRB     R0,[R5, #+1]
    582                         *ptr3=2;
   \   00000732   0220               MOVS     R0,#+2
   \   00000734   3060               STR      R0,[R6, #+0]
    583                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   00000736   3100               MOVS     R1,R6
   \   00000738   2800               MOVS     R0,R5
   \   0000073A   ........           BL       CheckSum
   \   0000073E   A870               STRB     R0,[R5, #+2]
    584                        //koniec potwoerdzenia
    585          
    586                      }//koniec
    587              
    588              
    589              
    590                     if (
    591                         (ptr1[0]==0xAC)&&
    592                         (ptr1[1]==0xAC)&&
    593                         (ptr1[2]==0x02)
    594                        )
   \                     ??komunikcja_RSwin_47:
   \   00000740   2078               LDRB     R0,[R4, #+0]
   \   00000742   AC28               CMP      R0,#+172
   \   00000744   13D1               BNE      ??komunikcja_RSwin_48
   \   00000746   6078               LDRB     R0,[R4, #+1]
   \   00000748   AC28               CMP      R0,#+172
   \   0000074A   10D1               BNE      ??komunikcja_RSwin_48
   \   0000074C   A078               LDRB     R0,[R4, #+2]
   \   0000074E   0228               CMP      R0,#+2
   \   00000750   0DD1               BNE      ??komunikcja_RSwin_48
    595                      {
    596          
    597                         WiFiDebug=0;
   \   00000752   3248               LDR      R0,??komunikcja_RSwin_38+0xC  ;; WiFiDebug
   \   00000754   0021               MOVS     R1,#+0
   \   00000756   0170               STRB     R1,[R0, #+0]
    598                        
    599                        //Potwierdzenie
    600                         ptr2[0]=0xAC;
   \   00000758   AC20               MOVS     R0,#+172
   \   0000075A   2870               STRB     R0,[R5, #+0]
    601                         ptr2[1]=0xAC;
   \   0000075C   AC20               MOVS     R0,#+172
   \   0000075E   6870               STRB     R0,[R5, #+1]
    602                         *ptr3=2;
   \   00000760   0220               MOVS     R0,#+2
   \   00000762   3060               STR      R0,[R6, #+0]
    603                         ptr2[2]=CheckSum(ptr2, ptr3);                                        //suma kontrolna
   \   00000764   3100               MOVS     R1,R6
   \   00000766   2800               MOVS     R0,R5
   \   00000768   ........           BL       CheckSum
   \   0000076C   A870               STRB     R0,[R5, #+2]
    604                        //koniec potwoerdzenia
    605          
    606                      }//koniec
    607          
    608          
    609              
    610               /*    
    611                   //pytanie 5 
    612                   if (
    613                         (ptr1[0]==0xAD)&&
    614                         (ptr1[1]==0x03)&&
    615                         (ptr1[2]==0x00)&&
    616                         (ptr1[3]==0x10)&&
    617                         (ptr1[4]==0x40)&&
    618                         (ptr1[5]==0x00)&&
    619                         (ptr1[6]==0x20)&&
    620                         (ptr1[7]==0xE0)
    621                        )
    622                    {
    623                       //odpowied
    624                        ptr2[0]=0xAC;
    625                        ptr2[1]=0x04;
    626                        ptr2[2]=0x73;
    627                        ptr2[3]=0x41;
    628                        ptr2[4]=0x73;
    629                        ptr2[5]=0x42;
    630                        ptr2[6]=0x45;
    631                        ptr2[7]=0xD6;
    632                        ptr2[8]=0x84;
    633                        ptr2[9]=0x75;
    634                        ptr2[10]=0xA5;
    635                        ptr2[11]=0xE8;
    636                        ptr2[12]=0x47;
    637                        ptr2[13]=0x00;
    638                        ptr2[14]=0xA0;
    639                        ptr2[15]=0x27;
    640                        ptr2[16]=0x21;
    641                        ptr2[17]=0xDE;
    642                        ptr2[18]=0x44;
    643                        ptr2[19]=0x5D;
    644          
    645                        *ptr3=20;   
    646                        ptr2[20]=CheckSum(ptr2, ptr3);
    647                        
    648               
    649                    }
    650                   
    651                  */
    652              
    653                   //rozkaz uruchomienia nowo wgranego programu
    654                   if (
    655                         (ptr1[0]==0xAC)&&
    656                         (ptr1[1]==0x01)&&
    657                         (ptr1[2]==0x53)
    658                        )
   \                     ??komunikcja_RSwin_48:
   \   0000076E   2078               LDRB     R0,[R4, #+0]
   \   00000770   AC28               CMP      R0,#+172
   \   00000772   1ED1               BNE      ??komunikcja_RSwin_49
   \   00000774   6078               LDRB     R0,[R4, #+1]
   \   00000776   0128               CMP      R0,#+1
   \   00000778   1BD1               BNE      ??komunikcja_RSwin_49
   \   0000077A   A078               LDRB     R0,[R4, #+2]
   \   0000077C   5328               CMP      R0,#+83
   \   0000077E   18D1               BNE      ??komunikcja_RSwin_49
    659                    {
    660                        //zatrzymaj program
    661                        g_Stop_Program=1;
   \   00000780   2748               LDR      R0,??komunikcja_RSwin_38+0x10  ;; g_Stop_Program
   \   00000782   0121               MOVS     R1,#+1
   \   00000784   0170               STRB     R1,[R0, #+0]
    662                        //ustaw restart programu
    663                        g_Restart_Program=1;
   \   00000786   2748               LDR      R0,??komunikcja_RSwin_38+0x14  ;; g_Restart_Program
   \   00000788   0121               MOVS     R1,#+1
   \   0000078A   0170               STRB     R1,[R0, #+0]
    664                        //cykl startowy
    665                        //start_cykl = 0;
    666                      
    667                        //przepisz program z flash do ram
    668                        char *memory_read_prog;
    669                        memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
   \   0000078C   2648               LDR      R0,??komunikcja_RSwin_38+0x18  ;; FlashProgramReserveOfset
   \   0000078E   0068               LDR      R0,[R0, #+0]
   \   00000790   2649               LDR      R1,??komunikcja_RSwin_38+0x1C  ;; 0x130100
   \   00000792   0818               ADDS     R0,R1,R0
    670                        for (int k = 0 ; k <= UseProgramSize ; k++) 
   \   00000794   0021               MOVS     R1,#+0
   \   00000796   04E0               B        ??komunikcja_RSwin_50
    671                        { 
    672                            pProg[k]=memory_read_prog[k]; 
   \                     ??komunikcja_RSwin_51:
   \   00000798   1F4A               LDR      R2,??komunikcja_RSwin_38+0x8  ;; pProg
   \   0000079A   1268               LDR      R2,[R2, #+0]
   \   0000079C   435C               LDRB     R3,[R0, R1]
   \   0000079E   5354               STRB     R3,[R2, R1]
    673                        }
   \   000007A0   491C               ADDS     R1,R1,#+1
   \                     ??komunikcja_RSwin_50:
   \   000007A2   234A               LDR      R2,??komunikcja_RSwin_38+0x20  ;; 0xd6d9
   \   000007A4   9142               CMP      R1,R2
   \   000007A6   F7DB               BLT      ??komunikcja_RSwin_51
    674                        //koniec
    675          
    676                        *ptr3=0;
   \   000007A8   0020               MOVS     R0,#+0
   \   000007AA   3060               STR      R0,[R6, #+0]
    677                       
    678                      
    679                       
    680                       //wznów wykonywanie programu
    681                        g_Stop_Program=0; 
   \   000007AC   1C48               LDR      R0,??komunikcja_RSwin_38+0x10  ;; g_Stop_Program
   \   000007AE   0021               MOVS     R1,#+0
   \   000007B0   0170               STRB     R1,[R0, #+0]
    682                    }    
    683              
    684              
    685                   
    686                   //pytanie 6 
    687                   if (
    688                         (ptr1[0]==0xAD)&&
    689                         (ptr1[1]==0x03)&&
    690                         (ptr1[2]==0x00)&&
    691                         (ptr1[3]==0x10)&&
    692                         (ptr1[4]==0xC3)&&
    693                         (ptr1[5]==0x00)&&
    694                         (ptr1[6]==0x04)&&
    695                         (ptr1[7]==0x00)
    696                        )
   \                     ??komunikcja_RSwin_49:
   \   000007B2   2078               LDRB     R0,[R4, #+0]
   \   000007B4   AD28               CMP      R0,#+173
   \   000007B6   27D1               BNE      ??komunikcja_RSwin_52
   \   000007B8   6078               LDRB     R0,[R4, #+1]
   \   000007BA   0328               CMP      R0,#+3
   \   000007BC   24D1               BNE      ??komunikcja_RSwin_52
   \   000007BE   A078               LDRB     R0,[R4, #+2]
   \   000007C0   0028               CMP      R0,#+0
   \   000007C2   21D1               BNE      ??komunikcja_RSwin_52
   \   000007C4   E078               LDRB     R0,[R4, #+3]
   \   000007C6   1028               CMP      R0,#+16
   \   000007C8   1ED1               BNE      ??komunikcja_RSwin_52
   \   000007CA   2079               LDRB     R0,[R4, #+4]
   \   000007CC   C328               CMP      R0,#+195
   \   000007CE   1BD1               BNE      ??komunikcja_RSwin_52
   \   000007D0   6079               LDRB     R0,[R4, #+5]
   \   000007D2   0028               CMP      R0,#+0
   \   000007D4   18D1               BNE      ??komunikcja_RSwin_52
   \   000007D6   A079               LDRB     R0,[R4, #+6]
   \   000007D8   0428               CMP      R0,#+4
   \   000007DA   15D1               BNE      ??komunikcja_RSwin_52
   \   000007DC   E079               LDRB     R0,[R4, #+7]
   \   000007DE   0028               CMP      R0,#+0
   \   000007E0   12D1               BNE      ??komunikcja_RSwin_52
    697                    {
    698                        //odpowied
    699                        ptr2[0]=0xAC;
   \   000007E2   AC20               MOVS     R0,#+172
   \   000007E4   2870               STRB     R0,[R5, #+0]
    700                        ptr2[1]=0x04;
   \   000007E6   0420               MOVS     R0,#+4
   \   000007E8   6870               STRB     R0,[R5, #+1]
    701                        ptr2[2]=0x70;
   \   000007EA   7020               MOVS     R0,#+112
   \   000007EC   A870               STRB     R0,[R5, #+2]
    702                        ptr2[3]=0xC9;
   \   000007EE   C920               MOVS     R0,#+201
   \   000007F0   E870               STRB     R0,[R5, #+3]
    703                        ptr2[4]=0x90;
   \   000007F2   9020               MOVS     R0,#+144
   \   000007F4   2871               STRB     R0,[R5, #+4]
    704                        ptr2[5]=0x5D;
   \   000007F6   5D20               MOVS     R0,#+93
   \   000007F8   6871               STRB     R0,[R5, #+5]
    705                        //ptr2[6]=0x2A;
    706                        *ptr3=6;    
   \   000007FA   0620               MOVS     R0,#+6
   \   000007FC   3060               STR      R0,[R6, #+0]
    707                        ptr2[6]=CheckSum(ptr2, ptr3);
   \   000007FE   3100               MOVS     R1,R6
   \   00000800   2800               MOVS     R0,R5
   \   00000802   ........           BL       CheckSum
   \   00000806   A871               STRB     R0,[R5, #+6]
    708                    }
    709              
    710             
    711                   
    712          }
   \                     ??komunikcja_RSwin_52:
   \   00000808   03B0               ADD      SP,SP,#+12
   \   0000080A   F0BC               POP      {R4-R7}
   \   0000080C   01BC               POP      {R0}
   \   0000080E   0047               BX       R0               ;; return
   \                     ??komunikcja_RSwin_38:
   \   00000810   ........           DC32     g_czas_petli
   \   00000814   ........           DC32     identyfikacja
   \   00000818   ........           DC32     pProg
   \   0000081C   ........           DC32     WiFiDebug
   \   00000820   ........           DC32     g_Stop_Program
   \   00000824   ........           DC32     g_Restart_Program
   \   00000828   ........           DC32     FlashProgramReserveOfset
   \   0000082C   00011300           DC32     0x130100
   \   00000830   D9D60000           DC32     0xd6d9
    713          
    714          //SUMA KONTEROLNA---------------------------------------------------------------

   \                                 In section .bss, align 1
    715           byte SK=0;
   \                     SK:
   \   00000000                      DS8 1

   \                                 In section Debug.txt, align 4, keep-with-next
    716          char CheckSum(char *TabLiczb, unsigned int *IlLiczb)
    717          {
   \                     CheckSum:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    718                  SK=0;
   \   00000002   104A               LDR      R2,??CheckSum_0  ;; SK
   \   00000004   0023               MOVS     R3,#+0
   \   00000006   1370               STRB     R3,[R2, #+0]
    719                  for (int k = 0; k<*IlLiczb; k++) 
   \   00000008   0022               MOVS     R2,#+0
   \   0000000A   06E0               B        ??CheckSum_1
    720                  {
    721                    SK += TabLiczb[k]; 
   \                     ??CheckSum_2:
   \   0000000C   0D4B               LDR      R3,??CheckSum_0  ;; SK
   \   0000000E   0D4C               LDR      R4,??CheckSum_0  ;; SK
   \   00000010   2478               LDRB     R4,[R4, #+0]
   \   00000012   855C               LDRB     R5,[R0, R2]
   \   00000014   6419               ADDS     R4,R4,R5
   \   00000016   1C70               STRB     R4,[R3, #+0]
    722                  }
   \   00000018   521C               ADDS     R2,R2,#+1
   \                     ??CheckSum_1:
   \   0000001A   0B68               LDR      R3,[R1, #+0]
   \   0000001C   9A42               CMP      R2,R3
   \   0000001E   F5D3               BCC      ??CheckSum_2
    723                  SK = 0 - SK;
   \   00000020   084A               LDR      R2,??CheckSum_0  ;; SK
   \   00000022   084B               LDR      R3,??CheckSum_0  ;; SK
   \   00000024   1B78               LDRB     R3,[R3, #+0]
   \   00000026   5C42               RSBS     R4,R3,#+0
   \   00000028   1470               STRB     R4,[R2, #+0]
    724                  TabLiczb[*IlLiczb]=SK;
   \   0000002A   0A68               LDR      R2,[R1, #+0]
   \   0000002C   054B               LDR      R3,??CheckSum_0  ;; SK
   \   0000002E   1B78               LDRB     R3,[R3, #+0]
   \   00000030   8354               STRB     R3,[R0, R2]
    725                  *IlLiczb=*IlLiczb+1;
   \   00000032   0868               LDR      R0,[R1, #+0]
   \   00000034   401C               ADDS     R0,R0,#+1
   \   00000036   0860               STR      R0,[R1, #+0]
    726                  return  SK;
   \   00000038   0248               LDR      R0,??CheckSum_0  ;; SK
   \   0000003A   0078               LDRB     R0,[R0, #+0]
   \   0000003C   01B0               ADD      SP,SP,#+4
   \   0000003E   30BC               POP      {R4,R5}
   \   00000040   02BC               POP      {R1}
   \   00000042   0847               BX       R1               ;; return
   \                     ??CheckSum_0:
   \   00000044   ........           DC32     SK
    727                  
    728          }
    729          //------------------------------------------------------------------------------
    730          
    731                         
    732          //Funkcja konwersji zmiennej analogowej z formatu MASTER na format Float oraz zapisu do RAM------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    733          void MasterToAnaVar(unsigned long *adr, unsigned long *vart)           //(nr. zmiennej, wartoæ do konwersji)
    734          {
    735                    
    736            ConversFC Convers_DW_Btmp;
    737            unsigned long zm;
                                 ^
Warning[Pe550]: variable "zm" was set but never used
    738          
    739            
    740                    
    741                    Convers_DW_Btmp.DWvar = *vart;   
   \                     MasterToAnaVar:
   \   00000000   0868               LDR      R0,[R1, #+0]
    742                    zm=Convers_DW_Btmp.DWvar;
    743                    
    744          }
   \   00000002   7047               BX       LR               ;; return
    745          //------------------------------------------------------------------------------
    746          
    747          
    748          //Funkcja konwersji zmiennej dwustanowej z formatu MASTER na format Float------- 

   \                                 In section Debug.txt, align 4, keep-with-next
    749          void MasterToBinVar(unsigned long *adr, char *vart)           //(nr. zmiennej, wartoæ do konwersji)
    750          {
    751           
    752            /*
    753                  //ustawienie "1"
    754                  if ((*vart & 0xC0)==0x80)
    755                  { 
    756                    ram.BinVarRAM[(*adr/8)] |= (0x1 << (*adr%8));
    757                  }
    758                  if (((*vart & 0xC0)==0x00) || ((*vart & 0xC0)==0x40))
    759                  { 
    760                    ram.BinVarRAM[(*adr/8)] &= ~(0x1 << (*adr%8));
    761                  }
    762                  //Ustawienie forsowanie
    763                  if ((*vart & 0x1F)==0x15) 
    764                  { 
    765                    ram.BinVarRAMfors[(*adr/8)] |= (0x1 << (*adr%8));
    766                  }
    767                   else
    768                  { 
    769                    ram.BinVarRAMfors[(*adr/8)] &= ~(0x1 << (*adr%8));
    770                  }
    771            */
    772          }
   \                     MasterToBinVar:
   \   00000000   7047               BX       LR               ;; return
    773          //------------------------------------------------------------------------------
    774          
    775          
    776          //funkcja konwersji zmiennej dwustanowej z formatu Float na format MASTER ------

   \                                 In section Debug.txt, align 4, keep-with-next
    777          char BinVarToMaster(unsigned long *adr)                    
    778          {
    779          
    780          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "BinVarToMaster"
   \                     BinVarToMaster:
   \   00000000   7047               BX       LR               ;; return
    781          //------------------------------------------------------------------------------
    782          
    783          
    784          //funkcja konwersji zmiennej analogowej z formatu Float na format MASTER -------

   \                                 In section Debug.txt, align 4, keep-with-next
    785          unsigned long AnaVarToMaster(unsigned long *adr)
    786          {
    787            ConversFC Convers_DW_Btmp;
    788            unsigned long zm;
    789          
    790                    
    791               
    792                    
    793                    Convers_DW_Btmp.DWvar = 0;
   \                     AnaVarToMaster:
   \   00000000   0021               MOVS     R1,#+0
    794          
    795                    return zm;
                                  ^
Warning[Pe549]: variable "zm" is used before its value is set

    ConversFC Convers_DW_Btmp;
              ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\RS_WIN.c",787  Warning[Pe550]: 
          variable "Convers_DW_Btmp" was set but never used
   \   00000002   7047               BX       LR               ;; return
    796                    
    797                    
    798          }
    799          //------------------------------------------------------------------------------
    800          

   Maximum stack usage in bytes:

     Function         .cstack
     --------         -------
     AnaVarToMaster        0
     BinVarToMaster        0
     CheckSum             16
     MasterToAnaVar        0
     MasterToBinVar        0
     komunikcja_RSwin     40


   Section sizes:

     Function/Label   Bytes
     --------------   -----
     ram               400
     Convers_DW_B        4
     komunikcja_RSwin 2100
     SK                  1
     CheckSum           72
     MasterToAnaVar      4
     MasterToBinVar      2
     BinVarToMaster      2
     AnaVarToMaster      4
      Others            64

 
   405 bytes in section .bss
 2 248 bytes in section Debug.txt
 
 2 184 bytes of CODE memory (+ 64 bytes shared)
   405 bytes of DATA memory

Errors: none
Warnings: 4
