###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           11/Sep/2013  19:44:44 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\RF_Exe.c                            #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\RF_Exe.c" -D AT91SAM7S256 -D        #
#                    AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_ -D __ALARM -D     #
#                    __WIFI_MODULE -D _DEBUG_ -D S300iOld -D _ADMINISTRATOR_  #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.4 -         #
#                    12.06.2013\S300X (Old)\List\" --diag_suppress Pa082 -o   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\S300X (Old)\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.4 -     #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Ol                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\List\RF_Exe.lst                   #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\Obj\RF_Exe.o                      #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\RF_Exe.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                  Microcontroller Software Support                        *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : RF_Exe.c                                 *//
      7          //*  Opis                         : Plik wykonawczy komunikacji radiowej     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 31.06.2010                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21          
     22          
     23          #include "RF_Exe.h"

   \                                 In section .rodata, align 4
   \   static unsigned int const __data NODE_ID
   \                     NODE_ID:
   \   00000000   7F969800           DC32 9999999
     24          #include "Application_prog.h" 
     25          #include "spi_main.h"  
     26          #include "main_H.h"  

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     27          
     28          //tymczasowe
     29          extern int licznik_cykli;

   \                                 In section .bss, align 4
     30          int poprawnych;
   \                     poprawnych:
   \   00000000                      DS8 4
     31          extern int odb[2];
     32          extern char IndWys; 
     33          extern volatile char SlaveMode;
     34          extern long long int g_counter;

   \                                 In section .bss, align 4
     35          unsigned int        RF_Period;                                              //cykl transmisji
   \                     RF_Period:
   \   00000000                      DS8 4
     36          

   \                                 In section .bss, align 1
     37          char IndWys=0; 
   \                     IndWys:
   \   00000000                      DS8 1

   \                                 In section .data, align 1
     38          char IndWysNeg=1; 
   \                     IndWysNeg:
   \   00000000   01                 DC8 1

   \                                 In section .bss, align 4
     39          int odb[2];
   \                     odb:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     40          int licznik_cykli=0;
   \                     licznik_cykli:
   \   00000000                      DS8 4
     41          extern unsigned int CyklPerSekCount; 
     42          extern unsigned long long g_NextTimeProgram; 
     43          extern volatile char Busy_program;
     44          extern volatile long long TimeInMasterMode;
     45          extern _NeuronsListUnit NeuronsList[NumberNeurons];
     46          extern AT91_SPI_Buff               SPI_Buff;
     47          //tymczasowo koniec-----------
     48          extern volatile char ReciveFrameToMe;
     49          extern unsigned char ChangeStageFlag;
     50          extern AT91PS_MEM pAT91C_IFLASH_MEM;
     51          
     52          #ifdef _LIVE_RJESTR
     53          extern unsigned short LIVE_TAB[LIVE_TAB_SIZE];
     54          extern char LIVE_TAB_IDX;
     55          
     56          
     57          
     58          
     59          #endif
     60          
     61          
     62           
     63          
     64          //Zmienne globalne -------------------------------------------------------------
     65            

   \                                 In section .bss, align 4
     66            _RF_TaskTab  RF_TaskTab;
   \                     RF_TaskTab:
   \   00000000                      DS8 560

   \                                 In section .data, align 1
     67            signed char           RF_CurrentTask=-1; 
   \                     RF_CurrentTask:
   \   00000000   FF                 DC8 -1

   \                                 In section .data, align 1
     68            signed char           RF_SpecialTask=-1; 
   \                     RF_SpecialTask:
   \   00000000   FF                 DC8 -1

   \                                 In section .bss, align 1
     69            char g_RF_TimeOutCounter =0;  //bierz¹cy czas odliczania do timeout`u
   \                     g_RF_TimeOutCounter:
   \   00000000                      DS8 1
     70            
     71           
     72            

   \                                 In section .bss, align 2
     73            unsigned short       ReadNodeSoftVersion;
   \                     ReadNodeSoftVersion:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     74            _RF_NodeTest         RF_NodeTest; 
   \                     RF_NodeTest:
   \   00000000                      DS8 16
     75             // unsigned  short    TimeToSwithToMaster=MAX_TIME_FOR_SLAVE_ASK;

   \                                 In section .bss, align 1
     76              char               BridgeMode=0;
   \                     BridgeMode:
   \   00000000                      DS8 1
     77          //__________________________Koniec zmiennych globalnych________________________
     78          
     79          
     80            
     81            
     82          //Zmienne globalne importowane--------------------------------------------------  
     83            extern _RF_Status   RF_Status;
     84            extern _MainStage  MainStage;
     85            extern _TransQuality TransQuality;
     86            //extern volatile char SwitchToMasterBlock;
     87          //___________________________Koniec zmiennych globalnych importowanych_________
     88          
     89            
     90           
     91            
     92          
     93          
     94          //#define IncCurentRfTask  RF_CurrentTask++;  if ((RF_TaskTab[RF_CurrentTask].Node==0) || (RF_CurrentTask>=RF_Tasks))  {RF_CurrentTask=0; CyklPerSekCount++;}
     95             
     96          
     97          

   \                                 In section Debug.txt, align 4, keep-with-next
     98          void SwitchToMaster(void)
     99          {
   \                     SwitchToMaster:
   \   00000000   10B5               PUSH     {R4,LR}
    100              if ((SPI_Buff.WordToSendCount) /*|| (RF_Status.EnTx!=0) || (RF_Status.EnRx==0)*/) return;
   \   00000002   2148               LDR      R0,??SwitchToMaster_0  ;; SPI_Buff + 220
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   3AD1               BNE      ??SwitchToMaster_1
    101             
    102             RF_Status.SlaveModeTimeout=MAX_TIME_FOR_SLAVE_ASK;
                                               ^
Warning[Pe069]: integer conversion resulted in truncation
   \   0000000A   ....               LDR      R0,??DataTable15  ;; RF_Status + 19
   \   0000000C   5E21               MOVS     R1,#+94
   \   0000000E   0170               STRB     R1,[R0, #+0]
    103             RF_Status.TimeInMasterMode=0;
   \   00000010   ....               LDR      R0,??DataTable14  ;; RF_Status + 20
   \   00000012   0021               MOVS     R1,#+0
   \   00000014   0180               STRH     R1,[R0, #+0]
    104             RF_Status.TimeInSlaveMode=0;  
   \   00000016   ....               LDR      R0,??DataTable13  ;; RF_Status + 22
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   0180               STRH     R1,[R0, #+0]
    105            
    106            
    107             // AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    108             // ButtonBipCounter=g_counter+10000;
    109          
    110             SPI_SendWord(0x8219,Cs_RF); 
                    ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   0000001C   0221               MOVS     R1,#+2
   \   0000001E   ....               LDR      R0,??DataTable16  ;; 0x8219
   \   00000020   ........           BL       SPI_SendWord
    111             SlaveMode=0;
   \   00000024   ....               LDR      R0,??DataTable17  ;; SlaveMode
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   0170               STRB     R1,[R0, #+0]
    112             RF_Status.MasterMode=1;
   \   0000002A   ....               LDR      R0,??DataTable18  ;; RF_Status + 13
   \   0000002C   0121               MOVS     R1,#+1
   \   0000002E   0170               STRB     R1,[R0, #+0]
    113             ReciveFrameToMe=0;
   \   00000030   1648               LDR      R0,??SwitchToMaster_0+0x4  ;; ReciveFrameToMe
   \   00000032   0021               MOVS     R1,#+0
   \   00000034   0170               STRB     R1,[R0, #+0]
    114             SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   0C00               MOVS     R4,R1
   \   0000003A   1548               LDR      R0,??SwitchToMaster_0+0x8  ;; RF_Status + 14
   \   0000003C   0078               LDRB     R0,[R0, #+0]
   \   0000003E   ........           BL       __aeabi_ui2d
   \   00000042   ....               LDR      R2,??DataTable19  ;; 0x33333333
   \   00000044   ....               LDR      R3,??DataTable20  ;; 0x3fd33333
   \   00000046   ........           BL       __aeabi_dmul
   \   0000004A   ....               LDR      R2,??DataTable21  ;; 0x5c28f5c3
   \   0000004C   ....               LDR      R3,??DataTable22  ;; 0x408ae28f
   \   0000004E   ........           BL       __aeabi_dadd
   \   00000052   0022               MOVS     R2,#+0
   \   00000054   ....               LDR      R3,??DataTable23  ;; 0x40690000
   \   00000056   ........           BL       __aeabi_dmul
   \   0000005A   0022               MOVS     R2,#+0
   \   0000005C   ....               LDR      R3,??DataTable24  ;; 0xc104ff00
   \   0000005E   ........           BL       __aeabi_dadd
   \   00000062   ........           BL       __aeabi_d2iz
   \   00000066   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000068   0014               ASRS     R0,R0,#+16
   \   0000006A   A021               MOVS     R1,#+160
   \   0000006C   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   0000006E   0143               ORRS     R1,R1,R0
   \   00000070   0800               MOVS     R0,R1
   \   00000072   2100               MOVS     R1,R4
   \   00000074   ........           BL       SPI_SendWord
    115             RF_Status.EnableRX();
   \   00000078   ....               LDR      R0,??DataTable25  ;; RF_Status + 40
   \   0000007A   0068               LDR      R0,[R0, #+0]
   \   0000007C   ........           BL       __iar_via_R0
    116          
    117          }
   \                     ??SwitchToMaster_1:
   \   00000080   10BC               POP      {R4}
   \   00000082   01BC               POP      {R0}
   \   00000084   0047               BX       R0               ;; return
   \   00000086   C046               Nop      
   \                     ??SwitchToMaster_0:
   \   00000088   ........           DC32     SPI_Buff + 220
   \   0000008C   ........           DC32     ReciveFrameToMe
   \   00000090   ........           DC32     RF_Status + 14
    118          

   \                                 In section Debug.txt, align 4, keep-with-next
    119          void SwitchToSlave(void)
    120          {
   \                     SwitchToSlave:
   \   00000000   10B5               PUSH     {R4,LR}
    121             RF_Status.TimeInSlaveMode=0;
   \   00000002   ....               LDR      R0,??DataTable13  ;; RF_Status + 22
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0180               STRH     R1,[R0, #+0]
    122             RF_Status.TimeInMasterMode=0;
   \   00000008   ....               LDR      R0,??DataTable14  ;; RF_Status + 20
   \   0000000A   0021               MOVS     R1,#+0
   \   0000000C   0180               STRH     R1,[R0, #+0]
    123             RF_Status.SlaveModeTimeout=MAX_TIME_FOR_SLAVE_ASK;
                                               ^
Warning[Pe069]: integer conversion resulted in truncation
   \   0000000E   ....               LDR      R0,??DataTable15  ;; RF_Status + 19
   \   00000010   5E21               MOVS     R1,#+94
   \   00000012   0170               STRB     R1,[R0, #+0]
    124            
    125             // AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
    126             
    127             SPI_SendWord(0x8219,Cs_RF); 
                    ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   00000014   0221               MOVS     R1,#+2
   \   00000016   ....               LDR      R0,??DataTable16  ;; 0x8219
   \   00000018   ........           BL       SPI_SendWord
    128            // Delay(0x4FF);
    129             SPI_SendWord(0x80E7,Cs_RF); 
   \   0000001C   0221               MOVS     R1,#+2
   \   0000001E   1848               LDR      R0,??SwitchToSlave_0  ;; 0x80e7
   \   00000020   ........           BL       SPI_SendWord
    130             SlaveMode=1;
   \   00000024   ....               LDR      R0,??DataTable17  ;; SlaveMode
   \   00000026   0121               MOVS     R1,#+1
   \   00000028   0170               STRB     R1,[R0, #+0]
    131          
    132             RF_Status.MasterMode=0;
   \   0000002A   ....               LDR      R0,??DataTable18  ;; RF_Status + 13
   \   0000002C   0021               MOVS     R1,#+0
   \   0000002E   0170               STRB     R1,[R0, #+0]
    133             SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.ChSlave),Cs_RF);  
   \   00000030   0221               MOVS     R1,#+2
   \   00000032   0C00               MOVS     R4,R1
   \   00000034   1348               LDR      R0,??SwitchToSlave_0+0x4  ;; RF_Status + 15
   \   00000036   0078               LDRB     R0,[R0, #+0]
   \   00000038   ........           BL       __aeabi_ui2d
   \   0000003C   ....               LDR      R2,??DataTable19  ;; 0x33333333
   \   0000003E   ....               LDR      R3,??DataTable20  ;; 0x3fd33333
   \   00000040   ........           BL       __aeabi_dmul
   \   00000044   ....               LDR      R2,??DataTable21  ;; 0x5c28f5c3
   \   00000046   ....               LDR      R3,??DataTable22  ;; 0x408ae28f
   \   00000048   ........           BL       __aeabi_dadd
   \   0000004C   0022               MOVS     R2,#+0
   \   0000004E   ....               LDR      R3,??DataTable23  ;; 0x40690000
   \   00000050   ........           BL       __aeabi_dmul
   \   00000054   0022               MOVS     R2,#+0
   \   00000056   ....               LDR      R3,??DataTable24  ;; 0xc104ff00
   \   00000058   ........           BL       __aeabi_dadd
   \   0000005C   ........           BL       __aeabi_d2iz
   \   00000060   0004               LSLS     R0,R0,#+16       ;; SignExtS R0,R0,#+16,#+16
   \   00000062   0014               ASRS     R0,R0,#+16
   \   00000064   A021               MOVS     R1,#+160
   \   00000066   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   00000068   0143               ORRS     R1,R1,R0
   \   0000006A   0800               MOVS     R0,R1
   \   0000006C   2100               MOVS     R1,R4
   \   0000006E   ........           BL       SPI_SendWord
    134             RF_Status.EnableRX();
   \   00000072   ....               LDR      R0,??DataTable25  ;; RF_Status + 40
   \   00000074   0068               LDR      R0,[R0, #+0]
   \   00000076   ........           BL       __iar_via_R0
    135          
    136          }
   \   0000007A   10BC               POP      {R4}
   \   0000007C   01BC               POP      {R0}
   \   0000007E   0047               BX       R0               ;; return
   \                     ??SwitchToSlave_0:
   \   00000080   E7800000           DC32     0x80e7
   \   00000084   ........           DC32     RF_Status + 15
    137          
    138          
    139          //-----------------------------------------------------------------------------
    140          //!  Nazwa funkcji :    RF_ExecuteOrder
    141          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
    142          //-----------------------------------------------------------------------------
    143          //  Res   - wskanik na bufor danych
    144          //  Size  - wielkoæ bufora danych
    145          //  Buff  - wskanik na ostatni bajt danych 
    146          //-----------------------------------------------------------------------------

   \                                 In section .bss, align 4
    147            _RF_Command  *pRF_Command;
   \                     pRF_Command:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
    148          char RF_ReciveFarm(char *Buff, char Size)
    149          {
   \                     RF_ReciveFarm:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   \   00000002   0500               MOVS     R5,R0
   \   00000004   0E00               MOVS     R6,R1
    150                    char FrameOk=0;
   \   00000006   0024               MOVS     R4,#+0
    151                    
    152                    if ((Size==8) && (FrameOk==0))
   \   00000008   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000000A   360E               LSRS     R6,R6,#+24
   \   0000000C   082E               CMP      R6,#+8
   \   0000000E   1BD1               BNE      ??RF_ReciveFarm_0
   \   00000010   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000012   240E               LSRS     R4,R4,#+24
   \   00000014   002C               CMP      R4,#+0
   \   00000016   17D1               BNE      ??RF_ReciveFarm_0
    153                    {
    154                       pRF_Command=(_pRF_Command)(Buff-7); //rzutowanie na strukturê rozkazu
   \   00000018   B948               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   0000001A   ED1F               SUBS     R5,R5,#+7
   \   0000001C   0560               STR      R5,[R0, #+0]
    155                       if (pRF_Command->B8.CRC == crc16(pRF_Command->Streem, Size-2))  FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000001E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000020   360E               LSRS     R6,R6,#+24
   \   00000022   B61E               SUBS     R6,R6,#+2
   \   00000024   3100               MOVS     R1,R6
   \   00000026   B648               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000028   0068               LDR      R0,[R0, #+0]
   \   0000002A   ........           BL       crc16
   \   0000002E   B449               LDR      R1,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000030   0968               LDR      R1,[R1, #+0]
   \   00000032   8B79               LDRB     R3,[R1, #+6]
   \   00000034   CA79               LDRB     R2,[R1, #+7]
   \   00000036   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   00000038   120C               LSRS     R2,R2,#+16
   \   0000003A   1343               ORRS     R3,R3,R2
   \   0000003C   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   0000003E   000C               LSRS     R0,R0,#+16
   \   00000040   8342               CMP      R3,R0
   \   00000042   55D1               BNE      ??RF_ReciveFarm_2
   \   00000044   0124               MOVS     R4,#+1
   \   00000046   53E0               B        ??RF_ReciveFarm_2
    156                    }
    157                    else if (Size==6)
   \                     ??RF_ReciveFarm_0:
   \   00000048   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000004A   360E               LSRS     R6,R6,#+24
   \   0000004C   062E               CMP      R6,#+6
   \   0000004E   17D1               BNE      ??RF_ReciveFarm_3
    158                    {
    159                       pRF_Command=(_pRF_Command)(Buff-5); //rzutowanie na strukturê rozkazu
   \   00000050   AB48               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000052   6D1F               SUBS     R5,R5,#+5
   \   00000054   0560               STR      R5,[R0, #+0]
    160                       if (pRF_Command->B6.CRC == crc16(pRF_Command->Streem, Size-2))  FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000056   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000058   360E               LSRS     R6,R6,#+24
   \   0000005A   B61E               SUBS     R6,R6,#+2
   \   0000005C   3100               MOVS     R1,R6
   \   0000005E   A848               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000060   0068               LDR      R0,[R0, #+0]
   \   00000062   ........           BL       crc16
   \   00000066   A649               LDR      R1,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000068   0968               LDR      R1,[R1, #+0]
   \   0000006A   0B79               LDRB     R3,[R1, #+4]
   \   0000006C   4A79               LDRB     R2,[R1, #+5]
   \   0000006E   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   00000070   120C               LSRS     R2,R2,#+16
   \   00000072   1343               ORRS     R3,R3,R2
   \   00000074   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   00000076   000C               LSRS     R0,R0,#+16
   \   00000078   8342               CMP      R3,R0
   \   0000007A   39D1               BNE      ??RF_ReciveFarm_2
   \   0000007C   0124               MOVS     R4,#+1
   \   0000007E   37E0               B        ??RF_ReciveFarm_2
    161                    }   
    162                    else 
    163                    { 
    164                      if ((Size>8) && (FrameOk==0))
   \                     ??RF_ReciveFarm_3:
   \   00000080   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000082   360E               LSRS     R6,R6,#+24
   \   00000084   092E               CMP      R6,#+9
   \   00000086   17D3               BCC      ??RF_ReciveFarm_4
   \   00000088   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000008A   240E               LSRS     R4,R4,#+24
   \   0000008C   002C               CMP      R4,#+0
   \   0000008E   13D1               BNE      ??RF_ReciveFarm_4
    165                      {
    166                        pRF_Command=(_pRF_Command)(Buff-7); //rzutowanie na strukturê rozkazu
   \   00000090   9B48               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000092   E91F               SUBS     R1,R5,#+7
   \   00000094   0160               STR      R1,[R0, #+0]
    167                        if (pRF_Command->B8.CRC == crc16(pRF_Command->Streem, 6))  FrameOk=1;
                                                                ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000096   0621               MOVS     R1,#+6
   \   00000098   9948               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   0000009A   0068               LDR      R0,[R0, #+0]
   \   0000009C   ........           BL       crc16
   \   000000A0   9749               LDR      R1,??RF_ReciveFarm_1  ;; pRF_Command
   \   000000A2   0968               LDR      R1,[R1, #+0]
   \   000000A4   8B79               LDRB     R3,[R1, #+6]
   \   000000A6   CA79               LDRB     R2,[R1, #+7]
   \   000000A8   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000000AA   120C               LSRS     R2,R2,#+16
   \   000000AC   1343               ORRS     R3,R3,R2
   \   000000AE   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000000B0   000C               LSRS     R0,R0,#+16
   \   000000B2   8342               CMP      R3,R0
   \   000000B4   00D1               BNE      ??RF_ReciveFarm_4
   \   000000B6   0124               MOVS     R4,#+1
    168                      }
    169                      
    170                      if ((Size>6) && (FrameOk==0))
   \                     ??RF_ReciveFarm_4:
   \   000000B8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000000BA   360E               LSRS     R6,R6,#+24
   \   000000BC   072E               CMP      R6,#+7
   \   000000BE   17D3               BCC      ??RF_ReciveFarm_2
   \   000000C0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000C2   240E               LSRS     R4,R4,#+24
   \   000000C4   002C               CMP      R4,#+0
   \   000000C6   13D1               BNE      ??RF_ReciveFarm_2
    171                      {
    172                       pRF_Command=(_pRF_Command)(Buff-5); //rzutowanie na strukturê rozkazu
   \   000000C8   8D48               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   000000CA   6D1F               SUBS     R5,R5,#+5
   \   000000CC   0560               STR      R5,[R0, #+0]
    173                       if (pRF_Command->B6.CRC == crc16(pRF_Command->Streem, 4)) FrameOk=1;
                                                               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000000CE   0421               MOVS     R1,#+4
   \   000000D0   8B48               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   000000D2   0068               LDR      R0,[R0, #+0]
   \   000000D4   ........           BL       crc16
   \   000000D8   8949               LDR      R1,??RF_ReciveFarm_1  ;; pRF_Command
   \   000000DA   0968               LDR      R1,[R1, #+0]
   \   000000DC   0B79               LDRB     R3,[R1, #+4]
   \   000000DE   4A79               LDRB     R2,[R1, #+5]
   \   000000E0   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000000E2   120C               LSRS     R2,R2,#+16
   \   000000E4   1343               ORRS     R3,R3,R2
   \   000000E6   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000000E8   000C               LSRS     R0,R0,#+16
   \   000000EA   8342               CMP      R3,R0
   \   000000EC   00D1               BNE      ??RF_ReciveFarm_2
   \   000000EE   0124               MOVS     R4,#+1
    174                      } 
    175                    
    176                    }
    177                   
    178                    
    179          
    180                    
    181                    //je¿eli ramka poprawna
    182                    if (FrameOk==1)
   \                     ??RF_ReciveFarm_2:
   \   000000F0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000F2   240E               LSRS     R4,R4,#+24
   \   000000F4   012C               CMP      R4,#+1
   \   000000F6   00D0               BEQ      .+4
   \   000000F8   FCE0               B        ??RF_ReciveFarm_5
    183                    {  
    184                        
    185                            char Odbierz=0;
   \   000000FA   0025               MOVS     R5,#+0
    186                            //Sprawdzenie zgodnoci ID 
    187                            if(((pRF_Command->ID==RF_TaskTab[RF_CurrentTask].Command.ID) && (!SlaveMode)) ||
    188                               ((pRF_Command->ID==RF_Status.RF_ID) && (SlaveMode))
    189                               ) 
   \   000000FC   8048               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   000000FE   0068               LDR      R0,[R0, #+0]
   \   00000100   ........           BL       __aeabi_uread4
   \   00000104   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000106   000B               LSRS     R0,R0,#+12
   \   00000108   7E49               LDR      R1,??RF_ReciveFarm_1+0x4  ;; RF_CurrentTask
   \   0000010A   0022               MOVS     R2,#+0
   \   0000010C   8956               LDRSB    R1,[R1, R2]
   \   0000010E   0822               MOVS     R2,#+8
   \   00000110   5143               MULS     R1,R2,R1
   \   00000112   7D4A               LDR      R2,??RF_ReciveFarm_1+0x8  ;; RF_TaskTab
   \   00000114   5118               ADDS     R1,R2,R1
   \   00000116   4968               LDR      R1,[R1, #+4]
   \   00000118   0903               LSLS     R1,R1,#+12       ;; ZeroExtS R1,R1,#+12,#+12
   \   0000011A   090B               LSRS     R1,R1,#+12
   \   0000011C   8842               CMP      R0,R1
   \   0000011E   03D1               BNE      ??RF_ReciveFarm_6
   \   00000120   7A48               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   00000122   0078               LDRB     R0,[R0, #+0]
   \   00000124   0028               CMP      R0,#+0
   \   00000126   0DD0               BEQ      ??RF_ReciveFarm_7
   \                     ??RF_ReciveFarm_6:
   \   00000128   7548               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   0000012A   0068               LDR      R0,[R0, #+0]
   \   0000012C   ........           BL       __aeabi_uread4
   \   00000130   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000132   000B               LSRS     R0,R0,#+12
   \   00000134   7649               LDR      R1,??RF_ReciveFarm_1+0x10  ;; RF_Status + 24
   \   00000136   0968               LDR      R1,[R1, #+0]
   \   00000138   8842               CMP      R0,R1
   \   0000013A   05D1               BNE      ??RF_ReciveFarm_8
   \   0000013C   7348               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   0000013E   0078               LDRB     R0,[R0, #+0]
   \   00000140   0028               CMP      R0,#+0
   \   00000142   01D0               BEQ      ??RF_ReciveFarm_8
    190                            {
    191                               Odbierz=1;
   \                     ??RF_ReciveFarm_7:
   \   00000144   0125               MOVS     R5,#+1
   \   00000146   6FE0               B        ??RF_ReciveFarm_9
    192                            }
    193                            else if ((pRF_Command->ID==0)  && (SlaveMode)) //ramka rozg³ona 
   \                     ??RF_ReciveFarm_8:
   \   00000148   6D48               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   0000014A   0068               LDR      R0,[R0, #+0]
   \   0000014C   ........           BL       __aeabi_uread4
   \   00000150   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000152   000B               LSRS     R0,R0,#+12
   \   00000154   0028               CMP      R0,#+0
   \   00000156   05D1               BNE      ??RF_ReciveFarm_10
   \   00000158   6C48               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   0000015A   0078               LDRB     R0,[R0, #+0]
   \   0000015C   0028               CMP      R0,#+0
   \   0000015E   01D0               BEQ      ??RF_ReciveFarm_10
    194                            {
    195                              Odbierz=1;
   \   00000160   0125               MOVS     R5,#+1
   \   00000162   61E0               B        ??RF_ReciveFarm_9
    196                            }
    197                            else if ((AT91C_IFLASH_MEM->Config.SlaveMode) && (SlaveMode) && (BridgeMode)) 
   \                     ??RF_ReciveFarm_10:
   \   00000164   6B48               LDR      R0,??RF_ReciveFarm_1+0x14  ;; 0x13d7e8
   \   00000166   0078               LDRB     R0,[R0, #+0]
   \   00000168   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000016A   000E               LSRS     R0,R0,#+24
   \   0000016C   0028               CMP      R0,#+0
   \   0000016E   27D0               BEQ      ??RF_ReciveFarm_11
   \   00000170   6648               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   00000172   0078               LDRB     R0,[R0, #+0]
   \   00000174   0028               CMP      R0,#+0
   \   00000176   23D0               BEQ      ??RF_ReciveFarm_11
   \   00000178   6748               LDR      R0,??RF_ReciveFarm_1+0x18  ;; BridgeMode
   \   0000017A   0078               LDRB     R0,[R0, #+0]
   \   0000017C   0028               CMP      R0,#+0
   \   0000017E   1FD0               BEQ      ??RF_ReciveFarm_11
    198                            {
    199                              for (char ND=0; ND<NumberNeurons-1; ND++)
   \   00000180   0026               MOVS     R6,#+0
   \   00000182   00E0               B        ??RF_ReciveFarm_12
   \                     ??RF_ReciveFarm_13:
   \   00000184   761C               ADDS     R6,R6,#+1
   \                     ??RF_ReciveFarm_12:
   \   00000186   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000188   360E               LSRS     R6,R6,#+24
   \   0000018A   222E               CMP      R6,#+34
   \   0000018C   4CD2               BCS      ??RF_ReciveFarm_9
    200                              {
    201                                if ((pRF_Command->ID==NeuronsList[ND].NeuronID) && (TransQuality.QuickMensur[ND]))
   \   0000018E   5C48               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000190   0068               LDR      R0,[R0, #+0]
   \   00000192   ........           BL       __aeabi_uread4
   \   00000196   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000198   000B               LSRS     R0,R0,#+12
   \   0000019A   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000019C   360E               LSRS     R6,R6,#+24
   \   0000019E   0C21               MOVS     R1,#+12
   \   000001A0   7143               MULS     R1,R6,R1
   \   000001A2   5E4A               LDR      R2,??RF_ReciveFarm_1+0x1C  ;; NeuronsList
   \   000001A4   5118               ADDS     R1,R2,R1
   \   000001A6   4968               LDR      R1,[R1, #+4]
   \   000001A8   8842               CMP      R0,R1
   \   000001AA   EBD1               BNE      ??RF_ReciveFarm_13
   \   000001AC   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000001AE   360E               LSRS     R6,R6,#+24
   \   000001B0   5B48               LDR      R0,??RF_ReciveFarm_1+0x20  ;; TransQuality
   \   000001B2   8019               ADDS     R0,R0,R6
   \   000001B4   2630               ADDS     R0,R0,#+38
   \   000001B6   0078               LDRB     R0,[R0, #+0]
   \   000001B8   0028               CMP      R0,#+0
   \   000001BA   E3D0               BEQ      ??RF_ReciveFarm_13
    202                                {
    203                                  Odbierz=1;
   \   000001BC   0125               MOVS     R5,#+1
    204                                  break;
   \   000001BE   33E0               B        ??RF_ReciveFarm_9
    205                                }
    206                              }
    207                            }else if (((RF_TaskTab[RF_CurrentTask].Command.Order==R_BC_Order) || (RF_TaskTab[RF_CurrentTask].Command.Order==W_BC_Order)) && (pRF_Command->BC_ID2==RF_TaskTab[RF_CurrentTask].Command.ID))
   \                     ??RF_ReciveFarm_11:
   \   000001C0   5048               LDR      R0,??RF_ReciveFarm_1+0x4  ;; RF_CurrentTask
   \   000001C2   0021               MOVS     R1,#+0
   \   000001C4   4056               LDRSB    R0,[R0, R1]
   \   000001C6   0821               MOVS     R1,#+8
   \   000001C8   4843               MULS     R0,R1,R0
   \   000001CA   4F49               LDR      R1,??RF_ReciveFarm_1+0x8  ;; RF_TaskTab
   \   000001CC   0818               ADDS     R0,R1,R0
   \   000001CE   4068               LDR      R0,[R0, #+4]
   \   000001D0   F021               MOVS     R1,#+240
   \   000001D2   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000001D4   0140               ANDS     R1,R1,R0
   \   000001D6   0800               MOVS     R0,R1
   \   000001D8   000D               LSRS     R0,R0,#+20
   \   000001DA   0728               CMP      R0,#+7
   \   000001DC   0ED0               BEQ      ??RF_ReciveFarm_14
   \   000001DE   4948               LDR      R0,??RF_ReciveFarm_1+0x4  ;; RF_CurrentTask
   \   000001E0   0021               MOVS     R1,#+0
   \   000001E2   4056               LDRSB    R0,[R0, R1]
   \   000001E4   0821               MOVS     R1,#+8
   \   000001E6   4843               MULS     R0,R1,R0
   \   000001E8   4749               LDR      R1,??RF_ReciveFarm_1+0x8  ;; RF_TaskTab
   \   000001EA   0818               ADDS     R0,R1,R0
   \   000001EC   4068               LDR      R0,[R0, #+4]
   \   000001EE   F021               MOVS     R1,#+240
   \   000001F0   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000001F2   0140               ANDS     R1,R1,R0
   \   000001F4   0800               MOVS     R0,R1
   \   000001F6   000D               LSRS     R0,R0,#+20
   \   000001F8   0828               CMP      R0,#+8
   \   000001FA   15D1               BNE      ??RF_ReciveFarm_9
   \                     ??RF_ReciveFarm_14:
   \   000001FC   4048               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   000001FE   0068               LDR      R0,[R0, #+0]
   \   00000200   C01C               ADDS     R0,R0,#+3
   \   00000202   ........           BL       __aeabi_uread8
   \   00000206   4749               LDR      R1,??RF_ReciveFarm_1+0x24  ;; 0xfffff0
   \   00000208   0140               ANDS     R1,R1,R0
   \   0000020A   0800               MOVS     R0,R1
   \   0000020C   0009               LSRS     R0,R0,#+4
   \   0000020E   3D49               LDR      R1,??RF_ReciveFarm_1+0x4  ;; RF_CurrentTask
   \   00000210   0022               MOVS     R2,#+0
   \   00000212   8956               LDRSB    R1,[R1, R2]
   \   00000214   0822               MOVS     R2,#+8
   \   00000216   5143               MULS     R1,R2,R1
   \   00000218   3B4A               LDR      R2,??RF_ReciveFarm_1+0x8  ;; RF_TaskTab
   \   0000021A   5118               ADDS     R1,R2,R1
   \   0000021C   4968               LDR      R1,[R1, #+4]
   \   0000021E   0903               LSLS     R1,R1,#+12       ;; ZeroExtS R1,R1,#+12,#+12
   \   00000220   090B               LSRS     R1,R1,#+12
   \   00000222   8842               CMP      R0,R1
   \   00000224   00D1               BNE      ??RF_ReciveFarm_9
    208                            {
    209                              Odbierz=1;
   \   00000226   0125               MOVS     R5,#+1
    210                            }
    211                            
    212                            
    213                            
    214                            
    215                            
    216                            if (Odbierz)
   \                     ??RF_ReciveFarm_9:
   \   00000228   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000022A   2D0E               LSRS     R5,R5,#+24
   \   0000022C   002D               CMP      R5,#+0
   \   0000022E   2ED0               BEQ      ??RF_ReciveFarm_15
    217                            {
    218                              if ((SlaveMode==0) && (RF_Status.ConfResive==1)) RF_Status.ConfResive=2;  //znacznik odebrania danych (dla kontroli kana³u)
   \   00000230   3648               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   00000232   0078               LDRB     R0,[R0, #+0]
   \   00000234   0028               CMP      R0,#+0
   \   00000236   06D1               BNE      ??RF_ReciveFarm_16
   \   00000238   3B48               LDR      R0,??RF_ReciveFarm_1+0x28  ;; RF_Status + 11
   \   0000023A   0078               LDRB     R0,[R0, #+0]
   \   0000023C   0128               CMP      R0,#+1
   \   0000023E   02D1               BNE      ??RF_ReciveFarm_16
   \   00000240   3948               LDR      R0,??RF_ReciveFarm_1+0x28  ;; RF_Status + 11
   \   00000242   0221               MOVS     R1,#+2
   \   00000244   0170               STRB     R1,[R0, #+0]
    219                              if ((SlaveMode==1) && (RF_Status.ConfResiveSlave==1)) RF_Status.ConfResiveSlave=2;  //znacznik odebrania danych (dla kontroli kana³u)
   \                     ??RF_ReciveFarm_16:
   \   00000246   3148               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   00000248   0078               LDRB     R0,[R0, #+0]
   \   0000024A   0128               CMP      R0,#+1
   \   0000024C   06D1               BNE      ??RF_ReciveFarm_17
   \   0000024E   3748               LDR      R0,??RF_ReciveFarm_1+0x2C  ;; RF_Status + 12
   \   00000250   0078               LDRB     R0,[R0, #+0]
   \   00000252   0128               CMP      R0,#+1
   \   00000254   02D1               BNE      ??RF_ReciveFarm_17
   \   00000256   3548               LDR      R0,??RF_ReciveFarm_1+0x2C  ;; RF_Status + 12
   \   00000258   0221               MOVS     R1,#+2
   \   0000025A   0170               STRB     R1,[R0, #+0]
    220                               
    221                              RF_ExecuteOrder(pRF_Command);   //realizacja rozkazu   
   \                     ??RF_ReciveFarm_17:
   \   0000025C   2848               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   0000025E   0068               LDR      R0,[R0, #+0]
   \   00000260   ........           BL       RF_ExecuteOrder
    222                              
    223                              
    224                              if (SlaveMode)
   \   00000264   2948               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   00000266   0078               LDRB     R0,[R0, #+0]
   \   00000268   0028               CMP      R0,#+0
   \   0000026A   10D0               BEQ      ??RF_ReciveFarm_15
    225                              {
    226                                if  (RF_Status.TimeInSlaveMode>MAX_TIME_FOR_SLAVE_ASK)
   \   0000026C   3048               LDR      R0,??RF_ReciveFarm_1+0x30  ;; RF_Status + 22
   \   0000026E   0088               LDRH     R0,[R0, #+0]
   \   00000270   FF21               MOVS     R1,#+255
   \   00000272   6031               ADDS     R1,R1,#+96       ;; #+351
   \   00000274   8842               CMP      R0,R1
   \   00000276   03D3               BCC      ??RF_ReciveFarm_18
    227                                {
    228                                 RF_Status.SlaveModeTimeout=2;
   \   00000278   ....               LDR      R0,??DataTable29  ;; RF_Status + 19
   \   0000027A   0221               MOVS     R1,#+2
   \   0000027C   0170               STRB     R1,[R0, #+0]
   \   0000027E   06E0               B        ??RF_ReciveFarm_15
    229                                }else if  (RF_Status.TimeInSlaveMode>100)
   \                     ??RF_ReciveFarm_18:
   \   00000280   2B48               LDR      R0,??RF_ReciveFarm_1+0x30  ;; RF_Status + 22
   \   00000282   0088               LDRH     R0,[R0, #+0]
   \   00000284   6528               CMP      R0,#+101
   \   00000286   02D3               BCC      ??RF_ReciveFarm_15
    230                                {
    231                                 RF_Status.SlaveModeTimeout=SLAVE_MODE_TIMEOUT; 
   \   00000288   ....               LDR      R0,??DataTable29  ;; RF_Status + 19
   \   0000028A   0A21               MOVS     R1,#+10
   \   0000028C   0170               STRB     R1,[R0, #+0]
    232                                }
    233                              }
    234                              
    235                              
    236          
    237                            }
    238                            
    239                            if ((SlaveMode) && (pRF_Command->ID!=RF_Status.RF_ID) && (pRF_Command->ID!=0) && (RF_Status.SlaveModeTimeout>0) && (RF_Status.TimeInSlaveMode>100))
   \                     ??RF_ReciveFarm_15:
   \   0000028E   1F48               LDR      R0,??RF_ReciveFarm_1+0xC  ;; SlaveMode
   \   00000290   0078               LDRB     R0,[R0, #+0]
   \   00000292   0028               CMP      R0,#+0
   \   00000294   1CD0               BEQ      ??RF_ReciveFarm_19
   \   00000296   1A48               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   00000298   0068               LDR      R0,[R0, #+0]
   \   0000029A   ........           BL       __aeabi_uread4
   \   0000029E   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   000002A0   000B               LSRS     R0,R0,#+12
   \   000002A2   1B49               LDR      R1,??RF_ReciveFarm_1+0x10  ;; RF_Status + 24
   \   000002A4   0968               LDR      R1,[R1, #+0]
   \   000002A6   8842               CMP      R0,R1
   \   000002A8   12D0               BEQ      ??RF_ReciveFarm_19
   \   000002AA   1548               LDR      R0,??RF_ReciveFarm_1  ;; pRF_Command
   \   000002AC   0068               LDR      R0,[R0, #+0]
   \   000002AE   ........           BL       __aeabi_uread4
   \   000002B2   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   000002B4   000B               LSRS     R0,R0,#+12
   \   000002B6   0028               CMP      R0,#+0
   \   000002B8   0AD0               BEQ      ??RF_ReciveFarm_19
   \   000002BA   ....               LDR      R0,??DataTable29  ;; RF_Status + 19
   \   000002BC   0078               LDRB     R0,[R0, #+0]
   \   000002BE   0128               CMP      R0,#+1
   \   000002C0   06D3               BCC      ??RF_ReciveFarm_19
   \   000002C2   1B48               LDR      R0,??RF_ReciveFarm_1+0x30  ;; RF_Status + 22
   \   000002C4   0088               LDRH     R0,[R0, #+0]
   \   000002C6   6528               CMP      R0,#+101
   \   000002C8   02D3               BCC      ??RF_ReciveFarm_19
    240                            {
    241                              RF_Status.SlaveModeTimeout=0;
   \   000002CA   ....               LDR      R0,??DataTable29  ;; RF_Status + 19
   \   000002CC   0021               MOVS     R1,#+0
   \   000002CE   0170               STRB     R1,[R0, #+0]
    242                            }
    243          
    244                            poprawnych++;
   \                     ??RF_ReciveFarm_19:
   \   000002D0   1848               LDR      R0,??RF_ReciveFarm_1+0x34  ;; poprawnych
   \   000002D2   1849               LDR      R1,??RF_ReciveFarm_1+0x34  ;; poprawnych
   \   000002D4   0968               LDR      R1,[R1, #+0]
   \   000002D6   491C               ADDS     R1,R1,#+1
   \   000002D8   0160               STR      R1,[R0, #+0]
    245                            odb[IndWys]++;
   \   000002DA   1748               LDR      R0,??RF_ReciveFarm_1+0x38  ;; IndWys
   \   000002DC   0078               LDRB     R0,[R0, #+0]
   \   000002DE   0421               MOVS     R1,#+4
   \   000002E0   4843               MULS     R0,R1,R0
   \   000002E2   1649               LDR      R1,??RF_ReciveFarm_1+0x3C  ;; odb
   \   000002E4   144A               LDR      R2,??RF_ReciveFarm_1+0x38  ;; IndWys
   \   000002E6   1278               LDRB     R2,[R2, #+0]
   \   000002E8   0423               MOVS     R3,#+4
   \   000002EA   5A43               MULS     R2,R3,R2
   \   000002EC   134B               LDR      R3,??RF_ReciveFarm_1+0x3C  ;; odb
   \   000002EE   9A58               LDR      R2,[R3, R2]
   \   000002F0   521C               ADDS     R2,R2,#+1
   \   000002F2   0A50               STR      R2,[R1, R0]
    246                    }
    247                    return FrameOk;
   \                     ??RF_ReciveFarm_5:
   \   000002F4   2000               MOVS     R0,R4
   \   000002F6   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000002F8   000E               LSRS     R0,R0,#+24
   \   000002FA   70BC               POP      {R4-R6}
   \   000002FC   02BC               POP      {R1}
   \   000002FE   0847               BX       R1               ;; return
   \                     ??RF_ReciveFarm_1:
   \   00000300   ........           DC32     pRF_Command
   \   00000304   ........           DC32     RF_CurrentTask
   \   00000308   ........           DC32     RF_TaskTab
   \   0000030C   ........           DC32     SlaveMode
   \   00000310   ........           DC32     RF_Status + 24
   \   00000314   E8D71300           DC32     0x13d7e8
   \   00000318   ........           DC32     BridgeMode
   \   0000031C   ........           DC32     NeuronsList
   \   00000320   ........           DC32     TransQuality
   \   00000324   F0FFFF00           DC32     0xfffff0
   \   00000328   ........           DC32     RF_Status + 11
   \   0000032C   ........           DC32     RF_Status + 12
   \   00000330   ........           DC32     RF_Status + 22
   \   00000334   ........           DC32     poprawnych
   \   00000338   ........           DC32     IndWys
   \   0000033C   ........           DC32     odb
    248          
    249          }
    250          
    251          
    252          
    253          
    254          
    255          //-----------------------------------------------------------------------------
    256          //!  Nazwa funkcji :    RF_ExecuteOrder
    257          //!  Funkcja interpretuje i realizuje otrzymany rozkaz
    258          //-----------------------------------------------------------------------------
    259          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    260          void RF_ExecuteOrder(_RF_Command *Command)
    261          {
   \                     RF_ExecuteOrder:
   \   00000000   F0B5               PUSH     {R4-R7,LR}
   \   00000002   8BB0               SUB      SP,SP,#+44
   \   00000004   0400               MOVS     R4,R0
    262           // TRACE_INFO("Id: %X,  Ord: %X,  Reg: %X,  Val: %X \n\r", Command->ID, Command->Order, Command->Auxi, Command->B8.Val); 
    263             licznik_cykli=0;  
   \   00000006   D248               LDR      R0,??RF_ExecuteOrder_0  ;; licznik_cykli
   \   00000008   0021               MOVS     R1,#+0
   \   0000000A   0160               STR      R1,[R0, #+0]
    264             char Nd;
    265             char FoundNode, FoundTask;             
    266             
    267             _RF_Command CMD;
    268             for (char i=0; i<sizeof(_RF_Command); i++) {CMD.Streem[i]=Command->Streem[i];}
   \   0000000C   0020               MOVS     R0,#+0
   \   0000000E   07E0               B        ??RF_ExecuteOrder_1
   \                     ??RF_ExecuteOrder_2:
   \   00000010   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000012   000E               LSRS     R0,R0,#+24
   \   00000014   04A9               ADD      R1,SP,#+16
   \   00000016   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000018   000E               LSRS     R0,R0,#+24
   \   0000001A   225C               LDRB     R2,[R4, R0]
   \   0000001C   0A54               STRB     R2,[R1, R0]
   \   0000001E   401C               ADDS     R0,R0,#+1
   \                     ??RF_ExecuteOrder_1:
   \   00000020   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000022   000E               LSRS     R0,R0,#+24
   \   00000024   0828               CMP      R0,#+8
   \   00000026   F3D3               BCC      ??RF_ExecuteOrder_2
    269             int BC_ID2=(int)CMD.BC_ID2; 
   \   00000028   04A8               ADD      R0,SP,#+16
   \   0000002A   C01C               ADDS     R0,R0,#+3
   \   0000002C   ........           BL       __aeabi_uread8
   \   00000030   C849               LDR      R1,??RF_ExecuteOrder_0+0x4  ;; 0xfffff0
   \   00000032   0140               ANDS     R1,R1,R0
   \   00000034   0800               MOVS     R0,R1
   \   00000036   0009               LSRS     R0,R0,#+4
   \   00000038   0390               STR      R0,[SP, #+12]
    270             char BC_REG=(char)CMD.BC_REG;
   \   0000003A   6D46               MOV      R5,SP
   \   0000003C   04A8               ADD      R0,SP,#+16
   \   0000003E   C01C               ADDS     R0,R0,#+3
   \   00000040   ........           BL       __aeabi_uread8
   \   00000044   0007               LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000046   000F               LSRS     R0,R0,#+28
   \   00000048   6872               STRB     R0,[R5, #+9]
    271             char* pNODE_ID=(char*)&NODE_ID;
   \   0000004A   C348               LDR      R0,??RF_ExecuteOrder_0+0x8  ;; NODE_ID
   \   0000004C   0890               STR      R0,[SP, #+32]
    272             char Order=CMD.Order;
   \   0000004E   04A8               ADD      R0,SP,#+16
   \   00000050   801C               ADDS     R0,R0,#+2
   \   00000052   ........           BL       __aeabi_uread4
   \   00000056   F021               MOVS     R1,#+240
   \   00000058   0140               ANDS     R1,R1,R0
   \   0000005A   0D00               MOVS     R5,R1
   \   0000005C   2D09               LSRS     R5,R5,#+4
    273             _RF_Command  CommandToSend;
    274             
    275             //czêæ wspólna wszystkich odpowiedzi
    276             CommandToSend.ID     = RF_Status.RF_ID;
   \   0000005E   0098               LDR      R0,[SP, #+0]
   \   00000060   000D               LSRS     R0,R0,#+20
   \   00000062   0005               LSLS     R0,R0,#+20
   \   00000064   BD49               LDR      R1,??RF_ExecuteOrder_0+0xC  ;; RF_Status + 24
   \   00000066   0968               LDR      R1,[R1, #+0]
   \   00000068   0903               LSLS     R1,R1,#+12       ;; ZeroExtS R1,R1,#+12,#+12
   \   0000006A   090B               LSRS     R1,R1,#+12
   \   0000006C   0143               ORRS     R1,R1,R0
   \   0000006E   0091               STR      R1,[SP, #+0]
    277             CommandToSend.Auxi   = Command->Auxi;
   \   00000070   6846               MOV      R0,SP
   \   00000072   C01C               ADDS     R0,R0,#+3
   \   00000074   ........           BL       __aeabi_uread4
   \   00000078   0600               MOVS     R6,R0
   \   0000007A   2000               MOVS     R0,R4
   \   0000007C   C01C               ADDS     R0,R0,#+3
   \   0000007E   ........           BL       __aeabi_uread4
   \   00000082   6946               MOV      R1,SP
   \   00000084   C91C               ADDS     R1,R1,#+3
   \   00000086   FF22               MOVS     R2,#+255
   \   00000088   9643               BICS     R6,R6,R2
   \   0000008A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000008C   000E               LSRS     R0,R0,#+24
   \   0000008E   3043               ORRS     R0,R0,R6
   \   00000090   ........           BL       __aeabi_uwrite4
    278             
    279                 
    280              char ByteToSend=0;          
   \   00000094   0027               MOVS     R7,#+0
    281              char NextModule=0;
   \   00000096   6846               MOV      R0,SP
   \   00000098   0021               MOVS     R1,#+0
   \   0000009A   0172               STRB     R1,[R0, #+8]
    282              switch (Order)
   \   0000009C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000009E   2D0E               LSRS     R5,R5,#+24
   \   000000A0   012D               CMP      R5,#+1
   \   000000A2   22D0               BEQ      ??RF_ExecuteOrder_3
   \   000000A4   022D               CMP      R5,#+2
   \   000000A6   00D1               BNE      .+4
   \   000000A8   88E0               B        ??RF_ExecuteOrder_4
   \   000000AA   052D               CMP      R5,#+5
   \   000000AC   01D1               BNE      .+6
   \   000000AE   00F013FC           BL       ??RF_ExecuteOrder_5
   \   000000B2   072D               CMP      R5,#+7
   \   000000B4   00D1               BNE      .+4
   \   000000B6   18E1               B        ??RF_ExecuteOrder_6
   \   000000B8   082D               CMP      R5,#+8
   \   000000BA   00D1               BNE      .+4
   \   000000BC   96E2               B        ??RF_ExecuteOrder_7
   \   000000BE   092D               CMP      R5,#+9
   \   000000C0   01D1               BNE      .+6
   \   000000C2   00F057FC           BL       ??RF_ExecuteOrder_8
   \   000000C6   0A2D               CMP      R5,#+10
   \   000000C8   01D1               BNE      .+6
   \   000000CA   00F017FD           BL       ??RF_ExecuteOrder_9
   \   000000CE   0C2D               CMP      R5,#+12
   \   000000D0   01D1               BNE      .+6
   \   000000D2   00F09AFD           BL       ??RF_ExecuteOrder_10
   \   000000D6   0D2D               CMP      R5,#+13
   \   000000D8   01D1               BNE      .+6
   \   000000DA   00F003FE           BL       ??RF_ExecuteOrder_11
   \   000000DE   0F2D               CMP      R5,#+15
   \   000000E0   01D1               BNE      .+6
   \   000000E2   00F035FE           BL       ??RF_ExecuteOrder_12
   \   000000E6   00F058FE           BL       ??RF_ExecuteOrder_13
    283              {  
    284               
    285                 //Rozkazy dla Slave ------------------------------------------------------------
    286                
    287                      case R_RegOrd :  //Odczyt pojedyñczego rejestru - rozkaz
    288                               //wykonanie ------
    289                               if (Command->ID==RF_Status.RF_ID)  //je¿eli odpytanie bezporednie
   \                     ??RF_ExecuteOrder_3:
   \   000000EA   2000               MOVS     R0,R4
   \   000000EC   ........           BL       __aeabi_uread4
   \   000000F0   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   000000F2   000B               LSRS     R0,R0,#+12
   \   000000F4   9949               LDR      R1,??RF_ExecuteOrder_0+0xC  ;; RF_Status + 24
   \   000000F6   0968               LDR      R1,[R1, #+0]
   \   000000F8   8842               CMP      R0,R1
   \   000000FA   0ED1               BNE      ??RF_ExecuteOrder_14
    290                               {
    291                                  CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
   \   000000FC   6846               MOV      R0,SP
   \   000000FE   C01C               ADDS     R0,R0,#+3
   \   00000100   ........           BL       __aeabi_uread4
   \   00000104   6946               MOV      R1,SP
   \   00000106   964A               LDR      R2,??RF_ExecuteOrder_0+0x10  ;; 0x3a2
   \   00000108   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000010A   000E               LSRS     R0,R0,#+24
   \   0000010C   0223               MOVS     R3,#+2
   \   0000010E   5843               MULS     R0,R3,R0
   \   00000110   944B               LDR      R3,??RF_ExecuteOrder_0+0x14  ;; MainStage
   \   00000112   1818               ADDS     R0,R3,R0
   \   00000114   805A               LDRH     R0,[R0, R2]
   \   00000116   8880               STRH     R0,[R1, #+4]
   \   00000118   3AE0               B        ??RF_ExecuteOrder_15
    292                               }else{ 
    293                                  for (char ND=0; ND<NumberNeurons-1; ND++)
   \                     ??RF_ExecuteOrder_14:
   \   0000011A   0025               MOVS     R5,#+0
   \   0000011C   2AE0               B        ??RF_ExecuteOrder_16
    294                                  {
    295                                    if ((NeuronsList[ND].Bridge) && (Command->ID==NeuronsList[ND].NeuronID))
   \                     ??RF_ExecuteOrder_17:
   \   0000011E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000120   2D0E               LSRS     R5,R5,#+24
   \   00000122   0C20               MOVS     R0,#+12
   \   00000124   6843               MULS     R0,R5,R0
   \   00000126   9049               LDR      R1,??RF_ExecuteOrder_0+0x18  ;; NeuronsList
   \   00000128   0818               ADDS     R0,R1,R0
   \   0000012A   007A               LDRB     R0,[R0, #+8]
   \   0000012C   C006               LSLS     R0,R0,#+27
   \   0000012E   20D5               BPL      ??RF_ExecuteOrder_18
   \   00000130   2000               MOVS     R0,R4
   \   00000132   ........           BL       __aeabi_uread4
   \   00000136   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000138   000B               LSRS     R0,R0,#+12
   \   0000013A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000013C   2D0E               LSRS     R5,R5,#+24
   \   0000013E   0C21               MOVS     R1,#+12
   \   00000140   6943               MULS     R1,R5,R1
   \   00000142   894A               LDR      R2,??RF_ExecuteOrder_0+0x18  ;; NeuronsList
   \   00000144   5118               ADDS     R1,R2,R1
   \   00000146   4968               LDR      R1,[R1, #+4]
   \   00000148   8842               CMP      R0,R1
   \   0000014A   12D1               BNE      ??RF_ExecuteOrder_18
    296                                    {
    297                                      CommandToSend.B8.Val  =  MainStage.StageI[ND+1].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
   \   0000014C   6846               MOV      R0,SP
   \   0000014E   C01C               ADDS     R0,R0,#+3
   \   00000150   ........           BL       __aeabi_uread4
   \   00000154   6946               MOV      R1,SP
   \   00000156   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000158   000E               LSRS     R0,R0,#+24
   \   0000015A   0222               MOVS     R2,#+2
   \   0000015C   5043               MULS     R0,R2,R0
   \   0000015E   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000160   2D0E               LSRS     R5,R5,#+24
   \   00000162   1622               MOVS     R2,#+22
   \   00000164   6A43               MULS     R2,R5,R2
   \   00000166   7F4B               LDR      R3,??RF_ExecuteOrder_0+0x14  ;; MainStage
   \   00000168   9A18               ADDS     R2,R3,R2
   \   0000016A   1018               ADDS     R0,R2,R0
   \   0000016C   B630               ADDS     R0,R0,#+182
   \   0000016E   0088               LDRH     R0,[R0, #+0]
   \   00000170   8880               STRH     R0,[R1, #+4]
    298                                    }
    299                                  }
   \                     ??RF_ExecuteOrder_18:
   \   00000172   6D1C               ADDS     R5,R5,#+1
   \                     ??RF_ExecuteOrder_16:
   \   00000174   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000176   2D0E               LSRS     R5,R5,#+24
   \   00000178   222D               CMP      R5,#+34
   \   0000017A   D0D3               BCC      ??RF_ExecuteOrder_17
    300          
    301                                  CommandToSend.ID=Command->ID;
   \   0000017C   0098               LDR      R0,[SP, #+0]
   \   0000017E   050D               LSRS     R5,R0,#+20
   \   00000180   2D05               LSLS     R5,R5,#+20
   \   00000182   2000               MOVS     R0,R4
   \   00000184   ........           BL       __aeabi_uread4
   \   00000188   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   0000018A   000B               LSRS     R0,R0,#+12
   \   0000018C   2843               ORRS     R0,R0,R5
   \   0000018E   0090               STR      R0,[SP, #+0]
    302                               }
    303                               //odpowied ------
    304                               CommandToSend.Order  = R_RegRes;
   \                     ??RF_ExecuteOrder_15:
   \   00000190   6846               MOV      R0,SP
   \   00000192   801C               ADDS     R0,R0,#+2
   \   00000194   ........           BL       __aeabi_uread4
   \   00000198   0200               MOVS     R2,R0
   \   0000019A   6946               MOV      R1,SP
   \   0000019C   891C               ADDS     R1,R1,#+2
   \   0000019E   F020               MOVS     R0,#+240
   \   000001A0   8243               BICS     R2,R2,R0
   \   000001A2   9020               MOVS     R0,#+144
   \   000001A4   1043               ORRS     R0,R0,R2
   \   000001A6   ........           BL       __aeabi_uwrite4
    305                               CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000001AA   0621               MOVS     R1,#+6
   \   000001AC   6846               MOV      R0,SP
   \   000001AE   ........           BL       crc16
   \   000001B2   6946               MOV      R1,SP
   \   000001B4   C880               STRH     R0,[R1, #+6]
    306                               ByteToSend =8;
   \   000001B6   0827               MOVS     R7,#+8
   \   000001B8   00F0EFFD           BL       ??RF_ExecuteOrder_13
    307                           break;
    308                           
    309                      case W_RegOrd :  //Zapis pojedyñczego rejestru  -rozkaz
    310                              
    311                              //przypieszenie wykonania programu
    312                              if ((CommandToSend.Auxi==0) && (MainStage.StageQ[0].Value[CommandToSend.Auxi]!=Command->B8.Val) && (Busy_program==0))
   \                     ??RF_ExecuteOrder_4:
   \   000001BC   6846               MOV      R0,SP
   \   000001BE   C01C               ADDS     R0,R0,#+3
   \   000001C0   ........           BL       __aeabi_uread4
   \   000001C4   0006               LSLS     R0,R0,#+24
   \   000001C6   20D1               BNE      ??RF_ExecuteOrder_19
   \   000001C8   6846               MOV      R0,SP
   \   000001CA   C01C               ADDS     R0,R0,#+3
   \   000001CC   ........           BL       __aeabi_uread4
   \   000001D0   2179               LDRB     R1,[R4, #+4]
   \   000001D2   6279               LDRB     R2,[R4, #+5]
   \   000001D4   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000001D6   120C               LSRS     R2,R2,#+16
   \   000001D8   1143               ORRS     R1,R1,R2
   \   000001DA   614A               LDR      R2,??RF_ExecuteOrder_0+0x10  ;; 0x3a2
   \   000001DC   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000001DE   000E               LSRS     R0,R0,#+24
   \   000001E0   0223               MOVS     R3,#+2
   \   000001E2   5843               MULS     R0,R3,R0
   \   000001E4   5F4B               LDR      R3,??RF_ExecuteOrder_0+0x14  ;; MainStage
   \   000001E6   1818               ADDS     R0,R3,R0
   \   000001E8   805E               LDRSH    R0,[R0, R2]
   \   000001EA   0904               LSLS     R1,R1,#+16       ;; ZeroExtS R1,R1,#+16,#+16
   \   000001EC   090C               LSRS     R1,R1,#+16
   \   000001EE   8842               CMP      R0,R1
   \   000001F0   0BD0               BEQ      ??RF_ExecuteOrder_19
   \   000001F2   5E48               LDR      R0,??RF_ExecuteOrder_0+0x1C  ;; Busy_program
   \   000001F4   0078               LDRB     R0,[R0, #+0]
   \   000001F6   0028               CMP      R0,#+0
   \   000001F8   07D1               BNE      ??RF_ExecuteOrder_19
    313                              {   
    314                                g_NextTimeProgram=g_counter+1;
   \   000001FA   5D4A               LDR      R2,??RF_ExecuteOrder_0+0x20  ;; g_NextTimeProgram
   \   000001FC   5D48               LDR      R0,??RF_ExecuteOrder_0+0x24  ;; g_counter
   \   000001FE   03C8               LDM      R0!,{R0,R1}
   \   00000200   0023               MOVS     R3,#+0
   \   00000202   401C               ADDS     R0,R0,#+1
   \   00000204   5941               ADCS     R1,R1,R3
   \   00000206   03C2               STM      R2!,{R0,R1}
   \   00000208   083A               SUBS     R2,R2,#+8
    315                              }
    316                        
    317                              
    318                              
    319                               //wykonanie ------
    320                               if (Command->ID==RF_Status.RF_ID)  //je¿eli wykonanie bezporednie
   \                     ??RF_ExecuteOrder_19:
   \   0000020A   2000               MOVS     R0,R4
   \   0000020C   ........           BL       __aeabi_uread4
   \   00000210   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000212   000B               LSRS     R0,R0,#+12
   \   00000214   5149               LDR      R1,??RF_ExecuteOrder_0+0xC  ;; RF_Status + 24
   \   00000216   0968               LDR      R1,[R1, #+0]
   \   00000218   8842               CMP      R0,R1
   \   0000021A   11D1               BNE      ??RF_ExecuteOrder_20
    321                               {
    322                                 MainStage.StageI[0].Value[CommandToSend.Auxi]=Command->B8.Val;                                    //Ustaw rejestr nr: Command.Auxi 
   \   0000021C   6846               MOV      R0,SP
   \   0000021E   C01C               ADDS     R0,R0,#+3
   \   00000220   ........           BL       __aeabi_uread4
   \   00000224   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000226   000E               LSRS     R0,R0,#+24
   \   00000228   0221               MOVS     R1,#+2
   \   0000022A   4843               MULS     R0,R1,R0
   \   0000022C   4D49               LDR      R1,??RF_ExecuteOrder_0+0x14  ;; MainStage
   \   0000022E   0818               ADDS     R0,R1,R0
   \   00000230   A030               ADDS     R0,R0,#+160
   \   00000232   2279               LDRB     R2,[R4, #+4]
   \   00000234   6179               LDRB     R1,[R4, #+5]
   \   00000236   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+16
   \   00000238   090C               LSRS     R1,R1,#+16
   \   0000023A   0A43               ORRS     R2,R2,R1
   \   0000023C   0280               STRH     R2,[R0, #+0]
   \   0000023E   3EE0               B        ??RF_ExecuteOrder_21
    323                               }else{
    324                                 CommandToSend.ID=Command->ID; 
   \                     ??RF_ExecuteOrder_20:
   \   00000240   0098               LDR      R0,[SP, #+0]
   \   00000242   050D               LSRS     R5,R0,#+20
   \   00000244   2D05               LSLS     R5,R5,#+20
   \   00000246   2000               MOVS     R0,R4
   \   00000248   ........           BL       __aeabi_uread4
   \   0000024C   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   0000024E   000B               LSRS     R0,R0,#+12
   \   00000250   2843               ORRS     R0,R0,R5
   \   00000252   0090               STR      R0,[SP, #+0]
    325                                 for (char ND=0; ND<NumberNeurons-1; ND++)
   \   00000254   0025               MOVS     R5,#+0
   \   00000256   2EE0               B        ??RF_ExecuteOrder_22
    326                                  {
    327                                    if ((NeuronsList[ND].Bridge) && (Command->ID==NeuronsList[ND].NeuronID))
   \                     ??RF_ExecuteOrder_23:
   \   00000258   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000025A   2D0E               LSRS     R5,R5,#+24
   \   0000025C   0C20               MOVS     R0,#+12
   \   0000025E   6843               MULS     R0,R5,R0
   \   00000260   4149               LDR      R1,??RF_ExecuteOrder_0+0x18  ;; NeuronsList
   \   00000262   0818               ADDS     R0,R1,R0
   \   00000264   007A               LDRB     R0,[R0, #+8]
   \   00000266   C006               LSLS     R0,R0,#+27
   \   00000268   24D5               BPL      ??RF_ExecuteOrder_24
   \   0000026A   2000               MOVS     R0,R4
   \   0000026C   ........           BL       __aeabi_uread4
   \   00000270   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000272   000B               LSRS     R0,R0,#+12
   \   00000274   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000276   2D0E               LSRS     R5,R5,#+24
   \   00000278   0C21               MOVS     R1,#+12
   \   0000027A   6943               MULS     R1,R5,R1
   \   0000027C   3A4A               LDR      R2,??RF_ExecuteOrder_0+0x18  ;; NeuronsList
   \   0000027E   5118               ADDS     R1,R2,R1
   \   00000280   4968               LDR      R1,[R1, #+4]
   \   00000282   8842               CMP      R0,R1
   \   00000284   16D1               BNE      ??RF_ExecuteOrder_24
    328                                    {
    329                                      MainStage.StageQ[ND+1].Value[CommandToSend.Auxi]=Command->B8.Val;                                    //Ustaw rejestr nr: Command.Auxi 
   \   00000286   6846               MOV      R0,SP
   \   00000288   C01C               ADDS     R0,R0,#+3
   \   0000028A   ........           BL       __aeabi_uread4
   \   0000028E   EE21               MOVS     R1,#+238
   \   00000290   8900               LSLS     R1,R1,#+2        ;; #+952
   \   00000292   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000294   000E               LSRS     R0,R0,#+24
   \   00000296   0222               MOVS     R2,#+2
   \   00000298   5043               MULS     R0,R2,R0
   \   0000029A   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000029C   2D0E               LSRS     R5,R5,#+24
   \   0000029E   1622               MOVS     R2,#+22
   \   000002A0   6A43               MULS     R2,R5,R2
   \   000002A2   304B               LDR      R3,??RF_ExecuteOrder_0+0x14  ;; MainStage
   \   000002A4   9A18               ADDS     R2,R3,R2
   \   000002A6   1018               ADDS     R0,R2,R0
   \   000002A8   2379               LDRB     R3,[R4, #+4]
   \   000002AA   6279               LDRB     R2,[R4, #+5]
   \   000002AC   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+16
   \   000002AE   120C               LSRS     R2,R2,#+16
   \   000002B0   1343               ORRS     R3,R3,R2
   \   000002B2   4352               STRH     R3,[R0, R1]
    330                                    }
    331                                  }
   \                     ??RF_ExecuteOrder_24:
   \   000002B4   6D1C               ADDS     R5,R5,#+1
   \                     ??RF_ExecuteOrder_22:
   \   000002B6   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000002B8   2D0E               LSRS     R5,R5,#+24
   \   000002BA   222D               CMP      R5,#+34
   \   000002BC   CCD3               BCC      ??RF_ExecuteOrder_23
    332                               }
    333                              
    334                              
    335                               //odpowied ------
    336                               CommandToSend.Order  = W_RegRes;
   \                     ??RF_ExecuteOrder_21:
   \   000002BE   6846               MOV      R0,SP
   \   000002C0   801C               ADDS     R0,R0,#+2
   \   000002C2   ........           BL       __aeabi_uread4
   \   000002C6   0200               MOVS     R2,R0
   \   000002C8   6946               MOV      R1,SP
   \   000002CA   891C               ADDS     R1,R1,#+2
   \   000002CC   F020               MOVS     R0,#+240
   \   000002CE   8243               BICS     R2,R2,R0
   \   000002D0   A020               MOVS     R0,#+160
   \   000002D2   1043               ORRS     R0,R0,R2
   \   000002D4   ........           BL       __aeabi_uwrite4
    337                               CommandToSend.B6.CRC = crc16(CommandToSend.Streem,4);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000002D8   0421               MOVS     R1,#+4
   \   000002DA   6846               MOV      R0,SP
   \   000002DC   ........           BL       crc16
   \   000002E0   6946               MOV      R1,SP
   \   000002E2   8880               STRH     R0,[R1, #+4]
    338                               ByteToSend =6;
   \   000002E4   0627               MOVS     R7,#+6
   \   000002E6   00F058FD           BL       ??RF_ExecuteOrder_13
    339                           break;
    340                          
    341                           
    342                         
    343                        case R_BC_Order :  //Odpowied na pytanie kto ma wêze³ (+ dodanie zadania odpytania)
    344                               //wykonanie ------
    345                               //CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
    346                              
    347                              // AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    348                              // ButtonBipCounter=g_counter+10000;
    349                           
    350                   
    351                               
    352                               Nd=0;
   \                     ??RF_ExecuteOrder_6:
   \   000002EA   0024               MOVS     R4,#+0
    353                               FoundNode=0xFF;
   \   000002EC   FF26               MOVS     R6,#+255
    354                               FoundTask=0;
   \   000002EE   0025               MOVS     R5,#+0
    355                          
    356                        
    357                               if (BC_ID2==RF_Status.RF_ID) //jezeli zapytanie rozg³one o mnie 
   \   000002F0   0398               LDR      R0,[SP, #+12]
   \   000002F2   1A49               LDR      R1,??RF_ExecuteOrder_0+0xC  ;; RF_Status + 24
   \   000002F4   0968               LDR      R1,[R1, #+0]
   \   000002F6   8842               CMP      R0,R1
   \   000002F8   43D1               BNE      ??RF_ExecuteOrder_25
    358                               {
    359          
    360                                   CommandToSend.Order= RW_BC_Res;
   \   000002FA   6846               MOV      R0,SP
   \   000002FC   801C               ADDS     R0,R0,#+2
   \   000002FE   ........           BL       __aeabi_uread4
   \   00000302   0200               MOVS     R2,R0
   \   00000304   6946               MOV      R1,SP
   \   00000306   891C               ADDS     R1,R1,#+2
   \   00000308   F020               MOVS     R0,#+240
   \   0000030A   1043               ORRS     R0,R0,R2
   \   0000030C   ........           BL       __aeabi_uwrite4
    361                                   CommandToSend.BC_ID1=RF_Status.RF_ID; 
   \   00000310   6846               MOV      R0,SP
   \   00000312   ........           BL       __aeabi_uread8
   \   00000316   6A46               MOV      R2,SP
   \   00000318   1600               MOVS     R6,R2
   \   0000031A   174C               LDR      R4,??RF_ExecuteOrder_0+0x28  ;; 0xfff00000
   \   0000031C   0025               MOVS     R5,#+0
   \   0000031E   ED43               MVNS     R5,R5            ;; #-1
   \   00000320   0440               ANDS     R4,R4,R0
   \   00000322   0D40               ANDS     R5,R5,R1
   \   00000324   0D48               LDR      R0,??RF_ExecuteOrder_0+0xC  ;; RF_Status + 24
   \   00000326   0268               LDR      R2,[R0, #+0]
   \   00000328   0023               MOVS     R3,#+0
   \   0000032A   1448               LDR      R0,??RF_ExecuteOrder_0+0x2C  ;; 0xfffff
   \   0000032C   0021               MOVS     R1,#+0
   \   0000032E   1040               ANDS     R0,R0,R2
   \   00000330   1940               ANDS     R1,R1,R3
   \   00000332   2043               ORRS     R0,R0,R4
   \   00000334   2943               ORRS     R1,R1,R5
   \   00000336   3200               MOVS     R2,R6
   \   00000338   ........           BL       __aeabi_uwrite8
    362                                   CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000033C   0621               MOVS     R1,#+6
   \   0000033E   6846               MOV      R0,SP
   \   00000340   ........           BL       crc16
   \   00000344   6946               MOV      R1,SP
   \   00000346   C880               STRH     R0,[R1, #+6]
    363                                   ByteToSend =8;
   \   00000348   0827               MOVS     R7,#+8
   \   0000034A   00F026FD           BL       ??RF_ExecuteOrder_13
   \   0000034E   C046               Nop      
   \                     ??RF_ExecuteOrder_0:
   \   00000350   ........           DC32     licznik_cykli
   \   00000354   F0FFFF00           DC32     0xfffff0
   \   00000358   ........           DC32     NODE_ID
   \   0000035C   ........           DC32     RF_Status + 24
   \   00000360   A2030000           DC32     0x3a2
   \   00000364   ........           DC32     MainStage
   \   00000368   ........           DC32     NeuronsList
   \   0000036C   ........           DC32     Busy_program
   \   00000370   ........           DC32     g_NextTimeProgram
   \   00000374   ........           DC32     g_counter
   \   00000378   0000F0FF           DC32     0xfff00000
   \   0000037C   FFFF0F00           DC32     0xfffff
    364                                
    365                               }else{  //jezeli zapytanie rozg³one o trzeci modu³
    366                               
    367                                       while ((FoundNode==0xFF) && (NeuronsList[Nd].NeuronID!=BC_ID2) && (Nd<(NumberNeurons-1))) Nd++; 
   \                     ??RF_ExecuteOrder_26:
   \   00000380   641C               ADDS     R4,R4,#+1
   \                     ??RF_ExecuteOrder_25:
   \   00000382   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000384   360E               LSRS     R6,R6,#+24
   \   00000386   FF2E               CMP      R6,#+255
   \   00000388   0DD1               BNE      ??RF_ExecuteOrder_27
   \   0000038A   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000038C   240E               LSRS     R4,R4,#+24
   \   0000038E   0C20               MOVS     R0,#+12
   \   00000390   6043               MULS     R0,R4,R0
   \   00000392   C849               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   00000394   0818               ADDS     R0,R1,R0
   \   00000396   4068               LDR      R0,[R0, #+4]
   \   00000398   0399               LDR      R1,[SP, #+12]
   \   0000039A   8842               CMP      R0,R1
   \   0000039C   03D0               BEQ      ??RF_ExecuteOrder_27
   \   0000039E   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003A0   240E               LSRS     R4,R4,#+24
   \   000003A2   222C               CMP      R4,#+34
   \   000003A4   ECD3               BCC      ??RF_ExecuteOrder_26
    368                                         
    369                                       if (NeuronsList[Nd].NeuronID==CMD.BC_ID2 ) FoundNode=Nd;     
   \                     ??RF_ExecuteOrder_27:
   \   000003A6   06AA               ADD      R2,SP,#+24
   \   000003A8   04B5               PUSH     {R2,LR}
   \   000003AA   06A8               ADD      R0,SP,#+24
   \   000003AC   C01C               ADDS     R0,R0,#+3
   \   000003AE   ........           BL       __aeabi_uread8
   \   000003B2   009A               LDR      R2,[SP, #0]
   \   000003B4   02B0               ADD      SP,SP,#+8
   \   000003B6   03C2               STM      R2!,{R0,R1}
   \   000003B8   083A               SUBS     R2,R2,#+8
   \   000003BA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000003BC   240E               LSRS     R4,R4,#+24
   \   000003BE   0C20               MOVS     R0,#+12
   \   000003C0   6043               MULS     R0,R4,R0
   \   000003C2   BC49               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   000003C4   0818               ADDS     R0,R1,R0
   \   000003C6   4268               LDR      R2,[R0, #+4]
   \   000003C8   06A8               ADD      R0,SP,#+24
   \   000003CA   03C8               LDM      R0!,{R0,R1}
   \   000003CC   BA49               LDR      R1,??RF_ExecuteOrder_28+0x4  ;; 0xfffff0
   \   000003CE   0140               ANDS     R1,R1,R0
   \   000003D0   0800               MOVS     R0,R1
   \   000003D2   0009               LSRS     R0,R0,#+4
   \   000003D4   8242               CMP      R2,R0
   \   000003D6   00D1               BNE      ??RF_ExecuteOrder_29
   \   000003D8   2600               MOVS     R6,R4
    370                              
    371                        
    372                                       if (FoundNode==0xFF)//je¿eli nie znaleziono wêz³a to dodaj
   \                     ??RF_ExecuteOrder_29:
   \   000003DA   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000003DC   360E               LSRS     R6,R6,#+24
   \   000003DE   FF2E               CMP      R6,#+255
   \   000003E0   42D1               BNE      ??RF_ExecuteOrder_30
    373                                       {
    374                                           //znalezienie miejsca dla nowego wêz³a ---------------------------
    375                                           //char NewNode=NumberNeurons-1; 
    376                                           //while ((NewNode>0) && (NeuronsList[NewNode].NeuronID!=0)) {NewNode--;}
    377                  
    378                                           FoundNode=0;
   \   000003E2   0026               MOVS     R6,#+0
   \   000003E4   00E0               B        ??RF_ExecuteOrder_31
    379                                           while ((NeuronsList[FoundNode].NeuronID!=0) && (FoundNode<NumberNeurons-1)) {FoundNode++;}
   \                     ??RF_ExecuteOrder_32:
   \   000003E6   761C               ADDS     R6,R6,#+1
   \                     ??RF_ExecuteOrder_31:
   \   000003E8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000003EA   360E               LSRS     R6,R6,#+24
   \   000003EC   0C20               MOVS     R0,#+12
   \   000003EE   7043               MULS     R0,R6,R0
   \   000003F0   B049               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   000003F2   0818               ADDS     R0,R1,R0
   \   000003F4   4068               LDR      R0,[R0, #+4]
   \   000003F6   0028               CMP      R0,#+0
   \   000003F8   03D0               BEQ      ??RF_ExecuteOrder_33
   \   000003FA   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000003FC   360E               LSRS     R6,R6,#+24
   \   000003FE   222E               CMP      R6,#+34
   \   00000400   F1D3               BCC      ??RF_ExecuteOrder_32
    380                                           
    381                                           if ((FoundNode>=NumberNeurons-1) || (NeuronsList[FoundNode].NeuronID!=0))  //je¿eli jest miejsce na dodanie nowego wêz³a
   \                     ??RF_ExecuteOrder_33:
   \   00000402   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000404   360E               LSRS     R6,R6,#+24
   \   00000406   222E               CMP      R6,#+34
   \   00000408   08D2               BCS      ??RF_ExecuteOrder_34
   \   0000040A   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000040C   360E               LSRS     R6,R6,#+24
   \   0000040E   0C20               MOVS     R0,#+12
   \   00000410   7043               MULS     R0,R6,R0
   \   00000412   A849               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   00000414   0818               ADDS     R0,R1,R0
   \   00000416   4068               LDR      R0,[R0, #+4]
   \   00000418   0028               CMP      R0,#+0
   \   0000041A   01D0               BEQ      ??RF_ExecuteOrder_35
    382                                           {
    383                                             FoundNode=0xFF;
   \                     ??RF_ExecuteOrder_34:
   \   0000041C   FF26               MOVS     R6,#+255
   \   0000041E   21E0               B        ??RF_ExecuteOrder_36
    384                                           }else{
    385                                             NeuronsList[FoundNode].NeuronID=BC_ID2;
   \                     ??RF_ExecuteOrder_35:
   \   00000420   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000422   360E               LSRS     R6,R6,#+24
   \   00000424   0C20               MOVS     R0,#+12
   \   00000426   7043               MULS     R0,R6,R0
   \   00000428   A249               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   0000042A   0818               ADDS     R0,R1,R0
   \   0000042C   0399               LDR      R1,[SP, #+12]
   \   0000042E   4160               STR      R1,[R0, #+4]
    386                                             NeuronsList[FoundNode].Bridge=1;
   \   00000430   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000432   360E               LSRS     R6,R6,#+24
   \   00000434   0C20               MOVS     R0,#+12
   \   00000436   7043               MULS     R0,R6,R0
   \   00000438   9E49               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   0000043A   0818               ADDS     R0,R1,R0
   \   0000043C   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000043E   360E               LSRS     R6,R6,#+24
   \   00000440   0C21               MOVS     R1,#+12
   \   00000442   7143               MULS     R1,R6,R1
   \   00000444   9B4A               LDR      R2,??RF_ExecuteOrder_28  ;; NeuronsList
   \   00000446   5118               ADDS     R1,R2,R1
   \   00000448   097A               LDRB     R1,[R1, #+8]
   \   0000044A   1022               MOVS     R2,#+16
   \   0000044C   0A43               ORRS     R2,R2,R1
   \   0000044E   0272               STRB     R2,[R0, #+8]
    387                                             NeuronsList[FoundNode].NeuronType=NodeRF_Period;
   \   00000450   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000452   360E               LSRS     R6,R6,#+24
   \   00000454   0C20               MOVS     R0,#+12
   \   00000456   7043               MULS     R0,R6,R0
   \   00000458   9649               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   0000045A   0522               MOVS     R2,#+5
   \   0000045C   0A54               STRB     R2,[R1, R0]
    388                                             BridgeMode=1; 
   \   0000045E   9748               LDR      R0,??RF_ExecuteOrder_28+0x8  ;; BridgeMode
   \   00000460   0121               MOVS     R1,#+1
   \   00000462   0170               STRB     R1,[R0, #+0]
    389                                           }
    390                                           FoundTask=0;
   \                     ??RF_ExecuteOrder_36:
   \   00000464   0025               MOVS     R5,#+0
   \   00000466   81E0               B        ??RF_ExecuteOrder_37
    391          
    392                                       }else{ //je¿eli wêze³ znaleziony
    393                     
    394                                          char i=0;
   \                     ??RF_ExecuteOrder_30:
   \   00000468   0021               MOVS     R1,#+0
   \   0000046A   39E0               B        ??RF_ExecuteOrder_38
    395                                          while ((i<RF_Tasks-1) && (FoundTask==0))
    396                                          {
    397                                             if ((RF_TaskTab[i].Node==FoundNode+1) && 
    398                                                 (RF_TaskTab[i].Command.ID==NeuronsList[FoundNode].NeuronID) &&
    399                                                 (RF_TaskTab[i].Command.Order==R_RegOrd) &&
    400                                                 (RF_TaskTab[i].Command.Auxi==BC_REG))
   \                     ??RF_ExecuteOrder_39:
   \   0000046C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000046E   090E               LSRS     R1,R1,#+24
   \   00000470   0820               MOVS     R0,#+8
   \   00000472   4843               MULS     R0,R1,R0
   \   00000474   924A               LDR      R2,??RF_ExecuteOrder_28+0xC  ;; RF_TaskTab
   \   00000476   125C               LDRB     R2,[R2, R0]
   \   00000478   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000047A   360E               LSRS     R6,R6,#+24
   \   0000047C   3000               MOVS     R0,R6
   \   0000047E   401C               ADDS     R0,R0,#+1
   \   00000480   8242               CMP      R2,R0
   \   00000482   2CD1               BNE      ??RF_ExecuteOrder_40
   \   00000484   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000486   090E               LSRS     R1,R1,#+24
   \   00000488   0820               MOVS     R0,#+8
   \   0000048A   4843               MULS     R0,R1,R0
   \   0000048C   8C4A               LDR      R2,??RF_ExecuteOrder_28+0xC  ;; RF_TaskTab
   \   0000048E   1018               ADDS     R0,R2,R0
   \   00000490   4068               LDR      R0,[R0, #+4]
   \   00000492   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   00000494   000B               LSRS     R0,R0,#+12
   \   00000496   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000498   360E               LSRS     R6,R6,#+24
   \   0000049A   0C22               MOVS     R2,#+12
   \   0000049C   7243               MULS     R2,R6,R2
   \   0000049E   854B               LDR      R3,??RF_ExecuteOrder_28  ;; NeuronsList
   \   000004A0   9A18               ADDS     R2,R3,R2
   \   000004A2   5268               LDR      R2,[R2, #+4]
   \   000004A4   9042               CMP      R0,R2
   \   000004A6   1AD1               BNE      ??RF_ExecuteOrder_40
   \   000004A8   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000004AA   090E               LSRS     R1,R1,#+24
   \   000004AC   0820               MOVS     R0,#+8
   \   000004AE   4843               MULS     R0,R1,R0
   \   000004B0   834A               LDR      R2,??RF_ExecuteOrder_28+0xC  ;; RF_TaskTab
   \   000004B2   1018               ADDS     R0,R2,R0
   \   000004B4   4068               LDR      R0,[R0, #+4]
   \   000004B6   F022               MOVS     R2,#+240
   \   000004B8   1204               LSLS     R2,R2,#+16       ;; #+15728640
   \   000004BA   0240               ANDS     R2,R2,R0
   \   000004BC   1000               MOVS     R0,R2
   \   000004BE   000D               LSRS     R0,R0,#+20
   \   000004C0   0128               CMP      R0,#+1
   \   000004C2   0CD1               BNE      ??RF_ExecuteOrder_40
   \   000004C4   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000004C6   090E               LSRS     R1,R1,#+24
   \   000004C8   0820               MOVS     R0,#+8
   \   000004CA   4843               MULS     R0,R1,R0
   \   000004CC   7C4A               LDR      R2,??RF_ExecuteOrder_28+0xC  ;; RF_TaskTab
   \   000004CE   1018               ADDS     R0,R2,R0
   \   000004D0   4068               LDR      R0,[R0, #+4]
   \   000004D2   000E               LSRS     R0,R0,#+24
   \   000004D4   6A46               MOV      R2,SP
   \   000004D6   527A               LDRB     R2,[R2, #+9]
   \   000004D8   9042               CMP      R0,R2
   \   000004DA   00D1               BNE      ??RF_ExecuteOrder_40
    401                                                {
    402                                                  FoundTask=1;
   \   000004DC   0125               MOVS     R5,#+1
    403                                                }
    404                                            
    405                                             i++;
   \                     ??RF_ExecuteOrder_40:
   \   000004DE   491C               ADDS     R1,R1,#+1
    406                                          }
   \                     ??RF_ExecuteOrder_38:
   \   000004E0   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000004E2   090E               LSRS     R1,R1,#+24
   \   000004E4   4529               CMP      R1,#+69
   \   000004E6   03D2               BCS      ??RF_ExecuteOrder_41
   \   000004E8   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000004EA   2D0E               LSRS     R5,R5,#+24
   \   000004EC   002D               CMP      R5,#+0
   \   000004EE   BDD0               BEQ      ??RF_ExecuteOrder_39
    407                                          
    408                                          
    409                                          
    410                                          if ((FoundTask) && (TransQuality.Mensur[FoundNode]))
   \                     ??RF_ExecuteOrder_41:
   \   000004F0   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000004F2   2D0E               LSRS     R5,R5,#+24
   \   000004F4   002D               CMP      R5,#+0
   \   000004F6   39D0               BEQ      ??RF_ExecuteOrder_37
   \   000004F8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000004FA   360E               LSRS     R6,R6,#+24
   \   000004FC   0420               MOVS     R0,#+4
   \   000004FE   7043               MULS     R0,R6,R0
   \   00000500   7049               LDR      R1,??RF_ExecuteOrder_28+0x10  ;; TransQuality
   \   00000502   0818               ADDS     R0,R1,R0
   \   00000504   C06C               LDR      R0,[R0, #+76]
   \   00000506   0028               CMP      R0,#+0
   \   00000508   30D0               BEQ      ??RF_ExecuteOrder_37
    411                                           {
    412                                            //odpowied ------
    413                                             CommandToSend.Order= RW_BC_Res;
   \   0000050A   6846               MOV      R0,SP
   \   0000050C   801C               ADDS     R0,R0,#+2
   \   0000050E   ........           BL       __aeabi_uread4
   \   00000512   0200               MOVS     R2,R0
   \   00000514   6946               MOV      R1,SP
   \   00000516   891C               ADDS     R1,R1,#+2
   \   00000518   F020               MOVS     R0,#+240
   \   0000051A   1043               ORRS     R0,R0,R2
   \   0000051C   ........           BL       __aeabi_uwrite4
    414                                             CommandToSend.BC_ID2=BC_ID2; 
   \   00000520   6846               MOV      R0,SP
   \   00000522   C01C               ADDS     R0,R0,#+3
   \   00000524   ........           BL       __aeabi_uread8
   \   00000528   6A46               MOV      R2,SP
   \   0000052A   D21C               ADDS     R2,R2,#+3
   \   0000052C   1400               MOVS     R4,R2
   \   0000052E   0200               MOVS     R2,R0
   \   00000530   0B00               MOVS     R3,R1
   \   00000532   6548               LDR      R0,??RF_ExecuteOrder_28+0x14  ;; 0xff00000f
   \   00000534   0021               MOVS     R1,#+0
   \   00000536   C943               MVNS     R1,R1            ;; #-1
   \   00000538   1040               ANDS     R0,R0,R2
   \   0000053A   1940               ANDS     R1,R1,R3
   \   0000053C   03B4               PUSH     {R0,R1}
   \   0000053E   059A               LDR      R2,[SP, #+20]
   \   00000540   D317               ASRS     R3,R2,#+31
   \   00000542   1B01               LSLS     R3,R3,#+4
   \   00000544   100F               LSRS     R0,R2,#+28
   \   00000546   0343               ORRS     R3,R3,R0
   \   00000548   1201               LSLS     R2,R2,#+4
   \   0000054A   5B48               LDR      R0,??RF_ExecuteOrder_28+0x4  ;; 0xfffff0
   \   0000054C   0021               MOVS     R1,#+0
   \   0000054E   1040               ANDS     R0,R0,R2
   \   00000550   1940               ANDS     R1,R1,R3
   \   00000552   0CBC               POP      {R2,R3}
   \   00000554   1043               ORRS     R0,R0,R2
   \   00000556   1943               ORRS     R1,R1,R3
   \   00000558   2200               MOVS     R2,R4
   \   0000055A   ........           BL       __aeabi_uwrite8
    415                                             CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000055E   0621               MOVS     R1,#+6
   \   00000560   6846               MOV      R0,SP
   \   00000562   ........           BL       crc16
   \   00000566   6946               MOV      R1,SP
   \   00000568   C880               STRH     R0,[R1, #+6]
    416                                             ByteToSend =8;
   \   0000056A   0827               MOVS     R7,#+8
    417                                           } 
    418                                         
    419                                        
    420                                       }  
    421                                       
    422                                       
    423                                       if ((FoundTask==0) && (FoundNode!=0xFF))
   \                     ??RF_ExecuteOrder_37:
   \   0000056C   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   0000056E   2D0E               LSRS     R5,R5,#+24
   \   00000570   002D               CMP      R5,#+0
   \   00000572   01D0               BEQ      .+6
   \   00000574   00F011FC           BL       ??RF_ExecuteOrder_13
   \   00000578   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000057A   360E               LSRS     R6,R6,#+24
   \   0000057C   FF2E               CMP      R6,#+255
   \   0000057E   01D1               BNE      .+6
   \   00000580   00F00BFC           BL       ??RF_ExecuteOrder_13
    424                                       if (AddRfTask(R_RegOrd, FoundNode+1, BC_REG)==0)  //je¿eli nie uda³o siê dodaæ zadania to usuñ wszystkie lady po tym wêle
                                                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000584   6846               MOV      R0,SP
   \   00000586   427A               LDRB     R2,[R0, #+9]
   \   00000588   3100               MOVS     R1,R6
   \   0000058A   491C               ADDS     R1,R1,#+1
   \   0000058C   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000058E   090E               LSRS     R1,R1,#+24
   \   00000590   0120               MOVS     R0,#+1
   \   00000592   ........           BL       AddRfTask
   \   00000596   0028               CMP      R0,#+0
   \   00000598   24D1               BNE      ??RF_ExecuteOrder_42
    425                                           {
    426                                             RemoveRfNodeAllTaska(FoundNode);
                                                    ^
Warning[Pe223]: function "RemoveRfNodeAllTaska" declared implicitly
   \   0000059A   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000059C   360E               LSRS     R6,R6,#+24
   \   0000059E   3000               MOVS     R0,R6
   \   000005A0   ........           BL       RemoveRfNodeAllTaska
    427                                             NeuronsList[FoundNode].NeuronID=0;
   \   000005A4   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000005A6   360E               LSRS     R6,R6,#+24
   \   000005A8   0C20               MOVS     R0,#+12
   \   000005AA   7043               MULS     R0,R6,R0
   \   000005AC   4149               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   000005AE   0818               ADDS     R0,R1,R0
   \   000005B0   0021               MOVS     R1,#+0
   \   000005B2   4160               STR      R1,[R0, #+4]
    428                                             NeuronsList[FoundNode].Bridge=0;
   \   000005B4   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000005B6   360E               LSRS     R6,R6,#+24
   \   000005B8   0C20               MOVS     R0,#+12
   \   000005BA   7043               MULS     R0,R6,R0
   \   000005BC   3D49               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   000005BE   0818               ADDS     R0,R1,R0
   \   000005C0   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000005C2   360E               LSRS     R6,R6,#+24
   \   000005C4   0C21               MOVS     R1,#+12
   \   000005C6   7143               MULS     R1,R6,R1
   \   000005C8   3A4A               LDR      R2,??RF_ExecuteOrder_28  ;; NeuronsList
   \   000005CA   5118               ADDS     R1,R2,R1
   \   000005CC   097A               LDRB     R1,[R1, #+8]
   \   000005CE   EF22               MOVS     R2,#+239
   \   000005D0   0A40               ANDS     R2,R2,R1
   \   000005D2   0272               STRB     R2,[R0, #+8]
    429                                             NeuronsList[FoundNode].NeuronType=0;
                                                                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   000005D4   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000005D6   360E               LSRS     R6,R6,#+24
   \   000005D8   0C20               MOVS     R0,#+12
   \   000005DA   4643               MULS     R6,R0,R6
   \   000005DC   3548               LDR      R0,??RF_ExecuteOrder_28  ;; NeuronsList
   \   000005DE   0021               MOVS     R1,#+0
   \   000005E0   8155               STRB     R1,[R0, R6]
   \   000005E2   DAE3               B        ??RF_ExecuteOrder_13
    430                                           }else{
    431                                             RF_Status.TimeToRemBridgeNoCom= MAX_TIME_TO_REM_BRIDGE_NO_CON;
   \                     ??RF_ExecuteOrder_42:
   \   000005E4   3948               LDR      R0,??RF_ExecuteOrder_28+0x18  ;; RF_Status + 18
   \   000005E6   1E21               MOVS     R1,#+30
   \   000005E8   0170               STRB     R1,[R0, #+0]
   \   000005EA   D6E3               B        ??RF_ExecuteOrder_13
    432                                           }
    433                                      
    434          
    435                               
    436                              } //koniec zapytania rozg³onego o trzeci modu³
    437                            
    438                         
    439                               //AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
    440          
    441                               
    442                         break;   
    443          
    444                           
    445                        case W_BC_Order :  //Odpowied na pytanie kto ma wêze³ (+ dodanie zadania odpytania)
    446                               //wykonanie ------
    447                               //CommandToSend.B8.Val  =  MainStage.StageQ[0].Value[CommandToSend.Auxi];                     // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  SymulacjaRej)
    448                       
    449                               
    450                              Nd=0;
   \                     ??RF_ExecuteOrder_7:
   \   000005EC   0024               MOVS     R4,#+0
    451                               FoundNode=0xFF;
   \   000005EE   FF26               MOVS     R6,#+255
    452                               FoundTask=0;
   \   000005F0   0025               MOVS     R5,#+0
    453                          
    454                        
    455                               if (BC_ID2==RF_Status.RF_ID) //jezeli zapytanie rozg³one o mnie 
   \   000005F2   0398               LDR      R0,[SP, #+12]
   \   000005F4   3649               LDR      R1,??RF_ExecuteOrder_28+0x1C  ;; RF_Status + 24
   \   000005F6   0968               LDR      R1,[R1, #+0]
   \   000005F8   8842               CMP      R0,R1
   \   000005FA   29D1               BNE      ??RF_ExecuteOrder_43
    456                               {
    457          
    458                                   CommandToSend.Order= RW_BC_Res;
   \   000005FC   6846               MOV      R0,SP
   \   000005FE   801C               ADDS     R0,R0,#+2
   \   00000600   ........           BL       __aeabi_uread4
   \   00000604   0200               MOVS     R2,R0
   \   00000606   6946               MOV      R1,SP
   \   00000608   891C               ADDS     R1,R1,#+2
   \   0000060A   F020               MOVS     R0,#+240
   \   0000060C   1043               ORRS     R0,R0,R2
   \   0000060E   ........           BL       __aeabi_uwrite4
    459                                   CommandToSend.BC_ID1=RF_Status.RF_ID; 
   \   00000612   6846               MOV      R0,SP
   \   00000614   ........           BL       __aeabi_uread8
   \   00000618   6A46               MOV      R2,SP
   \   0000061A   1600               MOVS     R6,R2
   \   0000061C   2D4C               LDR      R4,??RF_ExecuteOrder_28+0x20  ;; 0xfff00000
   \   0000061E   0025               MOVS     R5,#+0
   \   00000620   ED43               MVNS     R5,R5            ;; #-1
   \   00000622   0440               ANDS     R4,R4,R0
   \   00000624   0D40               ANDS     R5,R5,R1
   \   00000626   2A48               LDR      R0,??RF_ExecuteOrder_28+0x1C  ;; RF_Status + 24
   \   00000628   0268               LDR      R2,[R0, #+0]
   \   0000062A   0023               MOVS     R3,#+0
   \   0000062C   2A48               LDR      R0,??RF_ExecuteOrder_28+0x24  ;; 0xfffff
   \   0000062E   0021               MOVS     R1,#+0
   \   00000630   1040               ANDS     R0,R0,R2
   \   00000632   1940               ANDS     R1,R1,R3
   \   00000634   2043               ORRS     R0,R0,R4
   \   00000636   2943               ORRS     R1,R1,R5
   \   00000638   3200               MOVS     R2,R6
   \   0000063A   ........           BL       __aeabi_uwrite8
    460                                   CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                       ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   0000063E   0621               MOVS     R1,#+6
   \   00000640   6846               MOV      R0,SP
   \   00000642   ........           BL       crc16
   \   00000646   6946               MOV      R1,SP
   \   00000648   C880               STRH     R0,[R1, #+6]
    461                                   ByteToSend =8;
   \   0000064A   0827               MOVS     R7,#+8
   \   0000064C   A5E3               B        ??RF_ExecuteOrder_13
    462                                
    463                               }else{  //jezeli zapytanie rozg³one o trzeci modu³
    464                               
    465                                       while ((FoundNode==0xFF) && (NeuronsList[Nd].NeuronID!=BC_ID2) && (Nd<(NumberNeurons-1))) Nd++; 
   \                     ??RF_ExecuteOrder_44:
   \   0000064E   641C               ADDS     R4,R4,#+1
   \                     ??RF_ExecuteOrder_43:
   \   00000650   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000652   360E               LSRS     R6,R6,#+24
   \   00000654   FF2E               CMP      R6,#+255
   \   00000656   0DD1               BNE      ??RF_ExecuteOrder_45
   \   00000658   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000065A   240E               LSRS     R4,R4,#+24
   \   0000065C   0C20               MOVS     R0,#+12
   \   0000065E   6043               MULS     R0,R4,R0
   \   00000660   1449               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   00000662   0818               ADDS     R0,R1,R0
   \   00000664   4068               LDR      R0,[R0, #+4]
   \   00000666   0399               LDR      R1,[SP, #+12]
   \   00000668   8842               CMP      R0,R1
   \   0000066A   03D0               BEQ      ??RF_ExecuteOrder_45
   \   0000066C   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000066E   240E               LSRS     R4,R4,#+24
   \   00000670   222C               CMP      R4,#+34
   \   00000672   ECD3               BCC      ??RF_ExecuteOrder_44
    466                                         
    467                                       if (NeuronsList[Nd].NeuronID==CMD.BC_ID2 ) FoundNode=Nd;     
   \                     ??RF_ExecuteOrder_45:
   \   00000674   06AA               ADD      R2,SP,#+24
   \   00000676   04B5               PUSH     {R2,LR}
   \   00000678   06A8               ADD      R0,SP,#+24
   \   0000067A   C01C               ADDS     R0,R0,#+3
   \   0000067C   ........           BL       __aeabi_uread8
   \   00000680   009A               LDR      R2,[SP, #0]
   \   00000682   02B0               ADD      SP,SP,#+8
   \   00000684   03C2               STM      R2!,{R0,R1}
   \   00000686   083A               SUBS     R2,R2,#+8
   \   00000688   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   0000068A   240E               LSRS     R4,R4,#+24
   \   0000068C   0C20               MOVS     R0,#+12
   \   0000068E   6043               MULS     R0,R4,R0
   \   00000690   0849               LDR      R1,??RF_ExecuteOrder_28  ;; NeuronsList
   \   00000692   0818               ADDS     R0,R1,R0
   \   00000694   4268               LDR      R2,[R0, #+4]
   \   00000696   06A8               ADD      R0,SP,#+24
   \   00000698   03C8               LDM      R0!,{R0,R1}
   \   0000069A   0749               LDR      R1,??RF_ExecuteOrder_28+0x4  ;; 0xfffff0
   \   0000069C   0140               ANDS     R1,R1,R0
   \   0000069E   0800               MOVS     R0,R1
   \   000006A0   0009               LSRS     R0,R0,#+4
   \   000006A2   8242               CMP      R2,R0
   \   000006A4   00D1               BNE      ??RF_ExecuteOrder_46
   \   000006A6   2600               MOVS     R6,R4
    468                              
    469                        
    470                                       if (FoundNode==0xFF)//je¿eli nie znaleziono wêz³a to dodaj
   \                     ??RF_ExecuteOrder_46:
   \   000006A8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000006AA   360E               LSRS     R6,R6,#+24
   \   000006AC   FF2E               CMP      R6,#+255
   \   000006AE   56D1               BNE      ??RF_ExecuteOrder_47
    471                                       {
    472                                           //znalezienie miejsca dla nowego wêz³a ---------------------------
    473                                           //char NewNode=NumberNeurons-1; 
    474                                           //while ((NewNode>0) && (NeuronsList[NewNode].NeuronID!=0)) {NewNode--;}
    475                  
    476                                           FoundNode=0;
   \   000006B0   0026               MOVS     R6,#+0
   \   000006B2   14E0               B        ??RF_ExecuteOrder_48
   \                     ??RF_ExecuteOrder_28:
   \   000006B4   ........           DC32     NeuronsList
   \   000006B8   F0FFFF00           DC32     0xfffff0
   \   000006BC   ........           DC32     BridgeMode
   \   000006C0   ........           DC32     RF_TaskTab
   \   000006C4   ........           DC32     TransQuality
   \   000006C8   0F0000FF           DC32     0xff00000f
   \   000006CC   ........           DC32     RF_Status + 18
   \   000006D0   ........           DC32     RF_Status + 24
   \   000006D4   0000F0FF           DC32     0xfff00000
   \   000006D8   FFFF0F00           DC32     0xfffff
    477                                           while ((NeuronsList[FoundNode].NeuronID!=0) && (FoundNode<NumberNeurons-1)) {FoundNode++;}
   \                     ??RF_ExecuteOrder_49:
   \   000006DC   761C               ADDS     R6,R6,#+1
   \                     ??RF_ExecuteOrder_48:
   \   000006DE   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000006E0   360E               LSRS     R6,R6,#+24
   \   000006E2   0C20               MOVS     R0,#+12
   \   000006E4   7043               MULS     R0,R6,R0
   \   000006E6   9949               LDR      R1,??RF_ExecuteOrder_50  ;; NeuronsList
   \   000006E8   0818               ADDS     R0,R1,R0
   \   000006EA   4068               LDR      R0,[R0, #+4]
   \   000006EC   0028               CMP      R0,#+0
   \   000006EE   03D0               BEQ      ??RF_ExecuteOrder_51
   \   000006F0   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000006F2   360E               LSRS     R6,R6,#+24
   \   000006F4   222E               CMP      R6,#+34
   \   000006F6   F1D3               BCC      ??RF_ExecuteOrder_49
    478                                           
    479                                           if ((FoundNode>=NumberNeurons-1) || (NeuronsList[FoundNode].NeuronID!=0))  //je¿eli jest miejsce na dodanie nowego wêz³a
   \                     ??RF_ExecuteOrder_51:
   \   000006F8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000006FA   360E               LSRS     R6,R6,#+24
   \   000006FC   222E               CMP      R6,#+34
   \   000006FE   08D2               BCS      ??RF_ExecuteOrder_52
   \   00000700   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000702   360E               LSRS     R6,R6,#+24
   \   00000704   0C20               MOVS     R0,#+12
   \   00000706   7043               MULS     R0,R6,R0
   \   00000708   9049               LDR      R1,??RF_ExecuteOrder_50  ;; NeuronsList
   \   0000070A   0818               ADDS     R0,R1,R0
   \   0000070C   4068               LDR      R0,[R0, #+4]
   \   0000070E   0028               CMP      R0,#+0
   \   00000710   01D0               BEQ      ??RF_ExecuteOrder_53
    480                                           {
    481                                             FoundNode=0xFF;
   \                     ??RF_ExecuteOrder_52:
   \   00000712   FF26               MOVS     R6,#+255
   \   00000714   21E0               B        ??RF_ExecuteOrder_54
    482                                           }else{
    483                                             NeuronsList[FoundNode].NeuronID=BC_ID2;
   \                     ??RF_ExecuteOrder_53:
   \   00000716   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000718   360E               LSRS     R6,R6,#+24
   \   0000071A   0C20               MOVS     R0,#+12
   \   0000071C   7043               MULS     R0,R6,R0
   \   0000071E   8B49               LDR      R1,??RF_ExecuteOrder_50  ;; NeuronsList
   \   00000720   0818               ADDS     R0,R1,R0
   \   00000722   0399               LDR      R1,[SP, #+12]
   \   00000724   4160               STR      R1,[R0, #+4]
    484                                             NeuronsList[FoundNode].Bridge=1;
   \   00000726   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000728   360E               LSRS     R6,R6,#+24
   \   0000072A   0C20               MOVS     R0,#+12
   \   0000072C   7043               MULS     R0,R6,R0
   \   0000072E   8749               LDR      R1,??RF_ExecuteOrder_50  ;; NeuronsList
   \   00000730   0818               ADDS     R0,R1,R0
   \   00000732   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000734   360E               LSRS     R6,R6,#+24
   \   00000736   0C21               MOVS     R1,#+12
   \   00000738   7143               MULS     R1,R6,R1
   \   0000073A   844A               LDR      R2,??RF_ExecuteOrder_50  ;; NeuronsList
   \   0000073C   5118               ADDS     R1,R2,R1
   \   0000073E   097A               LDRB     R1,[R1, #+8]
   \   00000740   1022               MOVS     R2,#+16
   \   00000742   0A43               ORRS     R2,R2,R1
   \   00000744   0272               STRB     R2,[R0, #+8]
    485                                             NeuronsList[FoundNode].NeuronType=NodeRF_Period;
   \   00000746   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000748   360E               LSRS     R6,R6,#+24
   \   0000074A   0C20               MOVS     R0,#+12
   \   0000074C   7043               MULS     R0,R6,R0
   \   0000074E   7F49               LDR      R1,??RF_ExecuteOrder_50  ;; NeuronsList
   \   00000750   0522               MOVS     R2,#+5
   \   00000752   0A54               STRB     R2,[R1, R0]
    486                                             BridgeMode=1; 
   \   00000754   7E48               LDR      R0,??RF_ExecuteOrder_50+0x4  ;; BridgeMode
   \   00000756   0121               MOVS     R1,#+1
   \   00000758   0170               STRB     R1,[R0, #+0]
    487                                           }
    488                                           FoundTask=0;
   \                     ??RF_ExecuteOrder_54:
   \   0000075A   0025               MOVS     R5,#+0
   \   0000075C   81E0               B        ??RF_ExecuteOrder_55
    489          
    490                                       }else{ //je¿eli wêze³ znaleziony
    491                     
    492                                          char i=0;
   \                     ??RF_ExecuteOrder_47:
   \   0000075E   0021               MOVS     R1,#+0
   \   00000760   39E0               B        ??RF_ExecuteOrder_56
    493                                          while ((i<RF_Tasks-1) && (FoundTask==0))
    494                                          {
    495                                             if ((RF_TaskTab[i].Node==FoundNode+1) && 
    496                                                 (RF_TaskTab[i].Command.ID==NeuronsList[FoundNode].NeuronID) &&
    497                                                 (RF_TaskTab[i].Command.Order==W_RegOrd) &&
    498                                                 (RF_TaskTab[i].Command.Auxi==BC_REG))
   \                     ??RF_ExecuteOrder_57:
   \   00000762   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000764   090E               LSRS     R1,R1,#+24
   \   00000766   0820               MOVS     R0,#+8
   \   00000768   4843               MULS     R0,R1,R0
   \   0000076A   7A4A               LDR      R2,??RF_ExecuteOrder_50+0x8  ;; RF_TaskTab
   \   0000076C   125C               LDRB     R2,[R2, R0]
   \   0000076E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000770   360E               LSRS     R6,R6,#+24
   \   00000772   3000               MOVS     R0,R6
   \   00000774   401C               ADDS     R0,R0,#+1
   \   00000776   8242               CMP      R2,R0
   \   00000778   2CD1               BNE      ??RF_ExecuteOrder_58
   \   0000077A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000077C   090E               LSRS     R1,R1,#+24
   \   0000077E   0820               MOVS     R0,#+8
   \   00000780   4843               MULS     R0,R1,R0
   \   00000782   744A               LDR      R2,??RF_ExecuteOrder_50+0x8  ;; RF_TaskTab
   \   00000784   1018               ADDS     R0,R2,R0
   \   00000786   4068               LDR      R0,[R0, #+4]
   \   00000788   0003               LSLS     R0,R0,#+12       ;; ZeroExtS R0,R0,#+12,#+12
   \   0000078A   000B               LSRS     R0,R0,#+12
   \   0000078C   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000078E   360E               LSRS     R6,R6,#+24
   \   00000790   0C22               MOVS     R2,#+12
   \   00000792   7243               MULS     R2,R6,R2
   \   00000794   6D4B               LDR      R3,??RF_ExecuteOrder_50  ;; NeuronsList
   \   00000796   9A18               ADDS     R2,R3,R2
   \   00000798   5268               LDR      R2,[R2, #+4]
   \   0000079A   9042               CMP      R0,R2
   \   0000079C   1AD1               BNE      ??RF_ExecuteOrder_58
   \   0000079E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000007A0   090E               LSRS     R1,R1,#+24
   \   000007A2   0820               MOVS     R0,#+8
   \   000007A4   4843               MULS     R0,R1,R0
   \   000007A6   6B4A               LDR      R2,??RF_ExecuteOrder_50+0x8  ;; RF_TaskTab
   \   000007A8   1018               ADDS     R0,R2,R0
   \   000007AA   4068               LDR      R0,[R0, #+4]
   \   000007AC   F022               MOVS     R2,#+240
   \   000007AE   1204               LSLS     R2,R2,#+16       ;; #+15728640
   \   000007B0   0240               ANDS     R2,R2,R0
   \   000007B2   1000               MOVS     R0,R2
   \   000007B4   000D               LSRS     R0,R0,#+20
   \   000007B6   0228               CMP      R0,#+2
   \   000007B8   0CD1               BNE      ??RF_ExecuteOrder_58
   \   000007BA   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000007BC   090E               LSRS     R1,R1,#+24
   \   000007BE   0820               MOVS     R0,#+8
   \   000007C0   4843               MULS     R0,R1,R0
   \   000007C2   644A               LDR      R2,??RF_ExecuteOrder_50+0x8  ;; RF_TaskTab
   \   000007C4   1018               ADDS     R0,R2,R0
   \   000007C6   4068               LDR      R0,[R0, #+4]
   \   000007C8   000E               LSRS     R0,R0,#+24
   \   000007CA   6A46               MOV      R2,SP
   \   000007CC   527A               LDRB     R2,[R2, #+9]
   \   000007CE   9042               CMP      R0,R2
   \   000007D0   00D1               BNE      ??RF_ExecuteOrder_58
    499                                                {
    500                                                  FoundTask=1;
   \   000007D2   0125               MOVS     R5,#+1
    501                                                }
    502                                            
    503                                             i++;
   \                     ??RF_ExecuteOrder_58:
   \   000007D4   491C               ADDS     R1,R1,#+1
    504                                          }
   \                     ??RF_ExecuteOrder_56:
   \   000007D6   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000007D8   090E               LSRS     R1,R1,#+24
   \   000007DA   4529               CMP      R1,#+69
   \   000007DC   03D2               BCS      ??RF_ExecuteOrder_59
   \   000007DE   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000007E0   2D0E               LSRS     R5,R5,#+24
   \   000007E2   002D               CMP      R5,#+0
   \   000007E4   BDD0               BEQ      ??RF_ExecuteOrder_57
    505                                          
    506                                          
    507                                          
    508                                          if ((FoundTask) && (TransQuality.Mensur[FoundNode]))
   \                     ??RF_ExecuteOrder_59:
   \   000007E6   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   000007E8   2D0E               LSRS     R5,R5,#+24
   \   000007EA   002D               CMP      R5,#+0
   \   000007EC   39D0               BEQ      ??RF_ExecuteOrder_55
   \   000007EE   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000007F0   360E               LSRS     R6,R6,#+24
   \   000007F2   0420               MOVS     R0,#+4
   \   000007F4   7043               MULS     R0,R6,R0
   \   000007F6   5849               LDR      R1,??RF_ExecuteOrder_50+0xC  ;; TransQuality
   \   000007F8   0818               ADDS     R0,R1,R0
   \   000007FA   C06C               LDR      R0,[R0, #+76]
   \   000007FC   0028               CMP      R0,#+0
   \   000007FE   30D0               BEQ      ??RF_ExecuteOrder_55
    509                                           {
    510                                            //odpowied ------
    511                                             CommandToSend.Order= RW_BC_Res;
   \   00000800   6846               MOV      R0,SP
   \   00000802   801C               ADDS     R0,R0,#+2
   \   00000804   ........           BL       __aeabi_uread4
   \   00000808   0200               MOVS     R2,R0
   \   0000080A   6946               MOV      R1,SP
   \   0000080C   891C               ADDS     R1,R1,#+2
   \   0000080E   F020               MOVS     R0,#+240
   \   00000810   1043               ORRS     R0,R0,R2
   \   00000812   ........           BL       __aeabi_uwrite4
    512                                             CommandToSend.BC_ID2=BC_ID2; 
   \   00000816   6846               MOV      R0,SP
   \   00000818   C01C               ADDS     R0,R0,#+3
   \   0000081A   ........           BL       __aeabi_uread8
   \   0000081E   6A46               MOV      R2,SP
   \   00000820   D21C               ADDS     R2,R2,#+3
   \   00000822   1400               MOVS     R4,R2
   \   00000824   0200               MOVS     R2,R0
   \   00000826   0B00               MOVS     R3,R1
   \   00000828   4C48               LDR      R0,??RF_ExecuteOrder_50+0x10  ;; 0xff00000f
   \   0000082A   0021               MOVS     R1,#+0
   \   0000082C   C943               MVNS     R1,R1            ;; #-1
   \   0000082E   1040               ANDS     R0,R0,R2
   \   00000830   1940               ANDS     R1,R1,R3
   \   00000832   03B4               PUSH     {R0,R1}
   \   00000834   059A               LDR      R2,[SP, #+20]
   \   00000836   D317               ASRS     R3,R2,#+31
   \   00000838   1B01               LSLS     R3,R3,#+4
   \   0000083A   100F               LSRS     R0,R2,#+28
   \   0000083C   0343               ORRS     R3,R3,R0
   \   0000083E   1201               LSLS     R2,R2,#+4
   \   00000840   4748               LDR      R0,??RF_ExecuteOrder_50+0x14  ;; 0xfffff0
   \   00000842   0021               MOVS     R1,#+0
   \   00000844   1040               ANDS     R0,R0,R2
   \   00000846   1940               ANDS     R1,R1,R3
   \   00000848   0CBC               POP      {R2,R3}
   \   0000084A   1043               ORRS     R0,R0,R2
   \   0000084C   1943               ORRS     R1,R1,R3
   \   0000084E   2200               MOVS     R2,R4
   \   00000850   ........           BL       __aeabi_uwrite8
    513                                             CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000854   0621               MOVS     R1,#+6
   \   00000856   6846               MOV      R0,SP
   \   00000858   ........           BL       crc16
   \   0000085C   6946               MOV      R1,SP
   \   0000085E   C880               STRH     R0,[R1, #+6]
    514                                             ByteToSend =8;
   \   00000860   0827               MOVS     R7,#+8
    515                                           } 
    516                                         
    517                                        
    518                                       }  
    519                                       
    520                                       
    521                                       if ((FoundTask==0) && (FoundNode!=0xFF))
   \                     ??RF_ExecuteOrder_55:
   \   00000862   2D06               LSLS     R5,R5,#+24       ;; ZeroExtS R5,R5,#+24,#+24
   \   00000864   2D0E               LSRS     R5,R5,#+24
   \   00000866   002D               CMP      R5,#+0
   \   00000868   00D0               BEQ      .+4
   \   0000086A   96E2               B        ??RF_ExecuteOrder_13
   \   0000086C   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000086E   360E               LSRS     R6,R6,#+24
   \   00000870   FF2E               CMP      R6,#+255
   \   00000872   00D1               BNE      .+4
   \   00000874   91E2               B        ??RF_ExecuteOrder_13
    522                                       if (AddRfTask(W_RegOrd, FoundNode+1, BC_REG)==0)  //je¿eli nie uda³o siê dodaæ zadania to usuñ wszystkie lady po tym wêle
                                                            ^
Warning[Pe188]: enumerated type mixed with another type
   \   00000876   6846               MOV      R0,SP
   \   00000878   427A               LDRB     R2,[R0, #+9]
   \   0000087A   3100               MOVS     R1,R6
   \   0000087C   491C               ADDS     R1,R1,#+1
   \   0000087E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000880   090E               LSRS     R1,R1,#+24
   \   00000882   0220               MOVS     R0,#+2
   \   00000884   ........           BL       AddRfTask
   \   00000888   0028               CMP      R0,#+0
   \   0000088A   00D0               BEQ      .+4
   \   0000088C   85E2               B        ??RF_ExecuteOrder_13
    523                                           {
    524                                             RemoveRfNodeAllTaska(FoundNode);
                                                    ^
Warning[Pe223]: function "RemoveRfNodeAllTaska" declared implicitly
   \   0000088E   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   00000890   360E               LSRS     R6,R6,#+24
   \   00000892   3000               MOVS     R0,R6
   \   00000894   ........           BL       RemoveRfNodeAllTaska
    525                                             NeuronsList[FoundNode].NeuronID=0;
   \   00000898   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   0000089A   360E               LSRS     R6,R6,#+24
   \   0000089C   0C20               MOVS     R0,#+12
   \   0000089E   7043               MULS     R0,R6,R0
   \   000008A0   2A49               LDR      R1,??RF_ExecuteOrder_50  ;; NeuronsList
   \   000008A2   0818               ADDS     R0,R1,R0
   \   000008A4   0021               MOVS     R1,#+0
   \   000008A6   4160               STR      R1,[R0, #+4]
    526                                             NeuronsList[FoundNode].Bridge=0;
   \   000008A8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000008AA   360E               LSRS     R6,R6,#+24
   \   000008AC   0C20               MOVS     R0,#+12
   \   000008AE   7043               MULS     R0,R6,R0
   \   000008B0   2649               LDR      R1,??RF_ExecuteOrder_50  ;; NeuronsList
   \   000008B2   0818               ADDS     R0,R1,R0
   \   000008B4   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000008B6   360E               LSRS     R6,R6,#+24
   \   000008B8   0C21               MOVS     R1,#+12
   \   000008BA   7143               MULS     R1,R6,R1
   \   000008BC   234A               LDR      R2,??RF_ExecuteOrder_50  ;; NeuronsList
   \   000008BE   5118               ADDS     R1,R2,R1
   \   000008C0   097A               LDRB     R1,[R1, #+8]
   \   000008C2   EF22               MOVS     R2,#+239
   \   000008C4   0A40               ANDS     R2,R2,R1
   \   000008C6   0272               STRB     R2,[R0, #+8]
    527                                             NeuronsList[FoundNode].NeuronType=0;
                                                                                     ^
Warning[Pe188]: enumerated type mixed with another type
   \   000008C8   3606               LSLS     R6,R6,#+24       ;; ZeroExtS R6,R6,#+24,#+24
   \   000008CA   360E               LSRS     R6,R6,#+24
   \   000008CC   0C20               MOVS     R0,#+12
   \   000008CE   4643               MULS     R6,R0,R6
   \   000008D0   1E48               LDR      R0,??RF_ExecuteOrder_50  ;; NeuronsList
   \   000008D2   0021               MOVS     R1,#+0
   \   000008D4   8155               STRB     R1,[R0, R6]
   \   000008D6   60E2               B        ??RF_ExecuteOrder_13
    528                                           }
    529                                      
    530          
    531                               
    532                              } //koniec zapytania rozg³onego o trzeci modu³
    533                            
    534                           
    535                         break;
    536                         
    537          
    538                               
    539                      case W_NewIdOrd :  //zapis noweg ID
    540                               //wykonanie ------
    541                              // NODE_ID=Command->CHID_NEW_ID; 
    542                                 
    543                               //CommandToSend.CHID_CUR_ID=RF_Status.RF_ID;
    544          
    545                               RF_Status.RF_ID=Command->CHID_NEW_ID;//skrócone id
   \                     ??RF_ExecuteOrder_5:
   \   000008D8   224D               LDR      R5,??RF_ExecuteOrder_50+0x18  ;; RF_Status + 24
   \   000008DA   2000               MOVS     R0,R4
   \   000008DC   C01C               ADDS     R0,R0,#+3
   \   000008DE   ........           BL       __aeabi_uread8
   \   000008E2   1F49               LDR      R1,??RF_ExecuteOrder_50+0x14  ;; 0xfffff0
   \   000008E4   0140               ANDS     R1,R1,R0
   \   000008E6   0800               MOVS     R0,R1
   \   000008E8   0009               LSRS     R0,R0,#+4
   \   000008EA   2860               STR      R0,[R5, #+0]
    546                               RF_Status.RF_ID_R=3000000+Command->CHID_NEW_ID;//pe³ne id
   \   000008EC   1E4D               LDR      R5,??RF_ExecuteOrder_50+0x1C  ;; RF_Status + 28
   \   000008EE   E41C               ADDS     R4,R4,#+3
   \   000008F0   2000               MOVS     R0,R4
   \   000008F2   ........           BL       __aeabi_uread8
   \   000008F6   1A49               LDR      R1,??RF_ExecuteOrder_50+0x14  ;; 0xfffff0
   \   000008F8   0140               ANDS     R1,R1,R0
   \   000008FA   0800               MOVS     R0,R1
   \   000008FC   0009               LSRS     R0,R0,#+4
   \   000008FE   1B49               LDR      R1,??RF_ExecuteOrder_50+0x20  ;; 0x2dc6c0
   \   00000900   4018               ADDS     R0,R0,R1
   \   00000902   2860               STR      R0,[R5, #+0]
    547          
    548                               
    549                               unsigned int Save = __get_interrupt_state();            
   \   00000904   ........           BL       __iar_get_interrupt_state
   \   00000908   0400               MOVS     R4,R0
    550                               __disable_interrupt();
   \   0000090A   ........           BL       __iar_disable_interrupt
    551                               FlashWrite((char*)(&(AT91C_IFLASH_MEM->NODE_ID)), (char*)&RF_Status.RF_ID_R,sizeof(RF_Status.RF_ID_R)); //(char *ptrMem, char *value, int length)
                                      ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   0000090E   0422               MOVS     R2,#+4
   \   00000910   1549               LDR      R1,??RF_ExecuteOrder_50+0x1C  ;; RF_Status + 28
   \   00000912   1748               LDR      R0,??RF_ExecuteOrder_50+0x24  ;; 0x13d95c
   \   00000914   ........           BL       FlashWrite
    552                               __set_interrupt_state(Save);
   \   00000918   2000               MOVS     R0,R4
   \   0000091A   ........           BL       __iar_set_interrupt_state
    553                               __enable_interrupt();  
   \   0000091E   ........           BL       __iar_enable_interrupt
    554                                 
    555                               
    556                               
    557                               //odpowied ------
    558                               CommandToSend.Order  = W_NewIdRes;
   \   00000922   6846               MOV      R0,SP
   \   00000924   801C               ADDS     R0,R0,#+2
   \   00000926   ........           BL       __aeabi_uread4
   \   0000092A   0200               MOVS     R2,R0
   \   0000092C   6946               MOV      R1,SP
   \   0000092E   891C               ADDS     R1,R1,#+2
   \   00000930   F020               MOVS     R0,#+240
   \   00000932   8243               BICS     R2,R2,R0
   \   00000934   D020               MOVS     R0,#+208
   \   00000936   1043               ORRS     R0,R0,R2
   \   00000938   ........           BL       __aeabi_uwrite4
    559                               CommandToSend.B8.CRC = crc16(CommandToSend.Streem,6);    
                                                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

      switch (Order)
      ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\RF_Exe.c",282  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "Save" (declared at line 549 of
                      "D:\Zeuron\Projekty\S300\S300-program v1.4 -
                      12.06.2013\Framework\RF_Exe.c")
   \   0000093C   0621               MOVS     R1,#+6
   \   0000093E   6846               MOV      R0,SP
   \   00000940   ........           BL       crc16
   \   00000944   6946               MOV      R1,SP
   \   00000946   C880               STRH     R0,[R1, #+6]
    560                               ByteToSend =8;
   \   00000948   0827               MOVS     R7,#+8
   \   0000094A   26E2               B        ??RF_ExecuteOrder_13
   \                     ??RF_ExecuteOrder_50:
   \   0000094C   ........           DC32     NeuronsList
   \   00000950   ........           DC32     BridgeMode
   \   00000954   ........           DC32     RF_TaskTab
   \   00000958   ........           DC32     TransQuality
   \   0000095C   0F0000FF           DC32     0xff00000f
   \   00000960   F0FFFF00           DC32     0xfffff0
   \   00000964   ........           DC32     RF_Status + 24
   \   00000968   ........           DC32     RF_Status + 28
   \   0000096C   C0C62D00           DC32     0x2dc6c0
   \   00000970   5CD91300           DC32     0x13d95c
    561                       break;
    562                         
    563                         
    564          
    565                         
    566                         
    567                         
    568          //***********************************************************************************************                 
    569           //Odpowiedzi rozkazów od slave do sterownika ------------------------------------------------------------   
    570          //***********************************************************************************************
    571                         
    572                         
    573                         
    574                         
    575                      case R_RegRes :  //Odczyt pojedyñczego rejestru - odp
    576                               //wykonanie ------
    577                               //CommandToSend.B8.Val  =  0xCC;                            // przepisz dane z rejestru nr: Command.Auxi  (tymczasowo  0xCC)
    578          
    579          #ifdef _LIVE_RJESTR  
    580                             LIVE_TAB[LIVE_TAB_IDX]=0xB000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((Command->B8.Val)&0xFF);
    581                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    582          #endif              
    583                        
    584                              //przypieszenie wykonania programu
    585                              if ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]!=Command->B8.Val) && (Busy_program==0))
   \                     ??RF_ExecuteOrder_8:
   \   00000974   E148               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000976   0021               MOVS     R1,#+0
   \   00000978   4056               LDRSB    R0,[R0, R1]
   \   0000097A   0821               MOVS     R1,#+8
   \   0000097C   4843               MULS     R0,R1,R0
   \   0000097E   E049               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000980   0818               ADDS     R0,R1,R0
   \   00000982   4068               LDR      R0,[R0, #+4]
   \   00000984   000E               LSRS     R0,R0,#+24
   \   00000986   0028               CMP      R0,#+0
   \   00000988   2DD1               BNE      ??RF_ExecuteOrder_61
   \   0000098A   2079               LDRB     R0,[R4, #+4]
   \   0000098C   6179               LDRB     R1,[R4, #+5]
   \   0000098E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+16
   \   00000990   090C               LSRS     R1,R1,#+16
   \   00000992   0843               ORRS     R0,R0,R1
   \   00000994   A021               MOVS     R1,#+160
   \   00000996   D94A               LDR      R2,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000998   0023               MOVS     R3,#+0
   \   0000099A   D256               LDRSB    R2,[R2, R3]
   \   0000099C   0823               MOVS     R3,#+8
   \   0000099E   5A43               MULS     R2,R3,R2
   \   000009A0   D74B               LDR      R3,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   000009A2   9A18               ADDS     R2,R3,R2
   \   000009A4   5268               LDR      R2,[R2, #+4]
   \   000009A6   120E               LSRS     R2,R2,#+24
   \   000009A8   0223               MOVS     R3,#+2
   \   000009AA   5A43               MULS     R2,R3,R2
   \   000009AC   D34B               LDR      R3,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   000009AE   0025               MOVS     R5,#+0
   \   000009B0   5B57               LDRSB    R3,[R3, R5]
   \   000009B2   0825               MOVS     R5,#+8
   \   000009B4   6B43               MULS     R3,R5,R3
   \   000009B6   D24D               LDR      R5,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   000009B8   EB5C               LDRB     R3,[R5, R3]
   \   000009BA   1625               MOVS     R5,#+22
   \   000009BC   6B43               MULS     R3,R5,R3
   \   000009BE   D14D               LDR      R5,??RF_ExecuteOrder_60+0x8  ;; MainStage
   \   000009C0   EB18               ADDS     R3,R5,R3
   \   000009C2   9A18               ADDS     R2,R3,R2
   \   000009C4   515E               LDRSH    R1,[R2, R1]
   \   000009C6   0004               LSLS     R0,R0,#+16       ;; ZeroExtS R0,R0,#+16,#+16
   \   000009C8   000C               LSRS     R0,R0,#+16
   \   000009CA   8142               CMP      R1,R0
   \   000009CC   0BD0               BEQ      ??RF_ExecuteOrder_61
   \   000009CE   CE48               LDR      R0,??RF_ExecuteOrder_60+0xC  ;; Busy_program
   \   000009D0   0078               LDRB     R0,[R0, #+0]
   \   000009D2   0028               CMP      R0,#+0
   \   000009D4   07D1               BNE      ??RF_ExecuteOrder_61
    586                              {   
    587                                g_NextTimeProgram=g_counter+1;
   \   000009D6   CD4A               LDR      R2,??RF_ExecuteOrder_60+0x10  ;; g_NextTimeProgram
   \   000009D8   CD48               LDR      R0,??RF_ExecuteOrder_60+0x14  ;; g_counter
   \   000009DA   03C8               LDM      R0!,{R0,R1}
   \   000009DC   0023               MOVS     R3,#+0
   \   000009DE   401C               ADDS     R0,R0,#+1
   \   000009E0   5941               ADCS     R1,R1,R3
   \   000009E2   03C2               STM      R2!,{R0,R1}
   \   000009E4   083A               SUBS     R2,R2,#+8
    588                                
    589                           
    590                                //sygna³ dzwiêkowy je¿eli odczytano zmianê stanu na 1
    591                            /*    
    592                                 if ((Command->B8.Val>MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType==NodeRF_Remote) && (!(AT91C_IFLASH_MEM->Config.SoundOff)))
    593                                 {
    594                                    AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
    595                                    ButtonBipCounter=g_counter+1;
    596                                 }
    597                             */
    598                                
    599                                
    600                                  #ifdef _LIVE_RJESTR    
    601                                      LIVE_TAB[LIVE_TAB_IDX]=0xFFFF;
    602                                    if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    603                                #endif   
    604                              
    605                              }
    606          
    607                              MainStage.StageI[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi]=Command->B8.Val; 
   \                     ??RF_ExecuteOrder_61:
   \   000009E6   2079               LDRB     R0,[R4, #+4]
   \   000009E8   6179               LDRB     R1,[R4, #+5]
   \   000009EA   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+16
   \   000009EC   090C               LSRS     R1,R1,#+16
   \   000009EE   0843               ORRS     R0,R0,R1
   \   000009F0   C249               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   000009F2   0022               MOVS     R2,#+0
   \   000009F4   8956               LDRSB    R1,[R1, R2]
   \   000009F6   0822               MOVS     R2,#+8
   \   000009F8   5143               MULS     R1,R2,R1
   \   000009FA   C14A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   000009FC   5118               ADDS     R1,R2,R1
   \   000009FE   4968               LDR      R1,[R1, #+4]
   \   00000A00   090E               LSRS     R1,R1,#+24
   \   00000A02   0222               MOVS     R2,#+2
   \   00000A04   5143               MULS     R1,R2,R1
   \   00000A06   BD4A               LDR      R2,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000A08   0023               MOVS     R3,#+0
   \   00000A0A   D256               LDRSB    R2,[R2, R3]
   \   00000A0C   0823               MOVS     R3,#+8
   \   00000A0E   5A43               MULS     R2,R3,R2
   \   00000A10   BB4B               LDR      R3,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000A12   9A5C               LDRB     R2,[R3, R2]
   \   00000A14   1623               MOVS     R3,#+22
   \   00000A16   5A43               MULS     R2,R3,R2
   \   00000A18   BA4B               LDR      R3,??RF_ExecuteOrder_60+0x8  ;; MainStage
   \   00000A1A   9A18               ADDS     R2,R3,R2
   \   00000A1C   5118               ADDS     R1,R2,R1
   \   00000A1E   A031               ADDS     R1,R1,#+160
   \   00000A20   0880               STRH     R0,[R1, #+0]
    608                              
    609                              
    610                              #ifdef  DIRECT_Q_MESURE
    611                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    612                               #endif
    613                              
    614                   
    615                               TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
   \   00000A22   B648               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000A24   0021               MOVS     R1,#+0
   \   00000A26   4056               LDRSB    R0,[R0, R1]
   \   00000A28   0821               MOVS     R1,#+8
   \   00000A2A   4843               MULS     R0,R1,R0
   \   00000A2C   B449               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000A2E   085C               LDRB     R0,[R1, R0]
   \   00000A30   0421               MOVS     R1,#+4
   \   00000A32   4843               MULS     R0,R1,R0
   \   00000A34   B749               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000A36   0818               ADDS     R0,R1,R0
   \   00000A38   B049               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000A3A   0022               MOVS     R2,#+0
   \   00000A3C   8956               LDRSB    R1,[R1, R2]
   \   00000A3E   0822               MOVS     R2,#+8
   \   00000A40   5143               MULS     R1,R2,R1
   \   00000A42   AF4A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000A44   515C               LDRB     R1,[R2, R1]
   \   00000A46   0422               MOVS     R2,#+4
   \   00000A48   5143               MULS     R1,R2,R1
   \   00000A4A   B24A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000A4C   5118               ADDS     R1,R2,R1
   \   00000A4E   896C               LDR      R1,[R1, #+72]
   \   00000A50   0122               MOVS     R2,#+1
   \   00000A52   B04B               LDR      R3,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000A54   1B78               LDRB     R3,[R3, #+0]
   \   00000A56   9A40               LSLS     R2,R2,R3
   \   00000A58   0A43               ORRS     R2,R2,R1
   \   00000A5A   8264               STR      R2,[R0, #+72]
    616                               TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
   \   00000A5C   A748               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000A5E   0021               MOVS     R1,#+0
   \   00000A60   4056               LDRSB    R0,[R0, R1]
   \   00000A62   0821               MOVS     R1,#+8
   \   00000A64   4843               MULS     R0,R1,R0
   \   00000A66   A649               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000A68   085C               LDRB     R0,[R1, R0]
   \   00000A6A   AA49               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000A6C   0818               ADDS     R0,R1,R0
   \   00000A6E   2530               ADDS     R0,R0,#+37
   \   00000A70   A249               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000A72   0022               MOVS     R2,#+0
   \   00000A74   8956               LDRSB    R1,[R1, R2]
   \   00000A76   0822               MOVS     R2,#+8
   \   00000A78   5143               MULS     R1,R2,R1
   \   00000A7A   A14A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000A7C   515C               LDRB     R1,[R2, R1]
   \   00000A7E   A54A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000A80   5118               ADDS     R1,R2,R1
   \   00000A82   2531               ADDS     R1,R1,#+37
   \   00000A84   0978               LDRB     R1,[R1, #+0]
   \   00000A86   0122               MOVS     R2,#+1
   \   00000A88   D34B               LDR      R3,??RF_ExecuteOrder_62  ;; TransQuality + 2
   \   00000A8A   1B78               LDRB     R3,[R3, #+0]
   \   00000A8C   9A40               LSLS     R2,R2,R3
   \   00000A8E   0A43               ORRS     R2,R2,R1
   \   00000A90   0270               STRB     R2,[R0, #+0]
    617                               TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
   \   00000A92   9A48               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000A94   0021               MOVS     R1,#+0
   \   00000A96   4056               LDRSB    R0,[R0, R1]
   \   00000A98   0821               MOVS     R1,#+8
   \   00000A9A   4843               MULS     R0,R1,R0
   \   00000A9C   9849               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000A9E   085C               LDRB     R0,[R1, R0]
   \   00000AA0   9C49               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000AA2   0818               ADDS     R0,R1,R0
   \   00000AA4   9549               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000AA6   0022               MOVS     R2,#+0
   \   00000AA8   8956               LDRSB    R1,[R1, R2]
   \   00000AAA   0822               MOVS     R2,#+8
   \   00000AAC   5143               MULS     R1,R2,R1
   \   00000AAE   944A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000AB0   515C               LDRB     R1,[R2, R1]
   \   00000AB2   984A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000AB4   5118               ADDS     R1,R2,R1
   \   00000AB6   8978               LDRB     R1,[R1, #+2]
   \   00000AB8   0122               MOVS     R2,#+1
   \   00000ABA   C84B               LDR      R3,??RF_ExecuteOrder_62+0x4  ;; TransQuality + 1
   \   00000ABC   1B78               LDRB     R3,[R3, #+0]
   \   00000ABE   9A40               LSLS     R2,R2,R3
   \   00000AC0   0A43               ORRS     R2,R2,R1
   \   00000AC2   8270               STRB     R2,[R0, #+2]
    618                                
    619                               
    620                               if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
   \   00000AC4   C648               LDR      R0,??RF_ExecuteOrder_62+0x8  ;; RF_NodeTest
   \   00000AC6   0078               LDRB     R0,[R0, #+0]
   \   00000AC8   8C49               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000ACA   0022               MOVS     R2,#+0
   \   00000ACC   8956               LDRSB    R1,[R1, R2]
   \   00000ACE   0822               MOVS     R2,#+8
   \   00000AD0   5143               MULS     R1,R2,R1
   \   00000AD2   8B4A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000AD4   515C               LDRB     R1,[R2, R1]
   \   00000AD6   8842               CMP      R0,R1
   \   00000AD8   0CD1               BNE      ??RF_ExecuteOrder_63
   \   00000ADA   C248               LDR      R0,??RF_ExecuteOrder_62+0xC  ;; RF_NodeTest + 4
   \   00000ADC   0068               LDR      R0,[R0, #+0]
   \   00000ADE   0028               CMP      R0,#+0
   \   00000AE0   08D0               BEQ      ??RF_ExecuteOrder_63
    621                                {
    622                                    RF_NodeTest.Recived++; 
   \   00000AE2   C148               LDR      R0,??RF_ExecuteOrder_62+0x10  ;; RF_NodeTest + 12
   \   00000AE4   C049               LDR      R1,??RF_ExecuteOrder_62+0x10  ;; RF_NodeTest + 12
   \   00000AE6   0968               LDR      R1,[R1, #+0]
   \   00000AE8   491C               ADDS     R1,R1,#+1
   \   00000AEA   0160               STR      R1,[R0, #+0]
    623                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
   \   00000AEC   BF48               LDR      R0,??RF_ExecuteOrder_62+0x14  ;; RF_NodeTest + 8
   \   00000AEE   BD49               LDR      R1,??RF_ExecuteOrder_62+0xC  ;; RF_NodeTest + 4
   \   00000AF0   0968               LDR      R1,[R1, #+0]
   \   00000AF2   0160               STR      R1,[R0, #+0]
    624                                }
    625                               
    626                               NextModule=1;
   \                     ??RF_ExecuteOrder_63:
   \   00000AF4   6846               MOV      R0,SP
   \   00000AF6   0121               MOVS     R1,#+1
   \   00000AF8   0172               STRB     R1,[R0, #+8]
   \   00000AFA   4EE1               B        ??RF_ExecuteOrder_13
    627                               
    628                               
    629                              // //Reakcja na rz¹danie linku
    630                              // NeuronsList[RF_TaskTab[RF_CurrentTask].Node].Link
    631                               
    632                               
    633                           break;
    634                           
    635                      case W_RegRes :  //Zapis pojedyñczego rejestru  -odp
    636                               //wykonanie ------
    637                        
    638                             
    639                                 MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]=0;
   \                     ??RF_ExecuteOrder_9:
   \   00000AFC   BC48               LDR      R0,??RF_ExecuteOrder_62+0x18  ;; 0x6eb
   \   00000AFE   7F49               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000B00   0022               MOVS     R2,#+0
   \   00000B02   8956               LDRSB    R1,[R1, R2]
   \   00000B04   0822               MOVS     R2,#+8
   \   00000B06   5143               MULS     R1,R2,R1
   \   00000B08   7D4A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000B0A   515C               LDRB     R1,[R2, R1]
   \   00000B0C   7D4A               LDR      R2,??RF_ExecuteOrder_60+0x8  ;; MainStage
   \   00000B0E   5118               ADDS     R1,R2,R1
   \   00000B10   0022               MOVS     R2,#+0
   \   00000B12   0A54               STRB     R2,[R1, R0]
    640                                 RF_SpecialTask=-1;
   \   00000B14   B748               LDR      R0,??RF_ExecuteOrder_62+0x1C  ;; RF_SpecialTask
   \   00000B16   0021               MOVS     R1,#+0
   \   00000B18   C943               MVNS     R1,R1            ;; #-1
   \   00000B1A   0170               STRB     R1,[R0, #+0]
    641                             
    642                                if (RF_TaskTab[RF_CurrentTask].Node-1<=NumberNeurons)
   \   00000B1C   7748               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000B1E   0021               MOVS     R1,#+0
   \   00000B20   4056               LDRSB    R0,[R0, R1]
   \   00000B22   0821               MOVS     R1,#+8
   \   00000B24   4843               MULS     R0,R1,R0
   \   00000B26   7649               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000B28   085C               LDRB     R0,[R1, R0]
   \   00000B2A   401E               SUBS     R0,R0,#+1
   \   00000B2C   2428               CMP      R0,#+36
   \   00000B2E   50DA               BGE      ??RF_ExecuteOrder_64
    643                                {
    644                                    TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
   \   00000B30   7248               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000B32   0021               MOVS     R1,#+0
   \   00000B34   4056               LDRSB    R0,[R0, R1]
   \   00000B36   0821               MOVS     R1,#+8
   \   00000B38   4843               MULS     R0,R1,R0
   \   00000B3A   7149               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000B3C   085C               LDRB     R0,[R1, R0]
   \   00000B3E   0421               MOVS     R1,#+4
   \   00000B40   4843               MULS     R0,R1,R0
   \   00000B42   7449               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000B44   0818               ADDS     R0,R1,R0
   \   00000B46   6D49               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000B48   0022               MOVS     R2,#+0
   \   00000B4A   8956               LDRSB    R1,[R1, R2]
   \   00000B4C   0822               MOVS     R2,#+8
   \   00000B4E   5143               MULS     R1,R2,R1
   \   00000B50   6B4A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000B52   515C               LDRB     R1,[R2, R1]
   \   00000B54   0422               MOVS     R2,#+4
   \   00000B56   5143               MULS     R1,R2,R1
   \   00000B58   6E4A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000B5A   5118               ADDS     R1,R2,R1
   \   00000B5C   896C               LDR      R1,[R1, #+72]
   \   00000B5E   0122               MOVS     R2,#+1
   \   00000B60   6C4B               LDR      R3,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000B62   1B78               LDRB     R3,[R3, #+0]
   \   00000B64   9A40               LSLS     R2,R2,R3
   \   00000B66   0A43               ORRS     R2,R2,R1
   \   00000B68   8264               STR      R2,[R0, #+72]
    645                                    TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
   \   00000B6A   6448               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000B6C   0021               MOVS     R1,#+0
   \   00000B6E   4056               LDRSB    R0,[R0, R1]
   \   00000B70   0821               MOVS     R1,#+8
   \   00000B72   4843               MULS     R0,R1,R0
   \   00000B74   6249               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000B76   085C               LDRB     R0,[R1, R0]
   \   00000B78   6649               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000B7A   0818               ADDS     R0,R1,R0
   \   00000B7C   2530               ADDS     R0,R0,#+37
   \   00000B7E   5F49               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000B80   0022               MOVS     R2,#+0
   \   00000B82   8956               LDRSB    R1,[R1, R2]
   \   00000B84   0822               MOVS     R2,#+8
   \   00000B86   5143               MULS     R1,R2,R1
   \   00000B88   5D4A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000B8A   515C               LDRB     R1,[R2, R1]
   \   00000B8C   614A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000B8E   5118               ADDS     R1,R2,R1
   \   00000B90   2531               ADDS     R1,R1,#+37
   \   00000B92   0978               LDRB     R1,[R1, #+0]
   \   00000B94   0122               MOVS     R2,#+1
   \   00000B96   904B               LDR      R3,??RF_ExecuteOrder_62  ;; TransQuality + 2
   \   00000B98   1B78               LDRB     R3,[R3, #+0]
   \   00000B9A   9A40               LSLS     R2,R2,R3
   \   00000B9C   0A43               ORRS     R2,R2,R1
   \   00000B9E   0270               STRB     R2,[R0, #+0]
    646                                    TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
   \   00000BA0   5648               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000BA2   0021               MOVS     R1,#+0
   \   00000BA4   4056               LDRSB    R0,[R0, R1]
   \   00000BA6   0821               MOVS     R1,#+8
   \   00000BA8   4843               MULS     R0,R1,R0
   \   00000BAA   5549               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000BAC   085C               LDRB     R0,[R1, R0]
   \   00000BAE   5949               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000BB0   0818               ADDS     R0,R1,R0
   \   00000BB2   5249               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000BB4   0022               MOVS     R2,#+0
   \   00000BB6   8956               LDRSB    R1,[R1, R2]
   \   00000BB8   0822               MOVS     R2,#+8
   \   00000BBA   5143               MULS     R1,R2,R1
   \   00000BBC   504A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000BBE   515C               LDRB     R1,[R2, R1]
   \   00000BC0   544A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000BC2   5118               ADDS     R1,R2,R1
   \   00000BC4   8978               LDRB     R1,[R1, #+2]
   \   00000BC6   0122               MOVS     R2,#+1
   \   00000BC8   844B               LDR      R3,??RF_ExecuteOrder_62+0x4  ;; TransQuality + 1
   \   00000BCA   1B78               LDRB     R3,[R3, #+0]
   \   00000BCC   9A40               LSLS     R2,R2,R3
   \   00000BCE   0A43               ORRS     R2,R2,R1
   \   00000BD0   8270               STRB     R2,[R0, #+2]
    647                                }
    648                                
    649                                if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
   \                     ??RF_ExecuteOrder_64:
   \   00000BD2   8348               LDR      R0,??RF_ExecuteOrder_62+0x8  ;; RF_NodeTest
   \   00000BD4   0078               LDRB     R0,[R0, #+0]
   \   00000BD6   4949               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000BD8   0022               MOVS     R2,#+0
   \   00000BDA   8956               LDRSB    R1,[R1, R2]
   \   00000BDC   0822               MOVS     R2,#+8
   \   00000BDE   5143               MULS     R1,R2,R1
   \   00000BE0   474A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000BE2   515C               LDRB     R1,[R2, R1]
   \   00000BE4   8842               CMP      R0,R1
   \   00000BE6   0CD1               BNE      ??RF_ExecuteOrder_65
   \   00000BE8   7E48               LDR      R0,??RF_ExecuteOrder_62+0xC  ;; RF_NodeTest + 4
   \   00000BEA   0068               LDR      R0,[R0, #+0]
   \   00000BEC   0028               CMP      R0,#+0
   \   00000BEE   08D0               BEQ      ??RF_ExecuteOrder_65
    650                                {
    651                                    RF_NodeTest.Recived++;
   \   00000BF0   7D48               LDR      R0,??RF_ExecuteOrder_62+0x10  ;; RF_NodeTest + 12
   \   00000BF2   7D49               LDR      R1,??RF_ExecuteOrder_62+0x10  ;; RF_NodeTest + 12
   \   00000BF4   0968               LDR      R1,[R1, #+0]
   \   00000BF6   491C               ADDS     R1,R1,#+1
   \   00000BF8   0160               STR      R1,[R0, #+0]
    652                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
   \   00000BFA   7C48               LDR      R0,??RF_ExecuteOrder_62+0x14  ;; RF_NodeTest + 8
   \   00000BFC   7949               LDR      R1,??RF_ExecuteOrder_62+0xC  ;; RF_NodeTest + 4
   \   00000BFE   0968               LDR      R1,[R1, #+0]
   \   00000C00   0160               STR      R1,[R0, #+0]
    653                                }
    654                                
    655                                    
    656                            //   g_RF_TimeOutCounter=0;
    657                               
    658                               NextModule=1;
   \                     ??RF_ExecuteOrder_65:
   \   00000C02   6846               MOV      R0,SP
   \   00000C04   0121               MOVS     R1,#+1
   \   00000C06   0172               STRB     R1,[R0, #+8]
   \   00000C08   C7E0               B        ??RF_ExecuteOrder_13
    659                            #ifdef _LIVE_RJESTR            
    660                               LIVE_TAB[LIVE_TAB_IDX]=0xD000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | 0xFF;
    661                             if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
    662                            #endif   
    663                             
    664                             
    665                             #ifdef  DIRECT_Q_MESURE
    666                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    667                               #endif
    668                             /*
    669                             if (RF_TaskTab[RF_CurrentTask].Node==6)
    670                             {
    671                                AT91C_BASE_PIOA->PIO_CODR =SpeakerPin; 
    672                                Delay(0xFFF);
    673                                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;
    674                             }
    675                             */
    676                         break;
    677                         
    678                         
    679                         
    680                         
    681                         case R_Iam :  //odpowied z ramki rozg³onej 
    682               
    683                              //Uwaga!!! ramka nie jest obs³ugiwana
    684                              
    685                              #ifdef  DIRECT_Q_MESURE
    686                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]--; 
    687                               #endif
    688                   
    689                               TransQuality.Mensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.MensurIndex;   //wpis do tablicy jakoci
   \                     ??RF_ExecuteOrder_10:
   \   00000C0A   3C48               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000C0C   0021               MOVS     R1,#+0
   \   00000C0E   4056               LDRSB    R0,[R0, R1]
   \   00000C10   0821               MOVS     R1,#+8
   \   00000C12   4843               MULS     R0,R1,R0
   \   00000C14   3A49               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000C16   085C               LDRB     R0,[R1, R0]
   \   00000C18   0421               MOVS     R1,#+4
   \   00000C1A   4843               MULS     R0,R1,R0
   \   00000C1C   3D49               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000C1E   0818               ADDS     R0,R1,R0
   \   00000C20   3649               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000C22   0022               MOVS     R2,#+0
   \   00000C24   8956               LDRSB    R1,[R1, R2]
   \   00000C26   0822               MOVS     R2,#+8
   \   00000C28   5143               MULS     R1,R2,R1
   \   00000C2A   354A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000C2C   515C               LDRB     R1,[R2, R1]
   \   00000C2E   0422               MOVS     R2,#+4
   \   00000C30   5143               MULS     R1,R2,R1
   \   00000C32   384A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000C34   5118               ADDS     R1,R2,R1
   \   00000C36   896C               LDR      R1,[R1, #+72]
   \   00000C38   0122               MOVS     R2,#+1
   \   00000C3A   364B               LDR      R3,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000C3C   1B78               LDRB     R3,[R3, #+0]
   \   00000C3E   9A40               LSLS     R2,R2,R3
   \   00000C40   0A43               ORRS     R2,R2,R1
   \   00000C42   8264               STR      R2,[R0, #+72]
    690                               TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.QuickMensurIndex;   //wpis do tablicy jakoci 
   \   00000C44   2D48               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000C46   0021               MOVS     R1,#+0
   \   00000C48   4056               LDRSB    R0,[R0, R1]
   \   00000C4A   0821               MOVS     R1,#+8
   \   00000C4C   4843               MULS     R0,R1,R0
   \   00000C4E   2C49               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000C50   085C               LDRB     R0,[R1, R0]
   \   00000C52   3049               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000C54   0818               ADDS     R0,R1,R0
   \   00000C56   2530               ADDS     R0,R0,#+37
   \   00000C58   2849               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000C5A   0022               MOVS     R2,#+0
   \   00000C5C   8956               LDRSB    R1,[R1, R2]
   \   00000C5E   0822               MOVS     R2,#+8
   \   00000C60   5143               MULS     R1,R2,R1
   \   00000C62   274A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000C64   515C               LDRB     R1,[R2, R1]
   \   00000C66   2B4A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000C68   5118               ADDS     R1,R2,R1
   \   00000C6A   2531               ADDS     R1,R1,#+37
   \   00000C6C   0978               LDRB     R1,[R1, #+0]
   \   00000C6E   0122               MOVS     R2,#+1
   \   00000C70   594B               LDR      R3,??RF_ExecuteOrder_62  ;; TransQuality + 2
   \   00000C72   1B78               LDRB     R3,[R3, #+0]
   \   00000C74   9A40               LSLS     R2,R2,R3
   \   00000C76   0A43               ORRS     R2,R2,R1
   \   00000C78   0270               STRB     R2,[R0, #+0]
    691                               TransQuality.SlowMensur[RF_TaskTab[RF_CurrentTask].Node-1] |= 0x1 << TransQuality.SlowMensurIndex;   //wpis do tablicy jakoci d³ugotrwa³ej
   \   00000C7A   2048               LDR      R0,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000C7C   0021               MOVS     R1,#+0
   \   00000C7E   4056               LDRSB    R0,[R0, R1]
   \   00000C80   0821               MOVS     R1,#+8
   \   00000C82   4843               MULS     R0,R1,R0
   \   00000C84   1E49               LDR      R1,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000C86   085C               LDRB     R0,[R1, R0]
   \   00000C88   2249               LDR      R1,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000C8A   0818               ADDS     R0,R1,R0
   \   00000C8C   1B49               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000C8E   0022               MOVS     R2,#+0
   \   00000C90   8956               LDRSB    R1,[R1, R2]
   \   00000C92   0822               MOVS     R2,#+8
   \   00000C94   5143               MULS     R1,R2,R1
   \   00000C96   1A4A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000C98   515C               LDRB     R1,[R2, R1]
   \   00000C9A   1E4A               LDR      R2,??RF_ExecuteOrder_60+0x18  ;; TransQuality
   \   00000C9C   5118               ADDS     R1,R2,R1
   \   00000C9E   8978               LDRB     R1,[R1, #+2]
   \   00000CA0   0122               MOVS     R2,#+1
   \   00000CA2   4E4B               LDR      R3,??RF_ExecuteOrder_62+0x4  ;; TransQuality + 1
   \   00000CA4   1B78               LDRB     R3,[R3, #+0]
   \   00000CA6   9A40               LSLS     R2,R2,R3
   \   00000CA8   0A43               ORRS     R2,R2,R1
   \   00000CAA   8270               STRB     R2,[R0, #+2]
    692                                
    693                               
    694                               if ((RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node) && (RF_NodeTest.Sent>0))
   \   00000CAC   4C48               LDR      R0,??RF_ExecuteOrder_62+0x8  ;; RF_NodeTest
   \   00000CAE   0078               LDRB     R0,[R0, #+0]
   \   00000CB0   1249               LDR      R1,??RF_ExecuteOrder_60  ;; RF_CurrentTask
   \   00000CB2   0022               MOVS     R2,#+0
   \   00000CB4   8956               LDRSB    R1,[R1, R2]
   \   00000CB6   0822               MOVS     R2,#+8
   \   00000CB8   5143               MULS     R1,R2,R1
   \   00000CBA   114A               LDR      R2,??RF_ExecuteOrder_60+0x4  ;; RF_TaskTab
   \   00000CBC   515C               LDRB     R1,[R2, R1]
   \   00000CBE   8842               CMP      R0,R1
   \   00000CC0   0CD1               BNE      ??RF_ExecuteOrder_66
   \   00000CC2   4848               LDR      R0,??RF_ExecuteOrder_62+0xC  ;; RF_NodeTest + 4
   \   00000CC4   0068               LDR      R0,[R0, #+0]
   \   00000CC6   0028               CMP      R0,#+0
   \   00000CC8   08D0               BEQ      ??RF_ExecuteOrder_66
    695                                {
    696                                    RF_NodeTest.Recived++; 
   \   00000CCA   4748               LDR      R0,??RF_ExecuteOrder_62+0x10  ;; RF_NodeTest + 12
   \   00000CCC   4649               LDR      R1,??RF_ExecuteOrder_62+0x10  ;; RF_NodeTest + 12
   \   00000CCE   0968               LDR      R1,[R1, #+0]
   \   00000CD0   491C               ADDS     R1,R1,#+1
   \   00000CD2   0160               STR      R1,[R0, #+0]
    697                                    RF_NodeTest.SentSyn=RF_NodeTest.Sent;
   \   00000CD4   4548               LDR      R0,??RF_ExecuteOrder_62+0x14  ;; RF_NodeTest + 8
   \   00000CD6   4349               LDR      R1,??RF_ExecuteOrder_62+0xC  ;; RF_NodeTest + 4
   \   00000CD8   0968               LDR      R1,[R1, #+0]
   \   00000CDA   0160               STR      R1,[R0, #+0]
    698                                }
    699                               
    700                               NextModule=1;
   \                     ??RF_ExecuteOrder_66:
   \   00000CDC   6846               MOV      R0,SP
   \   00000CDE   0121               MOVS     R1,#+1
   \   00000CE0   0172               STRB     R1,[R0, #+8]
   \   00000CE2   5AE0               B        ??RF_ExecuteOrder_13
    701                         break;  
    702                         
    703                         
    704                        case W_NewIdRes :  //odpowied/potwierdzenie nadania nowego ID
    705                               
    706                              TransQuality.Mensur[0]=0;
   \                     ??RF_ExecuteOrder_11:
   \   00000CE4   4448               LDR      R0,??RF_ExecuteOrder_62+0x20  ;; TransQuality + 76
   \   00000CE6   0021               MOVS     R1,#+0
   \   00000CE8   0160               STR      R1,[R0, #+0]
    707                              TransQuality.QuickMensur[0]=0;
   \   00000CEA   4448               LDR      R0,??RF_ExecuteOrder_62+0x24  ;; TransQuality + 38
   \   00000CEC   0021               MOVS     R1,#+0
   \   00000CEE   0170               STRB     R1,[R0, #+0]
    708                              TransQuality.SlowMensur[0]=0; 
   \   00000CF0   4348               LDR      R0,??RF_ExecuteOrder_62+0x28  ;; TransQuality + 3
   \   00000CF2   0021               MOVS     R1,#+0
   \   00000CF4   0170               STRB     R1,[R0, #+0]
    709                               //wyczyæ zadania
    710                               for (char i=0; i<RF_Tasks-1; i++) 
   \   00000CF6   0024               MOVS     R4,#+0
   \   00000CF8   22E0               B        ??RF_ExecuteOrder_67
   \   00000CFA   C046               Nop      
   \                     ??RF_ExecuteOrder_60:
   \   00000CFC   ........           DC32     RF_CurrentTask
   \   00000D00   ........           DC32     RF_TaskTab
   \   00000D04   ........           DC32     MainStage
   \   00000D08   ........           DC32     Busy_program
   \   00000D0C   ........           DC32     g_NextTimeProgram
   \   00000D10   ........           DC32     g_counter
   \   00000D14   ........           DC32     TransQuality
    711                               {
    712                                  if(RF_TaskTab[i].Command.Order==W_NewIdOrd)
   \                     ??RF_ExecuteOrder_68:
   \   00000D18   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000D1A   240E               LSRS     R4,R4,#+24
   \   00000D1C   0820               MOVS     R0,#+8
   \   00000D1E   6043               MULS     R0,R4,R0
   \   00000D20   3849               LDR      R1,??RF_ExecuteOrder_62+0x2C  ;; RF_TaskTab
   \   00000D22   0818               ADDS     R0,R1,R0
   \   00000D24   4068               LDR      R0,[R0, #+4]
   \   00000D26   F021               MOVS     R1,#+240
   \   00000D28   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   00000D2A   0140               ANDS     R1,R1,R0
   \   00000D2C   0800               MOVS     R0,R1
   \   00000D2E   000D               LSRS     R0,R0,#+20
   \   00000D30   0528               CMP      R0,#+5
   \   00000D32   04D1               BNE      ??RF_ExecuteOrder_69
    713                                  {
    714                                   RemoveRfTask(i);  
   \   00000D34   2000               MOVS     R0,R4
   \   00000D36   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000D38   000E               LSRS     R0,R0,#+24
   \   00000D3A   ........           BL       RemoveRfTask
    715                                  }
    716                               }
   \                     ??RF_ExecuteOrder_69:
   \   00000D3E   641C               ADDS     R4,R4,#+1
   \                     ??RF_ExecuteOrder_67:
   \   00000D40   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   00000D42   240E               LSRS     R4,R4,#+24
   \   00000D44   452C               CMP      R4,#+69
   \   00000D46   E7D3               BCC      ??RF_ExecuteOrder_68
    717                         
    718                               
    719                               NextModule=1;
   \   00000D48   6846               MOV      R0,SP
   \   00000D4A   0121               MOVS     R1,#+1
   \   00000D4C   0172               STRB     R1,[R0, #+8]
   \   00000D4E   24E0               B        ??RF_ExecuteOrder_13
    720                         break;  
    721          
    722                         
    723              
    724                         case RW_BC_Res :  //Odpowied na ramkê rozg³on¹ "Kto ma wêze³"
    725                        
    726                                NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].IndirectCon=1;
   \                     ??RF_ExecuteOrder_12:
   \   00000D50   2D48               LDR      R0,??RF_ExecuteOrder_62+0x30  ;; RF_CurrentTask
   \   00000D52   0021               MOVS     R1,#+0
   \   00000D54   4056               LDRSB    R0,[R0, R1]
   \   00000D56   0821               MOVS     R1,#+8
   \   00000D58   4843               MULS     R0,R1,R0
   \   00000D5A   2A49               LDR      R1,??RF_ExecuteOrder_62+0x2C  ;; RF_TaskTab
   \   00000D5C   085C               LDRB     R0,[R1, R0]
   \   00000D5E   0C21               MOVS     R1,#+12
   \   00000D60   4843               MULS     R0,R1,R0
   \   00000D62   2A49               LDR      R1,??RF_ExecuteOrder_62+0x34  ;; NeuronsList
   \   00000D64   0818               ADDS     R0,R1,R0
   \   00000D66   001F               SUBS     R0,R0,#+4
   \   00000D68   2749               LDR      R1,??RF_ExecuteOrder_62+0x30  ;; RF_CurrentTask
   \   00000D6A   0022               MOVS     R2,#+0
   \   00000D6C   8956               LDRSB    R1,[R1, R2]
   \   00000D6E   0822               MOVS     R2,#+8
   \   00000D70   5143               MULS     R1,R2,R1
   \   00000D72   244A               LDR      R2,??RF_ExecuteOrder_62+0x2C  ;; RF_TaskTab
   \   00000D74   515C               LDRB     R1,[R2, R1]
   \   00000D76   0C22               MOVS     R2,#+12
   \   00000D78   5143               MULS     R1,R2,R1
   \   00000D7A   244A               LDR      R2,??RF_ExecuteOrder_62+0x34  ;; NeuronsList
   \   00000D7C   5118               ADDS     R1,R2,R1
   \   00000D7E   091F               SUBS     R1,R1,#+4
   \   00000D80   0978               LDRB     R1,[R1, #+0]
   \   00000D82   0822               MOVS     R2,#+8
   \   00000D84   0A43               ORRS     R2,R2,R1
   \   00000D86   0270               STRB     R2,[R0, #+0]
    727                                AddRfTask_RemoveSearchNodeTask(RF_TaskTab[RF_CurrentTask].Node);  
   \   00000D88   1F48               LDR      R0,??RF_ExecuteOrder_62+0x30  ;; RF_CurrentTask
   \   00000D8A   0021               MOVS     R1,#+0
   \   00000D8C   4056               LDRSB    R0,[R0, R1]
   \   00000D8E   0821               MOVS     R1,#+8
   \   00000D90   4843               MULS     R0,R1,R0
   \   00000D92   1C49               LDR      R1,??RF_ExecuteOrder_62+0x2C  ;; RF_TaskTab
   \   00000D94   085C               LDRB     R0,[R1, R0]
   \   00000D96   ........           BL       AddRfTask_RemoveSearchNodeTask
    728                               
    729                                
    730                         break;
    731                         
    732                         
    733                         
    734                         
    735                         
    736                         
    737                
    738              }
    739              
    740                       
    741                      //Wylij odpowied
    742                      if (ByteToSend)
   \                     ??RF_ExecuteOrder_13:
   \   00000D9A   3F06               LSLS     R7,R7,#+24       ;; ZeroExtS R7,R7,#+24,#+24
   \   00000D9C   3F0E               LSRS     R7,R7,#+24
   \   00000D9E   002F               CMP      R7,#+0
   \   00000DA0   0DD0               BEQ      ??RF_ExecuteOrder_70
    743                      {
    744                          RF_Status.EnableTX();
   \   00000DA2   1B48               LDR      R0,??RF_ExecuteOrder_62+0x38  ;; RF_Status + 36
   \   00000DA4   0068               LDR      R0,[R0, #+0]
   \   00000DA6   ........           BL       __iar_via_R0
    745                           RF_SendData(CommandToSend.Streem, ByteToSend);
                                              ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

     char* pNODE_ID=(char*)&NODE_ID;
           ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\RF_Exe.c",271  Warning[Pe177]: 
          variable "pNODE_ID" was declared but never referenced
   \   00000DAA   3900               MOVS     R1,R7
   \   00000DAC   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000DAE   090E               LSRS     R1,R1,#+24
   \   00000DB0   6846               MOV      R0,SP
   \   00000DB2   ........           BL       RF_SendData
    746                          RF_Status.EnableRX();
   \   00000DB6   1748               LDR      R0,??RF_ExecuteOrder_62+0x3C  ;; RF_Status + 40
   \   00000DB8   0068               LDR      R0,[R0, #+0]
   \   00000DBA   ........           BL       __iar_via_R0
    747                         
    748                      }           
    749             
    750                      //odpytaj kolejny modu³
    751                      if (NextModule)
   \                     ??RF_ExecuteOrder_70:
   \   00000DBE   6846               MOV      R0,SP
   \   00000DC0   007A               LDRB     R0,[R0, #+8]
   \   00000DC2   0028               CMP      R0,#+0
   \   00000DC4   04D0               BEQ      ??RF_ExecuteOrder_71
    752                      {
    753                         g_RF_TimeOutCounter=RF_TimeOut; 
   \   00000DC6   1448               LDR      R0,??RF_ExecuteOrder_62+0x40  ;; g_RF_TimeOutCounter
   \   00000DC8   0921               MOVS     R1,#+9
   \   00000DCA   0170               STRB     R1,[R0, #+0]
    754                         RF_MasterExecut();
   \   00000DCC   ........           BL       RF_MasterExecut
    755                        /*
    756                        if (RF_Status.MasterMode)
    757                          {
    758                            //if ((!SlaveMode) && (g_Stop_Program==0))
    759                            if (g_RF_TimeOutCounter>0)
    760                            {
    761                            }else{
    762                               CyklPerSekCount++;
    763                               g_RF_TimeOutCounter=RF_TimeOut; 
    764                               RF_MasterExecut();
    765                        
    766                            }
    767                          }
    768                        */
    769                      }
    770            
    771            
    772          }
   \                     ??RF_ExecuteOrder_71:
   \   00000DD0   0BB0               ADD      SP,SP,#+44
   \   00000DD2   F0BC               POP      {R4-R7}
   \   00000DD4   01BC               POP      {R0}
   \   00000DD6   0047               BX       R0               ;; return
   \                     ??RF_ExecuteOrder_62:
   \   00000DD8   ........           DC32     TransQuality + 2
   \   00000DDC   ........           DC32     TransQuality + 1
   \   00000DE0   ........           DC32     RF_NodeTest
   \   00000DE4   ........           DC32     RF_NodeTest + 4
   \   00000DE8   ........           DC32     RF_NodeTest + 12
   \   00000DEC   ........           DC32     RF_NodeTest + 8
   \   00000DF0   EB060000           DC32     0x6eb
   \   00000DF4   ........           DC32     RF_SpecialTask
   \   00000DF8   ........           DC32     TransQuality + 76
   \   00000DFC   ........           DC32     TransQuality + 38
   \   00000E00   ........           DC32     TransQuality + 3
   \   00000E04   ........           DC32     RF_TaskTab
   \   00000E08   ........           DC32     RF_CurrentTask
   \   00000E0C   ........           DC32     NeuronsList
   \   00000E10   ........           DC32     RF_Status + 36
   \   00000E14   ........           DC32     RF_Status + 40
   \   00000E18   ........           DC32     g_RF_TimeOutCounter
    773          //_____________________________________________________________________________
    774          
    775          
    776          
    777          
    778          
    779          
    780          
    781          
    782          
    783          //-----------------------------------------------------------------------------
    784          //!  Nazwa funkcji :    RF_SendData
    785          //!  Funkcja wysy³a dane przez RF12
    786          //-----------------------------------------------------------------------------
    787          //  *data - wska¿nik na pierwszy bajt
    788          //  *size - iloæ bajtów do wys³ania
    789          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    790          void RF_SendData(unsigned char *data, char size)
    791          {
   \                     RF_SendData:
   \   00000000   01B5               PUSH     {R0,LR}
    792              RF_SendFarm(data, size);
   \   00000002   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000004   090E               LSRS     R1,R1,#+24
   \   00000006   ........           BL       RF_SendFarm
    793          }
   \   0000000A   01B0               ADD      SP,SP,#+4
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
    794          //------------------------------------------------------------------------------
    795          
    796          extern  AT91_SPI_Buff               SPI_Buff;
    797          
    798          
    799          

   \                                 In section Debug.txt, align 4, keep-with-next
    800          char IncCurentRfTask(void)
    801          {
   \                     IncCurentRfTask:
   \   00000000   01B5               PUSH     {R0,LR}
    802              static char Switch=0;
    803              static char WaitToSwithToSlave=0;
    804          
    805              char RF_CurrentTaskTMP=RF_CurrentTask;
   \   00000002   3A48               LDR      R0,??IncCurentRfTask_0  ;; RF_CurrentTask
   \   00000004   0178               LDRB     R1,[R0, #+0]
    806            
    807              char Fuss=RF_Tasks+10; 
   \   00000006   5020               MOVS     R0,#+80
    808              do{ 
    809                      if (Fuss==0) break;
   \                     ??IncCurentRfTask_1:
   \   00000008   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000000A   000E               LSRS     R0,R0,#+24
   \   0000000C   0028               CMP      R0,#+0
   \   0000000E   5DD0               BEQ      ??IncCurentRfTask_2
    810                      RF_CurrentTaskTMP++;  
   \   00000010   491C               ADDS     R1,R1,#+1
    811                      if ((RF_TaskTab[RF_CurrentTaskTMP].Node==0) || (RF_CurrentTaskTMP>=RF_Tasks))  
   \   00000012   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000014   090E               LSRS     R1,R1,#+24
   \   00000016   0822               MOVS     R2,#+8
   \   00000018   4A43               MULS     R2,R1,R2
   \   0000001A   354B               LDR      R3,??IncCurentRfTask_0+0x4  ;; RF_TaskTab
   \   0000001C   9A5C               LDRB     R2,[R3, R2]
   \   0000001E   002A               CMP      R2,#+0
   \   00000020   03D0               BEQ      ??IncCurentRfTask_3
   \   00000022   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000024   090E               LSRS     R1,R1,#+24
   \   00000026   4629               CMP      R1,#+70
   \   00000028   25D3               BCC      ??IncCurentRfTask_4
    812                      {
    813                        RF_CurrentTaskTMP=0; 
   \                     ??IncCurentRfTask_3:
   \   0000002A   0021               MOVS     R1,#+0
    814                        
    815                        if ((AT91C_IFLASH_MEM->Config.SlaveMode) && (Switch) && (RF_Status.TimeInMasterMode>200))  //zagwarantowane minimum 110ms w trybie master
   \   0000002C   314A               LDR      R2,??IncCurentRfTask_0+0x8  ;; 0x13d7e8
   \   0000002E   1278               LDRB     R2,[R2, #+0]
   \   00000030   1206               LSLS     R2,R2,#+24       ;; ZeroExtS R2,R2,#+24,#+24
   \   00000032   120E               LSRS     R2,R2,#+24
   \   00000034   002A               CMP      R2,#+0
   \   00000036   1BD0               BEQ      ??IncCurentRfTask_5
   \   00000038   2F4A               LDR      R2,??IncCurentRfTask_0+0xC  ;; ??Switch
   \   0000003A   1278               LDRB     R2,[R2, #+0]
   \   0000003C   002A               CMP      R2,#+0
   \   0000003E   17D0               BEQ      ??IncCurentRfTask_5
   \   00000040   2E4A               LDR      R2,??IncCurentRfTask_0+0x10  ;; RF_Status + 20
   \   00000042   1288               LDRH     R2,[R2, #+0]
   \   00000044   C92A               CMP      R2,#+201
   \   00000046   13D3               BCC      ??IncCurentRfTask_5
    816                        {
    817                          if (WaitToSwithToSlave<2)
   \   00000048   2D48               LDR      R0,??IncCurentRfTask_0+0x14  ;; ??WaitToSwithToSlave
   \   0000004A   0078               LDRB     R0,[R0, #+0]
   \   0000004C   0228               CMP      R0,#+2
   \   0000004E   05D2               BCS      ??IncCurentRfTask_6
    818                          {
    819                            WaitToSwithToSlave++; 
   \   00000050   2B48               LDR      R0,??IncCurentRfTask_0+0x14  ;; ??WaitToSwithToSlave
   \   00000052   2B49               LDR      R1,??IncCurentRfTask_0+0x14  ;; ??WaitToSwithToSlave
   \   00000054   0978               LDRB     R1,[R1, #+0]
   \   00000056   491C               ADDS     R1,R1,#+1
   \   00000058   0170               STRB     R1,[R0, #+0]
   \   0000005A   07E0               B        ??IncCurentRfTask_7
    820                          }
    821                          else
    822                          {
    823                            WaitToSwithToSlave=0;
   \                     ??IncCurentRfTask_6:
   \   0000005C   2848               LDR      R0,??IncCurentRfTask_0+0x14  ;; ??WaitToSwithToSlave
   \   0000005E   0021               MOVS     R1,#+0
   \   00000060   0170               STRB     R1,[R0, #+0]
    824                            Switch=0;
   \   00000062   2548               LDR      R0,??IncCurentRfTask_0+0xC  ;; ??Switch
   \   00000064   0021               MOVS     R1,#+0
   \   00000066   0170               STRB     R1,[R0, #+0]
    825                            SwitchToSlave();
   \   00000068   ........           BL       SwitchToSlave
    826                          }
    827                          return 0;
   \                     ??IncCurentRfTask_7:
   \   0000006C   0020               MOVS     R0,#+0
   \   0000006E   39E0               B        ??IncCurentRfTask_8
    828                        }else{
    829                          Switch=1;
   \                     ??IncCurentRfTask_5:
   \   00000070   214A               LDR      R2,??IncCurentRfTask_0+0xC  ;; ??Switch
   \   00000072   0123               MOVS     R3,#+1
   \   00000074   1370               STRB     R3,[R2, #+0]
    830                          
    831                        }
    832                        
    833                      }
    834                      Fuss--;
   \                     ??IncCurentRfTask_4:
   \   00000076   401E               SUBS     R0,R0,#+1
    835                 }while ((NeuronsList[RF_TaskTab[RF_CurrentTaskTMP].Node-1].ReadSuspend) && ((RF_TaskTab[RF_CurrentTaskTMP].Command.Order!=R_BC_Order) && (RF_TaskTab[RF_CurrentTaskTMP].Command.Order!=W_BC_Order)));
   \   00000078   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000007A   090E               LSRS     R1,R1,#+24
   \   0000007C   0822               MOVS     R2,#+8
   \   0000007E   4A43               MULS     R2,R1,R2
   \   00000080   1B4B               LDR      R3,??IncCurentRfTask_0+0x4  ;; RF_TaskTab
   \   00000082   9A5C               LDRB     R2,[R3, R2]
   \   00000084   0C23               MOVS     R3,#+12
   \   00000086   5A43               MULS     R2,R3,R2
   \   00000088   1E4B               LDR      R3,??IncCurentRfTask_0+0x18  ;; NeuronsList
   \   0000008A   9A18               ADDS     R2,R3,R2
   \   0000008C   121F               SUBS     R2,R2,#+4
   \   0000008E   1278               LDRB     R2,[R2, #+0]
   \   00000090   5207               LSLS     R2,R2,#+29
   \   00000092   1BD5               BPL      ??IncCurentRfTask_2
   \   00000094   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000096   090E               LSRS     R1,R1,#+24
   \   00000098   0822               MOVS     R2,#+8
   \   0000009A   4A43               MULS     R2,R1,R2
   \   0000009C   144B               LDR      R3,??IncCurentRfTask_0+0x4  ;; RF_TaskTab
   \   0000009E   9A18               ADDS     R2,R3,R2
   \   000000A0   5268               LDR      R2,[R2, #+4]
   \   000000A2   F023               MOVS     R3,#+240
   \   000000A4   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000A6   1340               ANDS     R3,R3,R2
   \   000000A8   1A00               MOVS     R2,R3
   \   000000AA   120D               LSRS     R2,R2,#+20
   \   000000AC   072A               CMP      R2,#+7
   \   000000AE   0DD0               BEQ      ??IncCurentRfTask_2
   \   000000B0   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000B2   090E               LSRS     R1,R1,#+24
   \   000000B4   0822               MOVS     R2,#+8
   \   000000B6   4A43               MULS     R2,R1,R2
   \   000000B8   0D4B               LDR      R3,??IncCurentRfTask_0+0x4  ;; RF_TaskTab
   \   000000BA   9A18               ADDS     R2,R3,R2
   \   000000BC   5268               LDR      R2,[R2, #+4]
   \   000000BE   F023               MOVS     R3,#+240
   \   000000C0   1B04               LSLS     R3,R3,#+16       ;; #+15728640
   \   000000C2   1340               ANDS     R3,R3,R2
   \   000000C4   1A00               MOVS     R2,R3
   \   000000C6   120D               LSRS     R2,R2,#+20
   \   000000C8   082A               CMP      R2,#+8
   \   000000CA   9DD1               BNE      ??IncCurentRfTask_1
    836                  
    837              if (RF_CurrentTaskTMP==0) CyklPerSekCount++;
   \                     ??IncCurentRfTask_2:
   \   000000CC   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   000000CE   090E               LSRS     R1,R1,#+24
   \   000000D0   0029               CMP      R1,#+0
   \   000000D2   04D1               BNE      ??IncCurentRfTask_9
   \   000000D4   0C48               LDR      R0,??IncCurentRfTask_0+0x1C  ;; CyklPerSekCount
   \   000000D6   0C4A               LDR      R2,??IncCurentRfTask_0+0x1C  ;; CyklPerSekCount
   \   000000D8   1268               LDR      R2,[R2, #+0]
   \   000000DA   521C               ADDS     R2,R2,#+1
   \   000000DC   0260               STR      R2,[R0, #+0]
    838              RF_CurrentTask=RF_CurrentTaskTMP;
   \                     ??IncCurentRfTask_9:
   \   000000DE   0348               LDR      R0,??IncCurentRfTask_0  ;; RF_CurrentTask
   \   000000E0   0170               STRB     R1,[R0, #+0]
    839              return 1;
   \   000000E2   0120               MOVS     R0,#+1
   \                     ??IncCurentRfTask_8:
   \   000000E4   01B0               ADD      SP,SP,#+4
   \   000000E6   02BC               POP      {R1}
   \   000000E8   0847               BX       R1               ;; return
   \   000000EA   C046               Nop      
   \                     ??IncCurentRfTask_0:
   \   000000EC   ........           DC32     RF_CurrentTask
   \   000000F0   ........           DC32     RF_TaskTab
   \   000000F4   E8D71300           DC32     0x13d7e8
   \   000000F8   ........           DC32     ??Switch
   \   000000FC   ........           DC32     RF_Status + 20
   \   00000100   ........           DC32     ??WaitToSwithToSlave
   \   00000104   ........           DC32     NeuronsList
   \   00000108   ........           DC32     CyklPerSekCount
    840                
    841          
    842          }

   \                                 In section .bss, align 1
   \                     ??Switch:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     ??WaitToSwithToSlave:
   \   00000000                      DS8 1
    843          
    844          #define SpeedExePeriods 0
    845          
    846          
    847          //-----------------------------------------------------------------------------
    848          //!  Nazwa funkcji :    RF_MasterExecut
    849          //!  Funkcja wysy³a dane wed³ug tablicy rozkazów RF_TaskTab
    850          //-----------------------------------------------------------------------------
    851          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    852          void RF_MasterExecut(void)
    853          {
   \                     RF_MasterExecut:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
    854          
    855            
    856            char ByteToSend=0;
   \   00000002   6846               MOV      R0,SP
   \   00000004   0021               MOVS     R1,#+0
   \   00000006   0172               STRB     R1,[R0, #+8]
    857            //char TaskNr;
    858            
    859            unsigned int SendOrder=0;    //flaga wys³ania
   \   00000008   0024               MOVS     R4,#+0
    860           
    861            if (SlaveMode) return;
   \   0000000A   A348               LDR      R0,??RF_MasterExecut_0  ;; SlaveMode
   \   0000000C   0078               LDRB     R0,[R0, #+0]
   \   0000000E   0028               CMP      R0,#+0
   \   00000010   00D0               BEQ      .+4
   \   00000012   55E3               B        ??RF_MasterExecut_1
    862          
    863          
    864            
    865            //wyszukanie rozkazów priorytetowych
    866            char Nd=0;
   \   00000014   0020               MOVS     R0,#+0
    867            unsigned char Tn=0;
   \   00000016   0021               MOVS     R1,#+0
    868            static signed char  RF_RememberTask=-1;
    869            
    870            
    871            signed char TMP_RF_SpecialTask=-1;
   \   00000018   0022               MOVS     R2,#+0
   \   0000001A   D243               MVNS     R2,R2            ;; #-1
   \   0000001C   44E0               B        ??RF_MasterExecut_2
    872            
    873            while ((Nd<NumberNeurons) && (TMP_RF_SpecialTask==-1))
    874            {
    875                if ((MainStage.SendStageChange[Nd]>=ChangeStageFlag-SpeedExePeriods))    
    876                {
    877                  
    878                  Tn=0;
    879                  while (((RF_TaskTab[Tn].Node!=0) && (Tn<RF_Tasks-1) && (TMP_RF_SpecialTask==-1)))
    880                  {
    881                     if ((RF_TaskTab[Tn].Command.Order==W_RegOrd) &&  (RF_TaskTab[Tn].Command.Auxi==0) && (RF_TaskTab[Tn].Node==Nd)) 
   \                     ??RF_MasterExecut_3:
   \   0000001E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000020   090E               LSRS     R1,R1,#+24
   \   00000022   0823               MOVS     R3,#+8
   \   00000024   4B43               MULS     R3,R1,R3
   \   00000026   9D4D               LDR      R5,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   00000028   EB18               ADDS     R3,R5,R3
   \   0000002A   5B68               LDR      R3,[R3, #+4]
   \   0000002C   F025               MOVS     R5,#+240
   \   0000002E   2D04               LSLS     R5,R5,#+16       ;; #+15728640
   \   00000030   1D40               ANDS     R5,R5,R3
   \   00000032   2B00               MOVS     R3,R5
   \   00000034   1B0D               LSRS     R3,R3,#+20
   \   00000036   022B               CMP      R3,#+2
   \   00000038   22D1               BNE      ??RF_MasterExecut_4
   \   0000003A   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   0000003C   090E               LSRS     R1,R1,#+24
   \   0000003E   0823               MOVS     R3,#+8
   \   00000040   4B43               MULS     R3,R1,R3
   \   00000042   964D               LDR      R5,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   00000044   EB18               ADDS     R3,R5,R3
   \   00000046   5B68               LDR      R3,[R3, #+4]
   \   00000048   1B0E               LSRS     R3,R3,#+24
   \   0000004A   002B               CMP      R3,#+0
   \   0000004C   18D1               BNE      ??RF_MasterExecut_4
   \   0000004E   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000050   090E               LSRS     R1,R1,#+24
   \   00000052   0823               MOVS     R3,#+8
   \   00000054   4B43               MULS     R3,R1,R3
   \   00000056   914D               LDR      R5,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   00000058   EB5C               LDRB     R3,[R5, R3]
   \   0000005A   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000005C   000E               LSRS     R0,R0,#+24
   \   0000005E   8342               CMP      R3,R0
   \   00000060   0ED1               BNE      ??RF_MasterExecut_4
    882                     {
    883                         TMP_RF_SpecialTask=Tn;
   \   00000062   0A00               MOVS     R2,R1
    884                         SendOrder=1;
   \   00000064   0124               MOVS     R4,#+1
    885                         MainStage.SendStageChange[Nd]--;
   \   00000066   8E4B               LDR      R3,??RF_MasterExecut_0+0x8  ;; 0x6eb
   \   00000068   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000006A   000E               LSRS     R0,R0,#+24
   \   0000006C   8D4D               LDR      R5,??RF_MasterExecut_0+0xC  ;; MainStage
   \   0000006E   2E18               ADDS     R6,R5,R0
   \   00000070   8B4D               LDR      R5,??RF_MasterExecut_0+0x8  ;; 0x6eb
   \   00000072   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000074   000E               LSRS     R0,R0,#+24
   \   00000076   8B4F               LDR      R7,??RF_MasterExecut_0+0xC  ;; MainStage
   \   00000078   3F18               ADDS     R7,R7,R0
   \   0000007A   7D5D               LDRB     R5,[R7, R5]
   \   0000007C   6D1E               SUBS     R5,R5,#+1
   \   0000007E   F554               STRB     R5,[R6, R3]
    886                     }
    887                     Tn++;
   \                     ??RF_MasterExecut_4:
   \   00000080   491C               ADDS     R1,R1,#+1
    888                  }
   \                     ??RF_MasterExecut_5:
   \   00000082   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000084   090E               LSRS     R1,R1,#+24
   \   00000086   0823               MOVS     R3,#+8
   \   00000088   4B43               MULS     R3,R1,R3
   \   0000008A   844D               LDR      R5,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   0000008C   EB5C               LDRB     R3,[R5, R3]
   \   0000008E   002B               CMP      R3,#+0
   \   00000090   09D0               BEQ      ??RF_MasterExecut_6
   \   00000092   0906               LSLS     R1,R1,#+24       ;; ZeroExtS R1,R1,#+24,#+24
   \   00000094   090E               LSRS     R1,R1,#+24
   \   00000096   4529               CMP      R1,#+69
   \   00000098   05D2               BCS      ??RF_MasterExecut_6
   \   0000009A   0023               MOVS     R3,#+0
   \   0000009C   DB43               MVNS     R3,R3            ;; #-1
   \   0000009E   1206               LSLS     R2,R2,#+24       ;; SignExtS R2,R2,#+24,#+24
   \   000000A0   1216               ASRS     R2,R2,#+24
   \   000000A2   9A42               CMP      R2,R3
   \   000000A4   BBD0               BEQ      ??RF_MasterExecut_3
    889                  
    890                }
    891                
    892                
    893                Nd++;  
   \                     ??RF_MasterExecut_6:
   \   000000A6   401C               ADDS     R0,R0,#+1
   \                     ??RF_MasterExecut_2:
   \   000000A8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000AA   000E               LSRS     R0,R0,#+24
   \   000000AC   2328               CMP      R0,#+35
   \   000000AE   11D2               BCS      ??RF_MasterExecut_7
   \   000000B0   0021               MOVS     R1,#+0
   \   000000B2   C943               MVNS     R1,R1            ;; #-1
   \   000000B4   1206               LSLS     R2,R2,#+24       ;; SignExtS R2,R2,#+24,#+24
   \   000000B6   1216               ASRS     R2,R2,#+24
   \   000000B8   8A42               CMP      R2,R1
   \   000000BA   0BD1               BNE      ??RF_MasterExecut_7
   \   000000BC   7849               LDR      R1,??RF_MasterExecut_0+0x8  ;; 0x6eb
   \   000000BE   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000C0   000E               LSRS     R0,R0,#+24
   \   000000C2   784B               LDR      R3,??RF_MasterExecut_0+0xC  ;; MainStage
   \   000000C4   1B18               ADDS     R3,R3,R0
   \   000000C6   595C               LDRB     R1,[R3, R1]
   \   000000C8   774B               LDR      R3,??RF_MasterExecut_0+0x10  ;; ChangeStageFlag
   \   000000CA   1B78               LDRB     R3,[R3, #+0]
   \   000000CC   9942               CMP      R1,R3
   \   000000CE   EAD3               BCC      ??RF_MasterExecut_6
   \   000000D0   0021               MOVS     R1,#+0
   \   000000D2   D6E7               B        ??RF_MasterExecut_5
    894            }  
    895            
    896            RF_SpecialTask=TMP_RF_SpecialTask;
   \                     ??RF_MasterExecut_7:
   \   000000D4   7548               LDR      R0,??RF_MasterExecut_0+0x14  ;; RF_SpecialTask
   \   000000D6   0270               STRB     R2,[R0, #+0]
    897            
    898            if (RF_SpecialTask>=0)
   \   000000D8   7448               LDR      R0,??RF_MasterExecut_0+0x14  ;; RF_SpecialTask
   \   000000DA   0021               MOVS     R1,#+0
   \   000000DC   4056               LDRSB    R0,[R0, R1]
   \   000000DE   0028               CMP      R0,#+0
   \   000000E0   00D5               BPL      .+4
   \   000000E2   C7E0               B        ??RF_MasterExecut_8
    899            {
    900              RF_RememberTask=RF_CurrentTask;
   \   000000E4   7248               LDR      R0,??RF_MasterExecut_0+0x18  ;; ??RF_RememberTask
   \   000000E6   7349               LDR      R1,??RF_MasterExecut_0+0x1C  ;; RF_CurrentTask
   \   000000E8   0978               LDRB     R1,[R1, #+0]
   \   000000EA   0170               STRB     R1,[R0, #+0]
    901              RF_CurrentTask=RF_SpecialTask;
   \   000000EC   7148               LDR      R0,??RF_MasterExecut_0+0x1C  ;; RF_CurrentTask
   \   000000EE   6F49               LDR      R1,??RF_MasterExecut_0+0x14  ;; RF_SpecialTask
   \   000000F0   0978               LDRB     R1,[R1, #+0]
   \   000000F2   0170               STRB     R1,[R0, #+0]
    902          
    903          
    904                                    
    905                        
    906            }else{
    907              if (RF_RememberTask>=0) 
    908              {
    909               RF_CurrentTask=RF_RememberTask;
    910               RF_RememberTask=-1;  
    911              }
    912              
    913              if (IncCurentRfTask()==0) return;
    914          
    915             
    916          
    917            
    918              
    919              //wykluczenie rozkazów ustawiania stanów oraz odczytu rejestrów je¿eli brak transmisji
    920              while (((RF_TaskTab[RF_CurrentTask].Node!=0) && (RF_CurrentTask<RF_Tasks-1)) && (SendOrder==0))
    921              {
    922                 if (((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  ((RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && (MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]==0) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType!=NodeRF_Period) && (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType!=NodeRF_Remote) ))  ||
    923                    ((RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi>0) && (TransQuality.QuickMensur[RF_TaskTab[RF_CurrentTask].Node-1]==0)))
    924                 {
    925                       if (IncCurentRfTask()==0) return;   
    926                   
    927                 }else{ 
    928                    if ((RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd) &&  (RF_TaskTab[RF_CurrentTask].Command.Auxi==0) && ((MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]>0)|| (NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronType==NodeRF_Remote)))  MainStage.SendStageChange[RF_TaskTab[RF_CurrentTask].Node]--;
    929                    SendOrder=1;   
    930                 }
    931              }
    932            }
    933            
    934            
    935            if (RF_Status.MasterMode==0) return;
   \                     ??RF_MasterExecut_9:
   \   000000F4   7048               LDR      R0,??RF_MasterExecut_0+0x20  ;; RF_Status + 13
   \   000000F6   0078               LDRB     R0,[R0, #+0]
   \   000000F8   0028               CMP      R0,#+0
   \   000000FA   00D1               BNE      .+4
   \   000000FC   E0E2               B        ??RF_MasterExecut_1
    936          
    937               
    938            
    939            if (SendOrder)
   \   000000FE   002C               CMP      R4,#+0
   \   00000100   00D1               BNE      .+4
   \   00000102   CDE2               B        ??RF_MasterExecut_10
    940            {
    941              
    942              
    943                _RF_Command  RF_Command;
    944                RF_Command.ID     = RF_TaskTab[RF_CurrentTask].Command.ID;
   \   00000104   0098               LDR      R0,[SP, #+0]
   \   00000106   000D               LSRS     R0,R0,#+20
   \   00000108   0005               LSLS     R0,R0,#+20
   \   0000010A   6A49               LDR      R1,??RF_MasterExecut_0+0x1C  ;; RF_CurrentTask
   \   0000010C   0022               MOVS     R2,#+0
   \   0000010E   8956               LDRSB    R1,[R1, R2]
   \   00000110   0822               MOVS     R2,#+8
   \   00000112   5143               MULS     R1,R2,R1
   \   00000114   614A               LDR      R2,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   00000116   5118               ADDS     R1,R2,R1
   \   00000118   4968               LDR      R1,[R1, #+4]
   \   0000011A   0903               LSLS     R1,R1,#+12       ;; ZeroExtS R1,R1,#+12,#+12
   \   0000011C   090B               LSRS     R1,R1,#+12
   \   0000011E   0143               ORRS     R1,R1,R0
   \   00000120   0091               STR      R1,[SP, #+0]
    945                RF_Command.Order  = RF_TaskTab[RF_CurrentTask].Command.Order;
   \   00000122   6846               MOV      R0,SP
   \   00000124   801C               ADDS     R0,R0,#+2
   \   00000126   ........           BL       __aeabi_uread4
   \   0000012A   6946               MOV      R1,SP
   \   0000012C   891C               ADDS     R1,R1,#+2
   \   0000012E   F022               MOVS     R2,#+240
   \   00000130   9043               BICS     R0,R0,R2
   \   00000132   604A               LDR      R2,??RF_MasterExecut_0+0x1C  ;; RF_CurrentTask
   \   00000134   0023               MOVS     R3,#+0
   \   00000136   D256               LDRSB    R2,[R2, R3]
   \   00000138   0823               MOVS     R3,#+8
   \   0000013A   5A43               MULS     R2,R3,R2
   \   0000013C   574B               LDR      R3,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   0000013E   9A18               ADDS     R2,R3,R2
   \   00000140   5268               LDR      R2,[R2, #+4]
   \   00000142   120D               LSRS     R2,R2,#+20
   \   00000144   1301               LSLS     R3,R2,#+4
   \   00000146   F022               MOVS     R2,#+240
   \   00000148   1A40               ANDS     R2,R2,R3
   \   0000014A   0243               ORRS     R2,R2,R0
   \   0000014C   1000               MOVS     R0,R2
   \   0000014E   ........           BL       __aeabi_uwrite4
    946                RF_Command.Auxi   = RF_TaskTab[RF_CurrentTask].Command.Auxi;
   \   00000152   6846               MOV      R0,SP
   \   00000154   C01C               ADDS     R0,R0,#+3
   \   00000156   ........           BL       __aeabi_uread4
   \   0000015A   6946               MOV      R1,SP
   \   0000015C   C91C               ADDS     R1,R1,#+3
   \   0000015E   FF22               MOVS     R2,#+255
   \   00000160   9043               BICS     R0,R0,R2
   \   00000162   544A               LDR      R2,??RF_MasterExecut_0+0x1C  ;; RF_CurrentTask
   \   00000164   0023               MOVS     R3,#+0
   \   00000166   D256               LDRSB    R2,[R2, R3]
   \   00000168   0823               MOVS     R3,#+8
   \   0000016A   5A43               MULS     R2,R3,R2
   \   0000016C   4B4B               LDR      R3,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   0000016E   9A18               ADDS     R2,R3,R2
   \   00000170   5268               LDR      R2,[R2, #+4]
   \   00000172   120E               LSRS     R2,R2,#+24
   \   00000174   0243               ORRS     R2,R2,R0
   \   00000176   1000               MOVS     R0,R2
   \   00000178   ........           BL       __aeabi_uwrite4
    947                
    948          
    949                if (RF_TaskTab[RF_CurrentTask].Command.Order==W_NewIdOrd)                 //rozkaz specjalny zmiany ID
   \   0000017C   4D48               LDR      R0,??RF_MasterExecut_0+0x1C  ;; RF_CurrentTask
   \   0000017E   0021               MOVS     R1,#+0
   \   00000180   4056               LDRSB    R0,[R0, R1]
   \   00000182   0821               MOVS     R1,#+8
   \   00000184   4843               MULS     R0,R1,R0
   \   00000186   4549               LDR      R1,??RF_MasterExecut_0+0x4  ;; RF_TaskTab
   \   00000188   0818               ADDS     R0,R1,R0
   \   0000018A   4068               LDR      R0,[R0, #+4]
   \   0000018C   F021               MOVS     R1,#+240
   \   0000018E   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   00000190   0140               ANDS     R1,R1,R0
   \   00000192   0800               MOVS     R0,R1
   \   00000194   000D               LSRS     R0,R0,#+20
   \   00000196   0528               CMP      R0,#+5
   \   00000198   00D0               BEQ      .+4
   \   0000019A   73E1               B        ??RF_MasterExecut_11
    950                {
    951                   ByteToSend=8;
   \   0000019C   6846               MOV      R0,SP
   \   0000019E   0821               MOVS     R1,#+8
   \   000001A0   0172               STRB     R1,[R0, #+8]
    952                   RF_Command.CHID_CUR_ID=NeuronsList[0].NeuronID;
   \   000001A2   6846               MOV      R0,SP
   \   000001A4   ........           BL       __aeabi_uread8
   \   000001A8   6A46               MOV      R2,SP
   \   000001AA   9446               MOV      R12,R2
   \   000001AC   434C               LDR      R4,??RF_MasterExecut_0+0x24  ;; 0xfff00000
   \   000001AE   0025               MOVS     R5,#+0
   \   000001B0   ED43               MVNS     R5,R5            ;; #-1
   \   000001B2   0440               ANDS     R4,R4,R0
   \   000001B4   0D40               ANDS     R5,R5,R1
   \   000001B6   4248               LDR      R0,??RF_MasterExecut_0+0x28  ;; NeuronsList + 4
   \   000001B8   0068               LDR      R0,[R0, #+0]
   \   000001BA   C117               ASRS     R1,R0,#+31
   \   000001BC   414A               LDR      R2,??RF_MasterExecut_0+0x2C  ;; 0xfffff
   \   000001BE   0023               MOVS     R3,#+0
   \   000001C0   0240               ANDS     R2,R2,R0
   \   000001C2   0B40               ANDS     R3,R3,R1
   \   000001C4   2243               ORRS     R2,R2,R4
   \   000001C6   2B43               ORRS     R3,R3,R5
   \   000001C8   1000               MOVS     R0,R2
   \   000001CA   1900               MOVS     R1,R3
   \   000001CC   6246               MOV      R2,R12
   \   000001CE   ........           BL       __aeabi_uwrite8
    953                   RF_Command.CHID_KODE=0xC;
   \   000001D2   6846               MOV      R0,SP
   \   000001D4   C01C               ADDS     R0,R0,#+3
   \   000001D6   ........           BL       __aeabi_uread8
   \   000001DA   6A46               MOV      R2,SP
   \   000001DC   D21C               ADDS     R2,R2,#+3
   \   000001DE   1400               MOVS     R4,R2
   \   000001E0   0F22               MOVS     R2,#+15
   \   000001E2   D243               MVNS     R2,R2            ;; #-16
   \   000001E4   0023               MOVS     R3,#+0
   \   000001E6   DB43               MVNS     R3,R3            ;; #-1
   \   000001E8   0240               ANDS     R2,R2,R0
   \   000001EA   0B40               ANDS     R3,R3,R1
   \   000001EC   0C20               MOVS     R0,#+12
   \   000001EE   0021               MOVS     R1,#+0
   \   000001F0   1043               ORRS     R0,R0,R2
   \   000001F2   1943               ORRS     R1,R1,R3
   \   000001F4   2200               MOVS     R2,R4
   \   000001F6   ........           BL       __aeabi_uwrite8
    954                   RF_Command.CHID_NEW_ID=NeuronsList[1].NeuronID;
   \   000001FA   6846               MOV      R0,SP
   \   000001FC   C01C               ADDS     R0,R0,#+3
   \   000001FE   ........           BL       __aeabi_uread8
   \   00000202   6A46               MOV      R2,SP
   \   00000204   D21C               ADDS     R2,R2,#+3
   \   00000206   9446               MOV      R12,R2
   \   00000208   2F4C               LDR      R4,??RF_MasterExecut_0+0x30  ;; 0xff00000f
   \   0000020A   0025               MOVS     R5,#+0
   \   0000020C   ED43               MVNS     R5,R5            ;; #-1
   \   0000020E   0440               ANDS     R4,R4,R0
   \   00000210   0D40               ANDS     R5,R5,R1
   \   00000212   2E48               LDR      R0,??RF_MasterExecut_0+0x34  ;; NeuronsList + 16
   \   00000214   0068               LDR      R0,[R0, #+0]
   \   00000216   C117               ASRS     R1,R0,#+31
   \   00000218   0901               LSLS     R1,R1,#+4
   \   0000021A   020F               LSRS     R2,R0,#+28
   \   0000021C   1143               ORRS     R1,R1,R2
   \   0000021E   0001               LSLS     R0,R0,#+4
   \   00000220   2B4A               LDR      R2,??RF_MasterExecut_0+0x38  ;; 0xfffff0
   \   00000222   0023               MOVS     R3,#+0
   \   00000224   0240               ANDS     R2,R2,R0
   \   00000226   0B40               ANDS     R3,R3,R1
   \   00000228   2243               ORRS     R2,R2,R4
   \   0000022A   2B43               ORRS     R3,R3,R5
   \   0000022C   1000               MOVS     R0,R2
   \   0000022E   1900               MOVS     R1,R3
   \   00000230   6246               MOV      R2,R12
   \   00000232   ........           BL       __aeabi_uwrite8
    955                   RF_Command.CHID_CRC=crc16(RF_Command.Streem,6);
                                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000236   0621               MOVS     R1,#+6
   \   00000238   6846               MOV      R0,SP
   \   0000023A   ........           BL       crc16
   \   0000023E   0400               MOVS     R4,R0
   \   00000240   6846               MOV      R0,SP
   \   00000242   801D               ADDS     R0,R0,#+6
   \   00000244   ........           BL       __aeabi_uread8
   \   00000248   6A46               MOV      R2,SP
   \   0000024A   921D               ADDS     R2,R2,#+6
   \   0000024C   1500               MOVS     R5,R2
   \   0000024E   0200               MOVS     R2,R0
   \   00000250   0B00               MOVS     R3,R1
   \   00000252   2048               LDR      R0,??RF_MasterExecut_0+0x3C  ;; 0xffff0000
   \   00000254   0021               MOVS     R1,#+0
   \   00000256   C943               MVNS     R1,R1            ;; #-1
   \   00000258   1040               ANDS     R0,R0,R2
   \   0000025A   1940               ANDS     R1,R1,R3
   \   0000025C   2404               LSLS     R4,R4,#+16       ;; ZeroExtS R4,R4,#+16,#+16
   \   0000025E   240C               LSRS     R4,R4,#+16
   \   00000260   2200               MOVS     R2,R4
   \   00000262   0023               MOVS     R3,#+0
   \   00000264   0243               ORRS     R2,R2,R0
   \   00000266   0B43               ORRS     R3,R3,R1
   \   00000268   1000               MOVS     R0,R2
   \   0000026A   1900               MOVS     R1,R3
   \   0000026C   2A00               MOVS     R2,R5
   \   0000026E   ........           BL       __aeabi_uwrite8
   \   00000272   00E2               B        ??RF_MasterExecut_12
    956                }
   \                     ??RF_MasterExecut_8:
   \   00000274   0E48               LDR      R0,??RF_MasterExecut_0+0x18  ;; ??RF_RememberTask
   \   00000276   0021               MOVS     R1,#+0
   \   00000278   4056               LDRSB    R0,[R0, R1]
   \   0000027A   0028               CMP      R0,#+0
   \   0000027C   07D4               BMI      ??RF_MasterExecut_13
   \   0000027E   0D48               LDR      R0,??RF_MasterExecut_0+0x1C  ;; RF_CurrentTask
   \   00000280   0B49               LDR      R1,??RF_MasterExecut_0+0x18  ;; ??RF_RememberTask
   \   00000282   0978               LDRB     R1,[R1, #+0]
   \   00000284   0170               STRB     R1,[R0, #+0]
   \   00000286   0A48               LDR      R0,??RF_MasterExecut_0+0x18  ;; ??RF_RememberTask
   \   00000288   0021               MOVS     R1,#+0
   \   0000028A   C943               MVNS     R1,R1            ;; #-1
   \   0000028C   0170               STRB     R1,[R0, #+0]
   \                     ??RF_MasterExecut_13:
   \   0000028E   ........           BL       IncCurentRfTask
   \   00000292   0028               CMP      R0,#+0
   \   00000294   6ED1               BNE      ??RF_MasterExecut_14
   \   00000296   13E2               B        ??RF_MasterExecut_1
   \                     ??RF_MasterExecut_0:
   \   00000298   ........           DC32     SlaveMode
   \   0000029C   ........           DC32     RF_TaskTab
   \   000002A0   EB060000           DC32     0x6eb
   \   000002A4   ........           DC32     MainStage
   \   000002A8   ........           DC32     ChangeStageFlag
   \   000002AC   ........           DC32     RF_SpecialTask
   \   000002B0   ........           DC32     ??RF_RememberTask
   \   000002B4   ........           DC32     RF_CurrentTask
   \   000002B8   ........           DC32     RF_Status + 13
   \   000002BC   0000F0FF           DC32     0xfff00000
   \   000002C0   ........           DC32     NeuronsList + 4
   \   000002C4   FFFF0F00           DC32     0xfffff
   \   000002C8   0F0000FF           DC32     0xff00000f
   \   000002CC   ........           DC32     NeuronsList + 16
   \   000002D0   F0FFFF00           DC32     0xfffff0
   \   000002D4   0000FFFF           DC32     0xffff0000
   \                     ??RF_MasterExecut_15:
   \   000002D8   C348               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000002DA   0021               MOVS     R1,#+0
   \   000002DC   4056               LDRSB    R0,[R0, R1]
   \   000002DE   0821               MOVS     R1,#+8
   \   000002E0   4843               MULS     R0,R1,R0
   \   000002E2   C249               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   000002E4   0818               ADDS     R0,R1,R0
   \   000002E6   4068               LDR      R0,[R0, #+4]
   \   000002E8   F021               MOVS     R1,#+240
   \   000002EA   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000002EC   0140               ANDS     R1,R1,R0
   \   000002EE   0800               MOVS     R0,R1
   \   000002F0   000D               LSRS     R0,R0,#+20
   \   000002F2   0228               CMP      R0,#+2
   \   000002F4   3DD1               BNE      ??RF_MasterExecut_17
   \   000002F6   BC48               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000002F8   0021               MOVS     R1,#+0
   \   000002FA   4056               LDRSB    R0,[R0, R1]
   \   000002FC   0821               MOVS     R1,#+8
   \   000002FE   4843               MULS     R0,R1,R0
   \   00000300   BA49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000302   0818               ADDS     R0,R1,R0
   \   00000304   4068               LDR      R0,[R0, #+4]
   \   00000306   000E               LSRS     R0,R0,#+24
   \   00000308   0028               CMP      R0,#+0
   \   0000030A   32D1               BNE      ??RF_MasterExecut_17
   \   0000030C   B848               LDR      R0,??RF_MasterExecut_16+0x8  ;; 0x6eb
   \   0000030E   B649               LDR      R1,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000310   0022               MOVS     R2,#+0
   \   00000312   8956               LDRSB    R1,[R1, R2]
   \   00000314   0822               MOVS     R2,#+8
   \   00000316   5143               MULS     R1,R2,R1
   \   00000318   B44A               LDR      R2,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   0000031A   515C               LDRB     R1,[R2, R1]
   \   0000031C   B54A               LDR      R2,??RF_MasterExecut_16+0xC  ;; MainStage
   \   0000031E   5118               ADDS     R1,R2,R1
   \   00000320   085C               LDRB     R0,[R1, R0]
   \   00000322   0128               CMP      R0,#+1
   \   00000324   0ED2               BCS      ??RF_MasterExecut_18
   \   00000326   B048               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000328   0021               MOVS     R1,#+0
   \   0000032A   4056               LDRSB    R0,[R0, R1]
   \   0000032C   0821               MOVS     R1,#+8
   \   0000032E   4843               MULS     R0,R1,R0
   \   00000330   AE49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000332   085C               LDRB     R0,[R1, R0]
   \   00000334   0C21               MOVS     R1,#+12
   \   00000336   4843               MULS     R0,R1,R0
   \   00000338   E349               LDR      R1,??RF_MasterExecut_19  ;; NeuronsList
   \   0000033A   0818               ADDS     R0,R1,R0
   \   0000033C   0C38               SUBS     R0,R0,#+12
   \   0000033E   0078               LDRB     R0,[R0, #+0]
   \   00000340   0428               CMP      R0,#+4
   \   00000342   16D1               BNE      ??RF_MasterExecut_17
   \                     ??RF_MasterExecut_18:
   \   00000344   AA48               LDR      R0,??RF_MasterExecut_16+0x8  ;; 0x6eb
   \   00000346   A849               LDR      R1,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000348   0022               MOVS     R2,#+0
   \   0000034A   8956               LDRSB    R1,[R1, R2]
   \   0000034C   0822               MOVS     R2,#+8
   \   0000034E   5143               MULS     R1,R2,R1
   \   00000350   A64A               LDR      R2,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000352   515C               LDRB     R1,[R2, R1]
   \   00000354   A74A               LDR      R2,??RF_MasterExecut_16+0xC  ;; MainStage
   \   00000356   5118               ADDS     R1,R2,R1
   \   00000358   A54A               LDR      R2,??RF_MasterExecut_16+0x8  ;; 0x6eb
   \   0000035A   A34B               LDR      R3,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   0000035C   0024               MOVS     R4,#+0
   \   0000035E   1B57               LDRSB    R3,[R3, R4]
   \   00000360   0824               MOVS     R4,#+8
   \   00000362   6343               MULS     R3,R4,R3
   \   00000364   A14C               LDR      R4,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000366   E35C               LDRB     R3,[R4, R3]
   \   00000368   A24C               LDR      R4,??RF_MasterExecut_16+0xC  ;; MainStage
   \   0000036A   E318               ADDS     R3,R4,R3
   \   0000036C   9A5C               LDRB     R2,[R3, R2]
   \   0000036E   521E               SUBS     R2,R2,#+1
   \   00000370   0A54               STRB     R2,[R1, R0]
   \                     ??RF_MasterExecut_17:
   \   00000372   0124               MOVS     R4,#+1
   \                     ??RF_MasterExecut_14:
   \   00000374   9C48               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000376   0021               MOVS     R1,#+0
   \   00000378   4056               LDRSB    R0,[R0, R1]
   \   0000037A   0821               MOVS     R1,#+8
   \   0000037C   4843               MULS     R0,R1,R0
   \   0000037E   9B49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000380   085C               LDRB     R0,[R1, R0]
   \   00000382   0028               CMP      R0,#+0
   \   00000384   00D1               BNE      .+4
   \   00000386   B5E6               B        ??RF_MasterExecut_9
   \   00000388   9748               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   0000038A   0021               MOVS     R1,#+0
   \   0000038C   4056               LDRSB    R0,[R0, R1]
   \   0000038E   4528               CMP      R0,#+69
   \   00000390   00DB               BLT      .+4
   \   00000392   AFE6               B        ??RF_MasterExecut_9
   \   00000394   002C               CMP      R4,#+0
   \   00000396   00D0               BEQ      .+4
   \   00000398   ACE6               B        ??RF_MasterExecut_9
   \   0000039A   9348               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   0000039C   0021               MOVS     R1,#+0
   \   0000039E   4056               LDRSB    R0,[R0, R1]
   \   000003A0   0821               MOVS     R1,#+8
   \   000003A2   4843               MULS     R0,R1,R0
   \   000003A4   9149               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   000003A6   0818               ADDS     R0,R1,R0
   \   000003A8   4068               LDR      R0,[R0, #+4]
   \   000003AA   F021               MOVS     R1,#+240
   \   000003AC   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000003AE   0140               ANDS     R1,R1,R0
   \   000003B0   0800               MOVS     R0,R1
   \   000003B2   000D               LSRS     R0,R0,#+20
   \   000003B4   0228               CMP      R0,#+2
   \   000003B6   35D1               BNE      ??RF_MasterExecut_20
   \   000003B8   8B48               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000003BA   0021               MOVS     R1,#+0
   \   000003BC   4056               LDRSB    R0,[R0, R1]
   \   000003BE   0821               MOVS     R1,#+8
   \   000003C0   4843               MULS     R0,R1,R0
   \   000003C2   8A49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   000003C4   0818               ADDS     R0,R1,R0
   \   000003C6   4068               LDR      R0,[R0, #+4]
   \   000003C8   000E               LSRS     R0,R0,#+24
   \   000003CA   0028               CMP      R0,#+0
   \   000003CC   2AD1               BNE      ??RF_MasterExecut_20
   \   000003CE   8848               LDR      R0,??RF_MasterExecut_16+0x8  ;; 0x6eb
   \   000003D0   8549               LDR      R1,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000003D2   0022               MOVS     R2,#+0
   \   000003D4   8956               LDRSB    R1,[R1, R2]
   \   000003D6   0822               MOVS     R2,#+8
   \   000003D8   5143               MULS     R1,R2,R1
   \   000003DA   844A               LDR      R2,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   000003DC   515C               LDRB     R1,[R2, R1]
   \   000003DE   854A               LDR      R2,??RF_MasterExecut_16+0xC  ;; MainStage
   \   000003E0   5118               ADDS     R1,R2,R1
   \   000003E2   085C               LDRB     R0,[R1, R0]
   \   000003E4   0028               CMP      R0,#+0
   \   000003E6   1DD1               BNE      ??RF_MasterExecut_20
   \   000003E8   7F48               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000003EA   0021               MOVS     R1,#+0
   \   000003EC   4056               LDRSB    R0,[R0, R1]
   \   000003EE   0821               MOVS     R1,#+8
   \   000003F0   4843               MULS     R0,R1,R0
   \   000003F2   7E49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   000003F4   085C               LDRB     R0,[R1, R0]
   \   000003F6   0C21               MOVS     R1,#+12
   \   000003F8   4843               MULS     R0,R1,R0
   \   000003FA   B349               LDR      R1,??RF_MasterExecut_19  ;; NeuronsList
   \   000003FC   0818               ADDS     R0,R1,R0
   \   000003FE   0C38               SUBS     R0,R0,#+12
   \   00000400   0078               LDRB     R0,[R0, #+0]
   \   00000402   0528               CMP      R0,#+5
   \   00000404   0ED0               BEQ      ??RF_MasterExecut_20
   \   00000406   7848               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000408   0021               MOVS     R1,#+0
   \   0000040A   4056               LDRSB    R0,[R0, R1]
   \   0000040C   0821               MOVS     R1,#+8
   \   0000040E   4843               MULS     R0,R1,R0
   \   00000410   7649               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000412   085C               LDRB     R0,[R1, R0]
   \   00000414   0C21               MOVS     R1,#+12
   \   00000416   4843               MULS     R0,R1,R0
   \   00000418   AB49               LDR      R1,??RF_MasterExecut_19  ;; NeuronsList
   \   0000041A   0818               ADDS     R0,R1,R0
   \   0000041C   0C38               SUBS     R0,R0,#+12
   \   0000041E   0078               LDRB     R0,[R0, #+0]
   \   00000420   0428               CMP      R0,#+4
   \   00000422   29D1               BNE      ??RF_MasterExecut_21
   \                     ??RF_MasterExecut_20:
   \   00000424   7048               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000426   0021               MOVS     R1,#+0
   \   00000428   4056               LDRSB    R0,[R0, R1]
   \   0000042A   0821               MOVS     R1,#+8
   \   0000042C   4843               MULS     R0,R1,R0
   \   0000042E   6F49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000430   0818               ADDS     R0,R1,R0
   \   00000432   4068               LDR      R0,[R0, #+4]
   \   00000434   F021               MOVS     R1,#+240
   \   00000436   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   00000438   0140               ANDS     R1,R1,R0
   \   0000043A   0800               MOVS     R0,R1
   \   0000043C   000D               LSRS     R0,R0,#+20
   \   0000043E   0128               CMP      R0,#+1
   \   00000440   00D0               BEQ      .+4
   \   00000442   49E7               B        ??RF_MasterExecut_15
   \   00000444   6848               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000446   0021               MOVS     R1,#+0
   \   00000448   4056               LDRSB    R0,[R0, R1]
   \   0000044A   0821               MOVS     R1,#+8
   \   0000044C   4843               MULS     R0,R1,R0
   \   0000044E   6749               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000450   0818               ADDS     R0,R1,R0
   \   00000452   4068               LDR      R0,[R0, #+4]
   \   00000454   000E               LSRS     R0,R0,#+24
   \   00000456   0028               CMP      R0,#+0
   \   00000458   00D1               BNE      .+4
   \   0000045A   3DE7               B        ??RF_MasterExecut_15
   \   0000045C   6248               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   0000045E   0021               MOVS     R1,#+0
   \   00000460   4056               LDRSB    R0,[R0, R1]
   \   00000462   0821               MOVS     R1,#+8
   \   00000464   4843               MULS     R0,R1,R0
   \   00000466   6149               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000468   085C               LDRB     R0,[R1, R0]
   \   0000046A   9849               LDR      R1,??RF_MasterExecut_19+0x4  ;; TransQuality
   \   0000046C   0818               ADDS     R0,R1,R0
   \   0000046E   2530               ADDS     R0,R0,#+37
   \   00000470   0078               LDRB     R0,[R0, #+0]
   \   00000472   0028               CMP      R0,#+0
   \   00000474   00D0               BEQ      .+4
   \   00000476   2FE7               B        ??RF_MasterExecut_15
   \                     ??RF_MasterExecut_21:
   \   00000478   ........           BL       IncCurentRfTask
   \   0000047C   0028               CMP      R0,#+0
   \   0000047E   00D0               BEQ      .+4
   \   00000480   78E7               B        ??RF_MasterExecut_14
   \   00000482   1DE1               B        ??RF_MasterExecut_1
    957                else if ((RF_TaskTab[RF_CurrentTask].Command.Order==R_BC_Order)   || (RF_TaskTab[RF_CurrentTask].Command.Order==W_BC_Order))           //rozkaz specjalny ramka rozg³ona
   \                     ??RF_MasterExecut_11:
   \   00000484   5848               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   00000486   0021               MOVS     R1,#+0
   \   00000488   4056               LDRSB    R0,[R0, R1]
   \   0000048A   0821               MOVS     R1,#+8
   \   0000048C   4843               MULS     R0,R1,R0
   \   0000048E   5749               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000490   0818               ADDS     R0,R1,R0
   \   00000492   4068               LDR      R0,[R0, #+4]
   \   00000494   F021               MOVS     R1,#+240
   \   00000496   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   00000498   0140               ANDS     R1,R1,R0
   \   0000049A   0800               MOVS     R0,R1
   \   0000049C   000D               LSRS     R0,R0,#+20
   \   0000049E   0728               CMP      R0,#+7
   \   000004A0   0ED0               BEQ      ??RF_MasterExecut_22
   \   000004A2   5148               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000004A4   0021               MOVS     R1,#+0
   \   000004A6   4056               LDRSB    R0,[R0, R1]
   \   000004A8   0821               MOVS     R1,#+8
   \   000004AA   4843               MULS     R0,R1,R0
   \   000004AC   4F49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   000004AE   0818               ADDS     R0,R1,R0
   \   000004B0   4068               LDR      R0,[R0, #+4]
   \   000004B2   F021               MOVS     R1,#+240
   \   000004B4   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000004B6   0140               ANDS     R1,R1,R0
   \   000004B8   0800               MOVS     R0,R1
   \   000004BA   000D               LSRS     R0,R0,#+20
   \   000004BC   0828               CMP      R0,#+8
   \   000004BE   79D1               BNE      ??RF_MasterExecut_23
    958                {
    959                   ByteToSend=8;
   \                     ??RF_MasterExecut_22:
   \   000004C0   6846               MOV      R0,SP
   \   000004C2   0821               MOVS     R1,#+8
   \   000004C4   0172               STRB     R1,[R0, #+8]
    960                   RF_Command.BC_ID1=0;
   \   000004C6   6846               MOV      R0,SP
   \   000004C8   ........           BL       __aeabi_uread8
   \   000004CC   0400               MOVS     R4,R0
   \   000004CE   0D00               MOVS     R5,R1
   \   000004D0   6A46               MOV      R2,SP
   \   000004D2   7F48               LDR      R0,??RF_MasterExecut_19+0x8  ;; 0xfff00000
   \   000004D4   0021               MOVS     R1,#+0
   \   000004D6   C943               MVNS     R1,R1            ;; #-1
   \   000004D8   2040               ANDS     R0,R0,R4
   \   000004DA   2940               ANDS     R1,R1,R5
   \   000004DC   ........           BL       __aeabi_uwrite8
    961                   RF_Command.BC_REG=RF_TaskTab[RF_CurrentTask].Command.Auxi;
   \   000004E0   6846               MOV      R0,SP
   \   000004E2   C01C               ADDS     R0,R0,#+3
   \   000004E4   ........           BL       __aeabi_uread8
   \   000004E8   6A46               MOV      R2,SP
   \   000004EA   D21C               ADDS     R2,R2,#+3
   \   000004EC   9446               MOV      R12,R2
   \   000004EE   0F24               MOVS     R4,#+15
   \   000004F0   E443               MVNS     R4,R4            ;; #-16
   \   000004F2   0025               MOVS     R5,#+0
   \   000004F4   ED43               MVNS     R5,R5            ;; #-1
   \   000004F6   0440               ANDS     R4,R4,R0
   \   000004F8   0D40               ANDS     R5,R5,R1
   \   000004FA   3B48               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000004FC   0021               MOVS     R1,#+0
   \   000004FE   4056               LDRSB    R0,[R0, R1]
   \   00000500   0821               MOVS     R1,#+8
   \   00000502   4843               MULS     R0,R1,R0
   \   00000504   3949               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000506   0818               ADDS     R0,R1,R0
   \   00000508   4068               LDR      R0,[R0, #+4]
   \   0000050A   000E               LSRS     R0,R0,#+24
   \   0000050C   0021               MOVS     R1,#+0
   \   0000050E   0F22               MOVS     R2,#+15
   \   00000510   0023               MOVS     R3,#+0
   \   00000512   0240               ANDS     R2,R2,R0
   \   00000514   0B40               ANDS     R3,R3,R1
   \   00000516   2243               ORRS     R2,R2,R4
   \   00000518   2B43               ORRS     R3,R3,R5
   \   0000051A   1000               MOVS     R0,R2
   \   0000051C   1900               MOVS     R1,R3
   \   0000051E   6246               MOV      R2,R12
   \   00000520   ........           BL       __aeabi_uwrite8
    962                   RF_Command.BC_ID2=NeuronsList[RF_TaskTab[RF_CurrentTask].Node-1].NeuronID;
   \   00000524   6846               MOV      R0,SP
   \   00000526   C01C               ADDS     R0,R0,#+3
   \   00000528   ........           BL       __aeabi_uread8
   \   0000052C   6A46               MOV      R2,SP
   \   0000052E   D21C               ADDS     R2,R2,#+3
   \   00000530   9446               MOV      R12,R2
   \   00000532   684C               LDR      R4,??RF_MasterExecut_19+0xC  ;; 0xff00000f
   \   00000534   0025               MOVS     R5,#+0
   \   00000536   ED43               MVNS     R5,R5            ;; #-1
   \   00000538   0440               ANDS     R4,R4,R0
   \   0000053A   0D40               ANDS     R5,R5,R1
   \   0000053C   2A48               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   0000053E   0021               MOVS     R1,#+0
   \   00000540   4056               LDRSB    R0,[R0, R1]
   \   00000542   0821               MOVS     R1,#+8
   \   00000544   4843               MULS     R0,R1,R0
   \   00000546   2949               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   00000548   085C               LDRB     R0,[R1, R0]
   \   0000054A   0C21               MOVS     R1,#+12
   \   0000054C   4843               MULS     R0,R1,R0
   \   0000054E   5E49               LDR      R1,??RF_MasterExecut_19  ;; NeuronsList
   \   00000550   0818               ADDS     R0,R1,R0
   \   00000552   0838               SUBS     R0,R0,#+8
   \   00000554   0068               LDR      R0,[R0, #+0]
   \   00000556   C117               ASRS     R1,R0,#+31
   \   00000558   0901               LSLS     R1,R1,#+4
   \   0000055A   020F               LSRS     R2,R0,#+28
   \   0000055C   1143               ORRS     R1,R1,R2
   \   0000055E   0001               LSLS     R0,R0,#+4
   \   00000560   5D4A               LDR      R2,??RF_MasterExecut_19+0x10  ;; 0xfffff0
   \   00000562   0023               MOVS     R3,#+0
   \   00000564   0240               ANDS     R2,R2,R0
   \   00000566   0B40               ANDS     R3,R3,R1
   \   00000568   2243               ORRS     R2,R2,R4
   \   0000056A   2B43               ORRS     R3,R3,R5
   \   0000056C   1000               MOVS     R0,R2
   \   0000056E   1900               MOVS     R1,R3
   \   00000570   6246               MOV      R2,R12
   \   00000572   ........           BL       __aeabi_uwrite8
    963                   RF_Command.BC_CRC=crc16(RF_Command.Streem,6);
                                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000576   0621               MOVS     R1,#+6
   \   00000578   6846               MOV      R0,SP
   \   0000057A   ........           BL       crc16
   \   0000057E   0400               MOVS     R4,R0
   \   00000580   6846               MOV      R0,SP
   \   00000582   801D               ADDS     R0,R0,#+6
   \   00000584   ........           BL       __aeabi_uread8
   \   00000588   6A46               MOV      R2,SP
   \   0000058A   921D               ADDS     R2,R2,#+6
   \   0000058C   1500               MOVS     R5,R2
   \   0000058E   0200               MOVS     R2,R0
   \   00000590   0B00               MOVS     R3,R1
   \   00000592   5248               LDR      R0,??RF_MasterExecut_19+0x14  ;; 0xffff0000
   \   00000594   0021               MOVS     R1,#+0
   \   00000596   C943               MVNS     R1,R1            ;; #-1
   \   00000598   1040               ANDS     R0,R0,R2
   \   0000059A   1940               ANDS     R1,R1,R3
   \   0000059C   2404               LSLS     R4,R4,#+16       ;; ZeroExtS R4,R4,#+16,#+16
   \   0000059E   240C               LSRS     R4,R4,#+16
   \   000005A0   2200               MOVS     R2,R4
   \   000005A2   0023               MOVS     R3,#+0
   \   000005A4   0243               ORRS     R2,R2,R0
   \   000005A6   0B43               ORRS     R3,R3,R1
   \   000005A8   1000               MOVS     R0,R2
   \   000005AA   1900               MOVS     R1,R3
   \   000005AC   2A00               MOVS     R2,R5
   \   000005AE   ........           BL       __aeabi_uwrite8
   \   000005B2   60E0               B        ??RF_MasterExecut_12
    964                
    965                }
    966                else if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
   \                     ??RF_MasterExecut_23:
   \   000005B4   0C48               LDR      R0,??RF_MasterExecut_16  ;; RF_CurrentTask
   \   000005B6   0021               MOVS     R1,#+0
   \   000005B8   4056               LDRSB    R0,[R0, R1]
   \   000005BA   0821               MOVS     R1,#+8
   \   000005BC   4843               MULS     R0,R1,R0
   \   000005BE   0B49               LDR      R1,??RF_MasterExecut_16+0x4  ;; RF_TaskTab
   \   000005C0   0818               ADDS     R0,R1,R0
   \   000005C2   4068               LDR      R0,[R0, #+4]
   \   000005C4   F021               MOVS     R1,#+240
   \   000005C6   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   000005C8   0140               ANDS     R1,R1,R0
   \   000005CA   0800               MOVS     R0,R1
   \   000005CC   000D               LSRS     R0,R0,#+20
   \   000005CE   0128               CMP      R0,#+1
   \   000005D0   12D1               BNE      ??RF_MasterExecut_24
    967                {
    968                    ByteToSend=6;
   \   000005D2   6846               MOV      R0,SP
   \   000005D4   0621               MOVS     R1,#+6
   \   000005D6   0172               STRB     R1,[R0, #+8]
    969                    RF_Command.B6.CRC = crc16(RF_Command.Streem,4);
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000005D8   0421               MOVS     R1,#+4
   \   000005DA   6846               MOV      R0,SP
   \   000005DC   ........           BL       crc16
   \   000005E0   6946               MOV      R1,SP
   \   000005E2   8880               STRH     R0,[R1, #+4]
   \   000005E4   47E0               B        ??RF_MasterExecut_12
   \   000005E6   C046               Nop      
   \                     ??RF_MasterExecut_16:
   \   000005E8   ........           DC32     RF_CurrentTask
   \   000005EC   ........           DC32     RF_TaskTab
   \   000005F0   EB060000           DC32     0x6eb
   \   000005F4   ........           DC32     MainStage
    970          
    971                    
    972                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)
   \                     ??RF_MasterExecut_24:
   \   000005F8   3948               LDR      R0,??RF_MasterExecut_19+0x18  ;; RF_CurrentTask
   \   000005FA   0021               MOVS     R1,#+0
   \   000005FC   4056               LDRSB    R0,[R0, R1]
   \   000005FE   0821               MOVS     R1,#+8
   \   00000600   4843               MULS     R0,R1,R0
   \   00000602   3849               LDR      R1,??RF_MasterExecut_19+0x1C  ;; RF_TaskTab
   \   00000604   0818               ADDS     R0,R1,R0
   \   00000606   4068               LDR      R0,[R0, #+4]
   \   00000608   F021               MOVS     R1,#+240
   \   0000060A   0904               LSLS     R1,R1,#+16       ;; #+15728640
   \   0000060C   0140               ANDS     R1,R1,R0
   \   0000060E   0800               MOVS     R0,R1
   \   00000610   000D               LSRS     R0,R0,#+20
   \   00000612   0228               CMP      R0,#+2
   \   00000614   2FD1               BNE      ??RF_MasterExecut_12
    973                {  
    974                    ByteToSend=8;
   \   00000616   6846               MOV      R0,SP
   \   00000618   0821               MOVS     R1,#+8
   \   0000061A   0172               STRB     R1,[R0, #+8]
    975                    RF_Command.B8.Val = MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Value[RF_TaskTab[RF_CurrentTask].Command.Auxi];
   \   0000061C   6846               MOV      R0,SP
   \   0000061E   3249               LDR      R1,??RF_MasterExecut_19+0x20  ;; 0x3a2
   \   00000620   2F4A               LDR      R2,??RF_MasterExecut_19+0x18  ;; RF_CurrentTask
   \   00000622   0023               MOVS     R3,#+0
   \   00000624   D256               LDRSB    R2,[R2, R3]
   \   00000626   0823               MOVS     R3,#+8
   \   00000628   5A43               MULS     R2,R3,R2
   \   0000062A   2E4B               LDR      R3,??RF_MasterExecut_19+0x1C  ;; RF_TaskTab
   \   0000062C   9A18               ADDS     R2,R3,R2
   \   0000062E   5268               LDR      R2,[R2, #+4]
   \   00000630   120E               LSRS     R2,R2,#+24
   \   00000632   0223               MOVS     R3,#+2
   \   00000634   5A43               MULS     R2,R3,R2
   \   00000636   2A4B               LDR      R3,??RF_MasterExecut_19+0x18  ;; RF_CurrentTask
   \   00000638   0024               MOVS     R4,#+0
   \   0000063A   1B57               LDRSB    R3,[R3, R4]
   \   0000063C   0824               MOVS     R4,#+8
   \   0000063E   6343               MULS     R3,R4,R3
   \   00000640   284C               LDR      R4,??RF_MasterExecut_19+0x1C  ;; RF_TaskTab
   \   00000642   E35C               LDRB     R3,[R4, R3]
   \   00000644   1624               MOVS     R4,#+22
   \   00000646   6343               MULS     R3,R4,R3
   \   00000648   284C               LDR      R4,??RF_MasterExecut_19+0x24  ;; MainStage
   \   0000064A   E318               ADDS     R3,R4,R3
   \   0000064C   9A18               ADDS     R2,R3,R2
   \   0000064E   515A               LDRH     R1,[R2, R1]
   \   00000650   8180               STRH     R1,[R0, #+4]
    976                    RF_Command.B8.CRC = crc16(RF_Command.Streem,6);
                                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   00000652   0621               MOVS     R1,#+6
   \   00000654   6846               MOV      R0,SP
   \   00000656   ........           BL       crc16
   \   0000065A   6946               MOV      R1,SP
   \   0000065C   C880               STRH     R0,[R1, #+6]
    977                    
    978                    #ifdef _DEBUG_
    979                       AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                         ^
Warning[Pe068]: integer conversion resulted in a change of sign
   \   0000065E   2448               LDR      R0,??RF_MasterExecut_19+0x28  ;; 0xfffff430
   \   00000660   8021               MOVS     R1,#+128
   \   00000662   0906               LSLS     R1,R1,#+24       ;; #-2147483648
   \   00000664   0160               STR      R1,[R0, #+0]
    980                       ButtonBipCounter=g_counter+1;       
   \   00000666   234A               LDR      R2,??RF_MasterExecut_19+0x2C  ;; ButtonBipCounter
   \   00000668   2348               LDR      R0,??RF_MasterExecut_19+0x30  ;; g_counter
   \   0000066A   03C8               LDM      R0!,{R0,R1}
   \   0000066C   0023               MOVS     R3,#+0
   \   0000066E   401C               ADDS     R0,R0,#+1
   \   00000670   5941               ADCS     R1,R1,R3
   \   00000672   03C2               STM      R2!,{R0,R1}
   \   00000674   083A               SUBS     R2,R2,#+8
    981                    #endif
    982              
    983                }
    984              
    985                 #ifdef  DIRECT_Q_MESURE
    986                               TransQuality.DirectkMensur[RF_TaskTab[RF_CurrentTask].Node-1]++; 
    987                 #endif
    988                
    989                
    990                if (RF_NodeTest.NodeNr==RF_TaskTab[RF_CurrentTask].Node)
   \                     ??RF_MasterExecut_12:
   \   00000676   2148               LDR      R0,??RF_MasterExecut_19+0x34  ;; RF_NodeTest
   \   00000678   0078               LDRB     R0,[R0, #+0]
   \   0000067A   1949               LDR      R1,??RF_MasterExecut_19+0x18  ;; RF_CurrentTask
   \   0000067C   0022               MOVS     R2,#+0
   \   0000067E   8956               LDRSB    R1,[R1, R2]
   \   00000680   0822               MOVS     R2,#+8
   \   00000682   5143               MULS     R1,R2,R1
   \   00000684   174A               LDR      R2,??RF_MasterExecut_19+0x1C  ;; RF_TaskTab
   \   00000686   515C               LDRB     R1,[R2, R1]
   \   00000688   8842               CMP      R0,R1
   \   0000068A   04D1               BNE      ??RF_MasterExecut_25
    991                {
    992                  RF_NodeTest.Sent++; 
   \   0000068C   1C48               LDR      R0,??RF_MasterExecut_19+0x38  ;; RF_NodeTest + 4
   \   0000068E   1C49               LDR      R1,??RF_MasterExecut_19+0x38  ;; RF_NodeTest + 4
   \   00000690   0968               LDR      R1,[R1, #+0]
   \   00000692   491C               ADDS     R1,R1,#+1
   \   00000694   0160               STR      R1,[R0, #+0]
    993                }
    994                
    995                
    996                
    997                //RF_Status.EnableTX();
    998                RF_SendData(RF_Command.Streem, ByteToSend);
                                   ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \                     ??RF_MasterExecut_25:
   \   00000696   6846               MOV      R0,SP
   \   00000698   017A               LDRB     R1,[R0, #+8]
   \   0000069A   6846               MOV      R0,SP
   \   0000069C   ........           BL       RF_SendData
    999                //RF_Status.EnableRX();
   1000                
   1001          
   1002               
   1003                
   1004          
   1005                
   1006                
   1007              
   1008            }
   1009            
   1010            static int RF_LastPerTime;
   1011              if (RF_CurrentTask==0){
   \                     ??RF_MasterExecut_10:
   \   000006A0   0F48               LDR      R0,??RF_MasterExecut_19+0x18  ;; RF_CurrentTask
   \   000006A2   0021               MOVS     R1,#+0
   \   000006A4   4056               LDRSB    R0,[R0, R1]
   \   000006A6   0028               CMP      R0,#+0
   \   000006A8   0AD1               BNE      ??RF_MasterExecut_1
   1012                RF_Period=g_counter-RF_LastPerTime;
   \   000006AA   164A               LDR      R2,??RF_MasterExecut_19+0x3C  ;; RF_Period
   \   000006AC   1248               LDR      R0,??RF_MasterExecut_19+0x30  ;; g_counter
   \   000006AE   03C8               LDM      R0!,{R0,R1}
   \   000006B0   1549               LDR      R1,??RF_MasterExecut_19+0x40  ;; ??RF_LastPerTime
   \   000006B2   0968               LDR      R1,[R1, #+0]
   \   000006B4   401A               SUBS     R0,R0,R1
   \   000006B6   1060               STR      R0,[R2, #+0]
   1013                RF_LastPerTime=g_counter;
   \   000006B8   134A               LDR      R2,??RF_MasterExecut_19+0x40  ;; ??RF_LastPerTime
   \   000006BA   0F48               LDR      R0,??RF_MasterExecut_19+0x30  ;; g_counter
   \   000006BC   03C8               LDM      R0!,{R0,R1}
   \   000006BE   1060               STR      R0,[R2, #+0]
   \                     ??RF_MasterExecut_1:
   \   000006C0   03B0               ADD      SP,SP,#+12
   \   000006C2   F0BC               POP      {R4-R7}
   \   000006C4   01BC               POP      {R0}
   \   000006C6   0047               BX       R0               ;; return
   \                     ??RF_MasterExecut_19:
   \   000006C8   ........           DC32     NeuronsList
   \   000006CC   ........           DC32     TransQuality
   \   000006D0   0000F0FF           DC32     0xfff00000
   \   000006D4   0F0000FF           DC32     0xff00000f
   \   000006D8   F0FFFF00           DC32     0xfffff0
   \   000006DC   0000FFFF           DC32     0xffff0000
   \   000006E0   ........           DC32     RF_CurrentTask
   \   000006E4   ........           DC32     RF_TaskTab
   \   000006E8   A2030000           DC32     0x3a2
   \   000006EC   ........           DC32     MainStage
   \   000006F0   30F4FFFF           DC32     0xfffff430
   \   000006F4   ........           DC32     ButtonBipCounter
   \   000006F8   ........           DC32     g_counter
   \   000006FC   ........           DC32     RF_NodeTest
   \   00000700   ........           DC32     RF_NodeTest + 4
   \   00000704   ........           DC32     RF_Period
   \   00000708   ........           DC32     ??RF_LastPerTime
   1014              }
   1015            
   1016          
   1017          
   1018                   #ifdef _LIVE_RJESTR  
   1019               if (RF_TaskTab[RF_CurrentTask].Command.Order==R_RegOrd) 
   1020                {
   1021                   LIVE_TAB[LIVE_TAB_IDX]=0xA000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
   1022                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
   1023          
   1024                }else if (RF_TaskTab[RF_CurrentTask].Command.Order==W_RegOrd)  
   1025                {  
   1026                   LIVE_TAB[LIVE_TAB_IDX]=0xC000 | (((RF_TaskTab[RF_CurrentTask].Node)&0xF)<<8) | ((MainStage.StageQ[RF_TaskTab[RF_CurrentTask].Node].Port)&0xFF);
   1027                   if (LIVE_TAB_IDX<LIVE_TAB_SIZE) LIVE_TAB_IDX++; else LIVE_TAB_IDX=0;
   1028                }
   1029               #endif
   1030          
   1031            
   1032          }

   \                                 In section .data, align 1
   \                     ??RF_RememberTask:
   \   00000000   FF                 DC8 -1

   \                                 In section .bss, align 4
   \                     ??RF_LastPerTime:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     RF_Status + 22

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   ........           DC32     RF_Status + 20

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   ........           DC32     RF_Status + 19

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   19820000           DC32     0x8219

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   ........           DC32     SlaveMode

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     RF_Status + 13

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   33333333           DC32     0x33333333

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   3333D33F           DC32     0x3fd33333

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   C3F5285C           DC32     0x5c28f5c3

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   8FE28A40           DC32     0x408ae28f

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   00006940           DC32     0x40690000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   00FF04C1           DC32     0xc104ff00

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   ........           DC32     RF_Status + 40

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable29:
   \   00000000   ........           DC32     RF_Status + 19
   1033          
   1034          

   Maximum stack usage in bytes:

     Function        .cstack
     --------        -------
     IncCurentRfTask      8
     RF_ExecuteOrder     72
     RF_MasterExecut     32
     RF_ReciveFarm       16
     RF_SendData          8
     SwitchToMaster       8
     SwitchToSlave        8


   Section sizes:

     Function/Label      Bytes
     --------------      -----
     NODE_ID                4
     poprawnych             4
     RF_Period              4
     IndWys                 1
     IndWysNeg              1
     odb                    8
     licznik_cykli          4
     RF_TaskTab           560
     RF_CurrentTask         1
     RF_SpecialTask         1
     g_RF_TimeOutCounter    1
     ReadNodeSoftVersion    2
     RF_NodeTest           16
     BridgeMode             1
     SwitchToMaster       148
     SwitchToSlave        136
     pRF_Command            4
     RF_ReciveFarm        832
     RF_ExecuteOrder     3612
     RF_SendData           16
     IncCurentRfTask      268
     Switch                 1
     WaitToSwithToSlave     1
     RF_MasterExecut     1804
     RF_RememberTask        1
     RF_LastPerTime         4
     ??DataTable13          4
     ??DataTable14          4
     ??DataTable15          4
     ??DataTable16          4
     ??DataTable17          4
     ??DataTable18          4
     ??DataTable19          4
     ??DataTable20          4
     ??DataTable21          4
     ??DataTable22          4
     ??DataTable23          4
     ??DataTable24          4
     ??DataTable25          4
     ??DataTable29          4
      Others               66

 
   611 bytes in section .bss
     4 bytes in section .data
     4 bytes in section .rodata
 6 938 bytes in section Debug.txt
 
 6 872 bytes of CODE  memory (+ 66 bytes shared)
     4 bytes of CONST memory
   615 bytes of DATA  memory

Errors: none
Warnings: 32
