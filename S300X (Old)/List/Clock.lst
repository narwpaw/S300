###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           11/Sep/2013  19:44:42 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\Framework\Clock.c                             #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Clock.c" -D AT91SAM7S256 -D         #
#                    AT91SAM7SEK -D iH -D _LCD_NEGATIV_OLD_ -D __ALARM -D     #
#                    __WIFI_MODULE -D _DEBUG_ -D S300iOld -D _ADMINISTRATOR_  #
#                    -lC "D:\Zeuron\Projekty\S300\S300-program v1.4 -         #
#                    12.06.2013\S300X (Old)\List\" --diag_suppress Pa082 -o   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\S300X (Old)\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian little --cpu ARM7TDMI   #
#                    -e --fpu None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 5.0\ARM\INC\DLib_Config_Norma #
#                    l.h" -I "D:\Zeuron\Projekty\S300\S300-program v1.4 -     #
#                    12.06.2013\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v1.4 - 12.06.2013\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v1.4 - 12.06.2013\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v1.4 - 12.06.2013\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v1.4 -             #
#                    12.06.2013\Framework\Configuration\" -I "C:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    5.0\ARM\INC\" --section .text=Debug.txt --interwork      #
#                    --cpu_mode thumb -Ol                                     #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\List\Clock.lst                    #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v1.4 -              #
#                    12.06.2013\S300X (Old)\Obj\Clock.o                       #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Clock.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                 IASE Microcontroller Software Support                    *//                       
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : Clock.c                                  *//
      7          //*  Opis                         : Plik obs³ugi zegara czasu rzeczywistego  *//
      8          //*                                 DS1306                                   *//
      9          //*  Autor                        : Pawe³ Narwojsz                           *//
     10          //*  Data utrzorzenia             : 15.01.2009                               *//
     11          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     12          //*--------------------------------------------------------------------------*//
     13          //*                                                                          *//
     14          //*--------------------------------------------------------------------------*//
     15          //* Rejestr zmian  (data - opis):                                            *//
     16          //*                                                                          *//
     17          //*                               Brak zmian                                 *//
     18          //*                                                                          *//
     19          //*__________________________________________________________________________*// 
     20          //****************************************************************************//
     21          //****************************************************************************//
     22          
     23          
     24          
     25          //Konfiguracja -----------------------------------------------------------------
     26            
     27          //___________________________Koniec konfiguracji________________________________
     28          
     29          
     30          
     31          
     32          //Definicje --------------------------------------------------------------------
     33          
     34          //___________________________Koniec definicji___________________________________
     35          
     36          
     37          
     38          // Pliki do³¹czane -------------------------------------------------------------
     39               #include <intrinsics.h>
     40               #include "Framework.h"
     41               #include "core/device.h"                                                   //do³¹cza bibliotreki do odpowiedniego procesora
     42               #include "USART.h"

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v1.4 - 12.06.2013\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     43               #include "core/common.h"
     44               #include "core/board.h"
     45               #include "core/trace.h"
     46               #include "core/usb.h"
     47               #include "core/standard.h"
     48               #include "cdc.h"
     49               #include "serial_driver.h"
     50               #include "modbus.h"
     51               #include "main_H.h"
     52          
     53          
     54             #include "Clock.h"
     55             #include "spi_main.h"
     56          #include "Application_prog.h"
     57          //-----------------------Koniec plików do³¹czanych -----------------------------
     58          
     59          
     60          
     61          
     62          //Sta³e ------------------------------------------------------------------------
     63          
     64          //____________________________Koniec sta³ych ___________________________________
     65          
     66          
     67          
     68          
     69          
     70          //Zmienne globalne -------------------------------------------------------------
     71            extern _DateTime DateTime;                                                       //zienna daty i czasu

   \                                 In section .data, align 4
     72            _DateTime  *pDateTime    = &DateTime;
   \                     pDateTime:
   \   00000000   ........           DC32 DateTime
     73          //___________________________Koniec zmiennych globalnych________________________
     74          
     75          
     76          
     77          
     78          
     79          //Zmienne lokalne -------------------------------------------------------------
     80          
     81          //___________________________Koniec zmiennych lplkalnych________________________
     82          
     83          
     84          //Definicje --------------------------------------------------------------------
     85            #define order_read_sec      0x00
     86            #define order_read_min      0x01
     87            #define order_read_hour     0x02
     88            #define order_read_DayOfW   0x03
     89            #define order_read_day      0x04
     90            #define order_read_month    0x05
     91            #define order_read_year     0x06 
     92            #define order_set_sec       0x80
     93            #define order_set_min       0x81
     94            #define order_set_hour      0x82
     95            #define order_set_DayOfW    0x83
     96            #define order_set_day       0x84
     97            #define order_set_month     0x85
     98            #define order_set_year      0x86
     99            #define order_set_ChargerReg    0x91
    100            #define order_read_ChargerReg   0x11
    101            #define order_set_ComandReg     0x8F
    102          //___________________________Koniec definicji___________________________________
    103            
    104          
    105          //-----------------------------------------------------------------------------
    106          //! Nazwa funkcji :  InitRTC  
    107          //! Funkcja ustawieñ startowych RTC
    108          //-----------------------------------------------------------------------------
    109           

   \                                 In section Debug.txt, align 4, keep-with-next
    110          void InitRTC(void)  //ustawienia startowe RTC
    111          {
   \                     InitRTC:
   \   00000000   01B5               PUSH     {R0,LR}
    112          
    113            
    114             char command[] = {order_set_ComandReg,0x0,0};  //0x8F ustawienie rejestru CR
   \   00000002   6846               MOV      R0,SP
   \   00000004   0549               LDR      R1,??InitRTC_0   ;; `?<Constant {143, 0, 0}>`
   \   00000006   0A68               LDR      R2,[R1, #0]
   \   00000008   0260               STR      R2,[R0, #0]
    115             SPI_SendB_Buff(command,2,Cs_Clock);
   \   0000000A   0122               MOVS     R2,#+1
   \   0000000C   0221               MOVS     R1,#+2
   \   0000000E   6846               MOV      R0,SP
   \   00000010   ........           BL       SPI_SendB_Buff
    116          
    117          }//_____________________________________________________________________________
   \   00000014   01B0               ADD      SP,SP,#+4
   \   00000016   01BC               POP      {R0}
   \   00000018   0047               BX       R0               ;; return
   \   0000001A   C046               Nop      
   \                     ??InitRTC_0:
   \   0000001C   ........           DC32     `?<Constant {143, 0, 0}>`
    118          
    119              
    120              
    121          
    122          //-----------------------------------------------------------------------------
    123          //! Nazwa funkcji :  GetDateTime  
    124          //! Funkcja pobierania daty i czasu
    125          //-----------------------------------------------------------------------------
    126           

   \                                 In section Debug.txt, align 4, keep-with-next
    127          void GetDateTimeFromRTC(void)  //pobiera czas z zegara czasu rzeczywistego i wrzuca do zmiennej DateTime
    128          {
   \                     GetDateTimeFromRTC:
   \   00000000   07B5               PUSH     {R0-R2,LR}
    129          
    130            
    131             char command[] = {0x00,0x01,0x2,0x3, 0x4,0x5,0x6,0};
   \   00000002   6846               MOV      R0,SP
   \   00000004   0649               LDR      R1,??GetDateTimeFromRTC_0  ;; `?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>`
   \   00000006   0CC9               LDM      R1!,{R2,R3}
   \   00000008   0CC0               STM      R0!,{R2,R3}
   \   0000000A   0839               SUBS     R1,R1,#+8
   \   0000000C   0838               SUBS     R0,R0,#+8
    132             SPI_SendB_Buff(command,8,Cs_Clock);
   \   0000000E   0122               MOVS     R2,#+1
   \   00000010   0821               MOVS     R1,#+8
   \   00000012   6846               MOV      R0,SP
   \   00000014   ........           BL       SPI_SendB_Buff
    133              
    134              
    135          }//_____________________________________________________________________________
   \   00000018   03B0               ADD      SP,SP,#+12
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
   \   0000001E   C046               Nop      
   \                     ??GetDateTimeFromRTC_0:
   \   00000020   ........           DC32     `?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>`
    136          
    137          
    138          
    139          
    140          //-----------------------------------------------------------------------------
    141          //! Nazwa funkcji :  SetTime  
    142          //! Funkcja ustawiania czasu
    143          //-----------------------------------------------------------------------------

   \                                 In section .bss, align 4
    144          static  char ComandCLK[10];
   \                     ComandCLK:
   \   00000000                      DS8 12

   \                                 In section Debug.txt, align 4, keep-with-next
    145          void SetRTC_DateTime(void)               //Ustawinie: sekundy, minuty, godziny, dnia, miesi¹ca, roku
    146          {
   \                     SetRTC_DateTime:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    147          
    148          
    149            
    150          char Sec        = ((DateTime.Second/10)<<4)       |  ((DateTime.Second%10) &0xF);
   \   00000002   4548               LDR      R0,??SetRTC_DateTime_0  ;; DateTime + 5
   \   00000004   0078               LDRB     R0,[R0, #+0]
   \   00000006   0A21               MOVS     R1,#+10
   \   00000008   ........           BL       __aeabi_idivmod
   \   0000000C   0401               LSLS     R4,R0,#+4
   \   0000000E   4248               LDR      R0,??SetRTC_DateTime_0  ;; DateTime + 5
   \   00000010   0078               LDRB     R0,[R0, #+0]
   \   00000012   0A21               MOVS     R1,#+10
   \   00000014   ........           BL       __aeabi_idivmod
   \   00000018   0807               LSLS     R0,R1,#+28       ;; ZeroExtS R0,R1,#+28,#+28
   \   0000001A   000F               LSRS     R0,R0,#+28
   \   0000001C   2043               ORRS     R0,R0,R4
   \   0000001E   6946               MOV      R1,SP
   \   00000020   0870               STRB     R0,[R1, #+0]
    151          char Min        = ((DateTime.Minute/10)<<4)       |  ((DateTime.Minute%10) &0xF);
   \   00000022   3E48               LDR      R0,??SetRTC_DateTime_0+0x4  ;; DateTime + 4
   \   00000024   0078               LDRB     R0,[R0, #+0]
   \   00000026   0A21               MOVS     R1,#+10
   \   00000028   ........           BL       __aeabi_idivmod
   \   0000002C   0401               LSLS     R4,R0,#+4
   \   0000002E   3B48               LDR      R0,??SetRTC_DateTime_0+0x4  ;; DateTime + 4
   \   00000030   0078               LDRB     R0,[R0, #+0]
   \   00000032   0A21               MOVS     R1,#+10
   \   00000034   ........           BL       __aeabi_idivmod
   \   00000038   0807               LSLS     R0,R1,#+28       ;; ZeroExtS R0,R1,#+28,#+28
   \   0000003A   000F               LSRS     R0,R0,#+28
   \   0000003C   2043               ORRS     R0,R0,R4
   \   0000003E   6946               MOV      R1,SP
   \   00000040   4870               STRB     R0,[R1, #+1]
    152          char Hour       = ((DateTime.Hour/10)<<4)         |  ((DateTime.Hour%10) &0xF);
   \   00000042   3748               LDR      R0,??SetRTC_DateTime_0+0x8  ;; DateTime + 3
   \   00000044   0078               LDRB     R0,[R0, #+0]
   \   00000046   0A21               MOVS     R1,#+10
   \   00000048   ........           BL       __aeabi_idivmod
   \   0000004C   0501               LSLS     R5,R0,#+4
   \   0000004E   3448               LDR      R0,??SetRTC_DateTime_0+0x8  ;; DateTime + 3
   \   00000050   0078               LDRB     R0,[R0, #+0]
   \   00000052   0A21               MOVS     R1,#+10
   \   00000054   ........           BL       __aeabi_idivmod
   \   00000058   0C07               LSLS     R4,R1,#+28       ;; ZeroExtS R4,R1,#+28,#+28
   \   0000005A   240F               LSRS     R4,R4,#+28
   \   0000005C   2C43               ORRS     R4,R4,R5
    153          char Day        = ((DateTime.Day/10)<<4)          |  ((DateTime.Day%10) &0xF);
   \   0000005E   3148               LDR      R0,??SetRTC_DateTime_0+0xC  ;; DateTime + 2
   \   00000060   0078               LDRB     R0,[R0, #+0]
   \   00000062   0A21               MOVS     R1,#+10
   \   00000064   ........           BL       __aeabi_idivmod
   \   00000068   0601               LSLS     R6,R0,#+4
   \   0000006A   2E48               LDR      R0,??SetRTC_DateTime_0+0xC  ;; DateTime + 2
   \   0000006C   0078               LDRB     R0,[R0, #+0]
   \   0000006E   0A21               MOVS     R1,#+10
   \   00000070   ........           BL       __aeabi_idivmod
   \   00000074   0D07               LSLS     R5,R1,#+28       ;; ZeroExtS R5,R1,#+28,#+28
   \   00000076   2D0F               LSRS     R5,R5,#+28
   \   00000078   3543               ORRS     R5,R5,R6
    154          char Mounth     = ((DateTime.Mounth/10)<<4)       |  ((DateTime.Mounth%10) &0xF);
   \   0000007A   2B48               LDR      R0,??SetRTC_DateTime_0+0x10  ;; DateTime + 1
   \   0000007C   0078               LDRB     R0,[R0, #+0]
   \   0000007E   0A21               MOVS     R1,#+10
   \   00000080   ........           BL       __aeabi_idivmod
   \   00000084   0701               LSLS     R7,R0,#+4
   \   00000086   2848               LDR      R0,??SetRTC_DateTime_0+0x10  ;; DateTime + 1
   \   00000088   0078               LDRB     R0,[R0, #+0]
   \   0000008A   0A21               MOVS     R1,#+10
   \   0000008C   ........           BL       __aeabi_idivmod
   \   00000090   0E07               LSLS     R6,R1,#+28       ;; ZeroExtS R6,R1,#+28,#+28
   \   00000092   360F               LSRS     R6,R6,#+28
   \   00000094   3E43               ORRS     R6,R6,R7
    155          char Year       = ((DateTime.Year/10)<<4)         |  ((DateTime.Year%10) &0xF);
   \   00000096   2548               LDR      R0,??SetRTC_DateTime_0+0x14  ;; DateTime
   \   00000098   0078               LDRB     R0,[R0, #+0]
   \   0000009A   0A21               MOVS     R1,#+10
   \   0000009C   ........           BL       __aeabi_idivmod
   \   000000A0   0701               LSLS     R7,R0,#+4
   \   000000A2   2248               LDR      R0,??SetRTC_DateTime_0+0x14  ;; DateTime
   \   000000A4   0078               LDRB     R0,[R0, #+0]
   \   000000A6   0A21               MOVS     R1,#+10
   \   000000A8   ........           BL       __aeabi_idivmod
   \   000000AC   0807               LSLS     R0,R1,#+28       ;; ZeroExtS R0,R1,#+28,#+28
   \   000000AE   000F               LSRS     R0,R0,#+28
   \   000000B0   3843               ORRS     R0,R0,R7
   \   000000B2   0700               MOVS     R7,R0
    156          char DayOfWeek  = ((DateTime.DayOfWeek/10)<<4)    |  ((DateTime.DayOfWeek%10) &0xF);
   \   000000B4   1E48               LDR      R0,??SetRTC_DateTime_0+0x18  ;; DateTime + 6
   \   000000B6   0078               LDRB     R0,[R0, #+0]
   \   000000B8   0A21               MOVS     R1,#+10
   \   000000BA   ........           BL       __aeabi_idivmod
   \   000000BE   0001               LSLS     R0,R0,#+4
   \   000000C0   01B5               PUSH     {R0,LR}
   \   000000C2   1B48               LDR      R0,??SetRTC_DateTime_0+0x18  ;; DateTime + 6
   \   000000C4   0078               LDRB     R0,[R0, #+0]
   \   000000C6   0A21               MOVS     R1,#+10
   \   000000C8   ........           BL       __aeabi_idivmod
   \   000000CC   0907               LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   000000CE   090F               LSRS     R1,R1,#+28
   \   000000D0   0098               LDR      R0,[SP, #0]
   \   000000D2   02B0               ADD      SP,SP,#+8
   \   000000D4   0143               ORRS     R1,R1,R0
    157            
    158          ComandCLK[0]=0x80;
   \   000000D6   1748               LDR      R0,??SetRTC_DateTime_0+0x1C  ;; ComandCLK
   \   000000D8   8022               MOVS     R2,#+128
   \   000000DA   0270               STRB     R2,[R0, #+0]
    159          ComandCLK[1]=Sec;
   \   000000DC   1648               LDR      R0,??SetRTC_DateTime_0+0x20  ;; ComandCLK + 1
   \   000000DE   6A46               MOV      R2,SP
   \   000000E0   1278               LDRB     R2,[R2, #+0]
   \   000000E2   0270               STRB     R2,[R0, #+0]
    160          ComandCLK[2]=Min;
   \   000000E4   1548               LDR      R0,??SetRTC_DateTime_0+0x24  ;; ComandCLK + 2
   \   000000E6   6A46               MOV      R2,SP
   \   000000E8   5278               LDRB     R2,[R2, #+1]
   \   000000EA   0270               STRB     R2,[R0, #+0]
    161          ComandCLK[3]=Hour;
   \   000000EC   1448               LDR      R0,??SetRTC_DateTime_0+0x28  ;; ComandCLK + 3
   \   000000EE   0470               STRB     R4,[R0, #+0]
    162          ComandCLK[4]=DayOfWeek;
   \   000000F0   1448               LDR      R0,??SetRTC_DateTime_0+0x2C  ;; ComandCLK + 4
   \   000000F2   0170               STRB     R1,[R0, #+0]
    163          ComandCLK[5]=Day;
   \   000000F4   1448               LDR      R0,??SetRTC_DateTime_0+0x30  ;; ComandCLK + 5
   \   000000F6   0570               STRB     R5,[R0, #+0]
    164          ComandCLK[6]=Mounth;
   \   000000F8   1448               LDR      R0,??SetRTC_DateTime_0+0x34  ;; ComandCLK + 6
   \   000000FA   0670               STRB     R6,[R0, #+0]
    165          ComandCLK[7]=Year;
   \   000000FC   1448               LDR      R0,??SetRTC_DateTime_0+0x38  ;; ComandCLK + 7
   \   000000FE   0770               STRB     R7,[R0, #+0]
    166          ComandCLK[8]=0;
   \   00000100   1448               LDR      R0,??SetRTC_DateTime_0+0x3C  ;; ComandCLK + 8
   \   00000102   0021               MOVS     R1,#+0
   \   00000104   0170               STRB     R1,[R0, #+0]
    167          //  char comand[]={0x80, Sec, Min, Hour, DayOfWeek, Day, Mounth, Year}; 
    168          int DTS=8;
   \   00000106   0821               MOVS     R1,#+8
    169            SPI_SendB_Buff(ComandCLK,DTS,Cs_Clock); 
   \   00000108   0122               MOVS     R2,#+1
   \   0000010A   0A48               LDR      R0,??SetRTC_DateTime_0+0x1C  ;; ComandCLK
   \   0000010C   ........           BL       SPI_SendB_Buff
    170            
    171             
    172          }//_____________________________________________________________________________
   \   00000110   01B0               ADD      SP,SP,#+4
   \   00000112   F0BC               POP      {R4-R7}
   \   00000114   01BC               POP      {R0}
   \   00000116   0047               BX       R0               ;; return
   \                     ??SetRTC_DateTime_0:
   \   00000118   ........           DC32     DateTime + 5
   \   0000011C   ........           DC32     DateTime + 4
   \   00000120   ........           DC32     DateTime + 3
   \   00000124   ........           DC32     DateTime + 2
   \   00000128   ........           DC32     DateTime + 1
   \   0000012C   ........           DC32     DateTime
   \   00000130   ........           DC32     DateTime + 6
   \   00000134   ........           DC32     ComandCLK
   \   00000138   ........           DC32     ComandCLK + 1
   \   0000013C   ........           DC32     ComandCLK + 2
   \   00000140   ........           DC32     ComandCLK + 3
   \   00000144   ........           DC32     ComandCLK + 4
   \   00000148   ........           DC32     ComandCLK + 5
   \   0000014C   ........           DC32     ComandCLK + 6
   \   00000150   ........           DC32     ComandCLK + 7
   \   00000154   ........           DC32     ComandCLK + 8
    173          
    174          
    175          
    176          
    177          
    178          //-----------------------------------------------------------------------------
    179          //! Nazwa funkcji :    SPI_Response_Interpretation
    180          //! Funkcja interpretacji danych otrzymanych z lini SPI
    181          //  Buffer_Tx - parametr funkcji zawieraj¹cy wskanik do danych wys³anych odebranych
    182          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    183          char SPI_Clock_Execute(char *Buffer_Tx, char *Buffer_Rx)                                       
    184          {
   \                     SPI_Clock_Execute:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0200               MOVS     R2,R0
    185              char res=0; 
   \   00000004   0020               MOVS     R0,#+0
    186              switch (*Buffer_Tx)
   \   00000006   1378               LDRB     R3,[R2, #+0]
   \   00000008   002B               CMP      R3,#+0
   \   0000000A   1BD0               BEQ      ??SPI_Clock_Execute_0
   \   0000000C   112B               CMP      R3,#+17
   \   0000000E   15D0               BEQ      ??SPI_Clock_Execute_1
   \   00000010   802B               CMP      R3,#+128
   \   00000012   02D0               BEQ      ??SPI_Clock_Execute_2
   \   00000014   912B               CMP      R3,#+145
   \   00000016   13D0               BEQ      ??SPI_Clock_Execute_3
   \   00000018   78E0               B        ??SPI_Clock_Execute_4
    187              {
    188          
    189                case order_set_sec:                                                       //wykonano ustawienie sekundy jako czêæ ustawiania godziny/daty  
    190                     for (char i=0; i<16; i++)
   \                     ??SPI_Clock_Execute_2:
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   08E0               B        ??SPI_Clock_Execute_5
    191                     {
    192                       Buffer_Tx[i]=0;
   \                     ??SPI_Clock_Execute_6:
   \   0000001E   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000020   000E               LSRS     R0,R0,#+24
   \   00000022   0023               MOVS     R3,#+0
   \   00000024   1354               STRB     R3,[R2, R0]
    193                       Buffer_Rx[i]=0;
   \   00000026   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000028   000E               LSRS     R0,R0,#+24
   \   0000002A   0023               MOVS     R3,#+0
   \   0000002C   0B54               STRB     R3,[R1, R0]
    194                     }
   \   0000002E   401C               ADDS     R0,R0,#+1
   \                     ??SPI_Clock_Execute_5:
   \   00000030   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000032   000E               LSRS     R0,R0,#+24
   \   00000034   1028               CMP      R0,#+16
   \   00000036   F2D3               BCC      ??SPI_Clock_Execute_6
    195                     res = 8;
   \   00000038   0820               MOVS     R0,#+8
   \   0000003A   67E0               B        ??SPI_Clock_Execute_4
    196                break;
    197          
    198                case order_read_ChargerReg:                                                       //wykonano ustawienie sekundy jako czêæ ustawiania godziny/daty  
    199          
    200                     res = 2;
   \                     ??SPI_Clock_Execute_1:
   \   0000003C   0220               MOVS     R0,#+2
   \   0000003E   65E0               B        ??SPI_Clock_Execute_4
    201                break;
    202          
    203                case order_set_ChargerReg:                                                       //wykonano ustawienie sekundy jako czêæ ustawiania godziny/daty  
    204          
    205                     res = 2;
   \                     ??SPI_Clock_Execute_3:
   \   00000040   0220               MOVS     R0,#+2
   \   00000042   63E0               B        ??SPI_Clock_Execute_4
    206                break;      
    207                
    208                
    209                case order_read_sec:                                                      //wykonano odczyt sekundy jako czêæ odczytu godziny/daty  
    210                    
    211                  
    212                  
    213                   pDateTime->Second     = (Buffer_Rx[0]&0xf) +  ((Buffer_Rx[0]>>4)&0x7)*10;
   \                     ??SPI_Clock_Execute_0:
   \   00000044   3448               LDR      R0,??SPI_Clock_Execute_7  ;; pDateTime
   \   00000046   0068               LDR      R0,[R0, #+0]
   \   00000048   0B78               LDRB     R3,[R1, #+0]
   \   0000004A   1B07               LSLS     R3,R3,#+28       ;; ZeroExtS R3,R3,#+28,#+28
   \   0000004C   1B0F               LSRS     R3,R3,#+28
   \   0000004E   0C78               LDRB     R4,[R1, #+0]
   \   00000050   2411               ASRS     R4,R4,#+4
   \   00000052   6407               LSLS     R4,R4,#+29       ;; ZeroExtS R4,R4,#+29,#+29
   \   00000054   640F               LSRS     R4,R4,#+29
   \   00000056   0A25               MOVS     R5,#+10
   \   00000058   6C43               MULS     R4,R5,R4
   \   0000005A   1B19               ADDS     R3,R3,R4
   \   0000005C   4371               STRB     R3,[R0, #+5]
    214                   pDateTime->Minute     = (Buffer_Rx[5]&0xf) +  ((Buffer_Rx[5]>>4)&0x7)*10;
   \   0000005E   2E48               LDR      R0,??SPI_Clock_Execute_7  ;; pDateTime
   \   00000060   0068               LDR      R0,[R0, #+0]
   \   00000062   4B79               LDRB     R3,[R1, #+5]
   \   00000064   1B07               LSLS     R3,R3,#+28       ;; ZeroExtS R3,R3,#+28,#+28
   \   00000066   1B0F               LSRS     R3,R3,#+28
   \   00000068   4C79               LDRB     R4,[R1, #+5]
   \   0000006A   2411               ASRS     R4,R4,#+4
   \   0000006C   6407               LSLS     R4,R4,#+29       ;; ZeroExtS R4,R4,#+29,#+29
   \   0000006E   640F               LSRS     R4,R4,#+29
   \   00000070   0A25               MOVS     R5,#+10
   \   00000072   6C43               MULS     R4,R5,R4
   \   00000074   1B19               ADDS     R3,R3,R4
   \   00000076   0371               STRB     R3,[R0, #+4]
    215                   pDateTime->Hour       = (Buffer_Rx[4]&0xf) +  ((Buffer_Rx[4]>>4)&0x3)*10;
   \   00000078   2748               LDR      R0,??SPI_Clock_Execute_7  ;; pDateTime
   \   0000007A   0068               LDR      R0,[R0, #+0]
   \   0000007C   0B79               LDRB     R3,[R1, #+4]
   \   0000007E   1B07               LSLS     R3,R3,#+28       ;; ZeroExtS R3,R3,#+28,#+28
   \   00000080   1B0F               LSRS     R3,R3,#+28
   \   00000082   0C79               LDRB     R4,[R1, #+4]
   \   00000084   2411               ASRS     R4,R4,#+4
   \   00000086   A407               LSLS     R4,R4,#+30       ;; ZeroExtS R4,R4,#+30,#+30
   \   00000088   A40F               LSRS     R4,R4,#+30
   \   0000008A   0A25               MOVS     R5,#+10
   \   0000008C   6C43               MULS     R4,R5,R4
   \   0000008E   1B19               ADDS     R3,R3,R4
   \   00000090   C370               STRB     R3,[R0, #+3]
    216                   pDateTime->DayOfWeek  = Buffer_Rx[9];
   \   00000092   2148               LDR      R0,??SPI_Clock_Execute_7  ;; pDateTime
   \   00000094   0068               LDR      R0,[R0, #+0]
   \   00000096   4B7A               LDRB     R3,[R1, #+9]
   \   00000098   8371               STRB     R3,[R0, #+6]
    217                   pDateTime->Day        = (Buffer_Rx[8]&0xf) +  ((Buffer_Rx[8]>>4)&0x3)*10;
   \   0000009A   1F48               LDR      R0,??SPI_Clock_Execute_7  ;; pDateTime
   \   0000009C   0068               LDR      R0,[R0, #+0]
   \   0000009E   0B7A               LDRB     R3,[R1, #+8]
   \   000000A0   1B07               LSLS     R3,R3,#+28       ;; ZeroExtS R3,R3,#+28,#+28
   \   000000A2   1B0F               LSRS     R3,R3,#+28
   \   000000A4   0C7A               LDRB     R4,[R1, #+8]
   \   000000A6   2411               ASRS     R4,R4,#+4
   \   000000A8   A407               LSLS     R4,R4,#+30       ;; ZeroExtS R4,R4,#+30,#+30
   \   000000AA   A40F               LSRS     R4,R4,#+30
   \   000000AC   0A25               MOVS     R5,#+10
   \   000000AE   6C43               MULS     R4,R5,R4
   \   000000B0   1B19               ADDS     R3,R3,R4
   \   000000B2   8370               STRB     R3,[R0, #+2]
    218                   pDateTime->Mounth     = (Buffer_Rx[13]&0xf) +  ((Buffer_Rx[13]>>4)&0x3)*10;
   \   000000B4   1848               LDR      R0,??SPI_Clock_Execute_7  ;; pDateTime
   \   000000B6   0068               LDR      R0,[R0, #+0]
   \   000000B8   4B7B               LDRB     R3,[R1, #+13]
   \   000000BA   1B07               LSLS     R3,R3,#+28       ;; ZeroExtS R3,R3,#+28,#+28
   \   000000BC   1B0F               LSRS     R3,R3,#+28
   \   000000BE   4C7B               LDRB     R4,[R1, #+13]
   \   000000C0   2411               ASRS     R4,R4,#+4
   \   000000C2   A407               LSLS     R4,R4,#+30       ;; ZeroExtS R4,R4,#+30,#+30
   \   000000C4   A40F               LSRS     R4,R4,#+30
   \   000000C6   0A25               MOVS     R5,#+10
   \   000000C8   6C43               MULS     R4,R5,R4
   \   000000CA   1B19               ADDS     R3,R3,R4
   \   000000CC   4370               STRB     R3,[R0, #+1]
    219                   pDateTime->Year       = (Buffer_Rx[12]&0xf) +  ((Buffer_Rx[12]>>4)&0xF)*10;
   \   000000CE   1248               LDR      R0,??SPI_Clock_Execute_7  ;; pDateTime
   \   000000D0   0068               LDR      R0,[R0, #+0]
   \   000000D2   0B7B               LDRB     R3,[R1, #+12]
   \   000000D4   1B07               LSLS     R3,R3,#+28       ;; ZeroExtS R3,R3,#+28,#+28
   \   000000D6   1B0F               LSRS     R3,R3,#+28
   \   000000D8   0C7B               LDRB     R4,[R1, #+12]
   \   000000DA   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000DC   240E               LSRS     R4,R4,#+24
   \   000000DE   2409               LSRS     R4,R4,#+4
   \   000000E0   2406               LSLS     R4,R4,#+24       ;; ZeroExtS R4,R4,#+24,#+24
   \   000000E2   240E               LSRS     R4,R4,#+24
   \   000000E4   0A25               MOVS     R5,#+10
   \   000000E6   6C43               MULS     R4,R5,R4
   \   000000E8   1B19               ADDS     R3,R3,R4
   \   000000EA   0370               STRB     R3,[R0, #+0]
    220               
    221          
    222                   TRACE_INFO("%d:", pDateTime->Hour); 
    223                   TRACE_INFO("%d:", pDateTime->Minute); 
    224                   TRACE_INFO("%d     ", pDateTime->Second);  
    225                   TRACE_INFO("%d-", pDateTime->Day);  
    226                   TRACE_INFO("%d-", pDateTime->Mounth);  
    227                   TRACE_INFO("%d    ", pDateTime->Year);  
    228                    TRACE_INFO("\n\r");  
    229                  
    230                    for (char i=0; i<16; i++)
   \   000000EC   0020               MOVS     R0,#+0
   \   000000EE   08E0               B        ??SPI_Clock_Execute_8
    231                     {
    232                       Buffer_Tx[i]=0;
   \                     ??SPI_Clock_Execute_9:
   \   000000F0   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000F2   000E               LSRS     R0,R0,#+24
   \   000000F4   0023               MOVS     R3,#+0
   \   000000F6   1354               STRB     R3,[R2, R0]
    233                       Buffer_Rx[i]=0;
   \   000000F8   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   000000FA   000E               LSRS     R0,R0,#+24
   \   000000FC   0023               MOVS     R3,#+0
   \   000000FE   0B54               STRB     R3,[R1, R0]
    234                     }
   \   00000100   401C               ADDS     R0,R0,#+1
   \                     ??SPI_Clock_Execute_8:
   \   00000102   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   00000104   000E               LSRS     R0,R0,#+24
   \   00000106   1028               CMP      R0,#+16
   \   00000108   F2D3               BCC      ??SPI_Clock_Execute_9
    235                    
    236                     res = 8;
   \   0000010A   0820               MOVS     R0,#+8
    237                break;
    238                
    239          
    240                
    241          
    242                
    243                
    244              }
    245          
    246             return res;
   \                     ??SPI_Clock_Execute_4:
   \   0000010C   0006               LSLS     R0,R0,#+24       ;; ZeroExtS R0,R0,#+24,#+24
   \   0000010E   000E               LSRS     R0,R0,#+24
   \   00000110   01B0               ADD      SP,SP,#+4
   \   00000112   30BC               POP      {R4,R5}
   \   00000114   02BC               POP      {R1}
   \   00000116   0847               BX       R1               ;; return
   \                     ??SPI_Clock_Execute_7:
   \   00000118   ........           DC32     pDateTime
    247          }//_____________________________________________________________________________

   \                                 In section .rodata, align 4
   \                     `?<Constant {143, 0, 0}>`:
   \   00000000   8F000000           DC8 143, 0, 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>`:
   \   00000000   000102030405       DC8 0, 1, 2, 3, 4, 5, 6, 0
   \              0600        
    248          
    249          

   Maximum stack usage in bytes:

     Function           .cstack
     --------           -------
     GetDateTimeFromRTC     16
     InitRTC                 8
     SPI_Clock_Execute      16
     SetRTC_DateTime        32


   Section sizes:

     Function/Label                 Bytes
     --------------                 -----
     pDateTime                         4
     InitRTC                          32
     GetDateTimeFromRTC               36
     ComandCLK                        12
     SetRTC_DateTime                 344
     SPI_Clock_Execute               284
     ?<Constant {143, 0, 0}>           4
     ?<Constant {0, 1, 2, 3, 4, 5, 6, 0}>
                                       8

 
  12 bytes in section .bss
   4 bytes in section .data
  12 bytes in section .rodata
 696 bytes in section Debug.txt
 
 696 bytes of CODE  memory
  12 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: 1
