###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           28/Jun/2012  18:44:55 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    18.05.2012\core\device.c                                 #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\core\device.c" -D AT91SAM7S256 -D             #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -lC        #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\S300X\List\" --diag_suppress Pa082 -o         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\S300X\Obj\" --no_unroll --no_inline           #
#                    --no_tbaa --no_scheduling --debug --endian little --cpu  #
#                    ARM7TDMI -e --fpu None --dlib_config "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v0.6 - 18.05.2012\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v0.6 - 18.05.2012\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v0.6 - 18.05.2012\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\Framework\Configuration\" -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=Debug.txt --interwork --cpu_mode thumb   #
#                    -Om                                                      #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    18.05.2012\S300X\List\device.lst                         #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    18.05.2012\S300X\Obj\device.o                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v0.6 - 18.05.2012\core\device.c
      1          /* ----------------------------------------------------------------------------
      2           *         ATMEL Microcontroller Software Support  -  ROUSSET  -
      3           * ----------------------------------------------------------------------------
      4           * Copyright (c) 2006, Atmel Corporation
      5          
      6           * All rights reserved.
      7           *
      8           * Redistribution and use in source and binary forms, with or without
      9           * modification, are permitted provided that the following conditions are met:
     10           *
     11           * - Redistributions of source code must retain the above copyright notice,
     12           * this list of conditions and the disclaiimer below.
     13           *
     14           * - Redistributions in binary form must reproduce the above copyright notice,
     15           * this list of conditions and the disclaimer below in the documentation and/or
     16           * other materials provided with the distribution.
     17           *
     18           * Atmel's name may not be used to endorse or promote products derived from
     19           * this software without specific prior written permission.
     20           *
     21           * DISCLAIMER: THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR
     22           * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     23           * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
     24           * DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, INDIRECT,
     25           * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     26           * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
     27           * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     28           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     29           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
     30           * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     31           * ----------------------------------------------------------------------------
     32           */
     33          
     34          /*
     35          $Id: device.c,v 1.1.2.1 2006/12/05 08:33:25 danielru Exp $
     36          */
     37          
     38          //------------------------------------------------------------------------------
     39          //      Includes
     40          //------------------------------------------------------------------------------
     41          
     42          #include "common.h"
     43          #include "device.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgOutput:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   0161               STR      R1,[R0, #+16]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgInput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgInput:
   \   00000000   4161               STR      R1,[R0, #+20]
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPullup(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgPullup:
   \   00000000   CA43               MVNS     R2,R1
   \   00000002   0266               STR      R2,[R0, #+96]
   \   00000004   4166               STR      R1,[R0, #+100]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_ClearOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_ClearOutput:
   \   00000000   4163               STR      R1,[R0, #+52]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_CfgMCKReg(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_CfgMCKReg:
   \   00000000   0163               STR      R1,[R0, #+48]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_CKGR_CfgPLLReg(AT91PS_CKGR, unsigned int)
   \                     AT91F_CKGR_CfgPLLReg:
   \   00000000   C160               STR      R1,[R0, #+12]
   \   00000002   7047               BX       LR               ;; return
     44          #include "board.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void BRD_SetFlashWaitStates()
   \                     BRD_SetFlashWaitStates:
   \   00000000   9F20               MOVS     R0,#+159
   \   00000002   C043               MVNS     R0,R0            ;; #-160
   \   00000004   0168               LDR      R1,[R0, #+0]
   \   00000006   8022               MOVS     R2,#+128
   \   00000008   5200               LSLS     R2,R2,#+1        ;; #+256
   \   0000000A   0A43               ORRS     R2,R2,R1
   \   0000000C   0260               STR      R2,[R0, #+0]
   \   0000000E   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_BUTTON_Init()
   \                     AT91F_BUTTON_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   0F48               LDR      R0,??AT91F_BUTTON_Init_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   0F4C               LDR      R4,??AT91F_BUTTON_Init_0+0x4  ;; 0xfffff400
   \   0000000C   8021               MOVS     R1,#+128
   \   0000000E   0903               LSLS     R1,R1,#+12       ;; #+524288
   \   00000010   2000               MOVS     R0,R4
   \   00000012   ........           BL       AT91F_PIO_CfgInput
   \   00000016   8021               MOVS     R1,#+128
   \   00000018   4903               LSLS     R1,R1,#+13       ;; #+1048576
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   ........           BL       AT91F_PIO_CfgInput
   \   00000020   8021               MOVS     R1,#+128
   \   00000022   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000024   2000               MOVS     R0,R4
   \   00000026   ........           BL       AT91F_PIO_CfgInput
   \   0000002A   8021               MOVS     R1,#+128
   \   0000002C   C901               LSLS     R1,R1,#+7        ;; #+16384
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       AT91F_PIO_CfgInput
   \   00000034   C621               MOVS     R1,#+198
   \   00000036   4903               LSLS     R1,R1,#+13       ;; #+1622016
   \   00000038   2000               MOVS     R0,R4
   \   0000003A   ........           BL       AT91F_PIO_CfgPullup
   \   0000003E   10BC               POP      {R4}
   \   00000040   01BC               POP      {R0}
   \   00000042   0047               BX       R0               ;; return
   \                     ??AT91F_BUTTON_Init_0:
   \   00000044   00FCFFFF           DC32     0xfffffc00
   \   00000048   00F4FFFF           DC32     0xfffff400
     45          
     46          //------------------------------------------------------------------------------
     47          //      Exported functions
     48          //------------------------------------------------------------------------------
     49          //------------------------------------------------------------------------------
     50          // \brief   Low-level initialization of the chip.
     51          //------------------------------------------------------------------------------
     52          #pragma location="ICODE"

   \                                 In section ICODE, align 4, keep-with-next
     53          int __low_level_init(void)
     54          {
   \                     __low_level_init:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
     55              // PIO Controller initialization for low-power consumption
     56          
     57          #if defined(AT91SAM7SEK) || defined(AT91SAM7SEEK) || defined(AT91SAM7XEK)
     58            
     59          
     60              // PIOA
     61              // Set to 1 output PIO
     62             AT91F_PIO_ClearOutput( AT91C_BASE_PIOA, 0xFFFFFFFF );
   \   00000002   0C4C               LDR      R4,??__low_level_init_0  ;; 0xfffff400
   \   00000004   0025               MOVS     R5,#+0
   \   00000006   ED43               MVNS     R5,R5            ;; #-1
   \   00000008   2900               MOVS     R1,R5
   \   0000000A   2000               MOVS     R0,R4
   \   0000000C   ........           BL       AT91F_PIO_ClearOutput
     63              // Enable PIO in output mode
     64             AT91F_PIO_CfgOutput( AT91C_BASE_PIOA, 0xFFFFFFFF );
   \   00000010   2900               MOVS     R1,R5
   \   00000012   2000               MOVS     R0,R4
   \   00000014   ........           BL       AT91F_PIO_CfgOutput
     65              // Disable pullup on PIO
     66              AT91F_PIO_CfgPullup( AT91C_BASE_PIOA, 0x00000000 );
   \   00000018   0021               MOVS     R1,#+0
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   ........           BL       AT91F_PIO_CfgPullup
     67              // Init Buttons
     68              AT91F_BUTTON_Init();
   \   00000020   ........           BL       AT91F_BUTTON_Init
     69          #endif
     70          
     71          #if defined(AT91SAM7SEEK) || defined (AT91SAM7XEK)
     72              // PIOB
     73              // Set to 1 output PIO
     74              AT91F_PIO_SetOutput( AT91C_BASE_PIOB, 0xFFFFFFFF );
     75              // Enable PIO in output mode
     76              AT91F_PIO_CfgOutput( AT91C_BASE_PIOB, 0xFFFFFFFF );
     77              // Disable pullup on PIO
     78              AT91F_PIO_CfgPullup( AT91C_BASE_PIOB, 0x00000000 );
     79              // Init Buttons
     80              AT91F_BUTTON_Init();
     81          #endif
     82          
     83          #if defined(AT91SAM9261EK) || defined(AT91SAM9260EK) || defined(AT91RM9200)
     84              // Init Buttons
     85              AT91F_BUTTON_Init();
     86          #endif
     87          
     88          #if defined(AT91SAM7SEEK)
     89              // PIOC
     90              // Set to 1 output PIO
     91              AT91F_PIO_SetOutput( AT91C_BASE_PIOC, 0xFFFFFFFF );
     92              // Enable PIO in output mode
     93              AT91F_PIO_CfgOutput( AT91C_BASE_PIOC, 0xFFFFFFFF );
     94              // Disable pullup on PIO
     95              AT91F_PIO_CfgPullup( AT91C_BASE_PIOC, 0x00000000 );
     96          #endif
     97          
     98          
     99          #if !defined(AT91RM9200)
    100              // Disable the watchdog
    101             /* AT91C_BASE_WDTC->WDTC_WDMR = AT91C_WDTC_WDDIS;
    102          
    103              // Enable user reset: assertion length programmed to 1ms
    104              AT91C_BASE_RSTC->RSTC_RMR = AT91C_RSTC_URSTEN | (0x4 << 8)
    105                                          | ((unsigned int) 0xA5 << 24);
    106              */
    107          #endif
    108          
    109              // Flash wait states
    110              BRD_SetFlashWaitStates();
   \   00000024   ........           BL       BRD_SetFlashWaitStates
    111          
    112              // Start clocks
    113              DEV_Resume();
   \   00000028   ........           BL       DEV_Resume
    114            return 1; // Must return 1 to initialize C data.
   \   0000002C   0120               MOVS     R0,#+1
   \   0000002E   38BC               POP      {R3-R5}
   \   00000030   02BC               POP      {R1}
   \   00000032   0847               BX       R1               ;; return
   \                     ??__low_level_init_0:
   \   00000034   00F4FFFF           DC32     0xfffff400
    115          }
    116          
    117          //------------------------------------------------------------------------------
    118          // \brief   Puts the device back into a normal operation mode
    119          //------------------------------------------------------------------------------
    120          #pragma location="ICODE"

   \                                 In section ICODE, align 4, keep-with-next
    121          void DEV_Resume(void)
    122          {
   \                     DEV_Resume:
   \   00000000   10B5               PUSH     {R4,LR}
    123          
    124          #if defined(AT91SAM7SEK) || defined(AT91SAM7SEEK) \
    125              || defined(AT91SAM7XEK) || defined(AT91SAM7A3EK)
    126          
    127              // Enable Main Oscillator
    128              // Main Oscillator startup time is board specific:
    129              // Main Oscillator Startup Time (18432KHz) corresponds to 1.5ms
    130              // (0x08 for AT91C_CKGR_OSCOUNT field)
    131              #if defined(AT91SAM7SEK) || defined(AT91SAM7SEEK) || defined(AT91SAM7XEK)
    132              AT91C_BASE_PMC->PMC_MOR = (AT91C_CKGR_OSCOUNT & (0x8 << 8))
    133                                        | AT91C_CKGR_MOSCEN;
   \   00000002   ....               LDR      R0,??DataTable3  ;; 0xfffffc20
   \   00000004   0E49               LDR      R1,??DEV_Resume_0  ;; 0x801
   \   00000006   0160               STR      R1,[R0, #+0]
   \   00000008   ....               LDR      R0,??DataTable2  ;; 0xfffffc68
    134              #elif defined(AT91SAM7A3EK)
    135              AT91C_BASE_PMC->PMC_MOR = (AT91C_CKGR_OSCOUNT & (0x40 << 8))
    136                                        | AT91C_CKGR_MOSCEN;
    137              #endif
    138          
    139              // Wait until the oscillator is stabilized
    140             while (!ISSET(AT91C_BASE_PMC->PMC_SR, AT91C_PMC_MOSCS));   
   \                     ??DEV_Resume_1:
   \   0000000A   0168               LDR      R1,[R0, #+0]
   \   0000000C   C907               LSLS     R1,R1,#+31
   \   0000000E   FCD5               BPL      ??DEV_Resume_1
    141          
    142              // Set PLL to 96MHz (96,109MHz) and UDP Clock to 48MHz
    143              // PLL Startup time depends on PLL RC filter
    144              // UDP Clock (48,058MHz) is compliant with the Universal Serial Bus
    145              // Specification (+/- 0.25% for full speed)
    146              AT91C_BASE_PMC->PMC_PLLR = AT91C_CKGR_USBDIV_1
    147                                         | AT91C_CKGR_OUT_0
    148                                         | (AT91C_CKGR_PLLCOUNT & (0x28 << 8))
    149                                         | (AT91C_CKGR_MUL & (0x48 << 16))
    150                                         | (AT91C_CKGR_DIV & 0xE);
   \   00000010   0C49               LDR      R1,??DEV_Resume_0+0x4  ;; 0xfffffc2c
   \   00000012   0D4A               LDR      R2,??DEV_Resume_0+0x8  ;; 0x1048280e
   \   00000014   0A60               STR      R2,[R1, #+0]
   \   00000016   0421               MOVS     R1,#+4
   \   00000018   0B00               MOVS     R3,R1
    151          
    152              // Wait until the PLL is stabilized
    153           while(!ISSET(AT91C_BASE_PMC->PMC_SR, AT91C_PMC_LOCK));  
   \                     ??DEV_Resume_2:
   \   0000001A   0268               LDR      R2,[R0, #+0]
   \   0000001C   1A42               TST      R2,R3
   \   0000001E   FCD0               BEQ      ??DEV_Resume_2
    154          
    155              // Selection of Master Clock MCK (equal to Processor Clock PCK) equal to
    156              // PLL/2 = 48MHz
    157              // The PMC_MCKR register must not be programmed in a single write operation
    158              // (see. Product Errata Sheet)
    159              AT91C_BASE_PMC->PMC_MCKR = AT91C_PMC_PRES_CLK_2;
   \   00000020   0A4A               LDR      R2,??DEV_Resume_0+0xC  ;; 0xfffffc30
   \   00000022   1160               STR      R1,[R2, #+0]
   \   00000024   0821               MOVS     R1,#+8
    160              while (!ISSET(AT91C_BASE_PMC->PMC_SR, AT91C_PMC_MCKRDY)); 
   \                     ??DEV_Resume_3:
   \   00000026   0368               LDR      R3,[R0, #+0]
   \   00000028   0B42               TST      R3,R1
   \   0000002A   FCD0               BEQ      ??DEV_Resume_3
    161          
    162              SET(AT91C_BASE_PMC->PMC_MCKR, AT91C_PMC_CSS_PLL_CLK);
   \   0000002C   1368               LDR      R3,[R2, #+0]
   \   0000002E   0324               MOVS     R4,#+3
   \   00000030   1C43               ORRS     R4,R4,R3
   \   00000032   1460               STR      R4,[R2, #+0]
    163             while (!ISSET(AT91C_BASE_PMC->PMC_SR, AT91C_PMC_MCKRDY));  
   \                     ??DEV_Resume_4:
   \   00000034   0268               LDR      R2,[R0, #+0]
   \   00000036   0A42               TST      R2,R1
   \   00000038   FCD0               BEQ      ??DEV_Resume_4
    164          
    165          #elif defined(AT91SAM9261EK)
    166              AT91C_BASE_PMC->PMC_IDR = 0xFFFFFFFF;
    167          
    168              // Setup the PLL A
    169              AT91C_BASE_CKGR->CKGR_PLLAR = 0x2060BF09; // crystal= 18.432MHz
    170          
    171              while (!(*AT91C_PMC_SR & AT91C_PMC_LOCKA));
    172          
    173              // Switch Master Clock from PLLB to PLLA/2
    174              AT91C_BASE_PMC->PMC_MCKR = AT91C_PMC_CSS_PLLA_CLK | AT91C_PMC_PRES_CLK
    175                                       | AT91C_PMC_MDIV_2;
    176              while (!(*AT91C_PMC_SR & AT91C_PMC_MCKRDY));
    177          
    178          #elif defined(AT91SAM9260EK)
    179              AT91C_BASE_PMC->PMC_IDR = 0xFFFFFFFF;
    180          
    181              // Setup the PLL B
    182              AT91C_BASE_CKGR->CKGR_PLLBR = PLLBR; // crystal= 18.432MHz
    183          
    184              while (!(*AT91C_PMC_SR & AT91C_PMC_LOCKB));
    185          
    186          #elif defined(AT91RM9200)
    187          
    188              // Checking the Main Oscillator Frequency (Optional)
    189              volatile char    tmp    = 0;
    190          
    191              AT91F_PIOD_CfgPMC();  // VBUS
    192              // Checking the Main Oscillator Frequency (Optional)
    193              // Determine the main clock frequency
    194              while(!(AT91C_BASE_CKGR->CKGR_MCFR & AT91C_CKGR_MAINRDY) && (tmp++ < 100));
    195          
    196          #endif
    197          
    198          }
   \   0000003A   10BC               POP      {R4}
   \   0000003C   01BC               POP      {R0}
   \   0000003E   0047               BX       R0               ;; return
   \                     ??DEV_Resume_0:
   \   00000040   01080000           DC32     0x801
   \   00000044   2CFCFFFF           DC32     0xfffffc2c
   \   00000048   0E284810           DC32     0x1048280e
   \   0000004C   30FCFFFF           DC32     0xfffffc30
    199          
    200          //------------------------------------------------------------------------------
    201          // \brief   Puts the device into low-power mode.
    202          //------------------------------------------------------------------------------
    203          #pragma location="ICODE"

   \                                 In section ICODE, align 4, keep-with-next
    204          void DEV_Suspend()
    205          {
   \                     DEV_Suspend:
   \   00000000   70B5               PUSH     {R4-R6,LR}
    206          #if defined(AT91SAM7SEK) || defined(AT91SAM7SEEK) || defined(AT91SAM7XEK)
    207          
    208              // Voltage regulator in standby mode : Enable VREG Low Power Mode
    209              AT91C_BASE_VREG->VREG_MR |= AT91C_VREG_PSTDBY;
   \   00000002   1048               LDR      R0,??DEV_Suspend_0  ;; 0xfffffd60
   \   00000004   0168               LDR      R1,[R0, #+0]
   \   00000006   0122               MOVS     R2,#+1
   \   00000008   0A43               ORRS     R2,R2,R1
   \   0000000A   0260               STR      R2,[R0, #+0]
    210          
    211              // Set the master clock on slow clock
    212              AT91F_PMC_CfgMCKReg(AT91C_BASE_PMC, AT91C_PMC_PRES_CLK_2);
   \   0000000C   0E4E               LDR      R6,??DEV_Suspend_0+0x4  ;; 0xfffffc00
   \   0000000E   0421               MOVS     R1,#+4
   \   00000010   3000               MOVS     R0,R6
   \   00000012   ........           BL       AT91F_PMC_CfgMCKReg
   \   00000016   0824               MOVS     R4,#+8
   \   00000018   ....               LDR      R5,??DataTable2  ;; 0xfffffc68
    213              while (!ISSET(AT91C_BASE_PMC->PMC_SR, AT91C_PMC_MCKRDY));
   \                     ??DEV_Suspend_1:
   \   0000001A   2868               LDR      R0,[R5, #+0]
   \   0000001C   2042               TST      R0,R4
   \   0000001E   FCD0               BEQ      ??DEV_Suspend_1
    214          
    215              AT91F_PMC_CfgMCKReg(AT91C_BASE_PMC, AT91C_PMC_CSS_SLOW_CLK);
   \   00000020   0021               MOVS     R1,#+0
   \   00000022   3000               MOVS     R0,R6
   \   00000024   ........           BL       AT91F_PMC_CfgMCKReg
    216              while (!ISSET(AT91C_BASE_PMC->PMC_SR, AT91C_PMC_MCKRDY));
   \                     ??DEV_Suspend_2:
   \   00000028   2868               LDR      R0,[R5, #+0]
   \   0000002A   2042               TST      R0,R4
   \   0000002C   FCD0               BEQ      ??DEV_Suspend_2
    217          
    218              // Disable the PLL
    219              AT91F_CKGR_CfgPLLReg(AT91C_BASE_CKGR, 0);
   \   0000002E   ....               LDR      R4,??DataTable3  ;; 0xfffffc20
   \   00000030   0021               MOVS     R1,#+0
   \   00000032   2000               MOVS     R0,R4
   \   00000034   ........           BL       AT91F_CKGR_CfgPLLReg
    220          
    221              // Disable the main Oscillator
    222              AT91C_BASE_PMC->PMC_MOR = 0;
   \   00000038   0020               MOVS     R0,#+0
   \   0000003A   2060               STR      R0,[R4, #+0]
    223          
    224          #elif defined(AT91SAM7A3) || defined(AT91RM9200) || defined(AT91SAM9260EK) \
    225             || defined(AT91SAM9261EK)|| defined(AT91SAM9263EK)
    226          
    227          #endif
    228          }
   \   0000003C   70BC               POP      {R4-R6}
   \   0000003E   01BC               POP      {R0}
   \   00000040   0047               BX       R0               ;; return
   \   00000042   C046               Nop      
   \                     ??DEV_Suspend_0:
   \   00000044   60FDFFFF           DC32     0xfffffd60
   \   00000048   00FCFFFF           DC32     0xfffffc00

   \                                 In section ICODE, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   68FCFFFF           DC32     0xfffffc68

   \                                 In section ICODE, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   20FCFFFF           DC32     0xfffffc20
    229          

   Maximum stack usage in bytes:

     Function                    .cstack
     --------                    -------
     AT91F_BUTTON_Init                8
     AT91F_CKGR_CfgPLLReg             0
     AT91F_PIO_CfgInput               0
     AT91F_PIO_CfgOutput              0
     AT91F_PIO_CfgPullup              0
     AT91F_PIO_ClearOutput            0
     AT91F_PMC_CfgMCKReg              0
     AT91F_PMC_EnablePeriphClock      0
     BRD_SetFlashWaitStates           0
     DEV_Resume                       8
     DEV_Suspend                     16
     __low_level_init                16


   Section sizes:

     Function/Label              Bytes
     --------------              -----
     AT91F_PIO_CfgOutput            6
     AT91F_PIO_CfgInput             6
     AT91F_PIO_CfgPullup            8
     AT91F_PIO_ClearOutput          4
     AT91F_PMC_EnablePeriphClock    4
     AT91F_PMC_CfgMCKReg            4
     AT91F_CKGR_CfgPLLReg           4
     BRD_SetFlashWaitStates        16
     AT91F_BUTTON_Init             76
     __low_level_init              56
     DEV_Resume                    80
     DEV_Suspend                   76
     ??DataTable2                   4
     ??DataTable3                   4

 
 128 bytes in section Debug.txt
 220 bytes in section ICODE
 
 220 bytes of CODE memory (+ 128 bytes shared)

Errors: none
Warnings: none
