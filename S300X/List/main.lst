###############################################################################
#                                                                             #
# IAR ARM ANSI C/C++ Compiler V5.10.5.372/W32           04/Jul/2012  21:50:38 #
# Copyright 1999-2007 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    18.05.2012\Framework\main.c                              #
#    Command line =  "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\Framework\main.c" -D AT91SAM7S256 -D          #
#                    AT91SAM7SEK -D iH -D __ALARM -D __WIFI_MODULE -lC        #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\S300X\List\" --diag_suppress Pa082 -o         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\S300X\Obj\" --no_unroll --no_inline           #
#                    --no_tbaa --no_scheduling --debug --endian little --cpu  #
#                    ARM7TDMI -e --fpu None --dlib_config "C:\Program         #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    5.0\ARM\INC\DLib_Config_Normal.h" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\lib\AT91SAM7S256\" -I                         #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\lib\AT91SAM7S64\" -I                          #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\" -I "D:\Zeuron\Projekty\S300\S300-program    #
#                    v0.6 - 18.05.2012\cdc\" -I "D:\Zeuron\Projekty\S300\S300 #
#                    -program v0.6 - 18.05.2012\core\" -I                     #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\startup\" -I "D:\Zeuron\Projekty\S300\S300-pr #
#                    ogram v0.6 - 18.05.2012\Framework\" -I                   #
#                    "D:\Zeuron\Projekty\S300\S300-program v0.6 -             #
#                    18.05.2012\Framework\Configuration\" -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 5.0\ARM\INC\"       #
#                    --section .text=Debug.txt --interwork --cpu_mode thumb   #
#                    -Om                                                      #
#    List file    =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    18.05.2012\S300X\List\main.lst                           #
#    Object file  =  D:\Zeuron\Projekty\S300\S300-program v0.6 -              #
#                    18.05.2012\S300X\Obj\main.o                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\Zeuron\Projekty\S300\S300-program v0.6 - 18.05.2012\Framework\main.c
      1          //****************************************************************************//
      2          //*--------------------------------------------------------------------------*//
      3          //*                                 CEURON                                   *//                     
      4          //*--------------------------------------------------------------------------*//
      5          //*--------------------------------------------------------------------------*//
      6          //*  Nazwa pliku                  : main.c                                   *//
      7          //*  Opis                         : G³ówny plik programu                     *//
      8          //*  Autor                        : Pawe³ Narwojsz                           *//
      9          //*  Data utrzorzenia             : 10.09.2007                               *//
     10          //*  Data ostatniej modyfikacji   : --.--.----                               *//
     11          //*--------------------------------------------------------------------------*//
     12          //*                                                                          *//
     13          //*--------------------------------------------------------------------------*//
     14          //* Rejestr zmian  (data - opis):                                            *//
     15          //*                                                                          *//
     16          //*                               Brak zmian                                 *//
     17          //*                                                                          *//
     18          //*__________________________________________________________________________*// 
     19          //****************************************************************************//
     20          //****************************************************************************//
     21            
     22          
     23          
     24          //Sta³e ------------------------------------------------------------------------

   \                                 In section .rodata, align 4
     25              const char identyfikacja[]="S300 ";                                          //nazwa urz¹dzeni 
   \                     identyfikacja:
   \   00000000   533330302000       DC8 "S300 "
   \   00000006   0000               DC8 0, 0

   \                                 In section .rodata, align 4
     26              const char system[]="0.6 ";                                                  //nazwa urz¹dzeni 
   \                     system:
   \   00000000   302E362000         DC8 "0.6 "
   \   00000005   000000             DC8 0, 0, 0
     27              //const char identyfikacja[]="SMC3_148";                                    //nazwa urz¹dzeni 
     28              
     29          //____________________________Koniec sta³ych ___________________________________
     30          
     31          
     32          
     33          //Konfiguracja -----------------------------------------------------------------
     34              #define LightLCD_Time              10                                     //czas (s sek.) wygaszania podœwietlenia
     35          //___________________________Koniec konfiguracji________________________________
     36          
     37          
     38          
     39          
     40          //Definicje --------------------------------------------------------------------
     41              #define MSG_SIZE 	                1000                                    
     42              #define TAB_SIZE                    1000                                    
     43              #define USB_BUFFER_SIZE             256                                     //bufor odbiorczy USB  
     44             
     45             // #define NOTRACES                                                            //Wy³¹cza debagowania poprzez US1
     46              
     47          //___________________________Koniec definicji___________________________________
     48          
     49          
     50          
     51          // Pliki do³¹czane -------------------------------------------------------------
     52          
     53               #include "main_H.h"

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_AIC_ConfigureIt(AT91PS_AIC, unsigned int, unsigned int, unsigned int, void (*)())
   \                     AT91F_AIC_ConfigureIt:
   \   00000000   F5B4               PUSH     {R0,R2,R4-R7}
   \   00000002   0200               MOVS     R2,R0
   \   00000004   0C00               MOVS     R4,R1
   \   00000006   069E               LDR      R6,[SP, #+24]
   \   00000008   A100               LSLS     R1,R4,#+2
   \   0000000A   5718               ADDS     R7,R2,R1
   \   0000000C   8037               ADDS     R7,R7,#+128
   \   0000000E   3868               LDR      R0,[R7, #+0]
   \   00000010   0125               MOVS     R5,#+1
   \   00000012   A540               LSLS     R5,R5,R4
   \   00000014   2C00               MOVS     R4,R5
   \   00000016   9225               MOVS     R5,#+146
   \   00000018   6D00               LSLS     R5,R5,#+1        ;; #+292
   \   0000001A   5519               ADDS     R5,R2,R5
   \   0000001C   2C60               STR      R4,[R5, #+0]
   \   0000001E   3E60               STR      R6,[R7, #+0]
   \   00000020   019E               LDR      R6,[SP, #+4]
   \   00000022   1E43               ORRS     R6,R6,R3
   \   00000024   5650               STR      R6,[R2, R1]
   \   00000026   6C60               STR      R4,[R5, #+4]
   \   00000028   FCBC               POP      {R2-R7}
   \   0000002A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_AIC_EnableIt(AT91PS_AIC, unsigned int)
   \                     AT91F_AIC_EnableIt:
   \   00000000   9022               MOVS     R2,#+144
   \   00000002   5200               LSLS     R2,R2,#+1        ;; #+288
   \   00000004   0123               MOVS     R3,#+1
   \   00000006   8B40               LSLS     R3,R3,R1
   \   00000008   8350               STR      R3,[R0, R2]
   \   0000000A   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgOutput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgOutput:
   \   00000000   0160               STR      R1,[R0, #+0]
   \   00000002   0161               STR      R1,[R0, #+16]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgInput(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgInput:
   \   00000000   4161               STR      R1,[R0, #+20]
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_CfgPullup(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_CfgPullup:
   \   00000000   CA43               MVNS     R2,R1
   \   00000002   0266               STR      R2,[R0, #+96]
   \   00000004   4166               STR      R1,[R0, #+100]
   \   00000006   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PIO_InterruptEnable(AT91PS_PIO, unsigned int)
   \                     AT91F_PIO_InterruptEnable:
   \   00000000   0164               STR      R1,[R0, #+64]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int AT91F_PIO_GetInterruptStatus(AT91PS_PIO)
   \                     AT91F_PIO_GetInterruptStatus:
   \   00000000   C06C               LDR      R0,[R0, #+76]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_PMC_EnablePeriphClock(AT91PS_PMC, unsigned int)
   \                     AT91F_PMC_EnablePeriphClock:
   \   00000000   0161               STR      R1,[R0, #+16]
   \   00000002   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_WDTRestart(AT91PS_WDTC)
   \                     AT91F_WDTRestart:
   \   00000000   0149               LDR      R1,??AT91F_WDTRestart_0  ;; 0xa5000001
   \   00000002   0160               STR      R1,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??AT91F_WDTRestart_0:
   \   00000008   010000A5           DC32     0xa5000001

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void AT91F_LCD_Init()
   \                     AT91F_LCD_Init:
   \   00000000   10B5               PUSH     {R4,LR}
   \   00000002   0421               MOVS     R1,#+4
   \   00000004   2748               LDR      R0,??AT91F_LCD_Init_0  ;; 0xfffffc00
   \   00000006   ........           BL       AT91F_PMC_EnablePeriphClock
   \   0000000A   274C               LDR      R4,??AT91F_LCD_Init_0+0x4  ;; 0xfffff400
   \   0000000C   0421               MOVS     R1,#+4
   \   0000000E   2000               MOVS     R0,R4
   \   00000010   ........           BL       AT91F_PIO_CfgOutput
   \   00000014   0821               MOVS     R1,#+8
   \   00000016   2000               MOVS     R0,R4
   \   00000018   ........           BL       AT91F_PIO_CfgOutput
   \   0000001C   8021               MOVS     R1,#+128
   \   0000001E   C905               LSLS     R1,R1,#+23       ;; #+1073741824
   \   00000020   2000               MOVS     R0,R4
   \   00000022   ........           BL       AT91F_PIO_CfgOutput
   \   00000026   8021               MOVS     R1,#+128
   \   00000028   8905               LSLS     R1,R1,#+22       ;; #+536870912
   \   0000002A   2000               MOVS     R0,R4
   \   0000002C   ........           BL       AT91F_PIO_CfgOutput
   \   00000030   8021               MOVS     R1,#+128
   \   00000032   4905               LSLS     R1,R1,#+21       ;; #+268435456
   \   00000034   2000               MOVS     R0,R4
   \   00000036   ........           BL       AT91F_PIO_CfgOutput
   \   0000003A   8021               MOVS     R1,#+128
   \   0000003C   0905               LSLS     R1,R1,#+20       ;; #+134217728
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   ........           BL       AT91F_PIO_CfgOutput
   \   00000044   1021               MOVS     R1,#+16
   \   00000046   2000               MOVS     R0,R4
   \   00000048   ........           BL       AT91F_PIO_CfgOutput
   \   0000004C   8021               MOVS     R1,#+128
   \   0000004E   4900               LSLS     R1,R1,#+1        ;; #+256
   \   00000050   2000               MOVS     R0,R4
   \   00000052   ........           BL       AT91F_PIO_CfgOutput
   \   00000056   8021               MOVS     R1,#+128
   \   00000058   C904               LSLS     R1,R1,#+19       ;; #+67108864
   \   0000005A   2000               MOVS     R0,R4
   \   0000005C   ........           BL       AT91F_PIO_CfgOutput
   \   00000060   8021               MOVS     R1,#+128
   \   00000062   8904               LSLS     R1,R1,#+18       ;; #+33554432
   \   00000064   2000               MOVS     R0,R4
   \   00000066   ........           BL       AT91F_PIO_CfgOutput
   \   0000006A   8021               MOVS     R1,#+128
   \   0000006C   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   0000006E   2000               MOVS     R0,R4
   \   00000070   ........           BL       AT91F_PIO_CfgOutput
   \   00000074   8021               MOVS     R1,#+128
   \   00000076   4902               LSLS     R1,R1,#+9        ;; #+65536
   \   00000078   2000               MOVS     R0,R4
   \   0000007A   ........           BL       AT91F_PIO_CfgOutput
   \   0000007E   8021               MOVS     R1,#+128
   \   00000080   0904               LSLS     R1,R1,#+16       ;; #+8388608
   \   00000082   2000               MOVS     R0,R4
   \   00000084   ........           BL       AT91F_PIO_CfgOutput
   \   00000088   0121               MOVS     R1,#+1
   \   0000008A   2000               MOVS     R0,R4
   \   0000008C   ........           BL       AT91F_PIO_CfgOutput
   \   00000090   0648               LDR      R0,??AT91F_LCD_Init_0+0x8  ;; 0xfffff430
   \   00000092   0749               LDR      R1,??AT91F_LCD_Init_0+0xC  ;; 0x7e00811c
   \   00000094   0160               STR      R1,[R0, #+0]
   \   00000096   0748               LDR      R0,??AT91F_LCD_Init_0+0x10  ;; 0xfffff434
   \   00000098   0821               MOVS     R1,#+8
   \   0000009A   0160               STR      R1,[R0, #+0]
   \   0000009C   10BC               POP      {R4}
   \   0000009E   01BC               POP      {R0}
   \   000000A0   0047               BX       R0               ;; return
   \   000000A2   C046               Nop      
   \                     ??AT91F_LCD_Init_0:
   \   000000A4   00FCFFFF           DC32     0xfffffc00
   \   000000A8   00F4FFFF           DC32     0xfffff400
   \   000000AC   30F4FFFF           DC32     0xfffff430
   \   000000B0   1C81007E           DC32     0x7e00811c
   \   000000B4   34F4FFFF           DC32     0xfffff434

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void *USB_GetDriverInterface(S_usb const *)
   \                     USB_GetDriverInterface:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetDriverID(S_usb const *)
   \                     USB_GetDriverID:
   \   00000000   0068               LDR      R0,[R0, #+0]
   \   00000002   C068               LDR      R0,[R0, #+12]
   \   00000004   7047               BX       LR               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Handler(S_usb const *)
   \                     USB_Handler:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   896A               LDR      R1,[R1, #+40]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork bool USB_Attach(S_usb const *)
   \                     USB_Attach:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C969               LDR      R1,[R1, #+28]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   02BC               POP      {R1}
   \   00000010   0847               BX       R1               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Connect(S_usb const *)
   \                     USB_Connect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   C96A               LDR      R1,[R1, #+44]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork void USB_Disconnect(S_usb const *)
   \                     USB_Disconnect:
   \   00000000   01B5               PUSH     {R0,LR}
   \   00000002   0168               LDR      R1,[R0, #+0]
   \   00000004   4969               LDR      R1,[R1, #+20]
   \   00000006   096B               LDR      R1,[R1, #+48]
   \   00000008   ........           BL       __iar_via_R1
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return

   \                                 In section Debug.txt, align 4
   \   __??Code16?? __code __interwork unsigned int USB_GetState(S_usb const *)
   \                     USB_GetState:
   \   00000000   4069               LDR      R0,[R0, #+20]
   \   00000002   0068               LDR      R0,[R0, #+0]
   \   00000004   0004               LSLS     R0,R0,#+16
   \   00000006   000C               LSRS     R0,R0,#+16
   \   00000008   7047               BX       LR               ;; return

                                          
                                          ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 18.05.2012\Framework\Configuration\InterruptPriority.h",59  Warning[Pe001]: 
          last line of file ends without a newline
     54               #include "WizFi.h"

   
   ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 18.05.2012\Framework\WizFi.h",146  Warning[Pe001]: 
          last line of file ends without a newline
     55          
     56          
     57          
     58          //-----------------------Koniec plików do³¹czanych -----------------------------
     59          
     60          
     61          
     62          
     63          
     64          
     65          
     66          
     67          
     68          

   \                                 In section .bss, align 1
     69          char APC;
   \                     APC:
   \   00000000                      DS8 1
     70          
     71          
     72          
     73          
     74          
     75          //Zmienne globalne -------------------------------------------------------------

   \                                 In section .data, align 1
     76              char g_czas_petli = 10;                                                     //  Czas przebiegu pêtli programu w ms
   \                     g_czas_petli:
   \   00000000   0A                 DC8 10

   \                                 In section .bss, align 4
     77              unsigned int komunikacja_ok=0;                                              //1-ok, 0-brak
   \                     komunikacja_ok:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     78              int  rej_prog[10];
   \                     rej_prog:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
     79              int LifeCouter = 0, LifeCouterMax = 0;                                      // Zmienne funkcji LifeBlinking
   \                     LifeCouter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     LifeCouterMax:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     80              byte USB_busy;
   \                     USB_busy:
   \   00000000                      DS8 1
     81              int FlashProgramOfset =  256;                                               //0-wykonywany program A, 
     82              int FlashProgramReserveOfset =  256+UseProgramSize;                         //0-wykonywany program A, 

   \                                 In section .bss, align 4
     83              int  advY =0;                                                                  //chwilowa wspolzedna Y TP
   \                     advY:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     84              int  advX =0;                                                                  //chwilowa wspolzedna X TP
   \                     advX:
   \   00000000                      DS8 4
     85               signed short  Y_down  =-1;                                                           //wspolzedna Y TP (naciœniêcie)
     86               signed short  X_down  =-1;                                                           //wspolzedna X TP (naciœniêcie)
     87               signed short  Y_up    =-1;                                                           //wspolzedna Y TP (puszczenie)
     88               signed short  X_up    =-1;                                                           //wspolzedna X TP (puszczenie)

   \                                 In section .bss, align 4
     89              int  g_leng  =0;                                                            //jêzyk 1-polski, 2 angielski
   \                     g_leng:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     90              char g_level =0;                                                            //poziom dostêpu 0-ograniczony, 1- operator, 2-administrator
   \                     g_level:
   \   00000000                      DS8 1
     91              char g_Password_1[8]={"1111"};                                              //haslo poziomu 1  
     92              char g_Password_2[8]={"2222"};                                              //haslo poziomu 1  

   \                                 In section .bss, align 4
     93              long int g_Message =0;                                                             //1-wiadomosc ekranowa
   \                     g_Message:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     94              int g_info=0;                                                                   
   \                     g_info:
   \   00000000                      DS8 4
     95              char g_PC_Connected;                                                       //1-pod³aczony komputer
     96              unsigned long long  g_counter;                                              //globalny licznik milisekundowy od w³¹czenia/restartu sterownika
     97              unsigned long       g_seconds_counter;                                      //globalny licznik sekundowy od w³¹czenia/restartu sterownika
     98              
     99          //    static char US0_Buffer[US_BUFFER_SIZE];                                    //bufor odbiorczy USART 0
    100          //    static char US0_Buffer2[US_BUFFER_SIZE];                                   //zapasowy bufor odbiorczy USART 0
    101              char AdressModbus = 1;                                                      //Adres urz¹dzenia dla protoko³u modbus
    102              int g_LightCouterLCD = 0;                                                   //licznik podœwietlenia lcd
    103              char g_LightLCDEnable = 0;                                                   //podœwietlenia lcd
    104              char g_ScreenSever_On;                                                      //1-Wygaszacz aktywny
    105              char g_ScreenSever_Time_On;                                                 //godzina w³¹czenia wygaszacz
    106              char g_ScreenSever_Time_Off;                                                //godzina wy³¹czenia wygaszacza
    107              char g_SlaveConnect=0;                                                   //
    108              char g_Stop_Program = 0;                                                    //1- zatrzymuje program
    109              char g_Restart_Program = 1;                                                 //1- restartuje program
    110              unsigned long long g_NextTimeProgram = 0;                                                    //
    111              char g_NeedPass=0;  //wymóg has³a
    112              char AlarmOn=0;                                                             //1=alarm dzwiêkowy
    113              char Speaker[SPK_Amount];                                                   //sygna³ dŸwiêkowy
    114              _AlarmScreenActionType AlarmScreenAction;
    115              _Net NET; 
    116              //___________________________Koniec zmiennych globalnych________________________
    117          
    118          
    119          
    120          
    121          
    122          //Zmienne lokalne -------------------------------------------------------------

   \                                 In section .bss, align 1
    123              char LightLCD_OFF_Counter;                                                  //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    124              char LightLCD_OFF_Counter2;                                                 //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Counter2:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    125              char LightLCD_OFF_Curent;                                                   //zmiena œciemniacza LCD
   \                     LightLCD_OFF_Curent:
   \   00000000                      DS8 1
    126              volatile char SlaveMode=0;
    127          //___________________________Koniec zmiennych lplkalnych________________________
    128          
    129          
    130              
    131               
    132          
    133              
    134          
    135          //Zmienne zewnêtrzne -------------------------------------------------------------    
    136              extern char       LCD_Canvas[8][128];
    137              extern char       Label_move;
    138              extern int        MenuLevel;      //poziom menu
    139              extern int        Suw_poz_analog;  
    140              extern int        ScrollMenu_poz;
    141              extern char       g_US0_Connect_OK;
    142              extern char       g_US1_Connect_OK;
    143              extern char       g_US0_Comm_TIMEOUT;
    144              extern _ZD_MODBUS ZD_MODBUS_0[ZD_MODBUS_Tab_Max];
    145              extern char       g_Ans_ZD_MODBUS_0;
    146              extern char       g_Current_ZD_MODBUS_0;
    147              extern char       g_ERR_ZD_MODBUS_0;
    148              extern int        g_US0_Comm_MinCykle;
    149              extern char       US0_MasterMODBUS_ENABLE;
    150              extern char       g_US1_Comm_TIMEOUT;
    151              extern _ZD_MODBUS ZD_MODBUS_1[ZD_MODBUS_Tab_Max];
    152              extern char       g_Ans_ZD_MODBUS_1;
    153              extern char       g_Current_ZD_MODBUS_1;
    154              extern char       g_ERR_ZD_MODBUS_1;
    155              extern int        g_US1_Comm_MinCykle;
    156              extern char       US1_MasterMODBUS_ENABLE;
    157              extern char       Busy_program;
    158              extern _Trap      Trap;
    159              extern _Correct korekta_Y;
    160              extern _Correct korekta_X;
    161              extern  char Synchronizacja;
    162              extern char         RF_CurrentTask;
    163              //extern unsigned char  SPI_Buffer_Rx[SPI_Read_BUFFER_SIZE];                         //bufor odbiorczy SPI
    164              //extern unsigned char  SPI_Buffer_Tx[SPI_Write_BUFFER_SIZE];                        //bufor odbiorczy SPI
    165              extern void ReadWriteSpi (unsigned char* pReadBuffer, int nReadLen, unsigned char* pWriteBuffer, int nWriteLen, bool bHoldCS);
    166              extern void SPI_init(void) ;
    167              
    168              extern _MainStage  MainStage; 
    169              extern _ProgramTab gProg;
    170              extern void RF_Init(void);
    171              extern _RF_Status RF_Status;
    172              extern char g_RF_TimeOutCounter;
    173              extern   _RF_TaskTab  RF_TaskTab;
    174              extern _TransQuality TransQuality;
    175              extern _DateTime  *pDateTime;
    176              extern char Variables[];
    177              extern unsigned int CyklPerSek;
    178              extern char Buff_TX_1[];
    179              AT91PS_MEM pAT91C_IFLASH_MEM=AT91C_IFLASH_MEM;
    180              extern short int VariablesAnal[];
    181              extern char Variables[];
    182              extern unsigned char  US1_Buffer[];
    183              
    184          //___________________________Koniec zmiennych zewnêtrznych________________________    
    185              
    186              
    187              
    188          //Zmienne tymczasowe -----------------------------------------------------------

   \                                 In section .bss, align 1
    189              char tmp_i =0; 
   \                     tmp_i:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    190              float licznik = 0.0;
   \                     licznik:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    191              int licznik2 = 0;
   \                     licznik2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    192              int licznik3 = 0;
   \                     licznik3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    193              char *memory;
   \                     memory:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    194              unsigned long sss;
   \                     sss:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    195              int int1 =0;
   \                     int1:
   \   00000000                      DS8 4
    196              
    197          
    198              _DateTime DateTime;
    199              
    200               
    201              //___________________________Koniec zmiennych tymczasowych______________________
    202          
    203          
    204              
    205          
    206          //Funkcje zewnêtrzne -----------------------------------------------------------
    207              extern RAM ram;
    208              extern ConversFC Convers_DW_B;
    209              extern void InitFlash(void);
    210              extern void Program (_ProgramTab *ProgTab);
    211              extern void at91flashWriteDW(int sektor, int nr_DW, unsigned long wartDW );
    212              extern void ScreenEvent(void);
    213              extern int Suw_poz;
    214              extern void MenuPaint(void);
    215              extern void at91flashWrite();
    216              extern void ConfigureIrBus(void);
    217              extern void MenuRefresh();
    218              //extern unsigned short crc16(unsigned char* modbusframe,int Length);
    219              //extern unsigned char ModBus_CommS(unsigned char* modbusframe);
    220              //extern void ModBus_CommS_US0();
    221              extern void US0_init(void);
    222              extern void US1_init(void);
    223              extern char ModBus_MASTER_TX(char US_Nr);
    224              extern void ReadTP(_TPoint *Point);
    225              //extern BYTE ModBus_MASTER_Return(BYTE* modbusframe);
    226          //_______________________ Koniec funkcji zewnêtrznych __________________________
    227              
    228          
    229          /*
    230          $Id: serial_example.c,v 1.1.2.1 2006/12/05 08:33:25 danielru Exp $
    231          */
    232          
    233          
    234          
    235          
    236          //------------------------------------------------------------------------------
    237          //      Prototypes
    238          //------------------------------------------------------------------------------
    239          
    240          //! \brief  Initialization callback
    241          static void CBK_Init(const S_usb *pUsb);
    242          
    243          //! \brief  Suspend callback
    244          static void CBK_Suspend(const S_usb *pUsb);
    245          
    246          //! \brief  Resume callback
    247          static void CBK_Resume(const S_usb *pUsb);
    248          
    249          //! \brief  New request callback
    250          static void CBK_NewRequest(const S_usb *pUsb);
    251          
    252          //! \brief  New reset callback
    253          //static void CBK_Reset(const S_usb *pUsb);
    254          
    255          //! \brief  New SOF callback
    256          //static void CBK_SOF(const S_usb *pUsb);
    257          
    258          //------------------------------------------------------------------------------
    259          //      Internal variables
    260          //------------------------------------------------------------------------------
    261          
    262          //! \brief  List of endpoints (including endpoint 0) used by the device.
    263          //! \see    S_usb_endpoint
    264          static S_usb_endpoint pEndpoints[] = {
    265          
    266              USB_ENDPOINT_SINGLEBANK, // Control endpoint 0
    267              USB_ENDPOINT_DUALBANK,   // Data out endpoint
    268              USB_ENDPOINT_DUALBANK,   // Data in endpoint
    269              USB_ENDPOINT_SINGLEBANK, // Notification endpoint
    270          };
    271          
    272          //! \brief  Variable used to store the last received SETUP packet.
    273          //! \see    S_usb_request
    274          //! \see    S_usb

   \                                 In section .bss, align 4
    275          static S_usb_request sSetup;
   \                     sSetup:
   \   00000000                      DS8 8
    276          
    277          //! \brief  Variable used to store the current device state
    278          //! \see    S_usb

   \                                 In section .bss, align 4
    279          static unsigned int dState;
   \                     dState:
   \   00000000                      DS8 4
    280          
    281          //! \brief  List of implemented callbacks
    282          //! \see    S_usb_callbacks
    283          //! \see    S_usb

   \                                 In section .rodata, align 4
    284          static const S_usb_callbacks sCallbacks = {
   \                     sCallbacks:
   \   00000000   ........0000       DC32 CBK_Init, 0H, 0H, CBK_Resume, CBK_NewRequest, 0H
   \              000000000000
   \              ............
   \              ....00000000
    285          
    286              CBK_Init,
    287              0, // CBK_Reset
    288              0, //CBK_Suspend,
    289              CBK_Resume,
    290              CBK_NewRequest,
    291              0  // CBK_SOF
    292          };
    293          
    294          //! \brief  USB driver instance
    295          //! \see    S_usb

   \                                 In section .rodata, align 4
    296          static const S_usb sUsb = {
   \                     sUsb:
   \   00000000   ............       DC32 sDefaultDriver, pEndpoints, 4, sCallbacks, sSetup, dState
   \              ....04000000
   \              ............
   \              ............
    297          
    298              &sDefaultDriver,
    299              pEndpoints,
    300              SER_NUM_ENDPOINTS,
    301              &sCallbacks,
    302              &sSetup,
    303              &dState
    304          };
    305          
    306          //! \brief  CDC serial class driver instance
    307          //! \see    S_ser
    308          static S_ser sSer;
    309          
    310          // Buffer for receiving data from the USB
    311          static unsigned char pUsbBuffer[USB_BUFFER_SIZE];
    312          
    313          
    314          //------------------------------------------------------------------------------
    315          //      Internal Functions
    316          //------------------------------------------------------------------------------
    317          
    318          // Interrupt Service Routines
    319          //------------------------------------------------------------------------------
    320          
    321          //------------------------------------------------------------------------------
    322          //! \brief  Handler for the USB controller interrupt
    323          //!
    324          //!         Defers the call to the USB_Handler function.
    325          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    326          void ISR_Driver(void)
    327          {
   \                     ISR_Driver:
   \   00000000   01B5               PUSH     {R0,LR}
    328              USB_Handler(&sUsb);
   \   00000002   ....               LDR      R0,??DataTable1  ;; sUsb
   \   00000004   ........           BL       USB_Handler
    329          }//_______________________ Koniec funkcji ISR_Driver ____________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
    330          
    331          
    332          
    333          
    334          //------------------------------------------------------------------------------
    335          //! \brief  Handler for the VBus state change interrupt
    336          //!
    337          //! This method calls the USB_Attach function to perform the necessary
    338          //! operations.
    339          //------------------------------------------------------------------------------
    340          //#if !defined(USB_BUS_POWERED)
    341          char ForwardUSB2Serialferst=0;
    342          
    343          
    344           
    345          

   \                                 In section Debug.txt, align 4, keep-with-next
    346          void ISR_VBus(void)
    347          {
   \                     ISR_VBus:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    348            
    349            
    350            USB_Attach(&sUsb);
   \   00000002   ....               LDR      R6,??DataTable1  ;; sUsb
   \   00000004   3000               MOVS     R0,R6
   \   00000006   ........           BL       USB_Attach
    351          
    352            if ((( AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS)>0)
   \   0000000A   0227               MOVS     R7,#+2
   \   0000000C   ....               LDR      R0,??DataTable2  ;; 0xfffff43c
   \   0000000E   0068               LDR      R0,[R0, #+0]
   \   00000010   3900               MOVS     R1,R7
   \   00000012   0842               TST      R0,R1
   \   00000014   2CD0               BEQ      ??ISR_VBus_0
    353            {
    354              g_PC_Connected=1;
   \   00000016   0124               MOVS     R4,#+1
   \   00000018   ....               LDR      R5,??DataTable12  ;; DateTime
   \   0000001A   2000               MOVS     R0,R4
   \   0000001C   2873               STRB     R0,[R5, #+12]
    355              
    356              if (ISSET(USB_GetState(&sUsb), USB_STATE_POWERED)) 
   \   0000001E   3000               MOVS     R0,R6
   \   00000020   ........           BL       USB_GetState
   \   00000024   3842               TST      R0,R7
   \   00000026   10D0               BEQ      ??ISR_VBus_1
    357              {
    358                MenuLevel=1;
   \   00000028   ....               LDR      R0,??DataTable4  ;; MenuLevel
   \   0000002A   0460               STR      R4,[R0, #+0]
    359                g_PC_Connected=1;
    360                MenuPaint();
   \   0000002C   ........           BL       MenuPaint
    361                RepaintLCD();
   \   00000030   ........           BL       RepaintLCD
    362                RepaintLCD();
   \   00000034   ........           BL       RepaintLCD
    363               
    364                USB_Connect(&sUsb);   
   \   00000038   3000               MOVS     R0,R6
   \   0000003A   ........           BL       USB_Connect
    365                
    366          
    367               // if (ForwardUSB2Serialferst!=1)
    368               // {
    369                  ForwardUSB2Serialferst=1; 
   \   0000003E   2000               MOVS     R0,R4
   \   00000040   6875               STRB     R0,[R5, #+21]
    370               // }
    371                
    372                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000042   0020               MOVS     R0,#+0
   \   00000044   A864               STR      R0,[R5, #+72]
    373                g_LightLCDEnable=1;
   \   00000046   6C73               STRB     R4,[R5, #+13]
   \   00000048   0FE0               B        ??ISR_VBus_2
    374          
    375              }
    376                else
    377              {
    378          
    379                USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_1:
   \   0000004A   3000               MOVS     R0,R6
   \   0000004C   ........           BL       USB_Disconnect
    380                g_PC_Connected=0;
   \   00000050   0026               MOVS     R6,#+0
   \   00000052   3000               MOVS     R0,R6
   \   00000054   2873               STRB     R0,[R5, #+12]
    381                MenuPaint();
   \   00000056   ........           BL       MenuPaint
    382                g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000005A   AE64               STR      R6,[R5, #+72]
    383                g_LightLCDEnable=1;
   \   0000005C   6C73               STRB     R4,[R5, #+13]
    384                Trap.Enable=0;
   \   0000005E   0F48               LDR      R0,??ISR_VBus_3  ;; Trap
   \   00000060   3100               MOVS     R1,R6
   \   00000062   0170               STRB     R1,[R0, #+0]
    385                Trap.Row=0;
   \   00000064   4170               STRB     R1,[R0, #+1]
    386                Trap.Col=0;
   \   00000066   8170               STRB     R1,[R0, #+2]
    387                Trap.Activ=0;
   \   00000068   C670               STRB     R6,[R0, #+3]
    388                
    389                
    390          
    391              }
    392              MenuPaint();
   \                     ??ISR_VBus_2:
   \   0000006A   ........           BL       MenuPaint
   \   0000006E   11E0               B        ??ISR_VBus_4
    393            }
    394            else
    395            {
    396              USB_Disconnect(&sUsb);  
   \                     ??ISR_VBus_0:
   \   00000070   3000               MOVS     R0,R6
   \   00000072   ........           BL       USB_Disconnect
    397              g_PC_Connected=0;
   \   00000076   0026               MOVS     R6,#+0
   \   00000078   ....               LDR      R5,??DataTable12  ;; DateTime
   \   0000007A   3000               MOVS     R0,R6
   \   0000007C   2873               STRB     R0,[R5, #+12]
    398              MenuPaint();
   \   0000007E   ........           BL       MenuPaint
    399              g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   00000082   AE64               STR      R6,[R5, #+72]
    400              g_LightLCDEnable=1;
   \   00000084   0120               MOVS     R0,#+1
   \   00000086   6873               STRB     R0,[R5, #+13]
    401              
    402              Trap.Enable=0;
   \   00000088   0448               LDR      R0,??ISR_VBus_3  ;; Trap
   \   0000008A   3100               MOVS     R1,R6
   \   0000008C   0170               STRB     R1,[R0, #+0]
    403              Trap.Row=0;
   \   0000008E   4170               STRB     R1,[R0, #+1]
    404              Trap.Col=0;
   \   00000090   8170               STRB     R1,[R0, #+2]
    405              Trap.Activ=0;
   \   00000092   C670               STRB     R6,[R0, #+3]
    406              
    407          
    408            } 
    409          
    410          }//_____________________________________________________________________________
   \                     ??ISR_VBus_4:
   \   00000094   F8BC               POP      {R3-R7}
   \   00000096   01BC               POP      {R0}
   \   00000098   0047               BX       R0               ;; return
   \   0000009A   C046               Nop      
   \                     ??ISR_VBus_3:
   \   0000009C   ........           DC32     Trap
    411          //#endif // !defined(USB_BUS_POWERED)
    412          
    413          
    414          
    415          
    416          
    417          // Callbacks
    418          //------------------------------------------------------------------------------
    419          //------------------------------------------------------------------------------
    420          //! \brief  Callback invoked during the initialization of the USB driver
    421          //!
    422          //!         Configures and enables USB controller and VBus monitoring interrupts
    423          //! \param  pUsb    Pointer to a S_usb instance
    424          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    425          static void CBK_Init(const S_usb *pUsb)
    426          {
   \                     CBK_Init:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   \   00000002   0400               MOVS     R4,R0
    427          
    428            TRACE_INFO("\n\rInicjalizacja przerwania VBUS od podlaczenia USB  \n\r" ); 
    429              
    430              // Configure and enable the USB controller interrupt
    431              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    432                                    USB_GetDriverID(pUsb),
    433                                    USB_CON_PRIOR,
    434                                    0, //AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    435                                    ISR_Driver);
   \   00000004   ........           BL       USB_GetDriverID
   \   00000008   ....               LDR      R5,??DataTable6  ;; 0xfffff000
   \   0000000A   82B0               SUB      SP,SP,#+8
   \   0000000C   0F49               LDR      R1,??CBK_Init_0  ;; ISR_Driver
   \   0000000E   0091               STR      R1,[SP, #+0]
   \   00000010   0023               MOVS     R3,#+0
   \   00000012   0522               MOVS     R2,#+5
   \   00000014   0100               MOVS     R1,R0
   \   00000016   2800               MOVS     R0,R5
   \   00000018   ........           BL       AT91F_AIC_ConfigureIt
   \   0000001C   02B0               ADD      SP,SP,#+8
    436          
    437              AT91F_AIC_EnableIt(AT91C_BASE_AIC, USB_GetDriverID(pUsb));
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       USB_GetDriverID
   \   00000024   0100               MOVS     R1,R0
   \   00000026   2800               MOVS     R0,R5
   \   00000028   ........           BL       AT91F_AIC_EnableIt
    438          
    439          //#ifndef USB_BUS_POWERED
    440             
    441              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   0000002C   0221               MOVS     R1,#+2
   \   0000002E   ....               LDR      R0,??DataTable7  ;; 0xfffff400
   \   00000030   ........           BL       AT91F_PIO_CfgInput
    442              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   00000034   ....               LDR      R0,??DataTable8  ;; 0xfffff460
   \   00000036   0221               MOVS     R1,#+2
   \   00000038   0160               STR      R1,[R0, #+0]
    443             
    444              // Configure VBus monitoring
    445              BRD_ConfigureVBus(USB_GetDriverInterface(pUsb));
   \   0000003A   2000               MOVS     R0,R4
   \   0000003C   ........           BL       USB_GetDriverInterface
   \   00000040   ........           BL       BRD_ConfigureVBus
    446          
    447            /*
    448              // Configure and enable the Vbus detection interrupt
    449              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
    450                                    AT91C_ID_VBUS,
    451                                    USB_CON_PRIOR, //AT91C_AIC_PRIOR_LOWEST,
    452                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
    453                                    ISR_VBus);
    454          
    455              
    456              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
    457              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
    458              */
    459              
    460              
    461          /*
    462          #else
    463              // Power up the USB controller
    464              USB_Attach(pUsb);
    465            
    466          #endif
    467          */
    468          
    469          }//_____________________________________________________________________________
   \   00000044   38BC               POP      {R3-R5}
   \   00000046   01BC               POP      {R0}
   \   00000048   0047               BX       R0               ;; return
   \   0000004A   C046               Nop      
   \                     ??CBK_Init_0:
   \   0000004C   ........           DC32     ISR_Driver
    470          
    471          
    472          
    473          
    474          
    475          
    476          
    477          
    478          
    479          
    480          
    481          
    482          
    483          
    484          
    485          
    486          
    487          
    488          
    489          
    490          
    491          
    492          
    493          //------------------------------------------------------------------------------
    494          //! \brief  Callback invoked when the device becomes suspended
    495          //!
    496          //!         Disables LEDs (if they are used) and then puts the device into
    497          //!         low-power mode. When traces are used, the device does not enter
    498          //!         low-power mode to avoid losing some outputs.
    499          //! \param  pUsb    Pointer to a S_usb instance
    500          //------------------------------------------------------------------------------
    501          static void CBK_Suspend(const S_usb *pUsb)
    502          {
    503          
    504          #if defined(NOTRACES)
    505              DEV_Suspend();
    506          #endif
    507          }//_____________________________________________________________________________
    508          
    509          
    510          
    511          
    512          
    513          
    514          //------------------------------------------------------------------------------
    515          //! \brief  Callback invoked when the device leaves the suspended state
    516          //!
    517          //!         The device is first returned to a normal operating mode and LEDs are
    518          //!         re-enabled. When traces are used, the device does not enter
    519          //!         low-power mode to avoid losing some outputs.
    520          //! \param  pUsb    Pointer to a S_usb instance
    521          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    522          static void CBK_Resume(const S_usb *pUsb)
    523          {
   \                     CBK_Resume:
   \   00000000   01B5               PUSH     {R0,LR}
    524          #if defined(NOTRACES)
    525              DEV_Resume();
   \   00000002   ........           BL       DEV_Resume
    526          #endif
    527          
    528          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
    529          
    530          
    531          
    532          
    533          
    534          
    535          //------------------------------------------------------------------------------
    536          //! \brief  Callback invoked when a new SETUP request is received
    537          //!
    538          //!         The new request if forwarded to the standard request handler,
    539          //!         which performs the enumeration of the device.
    540          //! \param  pUsb   Pointer to a S_usb instance
    541          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    542          static void CBK_NewRequest(const S_usb *pUsb)
    543          {
   \                     CBK_NewRequest:
   \   00000000   01B5               PUSH     {R0,LR}
    544              SER_RequestHandler(&sSer);
   \   00000002   0348               LDR      R0,??CBK_NewRequest_0  ;; DateTime + 112
   \   00000004   ........           BL       SER_RequestHandler
    545          }//_____________________________________________________________________________
   \   00000008   08BC               POP      {R3}
   \   0000000A   01BC               POP      {R0}
   \   0000000C   0047               BX       R0               ;; return
   \   0000000E   C046               Nop      
   \                     ??CBK_NewRequest_0:
   \   00000010   ........           DC32     DateTime + 112
    546          
    547          
    548          
    549          
    550          
    551          
    552          //------------------------------------------------------------------------------
    553          //! \brief  Callback invoked when a Reset request is received
    554          //!
    555          //! \param  pUsb   Pointer to a S_usb instance
    556          //------------------------------------------------------------------------------
    557          //static void CBK_Reset(const S_usb *pUsb)
    558          //{
    559              // Put your reset handler here
    560          //}//_____________________________________________________________________________
    561          
    562          
    563          
    564          
    565          //------------------------------------------------------------------------------
    566          //! \brief  Callback invoked when a SOF is received
    567          //!
    568          //! \param  pUsb   Pointer to a S_usb instance
    569          //------------------------------------------------------------------------------
    570          //static void CBK_SOF(const S_usb *pUsb)
    571          //{
    572              // Put your SOF handler here
    573          //}//_____________________________________________________________________________
    574          
    575          
    576          
    577          
    578          
    579          // Other functions
    580          //------------------------------------------------------------------------------
    581          //------------------------------------------------------------------------------
    582          //! \brief  Forwards data receiving from the USB host through the USART
    583          //!
    584          //!         This function operates asynchronously.
    585          //! \param  pBuffer           Must be 0 when function is first called
    586          //! \param  bStatus           Same as above
    587          //! \param  dBytesTransferred Same as above
    588          //! \param  dBytesRemaining   Same as above
    589          //------------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    590          static void ForwardUSB2Serial(unsigned char *pBuffer,
    591                                        unsigned char bStatus,
    592                                        unsigned int dBytesTransferred,
    593                                        unsigned int dBytesRemaining)
    594          {
   \                     ForwardUSB2Serial:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
    595              //Zmienne lokalne ----------------------------------------------------
    596                      static char buff_tx[1000];                                          //Bufor danych wysy³anych do USB
    597                   
    598                      unsigned int rozmiar_tx=0;                                          //Iloœæ danych do wys³ania przez USB
   \   00000002   0023               MOVS     R3,#+0
   \   00000004   0093               STR      R3,[SP, #+0]
    599                    //---------------------koniec zmiennych lokalnych--------------------
    600                  
    601          
    602              if (pBuffer != 0) {                                                                   
   \   00000006   0028               CMP      R0,#+0
   \   00000008   15D0               BEQ      ??ForwardUSB2Serial_0
    603                  if (bStatus != SER_STATUS_SUCCESS) 
   \   0000000A   0029               CMP      R1,#+0
   \   0000000C   13D1               BNE      ??ForwardUSB2Serial_0
    604                  {
    605                    
    606                    TRACE_WARNING("\n\r W: ForwardUSB2Serial: B³¹d transmisji USB\n\r");
    607                  }
    608                  else 
    609                  {
    610          
    611                      pBuffer[dBytesTransferred] = 0;
   \   0000000E   8354               STRB     R3,[R0, R2]
    612                     komunikcja_RSwin((char *)pBuffer,buff_tx,&rozmiar_tx);
   \   00000010   ....               LDR      R4,??DataTable12  ;; DateTime
   \   00000012   C221               MOVS     R1,#+194
   \   00000014   4900               LSLS     R1,R1,#+1        ;; #+388
   \   00000016   6518               ADDS     R5,R4,R1
   \   00000018   6A46               MOV      R2,SP
   \   0000001A   2900               MOVS     R1,R5
   \   0000001C   ........           BL       komunikcja_RSwin
    613                     SER_Write(&sSer, buff_tx,rozmiar_tx,0, 0);                                                                        
   \   00000020   82B0               SUB      SP,SP,#+8
   \   00000022   0020               MOVS     R0,#+0
   \   00000024   0090               STR      R0,[SP, #+0]
   \   00000026   0300               MOVS     R3,R0
   \   00000028   029A               LDR      R2,[SP, #+8]
   \   0000002A   2900               MOVS     R1,R5
   \   0000002C   7034               ADDS     R4,R4,#+112
   \   0000002E   2000               MOVS     R0,R4
   \   00000030   ........           BL       SER_Write
   \   00000034   02B0               ADD      SP,SP,#+8
    614                  }
    615              }
    616          
    617          
    618              do {
    619          
    620                  bStatus = SER_Read(&sSer,
    621                                     pUsbBuffer,
    622              
    623                                     USB_BUFFER_SIZE,
    624                                     (Callback_f) ForwardUSB2Serial,
    625                                     pUsbBuffer);
    626              }
    627              while (bStatus != SER_STATUS_SUCCESS);
   \                     ??ForwardUSB2Serial_0:
   \   00000036   ....               LDR      R4,??DataTable12  ;; DateTime
   \   00000038   2100               MOVS     R1,R4
   \   0000003A   8431               ADDS     R1,R1,#+132
   \   0000003C   82B0               SUB      SP,SP,#+8
   \   0000003E   0091               STR      R1,[SP, #+0]
   \   00000040   064B               LDR      R3,??ForwardUSB2Serial_1  ;; ForwardUSB2Serial
   \   00000042   8022               MOVS     R2,#+128
   \   00000044   5200               LSLS     R2,R2,#+1        ;; #+256
   \   00000046   7034               ADDS     R4,R4,#+112
   \   00000048   2000               MOVS     R0,R4
   \   0000004A   ........           BL       SER_Read
   \   0000004E   02B0               ADD      SP,SP,#+8
   \   00000050   0028               CMP      R0,#+0
   \   00000052   F0D1               BNE      ??ForwardUSB2Serial_0
    628           
    629          }//_____________________________________________________________________________
   \   00000054   38BC               POP      {R3-R5}
   \   00000056   01BC               POP      {R0}
   \   00000058   0047               BX       R0               ;; return
   \   0000005A   C046               Nop      
   \                     ??ForwardUSB2Serial_1:
   \   0000005C   ........           DC32     ForwardUSB2Serial
    630          
    631          
    632          
    633          
    634          
    635          
    636          //-----------------------------------------------------------------------------
    637          //!  Nazwa funkcji :    Delay
    638          //!  Funkcja opóŸnienia
    639          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    640          void Delay (unsigned long a) 
    641          { 
   \                     Delay:
   \   00000000   01B5               PUSH     {R0,LR}
    642              while (--a!=0);   AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Delay_0:
   \   00000002   401E               SUBS     R0,R0,#+1
   \   00000004   FDD1               BNE      ??Delay_0
   \   00000006   ....               LDR      R0,??DataTable11  ;; 0xfffffd40
   \   00000008   ........           BL       AT91F_WDTRestart
    643          }//_______________________ Koniec funkcji opóŸnienia ____________________________
   \   0000000C   08BC               POP      {R3}
   \   0000000E   01BC               POP      {R0}
   \   00000010   0047               BX       R0               ;; return
    644          
    645          
    646          
    647          

   \                                 In section .bss, align 4
    648          char *memory_read;
   \                     memory_read:
   \   00000000                      DS8 4
    649          
    650          //-----------------------------------------------------------------------------
    651          //! Nazwa funkcji :    InitFramework
    652          //! Funkcja ustawieñ wstêpnych systemu
    653          //-----------------------------------------------------------------------------
    654          int tProgramTabSize=ProgramTabSize;
    655          char *SourRam;
    656          unsigned int  stop=2000;
    657          unsigned int  siz;

   \                                 In section Debug.txt, align 4, keep-with-next
    658          void InitFramework (void) 
    659          { 
   \                     InitFramework:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    660             
    661           //  TRACE_INFO("\n\ InitFramework \n\r");
    662              
    663          
    664          
    665                                            FlashProgramOfset=FlashProgram_A_Ofset;
   \   00000002   ....               LDR      R2,??DataTable12  ;; DateTime
   \   00000004   0020               MOVS     R0,#+0
   \   00000006   1064               STR      R0,[R2, #+64]
    666                                 
    667                                            
    668                                          //  TRACE_INFO("\n\r---  Strona flash = A  \n\r" ); 
    669          
    670              
    671              
    672          //    TRACE_INFO(" ---  Przepisuje program z FLASH do RAM     -Ofset : %d\n\r",AT91C_IFLASH_MEM->FlashProgram+FlashProgramReserveOfset);
    673              //przepisz program z flash do ram
    674              char *memory_read_prog;
    675              memory_read_prog=(char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset);
    676          
    677            
    678               SourRam= (char*)&gProg;
   \   00000008   ....               LDR      R1,??DataTable13  ;; gProg
   \   0000000A   D164               STR      R1,[R2, #+76]
    679          
    680             
    681              siz=sizeof(gProg);
   \   0000000C   ....               LDR      R3,??DataTable14  ;; 0xc670
   \   0000000E   1365               STR      R3,[R2, #+80]
    682              for (unsigned int k = 0 ; k <siz; k++) 
   \   00000010   0300               MOVS     R3,R0
   \   00000012   04E0               B        ??InitFramework_0
    683              {      
    684                    SourRam[k]=memory_read_prog[k]; 
   \                     ??InitFramework_1:
   \   00000014   D46C               LDR      R4,[R2, #+76]
   \   00000016   ....               LDR      R5,??DataTable15  ;; 0x130100
   \   00000018   ED5C               LDRB     R5,[R5, R3]
   \   0000001A   E554               STRB     R5,[R4, R3]
    685              }
   \   0000001C   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_0:
   \   0000001E   146D               LDR      R4,[R2, #+80]
   \   00000020   A342               CMP      R3,R4
   \   00000022   F7D3               BCC      ??InitFramework_1
    686              
    687             
    688            
    689              for (char i=0; i<ScreenNr; i++) 
   \   00000024   0300               MOVS     R3,R0
   \   00000026   03E0               B        ??InitFramework_2
    690             {
    691               //je¿eli ustawienie automatyczne temperatury
    692               if (gProg.Screen[i].Thermo.AutoOn) 
    693               {
    694                 
    695                   //je¿eli dzieñ typu pierwszego
    696                   if (((gProg.Screen[i].Thermo.Week>>DateTime.DayOfWeek) & 0x1)==1)       
    697                   {
    698                      if (((gProg.Screen[i].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    699                      {                 
    700                        //ustaw wy¿sz¹ temperaturê
    701                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    702                        {
    703                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
    704                        }else{
    705                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    706                        }
    707                      }else{
    708                        //ustaw ni¿sz¹ temperaturê
    709                        if (gProg.Screen[i].Thermo.Temperature[0]>gProg.Screen[i].Thermo.Temperature[1])
    710                        {
    711                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[1]; 
    712                        }else{
    713                          gProg.Screen[i].Thermo.SetTemperature=gProg.Screen[i].Thermo.Temperature[0]; 
   \                     ??InitFramework_3:
   \   00000028   2C81               STRH     R4,[R5, #+8]
    714                        }
   \                     ??InitFramework_4:
   \   0000002A   5B1C               ADDS     R3,R3,#+1
   \   0000002C   1B06               LSLS     R3,R3,#+24
   \   0000002E   1B0E               LSRS     R3,R3,#+24
   \                     ??InitFramework_2:
   \   00000030   1C00               MOVS     R4,R3
   \   00000032   082C               CMP      R4,#+8
   \   00000034   27D2               BCS      ??InitFramework_5
   \   00000036   A025               MOVS     R5,#+160
   \   00000038   6C43               MULS     R4,R5,R4
   \   0000003A   0C19               ADDS     R4,R1,R4
   \   0000003C   ....               LDR      R5,??DataTable16  ;; 0xbc26
   \   0000003E   6519               ADDS     R5,R4,R5
   \   00000040   2E78               LDRB     R6,[R5, #+0]
   \   00000042   002E               CMP      R6,#+0
   \   00000044   F1D0               BEQ      ??InitFramework_4
   \   00000046   EE78               LDRB     R6,[R5, #+3]
   \   00000048   9779               LDRB     R7,[R2, #+6]
   \   0000004A   3E41               ASRS     R6,R6,R7
   \   0000004C   F607               LSLS     R6,R6,#+31
   \   0000004E   ECD5               BPL      ??InitFramework_4
   \   00000050   ....               LDR      R6,??DataTable17  ;; 0xbc30
   \   00000052   A459               LDR      R4,[R4, R6]
   \   00000054   D678               LDRB     R6,[R2, #+3]
   \   00000056   F440               LSRS     R4,R4,R6
   \   00000058   E407               LSLS     R4,R4,#+31
   \   0000005A   0BD5               BPL      ??InitFramework_6
   \   0000005C   0624               MOVS     R4,#+6
   \   0000005E   2C5F               LDRSH    R4,[R5, R4]
   \   00000060   0426               MOVS     R6,#+4
   \   00000062   AE5F               LDRSH    R6,[R5, R6]
   \   00000064   B442               CMP      R4,R6
   \   00000066   02DA               BGE      ??InitFramework_7
   \   00000068   AC88               LDRH     R4,[R5, #+4]
   \   0000006A   2C81               STRH     R4,[R5, #+8]
   \   0000006C   DDE7               B        ??InitFramework_4
   \                     ??InitFramework_7:
   \   0000006E   EC88               LDRH     R4,[R5, #+6]
   \   00000070   2C81               STRH     R4,[R5, #+8]
   \   00000072   DAE7               B        ??InitFramework_4
   \                     ??InitFramework_6:
   \   00000074   0424               MOVS     R4,#+4
   \   00000076   2C5F               LDRSH    R4,[R5, R4]
   \   00000078   0626               MOVS     R6,#+6
   \   0000007A   AE5F               LDRSH    R6,[R5, R6]
   \   0000007C   A642               CMP      R6,R4
   \   0000007E   D3DA               BGE      ??InitFramework_3
   \   00000080   EC88               LDRH     R4,[R5, #+6]
   \   00000082   2C81               STRH     R4,[R5, #+8]
   \   00000084   D1E7               B        ??InitFramework_4
    715                      }
    716                   }
    717               }
    718             }
    719           
    720              
    721           
    722              //koniec
    723             
    724             
    725             
    726             
    727             //czyszczenie zmiennych programowych
    728                for (int LineNr=0; LineNr<MaxPrcLines; LineNr++)
   \                     ??InitFramework_5:
   \   00000086   0200               MOVS     R2,R0
   \   00000088   0DE0               B        ??InitFramework_8
    729                {
    730                  for (int PrcInLine=0; PrcInLine<MaxPrcInLine; PrcInLine++)
    731                  {
    732                    gProg.Line[LineNr].Proc[PrcInLine].LastIn=0;
   \                     ??InitFramework_9:
   \   0000008A   1824               MOVS     R4,#+24
   \   0000008C   5C43               MULS     R4,R3,R4
   \   0000008E   F025               MOVS     R5,#+240
   \   00000090   5543               MULS     R5,R2,R5
   \   00000092   4D19               ADDS     R5,R1,R5
   \   00000094   2C19               ADDS     R4,R5,R4
   \   00000096   2834               ADDS     R4,R4,#+40
   \   00000098   0500               MOVS     R5,R0
   \   0000009A   2570               STRB     R5,[R4, #+0]
    733                    gProg.Line[LineNr].Proc[PrcInLine].Out=0;
   \   0000009C   6580               STRH     R5,[R4, #+2]
    734                  }
   \   0000009E   5B1C               ADDS     R3,R3,#+1
   \                     ??InitFramework_10:
   \   000000A0   0A2B               CMP      R3,#+10
   \   000000A2   F2DB               BLT      ??InitFramework_9
   \   000000A4   521C               ADDS     R2,R2,#+1
   \                     ??InitFramework_8:
   \   000000A6   C82A               CMP      R2,#+200
   \   000000A8   01DA               BGE      ??InitFramework_11
   \   000000AA   0300               MOVS     R3,R0
   \   000000AC   F8E7               B        ??InitFramework_10
    735                }
    736           
    737          
    738                //Ustawienie wartoœci analogowych wêz³ów na niewiarygodne (0x8AAA)
    739                for (char NN=1; NN<NumberNeurons; NN++)
   \                     ??InitFramework_11:
   \   000000AE   0121               MOVS     R1,#+1
   \   000000B0   12E0               B        ??InitFramework_12
    740                {
    741                  for (char NR=0; NR<NumberReg; NR++)
    742                  {
    743                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   \                     ??InitFramework_13:
   \   000000B2   5B00               LSLS     R3,R3,#+1
   \   000000B4   0C00               MOVS     R4,R1
   \   000000B6   1425               MOVS     R5,#+20
   \   000000B8   6C43               MULS     R4,R5,R4
   \   000000BA   ....               LDR      R5,??DataTable18  ;; MainStage
   \   000000BC   2C19               ADDS     R4,R5,R4
   \   000000BE   E318               ADDS     R3,R4,R3
   \   000000C0   A033               ADDS     R3,R3,#+160
   \   000000C2   ....               LDR      R4,??DataTable19  ;; 0xffff8aaa
   \   000000C4   1C80               STRH     R4,[R3, #+0]
    744                  }
   \   000000C6   521C               ADDS     R2,R2,#+1
   \   000000C8   1206               LSLS     R2,R2,#+24
   \   000000CA   120E               LSRS     R2,R2,#+24
   \                     ??InitFramework_14:
   \   000000CC   1300               MOVS     R3,R2
   \   000000CE   0A2B               CMP      R3,#+10
   \   000000D0   EFD3               BCC      ??InitFramework_13
   \   000000D2   491C               ADDS     R1,R1,#+1
   \   000000D4   0906               LSLS     R1,R1,#+24
   \   000000D6   090E               LSRS     R1,R1,#+24
   \                     ??InitFramework_12:
   \   000000D8   0A00               MOVS     R2,R1
   \   000000DA   232A               CMP      R2,#+35
   \   000000DC   01D2               BCS      ??InitFramework_15
   \   000000DE   0200               MOVS     R2,R0
   \   000000E0   F4E7               B        ??InitFramework_14
    745                }
    746               
    747          }//_______________________ Koniec funkcji InitFramework ____________________________
   \                     ??InitFramework_15:
   \   000000E2   F8BC               POP      {R3-R7}
   \   000000E4   01BC               POP      {R0}
   \   000000E6   0047               BX       R0               ;; return
    748          
    749          
    750          
    751          
    752          
    753          
    754          //char gLcdLightDuty=2;

   \                                 In section Debug.txt, align 4, keep-with-next
    755          void Timer_10us(void)                        //timer isr 
    756          { 
    757              unsigned int dummy0 = AT91C_BASE_TC1->TC_SR;      
   \                     Timer_10us:
   \   00000000   0148               LDR      R0,??Timer_10us_0  ;; 0xfffa0060
   \   00000002   0068               LDR      R0,[R0, #+0]
    758            
    759           /*
    760            
    761            //PWM podœwietlenia
    762            static char LcdLightCounterPWM=6;        //licznik podœwietlenia
    763            
    764            
    765          AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD); 
    766            
    767            /*
                   ^
Warning[Pe009]: nested comment is not allowed
    768            static long long ScreenSaverCounter=0;
    769            if (g_LightLCDEnable)
    770            {
    771              AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);    
    772              ScreenSaverCounter=0;
    773            }else{
    774            
    775              if (LcdLightCounterPWM<6)
    776            {
    777              LcdLightCounterPWM++;
    778             
    779            }else{
    780              LcdLightCounterPWM=0; 
    781              
    782              if ((ScreenSaverCounter<500000) && (g_ScreenSever_On) ) 
    783              {
    784                ScreenSaverCounter++;  
    785                AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    786              }
    787              if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))   AT91F_PIO_SetOutput(LCD_PIO,(unsigned int)LightLCD);
    788            }
    789            if  (LcdLightCounterPWM==gLcdLightDuty) AT91F_PIO_ClearOutput(LCD_PIO,(unsigned int)LightLCD);
    790            }
    791            */
    792            
    793          
    794            //----koniec PWM podœwietlenia ------
    795            
    796          
    797            
    798          }//_____________________________________________________________________________
   \   00000004   7047               BX       LR               ;; return
   \   00000006   C046               Nop      
   \                     ??Timer_10us_0:
   \   00000008   6000FAFF           DC32     0xfffa0060
    799          
    800          
    801          
    802          
    803          
    804          
    805          
    806          
    807          //-----------------------------------------------------------------------------
    808          //!  Nazwa funkcji :    Timer_1_Setup
    809          //!  Funkcja inicjalizacji Timer1 - 1ms
    810          //-----------------------------------------------------------------------------
    811          //! 
    812          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
    813          void Timer_10us_Setup(void) 
    814          { 
    815          
    816            
    817           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
    818           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
    819           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC1] = (unsigned int)Timer_10us;  //set AIC             
   \                     Timer_10us_Setup:
   \   00000000   1148               LDR      R0,??Timer_10us_Setup_0  ;; 0xfffff0b4
   \   00000002   1249               LDR      R1,??Timer_10us_Setup_0+0x4  ;; Timer_10us
   \   00000004   0160               STR      R1,[R0, #+0]
    820           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC1] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10US_PRIOR); 
   \   00000006   1248               LDR      R0,??Timer_10us_Setup_0+0x8  ;; 0xfffff034
   \   00000008   0121               MOVS     R1,#+1
   \   0000000A   0160               STR      R1,[R0, #+0]
    821           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC1);      //enable clock 
   \   0000000C   4803               LSLS     R0,R1,#+13
   \   0000000E   ....               LDR      R1,??DataTable20  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
    822           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   ....               LDR      R1,??DataTable21  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
    823           //no external clocks 
    824           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   ....               LDR      R1,??DataTable22  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
    825           AT91C_BASE_TC1->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   0D49               LDR      R1,??Timer_10us_Setup_0+0xC  ;; 0xfffa0040
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
    826           AT91C_BASE_TC1->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0C49               LDR      R1,??Timer_10us_Setup_0+0x10  ;; 0xfffa0044
   \   00000026   ....               LDR      R2,??DataTable23  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
    827           //clock: MCK/1024  = 48054841/ DIV
    828           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
    829           //! DIV5 - 1024
    830           //! DIV4 - 128
    831           //! DIV3 - 32
    832           //! DIV2 - 8
    833           
    834           //AT91C_BASE_TC3->TC_RC = 5090;                  //1ms  (z wyliczeñ 6007)
    835           //AT91C_BASE_TC0->TC_RC = 5286;                    //880us 
    836           AT91C_BASE_TC1->TC_RC = 200;                    //440us  
   \   0000002A   0C49               LDR      R1,??Timer_10us_Setup_0+0x14  ;; 0xfffa005c
   \   0000002C   C822               MOVS     R2,#+200
   \   0000002E   0A60               STR      R2,[R1, #+0]
    837           AT91C_BASE_TC1->TC_IER = AT91C_TC_CPCS;          //enable RC compare int 
   \   00000030   0B49               LDR      R1,??Timer_10us_Setup_0+0x18  ;; 0xfffa0064
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
    838           AT91C_BASE_TC1->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   0B49               LDR      R1,??Timer_10us_Setup_0+0x1C  ;; 0xfffa0068
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
    839           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC1);       //enable int 
   \   0000003C   ....               LDR      R1,??DataTable24  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
    840           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC1);       //clear int 
   \   00000040   ....               LDR      R1,??DataTable25  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
    841           
    842           
    843           //AT91C_BASE_TC1->TC_CMR |= 1<<6;
    844          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_10us_Setup_0:
   \   00000048   B4F0FFFF           DC32     0xfffff0b4
   \   0000004C   ........           DC32     Timer_10us
   \   00000050   34F0FFFF           DC32     0xfffff034
   \   00000054   4000FAFF           DC32     0xfffa0040
   \   00000058   4400FAFF           DC32     0xfffa0044
   \   0000005C   5C00FAFF           DC32     0xfffa005c
   \   00000060   6400FAFF           DC32     0xfffa0064
   \   00000064   6800FAFF           DC32     0xfffa0068
    845          
    846          
    847          
    848          

   \                                 In section Debug.txt, align 4, keep-with-next
    849          void TimetableExecute(void)
    850          {
   \                     TimetableExecute:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0020               MOVS     R0,#+0
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   04E0               B        ??TimetableExecute_0
    851          
    852            
    853            __Timetable *Timetable=AT91C_IFLASH_MEM->Config.Timetable;
    854            
    855            static  char Out[ScreenNr][TimetableTasks];
    856            char Hour;
    857            for (char sc=0; sc<ScreenNr; sc++)
   \                     ??TimetableExecute_1:
   \   00000008   0098               LDR      R0,[SP, #+0]
   \   0000000A   401C               ADDS     R0,R0,#+1
   \   0000000C   0006               LSLS     R0,R0,#+24
   \   0000000E   000E               LSRS     R0,R0,#+24
   \   00000010   0090               STR      R0,[SP, #+0]
   \                     ??TimetableExecute_0:
   \   00000012   0098               LDR      R0,[SP, #+0]
   \   00000014   0006               LSLS     R0,R0,#+24
   \   00000016   000E               LSRS     R0,R0,#+24
   \   00000018   0828               CMP      R0,#+8
   \   0000001A   00D3               BCC      .+4
   \   0000001C   ACE0               B        ??TimetableExecute_2
    858            {
    859               for (char tn=0; tn<4; tn++)
   \   0000001E   0024               MOVS     R4,#+0
   \   00000020   56E0               B        ??TimetableExecute_3
    860               {
    861                   
    862          
    863                  
    864                   if (Timetable[sc].Task[tn].Enable==1) 
    865                   {    
    866                     
    867                             if (gProg.Screen[sc].Timetable.Min1h)
    868                             {
    869                               if(Timetable[sc].Task[tn].Hour>0) {
    870                                 Hour=Timetable[sc].Task[tn].Hour-1;
    871                               }else{
    872                                 Hour=23;
   \                     ??TimetableExecute_4:
   \   00000022   1722               MOVS     R2,#+23
   \   00000024   00E0               B        ??TimetableExecute_5
    873                               }
    874                             }else{
    875                               Hour=Timetable[sc].Task[tn].Hour;
   \                     ??TimetableExecute_6:
   \   00000026   C278               LDRB     R2,[R0, #+3]
    876                             }
    877                  
    878                     
    879                       if ((Hour==DateTime.Hour)&& (Timetable[sc].Task[tn].Minute==DateTime.Minute) && ((Timetable[sc].Task[tn].Week) & (1<<DateTime.DayOfWeek-1))  && (DateTime.Second==0))
   \                     ??TimetableExecute_5:
   \   00000028   5549               LDR      R1,??TimetableExecute_7  ;; DateTime
   \   0000002A   CB78               LDRB     R3,[R1, #+3]
   \   0000002C   1206               LSLS     R2,R2,#+24
   \   0000002E   120E               LSRS     R2,R2,#+24
   \   00000030   9A42               CMP      R2,R3
   \   00000032   00D0               BEQ      .+4
   \   00000034   96E0               B        ??TimetableExecute_8
   \   00000036   0279               LDRB     R2,[R0, #+4]
   \   00000038   0B79               LDRB     R3,[R1, #+4]
   \   0000003A   9A42               CMP      R2,R3
   \   0000003C   00D0               BEQ      .+4
   \   0000003E   91E0               B        ??TimetableExecute_8
   \   00000040   8078               LDRB     R0,[R0, #+2]
   \   00000042   0122               MOVS     R2,#+1
   \   00000044   8B79               LDRB     R3,[R1, #+6]
   \   00000046   5B1E               SUBS     R3,R3,#+1
   \   00000048   9A40               LSLS     R2,R2,R3
   \   0000004A   1042               TST      R0,R2
   \   0000004C   00D1               BNE      .+4
   \   0000004E   89E0               B        ??TimetableExecute_8
   \   00000050   4879               LDRB     R0,[R1, #+5]
   \   00000052   0028               CMP      R0,#+0
   \   00000054   00D0               BEQ      .+4
   \   00000056   85E0               B        ??TimetableExecute_8
    880                       {
    881                         if (gProg.Screen[sc].Timetable.ActionType==2)
   \   00000058   A800               LSLS     R0,R5,#+2
   \   0000005A   4A49               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   0000005C   0818               ADDS     R0,R1,R0
   \   0000005E   8019               ADDS     R0,R0,R6
   \   00000060   0190               STR      R0,[SP, #+4]
   \   00000062   0078               LDRB     R0,[R0, #+0]
   \   00000064   B978               LDRB     R1,[R7, #+2]
   \   00000066   0229               CMP      R1,#+2
   \   00000068   50D1               BNE      ??TimetableExecute_9
    882                         {
    883                           if (Out[sc][tn])
   \   0000006A   0028               CMP      R0,#+0
   \   0000006C   2DD0               BEQ      ??TimetableExecute_10
    884                           {
    885                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \                     ??TimetableExecute_11:
   \   0000006E   0020               MOVS     R0,#+0
   \   00000070   3856               LDRSB    R0,[R7, R0]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   0ED5               BPL      ??TimetableExecute_12
    886                             {
    887                                Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
   \   00000076   7878               LDRB     R0,[R7, #+1]
   \   00000078   4349               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000007A   0200               MOVS     R2,R0
   \   0000007C   D210               ASRS     R2,R2,#+3
   \   0000007E   8A18               ADDS     R2,R1,R2
   \   00000080   1378               LDRB     R3,[R2, #+0]
   \   00000082   0121               MOVS     R1,#+1
   \   00000084   0700               MOVS     R7,R0
   \   00000086   FF08               LSRS     R7,R7,#+3
   \   00000088   FF00               LSLS     R7,R7,#+3
   \   0000008A   C01B               SUBS     R0,R0,R7
   \   0000008C   8140               LSLS     R1,R1,R0
   \   0000008E   8B43               BICS     R3,R3,R1
   \   00000090   1370               STRB     R3,[R2, #+0]
   \   00000092   15E0               B        ??TimetableExecute_13
    888                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_12:
   \   00000094   0022               MOVS     R2,#+0
   \   00000096   7978               LDRB     R1,[R7, #+1]
   \   00000098   8C46               MOV      R12,R1
   \   0000009A   D721               MOVS     R1,#+215
   \   0000009C   8900               LSLS     R1,R1,#+2        ;; #+860
   \   0000009E   0020               MOVS     R0,#+0
   \   000000A0   3856               LDRSB    R0,[R7, R0]
   \   000000A2   1423               MOVS     R3,#+20
   \   000000A4   5843               MULS     R0,R3,R0
   \   000000A6   394B               LDR      R3,??TimetableExecute_7+0xC  ;; MainStage
   \   000000A8   1818               ADDS     R0,R3,R0
   \   000000AA   4018               ADDS     R0,R0,R1
   \   000000AC   6146               MOV      R1,R12
    889                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);  
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   000000AE   ........           BL       PortStageSet
    890                                MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
   \   000000B2   3748               LDR      R0,??TimetableExecute_7+0x10  ;; 0x619
   \   000000B4   0021               MOVS     R1,#+0
   \   000000B6   7956               LDRSB    R1,[R7, R1]
   \   000000B8   344A               LDR      R2,??TimetableExecute_7+0xC  ;; MainStage
   \   000000BA   5118               ADDS     R1,R2,R1
   \   000000BC   1422               MOVS     R2,#+20
   \   000000BE   0A54               STRB     R2,[R1, R0]
    891                             }
    892                             Out[sc][tn]=0;
   \                     ??TimetableExecute_13:
   \   000000C0   A800               LSLS     R0,R5,#+2
   \   000000C2   3049               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   000000C4   0818               ADDS     R0,R1,R0
   \   000000C6   0021               MOVS     R1,#+0
   \   000000C8   8155               STRB     R1,[R0, R6]
    893                           }
    894                         }else{
   \                     ??TimetableExecute_10:
   \   000000CA   641C               ADDS     R4,R4,#+1
   \   000000CC   2406               LSLS     R4,R4,#+24
   \   000000CE   240E               LSRS     R4,R4,#+24
   \                     ??TimetableExecute_3:
   \   000000D0   2000               MOVS     R0,R4
   \   000000D2   0428               CMP      R0,#+4
   \   000000D4   98D2               BCS      ??TimetableExecute_1
   \   000000D6   2600               MOVS     R6,R4
   \   000000D8   009D               LDR      R5,[SP, #+0]
   \   000000DA   2D06               LSLS     R5,R5,#+24
   \   000000DC   2D0E               LSRS     R5,R5,#+24
   \   000000DE   B000               LSLS     R0,R6,#+2
   \   000000E0   1121               MOVS     R1,#+17
   \   000000E2   6943               MULS     R1,R5,R1
   \   000000E4   2B4A               LDR      R2,??TimetableExecute_7+0x14  ;; 0x13d830
   \   000000E6   5118               ADDS     R1,R2,R1
   \   000000E8   0818               ADDS     R0,R1,R0
   \   000000EA   4178               LDRB     R1,[R0, #+1]
   \   000000EC   0129               CMP      R1,#+1
   \   000000EE   ECD1               BNE      ??TimetableExecute_10
   \   000000F0   2949               LDR      R1,??TimetableExecute_7+0x18  ;; 0xbc24
   \   000000F2   A022               MOVS     R2,#+160
   \   000000F4   6A43               MULS     R2,R5,R2
   \   000000F6   294B               LDR      R3,??TimetableExecute_7+0x1C  ;; gProg
   \   000000F8   9A18               ADDS     R2,R3,R2
   \   000000FA   5718               ADDS     R7,R2,R1
   \   000000FC   F978               LDRB     R1,[R7, #+3]
   \   000000FE   0029               CMP      R1,#+0
   \   00000100   91D0               BEQ      ??TimetableExecute_6
   \   00000102   C178               LDRB     R1,[R0, #+3]
   \   00000104   0029               CMP      R1,#+0
   \   00000106   8CD0               BEQ      ??TimetableExecute_4
   \   00000108   4A1E               SUBS     R2,R1,#+1
   \   0000010A   8DE7               B        ??TimetableExecute_5
    895                           
    896                           if (Out[sc][tn]==0) {
   \                     ??TimetableExecute_9:
   \   0000010C   0028               CMP      R0,#+0
   \   0000010E   25D1               BNE      ??TimetableExecute_14
    897                             if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
   \   00000110   3856               LDRSB    R0,[R7, R0]
   \   00000112   0028               CMP      R0,#+0
   \   00000114   0ED5               BPL      ??TimetableExecute_15
    898                             {
    899                                Variables[gProg.Screen[sc].Timetable.ActorPort/8] |= 1<<(gProg.Screen[sc].Timetable.ActorPort%8);
   \   00000116   7878               LDRB     R0,[R7, #+1]
   \   00000118   1B49               LDR      R1,??TimetableExecute_7+0x8  ;; Variables
   \   0000011A   0200               MOVS     R2,R0
   \   0000011C   D210               ASRS     R2,R2,#+3
   \   0000011E   8918               ADDS     R1,R1,R2
   \   00000120   0A78               LDRB     R2,[R1, #+0]
   \   00000122   0123               MOVS     R3,#+1
   \   00000124   0500               MOVS     R5,R0
   \   00000126   ED08               LSRS     R5,R5,#+3
   \   00000128   ED00               LSLS     R5,R5,#+3
   \   0000012A   401B               SUBS     R0,R0,R5
   \   0000012C   8340               LSLS     R3,R3,R0
   \   0000012E   1343               ORRS     R3,R3,R2
   \   00000130   0B70               STRB     R3,[R1, #+0]
   \   00000132   13E0               B        ??TimetableExecute_14
    900                             }else{  //je¿eli wêze³
   \                     ??TimetableExecute_15:
   \   00000134   0122               MOVS     R2,#+1
   \   00000136   7978               LDRB     R1,[R7, #+1]
   \   00000138   D720               MOVS     R0,#+215
   \   0000013A   8000               LSLS     R0,R0,#+2        ;; #+860
   \   0000013C   0023               MOVS     R3,#+0
   \   0000013E   FB56               LDRSB    R3,[R7, R3]
   \   00000140   1425               MOVS     R5,#+20
   \   00000142   6B43               MULS     R3,R5,R3
   \   00000144   114D               LDR      R5,??TimetableExecute_7+0xC  ;; MainStage
   \   00000146   EB18               ADDS     R3,R5,R3
   \   00000148   1818               ADDS     R0,R3,R0
    901                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 1);  
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000014A   ........           BL       PortStageSet
    902                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;}
   \   0000014E   1048               LDR      R0,??TimetableExecute_7+0x10  ;; 0x619
   \   00000150   0021               MOVS     R1,#+0
   \   00000152   7956               LDRSB    R1,[R7, R1]
   \   00000154   0D4A               LDR      R2,??TimetableExecute_7+0xC  ;; MainStage
   \   00000156   5118               ADDS     R1,R2,R1
   \   00000158   1422               MOVS     R2,#+20
   \   0000015A   0A54               STRB     R2,[R1, R0]
    903                             }
    904                           Out[sc][tn]=1;
   \                     ??TimetableExecute_14:
   \   0000015C   0198               LDR      R0,[SP, #+4]
   \   0000015E   0121               MOVS     R1,#+1
   \   00000160   0170               STRB     R1,[R0, #+0]
   \   00000162   B2E7               B        ??TimetableExecute_10
    905                           
    906                         }
    907                       }else{
    908                         if ((gProg.Screen[sc].Timetable.ActionType==0) && (Out[sc][tn]==1)) 
   \                     ??TimetableExecute_8:
   \   00000164   B878               LDRB     R0,[R7, #+2]
   \   00000166   0028               CMP      R0,#+0
   \   00000168   AAD1               BNE      ??TimetableExecute_13
   \   0000016A   A800               LSLS     R0,R5,#+2
   \   0000016C   0549               LDR      R1,??TimetableExecute_7+0x4  ;; ??Out
   \   0000016E   0818               ADDS     R0,R1,R0
   \   00000170   805D               LDRB     R0,[R0, R6]
   \   00000172   0128               CMP      R0,#+1
   \   00000174   A4D1               BNE      ??TimetableExecute_13
   \   00000176   7AE7               B        ??TimetableExecute_11
    909                         {
    910                           if (gProg.Screen[sc].Timetable.ActorNode<0)  //je¿eli zmienna
    911                             {
    912                               Variables[gProg.Screen[sc].Timetable.ActorPort/8]&= ~(1<<(gProg.Screen[sc].Timetable.ActorPort%8));
    913                             }else{  //je¿eli wêze³
    914                              PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Timetable.ActorNode].Port), gProg.Screen[sc].Timetable.ActorPort, 0);
                                                  ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
    915                              MainStage.SendStageChange[gProg.Screen[sc].Timetable.ActorNode]=ChangeStageFlag;
    916                             }
    917                         }
    918                         Out[sc][tn]=0;
    919                         
    920                       }
    921                   
    922                   }
    923                   
    924                   
    925               }
    926               
    927            }
    928          }
   \                     ??TimetableExecute_2:
   \   00000178   FEBC               POP      {R1-R7}
   \   0000017A   01BC               POP      {R0}
   \   0000017C   0047               BX       R0               ;; return
   \   0000017E   C046               Nop      
   \                     ??TimetableExecute_7:
   \   00000180   ........           DC32     DateTime
   \   00000184   ........           DC32     ??Out
   \   00000188   ........           DC32     Variables
   \   0000018C   ........           DC32     MainStage
   \   00000190   19060000           DC32     0x619
   \   00000194   30D81300           DC32     0x13d830
   \   00000198   24BC0000           DC32     0xbc24
   \   0000019C   ........           DC32     gProg

   \                                 In section .bss, align 4
   \                     ??Out:
   \   00000000                      DS8 32
    929          
    930          
    931          

   \                                 In section Debug.txt, align 4, keep-with-next
    932          void ThermostatsTimeChartExecute(void)
    933          {
   \                     ThermostatsTimeChartExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
    934            
    935            signed   short H_Tmp;
    936            signed   short L_Tmp;
    937            signed   short New_Temp;
    938            static  signed short LastTemp[ScreenNr];
    939              
    940            for (signed int sc=0; sc<ScreenNr; )
   \   00000002   0022               MOVS     R2,#+0
   \   00000004   05E0               B        ??ThermostatsTimeChartExecute_0
    941            {
    942              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
    943                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
    944              {
    945                     //je¿eli ustawienie automatyczne temperatury
    946                     if (gProg.Screen[sc].Thermo.AutoOn) 
    947                     {                       
    948                          if (gProg.Screen[sc].Thermo.Temperature[0]>gProg.Screen[sc].Thermo.Temperature[1])
    949                              {
    950                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    951                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[1]; 
    952                              }else{
    953                                H_Tmp=gProg.Screen[sc].Thermo.Temperature[1];
    954                                L_Tmp=gProg.Screen[sc].Thermo.Temperature[0]; 
    955                              }
    956                          
    957                         //je¿eli dzieñ wykresu pierwszego
    958                         if (((gProg.Screen[sc].Thermo.Week>>(DateTime.DayOfWeek-1)) & 0x1)==1)       
    959                         {
    960          
    961                           
    962                              if (((gProg.Screen[sc].Thermo.Chart[0]>>DateTime.Hour) & 0x1)==1)
    963                              {                 
    964                                //ustaw wy¿sz¹ temperaturê
    965                                  New_Temp=H_Tmp; 
    966                              }else{
    967                                //ustaw ni¿sz¹ temperaturê
    968                                  New_Temp=L_Tmp;
    969                              }
    970                         }else{
    971          
    972                              if (((gProg.Screen[sc].Thermo.Chart[1]>>DateTime.Hour) & 0x1)==1)
    973                              {                 
    974                                //ustaw wy¿sz¹ temperaturê
    975                                  New_Temp=H_Tmp; 
    976                              }else{
    977                                //ustaw ni¿sz¹ temperaturê
    978                                  New_Temp=L_Tmp;
    979                              }
    980                         }
    981                         if (LastTemp[sc]!=New_Temp)  
    982                            {
    983                                gProg.Screen[sc].Thermo.SetTemperature=New_Temp;
    984                                LastTemp[sc]=gProg.Screen[sc].Thermo.SetTemperature;
    985                            }
    986                     }else{
    987                        LastTemp[sc]=-9999;
   \                     ??ThermostatsTimeChartExecute_1:
   \   00000006   5000               LSLS     R0,R2,#+1
   \   00000008   2949               LDR      R1,??ThermostatsTimeChartExecute_2  ;; DateTime
   \   0000000A   0818               ADDS     R0,R1,R0
   \   0000000C   2949               LDR      R1,??ThermostatsTimeChartExecute_2+0x4  ;; 0xffffd8f1
   \   0000000E   0185               STRH     R1,[R0, #+40]
    988                     }
    989               }
    990              sc++;
   \                     ??ThermostatsTimeChartExecute_3:
   \   00000010   521C               ADDS     R2,R2,#+1
   \                     ??ThermostatsTimeChartExecute_0:
   \   00000012   082A               CMP      R2,#+8
   \   00000014   48DA               BGE      ??ThermostatsTimeChartExecute_4
   \   00000016   002A               CMP      R2,#+0
   \   00000018   03D1               BNE      ??ThermostatsTimeChartExecute_5
   \   0000001A   2748               LDR      R0,??ThermostatsTimeChartExecute_2+0x8  ;; gProg + 48024
   \   0000001C   0078               LDRB     R0,[R0, #+0]
   \   0000001E   0828               CMP      R0,#+8
   \   00000020   09D0               BEQ      ??ThermostatsTimeChartExecute_6
   \                     ??ThermostatsTimeChartExecute_5:
   \   00000022   002A               CMP      R2,#+0
   \   00000024   F4D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   00000026   2548               LDR      R0,??ThermostatsTimeChartExecute_2+0xC  ;; 0xbb98
   \   00000028   A021               MOVS     R1,#+160
   \   0000002A   5143               MULS     R1,R2,R1
   \   0000002C   244B               LDR      R3,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000002E   5918               ADDS     R1,R3,R1
   \   00000030   085C               LDRB     R0,[R1, R0]
   \   00000032   0528               CMP      R0,#+5
   \   00000034   ECD1               BNE      ??ThermostatsTimeChartExecute_3
   \                     ??ThermostatsTimeChartExecute_6:
   \   00000036   A020               MOVS     R0,#+160
   \   00000038   5043               MULS     R0,R2,R0
   \   0000003A   2149               LDR      R1,??ThermostatsTimeChartExecute_2+0x10  ;; gProg
   \   0000003C   0C18               ADDS     R4,R1,R0
   \   0000003E   2148               LDR      R0,??ThermostatsTimeChartExecute_2+0x14  ;; 0xbc26
   \   00000040   2318               ADDS     R3,R4,R0
   \   00000042   1878               LDRB     R0,[R3, #+0]
   \   00000044   0028               CMP      R0,#+0
   \   00000046   DED0               BEQ      ??ThermostatsTimeChartExecute_1
   \   00000048   0620               MOVS     R0,#+6
   \   0000004A   185E               LDRSH    R0,[R3, R0]
   \   0000004C   0421               MOVS     R1,#+4
   \   0000004E   595E               LDRSH    R1,[R3, R1]
   \   00000050   8842               CMP      R0,R1
   \   00000052   03DA               BGE      ??ThermostatsTimeChartExecute_7
   \   00000054   0800               MOVS     R0,R1
   \   00000056   0621               MOVS     R1,#+6
   \   00000058   595E               LDRSH    R1,[R3, R1]
   \   0000005A   03E0               B        ??ThermostatsTimeChartExecute_8
   \                     ??ThermostatsTimeChartExecute_7:
   \   0000005C   0620               MOVS     R0,#+6
   \   0000005E   185E               LDRSH    R0,[R3, R0]
   \   00000060   0421               MOVS     R1,#+4
   \   00000062   595E               LDRSH    R1,[R3, R1]
   \                     ??ThermostatsTimeChartExecute_8:
   \   00000064   184D               LDR      R5,??ThermostatsTimeChartExecute_2+0x18  ;; DateTime + 3
   \   00000066   2D78               LDRB     R5,[R5, #+0]
   \   00000068   DE78               LDRB     R6,[R3, #+3]
   \   0000006A   184F               LDR      R7,??ThermostatsTimeChartExecute_2+0x1C  ;; DateTime + 6
   \   0000006C   3F78               LDRB     R7,[R7, #+0]
   \   0000006E   7F1E               SUBS     R7,R7,#+1
   \   00000070   3E41               ASRS     R6,R6,R7
   \   00000072   F607               LSLS     R6,R6,#+31
   \   00000074   06D5               BPL      ??ThermostatsTimeChartExecute_9
   \   00000076   164E               LDR      R6,??ThermostatsTimeChartExecute_2+0x20  ;; 0xbc30
   \   00000078   A459               LDR      R4,[R4, R6]
   \   0000007A   EC40               LSRS     R4,R4,R5
   \   0000007C   E407               LSLS     R4,R4,#+31
   \   0000007E   08D4               BMI      ??ThermostatsTimeChartExecute_10
   \   00000080   0800               MOVS     R0,R1
   \   00000082   06E0               B        ??ThermostatsTimeChartExecute_10
   \                     ??ThermostatsTimeChartExecute_9:
   \   00000084   124E               LDR      R6,??ThermostatsTimeChartExecute_2+0x20  ;; 0xbc30
   \   00000086   A419               ADDS     R4,R4,R6
   \   00000088   6468               LDR      R4,[R4, #+4]
   \   0000008A   EC40               LSRS     R4,R4,R5
   \   0000008C   E407               LSLS     R4,R4,#+31
   \   0000008E   00D4               BMI      ??ThermostatsTimeChartExecute_10
   \   00000090   0800               MOVS     R0,R1
   \                     ??ThermostatsTimeChartExecute_10:
   \   00000092   5100               LSLS     R1,R2,#+1
   \   00000094   064C               LDR      R4,??ThermostatsTimeChartExecute_2  ;; DateTime
   \   00000096   6118               ADDS     R1,R4,R1
   \   00000098   2824               MOVS     R4,#+40
   \   0000009A   0C5F               LDRSH    R4,[R1, R4]
   \   0000009C   8442               CMP      R4,R0
   \   0000009E   B7D0               BEQ      ??ThermostatsTimeChartExecute_3
   \   000000A0   1881               STRH     R0,[R3, #+8]
   \   000000A2   1889               LDRH     R0,[R3, #+8]
   \   000000A4   0885               STRH     R0,[R1, #+40]
   \   000000A6   B3E7               B        ??ThermostatsTimeChartExecute_3
    991            }
    992          }
   \                     ??ThermostatsTimeChartExecute_4:
   \   000000A8   F8BC               POP      {R3-R7}
   \   000000AA   01BC               POP      {R0}
   \   000000AC   0047               BX       R0               ;; return
   \   000000AE   C046               Nop      
   \                     ??ThermostatsTimeChartExecute_2:
   \   000000B0   ........           DC32     DateTime
   \   000000B4   F1D8FFFF           DC32     0xffffd8f1
   \   000000B8   ........           DC32     gProg + 48024
   \   000000BC   98BB0000           DC32     0xbb98
   \   000000C0   ........           DC32     gProg
   \   000000C4   26BC0000           DC32     0xbc26
   \   000000C8   ........           DC32     DateTime + 3
   \   000000CC   ........           DC32     DateTime + 6
   \   000000D0   30BC0000           DC32     0xbc30
    993          
    994          
    995           // int MainScreenTermo=ScreenSetTab_0_Nr;
    996           // int SubScreenTermo=ScreenSetTab_1_Nr;
    997            //int MainScreenTimetable=ScreenSetTab_0_Nr+1;
    998            //int SubScreenTimetable=ScreenSetTab_1_Nr+1;

   \                                 In section Debug.txt, align 4, keep-with-next
    999          void ThermostatsExecute(void)
   1000          {
   \                     ThermostatsExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0024               MOVS     R4,#+0
   \   00000004   16E0               B        ??ThermostatsExecute_0
   1001            short  SensorNodeValue;
   1002           
   1003            static char Hysteresis[ScreenNr];
   1004            
   1005            for (char sc=0; sc<ScreenNr; sc++)
   1006            {
   1007              if (((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenTermo)) || 
   1008                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenTermo)))
   1009              {
   1010                     SensorNodeValue=0;
   1011                     if (gProg.Screen[sc].Thermo.SensorNode<0) //je¿eli zmienna
   1012                     {
   1013                       SensorNodeValue=VariablesAnal[gProg.Screen[sc].Thermo.SensorReg];
   1014                     }else{
   1015                       SensorNodeValue=MainStage.StageI[gProg.Screen[sc].Thermo.SensorNode].Value[gProg.Screen[sc].Thermo.SensorReg];
   1016                     }
   1017                
   1018                     //zeruje stan wyjœcia je¿eli temperatura wy¿sza od za³o¿onej 
   1019                     if (SensorNodeValue>=gProg.Screen[sc].Thermo.SetTemperature)
   1020                     {
   1021                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   1022                       {
   1023                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] &= ~(1<<(gProg.Screen[sc].Thermo.ActorPort%8));
   1024                       }else{
   1025                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 0);  
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1026                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   1027                       }
   1028                       Hysteresis[sc]=ThermostatHysteresis; //ustawia histerezê
   1029                     }
   1030                     
   1031                     //ustawia na 1 stan wyjœcia je¿eli temperatura ni¿sza od za³o¿onej - histereza
   1032                     if (SensorNodeValue>0)
   1033                     if (SensorNodeValue<=gProg.Screen[sc].Thermo.SetTemperature-Hysteresis[sc])
   1034                     {
   1035                       Hysteresis[sc]=0;
   1036                       if (gProg.Screen[sc].Thermo.ActorNode<0)  //je¿eli zmienna
   \                     ??ThermostatsExecute_1:
   \   00000006   0122               MOVS     R2,#+1
   \   00000008   7178               LDRB     R1,[R6, #+1]
   \   0000000A   D720               MOVS     R0,#+215
   \   0000000C   8000               LSLS     R0,R0,#+2        ;; #+860
   \   0000000E   0023               MOVS     R3,#+0
   \   00000010   F356               LDRSB    R3,[R6, R3]
   \   00000012   1425               MOVS     R5,#+20
   \   00000014   6B43               MULS     R3,R5,R3
   \   00000016   4B4D               LDR      R5,??ThermostatsExecute_2  ;; MainStage
   \   00000018   EB18               ADDS     R3,R5,R3
   \   0000001A   1818               ADDS     R0,R3,R0
   1037                       {
   1038                          Variables[gProg.Screen[sc].Thermo.ActorPort/8] |= 1<<(gProg.Screen[sc].Thermo.ActorPort%8);
   1039                       }else{
   1040                          PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Thermo.ActorNode].Port), gProg.Screen[sc].Thermo.ActorPort, 1);   
                                              ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   0000001C   ........           BL       PortStageSet
   1041                          MainStage.SendStageChange[gProg.Screen[sc].Thermo.ActorNode]=ChangeStageFlag;
   \   00000020   4948               LDR      R0,??ThermostatsExecute_2+0x4  ;; 0x619
   \   00000022   0021               MOVS     R1,#+0
   \   00000024   7156               LDRSB    R1,[R6, R1]
   \   00000026   474A               LDR      R2,??ThermostatsExecute_2  ;; MainStage
   \   00000028   5118               ADDS     R1,R2,R1
   \   0000002A   1422               MOVS     R2,#+20
   \   0000002C   0A54               STRB     R2,[R1, R0]
   1042                       }
   \                     ??ThermostatsExecute_3:
   \   0000002E   641C               ADDS     R4,R4,#+1
   \   00000030   2406               LSLS     R4,R4,#+24
   \   00000032   240E               LSRS     R4,R4,#+24
   \                     ??ThermostatsExecute_0:
   \   00000034   2000               MOVS     R0,R4
   \   00000036   0828               CMP      R0,#+8
   \   00000038   00D3               BCC      .+4
   \   0000003A   7FE0               B        ??ThermostatsExecute_4
   \   0000003C   2000               MOVS     R0,R4
   \   0000003E   08D1               BNE      ??ThermostatsExecute_5
   \   00000040   4248               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0xbb98
   \   00000042   2100               MOVS     R1,R4
   \   00000044   A022               MOVS     R2,#+160
   \   00000046   5143               MULS     R1,R2,R1
   \   00000048   414A               LDR      R2,??ThermostatsExecute_2+0xC  ;; gProg
   \   0000004A   5118               ADDS     R1,R2,R1
   \   0000004C   085C               LDRB     R0,[R1, R0]
   \   0000004E   0828               CMP      R0,#+8
   \   00000050   0AD0               BEQ      ??ThermostatsExecute_6
   \                     ??ThermostatsExecute_5:
   \   00000052   2000               MOVS     R0,R4
   \   00000054   EBD0               BEQ      ??ThermostatsExecute_3
   \   00000056   3D48               LDR      R0,??ThermostatsExecute_2+0x8  ;; 0xbb98
   \   00000058   2100               MOVS     R1,R4
   \   0000005A   A022               MOVS     R2,#+160
   \   0000005C   5143               MULS     R1,R2,R1
   \   0000005E   3C4A               LDR      R2,??ThermostatsExecute_2+0xC  ;; gProg
   \   00000060   5118               ADDS     R1,R2,R1
   \   00000062   085C               LDRB     R0,[R1, R0]
   \   00000064   0528               CMP      R0,#+5
   \   00000066   E2D1               BNE      ??ThermostatsExecute_3
   \                     ??ThermostatsExecute_6:
   \   00000068   2500               MOVS     R5,R4
   \   0000006A   3A48               LDR      R0,??ThermostatsExecute_2+0x10  ;; 0xbc24
   \   0000006C   A021               MOVS     R1,#+160
   \   0000006E   6943               MULS     R1,R5,R1
   \   00000070   5118               ADDS     R1,R2,R1
   \   00000072   0E18               ADDS     R6,R1,R0
   \   00000074   0320               MOVS     R0,#+3
   \   00000076   3056               LDRSB    R0,[R6, R0]
   \   00000078   0028               CMP      R0,#+0
   \   0000007A   04D5               BPL      ??ThermostatsExecute_7
   \   0000007C   3079               LDRB     R0,[R6, #+4]
   \   0000007E   4000               LSLS     R0,R0,#+1
   \   00000080   3549               LDR      R1,??ThermostatsExecute_2+0x14  ;; VariablesAnal
   \   00000082   0F5E               LDRSH    R7,[R1, R0]
   \   00000084   08E0               B        ??ThermostatsExecute_8
   \                     ??ThermostatsExecute_7:
   \   00000086   A021               MOVS     R1,#+160
   \   00000088   3279               LDRB     R2,[R6, #+4]
   \   0000008A   5200               LSLS     R2,R2,#+1
   \   0000008C   1423               MOVS     R3,#+20
   \   0000008E   5843               MULS     R0,R3,R0
   \   00000090   2C4B               LDR      R3,??ThermostatsExecute_2  ;; MainStage
   \   00000092   1818               ADDS     R0,R3,R0
   \   00000094   8018               ADDS     R0,R0,R2
   \   00000096   475E               LDRSH    R7,[R0, R1]
   \                     ??ThermostatsExecute_8:
   \   00000098   0A20               MOVS     R0,#+10
   \   0000009A   305E               LDRSH    R0,[R6, R0]
   \   0000009C   8742               CMP      R7,R0
   \   0000009E   2DDB               BLT      ??ThermostatsExecute_9
   \   000000A0   0020               MOVS     R0,#+0
   \   000000A2   3056               LDRSB    R0,[R6, R0]
   \   000000A4   0028               CMP      R0,#+0
   \   000000A6   10D5               BPL      ??ThermostatsExecute_10
   \   000000A8   7078               LDRB     R0,[R6, #+1]
   \   000000AA   2C49               LDR      R1,??ThermostatsExecute_2+0x18  ;; Variables
   \   000000AC   0200               MOVS     R2,R0
   \   000000AE   D210               ASRS     R2,R2,#+3
   \   000000B0   8918               ADDS     R1,R1,R2
   \   000000B2   0A78               LDRB     R2,[R1, #+0]
   \   000000B4   9446               MOV      R12,R2
   \   000000B6   0122               MOVS     R2,#+1
   \   000000B8   0300               MOVS     R3,R0
   \   000000BA   DB08               LSRS     R3,R3,#+3
   \   000000BC   DB00               LSLS     R3,R3,#+3
   \   000000BE   C01A               SUBS     R0,R0,R3
   \   000000C0   8240               LSLS     R2,R2,R0
   \   000000C2   6046               MOV      R0,R12
   \   000000C4   9043               BICS     R0,R0,R2
   \   000000C6   0870               STRB     R0,[R1, #+0]
   \   000000C8   15E0               B        ??ThermostatsExecute_11
   \                     ??ThermostatsExecute_10:
   \   000000CA   0022               MOVS     R2,#+0
   \   000000CC   7178               LDRB     R1,[R6, #+1]
   \   000000CE   8C46               MOV      R12,R1
   \   000000D0   D721               MOVS     R1,#+215
   \   000000D2   8900               LSLS     R1,R1,#+2        ;; #+860
   \   000000D4   0020               MOVS     R0,#+0
   \   000000D6   3056               LDRSB    R0,[R6, R0]
   \   000000D8   1423               MOVS     R3,#+20
   \   000000DA   5843               MULS     R0,R3,R0
   \   000000DC   194B               LDR      R3,??ThermostatsExecute_2  ;; MainStage
   \   000000DE   1818               ADDS     R0,R3,R0
   \   000000E0   4018               ADDS     R0,R0,R1
   \   000000E2   6146               MOV      R1,R12
   \   000000E4   ........           BL       PortStageSet
   \   000000E8   1748               LDR      R0,??ThermostatsExecute_2+0x4  ;; 0x619
   \   000000EA   0021               MOVS     R1,#+0
   \   000000EC   7156               LDRSB    R1,[R6, R1]
   \   000000EE   154A               LDR      R2,??ThermostatsExecute_2  ;; MainStage
   \   000000F0   5118               ADDS     R1,R2,R1
   \   000000F2   1422               MOVS     R2,#+20
   \   000000F4   0A54               STRB     R2,[R1, R0]
   \                     ??ThermostatsExecute_11:
   \   000000F6   1A48               LDR      R0,??ThermostatsExecute_2+0x1C  ;; ??Hysteresis
   \   000000F8   0221               MOVS     R1,#+2
   \   000000FA   4155               STRB     R1,[R0, R5]
   \                     ??ThermostatsExecute_9:
   \   000000FC   012F               CMP      R7,#+1
   \   000000FE   96DB               BLT      ??ThermostatsExecute_3
   \   00000100   1748               LDR      R0,??ThermostatsExecute_2+0x1C  ;; ??Hysteresis
   \   00000102   4019               ADDS     R0,R0,R5
   \   00000104   0A21               MOVS     R1,#+10
   \   00000106   715E               LDRSH    R1,[R6, R1]
   \   00000108   0278               LDRB     R2,[R0, #+0]
   \   0000010A   891A               SUBS     R1,R1,R2
   \   0000010C   B942               CMP      R1,R7
   \   0000010E   8EDB               BLT      ??ThermostatsExecute_3
   \   00000110   0021               MOVS     R1,#+0
   \   00000112   0170               STRB     R1,[R0, #+0]
   \   00000114   0020               MOVS     R0,#+0
   \   00000116   3056               LDRSB    R0,[R6, R0]
   \   00000118   0028               CMP      R0,#+0
   \   0000011A   00D4               BMI      .+4
   \   0000011C   73E7               B        ??ThermostatsExecute_1
   \   0000011E   7078               LDRB     R0,[R6, #+1]
   \   00000120   0E49               LDR      R1,??ThermostatsExecute_2+0x18  ;; Variables
   \   00000122   0200               MOVS     R2,R0
   \   00000124   D210               ASRS     R2,R2,#+3
   \   00000126   8918               ADDS     R1,R1,R2
   \   00000128   0A78               LDRB     R2,[R1, #+0]
   \   0000012A   0123               MOVS     R3,#+1
   \   0000012C   0500               MOVS     R5,R0
   \   0000012E   ED08               LSRS     R5,R5,#+3
   \   00000130   ED00               LSLS     R5,R5,#+3
   \   00000132   401B               SUBS     R0,R0,R5
   \   00000134   8340               LSLS     R3,R3,R0
   \   00000136   1343               ORRS     R3,R3,R2
   \   00000138   0B70               STRB     R3,[R1, #+0]
   \   0000013A   78E7               B        ??ThermostatsExecute_3
   1043                     }
   1044                     
   1045                     
   1046              }
   1047            }
   1048          }
   \                     ??ThermostatsExecute_4:
   \   0000013C   F8BC               POP      {R3-R7}
   \   0000013E   01BC               POP      {R0}
   \   00000140   0047               BX       R0               ;; return
   \   00000142   C046               Nop      
   \                     ??ThermostatsExecute_2:
   \   00000144   ........           DC32     MainStage
   \   00000148   19060000           DC32     0x619
   \   0000014C   98BB0000           DC32     0xbb98
   \   00000150   ........           DC32     gProg
   \   00000154   24BC0000           DC32     0xbc24
   \   00000158   ........           DC32     VariablesAnal
   \   0000015C   ........           DC32     Variables
   \   00000160   ........           DC32     ??Hysteresis

   \                                 In section .bss, align 4
   \                     ??Hysteresis:
   \   00000000                      DS8 8
   1049          
   1050          
   1051          
   1052          char out[10]={1,1,1,1,1,1,1,1,1,1};

   \                                 In section Debug.txt, align 4, keep-with-next
   1053          void AlarmExecute(void)
   1054          {
   \                     AlarmExecute:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   \   00000002   0026               MOVS     R6,#+0
   \   00000004   2BE0               B        ??AlarmExecute_0
   1055          
   1056          static long long AlarmOnTime[ScreenNr];  //czas do odliczania dla alarmu
   1057          static long long AlarmOffTime[ScreenNr];
   1058            
   1059            for (char sc=0; sc<ScreenNr; sc++)
   1060            {
   1061              if ((((sc==0) && (gProg.Screen[sc].PaternDesign==MainScreenAlarm)) || 
   1062                  ((sc) && (gProg.Screen[sc].PaternDesign==SubScreenAlarm))))
   1063              {
   1064                if (AlarmScreenAction[sc].Active) 
   1065                {
   1066                           //zeruje stan wyjœcia je¿eli zda¿enie od czujnika             
   1067                      if (PortStageRead(MainStage.StageI[gProg.Screen[sc].Alarm.SensorNode].Port, gProg.Screen[sc].Alarm.SensorPort)==0x1)  
   1068                           {
   1069                             if (AlarmOnTime[sc]==0) {AlarmOnTime[sc]=g_counter;}
   1070                             if ((g_counter>AlarmOnTime[sc]+AlarmTimeToActive*1000) && (out[sc]==0))
   1071                             {
   1072                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 0);
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1073                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1074                                AlarmOn=1; 
   1075                                out[sc]=1;
   1076                                AlarmOffTime[sc]=g_counter;
   1077                             }
   1078                             if ((AlarmOffTime>0) && (g_counter>AlarmOffTime[sc]+AlarmSirenTime*1000) && (out[sc]==1))
   1079                             {
   1080                                PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1); 
                                                    ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   1081                                MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   1082                                AlarmOn=0; 
   1083                                out[sc]=1;
   1084                                AlarmOffTime[sc]=0;
   1085           
   1086                             }
   1087                             
   1088                            
   1089                             
   1090                           }
   1091                }else{
   1092                  if (out[sc]==1)
   \                     ??AlarmExecute_1:
   \   00000006   7248               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000008   0719               ADDS     R7,R0,R4
   \   0000000A   387C               LDRB     R0,[R7, #+16]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   23D1               BNE      ??AlarmExecute_3
   1093                  {
   1094                      out[sc]=0;
   \   00000010   0020               MOVS     R0,#+0
   \   00000012   3874               STRB     R0,[R7, #+16]
   1095                      AlarmOnTime[sc]=0;
   \   00000014   E000               LSLS     R0,R4,#+3
   \   00000016   0A18               ADDS     R2,R1,R0
   \   00000018   2032               ADDS     R2,R2,#+32
   \   0000001A   0020               MOVS     R0,#+0
   \   0000001C   0100               MOVS     R1,R0
   \   0000001E   03C2               STM      R2!,{R0,R1}
   1096                      AlarmOn=0; 
   \   00000020   6C48               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 19
   \   00000022   0170               STRB     R1,[R0, #+0]
   1097                      PortStageSet(&(MainStage.StageQ[gProg.Screen[sc].Alarm.ActorNode].Port), gProg.Screen[sc].Alarm.ActorPort, 1);
                                          ^
Warning[Pe167]: argument of type "unsigned short *" is incompatible with
          parameter of type "short *"
   \   00000024   A020               MOVS     R0,#+160
   \   00000026   4443               MULS     R4,R0,R4
   \   00000028   6B48               LDR      R0,??AlarmExecute_2+0x8  ;; gProg
   \   0000002A   0019               ADDS     R0,R0,R4
   \   0000002C   6B49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   0000002E   4518               ADDS     R5,R0,R1
   \   00000030   0122               MOVS     R2,#+1
   \   00000032   6978               LDRB     R1,[R5, #+1]
   \   00000034   D720               MOVS     R0,#+215
   \   00000036   8000               LSLS     R0,R0,#+2        ;; #+860
   \   00000038   0023               MOVS     R3,#+0
   \   0000003A   EB56               LDRSB    R3,[R5, R3]
   \   0000003C   1424               MOVS     R4,#+20
   \   0000003E   6343               MULS     R3,R4,R3
   \   00000040   674C               LDR      R4,??AlarmExecute_2+0x10  ;; MainStage
   \   00000042   E318               ADDS     R3,R4,R3
   \   00000044   1818               ADDS     R0,R3,R0
   \   00000046   ........           BL       PortStageSet
   1098                      MainStage.SendStageChange[gProg.Screen[sc].Alarm.ActorNode]=ChangeStageFlag;
   \   0000004A   6648               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   0000004C   0021               MOVS     R1,#+0
   \   0000004E   6956               LDRSB    R1,[R5, R1]
   \   00000050   634A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   00000052   5118               ADDS     R1,R2,R1
   \   00000054   1422               MOVS     R2,#+20
   \   00000056   0A54               STRB     R2,[R1, R0]
   1099                  }
   1100                }
   \                     ??AlarmExecute_3:
   \   00000058   761C               ADDS     R6,R6,#+1
   \   0000005A   3606               LSLS     R6,R6,#+24
   \   0000005C   360E               LSRS     R6,R6,#+24
   \                     ??AlarmExecute_0:
   \   0000005E   3000               MOVS     R0,R6
   \   00000060   0828               CMP      R0,#+8
   \   00000062   00D3               BCC      .+4
   \   00000064   B0E0               B        ??AlarmExecute_4
   \   00000066   3000               MOVS     R0,R6
   \   00000068   08D1               BNE      ??AlarmExecute_5
   \   0000006A   5F48               LDR      R0,??AlarmExecute_2+0x18  ;; 0xbb98
   \   0000006C   3100               MOVS     R1,R6
   \   0000006E   A022               MOVS     R2,#+160
   \   00000070   5143               MULS     R1,R2,R1
   \   00000072   594A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   00000074   5118               ADDS     R1,R2,R1
   \   00000076   085C               LDRB     R0,[R1, R0]
   \   00000078   0A28               CMP      R0,#+10
   \   0000007A   0AD0               BEQ      ??AlarmExecute_6
   \                     ??AlarmExecute_5:
   \   0000007C   3000               MOVS     R0,R6
   \   0000007E   EBD0               BEQ      ??AlarmExecute_3
   \   00000080   5948               LDR      R0,??AlarmExecute_2+0x18  ;; 0xbb98
   \   00000082   3100               MOVS     R1,R6
   \   00000084   A022               MOVS     R2,#+160
   \   00000086   5143               MULS     R1,R2,R1
   \   00000088   534A               LDR      R2,??AlarmExecute_2+0x8  ;; gProg
   \   0000008A   5118               ADDS     R1,R2,R1
   \   0000008C   085C               LDRB     R0,[R1, R0]
   \   0000008E   0728               CMP      R0,#+7
   \   00000090   E2D1               BNE      ??AlarmExecute_3
   \                     ??AlarmExecute_6:
   \   00000092   3400               MOVS     R4,R6
   \   00000094   6000               LSLS     R0,R4,#+1
   \   00000096   4E49               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000098   085C               LDRB     R0,[R1, R0]
   \   0000009A   0028               CMP      R0,#+0
   \   0000009C   B3D0               BEQ      ??AlarmExecute_1
   \   0000009E   A020               MOVS     R0,#+160
   \   000000A0   6043               MULS     R0,R4,R0
   \   000000A2   4D49               LDR      R1,??AlarmExecute_2+0x8  ;; gProg
   \   000000A4   0818               ADDS     R0,R1,R0
   \   000000A6   4D49               LDR      R1,??AlarmExecute_2+0xC  ;; 0xbc24
   \   000000A8   4518               ADDS     R5,R0,R1
   \   000000AA   E978               LDRB     R1,[R5, #+3]
   \   000000AC   0220               MOVS     R0,#+2
   \   000000AE   2856               LDRSB    R0,[R5, R0]
   \   000000B0   1422               MOVS     R2,#+20
   \   000000B2   5043               MULS     R0,R2,R0
   \   000000B4   4A4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   000000B6   1018               ADDS     R0,R2,R0
   \   000000B8   A030               ADDS     R0,R0,#+160
   \   000000BA   0088               LDRH     R0,[R0, #+0]
   \   000000BC   0004               LSLS     R0,R0,#+16
   \   000000BE   0014               ASRS     R0,R0,#+16
   \   000000C0   ........           BL       PortStageRead
   \   000000C4   0128               CMP      R0,#+1
   \   000000C6   C7D1               BNE      ??AlarmExecute_3
   \   000000C8   E000               LSLS     R0,R4,#+3
   \   000000CA   4149               LDR      R1,??AlarmExecute_2  ;; AlarmScreenAction
   \   000000CC   0818               ADDS     R0,R1,R0
   \   000000CE   0090               STR      R0,[SP, #+0]
   \   000000D0   2030               ADDS     R0,R0,#+32
   \   000000D2   03C8               LDM      R0!,{R0,R1}
   \   000000D4   0029               CMP      R1,#+0
   \   000000D6   06D1               BNE      ??AlarmExecute_7
   \   000000D8   0028               CMP      R0,#+0
   \   000000DA   04D1               BNE      ??AlarmExecute_7
   \   000000DC   009A               LDR      R2,[SP, #+0]
   \   000000DE   2032               ADDS     R2,R2,#+32
   \   000000E0   4248               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 56
   \   000000E2   03C8               LDM      R0!,{R0,R1}
   \   000000E4   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_7:
   \   000000E6   0098               LDR      R0,[SP, #+0]
   \   000000E8   2030               ADDS     R0,R0,#+32
   \   000000EA   03C8               LDM      R0!,{R0,R1}
   \   000000EC   0200               MOVS     R2,R0
   \   000000EE   0B00               MOVS     R3,R1
   \   000000F0   3F48               LDR      R0,??AlarmExecute_2+0x20  ;; 0xea60
   \   000000F2   0021               MOVS     R1,#+0
   \   000000F4   8018               ADDS     R0,R0,R2
   \   000000F6   5941               ADCS     R1,R1,R3
   \   000000F8   0200               MOVS     R2,R0
   \   000000FA   0B00               MOVS     R3,R1
   \   000000FC   3B48               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 56
   \   000000FE   03C8               LDM      R0!,{R0,R1}
   \   00000100   8B42               CMP      R3,R1
   \   00000102   25D8               BHI      ??AlarmExecute_8
   \   00000104   01D3               BCC      ??AlarmExecute_9
   \   00000106   8242               CMP      R2,R0
   \   00000108   22D2               BCS      ??AlarmExecute_8
   \                     ??AlarmExecute_9:
   \   0000010A   3148               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   0000010C   0719               ADDS     R7,R0,R4
   \   0000010E   387C               LDRB     R0,[R7, #+16]
   \   00000110   0028               CMP      R0,#+0
   \   00000112   1DD1               BNE      ??AlarmExecute_8
   \   00000114   0022               MOVS     R2,#+0
   \   00000116   6978               LDRB     R1,[R5, #+1]
   \   00000118   8C46               MOV      R12,R1
   \   0000011A   D721               MOVS     R1,#+215
   \   0000011C   8900               LSLS     R1,R1,#+2        ;; #+860
   \   0000011E   2856               LDRSB    R0,[R5, R0]
   \   00000120   1423               MOVS     R3,#+20
   \   00000122   5843               MULS     R0,R3,R0
   \   00000124   2E4B               LDR      R3,??AlarmExecute_2+0x10  ;; MainStage
   \   00000126   1818               ADDS     R0,R3,R0
   \   00000128   4018               ADDS     R0,R0,R1
   \   0000012A   6146               MOV      R1,R12
   \   0000012C   ........           BL       PortStageSet
   \   00000130   2C48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   00000132   0021               MOVS     R1,#+0
   \   00000134   6956               LDRSB    R1,[R5, R1]
   \   00000136   2A4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   00000138   5118               ADDS     R1,R2,R1
   \   0000013A   1422               MOVS     R2,#+20
   \   0000013C   0A54               STRB     R2,[R1, R0]
   \   0000013E   0120               MOVS     R0,#+1
   \   00000140   2449               LDR      R1,??AlarmExecute_2+0x4  ;; DateTime + 19
   \   00000142   0870               STRB     R0,[R1, #+0]
   \   00000144   3874               STRB     R0,[R7, #+16]
   \   00000146   009A               LDR      R2,[SP, #+0]
   \   00000148   6032               ADDS     R2,R2,#+96
   \   0000014A   2848               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 56
   \   0000014C   03C8               LDM      R0!,{R0,R1}
   \   0000014E   03C2               STM      R2!,{R0,R1}
   \                     ??AlarmExecute_8:
   \   00000150   2848               LDR      R0,??AlarmExecute_2+0x24  ;; AlarmScreenAction + 96
   \   00000152   0028               CMP      R0,#+0
   \   00000154   00D1               BNE      .+4
   \   00000156   7FE7               B        ??AlarmExecute_3
   \   00000158   009A               LDR      R2,[SP, #+0]
   \   0000015A   106E               LDR      R0,[R2, #+96]
   \   0000015C   516E               LDR      R1,[R2, #+100]
   \   0000015E   0200               MOVS     R2,R0
   \   00000160   0B00               MOVS     R3,R1
   \   00000162   2548               LDR      R0,??AlarmExecute_2+0x28  ;; 0x493e0
   \   00000164   0021               MOVS     R1,#+0
   \   00000166   8018               ADDS     R0,R0,R2
   \   00000168   5941               ADCS     R1,R1,R3
   \   0000016A   0200               MOVS     R2,R0
   \   0000016C   0B00               MOVS     R3,R1
   \   0000016E   1F48               LDR      R0,??AlarmExecute_2+0x1C  ;; DateTime + 56
   \   00000170   03C8               LDM      R0!,{R0,R1}
   \   00000172   8B42               CMP      R3,R1
   \   00000174   00D9               BLS      .+4
   \   00000176   6FE7               B        ??AlarmExecute_3
   \   00000178   02D3               BCC      ??AlarmExecute_10
   \   0000017A   8242               CMP      R2,R0
   \   0000017C   00D3               BCC      .+4
   \   0000017E   6BE7               B        ??AlarmExecute_3
   \                     ??AlarmExecute_10:
   \   00000180   1348               LDR      R0,??AlarmExecute_2  ;; AlarmScreenAction
   \   00000182   0719               ADDS     R7,R0,R4
   \   00000184   387C               LDRB     R0,[R7, #+16]
   \   00000186   0128               CMP      R0,#+1
   \   00000188   00D0               BEQ      .+4
   \   0000018A   65E7               B        ??AlarmExecute_3
   \   0000018C   0122               MOVS     R2,#+1
   \   0000018E   6978               LDRB     R1,[R5, #+1]
   \   00000190   D720               MOVS     R0,#+215
   \   00000192   8000               LSLS     R0,R0,#+2        ;; #+860
   \   00000194   0023               MOVS     R3,#+0
   \   00000196   EB56               LDRSB    R3,[R5, R3]
   \   00000198   1424               MOVS     R4,#+20
   \   0000019A   6343               MULS     R3,R4,R3
   \   0000019C   104C               LDR      R4,??AlarmExecute_2+0x10  ;; MainStage
   \   0000019E   E318               ADDS     R3,R4,R3
   \   000001A0   1818               ADDS     R0,R3,R0
   \   000001A2   ........           BL       PortStageSet
   \   000001A6   0F48               LDR      R0,??AlarmExecute_2+0x14  ;; 0x619
   \   000001A8   0021               MOVS     R1,#+0
   \   000001AA   6956               LDRSB    R1,[R5, R1]
   \   000001AC   0C4A               LDR      R2,??AlarmExecute_2+0x10  ;; MainStage
   \   000001AE   5118               ADDS     R1,R2,R1
   \   000001B0   1422               MOVS     R2,#+20
   \   000001B2   0A54               STRB     R2,[R1, R0]
   \   000001B4   0748               LDR      R0,??AlarmExecute_2+0x4  ;; DateTime + 19
   \   000001B6   0021               MOVS     R1,#+0
   \   000001B8   0170               STRB     R1,[R0, #+0]
   \   000001BA   0120               MOVS     R0,#+1
   \   000001BC   3874               STRB     R0,[R7, #+16]
   \   000001BE   009A               LDR      R2,[SP, #+0]
   \   000001C0   6032               ADDS     R2,R2,#+96
   \   000001C2   0800               MOVS     R0,R1
   \   000001C4   03C2               STM      R2!,{R0,R1}
   \   000001C6   47E7               B        ??AlarmExecute_3
   1101                     
   1102              }
   1103            }
   1104          }
   \                     ??AlarmExecute_4:
   \   000001C8   F8BC               POP      {R3-R7}
   \   000001CA   01BC               POP      {R0}
   \   000001CC   0047               BX       R0               ;; return
   \   000001CE   C046               Nop      
   \                     ??AlarmExecute_2:
   \   000001D0   ........           DC32     AlarmScreenAction
   \   000001D4   ........           DC32     DateTime + 19
   \   000001D8   ........           DC32     gProg
   \   000001DC   24BC0000           DC32     0xbc24
   \   000001E0   ........           DC32     MainStage
   \   000001E4   19060000           DC32     0x619
   \   000001E8   98BB0000           DC32     0xbb98
   \   000001EC   ........           DC32     DateTime + 56
   \   000001F0   60EA0000           DC32     0xea60
   \   000001F4   ........           DC32     AlarmScreenAction + 96
   \   000001F8   E0930400           DC32     0x493e0
   1105          
   1106          
   1107          
   1108          
   1109          
   1110          
   1111          
   1112          //-----------------------------------------------------------------------------
   1113          //! Nazwa funkcji :    Timer_1h  
   1114          //! Okres: 1 godzina
   1115          //-----------------------------------------------------------------------------
   1116          //  
   1117          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1118          void Timer_1h(void)                  
   1119          { 
   \                     Timer_1h:
   \   00000000   01B5               PUSH     {R0,LR}
   1120              ThermostatsTimeChartExecute();
   \   00000002   ........           BL       ThermostatsTimeChartExecute
   1121          }//_____________________________________________________________________________
   \   00000006   08BC               POP      {R3}
   \   00000008   01BC               POP      {R0}
   \   0000000A   0047               BX       R0               ;; return
   1122          
   1123          
   1124          
   1125          //-----------------------------------------------------------------------------
   1126          //! Nazwa funkcji :    Timer_1min  
   1127          //! Okres: 1min
   1128          //-----------------------------------------------------------------------------
   1129          //  
   1130          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1131          void Timer_1min(void)                  
   1132          { 
   \                     Timer_1min:
   \   00000000   01B5               PUSH     {R0,LR}
   1133             TimetableExecute();
   \   00000002   ........           BL       TimetableExecute
   1134             ThermostatsExecute();
   \   00000006   ........           BL       ThermostatsExecute
   1135             
   1136            /*
   1137             //sprawdzenie wy³adowania baterii i wyœwietlenie alarmów
   1138             for (char i=0; i<NumberNeurons; i++)
   1139             {
   1140               if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1141               {        ButtonBipCounter=g_counter+1000000;
   1142                         AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
   1143          
   1144          
   1145                    Message_Paint(2,"Wyladowana","bateria","","Sprawdz","liste wezlow"); 
   1146           
   1147               }
   1148             }
   1149              */
   1150          }//_____________________________________________________________________________
   \   0000000A   08BC               POP      {R3}
   \   0000000C   01BC               POP      {R0}
   \   0000000E   0047               BX       R0               ;; return
   1151          
   1152          
   1153          
   1154          
   1155          
   1156          
   1157          //-----------------------------------------------------------------------------
   1158          //! Nazwa funkcji :    Timer_1s  
   1159          //! Okres: 1s
   1160          //! Funkcja obs³ugi przerwania USART 0
   1161          //-----------------------------------------------------------------------------
   1162          //  
   1163          //----------------------------------------------------------------------------- 

   \                                 In section .bss, align 4
   1164          int XY_Tab[11];
   \                     XY_Tab:
   \   00000000                      DS8 44
   1165          int LiczOds = 0;
   1166          #define x_offset 1
   1167          #define y_offset 6

   \                                 In section .bss, align 1
   1168          char display_cykl =0;
   \                     display_cykl:
   \   00000000                      DS8 1
   1169          int X_up_old =-1;
   1170          int Y_up_old =-1;
   1171          int X_down_old =-1;
   1172          int Y_down_old =-1;
   1173          char g_PC_Connected_timeout=5;
   1174          
   1175          
   1176          unsigned int CyklPerSekCount=0; 
   1177          unsigned int TransLoopTime=0;
   1178          unsigned int CyklPerSek=1;
   1179          int MenuLevel_old; //tmp
   1180           char FlagChangeTime=0;
   1181          
   1182          
   1183          

   \                                 In section Debug.txt, align 4, keep-with-next
   1184          void Timer_1s(void)                        //timer isr 
   1185          { 
   \                     Timer_1s:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   1186          
   1187            if ((AlarmOn) || (Speaker[1]==1)) 
   \   00000002   AB4C               LDR      R4,??Timer_1s_1  ;; DateTime
   \   00000004   E07C               LDRB     R0,[R4, #+19]
   \   00000006   0028               CMP      R0,#+0
   \   00000008   02D1               BNE      ??Timer_1s_2
   \   0000000A   607A               LDRB     R0,[R4, #+9]
   \   0000000C   0128               CMP      R0,#+1
   \   0000000E   0CD1               BNE      ??Timer_1s_3
   1188            {
   1189                ButtonBipCounter=g_counter+500;
   \                     ??Timer_1s_2:
   \   00000010   A84D               LDR      R5,??Timer_1s_1+0x4  ;; ButtonBipCounter
   \   00000012   2000               MOVS     R0,R4
   \   00000014   3830               ADDS     R0,R0,#+56
   \   00000016   0CC8               LDM      R0!,{R2,R3}
   \   00000018   FA20               MOVS     R0,#+250
   \   0000001A   4000               LSLS     R0,R0,#+1        ;; #+500
   \   0000001C   0021               MOVS     R1,#+0
   \   0000001E   8018               ADDS     R0,R0,R2
   \   00000020   5941               ADCS     R1,R1,R3
   \   00000022   03C5               STM      R5!,{R0,R1}
   1190                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe063]: shift count is too large
   \   00000024   A448               LDR      R0,??Timer_1s_1+0x8  ;; 0xfffff430
   \   00000026   0021               MOVS     R1,#+0
   \   00000028   0160               STR      R1,[R0, #+0]
   1191            }
   1192          
   1193             g_seconds_counter++;
   \                     ??Timer_1s_3:
   \   0000002A   606C               LDR      R0,[R4, #+68]
   \   0000002C   401C               ADDS     R0,R0,#+1
   \   0000002E   6064               STR      R0,[R4, #+68]
   1194          
   1195            
   1196            if (CyklPerSekCount>0)
   \   00000030   A56D               LDR      R5,[R4, #+88]
   \   00000032   002D               CMP      R5,#+0
   \   00000034   07D0               BEQ      ??Timer_1s_4
   1197            {
   1198             TransLoopTime=(1000/CyklPerSekCount);     //czas obiegu programu w ms
   \   00000036   FA20               MOVS     R0,#+250
   \   00000038   8000               LSLS     R0,R0,#+2        ;; #+1000
   \   0000003A   2900               MOVS     R1,R5
   \   0000003C   ........           BL       __aeabi_uidivmod
   \   00000040   E065               STR      R0,[R4, #+92]
   1199             CyklPerSek=CyklPerSekCount;               //iloœæ cykli na sekunde
   \   00000042   2566               STR      R5,[R4, #+96]
   \   00000044   01E0               B        ??Timer_1s_5
   1200            }else{
   1201             TransLoopTime=0;
   \                     ??Timer_1s_4:
   \   00000046   0020               MOVS     R0,#+0
   \   00000048   E065               STR      R0,[R4, #+92]
   1202            }
   1203            CyklPerSekCount=0;
   \                     ??Timer_1s_5:
   \   0000004A   0026               MOVS     R6,#+0
   \   0000004C   A665               STR      R6,[R4, #+88]
   1204          
   1205                       
   1206            
   1207            
   1208              //Wy³¹czanie podœwietlenia wyœwietlacza
   1209            
   1210            if (g_LightCouterLCD==0) 
   \   0000004E   A06C               LDR      R0,[R4, #+72]
   \   00000050   0028               CMP      R0,#+0
   \   00000052   01D1               BNE      ??Timer_1s_6
   1211            {
   1212              g_LightLCDEnable=1;
   \   00000054   0121               MOVS     R1,#+1
   \   00000056   6173               STRB     R1,[R4, #+13]
   1213            }
   1214            if ((g_LightCouterLCD < LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_6:
   \   00000058   0A28               CMP      R0,#+10
   \   0000005A   04DA               BGE      ??Timer_1s_7
   \   0000005C   217B               LDRB     R1,[R4, #+12]
   \   0000005E   0029               CMP      R1,#+0
   \   00000060   01D1               BNE      ??Timer_1s_7
   1215            {
   1216                g_LightCouterLCD++;
   \   00000062   401C               ADDS     R0,R0,#+1
   \   00000064   A064               STR      R0,[R4, #+72]
   1217                  
   1218            } 
   1219            
   1220            
   1221            if ((g_LightCouterLCD >= LightLCD_Time) && (g_PC_Connected==0))
   \                     ??Timer_1s_7:
   \   00000066   A06C               LDR      R0,[R4, #+72]
   \   00000068   0A28               CMP      R0,#+10
   \   0000006A   03DB               BLT      ??Timer_1s_8
   \   0000006C   207B               LDRB     R0,[R4, #+12]
   \   0000006E   0028               CMP      R0,#+0
   \   00000070   00D1               BNE      ??Timer_1s_8
   1222              
   1223            {
   1224             g_LightLCDEnable=0; 
   \   00000072   6073               STRB     R0,[R4, #+13]
   1225            }
   1226          
   1227            
   1228            if ((DateTime.DayOfWeek)==0) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_8:
   \   00000074   A079               LDRB     R0,[R4, #+6]
   \   00000076   0028               CMP      R0,#+0
   \   00000078   01D1               BNE      ??Timer_1s_9
   \   0000007A   0120               MOVS     R0,#+1
   \   0000007C   A071               STRB     R0,[R4, #+6]
   1229            
   1230            if (DateTime.Second<59) {DateTime.Second++;} else {DateTime.Second=0; DateTime.Minute++;};
   \                     ??Timer_1s_9:
   \   0000007E   6079               LDRB     R0,[R4, #+5]
   \   00000080   3B28               CMP      R0,#+59
   \   00000082   02D2               BCS      ??Timer_1s_10
   \   00000084   401C               ADDS     R0,R0,#+1
   \   00000086   6071               STRB     R0,[R4, #+5]
   \   00000088   04E0               B        ??Timer_1s_11
   \                     ??Timer_1s_10:
   \   0000008A   3000               MOVS     R0,R6
   \   0000008C   6071               STRB     R0,[R4, #+5]
   \   0000008E   2079               LDRB     R0,[R4, #+4]
   \   00000090   401C               ADDS     R0,R0,#+1
   \   00000092   2071               STRB     R0,[R4, #+4]
   1231            if (DateTime.Minute>59) {
   \                     ??Timer_1s_11:
   \   00000094   2079               LDRB     R0,[R4, #+4]
   \   00000096   3C28               CMP      R0,#+60
   \   00000098   33D3               BCC      ??Timer_1s_12
   1232                DateTime.Minute=0; 
   \   0000009A   3000               MOVS     R0,R6
   \   0000009C   2071               STRB     R0,[R4, #+4]
   1233                DateTime.Hour++;
   \   0000009E   E078               LDRB     R0,[R4, #+3]
   \   000000A0   401C               ADDS     R0,R0,#+1
   \   000000A2   E070               STRB     R0,[R4, #+3]
   1234                   //zmiana czasu z zimowego na letni
   1235                 if ((DateTime.Mounth==3) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==2) && (DateTime.Second==0))
   \   000000A4   6178               LDRB     R1,[R4, #+1]
   \   000000A6   0329               CMP      R1,#+3
   \   000000A8   10D1               BNE      ??Timer_1s_13
   \   000000AA   A178               LDRB     R1,[R4, #+2]
   \   000000AC   1929               CMP      R1,#+25
   \   000000AE   0DD3               BCC      ??Timer_1s_13
   \   000000B0   A179               LDRB     R1,[R4, #+6]
   \   000000B2   0729               CMP      R1,#+7
   \   000000B4   0AD1               BNE      ??Timer_1s_13
   \   000000B6   0006               LSLS     R0,R0,#+24
   \   000000B8   000E               LSRS     R0,R0,#+24
   \   000000BA   0228               CMP      R0,#+2
   \   000000BC   06D1               BNE      ??Timer_1s_13
   \   000000BE   6079               LDRB     R0,[R4, #+5]
   \   000000C0   0028               CMP      R0,#+0
   \   000000C2   03D1               BNE      ??Timer_1s_13
   1236                 {
   1237                   DateTime.Hour=3;
   \   000000C4   0320               MOVS     R0,#+3
   \   000000C6   E070               STRB     R0,[R4, #+3]
   1238                   SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000C8   ........           BL       SetRTC_DateTime
   1239          
   1240                 }
   1241                 //zmiana czasu z letniego na zimowy
   1242                 if ((DateTime.Mounth==10) &&  (DateTime.Day>=25) && (DateTime.DayOfWeek==Sunday) && (DateTime.Hour==3) && (DateTime.Second==0))
   \                     ??Timer_1s_13:
   \   000000CC   6078               LDRB     R0,[R4, #+1]
   \   000000CE   0A28               CMP      R0,#+10
   \   000000D0   17D1               BNE      ??Timer_1s_12
   \   000000D2   A078               LDRB     R0,[R4, #+2]
   \   000000D4   1928               CMP      R0,#+25
   \   000000D6   14D3               BCC      ??Timer_1s_12
   \   000000D8   A079               LDRB     R0,[R4, #+6]
   \   000000DA   0728               CMP      R0,#+7
   \   000000DC   11D1               BNE      ??Timer_1s_12
   \   000000DE   E078               LDRB     R0,[R4, #+3]
   \   000000E0   0328               CMP      R0,#+3
   \   000000E2   0ED1               BNE      ??Timer_1s_12
   \   000000E4   6079               LDRB     R0,[R4, #+5]
   \   000000E6   0028               CMP      R0,#+0
   \   000000E8   0BD1               BNE      ??Timer_1s_12
   1243                 {
   1244                   if (FlagChangeTime==0)
   \   000000EA   E07D               LDRB     R0,[R4, #+23]
   \   000000EC   0028               CMP      R0,#+0
   \   000000EE   06D1               BNE      ??Timer_1s_14
   1245                   {
   1246                      FlagChangeTime=1; 
   \   000000F0   0120               MOVS     R0,#+1
   \   000000F2   E075               STRB     R0,[R4, #+23]
   1247                      DateTime.Hour=2;
   \   000000F4   0220               MOVS     R0,#+2
   \   000000F6   E070               STRB     R0,[R4, #+3]
   1248                      SetRTC_DateTime();  //Ustawinie: sekundy, minuty,  godziny, dzieñ tyg, dnia, miesi¹ca, roku
   \   000000F8   ........           BL       SetRTC_DateTime
   \   000000FC   01E0               B        ??Timer_1s_12
   1249                   }else{
   1250                      FlagChangeTime=0; 
   \                     ??Timer_1s_14:
   \   000000FE   3000               MOVS     R0,R6
   \   00000100   E075               STRB     R0,[R4, #+23]
   1251                   }
   1252                 }
   1253            }
   1254            
   1255            if (DateTime.Hour>23)   {
   \                     ??Timer_1s_12:
   \   00000102   E078               LDRB     R0,[R4, #+3]
   \   00000104   1828               CMP      R0,#+24
   \   00000106   07D3               BCC      ??Timer_1s_15
   1256              DateTime.Hour=0;     
   \   00000108   3000               MOVS     R0,R6
   \   0000010A   E070               STRB     R0,[R4, #+3]
   1257              DateTime.DayOfWeek++; DateTime.Day++;
   \   0000010C   A079               LDRB     R0,[R4, #+6]
   \   0000010E   401C               ADDS     R0,R0,#+1
   \   00000110   A071               STRB     R0,[R4, #+6]
   \   00000112   A078               LDRB     R0,[R4, #+2]
   \   00000114   401C               ADDS     R0,R0,#+1
   \   00000116   A070               STRB     R0,[R4, #+2]
   1258          
   1259            }
   1260            
   1261            
   1262            switch (DateTime.Mounth)
   \                     ??Timer_1s_15:
   \   00000118   6578               LDRB     R5,[R4, #+1]
   \   0000011A   2800               MOVS     R0,R5
   \   0000011C   401E               SUBS     R0,R0,#+1
   \   0000011E   0B28               CMP      R0,#+11
   \   00000120   39D8               BHI      ??Timer_1s_16
   \   00000122   01A1               ADR      R1,??Timer_1s_0
   \   00000124   095C               LDRB     R1,[R1, R0]
   \   00000126   8F44               ADD      PC,PC,R1
   \                     ??Timer_1s_0:
   \   00000128   0A1A0A50           DC8      +10,+26,+10,+80
   \   0000012C   0A500A0A           DC8      +10,+80,+10,+10
   \   00000130   500A5058           DC8      +80,+10,+80,+88
   1263                  {
   1264                    case 1  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_17:
   \   00000134   A078               LDRB     R0,[R4, #+2]
   \   00000136   2028               CMP      R0,#+32
   \   00000138   2DD3               BCC      ??Timer_1s_16
   \                     ??Timer_1s_18:
   \   0000013A   0120               MOVS     R0,#+1
   \   0000013C   A070               STRB     R0,[R4, #+2]
   \   0000013E   6D1C               ADDS     R5,R5,#+1
   \   00000140   6570               STRB     R5,[R4, #+1]
   \   00000142   28E0               B        ??Timer_1s_16
   1265                    case 2  : if ((DateTime.Year%4 == 0) && (DateTime.Year%100 != 0) || (DateTime.Year%400 == 0))  //je¿eli rok przestêpny
   \                     ??Timer_1s_19:
   \   00000144   2778               LDRB     R7,[R4, #+0]
   \   00000146   3800               MOVS     R0,R7
   \   00000148   8008               LSRS     R0,R0,#+2
   \   0000014A   8000               LSLS     R0,R0,#+2
   \   0000014C   381A               SUBS     R0,R7,R0
   \   0000014E   05D1               BNE      ??Timer_1s_20
   \   00000150   3800               MOVS     R0,R7
   \   00000152   6421               MOVS     R1,#+100
   \   00000154   ........           BL       __aeabi_idivmod
   \   00000158   0029               CMP      R1,#+0
   \   0000015A   06D1               BNE      ??Timer_1s_21
   \                     ??Timer_1s_20:
   \   0000015C   3800               MOVS     R0,R7
   \   0000015E   C821               MOVS     R1,#+200
   \   00000160   4900               LSLS     R1,R1,#+1        ;; #+400
   \   00000162   ........           BL       __aeabi_idivmod
   \   00000166   0029               CMP      R1,#+0
   \   00000168   03D1               BNE      ??Timer_1s_22
   1266                                  {if (DateTime.Day>29) {DateTime.Day=1; DateTime.Mounth++;}     
   \                     ??Timer_1s_21:
   \   0000016A   A078               LDRB     R0,[R4, #+2]
   \   0000016C   1E28               CMP      R0,#+30
   \   0000016E   12D3               BCC      ??Timer_1s_16
   \   00000170   E3E7               B        ??Timer_1s_18
   1267                                  }else{if (DateTime.Day>28) {DateTime.Day=1; DateTime.Mounth++;}
   \                     ??Timer_1s_22:
   \   00000172   A078               LDRB     R0,[R4, #+2]
   \   00000174   1D28               CMP      R0,#+29
   \   00000176   0ED3               BCC      ??Timer_1s_16
   \   00000178   DFE7               B        ??Timer_1s_18
   1268                                  }
   1269                    break;
   1270                    case 3  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1271                    case 4  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   \                     ??Timer_1s_23:
   \   0000017A   A078               LDRB     R0,[R4, #+2]
   \   0000017C   1F28               CMP      R0,#+31
   \   0000017E   0AD3               BCC      ??Timer_1s_16
   \   00000180   DBE7               B        ??Timer_1s_18
   1272                    case 5  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1273                    case 6  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1274                    case 7  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1275                    case 8  : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1276                    case 9  : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1277                    case 10 : if (DateTime.Day>31) {DateTime.Day=1; DateTime.Mounth++;} break;
   1278                    case 11 : if (DateTime.Day>30) {DateTime.Day=1; DateTime.Mounth++;} break;
   1279                    case 12 : if (DateTime.Day>31) 
   \                     ??Timer_1s_24:
   \   00000182   A078               LDRB     R0,[R4, #+2]
   \   00000184   2028               CMP      R0,#+32
   \   00000186   06D3               BCC      ??Timer_1s_16
   1280                    {
   1281                      DateTime.Day=1; DateTime.Mounth=1; DateTime.Year++;
   \   00000188   0125               MOVS     R5,#+1
   \   0000018A   2800               MOVS     R0,R5
   \   0000018C   A070               STRB     R0,[R4, #+2]
   \   0000018E   6570               STRB     R5,[R4, #+1]
   \   00000190   2078               LDRB     R0,[R4, #+0]
   \   00000192   401C               ADDS     R0,R0,#+1
   \   00000194   2070               STRB     R0,[R4, #+0]
   1282                    } break;
   1283                    
   1284            
   1285            
   1286            }  
   1287            if (DateTime.DayOfWeek>Sunday) DateTime.DayOfWeek=Monday;
   \                     ??Timer_1s_16:
   \   00000196   A079               LDRB     R0,[R4, #+6]
   \   00000198   0828               CMP      R0,#+8
   \   0000019A   01D3               BCC      ??Timer_1s_25
   \   0000019C   0120               MOVS     R0,#+1
   \   0000019E   A071               STRB     R0,[R4, #+6]
   1288            
   1289          
   1290            
   1291            
   1292            
   1293          
   1294              
   1295            if (MenuLevel_old!=MenuLevel)
   \                     ??Timer_1s_25:
   \   000001A0   7648               LDR      R0,??Timer_1s_26  ;; MenuLevel
   \   000001A2   0068               LDR      R0,[R0, #+0]
   \   000001A4   616E               LDR      R1,[R4, #+100]
   \   000001A6   8142               CMP      R1,R0
   \   000001A8   00D0               BEQ      ??Timer_1s_27
   1296            {
   1297              MenuLevel_old=MenuLevel;    //na koniec usun¹c MenuLevel_old
   \   000001AA   6066               STR      R0,[R4, #+100]
   1298            }
   1299            
   1300             char czas_tmp[9];
   1301            
   1302            TimeToStr(DateTime.Hour, DateTime.Minute, DateTime.Second, czas_tmp);
   \                     ??Timer_1s_27:
   \   000001AC   6B46               MOV      R3,SP
   \   000001AE   6279               LDRB     R2,[R4, #+5]
   \   000001B0   2179               LDRB     R1,[R4, #+4]
   \   000001B2   E078               LDRB     R0,[R4, #+3]
   \   000001B4   ........           BL       TimeToStr
   1303            czas_tmp[8]=13;
   \   000001B8   6846               MOV      R0,SP
   \   000001BA   0D21               MOVS     R1,#+13
   \   000001BC   0172               STRB     R1,[R0, #+8]
   1304          
   1305            
   1306            //zeruj wskaŸniki poprawnoœci po³aczeñ
   1307            if (g_US0_Connect_OK) g_US0_Connect_OK--;
   \   000001BE   7048               LDR      R0,??Timer_1s_26+0x4  ;; g_US0_Connect_OK
   \   000001C0   0178               LDRB     R1,[R0, #+0]
   \   000001C2   0029               CMP      R1,#+0
   \   000001C4   01D0               BEQ      ??Timer_1s_28
   \   000001C6   491E               SUBS     R1,R1,#+1
   \   000001C8   0170               STRB     R1,[R0, #+0]
   1308            if (g_US1_Connect_OK) g_US1_Connect_OK--;
   \                     ??Timer_1s_28:
   \   000001CA   6E48               LDR      R0,??Timer_1s_26+0x8  ;; g_US1_Connect_OK
   \   000001CC   0178               LDRB     R1,[R0, #+0]
   \   000001CE   0029               CMP      R1,#+0
   \   000001D0   01D0               BEQ      ??Timer_1s_29
   \   000001D2   491E               SUBS     R1,R1,#+1
   \   000001D4   0170               STRB     R1,[R0, #+0]
   1309            
   1310          
   1311            //synchronizacja RTC
   1312          if ((DateTime.Hour==2) && (DateTime.Minute==57) && (DateTime.Second==0)) GetDateTimeFromRTC(); 
   \                     ??Timer_1s_29:
   \   000001D6   E078               LDRB     R0,[R4, #+3]
   \   000001D8   0228               CMP      R0,#+2
   \   000001DA   07D1               BNE      ??Timer_1s_30
   \   000001DC   2079               LDRB     R0,[R4, #+4]
   \   000001DE   3928               CMP      R0,#+57
   \   000001E0   04D1               BNE      ??Timer_1s_30
   \   000001E2   6079               LDRB     R0,[R4, #+5]
   \   000001E4   0028               CMP      R0,#+0
   \   000001E6   01D1               BNE      ??Timer_1s_30
   \   000001E8   ........           BL       GetDateTimeFromRTC
   1313          //if (DateTime.Second=30) GetDateTimeFromRTC(); 
   1314          
   1315            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ 1min
   1316            static char CountMin=0;
   1317            if (CountMin<60)
   \                     ??Timer_1s_30:
   \   000001EC   207E               LDRB     R0,[R4, #+24]
   \   000001EE   3C28               CMP      R0,#+60
   \   000001F0   22D2               BCS      ??Timer_1s_31
   1318            {
   1319              CountMin++; 
   \   000001F2   401C               ADDS     R0,R0,#+1
   \   000001F4   2076               STRB     R0,[R4, #+24]
   1320            }else{
   1321              CountMin=0;
   1322            
   1323              if (TransQuality.SlowMensurIndex<4)
   1324              {
   1325                TransQuality.SlowMensurIndex++; 
   1326                
   1327              }else{
   1328                TransQuality.SlowMensurIndex=0;
   1329          
   1330              }
   1331              for(char NN=1; NN<NumberNeurons; NN++)   TransQuality.SlowMensur[NN] &= ~(1<<TransQuality.SlowMensurIndex);
   1332              
   1333                    //Sprawdzenie wiarygodnoœci wêz³ów na podstawie d³ugotrwa³ego pomiaru jakoœci
   1334                for (char NN=1; NN<NumberNeurons; NN++)
   1335                {
   1336                  if (TransQuality.SlowMensur[NN-1]==0)
   1337                  for (char NR=0; NR<NumberReg; NR++)
   1338                  {
   1339                    MainStage.StageI[NN].Value[NR]=0x8AAA;
   1340                  }
   1341                }
   1342            }
   1343                               
   1344          
   1345            if (DateTime.Second==0) Timer_1min();
   \                     ??Timer_1s_32:
   \   000001F6   6079               LDRB     R0,[R4, #+5]
   \   000001F8   0028               CMP      R0,#+0
   \   000001FA   01D1               BNE      ??Timer_1s_33
   \   000001FC   ........           BL       Timer_1min
   1346            if ((DateTime.Second==0) && (DateTime.Minute==0))  Timer_1h();
   \                     ??Timer_1s_33:
   \   00000200   6579               LDRB     R5,[R4, #+5]
   \   00000202   002D               CMP      R5,#+0
   \   00000204   04D1               BNE      ??Timer_1s_34
   \   00000206   2079               LDRB     R0,[R4, #+4]
   \   00000208   0028               CMP      R0,#+0
   \   0000020A   01D1               BNE      ??Timer_1s_34
   \   0000020C   ........           BL       Timer_1h
   1347            if (DateTime.Second==0) TimetableExecute();
   \                     ??Timer_1s_34:
   \   00000210   002D               CMP      R5,#+0
   \   00000212   01D1               BNE      ??Timer_1s_35
   \   00000214   ........           BL       TimetableExecute
   1348               AlarmExecute();
   \                     ??Timer_1s_35:
   \   00000218   ........           BL       AlarmExecute
   1349               
   1350               
   1351          
   1352             //sprawdzenie wy³adowania baterii i wyœwietlenie ostrzenia       
   1353             if ((DateTime.Hour==10) && (DateTime.Minute==0) && (DateTime.Second==0)  && (DateTime.DayOfWeek==Saturday))
   \   0000021C   E078               LDRB     R0,[R4, #+3]
   \   0000021E   0A28               CMP      R0,#+10
   \   00000220   78D1               BNE      ??Timer_1s_36
   \   00000222   2079               LDRB     R0,[R4, #+4]
   \   00000224   0028               CMP      R0,#+0
   \   00000226   75D1               BNE      ??Timer_1s_36
   \   00000228   6079               LDRB     R0,[R4, #+5]
   \   0000022A   0028               CMP      R0,#+0
   \   0000022C   72D1               BNE      ??Timer_1s_36
   \   0000022E   A079               LDRB     R0,[R4, #+6]
   \   00000230   0628               CMP      R0,#+6
   \   00000232   6FD1               BNE      ??Timer_1s_36
   1354             {
   1355             
   1356                 for (char i=0; i<NumberNeurons; i++)
   \   00000234   3500               MOVS     R5,R6
   \   00000236   6AE0               B        ??Timer_1s_37
   \                     ??Timer_1s_31:
   \   00000238   3000               MOVS     R0,R6
   \   0000023A   2076               STRB     R0,[R4, #+24]
   \   0000023C   5248               LDR      R0,??Timer_1s_26+0xC  ;; TransQuality
   \   0000023E   4178               LDRB     R1,[R0, #+1]
   \   00000240   0429               CMP      R1,#+4
   \   00000242   02D2               BCS      ??Timer_1s_38
   \   00000244   491C               ADDS     R1,R1,#+1
   \   00000246   4170               STRB     R1,[R0, #+1]
   \   00000248   01E0               B        ??Timer_1s_39
   \                     ??Timer_1s_38:
   \   0000024A   3100               MOVS     R1,R6
   \   0000024C   4170               STRB     R1,[R0, #+1]
   \                     ??Timer_1s_39:
   \   0000024E   0125               MOVS     R5,#+1
   \   00000250   2900               MOVS     R1,R5
   \   00000252   0BE0               B        ??Timer_1s_40
   \                     ??Timer_1s_41:
   \   00000254   8218               ADDS     R2,R0,R2
   \   00000256   D378               LDRB     R3,[R2, #+3]
   \   00000258   9C46               MOV      R12,R3
   \   0000025A   2F00               MOVS     R7,R5
   \   0000025C   4378               LDRB     R3,[R0, #+1]
   \   0000025E   9F40               LSLS     R7,R7,R3
   \   00000260   6346               MOV      R3,R12
   \   00000262   BB43               BICS     R3,R3,R7
   \   00000264   D370               STRB     R3,[R2, #+3]
   \   00000266   491C               ADDS     R1,R1,#+1
   \   00000268   0906               LSLS     R1,R1,#+24
   \   0000026A   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_40:
   \   0000026C   0A00               MOVS     R2,R1
   \   0000026E   232A               CMP      R2,#+35
   \   00000270   F0D3               BCC      ??Timer_1s_41
   \   00000272   2900               MOVS     R1,R5
   \   00000274   13E0               B        ??Timer_1s_42
   \                     ??Timer_1s_43:
   \   00000276   6F00               LSLS     R7,R5,#+1
   \   00000278   BC46               MOV      R12,R7
   \   0000027A   1427               MOVS     R7,#+20
   \   0000027C   5743               MULS     R7,R2,R7
   \   0000027E   434D               LDR      R5,??Timer_1s_26+0x10  ;; MainStage
   \   00000280   ED19               ADDS     R5,R5,R7
   \   00000282   6746               MOV      R7,R12
   \   00000284   ED19               ADDS     R5,R5,R7
   \   00000286   A035               ADDS     R5,R5,#+160
   \   00000288   414F               LDR      R7,??Timer_1s_26+0x14  ;; 0xffff8aaa
   \   0000028A   2F80               STRH     R7,[R5, #+0]
   \   0000028C   5B1C               ADDS     R3,R3,#+1
   \   0000028E   1B06               LSLS     R3,R3,#+24
   \   00000290   1B0E               LSRS     R3,R3,#+24
   \                     ??Timer_1s_44:
   \   00000292   1D00               MOVS     R5,R3
   \   00000294   0A2D               CMP      R5,#+10
   \   00000296   EED3               BCC      ??Timer_1s_43
   \                     ??Timer_1s_45:
   \   00000298   491C               ADDS     R1,R1,#+1
   \   0000029A   0906               LSLS     R1,R1,#+24
   \   0000029C   090E               LSRS     R1,R1,#+24
   \                     ??Timer_1s_42:
   \   0000029E   0A00               MOVS     R2,R1
   \   000002A0   232A               CMP      R2,#+35
   \   000002A2   A8D2               BCS      ??Timer_1s_32
   \   000002A4   8318               ADDS     R3,R0,R2
   \   000002A6   9B78               LDRB     R3,[R3, #+2]
   \   000002A8   002B               CMP      R3,#+0
   \   000002AA   F5D1               BNE      ??Timer_1s_45
   \   000002AC   F1E7               B        ??Timer_1s_44
   \   000002AE   C046               Nop      
   \                     ??Timer_1s_1:
   \   000002B0   ........           DC32     DateTime
   \   000002B4   ........           DC32     ButtonBipCounter
   \   000002B8   30F4FFFF           DC32     0xfffff430
   \                     ??Timer_1s_46:
   \   000002BC   1421               MOVS     R1,#+20
   \   000002BE   4843               MULS     R0,R1,R0
   \   000002C0   3249               LDR      R1,??Timer_1s_26+0x10  ;; MainStage
   \   000002C2   0818               ADDS     R0,R1,R0
   \   000002C4   A030               ADDS     R0,R0,#+160
   \   000002C6   0088               LDRH     R0,[R0, #+0]
   \   000002C8   0104               LSLS     R1,R0,#+16
   \   000002CA   1DD5               BPL      ??Timer_1s_47
   \   000002CC   3149               LDR      R1,??Timer_1s_26+0x18  ;; 0x8aaa
   \   000002CE   8842               CMP      R0,R1
   \   000002D0   1AD0               BEQ      ??Timer_1s_47
   1357                 {
   1358                   if ((MainStage.StageI[i].Port& 0x8000) && (((unsigned short)(MainStage.StageI[i].Port))!=0x8AAA))
   1359                   {
   1360                      Message_Paint(2,"Wyladowana","bateria","   ","Sprawdz","liste wezlow");         
   \   000002D2   314F               LDR      R7,??Timer_1s_26+0x1C  ;; `?<Constant "Wyladowana">`
   \   000002D4   3900               MOVS     R1,R7
   \   000002D6   1C31               ADDS     R1,R1,#+28
   \   000002D8   3800               MOVS     R0,R7
   \   000002DA   1430               ADDS     R0,R0,#+20
   \   000002DC   03B4               PUSH     {R0,R1}
   \   000002DE   2FA3               ADR      R3,??Timer_1s_26+0x20  ;; "   "
   \   000002E0   3A00               MOVS     R2,R7
   \   000002E2   0C32               ADDS     R2,R2,#+12
   \   000002E4   3900               MOVS     R1,R7
   \   000002E6   0220               MOVS     R0,#+2
   \   000002E8   ........           BL       Message_Paint
   \   000002EC   02B0               ADD      SP,SP,#+8
   1361          
   1362                      ButtonBipCounter=g_counter+1000000;
   \   000002EE   2C4F               LDR      R7,??Timer_1s_26+0x24  ;; ButtonBipCounter
   \   000002F0   2000               MOVS     R0,R4
   \   000002F2   3830               ADDS     R0,R0,#+56
   \   000002F4   03C8               LDM      R0!,{R0,R1}
   \   000002F6   0200               MOVS     R2,R0
   \   000002F8   0B00               MOVS     R3,R1
   \   000002FA   2A48               LDR      R0,??Timer_1s_26+0x28  ;; 0xf4240
   \   000002FC   3100               MOVS     R1,R6
   \   000002FE   8018               ADDS     R0,R0,R2
   \   00000300   5941               ADCS     R1,R1,R3
   \   00000302   03C7               STM      R7!,{R0,R1}
   1363                      AT91C_BASE_PIOA->PIO_SODR =SpeakerPin;  
                                                        ^
Warning[Pe063]: shift count is too large
   \   00000304   2848               LDR      R0,??Timer_1s_26+0x2C  ;; 0xfffff430
   \   00000306   0660               STR      R6,[R0, #+0]
   1364                   }
   1365                   
   1366          
   1367                 } 
   \                     ??Timer_1s_47:
   \   00000308   6D1C               ADDS     R5,R5,#+1
   \   0000030A   2D06               LSLS     R5,R5,#+24
   \   0000030C   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1s_37:
   \   0000030E   2800               MOVS     R0,R5
   \   00000310   2328               CMP      R0,#+35
   \   00000312   D3D3               BCC      ??Timer_1s_46
   1368                
   1369             }    
   1370              
   1371          
   1372             
   1373             
   1374             //wygaszacz ekranu
   1375             static char LCD_last_fill=100;
   1376             char WypMin;
   1377             if ((!g_ScreenSever_On) || (g_ScreenSever_On && !((g_ScreenSever_Time_On<=DateTime.Hour) || (g_ScreenSever_Time_Off>DateTime.Hour))))  
   \                     ??Timer_1s_36:
   \   00000314   A07B               LDRB     R0,[R4, #+14]
   \   00000316   0028               CMP      R0,#+0
   \   00000318   07D0               BEQ      ??Timer_1s_48
   \   0000031A   08D0               BEQ      ??Timer_1s_49
   \   0000031C   E078               LDRB     R0,[R4, #+3]
   \   0000031E   E17B               LDRB     R1,[R4, #+15]
   \   00000320   8842               CMP      R0,R1
   \   00000322   04D2               BCS      ??Timer_1s_49
   \   00000324   217C               LDRB     R1,[R4, #+16]
   \   00000326   8842               CMP      R0,R1
   \   00000328   01D3               BCC      ??Timer_1s_49
   1378             {  
   1379                WypMin=14;
   \                     ??Timer_1s_48:
   \   0000032A   0E20               MOVS     R0,#+14
   \   0000032C   00E0               B        ??Timer_1s_50
   1380             }else{
   1381                WypMin=4;
   \                     ??Timer_1s_49:
   \   0000032E   0420               MOVS     R0,#+4
   1382             }
   1383             
   1384               if (g_LightLCDEnable)
   \                     ??Timer_1s_50:
   \   00000330   617E               LDRB     R1,[R4, #+25]
   \   00000332   627B               LDRB     R2,[R4, #+13]
   \   00000334   002A               CMP      R2,#+0
   \   00000336   0CD0               BEQ      ??Timer_1s_51
   1385               {
   1386                 if (LCD_last_fill!=100)
   \   00000338   6429               CMP      R1,#+100
   \   0000033A   1CD0               BEQ      ??Timer_1s_52
   1387                 {
   1388                   AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   0000033C   0125               MOVS     R5,#+1
   \   0000033E   1B48               LDR      R0,??Timer_1s_26+0x30  ;; 0xfffcc008
   \   00000340   0560               STR      R5,[R0, #+0]
   1389                    Set_LCD_Light_PWM_Fill(100);  //100% wype³nienia
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   00000342   6420               MOVS     R0,#+100
   \   00000344   ........           BL       Set_LCD_Light_PWM_Fill
   1390                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000348   1948               LDR      R0,??Timer_1s_26+0x34  ;; 0xfffcc004
   \   0000034A   0560               STR      R5,[R0, #+0]
   1391                    LCD_last_fill=100;
   \   0000034C   6420               MOVS     R0,#+100
   \   0000034E   6076               STRB     R0,[R4, #+25]
   \   00000350   11E0               B        ??Timer_1s_52
   1392                 }
   1393               }else {
   1394                 if (LCD_last_fill>WypMin)
   \                     ??Timer_1s_51:
   \   00000352   8842               CMP      R0,R1
   \   00000354   0FD2               BCS      ??Timer_1s_52
   1395                 {
   1396                    if (LCD_last_fill>60) LCD_last_fill=61;
   \   00000356   3D29               CMP      R1,#+61
   \   00000358   01D3               BCC      ??Timer_1s_53
   \   0000035A   3D20               MOVS     R0,#+61
   \   0000035C   6076               STRB     R0,[R4, #+25]
   1397                    LCD_last_fill-=2;
   \                     ??Timer_1s_53:
   \   0000035E   607E               LDRB     R0,[R4, #+25]
   \   00000360   801E               SUBS     R0,R0,#+2
   \   00000362   6076               STRB     R0,[R4, #+25]
   1398                    AT91C_BASE_PWMC->PWMC_DIS = 0x1;
   \   00000364   0125               MOVS     R5,#+1
   \   00000366   1149               LDR      R1,??Timer_1s_26+0x30  ;; 0xfffcc008
   \   00000368   0D60               STR      R5,[R1, #+0]
   1399                    Set_LCD_Light_PWM_Fill(LCD_last_fill);  //10% wype³nienia
                           ^
Warning[Pe223]: function "Set_LCD_Light_PWM_Fill" declared implicitly
   \   0000036A   0006               LSLS     R0,R0,#+24
   \   0000036C   000E               LSRS     R0,R0,#+24
   \   0000036E   ........           BL       Set_LCD_Light_PWM_Fill
   1400                    AT91C_BASE_PWMC->PWMC_ENA = 0x1;
   \   00000372   0F48               LDR      R0,??Timer_1s_26+0x34  ;; 0xfffcc004
   \   00000374   0560               STR      R5,[R0, #+0]
   1401                 }
   1402              }
   1403              
   1404              
   1405          
   1406          }
   \                     ??Timer_1s_52:
   \   00000376   FEBC               POP      {R1-R7}
   \   00000378   01BC               POP      {R0}
   \   0000037A   0047               BX       R0               ;; return
   \                     ??Timer_1s_26:
   \   0000037C   ........           DC32     MenuLevel
   \   00000380   ........           DC32     g_US0_Connect_OK
   \   00000384   ........           DC32     g_US1_Connect_OK
   \   00000388   ........           DC32     TransQuality
   \   0000038C   ........           DC32     MainStage
   \   00000390   AA8AFFFF           DC32     0xffff8aaa
   \   00000394   AA8A0000           DC32     0x8aaa
   \   00000398   ........           DC32     `?<Constant "Wyladowana">`
   \   0000039C   20202000           DC8      "   "
   \   000003A0   ........           DC32     ButtonBipCounter
   \   000003A4   40420F00           DC32     0xf4240
   \   000003A8   30F4FFFF           DC32     0xfffff430
   \   000003AC   08C0FCFF           DC32     0xfffcc008
   \   000003B0   04C0FCFF           DC32     0xfffcc004
   1407          
   1408          
   1409          
   1410          
   1411          //-----------------------------------------------------------------------------
   1412          //! Nazwa funkcji :    Timer_10ms
   1413          //! Okres: 10ms
   1414          //! Timer zale¿ny od Timer_1ms
   1415          //-----------------------------------------------------------------------------
   1416          //  
   1417          //----------------------------------------------------------------------------- 

   \                                 In section Debug.txt, align 4, keep-with-next
   1418          void Timer_10ms(void)                      
   1419          { 
   \                     Timer_10ms:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   1420              
   1421          
   1422            unsigned int dummy = AT91C_BASE_TC0->TC_SR;                                   // Odczyt statusu  
   \   00000002   4748               LDR      R0,??Timer_10ms_0  ;; 0xfffa0020
   \   00000004   0068               LDR      R0,[R0, #+0]
   1423          
   1424          
   1425          
   1426          
   1427             /*
   1428          
   1429            if ((Busy_program==0) && (g_Stop_Program==0))                                  //Dopasowanie cyklu programu do krotnoœci 5 ms
   1430            {  
   1431          
   1432            ///  Program(&gProg); 
   1433              ProgFlag=1;
   1434            }
   1435           }
   1436            */
   1437          
   1438            
   1439            
   1440          
   1441           
   1442          
   1443          
   1444           X_up=-1;
   \   00000006   474C               LDR      R4,??Timer_10ms_0+0x4  ;; DateTime
   \   00000008   0020               MOVS     R0,#+0
   \   0000000A   C043               MVNS     R0,R0            ;; #-1
   \   0000000C   2084               STRH     R0,[R4, #+32]
   1445           Y_up=-1;
   \   0000000E   E083               STRH     R0,[R4, #+30]
   1446          
   1447           X_down=-1;
   \   00000010   A083               STRH     R0,[R4, #+28]
   1448           Y_down=-1;
   \   00000012   6083               STRH     R0,[R4, #+26]
   1449          
   1450          
   1451            GetTouchPoint(&X_down, &Y_down, &X_up, &Y_up);
   \   00000014   2300               MOVS     R3,R4
   \   00000016   1E33               ADDS     R3,R3,#+30
   \   00000018   2200               MOVS     R2,R4
   \   0000001A   2032               ADDS     R2,R2,#+32
   \   0000001C   2100               MOVS     R1,R4
   \   0000001E   1A31               ADDS     R1,R1,#+26
   \   00000020   2000               MOVS     R0,R4
   \   00000022   1C30               ADDS     R0,R0,#+28
   \   00000024   ........           BL       GetTouchPoint
   1452          
   1453           
   1454             //Akcja przycisku up
   1455            if ((X_up>0)&&(Y_up>0)) 
   \   00000028   2020               MOVS     R0,#+32
   \   0000002A   205E               LDRSH    R0,[R4, R0]
   \   0000002C   0128               CMP      R0,#+1
   \   0000002E   09DB               BLT      ??Timer_10ms_1
   \   00000030   1E20               MOVS     R0,#+30
   \   00000032   205E               LDRSH    R0,[R4, R0]
   \   00000034   0128               CMP      R0,#+1
   \   00000036   05DB               BLT      ??Timer_10ms_1
   1456            {
   1457               ScreenEvent();
   \   00000038   ........           BL       ScreenEvent
   1458               g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000003C   0020               MOVS     R0,#+0
   \   0000003E   A064               STR      R0,[R4, #+72]
   1459               g_LightLCDEnable=1;
   \   00000040   0120               MOVS     R0,#+1
   \   00000042   6073               STRB     R0,[R4, #+13]
   1460            }
   1461            
   1462            if (LiczOds>=5) {
   \                     ??Timer_10ms_1:
   \   00000044   606D               LDR      R0,[R4, #+84]
   \   00000046   0528               CMP      R0,#+5
   \   00000048   28DB               BLT      ??Timer_10ms_2
   1463            
   1464                      //Akcja przycisku down
   1465                if ((X_down>0)&&(Y_down>0)) 
   \   0000004A   1C20               MOVS     R0,#+28
   \   0000004C   205E               LDRSH    R0,[R4, R0]
   \   0000004E   0128               CMP      R0,#+1
   \   00000050   09DB               BLT      ??Timer_10ms_3
   \   00000052   1A20               MOVS     R0,#+26
   \   00000054   205E               LDRSH    R0,[R4, R0]
   \   00000056   0128               CMP      R0,#+1
   \   00000058   05DB               BLT      ??Timer_10ms_3
   1466                {
   1467                   ScreenEvent();
   \   0000005A   ........           BL       ScreenEvent
   1468                   g_LightCouterLCD = 0;     //W³¹cza podœwietlenie wyœwietlacza LCD
   \   0000005E   0020               MOVS     R0,#+0
   \   00000060   A064               STR      R0,[R4, #+72]
   1469                   g_LightLCDEnable=1;
   \   00000062   0120               MOVS     R0,#+1
   \   00000064   6073               STRB     R0,[R4, #+13]
   1470                }  
   1471                
   1472                MenuRefresh(); 
   \                     ??Timer_10ms_3:
   \   00000066   ........           BL       MenuRefresh
   1473          
   1474              
   1475              if ((g_PC_Connected==0) || (g_PC_Connected_timeout>0))
   \   0000006A   207B               LDRB     R0,[R4, #+12]
   \   0000006C   0028               CMP      R0,#+0
   \   0000006E   02D0               BEQ      ??Timer_10ms_4
   \   00000070   A07D               LDRB     R0,[R4, #+22]
   \   00000072   0028               CMP      R0,#+0
   \   00000074   03D0               BEQ      ??Timer_10ms_5
   1476              {
   1477              
   1478              RepaintLCD();
   \                     ??Timer_10ms_4:
   \   00000076   ........           BL       RepaintLCD
   1479              RepaintLCD();
   \   0000007A   ........           BL       RepaintLCD
   1480              }
   1481              
   1482              if ((g_PC_Connected==1) && (g_PC_Connected_timeout>0))
   \                     ??Timer_10ms_5:
   \   0000007E   207B               LDRB     R0,[R4, #+12]
   \   00000080   0128               CMP      R0,#+1
   \   00000082   04D1               BNE      ??Timer_10ms_6
   \   00000084   A17D               LDRB     R1,[R4, #+22]
   \   00000086   0029               CMP      R1,#+0
   \   00000088   01D0               BEQ      ??Timer_10ms_6
   1483              {
   1484                g_PC_Connected_timeout--;
   \   0000008A   491E               SUBS     R1,R1,#+1
   \   0000008C   A175               STRB     R1,[R4, #+22]
   1485              }
   1486              
   1487              if (g_PC_Connected==0)
   \                     ??Timer_10ms_6:
   \   0000008E   0028               CMP      R0,#+0
   \   00000090   01D1               BNE      ??Timer_10ms_7
   1488              {
   1489                g_PC_Connected_timeout=5;
   \   00000092   0520               MOVS     R0,#+5
   \   00000094   A075               STRB     R0,[R4, #+22]
   1490              }
   1491              
   1492              
   1493              LiczOds=0;
   \                     ??Timer_10ms_7:
   \   00000096   0020               MOVS     R0,#+0
   \   00000098   6065               STR      R0,[R4, #+84]
   \   0000009A   01E0               B        ??Timer_10ms_8
   1494          
   1495            }
   1496            
   1497            else 
   1498            {
   1499              LiczOds++; 
   \                     ??Timer_10ms_2:
   \   0000009C   401C               ADDS     R0,R0,#+1
   \   0000009E   6065               STR      R0,[R4, #+84]
   1500            }
   1501            
   1502              
   1503            
   1504            static int Spek2_Counter;
   1505            if (Spek2_Counter<202)Spek2_Counter++;
   \                     ??Timer_10ms_8:
   \   000000A0   A06E               LDR      R0,[R4, #+104]
   \   000000A2   CA28               CMP      R0,#+202
   \   000000A4   01DA               BGE      ??Timer_10ms_9
   \   000000A6   401C               ADDS     R0,R0,#+1
   \   000000A8   A066               STR      R0,[R4, #+104]
   1506            if ((Speaker[2]==1) && (Spek2_Counter>150)) 
   \                     ??Timer_10ms_9:
   \   000000AA   A07A               LDRB     R0,[R4, #+10]
   \   000000AC   0128               CMP      R0,#+1
   \   000000AE   0ED1               BNE      ??Timer_10ms_10
   \   000000B0   A06E               LDR      R0,[R4, #+104]
   \   000000B2   9728               CMP      R0,#+151
   \   000000B4   0BDB               BLT      ??Timer_10ms_10
   1507            {
   1508                Spek2_Counter=0;
   \   000000B6   0022               MOVS     R2,#+0
   \   000000B8   A266               STR      R2,[R4, #+104]
   1509                ButtonBipCounter=g_counter+150;
   \   000000BA   1B4B               LDR      R3,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000BC   2000               MOVS     R0,R4
   \   000000BE   3830               ADDS     R0,R0,#+56
   \   000000C0   03C8               LDM      R0!,{R0,R1}
   \   000000C2   0025               MOVS     R5,#+0
   \   000000C4   9630               ADDS     R0,R0,#+150
   \   000000C6   6941               ADCS     R1,R1,R5
   \   000000C8   03C3               STM      R3!,{R0,R1}
   1510                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe063]: shift count is too large
   \   000000CA   1848               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000CC   0260               STR      R2,[R0, #+0]
   1511            }
   1512          
   1513            if ((Speaker[3]==1) && (Spek2_Counter==150)) 
   \                     ??Timer_10ms_10:
   \   000000CE   E07A               LDRB     R0,[R4, #+11]
   \   000000D0   0128               CMP      R0,#+1
   \   000000D2   0DD1               BNE      ??Timer_10ms_11
   \   000000D4   A06E               LDR      R0,[R4, #+104]
   \   000000D6   9628               CMP      R0,#+150
   \   000000D8   0AD1               BNE      ??Timer_10ms_11
   1514            {
   1515                ButtonBipCounter=g_counter+100;
   \   000000DA   134A               LDR      R2,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   000000DC   2000               MOVS     R0,R4
   \   000000DE   3830               ADDS     R0,R0,#+56
   \   000000E0   03C8               LDM      R0!,{R0,R1}
   \   000000E2   0023               MOVS     R3,#+0
   \   000000E4   6430               ADDS     R0,R0,#+100
   \   000000E6   5941               ADCS     R1,R1,R3
   \   000000E8   03C2               STM      R2!,{R0,R1}
   1516                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe063]: shift count is too large
   \   000000EA   1048               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   000000EC   1900               MOVS     R1,R3
   \   000000EE   0160               STR      R1,[R0, #+0]
   1517            }  
   1518            if ((Speaker[3]==1) && (Spek2_Counter>200)) 
   \                     ??Timer_10ms_11:
   \   000000F0   E07A               LDRB     R0,[R4, #+11]
   \   000000F2   0128               CMP      R0,#+1
   \   000000F4   0DD1               BNE      ??Timer_10ms_12
   \   000000F6   A06E               LDR      R0,[R4, #+104]
   \   000000F8   C928               CMP      R0,#+201
   \   000000FA   0ADB               BLT      ??Timer_10ms_12
   1519            {
   1520                Spek2_Counter=0;
   \   000000FC   0022               MOVS     R2,#+0
   \   000000FE   A266               STR      R2,[R4, #+104]
   1521                ButtonBipCounter=g_counter+100;
   \   00000100   094B               LDR      R3,??Timer_10ms_0+0x8  ;; ButtonBipCounter
   \   00000102   3834               ADDS     R4,R4,#+56
   \   00000104   03CC               LDM      R4!,{R0,R1}
   \   00000106   0024               MOVS     R4,#+0
   \   00000108   6430               ADDS     R0,R0,#+100
   \   0000010A   6141               ADCS     R1,R1,R4
   \   0000010C   03C3               STM      R3!,{R0,R1}
   1522                AT91C_BASE_PIOA->PIO_SODR =SpeakerPin; 
                                                  ^
Warning[Pe063]: shift count is too large
   \   0000010E   0748               LDR      R0,??Timer_10ms_0+0xC  ;; 0xfffff430
   \   00000110   0260               STR      R2,[R0, #+0]
   1523            }    
   1524          
   1525           AT91F_WDTRestart(AT91C_BASE_WDTC);
   \                     ??Timer_10ms_12:
   \   00000112   0748               LDR      R0,??Timer_10ms_0+0x10  ;; 0xfffffd40
   \   00000114   ........           BL       AT91F_WDTRestart
   1526          
   1527          }
   \   00000118   38BC               POP      {R3-R5}
   \   0000011A   01BC               POP      {R0}
   \   0000011C   0047               BX       R0               ;; return
   \   0000011E   C046               Nop      
   \                     ??Timer_10ms_0:
   \   00000120   2000FAFF           DC32     0xfffa0020
   \   00000124   ........           DC32     DateTime
   \   00000128   ........           DC32     ButtonBipCounter
   \   0000012C   30F4FFFF           DC32     0xfffff430
   \   00000130   40FDFFFF           DC32     0xfffffd40
   1528          
   1529          
   1530          
   1531          

   \                                 In section Debug.txt, align 4, keep-with-next
   1532          void Timer_10ms_Setup(void) 
   1533          { 
   1534          
   1535          
   1536           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC0] = (unsigned int)Timer_10ms;  //set AIC             
   \                     Timer_10ms_Setup:
   \   00000000   1248               LDR      R0,??Timer_10ms_Setup_0  ;; 0xfffff0b0
   \   00000002   1349               LDR      R1,??Timer_10ms_Setup_0+0x4  ;; Timer_10ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1537           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC0] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_10mS_PRIOR ); 
   \   00000006   1348               LDR      R0,??Timer_10ms_Setup_0+0x8  ;; 0xfffff030
   \   00000008   0321               MOVS     R1,#+3
   \   0000000A   0160               STR      R1,[R0, #+0]
   1538           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC0);      //enable clock 
   \   0000000C   8020               MOVS     R0,#+128
   \   0000000E   4001               LSLS     R0,R0,#+5        ;; #+4096
   \   00000010   1149               LDR      R1,??Timer_10ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000012   0860               STR      R0,[R1, #+0]
   1539           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000014   1149               LDR      R1,??Timer_10ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000016   0022               MOVS     R2,#+0
   \   00000018   0A60               STR      R2,[R1, #+0]
   1540           //no external clocks 
   1541           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   0000001A   1149               LDR      R1,??Timer_10ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001C   1522               MOVS     R2,#+21
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1542           AT91C_BASE_TC0->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   00000020   1049               LDR      R1,??Timer_10ms_Setup_0+0x18  ;; 0xfffa0000
   \   00000022   0522               MOVS     R2,#+5
   \   00000024   0A60               STR      R2,[R1, #+0]
   1543           AT91C_BASE_TC0->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV5_CLOCK;//CPC 
   \   00000026   1049               LDR      R1,??Timer_10ms_Setup_0+0x1C  ;; 0xfffa0004
   \   00000028   104A               LDR      R2,??Timer_10ms_Setup_0+0x20  ;; 0xcc004
   \   0000002A   0A60               STR      R2,[R1, #+0]
   1544            //! DIV5 - 1024
   1545           //! DIV4 - 128
   1546           //! DIV3 - 32
   1547           //! DIV2 - 8
   1548           //clock: MCK/1024  = 48054841/1024  =  46928 Hz 
   1549           //AT91C_BASE_TC0->TC_RC = 46928,55;    => 1 sec 
   1550                                   
   1551           AT91C_BASE_TC0->TC_RC = 469;                  //10ms 
   \   0000002C   1049               LDR      R1,??Timer_10ms_Setup_0+0x24  ;; 0xfffa001c
   \   0000002E   FF22               MOVS     R2,#+255
   \   00000030   D632               ADDS     R2,R2,#+214      ;; #+469
   \   00000032   0A60               STR      R2,[R1, #+0]
   1552           AT91C_BASE_TC0->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000034   0F49               LDR      R1,??Timer_10ms_Setup_0+0x28  ;; 0xfffa0024
   \   00000036   1022               MOVS     R2,#+16
   \   00000038   0A60               STR      R2,[R1, #+0]
   1553           AT91C_BASE_TC0->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   0000003A   0F49               LDR      R1,??Timer_10ms_Setup_0+0x2C  ;; 0xfffa0028
   \   0000003C   D243               MVNS     R2,R2            ;; #-17
   \   0000003E   0A60               STR      R2,[R1, #+0]
   1554           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC0);       //enable int 
   \   00000040   0E49               LDR      R1,??Timer_10ms_Setup_0+0x30  ;; 0xfffff120
   \   00000042   0860               STR      R0,[R1, #+0]
   1555           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC0);       //clear int 
   \   00000044   0E49               LDR      R1,??Timer_10ms_Setup_0+0x34  ;; 0xfffff128
   \   00000046   0860               STR      R0,[R1, #+0]
   1556            
   1557          
   1558          }//_____________________________________________________________________________
   \   00000048   7047               BX       LR               ;; return
   \   0000004A   C046               Nop      
   \                     ??Timer_10ms_Setup_0:
   \   0000004C   B0F0FFFF           DC32     0xfffff0b0
   \   00000050   ........           DC32     Timer_10ms
   \   00000054   30F0FFFF           DC32     0xfffff030
   \   00000058   10FCFFFF           DC32     0xfffffc10
   \   0000005C   C000FAFF           DC32     0xfffa00c0
   \   00000060   C400FAFF           DC32     0xfffa00c4
   \   00000064   0000FAFF           DC32     0xfffa0000
   \   00000068   0400FAFF           DC32     0xfffa0004
   \   0000006C   04C00C00           DC32     0xcc004
   \   00000070   1C00FAFF           DC32     0xfffa001c
   \   00000074   2400FAFF           DC32     0xfffa0024
   \   00000078   2800FAFF           DC32     0xfffa0028
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1559          
   1560          
   1561          
   1562          
   1563          
   1564          //-----------------------------------------------------------------------------
   1565          //! Nazwa funkcji :    Timer_1ms
   1566          //! Okres: 1ms
   1567          //! Funkcje:
   1568          //!         Funkcja obs³ugi przerwania USART 0  Czas 1 ms
   1569          //!         Triger Timer_10ms 
   1570          //-----------------------------------------------------------------------------
   1571          //  
   1572          //----------------------------------------------------------------------------- 
   1573          
   1574          

   \                                 In section .bss, align 4
   1575          int Counter=0;
   \                     Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1576          int US0_Counter=0;
   \                     US0_Counter:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   1577          int US1_Counter=0;
   \                     US1_Counter:
   \   00000000                      DS8 4
   1578          extern char SendModbusEnable;

   \                                 In section .bss, align 1
   1579          char CounterForTimer10ms=0;
   \                     CounterForTimer10ms:
   \   00000000                      DS8 1
   1580          short int CurTimeQual=0;
   1581          

   \                                 In section Debug.txt, align 4, keep-with-next
   1582          void Timer_1ms(void)                        //timer isr 
   1583          { 
   \                     Timer_1ms:
   \   00000000   70B5               PUSH     {R4-R6,LR}
   1584            unsigned int dummy2 = AT91C_BASE_TC2->TC_SR;  
   \   00000002   6448               LDR      R0,??Timer_1ms_0  ;; 0xfffa00a0
   \   00000004   0068               LDR      R0,[R0, #+0]
   1585            
   1586            g_counter++;
   \   00000006   644C               LDR      R4,??Timer_1ms_0+0x4  ;; DateTime
   \   00000008   2000               MOVS     R0,R4
   \   0000000A   3830               ADDS     R0,R0,#+56
   \   0000000C   03C8               LDM      R0!,{R0,R1}
   \   0000000E   0022               MOVS     R2,#+0
   \   00000010   401C               ADDS     R0,R0,#+1
   \   00000012   5141               ADCS     R1,R1,R2
   \   00000014   2200               MOVS     R2,R4
   \   00000016   3832               ADDS     R2,R2,#+56
   \   00000018   03C2               STM      R2!,{R0,R1}
   1587          
   1588            
   1589          
   1590            
   1591            
   1592            /*
   1593            
   1594          
   1595          
   1596            
   1597            //obs³uga US0
   1598            if (US0_MasterMODBUS_ENABLE)
   1599            {
   1600            if (US0_Counter>g_US0_Comm_MinCykle) 
   1601            {
   1602              
   1603                if (g_Ans_ZD_MODBUS_0 == g_US0_Comm_TIMEOUT)
   1604                {
   1605                    ZD_MODBUS_0[g_Current_ZD_MODBUS_0].Error ++;
   1606                }
   1607              
   1608                
   1609                if (g_Ans_ZD_MODBUS_0 >= g_US0_Comm_TIMEOUT)
   1610                {
   1611          
   1612                    //AT91C_BASE_PIOA->PIO_SODR = AT91C_PIO_PA4; AT91C_BASE_PIOA->PIO_CODR = AT91C_PIO_PA4;
   1613             
   1614                    g_Ans_ZD_MODBUS_0=0;
   1615                    SendModbusEnable=0;
   1616                  //  ModBus_MASTER_TX(0);
   1617                    
   1618                    US0_Counter=0;
   1619                }
   1620                else
   1621                {
   1622                    g_Ans_ZD_MODBUS_0++;
   1623          
   1624                }
   1625              
   1626            }
   1627            else
   1628            {
   1629              US0_Counter++; 
   1630            }
   1631            }
   1632            
   1633          
   1634          
   1635            if (US1_MasterMODBUS_ENABLE)
   1636            {
   1637            if (US1_Counter>g_US0_Comm_MinCykle) 
   1638            {
   1639              
   1640                if (g_Ans_ZD_MODBUS_1 == g_US1_Comm_TIMEOUT)
   1641                {
   1642                    ZD_MODBUS_1[g_Current_ZD_MODBUS_1].Error ++;
   1643                }
   1644                
   1645                if (g_Ans_ZD_MODBUS_1 >= g_US1_Comm_TIMEOUT)
   1646                {
   1647             
   1648                    g_Ans_ZD_MODBUS_1=0;
   1649                    ModBus_MASTER_TX(1);
   1650                    
   1651                    US0_Counter=1;
   1652                }
   1653                else
   1654                {
   1655                    g_Ans_ZD_MODBUS_1++;
   1656          
   1657                }
   1658              
   1659            }
   1660            else
   1661            {
   1662              US1_Counter++; 
   1663            }
   1664            }
   1665          */
   1666            
   1667            
   1668          
   1669          if (ButtonBipCounter<g_counter) AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                                            ^
Warning[Pe063]: shift count is too large
   \   0000001A   604A               LDR      R2,??Timer_1ms_0+0x8  ;; ButtonBipCounter
   \   0000001C   0CCA               LDM      R2!,{R2,R3}
   \   0000001E   8B42               CMP      R3,R1
   \   00000020   05D8               BHI      ??Timer_1ms_1
   \   00000022   01D3               BCC      ??Timer_1ms_2
   \   00000024   8242               CMP      R2,R0
   \   00000026   02D2               BCS      ??Timer_1ms_1
   \                     ??Timer_1ms_2:
   \   00000028   5D48               LDR      R0,??Timer_1ms_0+0xC  ;; 0xfffff434
   \   0000002A   0021               MOVS     R1,#+0
   \   0000002C   0160               STR      R1,[R0, #+0]
   1670          
   1671            
   1672            
   1673            static int RF_SlaveCounter;
   1674           
   1675            
   1676            
   1677          //TimeOut RF -----
   1678            
   1679          if (RF_Status.AllReady)
   \                     ??Timer_1ms_1:
   \   0000002E   5D4E               LDR      R6,??Timer_1ms_0+0x10  ;; RF_Status
   \   00000030   B07B               LDRB     R0,[R6, #+14]
   \   00000032   0028               CMP      R0,#+0
   \   00000034   67D0               BEQ      ??Timer_1ms_3
   1680          //{   
   1681            
   1682          //if (RF_Status.Init==0)
   1683          {
   1684            if (RF_Status.MasterMode)
   \   00000036   307B               LDRB     R0,[R6, #+12]
   \   00000038   0028               CMP      R0,#+0
   \   0000003A   0FD0               BEQ      ??Timer_1ms_4
   1685            {
   1686              if ((!SlaveMode) && (g_Stop_Program==0))
   \   0000003C   207D               LDRB     R0,[R4, #+20]
   \   0000003E   A17C               LDRB     R1,[R4, #+18]
   \   00000040   0143               ORRS     R1,R1,R0
   \   00000042   60D1               BNE      ??Timer_1ms_3
   1687              if (g_RF_TimeOutCounter>0)
   \   00000044   5848               LDR      R0,??Timer_1ms_0+0x14  ;; g_RF_TimeOutCounter
   \   00000046   0178               LDRB     R1,[R0, #+0]
   \   00000048   0029               CMP      R1,#+0
   \   0000004A   02D0               BEQ      ??Timer_1ms_5
   1688              {
   1689                g_RF_TimeOutCounter--;
   \   0000004C   491E               SUBS     R1,R1,#+1
   \   0000004E   0170               STRB     R1,[R0, #+0]
   \   00000050   59E0               B        ??Timer_1ms_3
   1690           
   1691              }else{
   1692                 g_RF_TimeOutCounter=RF_TimeOut; 
   \                     ??Timer_1ms_5:
   \   00000052   0921               MOVS     R1,#+9
   \   00000054   0170               STRB     R1,[R0, #+0]
   1693                 RF_MasterExecut();
   \   00000056   ........           BL       RF_MasterExecut
   \   0000005A   54E0               B        ??Timer_1ms_3
   1694              }
   1695            }else{
   1696                  
   1697                  RF_SlaveCounter++;
   \                     ??Timer_1ms_4:
   \   0000005C   E06E               LDR      R0,[R4, #+108]
   \   0000005E   401C               ADDS     R0,R0,#+1
   \   00000060   E066               STR      R0,[R4, #+108]
   1698               
   1699                  
   1700                    if (RF_Status.ConfResive==2) //je¿eli poprawnie odebrano dane 
   \   00000062   F17A               LDRB     R1,[R6, #+11]
   \   00000064   0229               CMP      R1,#+2
   \   00000066   06D1               BNE      ??Timer_1ms_6
   1701                    {
   1702                      RF_SlaveCounter=0;   //- zeruj licznik
   \   00000068   0020               MOVS     R0,#+0
   \   0000006A   E066               STR      R0,[R4, #+108]
   1703                      RF_Status.ConfResive=1;
   \   0000006C   0120               MOVS     R0,#+1
   \   0000006E   0100               MOVS     R1,R0
   \   00000070   F172               STRB     R1,[R6, #+11]
   1704                      g_SlaveConnect=1;    //ustawia flagê poprawnej transmisji slave
   \   00000072   6074               STRB     R0,[R4, #+17]
   \   00000074   47E0               B        ??Timer_1ms_3
   1705                    }else{
   1706          
   1707                      if (((RF_SlaveCounter==100)  && (RF_Status.ConfResive==0)) //je¿eli nie odebrano danych w czasie 100ms
   1708                      || ((RF_SlaveCounter>=2000) && (RF_Status.ConfResive<2))  //je¿eli nie odebrano danych o w³aœciwym ID w czasie 1000ms
   1709                        )
   \                     ??Timer_1ms_6:
   \   00000076   6428               CMP      R0,#+100
   \   00000078   01D1               BNE      ??Timer_1ms_7
   \   0000007A   0029               CMP      R1,#+0
   \   0000007C   05D0               BEQ      ??Timer_1ms_8
   \                     ??Timer_1ms_7:
   \   0000007E   FA22               MOVS     R2,#+250
   \   00000080   D200               LSLS     R2,R2,#+3        ;; #+2000
   \   00000082   9042               CMP      R0,R2
   \   00000084   3FDB               BLT      ??Timer_1ms_3
   \   00000086   0229               CMP      R1,#+2
   \   00000088   3DD2               BCS      ??Timer_1ms_3
   1710                      {
   1711                        
   1712                           RF_Status.ConfResive=0;
   \                     ??Timer_1ms_8:
   \   0000008A   0025               MOVS     R5,#+0
   \   0000008C   2800               MOVS     R0,R5
   \   0000008E   F072               STRB     R0,[R6, #+11]
   1713                           g_SlaveConnect=0; 
   \   00000090   6074               STRB     R0,[R4, #+17]
   1714                           SPI_SendWord(0x8219,Cs_RF);                          //wy³¹cz odbiornik/nadajnik
                                  ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   00000092   0221               MOVS     R1,#+2
   \   00000094   4548               LDR      R0,??Timer_1ms_0+0x18  ;; 0x8219
   \   00000096   ........           BL       SPI_SendWord
   1715                           if (RF_Status.AllReady) if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=0;}
   \   0000009A   B07B               LDRB     R0,[R6, #+14]
   \   0000009C   0028               CMP      R0,#+0
   \   0000009E   06D0               BEQ      ??Timer_1ms_9
   \   000000A0   707B               LDRB     R0,[R6, #+13]
   \   000000A2   2728               CMP      R0,#+39
   \   000000A4   02D2               BCS      ??Timer_1ms_10
   \   000000A6   401C               ADDS     R0,R0,#+1
   \   000000A8   7073               STRB     R0,[R6, #+13]
   \   000000AA   00E0               B        ??Timer_1ms_9
   \                     ??Timer_1ms_10:
   \   000000AC   7573               STRB     R5,[R6, #+13]
   1716                           SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
   \                     ??Timer_1ms_9:
   \   000000AE   0221               MOVS     R1,#+2
   \   000000B0   0D00               MOVS     R5,R1
   \   000000B2   707B               LDRB     R0,[R6, #+13]
   \   000000B4   ........           BL       __aeabi_ui2d
   \   000000B8   0200               MOVS     R2,R0
   \   000000BA   0B00               MOVS     R3,R1
   \   000000BC   3C48               LDR      R0,??Timer_1ms_0+0x1C  ;; 0x33333333
   \   000000BE   3D49               LDR      R1,??Timer_1ms_0+0x20  ;; 0x3fd33333
   \   000000C0   ........           BL       __aeabi_dmul
   \   000000C4   0200               MOVS     R2,R0
   \   000000C6   0B00               MOVS     R3,R1
   \   000000C8   3B48               LDR      R0,??Timer_1ms_0+0x24  ;; 0x5c28f5c3
   \   000000CA   3C49               LDR      R1,??Timer_1ms_0+0x28  ;; 0x408ae28f
   \   000000CC   ........           BL       __aeabi_dadd
   \   000000D0   0200               MOVS     R2,R0
   \   000000D2   0B00               MOVS     R3,R1
   \   000000D4   0020               MOVS     R0,#+0
   \   000000D6   3A49               LDR      R1,??Timer_1ms_0+0x2C  ;; 0x40690000
   \   000000D8   ........           BL       __aeabi_dmul
   \   000000DC   0200               MOVS     R2,R0
   \   000000DE   0B00               MOVS     R3,R1
   \   000000E0   0020               MOVS     R0,#+0
   \   000000E2   3849               LDR      R1,??Timer_1ms_0+0x30  ;; 0xc104ff00
   \   000000E4   ........           BL       __aeabi_dadd
   \   000000E8   ........           BL       __aeabi_d2iz
   \   000000EC   0004               LSLS     R0,R0,#+16
   \   000000EE   0014               ASRS     R0,R0,#+16
   \   000000F0   A021               MOVS     R1,#+160
   \   000000F2   0902               LSLS     R1,R1,#+8        ;; #+40960
   \   000000F4   0143               ORRS     R1,R1,R0
   \   000000F6   0800               MOVS     R0,R1
   \   000000F8   2900               MOVS     R1,R5
   \   000000FA   ........           BL       SPI_SendWord
   1717                           SPI_SendWord(0x8299,Cs_RF);                          //w³¹cz odbiornik
   \   000000FE   2900               MOVS     R1,R5
   \   00000100   3148               LDR      R0,??Timer_1ms_0+0x34  ;; 0x8299
   \   00000102   ........           BL       SPI_SendWord
   1718                        
   1719                      }
   1720                      
   1721                    }
   1722                   
   1723                    
   1724            }
   1725          }          
   1726          
   1727            
   1728          
   1729            
   1730                //uruchomienie Timer_1s co 1000 cykli-------------------------------------------
   1731                static short CounterForTimer1s; 
   1732                if (CounterForTimer1s<1000)
   \                     ??Timer_1ms_3:
   \   00000106   2420               MOVS     R0,#+36
   \   00000108   205E               LDRSH    R0,[R4, R0]
   \   0000010A   FA21               MOVS     R1,#+250
   \   0000010C   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   0000010E   8842               CMP      R0,R1
   \   00000110   02DA               BGE      ??Timer_1ms_11
   1733                {
   1734                    CounterForTimer1s++;
   \   00000112   401C               ADDS     R0,R0,#+1
   \   00000114   A084               STRH     R0,[R4, #+36]
   \   00000116   03E0               B        ??Timer_1ms_12
   1735                }else{
   1736                    CounterForTimer1s=0;
   \                     ??Timer_1ms_11:
   \   00000118   0020               MOVS     R0,#+0
   \   0000011A   A084               STRH     R0,[R4, #+36]
   1737                    Timer_1s();
   \   0000011C   ........           BL       Timer_1s
   1738                }
   1739          
   1740          
   1741          
   1742            
   1743            //przesuniêcie bitowe dle pomiaru jakoœci po³¹czenia z Node`ami z okresowoœci¹ TimeUnitQual
   1744            if (++CurTimeQual>=TimeUnitQual)
   \                     ??Timer_1ms_12:
   \   00000120   2220               MOVS     R0,#+34
   \   00000122   205E               LDRSH    R0,[R4, R0]
   \   00000124   401C               ADDS     R0,R0,#+1
   \   00000126   6084               STRH     R0,[R4, #+34]
   \   00000128   9621               MOVS     R1,#+150
   \   0000012A   4900               LSLS     R1,R1,#+1        ;; #+300
   \   0000012C   0004               LSLS     R0,R0,#+16
   \   0000012E   0014               ASRS     R0,R0,#+16
   \   00000130   8842               CMP      R0,R1
   \   00000132   2CDB               BLT      ??Timer_1ms_13
   1745            {
   1746              CurTimeQual=0;
   \   00000134   0025               MOVS     R5,#+0
   \   00000136   2800               MOVS     R0,R5
   \   00000138   6084               STRH     R0,[R4, #+34]
   1747              if (TransQuality.MensurIndex<32)
   \   0000013A   2448               LDR      R0,??Timer_1ms_0+0x38  ;; TransQuality
   \   0000013C   0178               LDRB     R1,[R0, #+0]
   \   0000013E   2029               CMP      R1,#+32
   \   00000140   02D2               BCS      ??Timer_1ms_14
   1748              {
   1749                TransQuality.MensurIndex++; 
   \   00000142   491C               ADDS     R1,R1,#+1
   \   00000144   0170               STRB     R1,[R0, #+0]
   \   00000146   01E0               B        ??Timer_1ms_15
   1750              }else{
   1751                TransQuality.MensurIndex=0;
   \                     ??Timer_1ms_14:
   \   00000148   2900               MOVS     R1,R5
   \   0000014A   0170               STRB     R1,[R0, #+0]
   1752              }
   1753              if (TransQuality.QuickMensurIndex<4)
   \                     ??Timer_1ms_15:
   \   0000014C   8178               LDRB     R1,[R0, #+2]
   \   0000014E   0429               CMP      R1,#+4
   \   00000150   02D2               BCS      ??Timer_1ms_16
   1754              {
   1755                TransQuality.QuickMensurIndex++; 
   \   00000152   491C               ADDS     R1,R1,#+1
   \   00000154   8170               STRB     R1,[R0, #+2]
   \   00000156   17E0               B        ??Timer_1ms_17
   1756              }else{
   1757                TransQuality.QuickMensurIndex=0;
   \                     ??Timer_1ms_16:
   \   00000158   2900               MOVS     R1,R5
   \   0000015A   8170               STRB     R1,[R0, #+2]
   1758              }
   1759          
   1760              for (char i=0; i<NumberNeurons; i++) 
   \   0000015C   14E0               B        ??Timer_1ms_17
   1761              {
   1762                TransQuality.Mensur[i] &= ~(0x1 << TransQuality.MensurIndex);
   \                     ??Timer_1ms_18:
   \   0000015E   8A00               LSLS     R2,R1,#+2
   \   00000160   8218               ADDS     R2,R0,R2
   \   00000162   D36C               LDR      R3,[R2, #+76]
   \   00000164   0124               MOVS     R4,#+1
   \   00000166   0678               LDRB     R6,[R0, #+0]
   \   00000168   B440               LSLS     R4,R4,R6
   \   0000016A   A343               BICS     R3,R3,R4
   \   0000016C   D364               STR      R3,[R2, #+76]
   1763                TransQuality.QuickMensur[i] &= ~(0x1 << TransQuality.QuickMensurIndex);
   \   0000016E   4118               ADDS     R1,R0,R1
   \   00000170   2622               MOVS     R2,#+38
   \   00000172   0B00               MOVS     R3,R1
   \   00000174   2633               ADDS     R3,R3,#+38
   \   00000176   1B78               LDRB     R3,[R3, #+0]
   \   00000178   0124               MOVS     R4,#+1
   \   0000017A   8678               LDRB     R6,[R0, #+2]
   \   0000017C   B440               LSLS     R4,R4,R6
   \   0000017E   A343               BICS     R3,R3,R4
   \   00000180   8B54               STRB     R3,[R1, R2]
   1764              }                 
   \   00000182   6D1C               ADDS     R5,R5,#+1
   \   00000184   2D06               LSLS     R5,R5,#+24
   \   00000186   2D0E               LSRS     R5,R5,#+24
   \                     ??Timer_1ms_17:
   \   00000188   2900               MOVS     R1,R5
   \   0000018A   2329               CMP      R1,#+35
   \   0000018C   E7D3               BCC      ??Timer_1ms_18
   1765            }
   1766          
   1767            
   1768          
   1769                    
   1770                 
   1771          
   1772          
   1773          }//_____________________________________________________________________________
   \                     ??Timer_1ms_13:
   \   0000018E   70BC               POP      {R4-R6}
   \   00000190   01BC               POP      {R0}
   \   00000192   0047               BX       R0               ;; return
   \                     ??Timer_1ms_0:
   \   00000194   A000FAFF           DC32     0xfffa00a0
   \   00000198   ........           DC32     DateTime
   \   0000019C   ........           DC32     ButtonBipCounter
   \   000001A0   34F4FFFF           DC32     0xfffff434
   \   000001A4   ........           DC32     RF_Status
   \   000001A8   ........           DC32     g_RF_TimeOutCounter
   \   000001AC   19820000           DC32     0x8219
   \   000001B0   33333333           DC32     0x33333333
   \   000001B4   3333D33F           DC32     0x3fd33333
   \   000001B8   C3F5285C           DC32     0x5c28f5c3
   \   000001BC   8FE28A40           DC32     0x408ae28f
   \   000001C0   00006940           DC32     0x40690000
   \   000001C4   00FF04C1           DC32     0xc104ff00
   \   000001C8   99820000           DC32     0x8299
   \   000001CC   ........           DC32     TransQuality

   \                                 In section .data, align 8
   \                     DateTime:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     Speaker:
   \   00000008   00000000           DC8 0, 0, 0, 0
   \                     g_PC_Connected:
   \   0000000C   00                 DC8 0
   \                     g_LightLCDEnable:
   \   0000000D   00                 DC8 0
   \                     g_ScreenSever_On:
   \   0000000E   00                 DC8 0
   \                     g_ScreenSever_Time_On:
   \   0000000F   00                 DC8 0
   \                     g_ScreenSever_Time_Off:
   \   00000010   00                 DC8 0
   \                     g_SlaveConnect:
   \   00000011   00                 DC8 0
   \                     g_Stop_Program:
   \   00000012   00                 DC8 0
   \                     AlarmOn:
   \   00000013   00                 DC8 0
   \                     SlaveMode:
   \   00000014   00                 DC8 0
   \                     ForwardUSB2Serialferst:
   \   00000015   00                 DC8 0
   \                     g_PC_Connected_timeout:
   \   00000016   05                 DC8 5
   \                     FlagChangeTime:
   \   00000017   00                 DC8 0
   \   00000018   00                 DC8 0
   \   00000019   64                 DC8 100
   \                     Y_down:
   \   0000001A   FFFF               DC16 -1
   \                     X_down:
   \   0000001C   FFFF               DC16 -1
   \                     Y_up:
   \   0000001E   FFFF               DC16 -1
   \                     X_up:
   \   00000020   FFFF               DC16 -1
   \                     CurTimeQual:
   \   00000022   0000               DC16 0
   \   00000024   0000               DC8 0, 0
   \   00000026   0000               DC8 0, 0
   \   00000028   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     g_counter:
   \   00000038   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        
   \                     FlashProgramOfset:
   \   00000040   00010000           DC32 256
   \                     g_seconds_counter:
   \   00000044   00000000           DC8 0, 0, 0, 0
   \                     g_LightCouterLCD:
   \   00000048   00000000           DC32 0
   \                     SourRam:
   \   0000004C   00000000           DC8 0, 0, 0, 0
   \                     siz:
   \   00000050   00000000           DC8 0, 0, 0, 0
   \                     LiczOds:
   \   00000054   00000000           DC32 0
   \                     CyklPerSekCount:
   \   00000058   00000000           DC32 0
   \                     TransLoopTime:
   \   0000005C   00000000           DC32 0
   \                     CyklPerSek:
   \   00000060   01000000           DC32 1
   \                     MenuLevel_old:
   \   00000064   00000000           DC8 0, 0, 0, 0
   \   00000068   00000000           DC8 0, 0, 0, 0
   \   0000006C   00000000           DC8 0, 0, 0, 0
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              000000000000
   \              0000        
   \   00000084   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000094   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000104   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000114   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000124   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000134   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000144   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000154   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000164   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000174   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000184   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000194   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000001F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000204   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000214   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000224   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000234   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000244   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000254   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000264   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000274   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000284   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000294   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000002F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000304   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000314   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000324   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000334   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000344   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000354   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000364   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000374   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000384   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000394   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000003F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000404   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000414   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000424   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000434   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000444   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000454   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000464   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000474   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000484   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000494   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004A4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004B4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004C4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004D4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004E4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000004F4   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000504   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000514   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000524   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000534   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000544   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000554   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000564   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   \                                 In section .data, align 4
   \                     FlashProgramReserveOfset:
   \   00000000   D8D70000           DC32 55256
   1774          
   1775          
   1776          
   1777          
   1778          
   1779          //-----------------------------------------------------------------------------
   1780          //!  Nazwa funkcji :    Timer_1_Setup
   1781          //!  Funkcja inicjalizacji Timer1 - 1ms
   1782          //-----------------------------------------------------------------------------
   1783          //! 
   1784          //-----------------------------------------------------------------------------

   \                                 In section Debug.txt, align 4, keep-with-next
   1785          void Timer_1ms_Setup(void) 
   1786          { 
   1787            //TRACE_INFO("T2_setup");  
   1788            //TRACE_INFO("\n\r"); 
   1789            
   1790           //AT91C_BASE_PIOA->PIO_PDR = P_TIOA0;   //disable PIOA 
   1791           //AT91C_BASE_PIOA->PIO_BSR = P_TIOA0;   //select peripheral B 
   1792           AT91C_BASE_AIC->AIC_SVR[AT91C_ID_TC2] = (unsigned int)Timer_1ms;  //set AIC             
   \                     Timer_1ms_Setup:
   \   00000000   1148               LDR      R0,??Timer_1ms_Setup_0  ;; 0xfffff0b8
   \   00000002   1249               LDR      R1,??Timer_1ms_Setup_0+0x4  ;; Timer_1ms
   \   00000004   0160               STR      R1,[R0, #+0]
   1793           AT91C_BASE_AIC->AIC_SMR[AT91C_ID_TC2] = (AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL | TIMER_1mS_PRIOR ); 
   \   00000006   1248               LDR      R0,??Timer_1ms_Setup_0+0x8  ;; 0xfffff038
   \   00000008   0421               MOVS     R1,#+4
   \   0000000A   0160               STR      R1,[R0, #+0]
   1794           AT91C_BASE_PMC->PMC_PCER = (1<<AT91C_ID_TC2);      //enable clock 
   \   0000000C   0803               LSLS     R0,R1,#+12
   \   0000000E   1149               LDR      R1,??Timer_1ms_Setup_0+0xC  ;; 0xfffffc10
   \   00000010   0860               STR      R0,[R1, #+0]
   1795           AT91C_BASE_TCB->TCB_BCR = 0;                  //no SYNC trigger 
   \   00000012   1149               LDR      R1,??Timer_1ms_Setup_0+0x10  ;; 0xfffa00c0
   \   00000014   0022               MOVS     R2,#+0
   \   00000016   0A60               STR      R2,[R1, #+0]
   1796           //no external clocks 
   1797           AT91C_BASE_TCB->TCB_BMR = AT91C_TCB_TC0XC0S_NONE | AT91C_TCB_TC1XC1S_NONE | AT91C_TCB_TC2XC2S_NONE; 
   \   00000018   1049               LDR      R1,??Timer_1ms_Setup_0+0x14  ;; 0xfffa00c4
   \   0000001A   1522               MOVS     R2,#+21
   \   0000001C   0A60               STR      R2,[R1, #+0]
   1798           AT91C_BASE_TC2->TC_CCR = AT91C_TC_SWTRG | AT91C_TC_CLKEN;                   //enable and start clock 
   \   0000001E   1049               LDR      R1,??Timer_1ms_Setup_0+0x18  ;; 0xfffa0080
   \   00000020   0522               MOVS     R2,#+5
   \   00000022   0A60               STR      R2,[R1, #+0]
   1799           AT91C_BASE_TC2->TC_CMR = AT91C_TC_ACPC_TOGGLE | AT91C_TC_WAVE  | AT91C_TC_WAVESEL_UP_AUTO  | AT91C_TC_CLKS_TIMER_DIV2_CLOCK;//CPC 
   \   00000024   0F49               LDR      R1,??Timer_1ms_Setup_0+0x1C  ;; 0xfffa0084
   \   00000026   104A               LDR      R2,??Timer_1ms_Setup_0+0x20  ;; 0xcc001
   \   00000028   0A60               STR      R2,[R1, #+0]
   1800           //clock: MCK/1024  = 48054841/ DIV
   1801           //AT91C_BASE_TC0->TC_RC = 46928;    => 1 sec 
   1802           //! DIV5 - 1024
   1803           //! DIV4 - 128
   1804           //! DIV3 - 32
   1805           //! DIV2 - 8
   1806           
   1807           AT91C_BASE_TC2->TC_RC = 6007;                  //1ms  (z wyliczeñ 6007)
   \   0000002A   1049               LDR      R1,??Timer_1ms_Setup_0+0x24  ;; 0xfffa009c
   \   0000002C   104A               LDR      R2,??Timer_1ms_Setup_0+0x28  ;; 0x1777
   \   0000002E   0A60               STR      R2,[R1, #+0]
   1808           AT91C_BASE_TC2->TC_IER = AT91C_TC_CPCS;         //enable RC compare int 
   \   00000030   1049               LDR      R1,??Timer_1ms_Setup_0+0x2C  ;; 0xfffa00a4
   \   00000032   1022               MOVS     R2,#+16
   \   00000034   0A60               STR      R2,[R1, #+0]
   1809           AT91C_BASE_TC2->TC_IDR = ~AT91C_TC_CPCS;         //disable other 
   \   00000036   1049               LDR      R1,??Timer_1ms_Setup_0+0x30  ;; 0xfffa00a8
   \   00000038   D243               MVNS     R2,R2            ;; #-17
   \   0000003A   0A60               STR      R2,[R1, #+0]
   1810           AT91C_BASE_AIC->AIC_IECR = (1<<AT91C_ID_TC2);       //enable int 
   \   0000003C   0F49               LDR      R1,??Timer_1ms_Setup_0+0x34  ;; 0xfffff120
   \   0000003E   0860               STR      R0,[R1, #+0]
   1811           AT91C_BASE_AIC->AIC_ICCR = (1<<AT91C_ID_TC2);       //clear int 
   \   00000040   0F49               LDR      R1,??Timer_1ms_Setup_0+0x38  ;; 0xfffff128
   \   00000042   0860               STR      R0,[R1, #+0]
   1812          
   1813          
   1814          
   1815          }//_____________________________________________________________________________
   \   00000044   7047               BX       LR               ;; return
   \   00000046   C046               Nop      
   \                     ??Timer_1ms_Setup_0:
   \   00000048   B8F0FFFF           DC32     0xfffff0b8
   \   0000004C   ........           DC32     Timer_1ms
   \   00000050   38F0FFFF           DC32     0xfffff038
   \   00000054   10FCFFFF           DC32     0xfffffc10
   \   00000058   C000FAFF           DC32     0xfffa00c0
   \   0000005C   C400FAFF           DC32     0xfffa00c4
   \   00000060   8000FAFF           DC32     0xfffa0080
   \   00000064   8400FAFF           DC32     0xfffa0084
   \   00000068   01C00C00           DC32     0xcc001
   \   0000006C   9C00FAFF           DC32     0xfffa009c
   \   00000070   77170000           DC32     0x1777
   \   00000074   A400FAFF           DC32     0xfffa00a4
   \   00000078   A800FAFF           DC32     0xfffa00a8
   \   0000007C   20F1FFFF           DC32     0xfffff120
   \   00000080   28F1FFFF           DC32     0xfffff128
   1816          
   1817          
   1818          
   1819          
   1820          
   1821          
   1822          
   1823          
   1824          
   1825          

   \                                 In section Debug.txt, align 4, keep-with-next
   1826          void RamToFlash(void)
   1827          {
   \                     RamToFlash:
   \   00000000   F1B5               PUSH     {R0,R4-R7,LR}
   1828          
   1829            DispWait=1; 
   \   00000002   2F4C               LDR      R4,??RamToFlash_0  ;; DispWait
   \   00000004   0120               MOVS     R0,#+1
   \   00000006   2070               STRB     R0,[R4, #+0]
   1830            Wait_Paint();
   \   00000008   ........           BL       Wait_Paint
   1831            
   1832                      gProg.Preambu=ProgPreambu;
   \   0000000C   2D4D               LDR      R5,??RamToFlash_0+0x4  ;; gProg
   \   0000000E   AA20               MOVS     R0,#+170
   \   00000010   2870               STRB     R0,[R5, #+0]
   \   00000012   0220               MOVS     R0,#+2
   \   00000014   6870               STRB     R0,[R5, #+1]
   \   00000016   2C48               LDR      R0,??RamToFlash_0+0x8  ;; 0xc670
   \   00000018   6880               STRH     R0,[R5, #+2]
   1833                      gProg.ProgFormatTyp=_ProgFormatTyp;
   1834                      gProg.Size=sizeof(gProg);
   1835                      gProg.ModyfiData[0]='2';gProg.ModyfiData[1]='0';
   \   0000001A   3220               MOVS     R0,#+50
   \   0000001C   2871               STRB     R0,[R5, #+4]
   \   0000001E   3020               MOVS     R0,#+48
   \   00000020   6871               STRB     R0,[R5, #+5]
   1836                      CharToStr(DateTime.Year, &(gProg.ModyfiData[2]), 2); 
   \   00000022   2A4E               LDR      R6,??RamToFlash_0+0xC  ;; DateTime
   \   00000024   0222               MOVS     R2,#+2
   \   00000026   2900               MOVS     R1,R5
   \   00000028   891D               ADDS     R1,R1,#+6
   \   0000002A   3078               LDRB     R0,[R6, #+0]
   \   0000002C   ........           BL       CharToStr
   1837                      gProg.ModyfiData[4]='-';
   \   00000030   2D27               MOVS     R7,#+45
   \   00000032   2F72               STRB     R7,[R5, #+8]
   1838                      CharToStr(DateTime.Mounth, &(gProg.ModyfiData[5]), 2);
   \   00000034   0222               MOVS     R2,#+2
   \   00000036   2900               MOVS     R1,R5
   \   00000038   0931               ADDS     R1,R1,#+9
   \   0000003A   7078               LDRB     R0,[R6, #+1]
   \   0000003C   ........           BL       CharToStr
   1839                      gProg.ModyfiData[7]='-'; 
   \   00000040   EF72               STRB     R7,[R5, #+11]
   1840                      CharToStr(DateTime.Day, &(gProg.ModyfiData[8]), 2); 
   \   00000042   0222               MOVS     R2,#+2
   \   00000044   2900               MOVS     R1,R5
   \   00000046   0C31               ADDS     R1,R1,#+12
   \   00000048   B078               LDRB     R0,[R6, #+2]
   \   0000004A   ........           BL       CharToStr
   1841                      gProg.ModyfiData[10]=' ';
   \   0000004E   2020               MOVS     R0,#+32
   \   00000050   A873               STRB     R0,[R5, #+14]
   1842                      CharToStr(DateTime.Hour, &(gProg.ModyfiData[11]), 2); 
   \   00000052   0222               MOVS     R2,#+2
   \   00000054   2900               MOVS     R1,R5
   \   00000056   0F31               ADDS     R1,R1,#+15
   \   00000058   F078               LDRB     R0,[R6, #+3]
   \   0000005A   ........           BL       CharToStr
   1843                      gProg.ModyfiData[13]=':';
   \   0000005E   3A27               MOVS     R7,#+58
   \   00000060   6F74               STRB     R7,[R5, #+17]
   1844                      CharToStr(DateTime.Minute, &(gProg.ModyfiData[14]), 2); 
   \   00000062   0222               MOVS     R2,#+2
   \   00000064   2900               MOVS     R1,R5
   \   00000066   1231               ADDS     R1,R1,#+18
   \   00000068   3079               LDRB     R0,[R6, #+4]
   \   0000006A   ........           BL       CharToStr
   1845                      gProg.ModyfiData[16]=':';
   \   0000006E   2F75               STRB     R7,[R5, #+20]
   1846                      CharToStr(DateTime.Second, &(gProg.ModyfiData[17]), 2); 
   \   00000070   0222               MOVS     R2,#+2
   \   00000072   2900               MOVS     R1,R5
   \   00000074   1531               ADDS     R1,R1,#+21
   \   00000076   7079               LDRB     R0,[R6, #+5]
   \   00000078   ........           BL       CharToStr
   1847                      for (char i=0; i<19; i++) if (gProg.ModyfiData[i]==0) gProg.ModyfiData[i]='0';
   \   0000007C   0020               MOVS     R0,#+0
   \   0000007E   08E0               B        ??RamToFlash_1
   \                     ??RamToFlash_2:
   \   00000080   6918               ADDS     R1,R5,R1
   \   00000082   0A79               LDRB     R2,[R1, #+4]
   \   00000084   002A               CMP      R2,#+0
   \   00000086   01D1               BNE      ??RamToFlash_3
   \   00000088   3022               MOVS     R2,#+48
   \   0000008A   0A71               STRB     R2,[R1, #+4]
   \                     ??RamToFlash_3:
   \   0000008C   401C               ADDS     R0,R0,#+1
   \   0000008E   0006               LSLS     R0,R0,#+24
   \   00000090   000E               LSRS     R0,R0,#+24
   \                     ??RamToFlash_1:
   \   00000092   0100               MOVS     R1,R0
   \   00000094   1329               CMP      R1,#+19
   \   00000096   F3D3               BCC      ??RamToFlash_2
   1848          
   1849                        unsigned int Save = __get_interrupt_state();            
   \   00000098   ........           BL       __iar_get_interrupt_state
   \   0000009C   0700               MOVS     R7,R0
   1850                        __disable_interrupt();
   \   0000009E   ........           BL       __iar_disable_interrupt
   1851                        //CleanFlash(AT91C_IFLASH_MEM->FlashProgram,sizeof(gProg));
   1852                        FlashWrite((char*)(AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset), (char*)&gProg,sizeof(gProg)); //(char *ptrMem, char *value, int length)
                               ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   000000A2   094A               LDR      R2,??RamToFlash_0+0x8  ;; 0xc670
   \   000000A4   2900               MOVS     R1,R5
   \   000000A6   306C               LDR      R0,[R6, #+64]
   \   000000A8   094B               LDR      R3,??RamToFlash_0+0x10  ;; 0x130100
   \   000000AA   1818               ADDS     R0,R3,R0
   \   000000AC   ........           BL       FlashWrite
   1853                        //at91flashWrite((int)AT91C_IFLASH_MEM->FlashProgram+FlashProgramOfset,0,(char*)&gProg,sizeof(gProg));
   1854                        __set_interrupt_state(Save);
   \   000000B0   3800               MOVS     R0,R7
   \   000000B2   ........           BL       __iar_set_interrupt_state
   1855          
   1856           DispWait=2; 
   \   000000B6   0220               MOVS     R0,#+2
   \   000000B8   2070               STRB     R0,[R4, #+0]
   1857          
   1858          }
   \   000000BA   F8BC               POP      {R3-R7}
   \   000000BC   01BC               POP      {R0}
   \   000000BE   0047               BX       R0               ;; return
   \                     ??RamToFlash_0:
   \   000000C0   ........           DC32     DispWait
   \   000000C4   ........           DC32     gProg
   \   000000C8   70C60000           DC32     0xc670
   \   000000CC   ........           DC32     DateTime
   \   000000D0   00011300           DC32     0x130100
   1859          
   1860          
   1861          
   1862          
   1863          

   \                                 In section .bss, align 4
   1864          int testcount=0;
   \                     testcount:
   \   00000000                      DS8 4

   \                                 In section Debug.txt, align 4, keep-with-next
   1865          void TestHendel(void)
   1866          {
   \                     TestHendel:
   \   00000000   01B5               PUSH     {R0,LR}
   1867            AT91F_PIO_GetInterruptStatus(AT91C_PIO_VBUS);
   \   00000002   0748               LDR      R0,??TestHendel_0  ;; 0xfffff400
   \   00000004   ........           BL       AT91F_PIO_GetInterruptStatus
   1868            if ((AT91C_BASE_PIOA->PIO_PDSR) & AT91C_VBUS) testcount++;
   \   00000008   0648               LDR      R0,??TestHendel_0+0x4  ;; 0xfffff43c
   \   0000000A   0068               LDR      R0,[R0, #+0]
   \   0000000C   8007               LSLS     R0,R0,#+30
   \   0000000E   03D5               BPL      ??TestHendel_1
   \   00000010   0548               LDR      R0,??TestHendel_0+0x8  ;; testcount
   \   00000012   0168               LDR      R1,[R0, #+0]
   \   00000014   491C               ADDS     R1,R1,#+1
   \   00000016   0160               STR      R1,[R0, #+0]
   1869              
   1870          
   1871          }
   \                     ??TestHendel_1:
   \   00000018   08BC               POP      {R3}
   \   0000001A   01BC               POP      {R0}
   \   0000001C   0047               BX       R0               ;; return
   \   0000001E   C046               Nop      
   \                     ??TestHendel_0:
   \   00000020   00F4FFFF           DC32     0xfffff400
   \   00000024   3CF4FFFF           DC32     0xfffff43c
   \   00000028   ........           DC32     testcount
   1872          
   1873          

   \                                 In section Debug.txt, align 4, keep-with-next
   1874          void TestInit(void)
   1875          {
   \                     TestInit:
   \   00000000   31B5               PUSH     {R0,R4,R5,LR}
   1876          //#ifndef USB_BUS_POWERED
   1877              AT91F_PIO_CfgInput(AT91C_BASE_PIOA,AT91C_VBUS);
   \   00000002   154C               LDR      R4,??TestInit_0  ;; 0xfffff400
   \   00000004   0221               MOVS     R1,#+2
   \   00000006   2000               MOVS     R0,R4
   \   00000008   ........           BL       AT91F_PIO_CfgInput
   1878              AT91C_BASE_PIOA->PIO_PPUDR = AT91C_VBUS;
   \   0000000C   1348               LDR      R0,??TestInit_0+0x4  ;; 0xfffff460
   \   0000000E   0221               MOVS     R1,#+2
   \   00000010   0160               STR      R1,[R0, #+0]
   1879              
   1880              // Configure VBus monitoring
   1881                  AT91F_PMC_EnablePeriphClock(AT91C_BASE_PMC, 1 << AT91C_ID_VBUS);
   \   00000012   0421               MOVS     R1,#+4
   \   00000014   1248               LDR      R0,??TestInit_0+0x8  ;; 0xfffffc00
   \   00000016   ........           BL       AT91F_PMC_EnablePeriphClock
   1882              AT91F_PIO_CfgPullup(AT91C_PIO_VBUS, ~AT91C_VBUS);
   \   0000001A   0221               MOVS     R1,#+2
   \   0000001C   C943               MVNS     R1,R1            ;; #-3
   \   0000001E   2000               MOVS     R0,R4
   \   00000020   ........           BL       AT91F_PIO_CfgPullup
   1883              AT91F_PIO_CfgInput(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000024   0221               MOVS     R1,#+2
   \   00000026   2000               MOVS     R0,R4
   \   00000028   ........           BL       AT91F_PIO_CfgInput
   1884          
   1885              // Configure and enable the Vbus detection interrupt
   1886              AT91F_AIC_ConfigureIt(AT91C_BASE_AIC,
   1887                                    AT91C_ID_VBUS,
   1888                                    5, //AT91C_AIC_PRIOR_LOWEST,
   1889                                    0,//AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL,
   1890                                    ISR_VBus);
   \   0000002C   0D4D               LDR      R5,??TestInit_0+0xC  ;; 0xfffff000
   \   0000002E   82B0               SUB      SP,SP,#+8
   \   00000030   0D48               LDR      R0,??TestInit_0+0x10  ;; ISR_VBus
   \   00000032   0090               STR      R0,[SP, #+0]
   \   00000034   0023               MOVS     R3,#+0
   \   00000036   0522               MOVS     R2,#+5
   \   00000038   0221               MOVS     R1,#+2
   \   0000003A   2800               MOVS     R0,R5
   \   0000003C   ........           BL       AT91F_AIC_ConfigureIt
   \   00000040   02B0               ADD      SP,SP,#+8
   1891          
   1892              AT91F_PIO_InterruptEnable(AT91C_PIO_VBUS, AT91C_VBUS);
   \   00000042   0221               MOVS     R1,#+2
   \   00000044   2000               MOVS     R0,R4
   \   00000046   ........           BL       AT91F_PIO_InterruptEnable
   1893              AT91F_AIC_EnableIt(AT91C_BASE_AIC, AT91C_ID_VBUS);
   \   0000004A   0221               MOVS     R1,#+2
   \   0000004C   2800               MOVS     R0,R5
   \   0000004E   ........           BL       AT91F_AIC_EnableIt
   1894          }
   \   00000052   38BC               POP      {R3-R5}
   \   00000054   01BC               POP      {R0}
   \   00000056   0047               BX       R0               ;; return
   \                     ??TestInit_0:
   \   00000058   00F4FFFF           DC32     0xfffff400
   \   0000005C   60F4FFFF           DC32     0xfffff460
   \   00000060   00FCFFFF           DC32     0xfffffc00
   \   00000064   00F0FFFF           DC32     0xfffff000
   \   00000068   ........           DC32     ISR_VBus
   1895          
   1896          
   1897          
   1898          
   1899          
   1900          
   1901          //------------------------------------------------------------------------------
   1902          //!          Main
   1903          //------------------------------------------------------------------------------
   1904          
   1905          //char ekran_tab[8][128]; 
   1906          

   \                                 In section .bss, align 4
   1907          char string[25];
   \                     string:
   \   00000000                      DS8 28
   1908          

   \                                 In section Debug.txt, align 4, keep-with-next
   1909          void watchdogEnable(int millis)
   1910          {
   \                     watchdogEnable:
   \   00000000   01B5               PUSH     {R0,LR}
   1911            int period = (millis * 256) / 1000;
   \   00000002   0002               LSLS     R0,R0,#+8
   \   00000004   FA21               MOVS     R1,#+250
   \   00000006   8900               LSLS     R1,R1,#+2        ;; #+1000
   \   00000008   ........           BL       __aeabi_idivmod
   1912            AT91C_BASE_WDTC->WDTC_WDMR =  AT91C_WDTC_WDRSTEN |        // enable reset on timeout
   1913                                          AT91C_WDTC_WDDBGHLT |       // respect debug mode
   1914                                          AT91C_WDTC_WDIDLEHLT |      // respect idle mode
   1915                                          ((period << 16 ) & AT91C_WDTC_WDD) | // delta is as wide as the period, so we can restart anytime
   1916                                          (period & AT91C_WDTC_WDV);  // set the period
   \   0000000C   0649               LDR      R1,??watchdogEnable_0  ;; 0xfffffd44
   \   0000000E   0204               LSLS     R2,R0,#+16
   \   00000010   064B               LDR      R3,??watchdogEnable_0+0x4  ;; 0xfff0000
   \   00000012   1340               ANDS     R3,R3,R2
   \   00000014   0005               LSLS     R0,R0,#+20
   \   00000016   000D               LSRS     R0,R0,#+20
   \   00000018   1843               ORRS     R0,R0,R3
   \   0000001A   054A               LDR      R2,??watchdogEnable_0+0x8  ;; 0x30002000
   \   0000001C   0243               ORRS     R2,R2,R0
   \   0000001E   0A60               STR      R2,[R1, #+0]
   1917          }
   \   00000020   08BC               POP      {R3}
   \   00000022   01BC               POP      {R0}
   \   00000024   0047               BX       R0               ;; return
   \   00000026   C046               Nop      
   \                     ??watchdogEnable_0:
   \   00000028   44FDFFFF           DC32     0xfffffd44
   \   0000002C   0000FF0F           DC32     0xfff0000
   \   00000030   00200030           DC32     0x30002000

   \                                 In section .data, align 8
   \                     NET:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000010   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000A0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000B0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000C0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000D0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000E0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   000000F0   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000100   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000110   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000120   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000130   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000140   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000150   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000160   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000170   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000180   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     g_NeedPass:
   \   00000190   00                 DC8 0
   \   00000191   000000             DC8 0, 0, 0
   \                     g_Password_1:
   \   00000194   3131313100         DC8 "1111"
   \   00000199   000000             DC8 0, 0, 0
   \   0000019C   00000000           DC8 0, 0, 0, 0
   \                     g_NextTimeProgram:
   \   000001A0   000000000000       DC32 0, 0
   \              0000        
   \                     pAT91C_IFLASH_MEM:
   \   000001A8   00001300           DC32 130000H
   1918          
   1919          
   1920          
   1921          
   1922          
   1923          
   1924          
   1925          
   1926          
   1927          
   1928          #define WATCHDOG_KEY (0xA5 << 24)
   1929          
   1930          char TimeCompil[]= __TIME__;
   1931          char DateCompil[]= __DATE__;
   1932          
   1933          
   1934          
   1935          
   1936          #ifdef _LIVE_RJESTR 
   1937          int LIVE_TAB_IDX=0;  
   1938          unsigned short LIVE_TAB[LIVE_TAB_SIZE];  //   | A-Odczyt, B-potwierdzenie odczytu, C-Zapis F-flaga priorytetu | Nr wêz³a |  wartoœæ | | 
   1939          #endif
   1940             
   1941          
   1942          AT91PS_MEM FLASH;  
   \                     FLASH:
   \   000001AC   00000000           DC8 0, 0, 0, 0

   \                                 In section .data, align 4
   \                     g_Password_2:
   \   00000000   3232323200         DC8 "2222"
   \   00000005   000000             DC8 0, 0, 0

   \                                 In section .data, align 1
   \                     AdressModbus:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 1
   \                     g_Restart_Program:
   \   00000000   01                 DC8 1

   \                                 In section .data, align 8
   \                     AlarmScreenAction:
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \                     out:
   \   00000010   010101010101       DC8 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0
   \              010101010000
   \   0000001C   00000000           DC8 0, 0, 0, 0
   \   00000020   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000030   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000040   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000050   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000060   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000070   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000080   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    
   \   00000090   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000000000
   \              00000000    

   \                                 In section .data, align 4
   \                     pEndpoints:
   \   00000000   000000000000       DC32 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              0000        
   \   00000020   01000000           DC8 1, 0, 0, 0
   \   00000024   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000048   02000000           DC8 2, 0, 0, 0
   \   0000004C   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000070   02000000           DC8 2, 0, 0, 0
   \   00000074   000000000000       DC32 0, 0H, 0, 0, 0, 0H, 0H, 0, 0
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \              000000000000
   \   00000098   01000000           DC8 1, 0, 0, 0
   \   0000009C   00000000           DC32 0

   \                                 In section .data, align 4
   \                     tProgramTabSize:
   \   00000000   70C60000           DC32 50800

   \                                 In section .data, align 4
   \                     stop:
   \   00000000   D0070000           DC32 2000

   \                                 In section .data, align 4
   \                     X_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_up_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     X_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     Y_down_old:
   \   00000000   FFFFFFFF           DC32 -1

   \                                 In section .data, align 4
   \                     TimeCompil:
   \   00000000   32313A35303A       DC8 "21:50:37"
   \              333700      
   \   00000009   000000             DC8 0, 0, 0

   \                                 In section .data, align 4
   \                     DateCompil:
   \   00000000   4A756C202034       DC8 "Jul  4 2012"
   \              203230313200
   1943          

   \                                 In section Debug.txt, align 4, keep-with-next
   1944          void main()
   1945          {
   \                     main:
   \   00000000   F7B5               PUSH     {R0-R2,R4-R7,LR}
   \   00000002   BB48               LDR      R0,??main_0      ;; NET + 400
   \   00000004   0090               STR      R0,[SP, #+0]
   \   00000006   9821               MOVS     R1,#+152
   \   00000008   4903               LSLS     R1,R1,#+13       ;; #+1245184
   \   0000000A   C161               STR      R1,[R0, #+28]
   1946              FLASH=AT91C_IFLASH_MEM;  
   1947            
   1948              LCD_INIT();
   \   0000000C   ........           BL       AT91F_LCD_Init
   1949              Init_LCD_TS();           //inicjalizacja Touchpanel`a
   \   00000010   ........           BL       Init_LCD_TS
   1950              CheckLCD();
   \   00000014   ........           BL       CheckLCD
   1951              
   1952              CleanCanvas(); 
   \   00000018   ........           BL       CleanCanvas
   1953              MenuPaint();    
   \   0000001C   ........           BL       MenuPaint
   1954              RepaintLCD();
   \   00000020   ........           BL       RepaintLCD
   1955              RepaintLCD();     
   \   00000024   ........           BL       RepaintLCD
   \   00000028   B24C               LDR      R4,??main_0+0x4  ;; RF_Status
   \   0000002A   0120               MOVS     R0,#+1
   \   0000002C   2070               STRB     R0,[R4, #+0]
   1956            
   1957              RF_Status.Init=1;
   1958              
   1959              
   1960              AT91F_PIO_CfgOutput(AT91C_BASE_PIOA, SpeakerPin);
                                                          ^
Warning[Pe063]: shift count is too large
   \   0000002E   0021               MOVS     R1,#+0
   \   00000030   B148               LDR      R0,??main_0+0x8  ;; 0xfffff400
   \   00000032   ........           BL       AT91F_PIO_CfgOutput
   \   00000036   B148               LDR      R0,??main_0+0xC  ;; 0xfffff434
   \   00000038   0021               MOVS     R1,#+0
   \   0000003A   0160               STR      R1,[R0, #+0]
   1961              AT91C_BASE_PIOA->PIO_CODR =SpeakerPin;
                                                ^
Warning[Pe063]: shift count is too large
   1962              //uruchomienie Watchdog`a na 50s 
   1963              //watchdogEnable(50000);  
   1964              //AT91F_WDTRestart(AT91C_BASE_WDTC);
   1965              //AT91C_BASE_WDTC->WDTC_WDMR=(unsigned int) AT91C_WDTC_WDV|AT91C_WDTC_WDRSTEN | AT91C_WDTC_WDD|0x0<<15;
   1966          
   1967              AT91C_BASE_WDTC->WDTC_WDMR=AT91C_WDTC_WDDIS; 
   \   0000003C   B048               LDR      R0,??main_0+0x10  ;; 0xfffffd44
   \   0000003E   8021               MOVS     R1,#+128
   \   00000040   0902               LSLS     R1,R1,#+8        ;; #+32768
   \   00000042   0160               STR      R1,[R0, #+0]
   1968          
   1969             
   1970              
   1971              SpiMaster_Init();
   \   00000044   ........           BL       SpiMaster_Init
   1972              
   1973              __enable_interrupt(); 
   \   00000048   ........           BL       __iar_enable_interrupt
   1974          
   1975             InitRTC();  
   \   0000004C   ........           BL       InitRTC
   1976              GetDateTimeFromRTC(); 
   \   00000050   ........           BL       GetDateTimeFromRTC
   1977           
   1978              InitFramework();
   \   00000054   ........           BL       InitFramework
   1979          
   1980              SER_Init(&sSer, &sUsb);  // Initialize the serial driver
   \   00000058   AA4D               LDR      R5,??main_0+0x14  ;; DateTime
   \   0000005A   AB4E               LDR      R6,??main_0+0x18  ;; sUsb
   \   0000005C   3100               MOVS     R1,R6
   \   0000005E   2800               MOVS     R0,R5
   \   00000060   7030               ADDS     R0,R0,#+112
   \   00000062   ........           BL       SER_Init
   1981          
   1982              InitFlash();  
   \   00000066   ........           BL       InitFlash
   1983            
   1984              
   1985              Init_LCD_Light_PWM();
                     ^
Warning[Pe223]: function "Init_LCD_Light_PWM" declared implicitly
   \   0000006A   ........           BL       Init_LCD_Light_PWM
   1986              
   1987              __enable_interrupt();    
   \   0000006E   ........           BL       __iar_enable_interrupt
   \   00000072   A648               LDR      R0,??main_0+0x1C  ;; gProg
   1988           
   1989            
   1990                
   1991              
   1992              //******************************************************************************
   1993              //Ustawienia dla pierwszego uruchomienia starownika ****************************
   1994                if (pAT91C_IFLASH_MEM->Config.FerstRun!=0x0A)
   1995                {
   1996                  char WriteTmp;
                              ^
Warning[Pe177]: variable "WriteTmp" was declared but never referenced
   1997                 //zapis ustawieñ do flasha 
   1998                  /*
   1999                 unsigned int Save = __get_interrupt_state();            
   2000                 __disable_interrupt();
   2001                     //uruchomiono sterownik  
   2002                     WriteTmp=0xA;    FlashWrite((char*)&(AT91C_IFLASH_MEM->Config.FerstRun),&WriteTmp,1);
   2003                 __set_interrupt_state(Save);
   2004                  */
   2005                   //RamToFlash();
   2006                  }
   2007                
   2008               
   2009                
   2010              //Koniec ustawieñ dla pierwszego uruchomienia starownika ***********************
   2011              //******************************************************************************
   2012          
   2013              ProgramChangeExecute(&gProg); 
   \   00000074   ........           BL       ProgramChangeExecute
   2014              ThermostatsTimeChartExecute();
   \   00000078   ........           BL       ThermostatsTimeChartExecute
   2015              
   2016              
   2017           //   US0_init();                                                                //inicjalizacja USART0
   2018             
   2019          #ifdef __WIFI_MODULE    
   2020              US1_init();                                                                 //inicjalizacja USART1
   \   0000007C   ........           BL       US1_init
   2021          #endif
   2022              
   2023           //   Timer_10us_Setup();
   2024              Timer_1ms_Setup();
   \   00000080   ........           BL       Timer_1ms_Setup
   2025              Timer_10ms_Setup();
   \   00000084   ........           BL       Timer_10ms_Setup
   2026              
   2027              //Timer_1s();   
   2028                
   2029              for (int aaa=0; aaa<0xEFFFFF; aaa++)
   \   00000088   0020               MOVS     R0,#+0
   \   0000008A   A149               LDR      R1,??main_0+0x20  ;; 0xefffff
   \   0000008C   01E0               B        ??main_1
   2030                      {
   2031                        asm( "nop" );
   \                     ??main_2:
   \   0000008E   C046               nop              
   2032                      }       
   \   00000090   401C               ADDS     R0,R0,#+1
   \                     ??main_1:
   \   00000092   8842               CMP      R0,R1
   \   00000094   FBDB               BLT      ??main_2
   2033          
   2034              g_ScreenSever_On=pAT91C_IFLASH_MEM->Config.ScreenSever_On;
   \   00000096   9F48               LDR      R0,??main_0+0x24  ;; 0xd7e6
   \   00000098   0099               LDR      R1,[SP, #+0]
   \   0000009A   8969               LDR      R1,[R1, #+24]
   \   0000009C   0818               ADDS     R0,R1,R0
   \   0000009E   0179               LDRB     R1,[R0, #+4]
   \   000000A0   A973               STRB     R1,[R5, #+14]
   2035              g_ScreenSever_Time_On=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_On;
   \   000000A2   4179               LDRB     R1,[R0, #+5]
   \   000000A4   E973               STRB     R1,[R5, #+15]
   2036              g_ScreenSever_Time_Off=pAT91C_IFLASH_MEM->Config.ScreenSever_Time_Off;
   \   000000A6   8179               LDRB     R1,[R0, #+6]
   \   000000A8   2974               STRB     R1,[R5, #+16]
   2037              
   2038          
   2039          
   2040          
   2041              
   2042              
   2043           
   2044          //uruchomienie RF
   2045              
   2046              //odczyt kanalu z flasha ------------------------------ 
   2047              
   2048              SlaveMode=pAT91C_IFLASH_MEM->Config.SlaveMode;
   \   000000AA   8178               LDRB     R1,[R0, #+2]
   \   000000AC   2975               STRB     R1,[R5, #+20]
   2049              RF_Status.Ch=pAT91C_IFLASH_MEM->Config.RF_channel;
   \   000000AE   0078               LDRB     R0,[R0, #+0]
   \   000000B0   6073               STRB     R0,[R4, #+13]
   2050              if (RF_Status.Ch==0) RF_Status.Ch=1;
   \   000000B2   0028               CMP      R0,#+0
   \   000000B4   01D1               BNE      ??main_3
   \   000000B6   0120               MOVS     R0,#+1
   \   000000B8   6073               STRB     R0,[R4, #+13]
   2051              
   2052              
   2053              InitPioInterrupt();
                     ^
Warning[Pe223]: function "InitPioInterrupt" declared implicitly
   \                     ??main_3:
   \   000000BA   ........           BL       InitPioInterrupt
   2054              
   2055              RF_Init();
   \   000000BE   ........           BL       RF_Init
   2056              
   2057              
   2058              char InitRF=1;
   \   000000C2   0127               MOVS     R7,#+1
   \   000000C4   03E0               B        ??main_4
   2059              
   2060              while (InitRF==1)
   2061              { 
   2062                  InitRF=RF_Status.Init;
   \                     ??main_5:
   \   000000C6   2778               LDRB     R7,[R4, #+0]
   2063                  Delay(0x1);
   \   000000C8   0120               MOVS     R0,#+1
   \   000000CA   ........           BL       Delay
   2064              };
   \                     ??main_4:
   \   000000CE   012F               CMP      R7,#+1
   \   000000D0   F9D0               BEQ      ??main_5
   2065          
   2066              
   2067          
   2068              //sprawdzenie kana³u transmisji radiowej
   2069              if (!SlaveMode) //je¿eli master
   \   000000D2   287D               LDRB     R0,[R5, #+20]
   \   000000D4   0028               CMP      R0,#+0
   \   000000D6   4DD0               BEQ      ??main_6
   2070              {
   2071                while (RF_CheckChannel())                                                                                            
   2072                {
   2073                  
   2074                  if (RF_Status.Ch<RF_ChannelQuanti-1) {RF_Status.Ch++;} else {RF_Status.Ch=1;}
   2075                  SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF); 
                         ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   2076                }  
   2077                RF_Status.MasterMode=1;
   2078              }else{
   2079               RF_Status.Ch=0;
   \   000000D8   0020               MOVS     R0,#+0
   \   000000DA   6073               STRB     R0,[R4, #+13]
   2080                SPI_SendWord(0xA000 | RF_SetFreqReg(RF_Status.Ch),Cs_RF);  
                       ^
Warning[Pe223]: function "SPI_SendWord" declared implicitly
   \   000000DC   0221               MOVS     R1,#+2
   \   000000DE   8E48               LDR      R0,??main_0+0x28  ;; 0xa040
   \   000000E0   ........           BL       SPI_SendWord
   2081                RF_Status.MasterMode=0;            
   \   000000E4   0020               MOVS     R0,#+0
   \   000000E6   2073               STRB     R0,[R4, #+12]
   2082              }
   2083          
   2084              RF_Status.AllReady=1;
   \                     ??main_7:
   \   000000E8   0120               MOVS     R0,#+1
   \   000000EA   A073               STRB     R0,[R4, #+14]
   2085              
   2086              
   2087              
   2088          
   2089              
   2090              
   2091              
   2092              //odczyt has³a------------------------------------------    
   2093              if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEC)
   \   000000EC   0098               LDR      R0,[SP, #+0]
   \   000000EE   8169               LDR      R1,[R0, #+24]
   \   000000F0   8A48               LDR      R0,??main_0+0x2C  ;; 0xd7dc
   \   000000F2   0818               ADDS     R0,R1,R0
   \   000000F4   0278               LDRB     R2,[R0, #+0]
   \   000000F6   EC2A               CMP      R2,#+236
   \   000000F8   49D1               BNE      ??main_8
   2094              {//je¿eli nie wymagane has³o
   2095               g_NeedPass=0; 
   \   000000FA   0098               LDR      R0,[SP, #+0]
   \   000000FC   0022               MOVS     R2,#+0
   \   000000FE   0270               STRB     R2,[R0, #+0]
   2096               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   00000100   CA24               MOVS     R4,#+202
   \   00000102   6400               LSLS     R4,R4,#+1        ;; #+404
   \                     ??main_9:
   \   00000104   1000               MOVS     R0,R2
   \   00000106   0828               CMP      R0,#+8
   \   00000108   70D2               BCS      ??main_10
   \   0000010A   1300               MOVS     R3,R2
   \   0000010C   8448               LDR      R0,??main_0+0x30  ;; NET
   \   0000010E   C718               ADDS     R7,R0,R3
   \   00000110   8448               LDR      R0,??main_0+0x34  ;; 0xd7dd
   \   00000112   CB18               ADDS     R3,R1,R3
   \   00000114   185C               LDRB     R0,[R3, R0]
   \   00000116   3855               STRB     R0,[R7, R4]
   \   00000118   521C               ADDS     R2,R2,#+1
   \   0000011A   1206               LSLS     R2,R2,#+24
   \   0000011C   120E               LSRS     R2,R2,#+24
   \   0000011E   F1E7               B        ??main_9
   2097              }else if (pAT91C_IFLASH_MEM->Config.NeedPass1==0xEB)
   \                     ??main_11:
   \   00000120   0120               MOVS     R0,#+1
   \   00000122   6073               STRB     R0,[R4, #+13]
   \                     ??main_12:
   \   00000124   0221               MOVS     R1,#+2
   \   00000126   0F00               MOVS     R7,R1
   \   00000128   607B               LDRB     R0,[R4, #+13]
   \   0000012A   ........           BL       __aeabi_ui2d
   \   0000012E   0200               MOVS     R2,R0
   \   00000130   0B00               MOVS     R3,R1
   \   00000132   7D48               LDR      R0,??main_0+0x38  ;; 0x33333333
   \   00000134   7D49               LDR      R1,??main_0+0x3C  ;; 0x3fd33333
   \   00000136   ........           BL       __aeabi_dmul
   \   0000013A   0200               MOVS     R2,R0
   \   0000013C   0B00               MOVS     R3,R1
   \   0000013E   7C48               LDR      R0,??main_0+0x40  ;; 0x5c28f5c3
   \   00000140   7C49               LDR      R1,??main_0+0x44  ;; 0x408ae28f
   \   00000142   ........           BL       __aeabi_dadd
   \   00000146   0200               MOVS     R2,R0
   \   00000148   0B00               MOVS     R3,R1
   \   0000014A   0020               MOVS     R0,#+0
   \   0000014C   7A49               LDR      R1,??main_0+0x48  ;; 0x40690000
   \   0000014E   ........           BL       __aeabi_dmul
   \   00000152   0200               MOVS     R2,R0
   \   00000154   0B00               MOVS     R3,R1
   \   00000156   0020               MOVS     R0,#+0
   \   00000158   7849               LDR      R1,??main_0+0x4C  ;; 0xc104ff00
   \   0000015A   ........           BL       __aeabi_dadd
   \   0000015E   ........           BL       __aeabi_d2iz
   \   00000162   0100               MOVS     R1,R0
   \   00000164   0904               LSLS     R1,R1,#+16
   \   00000166   0914               ASRS     R1,R1,#+16
   \   00000168   A020               MOVS     R0,#+160
   \   0000016A   0002               LSLS     R0,R0,#+8        ;; #+40960
   \   0000016C   0843               ORRS     R0,R0,R1
   \   0000016E   3900               MOVS     R1,R7
   \   00000170   ........           BL       SPI_SendWord
   \                     ??main_6:
   \   00000174   ........           BL       RF_CheckChannel
   \   00000178   0028               CMP      R0,#+0
   \   0000017A   05D0               BEQ      ??main_13
   \   0000017C   607B               LDRB     R0,[R4, #+13]
   \   0000017E   2728               CMP      R0,#+39
   \   00000180   CED2               BCS      ??main_11
   \   00000182   401C               ADDS     R0,R0,#+1
   \   00000184   6073               STRB     R0,[R4, #+13]
   \   00000186   CDE7               B        ??main_12
   \                     ??main_13:
   \   00000188   0120               MOVS     R0,#+1
   \   0000018A   2073               STRB     R0,[R4, #+12]
   \   0000018C   ACE7               B        ??main_7
   \                     ??main_8:
   \   0000018E   0078               LDRB     R0,[R0, #+0]
   \   00000190   EB28               CMP      R0,#+235
   \   00000192   13D1               BNE      ??main_14
   2098              {//je¿eli nie wymagane has³o
   2099               g_NeedPass=1; 
   \   00000194   0098               LDR      R0,[SP, #+0]
   \   00000196   0122               MOVS     R2,#+1
   \   00000198   0270               STRB     R2,[R0, #+0]
   2100               for (char i=0; i<8; i++) g_Password_1[i]=pAT91C_IFLASH_MEM->Config.Pass1[i];
   \   0000019A   0022               MOVS     R2,#+0
   \   0000019C   CA24               MOVS     R4,#+202
   \   0000019E   6400               LSLS     R4,R4,#+1        ;; #+404
   \                     ??main_15:
   \   000001A0   1000               MOVS     R0,R2
   \   000001A2   0828               CMP      R0,#+8
   \   000001A4   22D2               BCS      ??main_10
   \   000001A6   1300               MOVS     R3,R2
   \   000001A8   5D48               LDR      R0,??main_0+0x30  ;; NET
   \   000001AA   C718               ADDS     R7,R0,R3
   \   000001AC   5D48               LDR      R0,??main_0+0x34  ;; 0xd7dd
   \   000001AE   CB18               ADDS     R3,R1,R3
   \   000001B0   185C               LDRB     R0,[R3, R0]
   \   000001B2   3855               STRB     R0,[R7, R4]
   \   000001B4   521C               ADDS     R2,R2,#+1
   \   000001B6   1206               LSLS     R2,R2,#+24
   \   000001B8   120E               LSRS     R2,R2,#+24
   \   000001BA   F1E7               B        ??main_15
   2101              }else
   2102              {//jezeli nie zdefiniowano  - zdefiniuj i zapisz has³o domyœlne i ustaw jako nie wymagane
   2103               
   2104               //zapis has³a do flash
   2105               unsigned int Save = __get_interrupt_state();  
   \                     ??main_14:
   \   000001BC   ........           BL       __iar_get_interrupt_state
   \   000001C0   0400               MOVS     R4,R0
   2106               __disable_interrupt();
   \   000001C2   ........           BL       __iar_disable_interrupt
   2107               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])),0,g_Password_1,9);
   2108               
   2109                FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.Pass1[0])), g_Password_1, 9);
                       ^
Warning[Pe223]: function "FlashWrite" declared implicitly
   \   000001C6   0922               MOVS     R2,#+9
   \   000001C8   5D49               LDR      R1,??main_0+0x50  ;; NET + 404
   \   000001CA   5E48               LDR      R0,??main_0+0x54  ;; 0x13d7dd
   \   000001CC   ........           BL       FlashWrite
   2110               char NeedPassFlag=0xEC;
   \   000001D0   6846               MOV      R0,SP
   \   000001D2   EC21               MOVS     R1,#+236
   \   000001D4   0171               STRB     R1,[R0, #+4]
   2111               g_NeedPass=0; 
   \   000001D6   0098               LDR      R0,[SP, #+0]
   \   000001D8   0021               MOVS     R1,#+0
   \   000001DA   0170               STRB     R1,[R0, #+0]
   2112               //at91flashWrite((int*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)),0,&NeedPassFlag,1);
   2113               FlashWrite((char*)(&(AT91C_IFLASH_MEM->Config.NeedPass1)), &NeedPassFlag, 1);
   \   000001DC   0122               MOVS     R2,#+1
   \   000001DE   01A9               ADD      R1,SP,#+4
   \   000001E0   5948               LDR      R0,??main_0+0x58  ;; 0x13d7dc
   \   000001E2   ........           BL       FlashWrite
   2114               __set_interrupt_state(Save);
   \   000001E6   2000               MOVS     R0,R4
   \   000001E8   ........           BL       __iar_set_interrupt_state
   2115               //koniec zapisu do flash
   2116              }
   2117              //koniec odczytu has³a ---------------------------------------- 
   2118          
   2119          
   2120              
   2121              USB_Connect(&sUsb);    
   \                     ??main_10:
   \   000001EC   3000               MOVS     R0,R6
   \   000001EE   ........           BL       USB_Connect
   2122             __enable_interrupt();   
   \   000001F2   ........           BL       __iar_enable_interrupt
   \   000001F6   4A49               LDR      R1,??main_0+0x30  ;; NET
   \   000001F8   5448               LDR      R0,??main_0+0x5C  ;; 0xfffc4000
   2123             
   2124             
   2125           
   2126          #ifdef __WIFI_MODULE   
   2127             InitWizFi(AT91C_BASE_US1, &NET);
   \   000001FA   ........           BL       InitWizFi
   \   000001FE   47E0               B        ??main_16
   2128          #endif
   2129          
   2130             
   2131             
   2132              /*
   2133             //ustawienie wys³ania stanów  do wszystkich wêz³ów po restarcie
   2134              for (char i=0; i<NumberNeurons; i++)
   2135              {
   2136                MainStage.SendStageChange[i]=ChangeStageFlag; 
   2137              }
   2138             */
   2139             
   2140             
   2141              while (1) 
   2142              {
   2143                  AT91F_WDTRestart(AT91C_BASE_WDTC);
   2144                  
   2145                  
   2146                  if (ForwardUSB2Serialferst==1)
   2147                  {
   2148                      // Start USB->Serial forward mechanism
   2149                      ForwardUSB2Serial(0, 0, 0, 0);
   2150                      ForwardUSB2Serialferst=2;
   2151                  }
   2152                
   2153                  
   2154                   
   2155                  if ((g_NextTimeProgram<=g_counter) || (g_NextTimeProgram>g_counter+ProgramPeriod))
   2156                   {
   2157                    
   2158                     
   2159                       char WaitingRF_WrTask=0;
   2160                       if (g_NextTimeProgram<g_counter+1000)    //blokowanie wykonania programu jezeli istnieje oczekuj¹ce ¿¹danie wys³ania stanu do któregokolwiek wêz³a. Blokowanie nie mo¿e przekroczyæ 1s. 
   2161                       {
   2162                           char Nd=1;
   2163                           while ((Nd<NumberNeurons) && (WaitingRF_WrTask==0))
   2164                            {
   2165                                if ((MainStage.SendStageChange[Nd]>0))    
   \                     ??main_17:
   \   00000200   5349               LDR      R1,??main_0+0x60  ;; 0x619
   \   00000202   0300               MOVS     R3,R0
   \   00000204   534C               LDR      R4,??main_0+0x64  ;; MainStage
   \   00000206   E318               ADDS     R3,R4,R3
   \   00000208   595C               LDRB     R1,[R3, R1]
   \   0000020A   0029               CMP      R1,#+0
   \   0000020C   00D0               BEQ      ??main_18
   2166                                {
   2167                                    WaitingRF_WrTask=1;
   \   0000020E   0122               MOVS     R2,#+1
   2168                                }
   2169                                Nd++;  
   \                     ??main_18:
   \   00000210   401C               ADDS     R0,R0,#+1
   \   00000212   0006               LSLS     R0,R0,#+24
   \   00000214   000E               LSRS     R0,R0,#+24
   2170                            } 
   \                     ??main_19:
   \   00000216   0100               MOVS     R1,R0
   \   00000218   2329               CMP      R1,#+35
   \   0000021A   01D2               BCS      ??main_20
   \   0000021C   1100               MOVS     R1,R2
   \   0000021E   EFD0               BEQ      ??main_17
   2171                       }
   2172          
   2173                      if (WaitingRF_WrTask==0)
   \                     ??main_20:
   \   00000220   002A               CMP      R2,#+0
   \   00000222   0AD1               BNE      ??main_21
   2174                      {
   2175                        g_NextTimeProgram=g_counter+ProgramPeriod;
   \   00000224   009A               LDR      R2,[SP, #+0]
   \   00000226   1032               ADDS     R2,R2,#+16
   \   00000228   AF20               MOVS     R0,#+175
   \   0000022A   4000               LSLS     R0,R0,#+1        ;; #+350
   \   0000022C   0021               MOVS     R1,#+0
   \   0000022E   8019               ADDS     R0,R0,R6
   \   00000230   7941               ADCS     R1,R1,R7
   \   00000232   03C2               STM      R2!,{R0,R1}
   2176                        Program(&gProg);
   \   00000234   3548               LDR      R0,??main_0+0x1C  ;; gProg
   \   00000236   ........           BL       Program
   2177                      }
   2178                      
   2179                      
   2180                      
   2181                      
   2182                   }
   2183                   
   2184                  
   2185                  if ((g_counter>4000) && (MenuLevel==0)) { MenuLevel=1;   MenuPaint();}
   \                     ??main_21:
   \   0000023A   2800               MOVS     R0,R5
   \   0000023C   3830               ADDS     R0,R0,#+56
   \   0000023E   03C8               LDM      R0!,{R0,R1}
   \   00000240   454A               LDR      R2,??main_0+0x68  ;; 0xfa1
   \   00000242   0023               MOVS     R3,#+0
   \   00000244   9942               CMP      R1,R3
   \   00000246   0AD3               BCC      ??main_22
   \   00000248   01D8               BHI      ??main_23
   \   0000024A   9042               CMP      R0,R2
   \   0000024C   07D3               BCC      ??main_22
   \                     ??main_23:
   \   0000024E   4348               LDR      R0,??main_0+0x6C  ;; MenuLevel
   \   00000250   0168               LDR      R1,[R0, #+0]
   \   00000252   0029               CMP      R1,#+0
   \   00000254   03D1               BNE      ??main_22
   \   00000256   0121               MOVS     R1,#+1
   \   00000258   0160               STR      R1,[R0, #+0]
   \   0000025A   ........           BL       MenuPaint
   2186                  
   2187          
   2188                    
   2189          #ifdef __WIFI_MODULE     
   2190                  if (NET.WiFi.On)
   \                     ??main_22:
   \   0000025E   4048               LDR      R0,??main_0+0x70  ;; NET + 72
   \   00000260   0078               LDRB     R0,[R0, #+0]
   \   00000262   0028               CMP      R0,#+0
   \   00000264   14D0               BEQ      ??main_16
   2191                  {
   2192                      //wifi-------------------------------------------------------------------
   2193                      if ((g_counter>6000) /*&&  (g_counter%200==0)*/)
   \   00000266   2800               MOVS     R0,R5
   \   00000268   3830               ADDS     R0,R0,#+56
   \   0000026A   03C8               LDM      R0!,{R0,R1}
   \   0000026C   3D4A               LDR      R2,??main_0+0x74  ;; 0x1771
   \   0000026E   0023               MOVS     R3,#+0
   \   00000270   9942               CMP      R1,R3
   \   00000272   07D3               BCC      ??main_24
   \   00000274   01D8               BHI      ??main_25
   \   00000276   9042               CMP      R0,R2
   \   00000278   04D3               BCC      ??main_24
   2194                      {
   2195                        CheckVarChangeHTTP(Buff_TX_1 ,AT91C_BASE_US1, &NET);
   \                     ??main_25:
   \   0000027A   294A               LDR      R2,??main_0+0x30  ;; NET
   \   0000027C   3349               LDR      R1,??main_0+0x5C  ;; 0xfffc4000
   \   0000027E   3A48               LDR      R0,??main_0+0x78  ;; Buff_TX_1
   \   00000280   ........           BL       CheckVarChangeHTTP
   2196                      }
   2197                  
   2198                      WiFi(US1_Buffer, Buff_TX_1 ,AT91C_BASE_US1, &NET);
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

  static void CBK_Suspend(const S_usb *pUsb)
              ^
"D:\Zeuron\Projekty\S300\S300-program v0.6 - 18.05.2012\Framework\main.c",501  Warning[Pe177]: 
          function "CBK_Suspend" was declared but never referenced
   \                     ??main_24:
   \   00000284   264B               LDR      R3,??main_0+0x30  ;; NET
   \   00000286   314A               LDR      R2,??main_0+0x5C  ;; 0xfffc4000
   \   00000288   3749               LDR      R1,??main_0+0x78  ;; Buff_TX_1
   \   0000028A   3848               LDR      R0,??main_0+0x7C  ;; US1_Buffer
   \   0000028C   ........           BL       WiFi
   2199                  }
   \                     ??main_16:
   \   00000290   3748               LDR      R0,??main_0+0x80  ;; 0xfffffd40
   \   00000292   ........           BL       AT91F_WDTRestart
   \   00000296   687D               LDRB     R0,[R5, #+21]
   \   00000298   0128               CMP      R0,#+1
   \   0000029A   07D1               BNE      ??main_26
   \   0000029C   0023               MOVS     R3,#+0
   \   0000029E   1A00               MOVS     R2,R3
   \   000002A0   1100               MOVS     R1,R2
   \   000002A2   0800               MOVS     R0,R1
   \   000002A4   ........           BL       ForwardUSB2Serial
   \   000002A8   0220               MOVS     R0,#+2
   \   000002AA   6875               STRB     R0,[R5, #+21]
   \                     ??main_26:
   \   000002AC   0098               LDR      R0,[SP, #+0]
   \   000002AE   1030               ADDS     R0,R0,#+16
   \   000002B0   03C8               LDM      R0!,{R0,R1}
   \   000002B2   2A00               MOVS     R2,R5
   \   000002B4   3832               ADDS     R2,R2,#+56
   \   000002B6   C0CA               LDM      R2!,{R6,R7}
   \   000002B8   8F42               CMP      R7,R1
   \   000002BA   0CD8               BHI      ??main_27
   \   000002BC   01D3               BCC      ??main_28
   \   000002BE   8642               CMP      R6,R0
   \   000002C0   09D2               BCS      ??main_27
   \                     ??main_28:
   \   000002C2   AF22               MOVS     R2,#+175
   \   000002C4   5200               LSLS     R2,R2,#+1        ;; #+350
   \   000002C6   0023               MOVS     R3,#+0
   \   000002C8   9219               ADDS     R2,R2,R6
   \   000002CA   7B41               ADCS     R3,R3,R7
   \   000002CC   8B42               CMP      R3,R1
   \   000002CE   B4D8               BHI      ??main_21
   \   000002D0   01D3               BCC      ??main_27
   \   000002D2   8242               CMP      R2,R0
   \   000002D4   B1D2               BCS      ??main_21
   \                     ??main_27:
   \   000002D6   0022               MOVS     R2,#+0
   \   000002D8   FA23               MOVS     R3,#+250
   \   000002DA   9B00               LSLS     R3,R3,#+2        ;; #+1000
   \   000002DC   1400               MOVS     R4,R2
   \   000002DE   9B19               ADDS     R3,R3,R6
   \   000002E0   7C41               ADCS     R4,R4,R7
   \   000002E2   A142               CMP      R1,R4
   \   000002E4   9CD8               BHI      ??main_20
   \   000002E6   01D3               BCC      ??main_29
   \   000002E8   9842               CMP      R0,R3
   \   000002EA   99D2               BCS      ??main_20
   \                     ??main_29:
   \   000002EC   0120               MOVS     R0,#+1
   \   000002EE   92E7               B        ??main_19
   \                     ??main_0:
   \   000002F0   ........           DC32     NET + 400
   \   000002F4   ........           DC32     RF_Status
   \   000002F8   00F4FFFF           DC32     0xfffff400
   \   000002FC   34F4FFFF           DC32     0xfffff434
   \   00000300   44FDFFFF           DC32     0xfffffd44
   \   00000304   ........           DC32     DateTime
   \   00000308   ........           DC32     sUsb
   \   0000030C   ........           DC32     gProg
   \   00000310   FFFFEF00           DC32     0xefffff
   \   00000314   E6D70000           DC32     0xd7e6
   \   00000318   40A00000           DC32     0xa040
   \   0000031C   DCD70000           DC32     0xd7dc
   \   00000320   ........           DC32     NET
   \   00000324   DDD70000           DC32     0xd7dd
   \   00000328   33333333           DC32     0x33333333
   \   0000032C   3333D33F           DC32     0x3fd33333
   \   00000330   C3F5285C           DC32     0x5c28f5c3
   \   00000334   8FE28A40           DC32     0x408ae28f
   \   00000338   00006940           DC32     0x40690000
   \   0000033C   00FF04C1           DC32     0xc104ff00
   \   00000340   ........           DC32     NET + 404
   \   00000344   DDD71300           DC32     0x13d7dd
   \   00000348   DCD71300           DC32     0x13d7dc
   \   0000034C   0040FCFF           DC32     0xfffc4000
   \   00000350   19060000           DC32     0x619
   \   00000354   ........           DC32     MainStage
   \   00000358   A10F0000           DC32     0xfa1
   \   0000035C   ........           DC32     MenuLevel
   \   00000360   ........           DC32     NET + 72
   \   00000364   71170000           DC32     0x1771
   \   00000368   ........           DC32     Buff_TX_1
   \   0000036C   ........           DC32     US1_Buffer
   \   00000370   40FDFFFF           DC32     0xfffffd40
   2200                  //CheckConnectionStatus();
   2201          #endif  
   2202            
   2203                     
   2204              }
   2205             
   2206              
   2207          }

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   ........           DC32     sUsb

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   3CF4FFFF           DC32     0xfffff43c

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   ........           DC32     MenuLevel

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   00F0FFFF           DC32     0xfffff000

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   00F4FFFF           DC32     0xfffff400

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   60F4FFFF           DC32     0xfffff460

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable11:
   \   00000000   40FDFFFF           DC32     0xfffffd40

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   ........           DC32     DateTime

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable13:
   \   00000000   ........           DC32     gProg

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable14:
   \   00000000   70C60000           DC32     0xc670

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable15:
   \   00000000   00011300           DC32     0x130100

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable16:
   \   00000000   26BC0000           DC32     0xbc26

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable17:
   \   00000000   30BC0000           DC32     0xbc30

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable18:
   \   00000000   ........           DC32     MainStage

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable19:
   \   00000000   AA8AFFFF           DC32     0xffff8aaa

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable20:
   \   00000000   10FCFFFF           DC32     0xfffffc10

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable21:
   \   00000000   C000FAFF           DC32     0xfffa00c0

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable22:
   \   00000000   C400FAFF           DC32     0xfffa00c4

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable23:
   \   00000000   01C00C00           DC32     0xcc001

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable24:
   \   00000000   20F1FFFF           DC32     0xfffff120

   \                                 In section Debug.txt, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   28F1FFFF           DC32     0xfffff128

   \                                 In section .rodata, align 4
   \                     `?<Constant "Wyladowana">`:
   \   00000000   57796C61646F       DC8 "Wyladowana"
   \              77616E6100  
   \   0000000B   00                 DC8 0
   \   0000000C   626174657269       DC8 "bateria"
   \              6100        
   \   00000014   537072617764       DC8 "Sprawdz"
   \              7A00        
   \   0000001C   6C6973746520       DC8 "liste wezlow"
   \              77657A6C6F77
   \              00          
   \   00000029   000000             DC8 0, 0, 0

   \                                 In section .rodata, align 4
   \   00000000   20202000           DC8 "   "
   2208          

   Maximum stack usage in bytes:

     Function                     .cstack
     --------                     -------
     AT91F_AIC_ConfigureIt            24
     AT91F_AIC_EnableIt                0
     AT91F_LCD_Init                    8
     AT91F_PIO_CfgInput                0
     AT91F_PIO_CfgOutput               0
     AT91F_PIO_CfgPullup               0
     AT91F_PIO_GetInterruptStatus      0
     AT91F_PIO_InterruptEnable         0
     AT91F_PMC_EnablePeriphClock       0
     AT91F_WDTRestart                  0
     AlarmExecute                     24
     CBK_Init                         24
     CBK_NewRequest                    8
     CBK_Resume                        8
     Delay                             8
     ForwardUSB2Serial                24
     ISR_Driver                        8
     ISR_VBus                         24
     InitFramework                    24
     RamToFlash                       24
     TestHendel                        8
     TestInit                         24
     ThermostatsExecute               24
     ThermostatsTimeChartExecute      24
     Timer_10ms                       16
     Timer_10ms_Setup                  0
     Timer_10us                        0
     Timer_10us_Setup                  0
     Timer_1h                          8
     Timer_1min                        8
     Timer_1ms                        16
     Timer_1ms_Setup                   0
     Timer_1s                         40
     TimetableExecute                 32
     USB_Attach                        8
     USB_Connect                       8
     USB_Disconnect                    8
     USB_GetDriverID                   0
     USB_GetDriverInterface            0
     USB_GetState                      0
     USB_Handler                       8
     main                             32
     watchdogEnable                    8


   Section sizes:

     Function/Label               Bytes
     --------------               -----
     identyfikacja                   8
     system                          8
     AT91F_AIC_ConfigureIt          44
     AT91F_AIC_EnableIt             12
     AT91F_PIO_CfgOutput             6
     AT91F_PIO_CfgInput              6
     AT91F_PIO_CfgPullup             8
     AT91F_PIO_InterruptEnable       4
     AT91F_PIO_GetInterruptStatus    4
     AT91F_PMC_EnablePeriphClock     4
     AT91F_WDTRestart               12
     AT91F_LCD_Init                184
     USB_GetDriverInterface          6
     USB_GetDriverID                 6
     USB_Handler                    18
     USB_Attach                     18
     USB_Connect                    18
     USB_Disconnect                 18
     USB_GetState                   10
     APC                             1
     g_czas_petli                    1
     komunikacja_ok                  4
     rej_prog                       40
     LifeCouter                      4
     LifeCouterMax                   4
     USB_busy                        1
     advY                            4
     advX                            4
     g_leng                          4
     g_level                         1
     g_Message                       4
     g_info                          4
     LightLCD_OFF_Counter            1
     LightLCD_OFF_Counter2           1
     LightLCD_OFF_Curent             1
     tmp_i                           1
     licznik                         4
     licznik2                        4
     licznik3                        4
     memory                          4
     sss                             4
     int1                            4
     sSetup                          8
     dState                          4
     sCallbacks                     24
     sUsb                           24
     ISR_Driver                     14
     ISR_VBus                      160
     CBK_Init                       80
     CBK_Resume                     12
     CBK_NewRequest                 20
     ForwardUSB2Serial              96
     Delay                          18
     memory_read                     4
     InitFramework                 232
     Timer_10us                     12
     Timer_10us_Setup              104
     TimetableExecute              416
     Out                            32
     ThermostatsTimeChartExecute   212
     ThermostatsExecute            356
     Hysteresis                      8
     AlarmExecute                  508
     Timer_1h                       12
     Timer_1min                     16
     XY_Tab                         44
     display_cykl                    1
     Timer_1s                      948
     Timer_10ms                    308
     Timer_10ms_Setup              132
     Counter                         4
     US0_Counter                     4
     US1_Counter                     4
     CounterForTimer10ms             1
     Timer_1ms                     464
     DateTime                     1388
     FlashProgramReserveOfset        4
     Timer_1ms_Setup               132
     RamToFlash                    212
     testcount                       4
     TestHendel                     44
     TestInit                      108
     string                         28
     watchdogEnable                 52
     NET                           432
     g_Password_2                    8
     AdressModbus                    1
     g_Restart_Program               1
     AlarmScreenAction             160
     pEndpoints                    160
     tProgramTabSize                 4
     stop                            4
     X_up_old                        4
     Y_up_old                        4
     X_down_old                      4
     Y_down_old                      4
     TimeCompil                     12
     DateCompil                     12
     main                          884
     ??DataTable1                    4
     ??DataTable2                    4
     ??DataTable4                    4
     ??DataTable6                    4
     ??DataTable7                    4
     ??DataTable8                    4
     ??DataTable11                   4
     ??DataTable12                   4
     ??DataTable13                   4
     ??DataTable14                   4
     ??DataTable15                   4
     ??DataTable16                   4
     ??DataTable17                   4
     ??DataTable18                   4
     ??DataTable19                   4
     ??DataTable20                   4
     ??DataTable21                   4
     ??DataTable22                   4
     ??DataTable23                   4
     ??DataTable24                   4
     ??DataTable25                   4
     ?<Constant "Wyladowana">       44
     ?<Constant "   ">               4
      Others                        66

 
   249 bytes in section .bss
 2 203 bytes in section .data
   112 bytes in section .rodata
 6 080 bytes in section Debug.txt
 
 5 636 bytes of CODE  memory (+ 444 bytes shared)
   112 bytes of CONST memory
 2 452 bytes of DATA  memory

Errors: none
Warnings: 31
